cscope 15 $HOME/fio_src               0003119182
	@arch/arch-aarch64.h

1 #i‚de‡
ARCH_AARCH64_H


2 
	#ARCH_AARCH64_H


	)

4 
	~<uni°d.h
>

5 
	~<°dlib.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<sys/waô.h
>

9 
	#FIO_ARCH
 (
¨ch_Ørch64
)

	)

11 
	#n›
 dÿ{ 
__asm__
 
	`__vﬁ©ûe__
 ("yõld"); } 0)

	)

12 
	#ªad_b¨rõr
(Ëdÿ{ 
	`__sync_synchr⁄ize
(); } 0)

	)

13 
	#wrôe_b¨rõr
(Ëdÿ{ 
	`__sync_synchr⁄ize
(); } 0)

	)

15 
ölöe
 
	$¨ch_ffz
(
bômask
)

17 
cou¡
, 
ªvî£d_bôs
;

18 i‡(~
bômask
 == 0)

21 
__asm__
 
	`__vﬁ©ûe__
 ("rbit %1, %2\n"

23 "Ù"(
cou¡
), "=&r"(
ªvî£d_bôs
) :

24 "r"(~
bômask
));

25  
cou¡
;

26 
	}
}

28 
	#ARCH_HAVE_FFZ


	)

30 
	#isb
(Ë
asm
 vﬁ©ûe("isb" : : : "mem‹y")

	)

32 
ölöe
 
	$gë_˝u_˛ock
()

34 
vÆ
;

36 
	`isb
();

37 
asm
 vﬁ©ûe("mr†%0, c¡v˘_ñ0" : "Ù" (
vÆ
));

38  
vÆ
;

39 
	}
}

40 
	#ARCH_HAVE_CPU_CLOCK


	)

42 
	#ARCH_HAVE_INIT


	)

43 
boﬁ
 
tsc_ªlübÀ
;

44 
ölöe
 
	$¨ch_öô
(*
ívp
[])

46 
tsc_ªlübÀ
 = 
åue
;

48 
	}
}

50 
	#__do_sysˇŒN
(...) ({ \

51 
__asm__
 volatile ( \

53 : "Ù"(
x0
) \

54 : 
__VA_ARGS__
 \

56 (Ë
x0
; \

57 })

	)

59 
	#__do_sysˇŒ0
(
__n
) ({ \

60 
x8
 
	`__asm__
("x8"Ë
__n
; \

61 
x0
 
	`__asm__
("x0"); \

63 
	`__do_sysˇŒN
("r" (
x8
)); \

64 })

	)

66 
	#__do_sysˇŒ1
(
__n
, 
__a
) ({ \

67 
x8
 
	`__asm__
("x8"Ë
__n
; \

68 
	`__ty≥of__
(
__a
Ë
x0
 
	`__asm__
("x0") = __a; \

70 
	`__do_sysˇŒN
("r" (
x8
), "0" (
x0
)); \

71 })

	)

73 
	#__do_sysˇŒ2
(
__n
, 
__a
, 
__b
) ({ \

74 
x8
 
	`__asm__
("x8"Ë
__n
; \

75 
	`__ty≥of__
(
__a
Ë
x0
 
	`__asm__
("x0") = __a; \

76 
	`__ty≥of__
(
__b
Ë
x1
 
	`__asm__
("x1") = __b; \

78 
	`__do_sysˇŒN
("r" (
x8
), "0" (
x0
), "r" (
x1
)); \

79 })

	)

81 
	#__do_sysˇŒ3
(
__n
, 
__a
, 
__b
, 
__c
) ({ \

82 
x8
 
	`__asm__
("x8"Ë
__n
; \

83 
	`__ty≥of__
(
__a
Ë
x0
 
	`__asm__
("x0") = __a; \

84 
	`__ty≥of__
(
__b
Ë
x1
 
	`__asm__
("x1") = __b; \

85 
	`__ty≥of__
(
__c
Ë
x2
 
	`__asm__
("x2") = __c; \

87 
	`__do_sysˇŒN
("r" (
x8
), "0" (
x0
), "r" (
x1
), "r" (
x2
)); \

88 })

	)

90 
	#__do_sysˇŒ4
(
__n
, 
__a
, 
__b
, 
__c
, 
__d
) ({ \

91 
x8
 
	`__asm__
("x8"Ë
__n
; \

92 
	`__ty≥of__
(
__a
Ë
x0
 
	`__asm__
("x0") = __a; \

93 
	`__ty≥of__
(
__b
Ë
x1
 
	`__asm__
("x1") = __b; \

94 
	`__ty≥of__
(
__c
Ë
x2
 
	`__asm__
("x2") = __c; \

95 
	`__ty≥of__
(
__d
Ë
x3
 
	`__asm__
("x3") = __d; \

97 
	`__do_sysˇŒN
("r" (
x8
), "0" (
x0
), "r" (
x1
), "r" (
x2
), "r" (
x3
));\

98 })

	)

100 
	#__do_sysˇŒ5
(
__n
, 
__a
, 
__b
, 
__c
, 
__d
, 
__e
) ({ \

101 
x8
 
	`__asm__
("x8"Ë
__n
; \

102 
	`__ty≥of__
(
__a
Ë
x0
 
	`__asm__
("x0") = __a; \

103 
	`__ty≥of__
(
__b
Ë
x1
 
	`__asm__
("x1") = __b; \

104 
	`__ty≥of__
(
__c
Ë
x2
 
	`__asm__
("x2") = __c; \

105 
	`__ty≥of__
(
__d
Ë
x3
 
	`__asm__
("x3") = __d; \

106 
	`__ty≥of__
(
__e
Ë
x4
 
	`__asm__
("x4") = __e; \

108 
	`__do_sysˇŒN
("r" (
x8
), "0" (
x0
), "r" (
x1
), "r" (
x2
), "r" (
x3
), \

109 "r"(
x4
)); \

110 })

	)

112 
	#__do_sysˇŒ6
(
__n
, 
__a
, 
__b
, 
__c
, 
__d
, 
__e
, 
__f
) ({ \

113 
x8
 
	`__asm__
("x8"Ë
__n
; \

114 
	`__ty≥of__
(
__a
Ë
x0
 
	`__asm__
("x0") = __a; \

115 
	`__ty≥of__
(
__b
Ë
x1
 
	`__asm__
("x1") = __b; \

116 
	`__ty≥of__
(
__c
Ë
x2
 
	`__asm__
("x2") = __c; \

117 
	`__ty≥of__
(
__d
Ë
x3
 
	`__asm__
("x3") = __d; \

118 
	`__ty≥of__
(
__e
Ë
x4
 
	`__asm__
("x4") = __e; \

119 
	`__ty≥of__
(
__f
Ë
x5
 
	`__asm__
("x5") = __f; \

121 
	`__do_sysˇŒN
("r" (
x8
), "0" (
x0
), "r" (
x1
), "r" (
x2
), "r" (
x3
), \

122 "r" (
x4
), "r"(
x5
)); \

123 })

	)

125 
	#FIO_ARCH_HAS_SYSCALL


	)

	@arch/arch-alpha.h

1 #i‚de‡
ARCH_ALPHA_H


2 
	#ARCH_ALPHA_H


	)

4 
	#FIO_ARCH
 (
¨ch_Æpha
)

	)

6 
	#n›
 dÿ{ } 0)

	)

7 
	#ªad_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
("mb": : :"mem‹y")

	)

8 
	#wrôe_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
("wmb": : :"mem‹y")

	)

	@arch/arch-arm.h

1 #i‚de‡
ARCH_ARM_H


2 
	#ARCH_ARM_H


	)

4 
	#FIO_ARCH
 (
¨ch_¨m
)

	)

6 #i‡
deföed
 (
__ARM_ARCH_4__
Ë|| deföed (
__ARM_ARCH_4T__
) \

7 || 
deföed
 (
__ARM_ARCH_5__
Ë|| deföed (
__ARM_ARCH_5T__
Ë|| deföed (
__ARM_ARCH_5E__
)\

8 || 
deföed
 (
__ARM_ARCH_5TE__
Ë|| deföed (
__ARM_ARCH_5TEJ__
) \

9 || 
deföed
(
__ARM_ARCH_6__
Ë|| deföed(
__ARM_ARCH_6J__
Ë|| deföed(
__ARM_ARCH_6Z__
Ë|| deföed(
__ARM_ARCH_6ZK__
) \

10 || 
deföed
(
__ARM_ARCH_6KZ__
Ë|| 
	$deföed
(
__ARM_ARCH_6K__
)

11 
	#n›
 
__asm__
 
	`__vﬁ©ûe__
("mov\å0,r0\t@Ç›\n\t")

	)

12 
	#ªad_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("" : : : "mem‹y")

	)

13 
	#wrôe_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("" : : : "mem‹y")

	)

14 #ñi‡
	`deföed
(
__ARM_ARCH_7A__
Ë|| deföed(
__ARM_ARCH_7VE__
Ë|| deföed(
__ARM_ARCH_8A__
)

15 
	#n›
 
__asm__
 
	`__vﬁ©ûe__
 ("n›")

	)

16 
	#ªad_b¨rõr
(Ë
	`__sync_synchr⁄ize
()

	)

17 
	#wrôe_b¨rõr
(Ë
	`__sync_synchr⁄ize
()

	)

	@arch/arch-generic.h

1 #i‚de‡
ARCH_GENERIC_H


2 
	#ARCH_GENERIC_H


	)

4 
	#FIO_ARCH
 (
¨ch_gíîic
)

	)

6 
	#n›
 dÿ{ } 0)

	)

7 
	#ªad_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
("": : :"mem‹y")

	)

8 
	#wrôe_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
("": : :"mem‹y")

	)

	@arch/arch-hppa.h

1 #i‚de‡
ARCH_HPPA_H


2 
	#ARCH_HPPA_H


	)

4 
	#FIO_ARCH
 (
¨ch_hµa
)

	)

6 
	#n›
 dÿ{ } 0)

	)

8 
	#ªad_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("" : : : "mem‹y")

	)

9 
	#wrôe_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("" : : : "mem‹y")

	)

	@arch/arch-ia64.h

1 #i‚de‡
ARCH_IA64_H


2 
	#ARCH_IA64_H


	)

4 
	#FIO_ARCH
 (
¨ch_ü64
)

	)

6 
	#n›
 
asm
 vﬁ©ûê("höà@∑u£" ::: "mem‹y");

	)

7 
	#ªad_b¨rõr
(Ë
asm
 vﬁ©ûê("mf" ::: "mem‹y")

	)

8 
	#wrôe_b¨rõr
(Ë
asm
 vﬁ©ûê("mf" ::: "mem‹y")

	)

10 
	#ü64_p›˙t
(
x
) \

12 
ü64_öåi_ªs
; \

13 
	`asm
 ("p›˙à%0=%1" : "Ù" (
ü64_öåi_ªs
Ë: "r" (
x
)); \

14 
ü64_öåi_ªs
; \

15 })

	)

17 
ölöe
 
	$¨ch_ffz
(
bômask
)

19  
	`ü64_p›˙t
(
bômask
 & (~bitmask - 1));

20 
	}
}

22 
ölöe
 
	$gë_˝u_˛ock
()

24 
ªt
;

26 
__asm__
 
	`__vﬁ©ûe__
("mov %0˜r.ôc" : "Ù" (
ªt
) : : "memory");

27  
ªt
;

28 
	}
}

30 
	#ARCH_HAVE_INIT


	)

31 
boﬁ
 
tsc_ªlübÀ
;

32 
ölöe
 
	$¨ch_öô
(*
ívp
[])

34 
tsc_ªlübÀ
 = 
åue
;

36 
	}
}

38 
	#ARCH_HAVE_FFZ


	)

39 
	#ARCH_HAVE_CPU_CLOCK


	)

	@arch/arch-mips.h

1 #i‚de‡
ARCH_MIPS64_H


2 
	#ARCH_MIPS64_H


	)

4 
	#FIO_ARCH
 (
¨ch_mùs
)

	)

6 
	#ªad_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
("": : :"mem‹y")

	)

7 
	#wrôe_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
("": : :"mem‹y")

	)

8 
	#n›
 
__asm__
 
	`__vﬁ©ûe__
("": : :"mem‹y")

	)

	@arch/arch-ppc.h

1 #i‚de‡
ARCH_PPC_H


2 
	#ARCH_PPC_H


	)

4 
	~<uni°d.h
>

5 
	~<°dlib.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<sys/waô.h
>

9 
	#FIO_ARCH
 (
¨ch_µc
)

	)

11 
	#n›
 dÿ{ } 0)

	)

13 #ifde‡
__powîpc64__


14 
	#ªad_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("lwsync" : : : "mem‹y")

	)

16 
	#ªad_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("sync" : : : "mem‹y")

	)

19 
	#wrôe_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("sync" : : : "mem‹y")

	)

21 #ifde‡
__powîpc64__


22 
	#PPC_CNTLZL
 "˙ézd"

	)

24 
	#PPC_CNTLZL
 "˙ézw"

	)

27 
ölöe
 
	$__ûog2
(
bômask
)

29 
lz
;

31 
	`asm
 (
PPC_CNTLZL
 " %0,%1" : "Ù" (
lz
Ë: "r" (
bômask
));

32  
BITS_PER_LONG
 - 1 - 
lz
;

33 
	}
}

35 
ölöe
 
	$¨ch_ffz
(
bômask
)

37 i‡((
bômask
 = ~bitmask) == 0)

38  
BITS_PER_LONG
;

39  
	`__ûog2
(
bômask
 & -bitmask);

40 
	}
}

42 
ölöe
 
	$mf•r
(
ªg
)

44 
vÆ
;

46 
asm
 vﬁ©ûe("mf•∏%0,%1": "Ù" (
vÆ
Ë: "K" (
ªg
));

47  
vÆ
;

48 
	}
}

50 
	#SPRN_TBRL
 0x10C

	)

51 
	#SPRN_TBRU
 0x10D

	)

52 
	#SPRN_ATBL
 0x20E

	)

53 
	#SPRN_ATBU
 0x20F

	)

55 #ifde‡
__powîpc64__


56 
ölöe
 
	$gë_˝u_˛ock
()

58 
rvÆ
;

60 
asm
 volatile(

64 : "Ù" (
rvÆ
)

65 : "i" (
SPRN_TBRL
)

68  
rvÆ
;

69 
	}
}

71 
ölöe
 
	$gë_˝u_˛ock
()

73 
tbl
, 
tbu0
, 
tbu1
;

74 
ªt
;

77 i‡(
¨ch_Êags
 & 
ARCH_FLAG_1
) {

78 
tbu0
 = 
	`mf•r
(
SPRN_ATBU
);

79 
tbl
 = 
	`mf•r
(
SPRN_ATBL
);

80 
tbu1
 = 
	`mf•r
(
SPRN_ATBU
);

82 
tbu0
 = 
	`mf•r
(
SPRN_TBRU
);

83 
tbl
 = 
	`mf•r
(
SPRN_TBRL
);

84 
tbu1
 = 
	`mf•r
(
SPRN_TBRU
);

86 } 
tbu0
 !
tbu1
);

88 
ªt
 = ((()
tbu0
Ë<< 32Ë| 
tbl
;

89  
ªt
;

90 
	}
}

94 
	$©b_chûd
()

96 
¨ch_Êags
 |
ARCH_FLAG_1
;

97 
	`gë_˝u_˛ock
();

98 
	`_exô
(0);

99 
	}
}

101 
	$©b_˛ockã°
()

103 
pid_t
 
pid
;

105 
pid
 = 
	`f‹k
();

106 i‡(!
pid
)

107 
	`©b_chûd
();

108 i‡(
pid
 != -1) {

109 
°©us
;

111 
pid
 = 
	`waô
(&
°©us
);

112 i‡(
pid
 =-1 || !
	`WIFEXITED
(
°©us
))

113 
¨ch_Êags
 &~
ARCH_FLAG_1
;

115 
¨ch_Êags
 |
ARCH_FLAG_1
;

117 
	}
}

120 
	#ARCH_HAVE_INIT


	)

121 
boﬁ
 
tsc_ªlübÀ
;

123 
ölöe
 
	$¨ch_öô
(*
ívp
[])

126 
tsc_ªlübÀ
 = 
åue
;

127 
	`©b_˛ockã°
();

130 
	}
}

132 
	#ARCH_HAVE_FFZ


	)

145 #ifde‡
__powîpc64__


146 
	#ARCH_HAVE_CPU_CLOCK


	)

	@arch/arch-s390.h

1 #i‚de‡
ARCH_S390_H


2 
	#ARCH_S390_H


	)

4 
	#FIO_ARCH
 (
¨ch_s390
)

	)

6 
	#n›
 
asm
 vﬁ©ûe("n›" : : : "mem‹y")

	)

7 
	#ªad_b¨rõr
(Ë
asm
 vﬁ©ûe("b¸ 15,0" : : : "mem‹y")

	)

8 
	#wrôe_b¨rõr
(Ë
asm
 vﬁ©ûe("b¸ 15,0" : : : "mem‹y")

	)

10 
ölöe
 
	$gë_˝u_˛ock
()

12 
˛k
;

14 #ifde‡
CONFIG_S390_Z196_FACILITIES


19 
__asm__
 
	`__vﬁ©ûe__
("°ck‡%0" : "=Q" (
˛k
) : : "cc");

21 
__asm__
 
	`__vﬁ©ûe__
("°ck %0" : "=Q" (
˛k
) : : "cc");

23  
˛k
>>12;

24 
	}
}

26 
	#ARCH_CPU_CLOCK_CYCLES_PER_USEC
 1

	)

27 
	#ARCH_HAVE_CPU_CLOCK


	)

28 #unde‡
ARCH_CPU_CLOCK_WRAPS


30 
	#ARCH_HAVE_INIT


	)

31 
boﬁ
 
tsc_ªlübÀ
;

32 
ölöe
 
	$¨ch_öô
(*
ívp
[])

34 
tsc_ªlübÀ
 = 
åue
;

36 
	}
}

	@arch/arch-sh.h

3 #i‚de‡
ARCH_SH_H


4 
	#ARCH_SH_H


	)

6 
	#FIO_ARCH
 (
¨ch_sh
)

	)

8 
	#n›
 
__asm__
 
	`__vﬁ©ûe__
 ("n›": : :"mem‹y")

	)

10 
	#mb
() \

12 i‡(
¨ch_Êags
 & 
ARCH_FLAG_1
) \

13 
__asm__
 
	`__vﬁ©ûe__
 ("synco": : :"memory"); \

15 
__asm__
 
	`__vﬁ©ûe__
 (" " : : : "memory"); \

16 } 0)

	)

18 
	#ªad_b¨rõr
(Ë
	`mb
()

	)

19 
	#wrôe_b¨rõr
(Ë
	`mb
()

	)

21 
	~<°dio.h
>

22 
	~<ñf.h
>

24 
¨ch_Êags
;

26 
	#CPU_HAS_LLSC
 0x0040

	)

28 
ölöe
 
	$¨ch_öô
(*
ívp
[])

30 
Elf32_auxv_t
 *
auxv
;

32 *
ívp
++ !
NULL
)

35 
auxv
 = (
Elf32_auxv_t
 *Ë
ívp
;áuxv->
a_ty≥
 !
AT_NULL
;áuxv++) {

36 i‡(
auxv
->
a_ty≥
 =
AT_HWCAP
) {

37 i‡(
auxv
->
a_un
.
a_vÆ
 & 
CPU_HAS_LLSC
) {

38 
¨ch_Êags
 |
ARCH_FLAG_1
;

45 
	}
}

47 
	#ARCH_HAVE_INIT


	)

	@arch/arch-sparc.h

1 #i‚de‡
ARCH_SPARC_H


2 
	#ARCH_SPARC_H


	)

4 
	#FIO_ARCH
 (
¨ch_•¨c
)

	)

6 
	#n›
 dÿ{ } 0)

	)

8 
	#ªad_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("" : : : "mem‹y")

	)

9 
	#wrôe_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("" : : : "mem‹y")

	)

	@arch/arch-sparc64.h

1 #i‚de‡
ARCH_SPARC64_H


2 
	#ARCH_SPARC64_H


	)

4 
	#FIO_ARCH
 (
¨ch_•¨c64
)

	)

6 
	#n›
 dÿ{ } 0)

	)

8 
	#memb¨_ß„
(
ty≥
) \

9 dÿ{ 
__asm__
 
	`__vﬁ©ûe__
("ba,pt %%xcc, 1f\n\t" \

10 " memb¨ " 
ty≥
 "\n" \

13 } 0)

	)

15 
	#ªad_b¨rõr
(Ë
	`memb¨_ß„
("#LﬂdLﬂd")

	)

16 
	#wrôe_b¨rõr
(Ë
	`memb¨_ß„
("#St‹eSt‹e")

	)

	@arch/arch-x86-common.h

1 #i‚de‡
FIO_ARCH_X86_COMMON


2 
	#FIO_ARCH_X86_COMMON


	)

4 
	~<°rög.h
>

6 
ölöe
 
	$˝uid
(
›
,

7 *
óx
, *
ebx
,

8 *
ecx
, *
edx
)

10 *
óx
 = 
›
;

11 *
ecx
 = 0;

12 
	`do_˝uid
(
óx
, 
ebx
, 
ecx
, 
edx
);

13 
	}
}

15 
	#ARCH_HAVE_INIT


	)

17 
boﬁ
 
tsc_ªlübÀ
;

18 
¨ch_øndom
;

20 
ölöe
 
	$¨ch_öô_öãl
()

22 
óx
, 
ebx
, 
ecx
 = 0, 
edx
;

27 
óx
 = 1;

28 
	`do_˝uid
(&
óx
, &
ebx
, &
ecx
, &
edx
);

29 i‡(!(
edx
 & (1U << 4)))

35 
óx
 = 0x80000007;

36 
	`do_˝uid
(&
óx
, &
ebx
, &
ecx
, &
edx
);

37 
tsc_ªlübÀ
 = (
edx
 & (1U << 8)) != 0;

42 
óx
 = 0x1;

43 
	`do_˝uid
(&
óx
, &
ebx
, &
ecx
, &
edx
);

44 
¨ch_øndom
 = (
ecx
 & (1U << 30)) != 0;

45 
	}
}

47 
ölöe
 
	$¨ch_öô_amd
()

49 
óx
, 
ebx
, 
ecx
, 
edx
;

51 
	`˝uid
(0x80000000, &
óx
, &
ebx
, &
ecx
, &
edx
);

52 i‡(
óx
 < 0x80000007)

55 
	`˝uid
(0x80000007, &
óx
, &
ebx
, &
ecx
, &
edx
);

56 
tsc_ªlübÀ
 = (
edx
 & (1U << 8)) != 0;

57 
	}
}

59 
ölöe
 
	$¨ch_öô
(*
ívp
[])

61 
Àvñ
;

62 
°r
[13];

64 
¨ch_øndom
 = 
tsc_ªlübÀ
 = 0;

66 
	`˝uid
(0, &
Àvñ
, (*Ë&
°r
[0],

67 (*Ë&
°r
[8],

68 (*Ë&
°r
[4]);

70 
°r
[12] = '\0';

71 i‡(!
	`°rcmp
(
°r
, "GenuineIntel"))

72 
	`¨ch_öô_öãl
();

73 i‡(!
	`°rcmp
(
°r
, "AuthenticAMD") || !strcmp(str, "HygonGenuine"))

74 
	`¨ch_öô_amd
();

75 
	}
}

	@arch/arch-x86.h

1 #i‚de‡
ARCH_X86_H


2 
	#ARCH_X86_H


	)

4 
ölöe
 
	$do_˝uid
(*
óx
, *
ebx
,

5 *
ecx
, *
edx
)

7 
asm
 volatile("xchgl %%ebx, %1\ncpuid\nxchgl %%ebx, %1"

8 : "˜" (*
óx
), "Ù" (*
ebx
), "=c" (*
ecx
), "=d" (*
edx
)

9 : "0" (*
óx
)

11 
	}
}

13 
	~"¨ch-x86-comm⁄.h
"

15 
	#FIO_ARCH
 (
¨ch_x86
)

	)

17 
	#FIO_HUGE_PAGE
 4194304

	)

19 
	#n›
 
__asm__
 
	`__vﬁ©ûe__
("ªp;n›": : :"mem‹y")

	)

20 
	#ªad_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
("": : :"mem‹y")

	)

21 
	#wrôe_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
("": : :"mem‹y")

	)

23 
ölöe
 
	$¨ch_ffz
(
bômask
)

25 
	`__asm__
("bsÊ %1,%0" :"Ù" (
bômask
) :"r" (~bitmask));

26  
bômask
;

27 
	}
}

29 
ölöe
 
	$gë_˝u_˛ock
()

31 
ªt
;

33 
__asm__
 
	`__vﬁ©ûe__
("rdtsc" : "=A" (
ªt
));

34  
ªt
;

35 
	}
}

37 
	#ARCH_HAVE_FFZ


	)

38 
	#ARCH_HAVE_CPU_CLOCK


	)

	@arch/arch-x86_64.h

1 #i‚de‡
ARCH_X86_64_H


2 
	#ARCH_X86_64_H


	)

4 
ölöe
 
	$do_˝uid
(*
óx
, *
ebx
,

5 *
ecx
, *
edx
)

7 
asm
 volatile("cpuid"

8 : "˜" (*
óx
), "=b" (*
ebx
), "=c" (*
ecx
), "=d" (*
edx
)

9 : "0" (*
óx
), "2" (*
ecx
)

11 
	}
}

13 
	~"¨ch-x86-comm⁄.h
"

15 
	#FIO_ARCH
 (
¨ch_x86_64
)

	)

17 
	#FIO_HUGE_PAGE
 2097152

	)

19 
	#n›
 
__asm__
 
	`__vﬁ©ûe__
("ªp;n›": : :"mem‹y")

	)

20 
	#ªad_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
("":::"mem‹y")

	)

21 
	#wrôe_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
("":::"mem‹y")

	)

23 
ölöe
 
	$¨ch_ffz
(
bômask
)

25 
	`__asm__
("bs‡%1,%0" :"Ù" (
bômask
) :"r" (~bitmask));

26  
bômask
;

27 
	}
}

29 
ölöe
 
	$gë_˝u_˛ock
()

31 
lo
, 
hi
;

33 
__asm__
 
	`__vﬁ©ûe__
("rdtsc" : "˜" (
lo
), "=d" (
hi
));

34  ((Ë
hi
 << 32ULLË| 
lo
;

35 
	}
}

37 
	#ARCH_HAVE_FFZ


	)

38 
	#ARCH_HAVE_SSE4_2


	)

39 
	#ARCH_HAVE_CPU_CLOCK


	)

41 
	#RDRAND_LONG
 ".byã 0x48,0x0f,0xc7,0xf0"

	)

42 
	#RDSEED_LONG
 ".byã 0x48,0x0f,0xc7,0xf8"

	)

43 
	#RDRAND_RETRY
 100

	)

45 
ölöe
 
	$¨ch_ønd_l⁄g
(*
vÆ
)

47 
ok
;

49 
asm
 vﬁ©ûe("1: " 
RDRAND_LONG
 "\n\t"

54 : "Ù" (
ok
), "˜" (*
vÆ
)

55 : "0" (
RDRAND_RETRY
));

57  
ok
;

58 
	}
}

60 
ölöe
 
	$¨ch_ønd_£ed
(*
£ed
)

62 
ok
;

64 
asm
 vﬁ©ûe(
RDSEED_LONG
 "\n\t"

66 : "=qm" (
ok
), "˜" (*
£ed
));

69 
	}
}

71 
	#__do_sysˇŒ0
(
NUM
) ({ \

72 
öçå_t
 
øx
; \

74 
__asm__
 volatile( \

76 : "˜"(
øx
) \

77 : "a"(
NUM
) \

80 
øx
; \

81 })

	)

83 
	#__do_sysˇŒ1
(
NUM
, 
ARG1
) ({ \

84 
öçå_t
 
øx
; \

86 
__asm__
 volatile( \

88 : "˜"(
øx
) \

89 : "a"((
NUM
)), \

90 "D"((
ARG1
)) \

93 
øx
; \

94 })

	)

96 
	#__do_sysˇŒ2
(
NUM
, 
ARG1
, 
ARG2
) ({ \

97 
öçå_t
 
øx
; \

99 
__asm__
 volatile( \

101 : "˜"(
øx
) \

102 : "a"((
NUM
)), \

103 "D"((
ARG1
)), \

104 "S"((
ARG2
)) \

107 
øx
; \

108 })

	)

110 
	#__do_sysˇŒ3
(
NUM
, 
ARG1
, 
ARG2
, 
ARG3
) ({ \

111 
öçå_t
 
øx
; \

113 
__asm__
 volatile( \

115 : "˜"(
øx
) \

116 : "a"((
NUM
)), \

117 "D"((
ARG1
)), \

118 "S"((
ARG2
)), \

119 "d"((
ARG3
)) \

122 
øx
; \

123 })

	)

125 
	#__do_sysˇŒ4
(
NUM
, 
ARG1
, 
ARG2
, 
ARG3
, 
ARG4
) ({ \

126 
öçå_t
 
øx
; \

127 
	`__ty≥of__
(
ARG4
Ë
__r10
 
	`__asm__
("r10") = (ARG4); \

129 
__asm__
 volatile( \

131 : "˜"(
øx
) \

132 : "a"((
NUM
)), \

133 "D"((
ARG1
)), \

134 "S"((
ARG2
)), \

135 "d"((
ARG3
)), \

136 "r"(
__r10
) \

139 
øx
; \

140 })

	)

142 
	#__do_sysˇŒ5
(
NUM
, 
ARG1
, 
ARG2
, 
ARG3
, 
ARG4
, 
ARG5
) ({ \

143 
öçå_t
 
øx
; \

144 
	`__ty≥of__
(
ARG4
Ë
__r10
 
	`__asm__
("r10") = (ARG4); \

145 
	`__ty≥of__
(
ARG5
Ë
__r8
 
	`__asm__
("r8") = (ARG5); \

147 
__asm__
 volatile( \

149 : "˜"(
øx
) \

150 : "a"((
NUM
)), \

151 "D"((
ARG1
)), \

152 "S"((
ARG2
)), \

153 "d"((
ARG3
)), \

154 "r"(
__r10
), \

155 "r"(
__r8
) \

158 
øx
; \

159 })

	)

161 
	#__do_sysˇŒ6
(
NUM
, 
ARG1
, 
ARG2
, 
ARG3
, 
ARG4
, 
ARG5
, 
ARG6
) ({ \

162 
öçå_t
 
øx
; \

163 
	`__ty≥of__
(
ARG4
Ë
__r10
 
	`__asm__
("r10") = (ARG4); \

164 
	`__ty≥of__
(
ARG5
Ë
__r8
 
	`__asm__
("r8") = (ARG5); \

165 
	`__ty≥of__
(
ARG6
Ë
__r9
 
	`__asm__
("r9") = (ARG6); \

167 
__asm__
 volatile( \

169 : "˜"(
øx
) \

170 : "a"((
NUM
)), \

171 "D"((
ARG1
)), \

172 "S"((
ARG2
)), \

173 "d"((
ARG3
)), \

174 "r"(
__r10
), \

175 "r"(
__r8
), \

176 "r"(
__r9
) \

179 
øx
; \

180 })

	)

182 
	#FIO_ARCH_HAS_SYSCALL


	)

	@arch/arch.h

1 #i‚de‡
ARCH_H


2 
	#ARCH_H


	)

4 #ifde‡
__˝lu•lus


5 
	~<©omic
>

7 
	~<°d©omic.h
>

10 
	~"../lib/ty≥s.h
"

13 
	m¨ch_x86_64
 = 1,

14 
	m¨ch_x86
,

15 
	m¨ch_µc
,

16 
	m¨ch_ü64
,

17 
	m¨ch_s390
,

18 
	m¨ch_Æpha
,

19 
	m¨ch_•¨c
,

20 
	m¨ch_•¨c64
,

21 
	m¨ch_¨m
,

22 
	m¨ch_sh
,

23 
	m¨ch_hµa
,

24 
	m¨ch_mùs
,

25 
	m¨ch_Ørch64
,

27 
	m¨ch_gíîic
,

29 
	m¨ch_ƒ
,

33 
	mARCH_FLAG_1
 = 1 << 0,

34 
	mARCH_FLAG_2
 = 1 << 1,

35 
	mARCH_FLAG_3
 = 1 << 2,

36 
	mARCH_FLAG_4
 = 1 << 3,

39 
¨ch_Êags
;

41 
	#ARCH_CPU_CLOCK_WRAPS


	)

43 #ifde‡
__˝lu•lus


44 
	#©omic_add
(
p
, 
v
) \

45 
°d
::
	`©omic_„tch_add
(
p
, (
v
))

	)

46 
	#©omic_sub
(
p
, 
v
) \

47 
°d
::
	`©omic_„tch_sub
(
p
, (
v
))

	)

48 
	#©omic_lﬂd_ªœxed
(
p
) \

49 
°d
::
	`©omic_lﬂd_ex∂icô
(
p
, \

50 
°d
::
mem‹y_‹dî_ªœxed
)

	)

51 
	#©omic_lﬂd_acquúe
(
p
) \

52 
°d
::
	`©omic_lﬂd_ex∂icô
(
p
, \

53 
°d
::
mem‹y_‹dî_acquúe
)

	)

54 
	#©omic_°‹e_ªÀa£
(
p
, 
v
) \

55 
°d
::
	`©omic_°‹e_ex∂icô
(
p
, (
v
), \

56 
°d
::
mem‹y_‹dî_ªÀa£
)

	)

58 
	#©omic_add
(
p
, 
v
) \

59 
	`©omic_„tch_add
((
_Atomic
 
	`ty≥of
(*(
p
)Ë*)’), 
v
)

	)

60 
	#©omic_sub
(
p
, 
v
) \

61 
	`©omic_„tch_sub
((
_Atomic
 
	`ty≥of
(*(
p
)Ë*)’), 
v
)

	)

62 
	#©omic_lﬂd_ªœxed
(
p
) \

63 
	`©omic_lﬂd_ex∂icô
((
_Atomic
 
	`ty≥of
(*(
p
)) *)(p), \

64 
mem‹y_‹dî_ªœxed
)

	)

65 
	#©omic_lﬂd_acquúe
(
p
) \

66 
	`©omic_lﬂd_ex∂icô
((
_Atomic
 
	`ty≥of
(*(
p
)) *)(p), \

67 
mem‹y_‹dî_acquúe
)

	)

68 
	#©omic_°‹e_ªÀa£
(
p
, 
v
) \

69 
	`©omic_°‹e_ex∂icô
((
_Atomic
 
	`ty≥of
(*(
p
)Ë*)’), (
v
), \

70 
mem‹y_‹dî_ªÀa£
)

	)

74 #i‡
deföed
(
__i386__
)

75 
	~"¨ch-x86.h
"

76 #ñi‡
deföed
(
__x86_64__
)

77 
	~"¨ch-x86_64.h
"

78 #ñi‡
deföed
(
__powîpc__
Ë|| deföed(
__powîpc64__
Ë|| deföed(
__µc__
)

79 
	~"¨ch-µc.h
"

80 #ñi‡
deföed
(
__ü64__
)

81 
	~"¨ch-ü64.h
"

82 #ñi‡
deföed
(
__Æpha__
)

83 
	~"¨ch-Æpha.h
"

84 #ñi‡
deföed
(
__s390x__
Ë|| deföed(
__s390__
)

85 
	~"¨ch-s390.h
"

86 #ñi‡
deföed
(
__•¨c__
)

87 
	~"¨ch-•¨c.h
"

88 #ñi‡
deföed
(
__•¨c64__
)

89 
	~"¨ch-•¨c64.h
"

90 #ñi‡
deföed
(
__¨m__
)

91 
	~"¨ch-¨m.h
"

92 #ñi‡
deföed
(
__mùs__
Ë|| deföed(
__mùs64__
)

93 
	~"¨ch-mùs.h
"

94 #ñi‡
deföed
(
__sh__
)

95 
	~"¨ch-sh.h
"

96 #ñi‡
deföed
(
__hµa__
)

97 
	~"¨ch-hµa.h
"

98 #ñi‡
deföed
(
__Ørch64__
)

99 
	~"¨ch-Ørch64.h
"

102 
	~"¨ch-gíîic.h
"

105 
	~"../lib/ffz.h
"

108 #i‚de‡
ARCH_HAVE_INIT


109 
ölöe
 
	$¨ch_öô
(*
ívp
[])

112 
	}
}

115 #ifde‡
__Æpha__


120 #i‚de‡
__NR_io_urög_£tup


121 
	#__NR_io_urög_£tup
 535

	)

123 #i‚de‡
__NR_io_urög_íãr


124 
	#__NR_io_urög_íãr
 536

	)

126 #i‚de‡
__NR_io_urög_ªgi°î


127 
	#__NR_io_urög_ªgi°î
 537

	)

130 #i‚de‡
__NR_io_urög_£tup


131 
	#__NR_io_urög_£tup
 425

	)

133 #i‚de‡
__NR_io_urög_íãr


134 
	#__NR_io_urög_íãr
 426

	)

136 #i‚de‡
__NR_io_urög_ªgi°î


137 
	#__NR_io_urög_ªgi°î
 427

	)

141 
	#ARCH_HAVE_IOURING


	)

	@backend.c

24 
	~<uni°d.h
>

25 
	~<°rög.h
>

26 
	~<sig«l.h
>

27 
	~<as£π.h
>

28 
	~<öây≥s.h
>

29 
	~<sys/°©.h
>

30 
	~<sys/waô.h
>

31 
	~<m©h.h
>

32 
	~<±hªad.h
>

34 
	~"fio.h
"

35 
	~"smÆloc.h
"

36 
	~"vîify.h
"

37 
	~"diskutû.h
"

38 
	~"cgroup.h
"

39 
	~"¥ofûe.h
"

40 
	~"lib/ønd.h
"

41 
	~"lib/memÆign.h
"

42 
	~"£rvî.h
"

43 
	~"lib/gërußge.h
"

44 
	~"idÀtime.h
"

45 
	~"îr.h
"

46 
	~"w‹kqueue.h
"

47 
	~"lib/mou¡check.h
"

48 
	~"øã-submô.h
"

49 
	~"hñ≥r_thªad.h
"

50 
	~"psh¨ed.h
"

51 
	~"z⁄e-di°.h
"

53 
fio_£m
 *
	g°¨tup_£m
;

54 
Êi°_hód
 *
	gcgroup_li°
;

55 
cgroup_m¡
 *
	gcgroup_m¡
;

56 
	gexô_vÆue
;

57 vﬁ©ûê
boﬁ
 
	gfio_ab‹t
;

58 
	gƒ_¥o˚ss
 = 0;

59 
	gƒ_thªad
 = 0;

61 
io_log
 *
	gagg_io_log
[
DDIR_RWDIR_CNT
];

63 
	ggroupid
 = 0;

64 
	gthªad_numbî
 = 0;

65 
	gƒ_£gmíts
 = 0;

66 
	gcur_£gmít
 = 0;

67 
	g°©_numbî
 = 0;

68 
	gãmp_°Æl_ts
;

69 
	gd⁄e_£cs
 = 0;

70 #ifde‡
PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP


71 
±hªad_muãx_t
 
	govîœp_check
 = 
PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
;

73 
±hªad_muãx_t
 
	govîœp_check
 = 
PTHREAD_MUTEX_INITIALIZER
;

76 
	#JOB_START_TIMEOUT
 (5 * 1000)

	)

78 
	$sig_öt
(
sig
)

80 i‡(
ƒ_£gmíts
) {

81 i‡(
is_backíd
)

82 
	`fio_£rvî_gŸ_sig«l
(
sig
);

84 
	`log_öfo
("\nfio:Åîmö©ög o¿sig«»%d\n", 
sig
);

85 
	`log_öfo_Êush
();

86 
exô_vÆue
 = 128;

89 
	`fio_ãrmö©e_thªads
(
TERMINATE_ALL
, TERMINATE_ALL);

91 
	}
}

93 #ifde‡
WIN32


94 
	$sig_bªak
(
sig
)

96 
thªad_d©a
 *
td
;

97 
i
;

99 
	`sig_öt
(
sig
);

105 
	`f‹_óch_td
(
td
, 
i
) {

106 
td
->
run°©e
 < 
TD_EXITED
)

107 
	`¶ìp
(1);

109 
	}
}

112 
	$sig_show_°©us
(
sig
)

114 
	`show_ru¬ög_run_°©s
();

115 
	}
}

117 
	$£t_sig_h™dÀrs
()

119 
siga˘i⁄
 
a˘
;

121 
	`mem£t
(&
a˘
, 0, (act));

122 
a˘
.
ß_h™dÀr
 = 
sig_öt
;

123 
a˘
.
ß_Êags
 = 
SA_RESTART
;

124 
	`siga˘i⁄
(
SIGINT
, &
a˘
, 
NULL
);

126 
	`mem£t
(&
a˘
, 0, (act));

127 
a˘
.
ß_h™dÀr
 = 
sig_öt
;

128 
a˘
.
ß_Êags
 = 
SA_RESTART
;

129 
	`siga˘i⁄
(
SIGTERM
, &
a˘
, 
NULL
);

132 #ifde‡
WIN32


133 
	`mem£t
(&
a˘
, 0, (act));

134 
a˘
.
ß_h™dÀr
 = 
sig_bªak
;

135 
a˘
.
ß_Êags
 = 
SA_RESTART
;

136 
	`siga˘i⁄
(
SIGBREAK
, &
a˘
, 
NULL
);

139 
	`mem£t
(&
a˘
, 0, (act));

140 
a˘
.
ß_h™dÀr
 = 
sig_show_°©us
;

141 
a˘
.
ß_Êags
 = 
SA_RESTART
;

142 
	`siga˘i⁄
(
SIGUSR1
, &
a˘
, 
NULL
);

144 i‡(
is_backíd
) {

145 
	`mem£t
(&
a˘
, 0, (act));

146 
a˘
.
ß_h™dÀr
 = 
sig_öt
;

147 
a˘
.
ß_Êags
 = 
SA_RESTART
;

148 
	`siga˘i⁄
(
SIGPIPE
, &
a˘
, 
NULL
);

150 
	}
}

155 
boﬁ
 
	$__check_mö_øã
(
thªad_d©a
 *
td
, 
time•ec
 *
now
,

156 
fio_ddú
 
ddú
)

158 
cuºít_øã_check_byãs
 = 
td
->
this_io_byãs
[
ddú
];

159 
cuºít_øã_check_blocks
 = 
td
->
this_io_blocks
[
ddú
];

160 
›ti⁄_øã_byãs_mö
 = 
td
->
o
.
øãmö
[
ddú
];

161 
›ti⁄_øã_i›s_mö
 = 
td
->
o
.
øã_i›s_mö
[
ddú
];

163 
	`as£π
(
	`ddú_rw
(
ddú
));

165 i‡(!
td
->
o
.
øãmö
[
ddú
] && !td->o.
øã_i›s_mö
[ddir])

166  
Ál£
;

171 i‡(
	`mtime_sö˚
(&
td
->
°¨t
, 
now
) < 2000)

172  
Ál£
;

178 i‡(
td
->
œ°_øã_check_byãs
[
ddú
] ||Åd->
œ°_øã_check_blocks
[ddir]) {

179 
•ít
 = 
	`mtime_sö˚
(&
td
->
œ°_øã_check_time
[
ddú
], 
now
);

180 i‡(
•ít
 < 
td
->
o
.
øãcy˛e
 || spent==0)

181  
Ál£
;

183 i‡(
td
->
o
.
øãmö
[
ddú
]) {

187 
cuºít_øã_byãs
 =

188 ((
cuºít_øã_check_byãs
 - 
td
->
œ°_øã_check_byãs
[
ddú
]Ë* 1000Ë/ 
•ít
;

189 i‡(
cuºít_øã_byãs
 < 
›ti⁄_øã_byãs_mö
) {

190 
	`log_îr
("%s:Ñate_min=%lluB/sÇot met, got %lluB/s\n",

191 
td
->
o
.
«me
, 
›ti⁄_øã_byãs_mö
, 
cuºít_øã_byãs
);

192  
åue
;

198 
cuºít_øã_i›s
 =

199 ((
cuºít_øã_check_blocks
 - 
td
->
œ°_øã_check_blocks
[
ddú
]Ë* 1000Ë/ 
•ít
;

201 i‡(
cuºít_øã_i›s
 < 
›ti⁄_øã_i›s_mö
) {

202 
	`log_îr
("%s:Ñate_iops_min=%uÇot met, got %llu IOPS\n",

203 
td
->
o
.
«me
, 
›ti⁄_øã_i›s_mö
, 
cuºít_øã_i›s
);

204  
åue
;

209 
td
->
œ°_øã_check_byãs
[
ddú
] = 
cuºít_øã_check_byãs
;

210 
td
->
œ°_øã_check_blocks
[
ddú
] = 
cuºít_øã_check_blocks
;

211 
	`mem˝y
(&
td
->
œ°_øã_check_time
[
ddú
], 
now
, (*now));

212  
Ál£
;

213 
	}
}

215 
boﬁ
 
	$check_mö_øã
(
thªad_d©a
 *
td
, 
time•ec
 *
now
)

217 
boﬁ
 
ªt
 = 
Ál£
;

219 
	`f‹_óch_rw_ddú
(
ddú
) {

220 i‡(
td
->
byãs_d⁄e
[
ddú
])

221 
ªt
 |
	`__check_mö_øã
(
td
, 
now
, 
ddú
);

224  
ªt
;

225 
	}
}

231 
	$˛ónup_≥ndög_aio
(
thªad_d©a
 *
td
)

233 
r
;

238 
r
 = 
	`io_u_queued_com∂ëe
(
td
, 0);

243 i‡(
td
->
io_›s
->
ˇn˚l
) {

244 
io_u
 *io_u;

245 
i
;

247 
	`io_u_qôî
(&
td
->
io_u_Æl
, 
io_u
, 
i
) {

248 i‡(
io_u
->
Êags
 & 
IO_U_F_FLIGHT
) {

249 
r
 = 
td
->
io_›s
->
	`ˇn˚l
—d, 
io_u
);

250 i‡(!
r
)

251 
	`put_io_u
(
td
, 
io_u
);

256 i‡(
td
->
cur_dïth
)

257 
r
 = 
	`io_u_queued_com∂ëe
(
td
,Åd->
cur_dïth
);

258 
	}
}

264 
boﬁ
 
	$fio_io_sync
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

266 
io_u
 *io_u = 
	`__gë_io_u
(
td
);

267 
fio_q_°©us
 
ªt
;

269 i‡(!
io_u
)

270  
åue
;

272 
io_u
->
ddú
 = 
DDIR_SYNC
;

273 
io_u
->
fûe
 = 
f
;

274 
	`io_u_£t
(
td
, 
io_u
, 
IO_U_F_NO_FILE_PUT
);

276 i‡(
	`td_io_¥ï
(
td
, 
io_u
)) {

277 
	`put_io_u
(
td
, 
io_u
);

278  
åue
;

281 
ªqueue
:

282 
ªt
 = 
	`td_io_queue
(
td
, 
io_u
);

283 
ªt
) {

284 
FIO_Q_QUEUED
:

285 
	`td_io_commô
(
td
);

286 i‡(
	`io_u_queued_com∂ëe
(
td
, 1) < 0)

287  
åue
;

289 
FIO_Q_COMPLETED
:

290 i‡(
io_u
->
îr‹
) {

291 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "td_io_queue");

292  
åue
;

295 i‡(
	`io_u_sync_com∂ëe
(
td
, 
io_u
) < 0)

296  
åue
;

298 
FIO_Q_BUSY
:

299 
	`td_io_commô
(
td
);

300 
ªqueue
;

303  
Ál£
;

304 
	}
}

306 
	$fio_fûe_fsync
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

308 
ªt
, 
ªt2
;

310 i‡(
	`fio_fûe_›í
(
f
))

311  
	`fio_io_sync
(
td
, 
f
);

313 i‡(
	`td_io_›í_fûe
(
td
, 
f
))

316 
ªt
 = 
	`fio_io_sync
(
td
, 
f
);

317 
ªt2
 = 0;

318 i‡(
	`fio_fûe_›í
(
f
))

319 
ªt2
 = 
	`td_io_˛o£_fûe
(
td
, 
f
);

320  (
ªt
 || 
ªt2
);

321 
	}
}

323 
ölöe
 
	$__upd©e_ts_ˇche
(
thªad_d©a
 *
td
)

325 
	`fio_gëtime
(&
td
->
ts_ˇche
, 
NULL
);

326 
	}
}

328 
ölöe
 
	$upd©e_ts_ˇche
(
thªad_d©a
 *
td
)

330 i‡((++
td
->
ts_ˇche_ƒ
 &Åd->
ts_ˇche_mask
) ==Åd->ts_cache_mask)

331 
	`__upd©e_ts_ˇche
(
td
);

332 
	}
}

334 
ölöe
 
boﬁ
 
	$ru¡ime_ex˚eded
(
thªad_d©a
 *
td
, 
time•ec
 *
t
)

336 i‡(
	`ö_ømp_time
(
td
))

337  
Ál£
;

338 i‡(!
td
->
o
.
timeout
)

339  
Ál£
;

340 i‡(
	`utime_sö˚
(&
td
->
ïoch
, 
t
Ë>td->
o
.
timeout
)

341  
åue
;

343  
Ál£
;

344 
	}
}

351 
ölöe
 
	$upd©e_ru¡ime
(
thªad_d©a
 *
td
,

352 *
ñ≠£d_us
,

353 c⁄° 
fio_ddú
 
ddú
)

355 i‡(
ddú
 =
DDIR_WRITE
 && 
	`td_wrôe
(
td
Ë&&Åd->
o
.
vîify_⁄ly
)

358 
td
->
ts
.
ru¡ime
[
ddú
] -(
ñ≠£d_us
[ddir] + 999) / 1000;

359 
ñ≠£d_us
[
ddú
] +
	`utime_sö˚_now
(&
td
->
°¨t
);

360 
td
->
ts
.
ru¡ime
[
ddú
] +(
ñ≠£d_us
[ddir] + 999) / 1000;

361 
	}
}

363 
boﬁ
 
	$bªak_⁄_this_îr‹
(
thªad_d©a
 *
td
, 
fio_ddú
 
ddú
,

364 *
ªçå
)

366 
ªt
 = *
ªçå
;

368 i‡(
ªt
 < 0 || 
td
->
îr‹
) {

369 
îr
 = 
td
->
îr‹
;

370 
îr‹_ty≥_bô
 
eb
;

372 i‡(
ªt
 < 0)

373 
îr
 = -
ªt
;

375 
eb
 = 
	`td_îr‹_ty≥
(
ddú
, 
îr
);

376 i‡(!(
td
->
o
.
c⁄töue_⁄_îr‹
 & (1 << 
eb
)))

377  
åue
;

379 i‡(
	`td_n⁄_Áèl_îr‹
(
td
, 
eb
, 
îr
)) {

384 
	`upd©e_îr‹_cou¡
(
td
, 
îr
);

385 
	`td_˛ór_îr‹
(
td
);

386 *
ªçå
 = 0;

387  
Ál£
;

388 } i‡(
td
->
o
.
fûl_devi˚
 && (
îr
 =
ENOSPC
 ||Éº =
EDQUOT
)) {

393 
	`td_˛ór_îr‹
(
td
);

394 
	`fio_m¨k_td_ãrmö©e
(
td
);

395  
åue
;

401 
	`upd©e_îr‹_cou¡
(
td
, 
îr
);

402  
åue
;

406  
Ál£
;

407 
	}
}

409 
	$check_upd©e_rußge
(
thªad_d©a
 *
td
)

411 i‡(
td
->
upd©e_rußge
) {

412 
td
->
upd©e_rußge
 = 0;

413 
	`upd©e_rußge_°©
(
td
);

414 
	`fio_£m_up
(
td
->
rußge_£m
);

416 
	}
}

418 
	$waô_f‹_com∂ëi⁄s
(
thªad_d©a
 *
td
, 
time•ec
 *
time
)

420 c⁄° 
fuŒ
 = 
	`queue_fuŒ
(
td
);

421 
mö_evts
 = 0;

422 
ªt
;

424 i‡(
td
->
Êags
 & 
TD_F_REGROW_LOGS
)

425  
	`io_u_quõs˚
(
td
);

430 
mö_evts
 = 
	`mö
(
td
->
o
.
iodïth_b©ch_com∂ëe_mö
,Åd->
cur_dïth
);

431 i‡((
fuŒ
 && !
mö_evts
Ë|| !
td
->
o
.
iodïth_b©ch_com∂ëe_mö
)

432 
mö_evts
 = 1;

434 i‡(
time
 && 
	`should_check_øã
(
td
))

435 
	`fio_gëtime
(
time
, 
NULL
);

438 
ªt
 = 
	`io_u_queued_com∂ëe
(
td
, 
mö_evts
);

439 i‡(
ªt
 < 0)

441 } 
fuŒ
 && (
td
->
cur_dïth
 >Åd->
o
.
iodïth_low
));

443  
ªt
;

444 
	}
}

446 
	$io_queue_evít
(
thªad_d©a
 *
td
, 
io_u
 *io_u, *
ªt
,

447 
fio_ddú
 
ddú
, 
uöt64_t
 *
byãs_issued
, 
‰om_vîify
,

448 
time•ec
 *
comp_time
)

450 *
ªt
) {

451 
FIO_Q_COMPLETED
:

452 i‡(
io_u
->
îr‹
) {

453 *
ªt
 = -
io_u
->
îr‹
;

454 
	`˛ór_io_u
(
td
, 
io_u
);

455 } i‡(
io_u
->
ªsid
) {

456 
byãs
 = 
io_u
->
x„r_buÊí
 - io_u->
ªsid
;

457 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

459 i‡(
byãs_issued
)

460 *
byãs_issued
 +
byãs
;

462 i‡(!
‰om_vîify
)

463 
	`åim_io_põ˚
(
io_u
);

468 i‡(!
byãs
) {

469 i‡(!
‰om_vîify
)

470 
	`u∆og_io_põ˚
(
td
, 
io_u
);

471 
	`td_vîr‹
(
td
, 
EIO
, "fullÑesid");

472 
	`put_io_u
(
td
, 
io_u
);

476 
io_u
->
x„r_buÊí
 = io_u->
ªsid
;

477 
io_u
->
x„r_buf
 +
byãs
;

478 
io_u
->
off£t
 +
byãs
;

480 i‡(
	`ddú_rw
(
io_u
->
ddú
))

481 
td
->
ts
.
sh‹t_io_u
[
io_u
->
ddú
]++;

483 i‡(
io_u
->
off£t
 =
f
->
ªÆ_fûe_size
)

484 
sync_d⁄e
;

486 
	`ªqueue_io_u
(
td
, &
io_u
);

488 
sync_d⁄e
:

489 i‡(
comp_time
 && 
	`should_check_øã
(
td
))

490 
	`fio_gëtime
(
comp_time
, 
NULL
);

492 *
ªt
 = 
	`io_u_sync_com∂ëe
(
td
, 
io_u
);

493 i‡(*
ªt
 < 0)

497 i‡(
td
->
Êags
 & 
TD_F_REGROW_LOGS
)

498 
	`ªgrow_logs
(
td
);

504 i‡(!
‰om_vîify
)

508 
FIO_Q_QUEUED
:

514 i‡(
td
->
io_›s
->
commô
 =
NULL
)

515 
	`io_u_queued
(
td
, 
io_u
);

516 i‡(
byãs_issued
)

517 *
byãs_issued
 +
io_u
->
x„r_buÊí
;

519 
FIO_Q_BUSY
:

520 i‡(!
‰om_vîify
)

521 
	`u∆og_io_põ˚
(
td
, 
io_u
);

522 
	`ªqueue_io_u
(
td
, &
io_u
);

523 
	`td_io_commô
(
td
);

526 
	`as£π
(*
ªt
 < 0);

527 
	`td_vîr‹
(
td
, -(*
ªt
), "td_io_queue");

531 i‡(
	`bªak_⁄_this_îr‹
(
td
, 
ddú
, 
ªt
))

535 
	}
}

537 
ölöe
 
boﬁ
 
	$io_ö_pﬁlög
(
thªad_d©a
 *
td
)

539  !
td
->
o
.
iodïth_b©ch_com∂ëe_mö
 &&

540 !
td
->
o
.
iodïth_b©ch_com∂ëe_max
;

541 
	}
}

545 
	$u∆ök_Æl_fûes
(
thªad_d©a
 *
td
)

547 
fio_fûe
 *
f
;

548 
i
;

549 
ªt
 = 0;

551 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

552 i‡(
f
->
fûëy≥
 !
FIO_TYPE_FILE
)

554 
ªt
 = 
	`td_io_u∆ök_fûe
(
td
, 
f
);

555 i‡(
ªt
)

559 i‡(
ªt
)

560 
	`td_vîr‹
(
td
, 
ªt
, "unlink_all_files");

562  
ªt
;

563 
	}
}

568 
boﬁ
 
	$ö_Êight_ovîœp
(
io_u_queue
 *
q
, 
io_u
 *io_u)

570 
boﬁ
 
ovîœp
;

571 
io_u
 *
check_io_u
;

572 
x1
, 
x2
, 
y1
, 
y2
;

573 
i
;

575 
x1
 = 
io_u
->
off£t
;

576 
x2
 = 
io_u
->
off£t
 + io_u->
buÊí
;

577 
ovîœp
 = 
Ál£
;

578 
	`io_u_qôî
(
q
, 
check_io_u
, 
i
) {

579 i‡(
check_io_u
->
Êags
 & 
IO_U_F_FLIGHT
) {

580 
y1
 = 
check_io_u
->
off£t
;

581 
y2
 = 
check_io_u
->
off£t
 + check_io_u->
buÊí
;

583 i‡(
x1
 < 
y2
 && 
y1
 < 
x2
) {

584 
ovîœp
 = 
åue
;

585 
	`d¥öt
(
FD_IO
, "in-flight overlap: %llu/%llu, %llu/%llu\n",

586 
x1
, 
io_u
->
buÊí
,

587 
y1
, 
check_io_u
->
buÊí
);

593  
ovîœp
;

594 
	}
}

596 
fio_q_°©us
 
	$io_u_submô
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

602 i‡(
td
->
o
.
£rülize_ovîœp
 &&Åd->
cur_dïth
 > 1 &&

603 
	`ö_Êight_ovîœp
(&
td
->
io_u_Æl
, 
io_u
))

604  
FIO_Q_BUSY
;

606  
	`td_io_queue
(
td
, 
io_u
);

607 
	}
}

613 
	$do_vîify
(
thªad_d©a
 *
td
, 
uöt64_t
 
vîify_byãs
)

615 
fio_fûe
 *
f
;

616 
io_u
 *io_u;

617 
ªt
, 
mö_evíts
;

618 
i
;

620 
	`d¥öt
(
FD_VERIFY
, "startingÜoop\n");

626 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

627 i‡(!
	`fio_fûe_›í
(
f
))

629 i‡(
	`fio_io_sync
(
td
, 
f
))

631 i‡(
	`fûe_övÆid©e_ˇche
(
td
, 
f
))

635 
	`check_upd©e_rußge
(
td
);

637 i‡(
td
->
îr‹
)

646 i‡(!
td
->
o
.
ønd_ª≥©abÀ
)

647 
	`td_fûl_vîify_°©e_£ed
(
td
);

649 
	`td_£t_run°©e
(
td
, 
TD_VERIFYING
);

651 
io_u
 = 
NULL
;

652 !
td
->
ãrmö©e
) {

653 
fio_ddú
 
ddú
;

654 
fuŒ
;

656 
	`upd©e_ts_ˇche
(
td
);

657 
	`check_upd©e_rußge
(
td
);

659 i‡(
	`ru¡ime_ex˚eded
(
td
, &td->
ts_ˇche
)) {

660 
	`__upd©e_ts_ˇche
(
td
);

661 i‡(
	`ru¡ime_ex˚eded
(
td
, &td->
ts_ˇche
)) {

662 
	`fio_m¨k_td_ãrmö©e
(
td
);

667 i‡(
	`Êow_thªshﬁd_ex˚eded
(
td
))

670 i‡(!
td
->
o
.
ex≥rimíèl_vîify
) {

671 
io_u
 = 
	`__gë_io_u
(
td
);

672 i‡(!
io_u
)

675 i‡(
	`gë_√xt_vîify
(
td
, 
io_u
)) {

676 
	`put_io_u
(
td
, 
io_u
);

680 i‡(
	`td_io_¥ï
(
td
, 
io_u
)) {

681 
	`put_io_u
(
td
, 
io_u
);

685 i‡(
	`ddú_rw_sum
(
td
->
byãs_d⁄e
Ë+Åd->
o
.
rw_mö_bs
 > 
vîify_byãs
)

688 (
io_u
 = 
	`gë_io_u
(
td
)Ë!
NULL
) {

689 i‡(
	`IS_ERR_OR_NULL
(
io_u
)) {

690 
io_u
 = 
NULL
;

691 
ªt
 = 
FIO_Q_BUSY
;

692 
ª≠
;

700 i‡(
io_u
->
ddú
 =
DDIR_READ
) {

705 
td
->
io_issues
[
DDIR_READ
]++;

706 
	`put_io_u
(
td
, 
io_u
);

708 } i‡(
io_u
->
ddú
 =
DDIR_TRIM
) {

709 
io_u
->
ddú
 = 
DDIR_READ
;

710 
	`io_u_£t
(
td
, 
io_u
, 
IO_U_F_TRIMMED
);

712 } i‡(
io_u
->
ddú
 =
DDIR_WRITE
) {

713 
io_u
->
ddú
 = 
DDIR_READ
;

714 
	`p›uœã_vîify_io_u
(
td
, 
io_u
);

717 
	`put_io_u
(
td
, 
io_u
);

722 i‡(!
io_u
)

726 i‡(
	`vîify_°©e_should_°›
(
td
, 
io_u
)) {

727 
	`put_io_u
(
td
, 
io_u
);

731 i‡(
td
->
o
.
vîify_async
)

732 
io_u
->
íd_io
 = 
vîify_io_u_async
;

734 
io_u
->
íd_io
 = 
vîify_io_u
;

736 
ddú
 = 
io_u
->ddir;

737 i‡(!
td
->
o
.
dißbÀ_¶©
)

738 
	`fio_gëtime
(&
io_u
->
°¨t_time
, 
NULL
);

740 
ªt
 = 
	`io_u_submô
(
td
, 
io_u
);

742 i‡(
	`io_queue_evít
(
td
, 
io_u
, &
ªt
, 
ddú
, 
NULL
, 1, NULL))

750 
ª≠
:

751 
fuŒ
 = 
	`queue_fuŒ
(
td
Ë|| (
ªt
 =
FIO_Q_BUSY
 &&Åd->
cur_dïth
);

752 i‡(
fuŒ
 || 
	`io_ö_pﬁlög
(
td
))

753 
ªt
 = 
	`waô_f‹_com∂ëi⁄s
(
td
, 
NULL
);

755 i‡(
ªt
 < 0)

759 
	`check_upd©e_rußge
(
td
);

761 i‡(!
td
->
îr‹
) {

762 
mö_evíts
 = 
td
->
cur_dïth
;

764 i‡(
mö_evíts
)

765 
ªt
 = 
	`io_u_queued_com∂ëe
(
td
, 
mö_evíts
);

767 
	`˛ónup_≥ndög_aio
(
td
);

769 
	`td_£t_run°©e
(
td
, 
TD_RUNNING
);

771 
	`d¥öt
(
FD_VERIFY
, "exitingÜoop\n");

772 
	}
}

774 
boﬁ
 
	$ex˚eds_numbî_ios
(
thªad_d©a
 *
td
)

776 
numbî_ios
;

778 i‡(!
td
->
o
.
numbî_ios
)

779  
Ál£
;

781 
numbî_ios
 = 
	`ddú_rw_sum
(
td
->
io_blocks
);

782 
numbî_ios
 +
td
->
io_u_queued
 +Åd->
io_u_ö_Êight
;

784  
numbî_ios
 >(
td
->
o
.numbî_io†*Åd->
lo›s
);

785 
	}
}

787 
boﬁ
 
	$io_byãs_ex˚eded
(
thªad_d©a
 *
td
, 
uöt64_t
 *
this_byãs
)

789 
byãs
, 
limô
;

791 i‡(
	`td_rw
(
td
))

792 
byãs
 = 
this_byãs
[
DDIR_READ
] +Åhis_byãs[
DDIR_WRITE
];

793 i‡(
	`td_wrôe
(
td
))

794 
byãs
 = 
this_byãs
[
DDIR_WRITE
];

795 i‡(
	`td_ªad
(
td
))

796 
byãs
 = 
this_byãs
[
DDIR_READ
];

798 
byãs
 = 
this_byãs
[
DDIR_TRIM
];

800 i‡(
td
->
o
.
io_size
)

801 
limô
 = 
td
->
o
.
io_size
;

803 
limô
 = 
td
->
o
.
size
;

805 
limô
 *
td
->
lo›s
;

806  
byãs
 >
limô
 || 
	`ex˚eds_numbî_ios
(
td
);

807 
	}
}

809 
boﬁ
 
	$io_issue_byãs_ex˚eded
(
thªad_d©a
 *
td
)

811  
	`io_byãs_ex˚eded
(
td
,Åd->
io_issue_byãs
);

812 
	}
}

814 
boﬁ
 
	$io_com∂ëe_byãs_ex˚eded
(
thªad_d©a
 *
td
)

816  
	`io_byãs_ex˚eded
(
td
,Åd->
this_io_byãs
);

817 
	}
}

823 
	$u£c_f‹_io
(
thªad_d©a
 *
td
, 
fio_ddú
 
ddú
)

825 
uöt64_t
 
bps
 = 
td
->
øã_bps
[
ddú
];

827 
	`as£π
(!(
td
->
Êags
 & 
TD_F_CHILD
));

829 i‡(
td
->
o
.
øã_¥o˚ss
 =
RATE_PROCESS_POISSON
) {

830 
uöt64_t
 
vÆ
, 
i›s
;

832 
i›s
 = 
bps
 / 
td
->
o
.
mö_bs
[
ddú
];

833 
vÆ
 = (
öt64_t
Ë(1000000 / 
i›s
) *

834 -
	`logf
(
	`__ønd_0_1
(&
td
->
poiss⁄_°©e
[
ddú
]));

835 i‡(
vÆ
) {

836 
	`d¥öt
(
FD_RATE
, "poissonÑate iops=%llu, ddir=%d\n",

837 (Ë1000000 / 
vÆ
,

838 
ddú
);

840 
td
->
œ°_u£c
[
ddú
] +
vÆ
;

841  
td
->
œ°_u£c
[
ddú
];

842 } i‡(
bps
) {

843 
uöt64_t
 
byãs
 = 
td
->
øã_io_issue_byãs
[
ddú
];

844 
uöt64_t
 
£cs
 = 
byãs
 / 
bps
;

845 
uöt64_t
 
ªmaödî
 = 
byãs
 % 
bps
;

847  
ªmaödî
 * 1000000 / 
bps
 + 
£cs
 * 1000000;

851 
	}
}

853 
	$öô_thöktime
(
thªad_d©a
 *
td
)

855 i‡(
td
->
o
.
thöktime_blocks_ty≥
 =
THINKTIME_BLOCKS_TYPE_COMPLETE
)

856 
td
->
thöktime_blocks_cou¡î
 =Åd->
io_blocks
;

858 
td
->
thöktime_blocks_cou¡î
 =Åd->
io_issues
;

859 
td
->
œ°_thöktime
 =Åd->
ïoch
;

860 
td
->
œ°_thöktime_blocks
 = 0;

861 
	}
}

863 
	$h™dÀ_thöktime
(
thªad_d©a
 *
td
, 
fio_ddú
 
ddú
,

864 
time•ec
 *
time
)

866 
b
;

867 
uöt64_t
 
tŸÆ
;

868 
À·
;

869 
time•ec
 
now
;

870 
boﬁ
 
°Æl
 = 
Ál£
;

872 i‡(
td
->
o
.
thöktime_iŸime
) {

873 
	`fio_gëtime
(&
now
, 
NULL
);

874 i‡(
	`utime_sö˚
(&
td
->
œ°_thöktime
, &
now
)

875 >
td
->
o
.
thöktime_iŸime
 +Åd->o.
thöktime
) {

876 
°Æl
 = 
åue
;

877 } i‡(!
	`fio_›ti⁄_is_£t
(&
td
->
o
, 
thöktime_blocks
)) {

889 
b
 = 
	`ddú_rw_sum
(
td
->
thöktime_blocks_cou¡î
);

890 i‡(
b
 >
td
->
œ°_thöktime_blocks
 +Åd->
o
.
thöktime_blocks
)

891 
°Æl
 = 
åue
;

893 i‡(!
°Æl
)

896 
	`io_u_quõs˚
(
td
);

898 
tŸÆ
 = 0;

899 i‡(
td
->
o
.
thöktime_•ö
)

900 
tŸÆ
 = 
	`u£c_•ö
(
td
->
o
.
thöktime_•ö
);

902 
À·
 = 
td
->
o
.
thöktime
 - 
tŸÆ
;

903 i‡(
À·
)

904 
tŸÆ
 +
	`u£c_¶ìp
(
td
, 
À·
);

911 i‡(
tŸÆ
 && 
td
->
øã_bps
[
ddú
] &&Åd->
o
.
øã_ign_thök
) {

912 
uöt64_t
 
mis£d
 = (
td
->
øã_bps
[
ddú
] * 
tŸÆ
) / 1000000ULL;

913 
uöt64_t
 
bs
 = 
td
->
o
.
mö_bs
[
ddú
];

914 
uöt64_t
 
u•î›
 = 
bs
 * 1000000ULL / 
td
->
øã_bps
[
ddú
];

915 
uöt64_t
 
ovî
;

917 i‡(
u•î›
 <
tŸÆ
)

918 
ovî
 = 
bs
;

920 
ovî
 = (
u•î›
 - 
tŸÆ
Ë/ u•î› * -
bs
;

922 
td
->
øã_io_issue_byãs
[
ddú
] +(
mis£d
 - 
ovî
);

924 
td
->
œ°_u£c
[
ddú
] +
tŸÆ
;

927 i‡(
time
 && 
	`should_check_øã
(
td
))

928 
	`fio_gëtime
(
time
, 
NULL
);

930 
td
->
œ°_thöktime_blocks
 = 
b
;

931 i‡(
td
->
o
.
thöktime_iŸime
)

932 
td
->
œ°_thöktime
 = 
now
;

933 
	}
}

941 
	$do_io
(
thªad_d©a
 *
td
, 
uöt64_t
 *
byãs_d⁄e
)

943 
i
;

944 
ªt
 = 0;

945 
uöt64_t
 
tŸÆ_byãs
, 
byãs_issued
 = 0;

947 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++)

948 
byãs_d⁄e
[
i
] = 
td
->bytes_done[i];

950 i‡(
	`ö_ømp_time
(
td
))

951 
	`td_£t_run°©e
(
td
, 
TD_RAMP
);

953 
	`td_£t_run°©e
(
td
, 
TD_RUNNING
);

955 
	`œt_èrgë_öô
(
td
);

957 
tŸÆ_byãs
 = 
td
->
o
.
size
;

962 i‡(
	`td_wrôe
(
td
Ë&& 
	`td_øndom
—dË&&Åd->
o
.
n‹™domm≠
)

963 
tŸÆ_byãs
 = 
	`max
—ŸÆ_byãs, (
uöt64_t
Ë
td
->
o
.
io_size
);

969 i‡(
td
->
o
.
vîify
 !
VERIFY_NONE
 &&

970 (
	`td_wrôe
(
td
Ë&&Åd->
o
.
vîify_backlog
))

971 
tŸÆ_byãs
 +
td
->
o
.
size
;

975 i‡(
	`td_åimwrôe
(
td
)) {

976 
tŸÆ_byãs
 +
td
->
tŸÆ_io_size
;

977 
td
->
o
.
numbî_ios
 *= 2;

980 (
td
->
o
.
ªad_iﬁog_fûe
 && !
	`Êi°_em±y
(&td->
io_log_li°
)) ||

981 (!
	`Êi°_em±y
(&
td
->
åim_li°
)Ë|| !
	`io_issue_byãs_ex˚eded
(td) ||

982 
td
->
o
.
time_ba£d
) {

983 
time•ec
 
comp_time
;

984 
io_u
 *io_u;

985 
fuŒ
;

986 
fio_ddú
 
ddú
;

988 
	`check_upd©e_rußge
(
td
);

990 i‡(
td
->
ãrmö©e
 ||Åd->
d⁄e
)

993 
	`upd©e_ts_ˇche
(
td
);

995 i‡(
	`ru¡ime_ex˚eded
(
td
, &td->
ts_ˇche
)) {

996 
	`__upd©e_ts_ˇche
(
td
);

997 i‡(
	`ru¡ime_ex˚eded
(
td
, &td->
ts_ˇche
)) {

998 
	`fio_m¨k_td_ãrmö©e
(
td
);

1003 i‡(
	`Êow_thªshﬁd_ex˚eded
(
td
))

1012 i‡(
byãs_issued
 >
tŸÆ_byãs
 &&

1013 !
td
->
o
.
ªad_iﬁog_fûe
 &&

1014 (!
td
->
o
.
time_ba£d
 ||

1015 (
td
->
o
.
time_ba£d
 &&Åd->o.
vîify
 !
VERIFY_NONE
)))

1018 
io_u
 = 
	`gë_io_u
(
td
);

1019 i‡(
	`IS_ERR_OR_NULL
(
io_u
)) {

1020 
îr
 = 
	`PTR_ERR
(
io_u
);

1022 
io_u
 = 
NULL
;

1023 
ddú
 = 
DDIR_INVAL
;

1024 i‡(
îr
 =-
EBUSY
) {

1025 
ªt
 = 
FIO_Q_BUSY
;

1026 
ª≠
;

1028 i‡(
td
->
o
.
œãncy_èrgë
)

1029 
ª≠
;

1033 i‡(
io_u
->
ddú
 =
DDIR_WRITE
 && 
td
->
Êags
 & 
TD_F_DO_VERIFY
)

1034 
	`p›uœã_vîify_io_u
(
td
, 
io_u
);

1036 
ddú
 = 
io_u
->ddir;

1043 i‡(
td
->
o
.
vîify
 !
VERIFY_NONE
 && 
io_u
->
ddú
 =
DDIR_READ
 &&

1044 ((
io_u
->
Êags
 & 
IO_U_F_VER_LIST
Ë|| !
	`td_rw
(
td
))) {

1046 i‡(
	`vîify_°©e_should_°›
(
td
, 
io_u
)) {

1047 
	`put_io_u
(
td
, 
io_u
);

1051 i‡(
td
->
o
.
vîify_async
)

1052 
io_u
->
íd_io
 = 
vîify_io_u_async
;

1054 
io_u
->
íd_io
 = 
vîify_io_u
;

1055 
	`td_£t_run°©e
(
td
, 
TD_VERIFYING
);

1056 } i‡(
	`ö_ømp_time
(
td
))

1057 
	`td_£t_run°©e
(
td
, 
TD_RAMP
);

1059 
	`td_£t_run°©e
(
td
, 
TD_RUNNING
);

1066 i‡(
	`td_wrôe
(
td
Ë&& 
io_u
->
ddú
 =
DDIR_WRITE
 &&

1067 
td
->
o
.
do_vîify
 &&

1068 
td
->
o
.
vîify
 !
VERIFY_NONE
 &&

1069 !
td
->
o
.
ex≥rimíèl_vîify
)

1070 
	`log_io_põ˚
(
td
, 
io_u
);

1072 i‡(
td
->
o
.
io_submô_mode
 =
IO_MODE_OFFLOAD
) {

1073 c⁄° 
bÀn
 = 
io_u
->
x„r_buÊí
;

1074 c⁄° 
fio_ddú
 
__ddú
 = 
	`ac˘_ddú
(
io_u
);

1076 i‡(
td
->
îr‹
)

1079 
	`w‹kqueue_íqueue
(&
td
->
io_wq
, &
io_u
->
w‹k
);

1080 
ªt
 = 
FIO_Q_QUEUED
;

1082 i‡(
	`ddú_rw
(
__ddú
)) {

1083 
td
->
io_issues
[
__ddú
]++;

1084 
td
->
io_issue_byãs
[
__ddú
] +
bÀn
;

1085 
td
->
øã_io_issue_byãs
[
__ddú
] +
bÀn
;

1088 i‡(
	`should_check_øã
(
td
)) {

1089 
td
->
øã_√xt_io_time
[
__ddú
] = 
	`u£c_f‹_io
(td, __ddir);

1090 
	`fio_gëtime
(&
comp_time
, 
NULL
);

1094 
ªt
 = 
	`io_u_submô
(
td
, 
io_u
);

1096 i‡(
	`should_check_øã
(
td
))

1097 
td
->
øã_√xt_io_time
[
ddú
] = 
	`u£c_f‹_io
(td, ddir);

1099 i‡(
	`io_queue_evít
(
td
, 
io_u
, &
ªt
, 
ddú
, &
byãs_issued
, 0, &
comp_time
))

1107 
ª≠
:

1108 
fuŒ
 = 
	`queue_fuŒ
(
td
) ||

1109 (
ªt
 =
FIO_Q_BUSY
 && 
td
->
cur_dïth
);

1110 i‡(
fuŒ
 || 
	`io_ö_pﬁlög
(
td
))

1111 
ªt
 = 
	`waô_f‹_com∂ëi⁄s
(
td
, &
comp_time
);

1113 i‡(
ªt
 < 0)

1116 i‡(
	`ddú_rw
(
ddú
Ë&& 
td
->
o
.
thöktime
)

1117 
	`h™dÀ_thöktime
(
td
, 
ddú
, &
comp_time
);

1119 i‡(!
	`ddú_rw_sum
(
td
->
byãs_d⁄e
) &&

1120 !
	`td_i€ngöe_Êagged
(
td
, 
FIO_NOIO
))

1123 i‡(!
	`ö_ømp_time
(
td
Ë&& 
	`should_check_øã
(td)) {

1124 i‡(
	`check_mö_øã
(
td
, &
comp_time
)) {

1125 i‡(
exôÆl_⁄_ãrmö©e
 || 
td
->
o
.
exôÆl_îr‹
)

1126 
	`fio_ãrmö©e_thªads
(
td
->
groupid
,Åd->
o
.
exô_wh©
);

1127 
	`td_vîr‹
(
td
, 
EIO
, "check_min_rate");

1131 i‡(!
	`ö_ømp_time
(
td
Ë&&Åd->
o
.
œãncy_èrgë
)

1132 
	`œt_èrgë_check
(
td
);

1135 
	`check_upd©e_rußge
(
td
);

1137 i‡(
td
->
åim_íåõs
)

1138 
	`log_îr
("fio: %luÅrimÉ¡rõ†Àaked?\n", 
td
->
åim_íåõs
);

1140 i‡(
td
->
o
.
fûl_devi˚
 && (td->
îr‹
 =
ENOSPC
 ||Åd->îr‹ =
EDQUOT
)) {

1141 
td
->
îr‹
 = 0;

1142 
	`fio_m¨k_td_ãrmö©e
(
td
);

1144 i‡(!
td
->
îr‹
) {

1145 
fio_fûe
 *
f
;

1147 i‡(
td
->
o
.
io_submô_mode
 =
IO_MODE_OFFLOAD
) {

1148 
	`w‹kqueue_Êush
(&
td
->
io_wq
);

1149 
i
 = 0;

1151 
i
 = 
td
->
cur_dïth
;

1153 i‡(
i
) {

1154 
ªt
 = 
	`io_u_queued_com∂ëe
(
td
, 
i
);

1155 i‡(
td
->
o
.
fûl_devi˚
 &&

1156 (
td
->
îr‹
 =
ENOSPC
 ||Åd->îr‹ =
EDQUOT
))

1157 
td
->
îr‹
 = 0;

1160 i‡(
	`should_fsync
(
td
Ë&& (td->
o
.
íd_fsync
 ||Åd->o.
fsync_⁄_˛o£
)) {

1161 
	`td_£t_run°©e
(
td
, 
TD_FSYNCING
);

1163 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

1164 i‡(!
	`fio_fûe_fsync
(
td
, 
f
))

1167 
	`log_îr
("fio:Énd_fsync failed for file %s\n",

1168 
f
->
fûe_«me
);

1172 i‡(
td
->
o
.
io_submô_mode
 =
IO_MODE_OFFLOAD
)

1173 
	`w‹kqueue_Êush
(&
td
->
io_wq
);

1174 
	`˛ónup_≥ndög_aio
(
td
);

1180 i‡(!
	`ddú_rw_sum
(
td
->
this_io_byãs
))

1181 
td
->
d⁄e
 = 1;

1183 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++)

1184 
byãs_d⁄e
[
i
] = 
td
->bytes_done[i] - bytes_done[i];

1185 
	}
}

1187 
	$‰ì_fûe_com∂ëi⁄_loggög
(
thªad_d©a
 *
td
)

1189 
fio_fûe
 *
f
;

1190 
i
;

1192 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

1193 i‡(!
f
->
œ°_wrôe_comp
)

1195 
	`s‰ì
(
f
->
œ°_wrôe_comp
);

1197 
	}
}

1199 
	$öô_fûe_com∂ëi⁄_loggög
(
thªad_d©a
 *
td
,

1200 
dïth
)

1202 
fio_fûe
 *
f
;

1203 
i
;

1205 i‡(
td
->
o
.
vîify
 =
VERIFY_NONE
 || !td->o.
vîify_°©e_ßve
)

1208 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

1209 
f
->
œ°_wrôe_comp
 = 
	`sˇŒoc
(
dïth
, (
uöt64_t
));

1210 i‡(!
f
->
œ°_wrôe_comp
)

1211 
˛ónup
;

1216 
˛ónup
:

1217 
	`‰ì_fûe_com∂ëi⁄_loggög
(
td
);

1218 
	`log_îr
("fio: failedÅoálloc write comp data\n");

1220 
	}
}

1222 
	$˛ónup_io_u
(
thªad_d©a
 *
td
)

1224 
io_u
 *io_u;

1226 (
io_u
 = 
	`io_u_qp›
(&
td
->
io_u_‰ìli°
)Ë!
NULL
) {

1228 i‡(
td
->
io_›s
->
io_u_‰ì
)

1229 
td
->
io_›s
->
	`io_u_‰ì
—d, 
io_u
);

1231 
	`fio_mem‰ì
(
io_u
, (*io_u), 
	`td_ofÊﬂd_ovîœp
(
td
));

1234 
	`‰ì_io_mem
(
td
);

1236 
	`io_u_ªxô
(&
td
->
io_u_ªqueues
);

1237 
	`io_u_qexô
(&
td
->
io_u_‰ìli°
, 
Ál£
);

1238 
	`io_u_qexô
(&
td
->
io_u_Æl
, 
	`td_ofÊﬂd_ovîœp
(td));

1240 
	`‰ì_fûe_com∂ëi⁄_loggög
(
td
);

1241 
	}
}

1243 
	$öô_io_u
(
thªad_d©a
 *
td
)

1245 
io_u
 *io_u;

1246 
˛_Æign
, 
i
, 
max_unôs
;

1247 
îr
;

1249 
max_unôs
 = 
td
->
o
.
iodïth
;

1251 
îr
 = 0;

1252 
îr
 +!
	`io_u_röô
(&
td
->
io_u_ªqueues
,Åd->
o
.
iodïth
);

1253 
îr
 +!
	`io_u_qöô
(&
td
->
io_u_‰ìli°
,Åd->
o
.
iodïth
, 
Ál£
);

1254 
îr
 +!
	`io_u_qöô
(&
td
->
io_u_Æl
,Åd->
o
.
iodïth
, 
	`td_ofÊﬂd_ovîœp
(td));

1256 i‡(
îr
) {

1257 
	`log_îr
("fio: failed setting up IO queues\n");

1261 
˛_Æign
 = 
	`os_ˇche_löe_size
();

1263 
i
 = 0; i < 
max_unôs
; i++) {

1264 *
±r
;

1266 i‡(
td
->
ãrmö©e
)

1269 
±r
 = 
	`fio_memÆign
(
˛_Æign
, (*
io_u
), 
	`td_ofÊﬂd_ovîœp
(
td
));

1270 i‡(!
±r
) {

1271 
	`log_îr
("fio: unableÅoállocateáligned memory\n");

1275 
io_u
 = 
±r
;

1276 
	`mem£t
(
io_u
, 0, (*io_u));

1277 
	`INIT_FLIST_HEAD
(&
io_u
->
vîify_li°
);

1278 
	`d¥öt
(
FD_MEM
, "io_uáŒo¯%p, index %u\n", 
io_u
, 
i
);

1280 
io_u
->
ödex
 = 
i
;

1281 
io_u
->
Êags
 = 
IO_U_F_FREE
;

1282 
	`io_u_qpush
(&
td
->
io_u_‰ìli°
, 
io_u
);

1288 
	`io_u_qpush
(&
td
->
io_u_Æl
, 
io_u
);

1290 i‡(
td
->
io_›s
->
io_u_öô
) {

1291 
ªt
 = 
td
->
io_›s
->
	`io_u_öô
—d, 
io_u
);

1293 i‡(
ªt
) {

1294 
	`log_îr
("fio: faûedÅÿöôÉngöêd©a: %d\n", 
ªt
);

1300 
	`öô_io_u_buf„rs
(
td
);

1302 i‡(
	`öô_fûe_com∂ëi⁄_loggög
(
td
, 
max_unôs
))

1306 
	}
}

1308 
	$öô_io_u_buf„rs
(
thªad_d©a
 *
td
)

1310 
io_u
 *io_u;

1311 
max_bs
, 
mö_wrôe
;

1312 
i
, 
max_unôs
;

1313 
d©a_x„r
 = 1;

1314 *
p
;

1316 
max_unôs
 = 
td
->
o
.
iodïth
;

1317 
max_bs
 = 
	`td_max_bs
(
td
);

1318 
mö_wrôe
 = 
td
->
o
.
mö_bs
[
DDIR_WRITE
];

1319 
td
->
‹ig_buf„r_size
 = (Ë
max_bs


1320 * (Ë
max_unôs
;

1322 i‡(
	`td_i€ngöe_Êagged
(
td
, 
FIO_NOIO
Ë|| !(
	`td_ªad
—dË|| 
	`td_wrôe
(td)))

1323 
d©a_x„r
 = 0;

1331 i‡(
td
->
o
.
odúe˘
 ||Åd->o.
mem_Æign
 ||Åd->o.
ﬂtomic
 ||

1332 
	`td_i€ngöe_Êagged
(
td
, 
FIO_RAWIO
))

1333 
td
->
‹ig_buf„r_size
 +
∑ge_mask
 +Åd->
o
.
mem_Æign
;

1335 i‡(
td
->
o
.
mem_ty≥
 =
MEM_SHMHUGE
 ||Åd->o.mem_ty≥ =
MEM_MMAPHUGE
) {

1336 
bs
;

1338 
bs
 = 
td
->
‹ig_buf„r_size
 +Åd->
o
.
hugïage_size
 - 1;

1339 
td
->
‹ig_buf„r_size
 = 
bs
 & ~—d->
o
.
hugïage_size
 - 1);

1342 i‡(
td
->
‹ig_buf„r_size
 !(
size_t
)Åd->orig_buffer_size) {

1343 
	`log_îr
("fio: IO memoryÅooÜarge. Reduce max_bs or iodepth\n");

1347 i‡(
d©a_x„r
 && 
	`Æloˇã_io_mem
(
td
))

1350 i‡(
td
->
o
.
odúe˘
 ||Åd->o.
mem_Æign
 ||Åd->o.
ﬂtomic
 ||

1351 
	`td_i€ngöe_Êagged
(
td
, 
FIO_RAWIO
))

1352 
p
 = 
	`PTR_ALIGN
(
td
->
‹ig_buf„r
, 
∑ge_mask
Ë+Åd->
o
.
mem_Æign
;

1354 
p
 = 
td
->
‹ig_buf„r
;

1356 
i
 = 0; i < 
max_unôs
; i++) {

1357 
io_u
 = 
td
->
io_u_Æl
.
io_us
[
i
];

1358 
	`d¥öt
(
FD_MEM
, "io_uáŒo¯%p, index %u\n", 
io_u
, 
i
);

1360 i‡(
d©a_x„r
) {

1361 
io_u
->
buf
 = 
p
;

1362 
	`d¥öt
(
FD_MEM
, "io_u %p, mem %p\n", 
io_u
, io_u->
buf
);

1364 i‡(
	`td_wrôe
(
td
))

1365 
	`io_u_fûl_buf„r
(
td
, 
io_u
, 
mö_wrôe
, 
max_bs
);

1366 i‡(
	`td_wrôe
(
td
Ë&&Åd->
o
.
vîify_∑âîn_byãs
) {

1371 
	`fûl_vîify_∑âîn
(
td
, 
io_u
->
buf
, 
max_bs
, io_u, 0, 0);

1374 
p
 +
max_bs
;

1378 
	}
}

1380 #ifde‡
FIO_HAVE_IOSCHED_SWITCH


1385 
	$£t_ioscheduÀr
(
thªad_d©a
 *
td
, 
fio_fûe
 *
fûe
)

1387 
tmp
[256], 
tmp2
[128], *
p
;

1388 
FILE
 *
f
;

1389 
ªt
;

1391 
	`as£π
(
fûe
->
du
 && fûe->du->
sysfs_roŸ
);

1392 
	`•rötf
(
tmp
, "%s/queue/scheduÀr", 
fûe
->
du
->
sysfs_roŸ
);

1394 
f
 = 
	`f›í
(
tmp
, "r+");

1395 i‡(!
f
) {

1396 i‡(
î∫o
 =
ENOENT
) {

1397 
	`log_îr
("fio: os or kernel doesn't support IO scheduler"

1401 
	`td_vîr‹
(
td
, 
î∫o
, "fopen iosched");

1408 
ªt
 = 
	`fwrôe
(
td
->
o
.
ioscheduÀr
, 
	`°æí
—d->o.ioscheduÀr), 1, 
f
);

1409 i‡(
	`„º‹
(
f
Ë|| 
ªt
 != 1) {

1410 
	`td_vîr‹
(
td
, 
î∫o
, "fwrite");

1411 
	`f˛o£
(
f
);

1415 
	`ªwöd
(
f
);

1420 
ªt
 = 
	`‰ód
(
tmp
, 1, —mpË- 1, 
f
);

1421 i‡(
	`„º‹
(
f
Ë|| 
ªt
 < 0) {

1422 
	`td_vîr‹
(
td
, 
î∫o
, "fread");

1423 
	`f˛o£
(
f
);

1426 
tmp
[
ªt
] = '\0';

1431 
p
 = 
tmp
;

1432 
	`°r£p
(&
p
, "\n");

1437 i‡(!
	`°rcmp
(
tmp
, "none")) {

1438 
	`log_îr
("fio: io scheduler isÇotÅunable\n");

1439 
	`f˛o£
(
f
);

1443 
	`•rötf
(
tmp2
, "[%s]", 
td
->
o
.
ioscheduÀr
);

1444 i‡(!
	`°r°r
(
tmp
, 
tmp2
)) {

1445 
	`log_îr
("fio: u«bÀÅÿ£àiÿscheduÀ∏tÿ%s\n", 
td
->
o
.
ioscheduÀr
);

1446 
	`td_vîr‹
(
td
, 
EINVAL
, "iosched_switch");

1447 
	`f˛o£
(
f
);

1451 
	`f˛o£
(
f
);

1453 
	}
}

1455 
	$swôch_ioscheduÀr
(
thªad_d©a
 *
td
)

1457 
fio_fûe
 *
f
;

1458 
i
;

1459 
ªt
 = 0;

1461 i‡(
	`td_i€ngöe_Êagged
(
td
, 
FIO_DISKLESSIO
))

1464 
	`as£π
(
td
->
fûes
 &&Åd->files[0]);

1466 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

1469 
f
->
fûëy≥
) {

1470 
FIO_TYPE_FILE
:

1471 
FIO_TYPE_BLOCK
:

1476 i‡(!
f
->
du
)

1479 
FIO_TYPE_CHAR
:

1480 
FIO_TYPE_PIPE
:

1485 
ªt
 = 
	`£t_ioscheduÀr
(
td
, 
f
);

1486 i‡(
ªt
)

1487  
ªt
;

1491 
	}
}

1495 
	$swôch_ioscheduÀr
(
thªad_d©a
 *
td
)

1498 
	}
}

1502 
boﬁ
 
	$kìp_ru¬ög
(
thªad_d©a
 *
td
)

1504 
limô
;

1506 i‡(
td
->
d⁄e
)

1507  
Ál£
;

1508 i‡(
td
->
ãrmö©e
)

1509  
Ál£
;

1510 i‡(
td
->
o
.
time_ba£d
)

1511  
åue
;

1512 i‡(
td
->
o
.
lo›s
) {

1513 
td
->
o
.
lo›s
--;

1514  
åue
;

1516 i‡(
	`ex˚eds_numbî_ios
(
td
))

1517  
Ál£
;

1519 i‡(
td
->
o
.
io_size
)

1520 
limô
 = 
td
->
o
.
io_size
;

1522 
limô
 = 
td
->
o
.
size
;

1524 i‡(
limô
 !-1ULL && 
	`ddú_rw_sum
(
td
->
io_byãs
) <Üimit) {

1525 
uöt64_t
 
diff
;

1531 
diff
 = 
limô
 - 
	`ddú_rw_sum
(
td
->
io_byãs
);

1532 i‡(
diff
 < 
	`td_max_bs
(
td
))

1533  
Ál£
;

1535 i‡(
	`fio_fûes_d⁄e
(
td
Ë&& !td->
o
.
io_size
)

1536  
Ál£
;

1538  
åue
;

1541  
Ál£
;

1542 
	}
}

1544 
	$exec_°rög
(
thªad_›ti⁄s
 *
o
, c⁄° *
°rög
,

1545 c⁄° *
mode
)

1547 
ªt
;

1548 *
°r
;

1550 i‡(
	`a•rötf
(&
°r
, "%†> %s.%s.txà2>&1", 
°rög
, 
o
->
«me
, 
mode
) < 0)

1553 
	`log_öfo
("%†: Savög ouçuào‡%†ö %s.%s.txt\n", 
o
->
«me
, 
mode
,

1554 
o
->
«me
, 
mode
);

1555 
ªt
 = 
	`sy°em
(
°r
);

1556 i‡(
ªt
 == -1)

1557 
	`log_îr
("fio:Éxe¯o‡cmd <%s> faûed\n", 
°r
);

1559 
	`‰ì
(
°r
);

1560  
ªt
;

1561 
	}
}

1566 
uöt64_t
 
	$do_dry_run
(
thªad_d©a
 *
td
)

1568 
	`td_£t_run°©e
(
td
, 
TD_RUNNING
);

1570 (
td
->
o
.
ªad_iﬁog_fûe
 && !
	`Êi°_em±y
(&td->
io_log_li°
)) ||

1571 (!
	`Êi°_em±y
(&
td
->
åim_li°
)Ë|| !
	`io_com∂ëe_byãs_ex˚eded
(td)) {

1572 
io_u
 *io_u;

1573 
ªt
;

1575 i‡(
td
->
ãrmö©e
 ||Åd->
d⁄e
)

1578 
io_u
 = 
	`gë_io_u
(
td
);

1579 i‡(
	`IS_ERR_OR_NULL
(
io_u
))

1582 
	`io_u_£t
(
td
, 
io_u
, 
IO_U_F_FLIGHT
);

1583 
io_u
->
îr‹
 = 0;

1584 
io_u
->
ªsid
 = 0;

1585 i‡(
	`ddú_rw
(
	`ac˘_ddú
(
io_u
)))

1586 
td
->
io_issues
[
	`ac˘_ddú
(
io_u
)]++;

1587 i‡(
	`ddú_rw
(
io_u
->
ddú
)) {

1588 
	`io_u_m¨k_dïth
(
td
, 1);

1589 
td
->
ts
.
tŸÆ_io_u
[
io_u
->
ddú
]++;

1592 i‡(
	`td_wrôe
(
td
Ë&& 
io_u
->
ddú
 =
DDIR_WRITE
 &&

1593 
td
->
o
.
do_vîify
 &&

1594 
td
->
o
.
vîify
 !
VERIFY_NONE
 &&

1595 !
td
->
o
.
ex≥rimíèl_vîify
)

1596 
	`log_io_põ˚
(
td
, 
io_u
);

1598 
ªt
 = 
	`io_u_sync_com∂ëe
(
td
, 
io_u
);

1599 (Ë
ªt
;

1602  
td
->
byãs_d⁄e
[
DDIR_WRITE
] +Åd->byãs_d⁄e[
DDIR_TRIM
];

1603 
	}
}

1605 
	sf‹k_d©a
 {

1606 
thªad_d©a
 *
	mtd
;

1607 
sk_out
 *
	msk_out
;

1614 *
	$thªad_maö
(*
d©a
)

1616 
f‹k_d©a
 *
fd
 = 
d©a
;

1617 
ñ≠£d_us
[
DDIR_RWDIR_CNT
] = { 0, };

1618 
thªad_d©a
 *
td
 = 
fd
->td;

1619 
thªad_›ti⁄s
 *
o
 = &
td
->o;

1620 
sk_out
 *sk_ouà
fd
->sk_out;

1621 
uöt64_t
 
byãs_d⁄e
[
DDIR_RWDIR_CNT
];

1622 
dódlock_lo›_˙t
;

1623 
boﬁ
 
˛ór_°©e
;

1624 
ªs
, 
ªt
;

1626 
	`sk_out_assign
(
sk_out
);

1627 
	`‰ì
(
fd
);

1629 i‡(!
o
->
u£_thªad
) {

1630 
	`£tsid
();

1631 
td
->
pid
 = 
	`gëpid
();

1633 
td
->
pid
 = 
	`gëtid
();

1635 
	`fio_loˇl_˛ock_öô
();

1637 
	`d¥öt
(
FD_PROCESS
, "job†pid=%d sèπed\n", (Ë
td
->
pid
);

1639 i‡(
is_backíd
)

1640 
	`fio_£rvî_£nd_°¨t
(
td
);

1642 
	`INIT_FLIST_HEAD
(&
td
->
io_log_li°
);

1643 
	`INIT_FLIST_HEAD
(&
td
->
io_hi°_li°
);

1644 
	`INIT_FLIST_HEAD
(&
td
->
vîify_li°
);

1645 
	`INIT_FLIST_HEAD
(&
td
->
åim_li°
);

1646 
td
->
io_hi°_åì
 = 
RB_ROOT
;

1648 
ªt
 = 
	`muãx_c⁄d_öô_psh¨ed
(&
td
->
io_u_lock
, &td->
‰ì_c⁄d
);

1649 i‡(
ªt
) {

1650 
	`td_vîr‹
(
td
, 
ªt
, "mutex_cond_init_pshared");

1651 
îr
;

1653 
ªt
 = 
	`c⁄d_öô_psh¨ed
(&
td
->
vîify_c⁄d
);

1654 i‡(
ªt
) {

1655 
	`td_vîr‹
(
td
, 
ªt
, "mutex_cond_pshared");

1656 
îr
;

1659 
	`td_£t_run°©e
(
td
, 
TD_INITIALIZED
);

1660 
	`d¥öt
(
FD_MUTEX
, "up startup_sem\n");

1661 
	`fio_£m_up
(
°¨tup_£m
);

1662 
	`d¥öt
(
FD_MUTEX
, "wait onÅd->sem\n");

1663 
	`fio_£m_down
(
td
->
£m
);

1664 
	`d¥öt
(
FD_MUTEX
, "done waiting onÅd->sem\n");

1670 i‡(
o
->
gid
 !-1U && 
	`£tgid
(o->gid)) {

1671 
	`td_vîr‹
(
td
, 
î∫o
, "setgid");

1672 
îr
;

1674 i‡(
o
->
uid
 !-1U && 
	`£tuid
(o->uid)) {

1675 
	`td_vîr‹
(
td
, 
î∫o
, "setuid");

1676 
îr
;

1679 
	`td_z⁄e_gí_ödex
(
td
);

1686 i‡(
	`iﬁog_com¥ess_öô
(
td
, 
sk_out
))

1687 
îr
;

1693 i‡(
o
->
gtod_˝u
)

1694 
	`fio_˝u_˛ór
(&
o
->
˝umask
, o->
gtod_˝u
);

1700 i‡(
	`fio_›ti⁄_is_£t
(
o
, 
˝umask
)) {

1701 i‡(
o
->
˝us_Ælowed_pﬁicy
 =
FIO_CPUS_SPLIT
) {

1702 
ªt
 = 
	`fio_˝us_•lô
(&
o
->
˝umask
, 
td
->
thªad_numbî
 - 1);

1703 i‡(!
ªt
) {

1704 
	`log_îr
("fio:Ço CPUs set\n");

1705 
	`log_îr
("fio: Try increasingÇumber ofávailable CPUs\n");

1706 
	`td_vîr‹
(
td
, 
EINVAL
, "cpus_split");

1707 
îr
;

1710 
ªt
 = 
	`fio_£èfföôy
(
td
->
pid
, 
o
->
˝umask
);

1711 i‡(
ªt
 == -1) {

1712 
	`td_vîr‹
(
td
, 
î∫o
, "cpu_set_affinity");

1713 
îr
;

1717 #ifde‡
CONFIG_LIBNUMA


1719 i‡(
	`fio_›ti⁄_is_£t
(
o
, 
numa_˝unodes
) ||

1720 
	`fio_›ti⁄_is_£t
(
o
, 
numa_memnodes
)) {

1721 
bômask
 *
mask
;

1723 i‡(
	`numa_avaûabÀ
() < 0) {

1724 
	`td_vîr‹
(
td
, 
î∫o
, "DoesÇot support NUMA API\n");

1725 
îr
;

1728 i‡(
	`fio_›ti⁄_is_£t
(
o
, 
numa_˝unodes
)) {

1729 
mask
 = 
	`numa_∑r£_node°rög
(
o
->
numa_˝unodes
);

1730 
ªt
 = 
	`numa_run_⁄_node_mask
(
mask
);

1731 
	`numa_‰ì_nodemask
(
mask
);

1732 i‡(
ªt
 == -1) {

1733 
	`td_vîr‹
(
td
, 
î∫o
, \

1735 
îr
;

1739 i‡(
	`fio_›ti⁄_is_£t
(
o
, 
numa_memnodes
)) {

1740 
mask
 = 
NULL
;

1741 i‡(
o
->
numa_memnodes
)

1742 
mask
 = 
	`numa_∑r£_node°rög
(
o
->
numa_memnodes
);

1744 
o
->
numa_mem_mode
) {

1745 
MPOL_INTERLEAVE
:

1746 
	`numa_£t_öãæóve_mask
(
mask
);

1748 
MPOL_BIND
:

1749 
	`numa_£t_memböd
(
mask
);

1751 
MPOL_LOCAL
:

1752 
	`numa_£t_loˇœŒoc
();

1754 
MPOL_PREFERRED
:

1755 
	`numa_£t_¥e„ºed
(
o
->
numa_mem_¥e„r_node
);

1757 
MPOL_DEFAULT
:

1762 i‡(
mask
)

1763 
	`numa_‰ì_nodemask
(
mask
);

1769 i‡(
	`fio_pö_mem‹y
(
td
))

1770 
îr
;

1776 i‡(!
	`öô_iﬁog
(
td
))

1777 
îr
;

1780 i‡(
	`fio_›ti⁄_is_£t
(
o
, 
i›rio
) ||

1781 
	`fio_›ti⁄_is_£t
(
o
, 
i›rio_˛ass
)) {

1782 
ªt
 = 
	`i›rio_£t
(
IOPRIO_WHO_PROCESS
, 0, 
o
->
i›rio_˛ass
, o->
i›rio
);

1783 i‡(
ªt
 == -1) {

1784 
	`td_vîr‹
(
td
, 
î∫o
, "ioprio_set");

1785 
îr
;

1787 
td
->
i›rio
 = 
	`i›rio_vÆue
(
o
->
i›rio_˛ass
, o->ioprio);

1788 
td
->
ts
.
i›rio
 =Åd->ioprio;

1791 i‡(
	`td_io_öô
(
td
))

1792 
îr
;

1794 i‡(
	`td_i€ngöe_Êagged
(
td
, 
FIO_SYNCIO
Ë&&Åd->
o
.
iodïth
 > 1) {

1795 
	`log_öfo
("note: both iodepth >= 1ánd synchronous I/OÉngine "

1799 i‡(
	`öô_io_u
(
td
))

1800 
îr
;

1802 i‡(
td
->
io_›s
->
po°_öô
 &&Åd->io_›s->
	`po°_öô
(td))

1803 
îr
;

1805 i‡(
o
->
vîify_async
 && 
	`vîify_async_öô
(
td
))

1806 
îr
;

1808 i‡(
o
->
cgroup
 && 
	`cgroup_£tup
(
td
, 
cgroup_li°
, &
cgroup_m¡
))

1809 
îr
;

1811 
î∫o
 = 0;

1812 i‡(
	`ni˚
(
o
->
ni˚
Ë=-1 && 
î∫o
 != 0) {

1813 
	`td_vîr‹
(
td
, 
î∫o
, "nice");

1814 
îr
;

1817 i‡(
o
->
ioscheduÀr
 && 
	`swôch_ioscheduÀr
(
td
))

1818 
îr
;

1820 i‡(!
o
->
¸óã_£rülize
 && 
	`£tup_fûes
(
td
))

1821 
îr
;

1823 i‡(!
	`öô_øndom_m≠
(
td
))

1824 
îr
;

1826 i‡(
o
->
exec_¥îun
 && 
	`exec_°rög
(o, o->exec_prerun, "prerun"))

1827 
îr
;

1829 i‡(
o
->
¥e_ªad
 && !
	`¥e_ªad_fûes
(
td
))

1830 
îr
;

1832 
	`fio_vîify_öô
(
td
);

1834 i‡(
	`øã_submô_öô
(
td
, 
sk_out
))

1835 
îr
;

1837 
	`£t_ïoch_time
(
td
, 
o
->
log_unix_ïoch
 | o->
log_Æã∫©e_ïoch
, o->
log_Æã∫©e_ïoch_˛ock_id
);

1838 
	`fio_gërußge
(&
td
->
ru_°¨t
);

1839 
	`mem˝y
(&
td
->
bw_ßm∂e_time
, &td->
ïoch
, (td->epoch));

1840 
	`mem˝y
(&
td
->
i›s_ßm∂e_time
, &td->
ïoch
, (td->epoch));

1841 
	`mem˝y
(&
td
->
ss
.
¥ev_time
, &td->
ïoch
, (td->epoch));

1843 
	`öô_thöktime
(
td
);

1845 i‡(
o
->
øãmö
[
DDIR_READ
] || o->øãmö[
DDIR_WRITE
] ||

1846 
o
->
øãmö
[
DDIR_TRIM
]) {

1847 
	`mem˝y
(&
td
->
œ°_øã_check_time
[
DDIR_READ
], &td->
bw_ßm∂e_time
,

1848 (
td
->
bw_ßm∂e_time
));

1849 
	`mem˝y
(&
td
->
œ°_øã_check_time
[
DDIR_WRITE
], &td->
bw_ßm∂e_time
,

1850 (
td
->
bw_ßm∂e_time
));

1851 
	`mem˝y
(&
td
->
œ°_øã_check_time
[
DDIR_TRIM
], &td->
bw_ßm∂e_time
,

1852 (
td
->
bw_ßm∂e_time
));

1855 
	`mem£t
(
byãs_d⁄e
, 0, (bytes_done));

1856 
˛ór_°©e
 = 
Ál£
;

1858 
	`kìp_ru¬ög
(
td
)) {

1859 
uöt64_t
 
vîify_byãs
;

1861 
	`fio_gëtime
(&
td
->
°¨t
, 
NULL
);

1862 
	`mem˝y
(&
td
->
ts_ˇche
, &td->
°¨t
, (td->start));

1864 i‡(
˛ór_°©e
) {

1865 
	`˛ór_io_°©e
(
td
, 0);

1867 i‡(
o
->
u∆ök_óch_lo›
 && 
	`u∆ök_Æl_fûes
(
td
))

1871 
	`¥u√_io_põ˚_log
(
td
);

1873 i‡(
td
->
o
.
vîify_⁄ly
 && 
	`td_wrôe
(td))

1874 
vîify_byãs
 = 
	`do_dry_run
(
td
);

1876 
	`do_io
(
td
, 
byãs_d⁄e
);

1878 i‡(!
	`ddú_rw_sum
(
byãs_d⁄e
)) {

1879 
	`fio_m¨k_td_ãrmö©e
(
td
);

1880 
vîify_byãs
 = 0;

1882 
vîify_byãs
 = 
byãs_d⁄e
[
DDIR_WRITE
] +

1883 
byãs_d⁄e
[
DDIR_TRIM
];

1892 i‡(
td
->
run°©e
 >
TD_EXITED
)

1895 
˛ór_°©e
 = 
åue
;

1904 
dódlock_lo›_˙t
 = 0;

1906 
	`check_upd©e_rußge
(
td
);

1907 i‡(!
	`fio_£m_down_åylock
(
°©_£m
))

1909 
	`u¶ìp
(1000);

1910 i‡(
dódlock_lo›_˙t
++ > 5000) {

1911 
	`log_îr
("fio seemsÅo be stuck grabbing stat_sem, forciblyÉxiting\n");

1912 
td
->
îr‹
 = 
EDEADLK
;

1913 
îr
;

1917 i‡(
	`td_ªad
(
td
Ë&&Åd->
io_byãs
[
DDIR_READ
])

1918 
	`upd©e_ru¡ime
(
td
, 
ñ≠£d_us
, 
DDIR_READ
);

1919 i‡(
	`td_wrôe
(
td
Ë&&Åd->
io_byãs
[
DDIR_WRITE
])

1920 
	`upd©e_ru¡ime
(
td
, 
ñ≠£d_us
, 
DDIR_WRITE
);

1921 i‡(
	`td_åim
(
td
Ë&&Åd->
io_byãs
[
DDIR_TRIM
])

1922 
	`upd©e_ru¡ime
(
td
, 
ñ≠£d_us
, 
DDIR_TRIM
);

1923 
	`fio_gëtime
(&
td
->
°¨t
, 
NULL
);

1924 
	`fio_£m_up
(
°©_£m
);

1926 i‡(
td
->
îr‹
 ||Åd->
ãrmö©e
)

1929 i‡(!
o
->
do_vîify
 ||

1930 
o
->
vîify
 =
VERIFY_NONE
 ||

1931 
	`td_i€ngöe_Êagged
(
td
, 
FIO_UNIDIR
))

1934 
	`˛ór_io_°©e
(
td
, 0);

1936 
	`fio_gëtime
(&
td
->
°¨t
, 
NULL
);

1938 
	`do_vîify
(
td
, 
vîify_byãs
);

1943 
	`check_upd©e_rußge
(
td
);

1945 
	`fio_£m_down
(
°©_£m
);

1946 
	`upd©e_ru¡ime
(
td
, 
ñ≠£d_us
, 
DDIR_READ
);

1947 
	`fio_gëtime
(&
td
->
°¨t
, 
NULL
);

1948 
	`fio_£m_up
(
°©_£m
);

1950 i‡(
td
->
îr‹
 ||Åd->
ãrmö©e
)

1959 i‡(
	`td_ofÊﬂd_ovîœp
(
td
)) {

1960 
ªs
 = 
	`±hªad_muãx_lock
(&
ovîœp_check
);

1961 
	`as£π
(
ªs
 == 0);

1963 
	`td_£t_run°©e
(
td
, 
TD_FINISHING
);

1964 i‡(
	`td_ofÊﬂd_ovîœp
(
td
)) {

1965 
ªs
 = 
	`±hªad_muãx_u∆ock
(&
ovîœp_check
);

1966 
	`as£π
(
ªs
 == 0);

1969 
	`upd©e_rußge_°©
(
td
);

1970 
td
->
ts
.
tŸÆ_run_time
 = 
	`mtime_sö˚_now
(&td->
ïoch
);

1971 
	`f‹_óch_rw_ddú
(
ddú
) {

1972 
td
->
ts
.
io_byãs
[
ddú
] =Åd->io_bytes[ddir];

1975 i‡(
td
->
o
.
vîify_°©e_ßve
 && !—d->
Êags
 & 
TD_F_VSTATE_SAVED
) &&

1976 (
td
->
o
.
vîify
 !
VERIFY_NONE
 && 
	`td_wrôe
(td)))

1977 
	`vîify_ßve_°©e
(
td
->
thªad_numbî
);

1979 
	`fio_u≈ö_mem‹y
(
td
);

1981 
	`td_wrôeout_logs
(
td
, 
åue
);

1983 
	`iﬁog_com¥ess_exô
(
td
);

1984 
	`øã_submô_exô
(
td
);

1986 i‡(
o
->
exec_po°run
)

1987 
	`exec_°rög
(
o
, o->
exec_po°run
, "postrun");

1989 i‡(
exôÆl_⁄_ãrmö©e
 || (
o
->
exôÆl_îr‹
 && 
td
->
îr‹
))

1990 
	`fio_ãrmö©e_thªads
(
td
->
groupid
,Åd->
o
.
exô_wh©
);

1992 
îr
:

1993 i‡(
td
->
îr‹
)

1994 
	`log_öfo
("fio:Öid=%d,Éº=%d/%s\n", (Ë
td
->
pid
,Åd->
îr‹
,

1995 
td
->
vîr‹
);

1997 i‡(
o
->
vîify_async
)

1998 
	`vîify_async_exô
(
td
);

2000 
	`˛o£_™d_‰ì_fûes
(
td
);

2001 
	`˛ónup_io_u
(
td
);

2002 
	`˛o£_i€ngöe
(
td
);

2003 
	`cgroup_shutdown
(
td
, 
cgroup_m¡
);

2004 
	`vîify_‰ì_°©e
(
td
);

2005 
	`td_z⁄e_‰ì_ödex
(
td
);

2007 i‡(
	`fio_›ti⁄_is_£t
(
o
, 
˝umask
)) {

2008 
ªt
 = 
	`fio_˝u£t_exô
(&
o
->
˝umask
);

2009 i‡(
ªt
)

2010 
	`td_vîr‹
(
td
, 
ªt
, "fio_cpuset_exit");

2016 i‡(
o
->
wrôe_iﬁog_fûe
)

2017 
	`wrôe_iﬁog_˛o£
(
td
);

2018 i‡(
td
->
io_log_rfûe
)

2019 
	`f˛o£
(
td
->
io_log_rfûe
);

2021 
	`td_£t_run°©e
(
td
, 
TD_EXITED
);

2027 
	`check_upd©e_rußge
(
td
);

2029 
	`sk_out_dr›
();

2030  (*Ë(
uöçå_t
Ë
td
->
îr‹
;

2031 
	}
}

2036 
	$ª≠_thªads
(*
ƒ_ru¬ög
, 
uöt64_t
 *
t_øã
,

2037 
uöt64_t
 *
m_øã
)

2039 
thªad_d©a
 *
td
;

2040 
˝uthªads
, 
ªÆthªads
, 
≥ndög
;

2041 
i
, 
°©us
, 
ªt
;

2046 
ªÆthªads
 = 
≥ndög
 = 
˝uthªads
 = 0;

2047 
	`f‹_óch_td
(
td
, 
i
) {

2048 
Êags
 = 0;

2050 i‡(!
	`°rcmp
(
td
->
o
.
i€ngöe
, "cpuio"))

2051 
˝uthªads
++;

2053 
ªÆthªads
++;

2055 i‡(!
td
->
pid
) {

2056 
≥ndög
++;

2059 i‡(
td
->
run°©e
 =
TD_REAPED
)

2061 i‡(
td
->
o
.
u£_thªad
) {

2062 i‡(
td
->
run°©e
 =
TD_EXITED
) {

2063 
	`td_£t_run°©e
(
td
, 
TD_REAPED
);

2064 
ª≠ed
;

2069 
Êags
 = 
WNOHANG
;

2070 i‡(
td
->
run°©e
 =
TD_EXITED
)

2071 
Êags
 = 0;

2076 
ªt
 = 
	`waôpid
(
td
->
pid
, &
°©us
, 
Êags
);

2077 i‡(
ªt
 < 0) {

2078 i‡(
î∫o
 =
ECHILD
) {

2079 
	`log_îr
("fio:Öid=%d disappeared %d\n",

2080 (Ë
td
->
pid
,Åd->
run°©e
);

2081 
td
->
sig
 = 
ECHILD
;

2082 
	`td_£t_run°©e
(
td
, 
TD_REAPED
);

2083 
ª≠ed
;

2085 
	`≥º‹
("waitpid");

2086 } i‡(
ªt
 =
td
->
pid
) {

2087 i‡(
	`WIFSIGNALED
(
°©us
)) {

2088 
sig
 = 
	`WTERMSIG
(
°©us
);

2090 i‡(
sig
 !
SIGTERM
 && sig !
SIGUSR2
)

2091 
	`log_îr
("fio:Öid=%d, got signal=%d\n",

2092 (Ë
td
->
pid
, 
sig
);

2093 
td
->
sig
 = sig;

2094 
	`td_£t_run°©e
(
td
, 
TD_REAPED
);

2095 
ª≠ed
;

2097 i‡(
	`WIFEXITED
(
°©us
)) {

2098 i‡(
	`WEXITSTATUS
(
°©us
Ë&& !
td
->
îr‹
)

2099 
td
->
îr‹
 = 
	`WEXITSTATUS
(
°©us
);

2101 
	`td_£t_run°©e
(
td
, 
TD_REAPED
);

2102 
ª≠ed
;

2110 i‡(
td
->
ãrmö©e
 &&

2111 
td
->
run°©e
 < 
TD_FSYNCING
 &&

2112 
	`time_sö˚_now
(&
td
->
ãrmö©e_time
Ë>
FIO_REAP_TIMEOUT
) {

2113 
	`log_îr
("fio: job '%s' (state=%d) hasn'tÉxited in "

2116 
td
->
o
.
«me
,Åd->
run°©e
,

2117 (Ë
	`time_sö˚_now
(&
td
->
ãrmö©e_time
));

2118 
	`td_£t_run°©e
(
td
, 
TD_REAPED
);

2119 
ª≠ed
;

2125 
≥ndög
++;

2127 
ª≠ed
:

2128 (*
ƒ_ru¬ög
)--;

2129 (*
m_øã
Ë-
	`ddú_rw_sum
(
td
->
o
.
øãmö
);

2130 (*
t_øã
Ë-
	`ddú_rw_sum
(
td
->
o
.
øã
);

2131 i‡(!
td
->
pid
)

2132 
≥ndög
--;

2134 i‡(
td
->
îr‹
)

2135 
exô_vÆue
++;

2137 
d⁄e_£cs
 +
	`mtime_sö˚_now
(&
td
->
ïoch
) / 1000;

2138 
	`¥ofûe_td_exô
(
td
);

2139 
	`Êow_exô_job
(
td
);

2142 i‡(*
ƒ_ru¬ög
 =
˝uthªads
 && !
≥ndög
 && 
ªÆthªads
)

2143 
	`fio_ãrmö©e_thªads
(
TERMINATE_ALL
, TERMINATE_ALL);

2144 
	}
}

2146 
boﬁ
 
	$__check_åiggî_fûe
()

2148 
°©
 
sb
;

2150 i‡(!
åiggî_fûe
)

2151  
Ál£
;

2153 i‡(
	`°©
(
åiggî_fûe
, &
sb
))

2154  
Ál£
;

2156 i‡(
	`u∆ök
(
åiggî_fûe
) < 0)

2157 
	`log_îr
("fio: faûedÅÿu∆ök %s: %s\n", 
åiggî_fûe
,

2158 
	`°ªº‹
(
î∫o
));

2160  
åue
;

2161 
	}
}

2163 
boﬁ
 
	$åiggî_timedout
()

2165 i‡(
åiggî_timeout
)

2166 i‡(
	`time_sö˚_gíesis
(Ë>
åiggî_timeout
) {

2167 
åiggî_timeout
 = 0;

2168  
åue
;

2171  
Ál£
;

2172 
	}
}

2174 
	$exec_åiggî
(c⁄° *
cmd
)

2176 
ªt
;

2178 i‡(!
cmd
 || cmd[0] == '\0')

2181 
ªt
 = 
	`sy°em
(
cmd
);

2182 i‡(
ªt
 == -1)

2183 
	`log_îr
("fio: faûedÉxecutög %†åiggî\n", 
cmd
);

2184 
	}
}

2186 
	$check_åiggî_fûe
()

2188 i‡(
	`__check_åiggî_fûe
(Ë|| 
	`åiggî_timedout
()) {

2189 i‡(
ƒ_˛õ¡s
)

2190 
	`fio_˛õ¡s_£nd_åiggî
(
åiggî_ªmŸe_cmd
);

2192 
	`vîify_ßve_°©e
(
IO_LIST_ALL
);

2193 
	`fio_ãrmö©e_thªads
(
TERMINATE_ALL
, TERMINATE_ALL);

2194 
	`exec_åiggî
(
åiggî_cmd
);

2197 
	}
}

2199 
	$fio_vîify_lﬂd_°©e
(
thªad_d©a
 *
td
)

2201 
ªt
;

2203 i‡(!
td
->
o
.
vîify_°©e
)

2206 i‡(
is_backíd
) {

2207 *
d©a
;

2209 
ªt
 = 
	`fio_£rvî_gë_vîify_°©e
(
td
->
o
.
«me
,

2210 
td
->
thªad_numbî
 - 1, &
d©a
);

2211 i‡(!
ªt
)

2212 
	`vîify_assign_°©e
(
td
, 
d©a
);

2214 
¥efix
[
PATH_MAX
];

2216 i‡(
aux_∑th
)

2217 
	`•rötf
(
¥efix
, "%s%˛oˇl", 
aux_∑th
,

2218 
FIO_OS_PATH_SEPARATOR
);

2220 
	`°r˝y
(
¥efix
, "local");

2221 
ªt
 = 
	`vîify_lﬂd_°©e
(
td
, 
¥efix
);

2224  
ªt
;

2225 
	}
}

2227 
	$do_u¶ìp
(
u£cs
)

2229 
	`check_f‹_ru¬ög_°©s
();

2230 
	`check_åiggî_fûe
();

2231 
	`u¶ìp
(
u£cs
);

2232 
	}
}

2234 
boﬁ
 
	$check_mou¡_wrôes
(
thªad_d©a
 *
td
)

2236 
fio_fûe
 *
f
;

2237 
i
;

2239 i‡(!
	`td_wrôe
(
td
Ë||Åd->
o
.
Ælow_mou¡ed_wrôe
)

2240  
Ál£
;

2246 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

2247 #ifde‡
FIO_HAVE_CHARDEV_SIZE


2248 i‡(
f
->
fûëy≥
 !
FIO_TYPE_BLOCK
 && f->fûëy≥ !
FIO_TYPE_CHAR
)

2250 i‡(
f
->
fûëy≥
 !
FIO_TYPE_BLOCK
)

2253 i‡(
	`devi˚_is_mou¡ed
(
f
->
fûe_«me
))

2254 
mou¡ed
;

2257  
Ál£
;

2258 
mou¡ed
:

2259 
	`log_îr
("fio: %†≠≥¨†mou¡ed,ánd 'Ælow_mou¡ed_wrôe' i¢'à£t. Ab‹tög.\n", 
f
->
fûe_«me
);

2260  
åue
;

2261 
	}
}

2263 
boﬁ
 
	$waôì_ru¬ög
(
thªad_d©a
 *
me
)

2265 c⁄° *
waôì
 = 
me
->
o
.
waô_f‹
;

2266 c⁄° *
£lf
 = 
me
->
o
.
«me
;

2267 
thªad_d©a
 *
td
;

2268 
i
;

2270 i‡(!
waôì
)

2271  
Ál£
;

2273 
	`f‹_óch_td
(
td
, 
i
) {

2274 i‡(!
	`°rcmp
(
td
->
o
.
«me
, 
£lf
Ë|| såcmp—d->o.«me, 
waôì
))

2277 i‡(
td
->
run°©e
 < 
TD_EXITED
) {

2278 
	`d¥öt
(
FD_PROCESS
, "%s fenced by %s(%s)\n",

2279 
£lf
, 
td
->
o
.
«me
,

2280 
	`run°©e_to_«me
(
td
->
run°©e
));

2281  
åue
;

2285 
	`d¥öt
(
FD_PROCESS
, "%s: %†com∂ëed, c™Ñun\n", 
£lf
, 
waôì
);

2286  
Ál£
;

2287 
	}
}

2292 
	$run_thªads
(
sk_out
 *sk_out)

2294 
thªad_d©a
 *
td
;

2295 
i
, 
todo
, 
ƒ_ru¬ög
, 
ƒ_°¨ãd
;

2296 
uöt64_t
 
m_øã
, 
t_øã
;

2297 
uöt64_t
 
•ít
;

2299 i‡(
fio_gtod_ofÊﬂd
 && 
	`fio_°¨t_gtod_thªad
())

2302 
	`fio_idÀ_¥of_öô
();

2304 
	`£t_sig_h™dÀrs
();

2306 
ƒ_thªad
 = 
ƒ_¥o˚ss
 = 0;

2307 
	`f‹_óch_td
(
td
, 
i
) {

2308 i‡(
	`check_mou¡_wrôes
(
td
))

2310 i‡(
td
->
o
.
u£_thªad
)

2311 
ƒ_thªad
++;

2313 
ƒ_¥o˚ss
++;

2316 i‡(
ouçut_f‹m©
 & 
FIO_OUTPUT_NORMAL
) {

2317 
buf_ouçut
 
out
;

2319 
	`buf_ouçut_öô
(&
out
);

2320 
	`__log_buf
(&
out
, "Starting ");

2321 i‡(
ƒ_thªad
)

2322 
	`__log_buf
(&
out
, "%dÅhªad%s", 
ƒ_thªad
,

2323 
ƒ_thªad
 > 1 ? "s" : "");

2324 i‡(
ƒ_¥o˚ss
) {

2325 i‡(
ƒ_thªad
)

2326 
	`__log_buf
(&
out
, "ánd ");

2327 
	`__log_buf
(&
out
, "%dÖro˚ss%s", 
ƒ_¥o˚ss
,

2328 
ƒ_¥o˚ss
 > 1 ? "es" : "");

2330 
	`__log_buf
(&
out
, "\n");

2331 
	`log_öfo_buf
(
out
.
buf
, out.
buÊí
);

2332 
	`buf_ouçut_‰ì
(&
out
);

2335 
todo
 = 
thªad_numbî
;

2336 
ƒ_ru¬ög
 = 0;

2337 
ƒ_°¨ãd
 = 0;

2338 
m_øã
 = 
t_øã
 = 0;

2340 
	`f‹_óch_td
(
td
, 
i
) {

2341 
	`¥öt_°©us_öô
(
td
->
thªad_numbî
 - 1);

2343 i‡(!
td
->
o
.
¸óã_£rülize
)

2346 i‡(
	`fio_vîify_lﬂd_°©e
(
td
))

2347 
ª≠
;

2354 i‡(
	`£tup_fûes
(
td
)) {

2355 
ª≠
:

2356 
exô_vÆue
++;

2357 i‡(
td
->
îr‹
)

2358 
	`log_îr
("fio:Öid=%d,Érr=%d/%s\n",

2359 (Ë
td
->
pid
,Åd->
îr‹
,Åd->
vîr‹
);

2360 
	`td_£t_run°©e
(
td
, 
TD_REAPED
);

2361 
todo
--;

2363 
fio_fûe
 *
f
;

2364 
j
;

2371 
	`f‹_óch_fûe
(
td
, 
f
, 
j
) {

2372 i‡(
	`fio_fûe_›í
(
f
))

2373 
	`td_io_˛o£_fûe
(
td
, 
f
);

2379 
	`fio_idÀ_¥of_°¨t
();

2381 
	`£t_gíesis_time
();

2383 
todo
) {

2384 
thªad_d©a
 *
m≠
[
REAL_MAX_JOBS
];

2385 
time•ec
 
this_°¨t
;

2386 
this_jobs
 = 0, 
À·
;

2387 
f‹k_d©a
 *
fd
;

2392 
	`f‹_óch_td
(
td
, 
i
) {

2393 i‡(
td
->
run°©e
 !
TD_NOT_CREATED
)

2400 i‡(
td
->
ãrmö©e
) {

2401 
todo
--;

2405 i‡(
td
->
o
.
°¨t_dñay
) {

2406 
•ít
 = 
	`utime_sö˚_gíesis
();

2408 i‡(
td
->
o
.
°¨t_dñay
 > 
•ít
)

2412 i‡(
td
->
o
.
°⁄ewÆl
 && (
ƒ_°¨ãd
 || 
ƒ_ru¬ög
)) {

2413 
	`d¥öt
(
FD_PROCESS
, "%s: stonewall wait\n",

2414 
td
->
o
.
«me
);

2418 i‡(
	`waôì_ru¬ög
(
td
)) {

2419 
	`d¥öt
(
FD_PROCESS
, "%s: waiting for %s\n",

2420 
td
->
o
.
«me
,Åd->o.
waô_f‹
);

2424 
	`öô_disk_utû
(
td
);

2426 
td
->
rußge_£m
 = 
	`fio_£m_öô
(
FIO_SEM_LOCKED
);

2427 
td
->
upd©e_rußge
 = 0;

2433 
	`td_£t_run°©e
(
td
, 
TD_CREATED
);

2434 
m≠
[
this_jobs
++] = 
td
;

2435 
ƒ_°¨ãd
++;

2437 
fd
 = 
	`ˇŒoc
(1, (*fd));

2438 
fd
->
td
 =Åd;

2439 
fd
->
sk_out
 = sk_out;

2441 i‡(
td
->
o
.
u£_thªad
) {

2442 
ªt
;

2444 
	`d¥öt
(
FD_PROCESS
, "willÖthread_create\n");

2445 
ªt
 = 
	`±hªad_¸óã
(&
td
->
thªad
, 
NULL
,

2446 
thªad_maö
, 
fd
);

2447 i‡(
ªt
) {

2448 
	`log_îr
("pthread_create: %s\n",

2449 
	`°ªº‹
(
ªt
));

2450 
	`‰ì
(
fd
);

2451 
ƒ_°¨ãd
--;

2454 
fd
 = 
NULL
;

2455 
ªt
 = 
	`±hªad_dëach
(
td
->
thªad
);

2456 i‡(
ªt
)

2457 
	`log_îr
("pthread_detach: %s",

2458 
	`°ªº‹
(
ªt
));

2460 
pid_t
 
pid
;

2461 *
eo
;

2462 
	`d¥öt
(
FD_PROCESS
, "will fork\n");

2463 
eo
 = 
td
->eo;

2464 
	`ªad_b¨rõr
();

2465 
pid
 = 
	`f‹k
();

2466 i‡(!
pid
) {

2467 
ªt
;

2469 
ªt
 = ()(
uöçå_t
)
	`thªad_maö
(
fd
);

2470 
	`_exô
(
ªt
);

2471 } i‡(
i
 =
fio_debug_jobno
)

2472 *
fio_debug_jobp
 = 
pid
;

2473 
	`‰ì
(
eo
);

2474 
	`‰ì
(
fd
);

2475 
fd
 = 
NULL
;

2477 
	`d¥öt
(
FD_MUTEX
, "wait on startup_sem\n");

2478 i‡(
	`fio_£m_down_timeout
(
°¨tup_£m
, 10000)) {

2479 
	`log_îr
("fio: job startup hung?Éxiting.\n");

2480 
	`fio_ãrmö©e_thªads
(
TERMINATE_ALL
, TERMINATE_ALL);

2481 
fio_ab‹t
 = 
åue
;

2482 
ƒ_°¨ãd
--;

2483 
	`‰ì
(
fd
);

2486 
	`d¥öt
(
FD_MUTEX
, "done waiting on startup_sem\n");

2493 
	`fio_gëtime
(&
this_°¨t
, 
NULL
);

2494 
À·
 = 
this_jobs
;

2495 
À·
 && !
fio_ab‹t
) {

2496 i‡(
	`mtime_sö˚_now
(&
this_°¨t
Ë> 
JOB_START_TIMEOUT
)

2499 
	`do_u¶ìp
(100000);

2501 
i
 = 0; i < 
this_jobs
; i++) {

2502 
td
 = 
m≠
[
i
];

2503 i‡(!
td
)

2505 i‡(
td
->
run°©e
 =
TD_INITIALIZED
) {

2506 
m≠
[
i
] = 
NULL
;

2507 
À·
--;

2508 } i‡(
td
->
run°©e
 >
TD_EXITED
) {

2509 
m≠
[
i
] = 
NULL
;

2510 
À·
--;

2511 
todo
--;

2512 
ƒ_ru¬ög
++;

2517 i‡(
À·
) {

2518 
	`log_îr
("fio: %d job%†ÁûedÅÿ°¨t\n", 
À·
,

2519 
À·
 > 1 ? "s" : "");

2520 
i
 = 0; i < 
this_jobs
; i++) {

2521 
td
 = 
m≠
[
i
];

2522 i‡(!
td
)

2524 
	`kûl
(
td
->
pid
, 
SIGTERM
);

2532 
	`f‹_óch_td
(
td
, 
i
) {

2533 i‡(
td
->
run°©e
 !
TD_INITIALIZED
)

2536 i‡(
	`ö_ømp_time
(
td
))

2537 
	`td_£t_run°©e
(
td
, 
TD_RAMP
);

2539 
	`td_£t_run°©e
(
td
, 
TD_RUNNING
);

2540 
ƒ_ru¬ög
++;

2541 
ƒ_°¨ãd
--;

2542 
m_øã
 +
	`ddú_rw_sum
(
td
->
o
.
øãmö
);

2543 
t_øã
 +
	`ddú_rw_sum
(
td
->
o
.
øã
);

2544 
todo
--;

2545 
	`fio_£m_up
(
td
->
£m
);

2548 
	`ª≠_thªads
(&
ƒ_ru¬ög
, &
t_øã
, &
m_øã
);

2550 i‡(
todo
)

2551 
	`do_u¶ìp
(100000);

2554 
ƒ_ru¬ög
) {

2555 
	`ª≠_thªads
(&
ƒ_ru¬ög
, &
t_øã
, &
m_øã
);

2556 
	`do_u¶ìp
(10000);

2559 
	`fio_idÀ_¥of_°›
();

2561 
	`upd©e_io_ticks
();

2562 
	}
}

2564 
	$‰ì_disk_utû
()

2566 
	`disk_utû_¥u√_íåõs
();

2567 
	`hñ≥r_thªad_de°roy
();

2568 
	}
}

2570 
	$fio_backíd
(
sk_out
 *sk_out)

2572 
thªad_d©a
 *
td
;

2573 
i
;

2575 i‡(
exec_¥ofûe
) {

2576 i‡(
	`lﬂd_¥ofûe
(
exec_¥ofûe
))

2578 
	`‰ì
(
exec_¥ofûe
);

2579 
exec_¥ofûe
 = 
NULL
;

2581 i‡(!
thªad_numbî
)

2584 i‡(
wrôe_bw_log
) {

2585 
log_∑øms
 
p
 = {

2586 .
log_ty≥
 = 
IO_LOG_TYPE_BW
,

2589 
	`£tup_log
(&
agg_io_log
[
DDIR_READ
], &
p
, "agg-read_bw.log");

2590 
	`£tup_log
(&
agg_io_log
[
DDIR_WRITE
], &
p
, "agg-write_bw.log");

2591 
	`£tup_log
(&
agg_io_log
[
DDIR_TRIM
], &
p
, "agg-trim_bw.log");

2594 i‡(
	`öô_globÆ_dedu≥_w‹kög_£t_£eds
()) {

2595 
	`log_îr
("fio: failedÅo initialize global dedupe working set\n");

2599 
°¨tup_£m
 = 
	`fio_£m_öô
(
FIO_SEM_LOCKED
);

2600 i‡(!
sk_out
)

2601 
is_loˇl_backíd
 = 
åue
;

2602 i‡(
°¨tup_£m
 =
NULL
)

2605 
	`£t_gíesis_time
();

2606 
	`°©_öô
();

2607 i‡(
	`hñ≥r_thªad_¸óã
(
°¨tup_£m
, 
sk_out
))

2608 
	`log_îr
("fio: failedÅo create helperÅhread\n");

2610 
cgroup_li°
 = 
	`smÆloc
((*cgroup_list));

2611 i‡(
cgroup_li°
)

2612 
	`INIT_FLIST_HEAD
(
cgroup_li°
);

2614 
	`run_thªads
(
sk_out
);

2616 
	`hñ≥r_thªad_exô
();

2618 i‡(!
fio_ab‹t
) {

2619 
	`__show_run_°©s
();

2620 i‡(
wrôe_bw_log
) {

2621 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

2622 
io_log
 *
log
 = 
agg_io_log
[
i
];

2624 
	`Êush_log
(
log
, 
Ál£
);

2625 
	`‰ì_log
(
log
);

2630 
	`f‹_óch_td
(
td
, 
i
) {

2631 
thªad_°©
 *
ts
 = &
td
->ts;

2633 
	`‰ì_˛©_¥io_°©s
(
ts
);

2634 
	`°ódy°©e_‰ì
(
td
);

2635 
	`fio_›ti⁄s_‰ì
(
td
);

2636 
	`fio_dump_›ti⁄s_‰ì
(
td
);

2637 i‡(
td
->
rußge_£m
) {

2638 
	`fio_£m_ªmove
(
td
->
rußge_£m
);

2639 
td
->
rußge_£m
 = 
NULL
;

2641 
	`fio_£m_ªmove
(
td
->
£m
);

2642 
td
->
£m
 = 
NULL
;

2645 
	`‰ì_disk_utû
();

2646 i‡(
cgroup_li°
) {

2647 
	`cgroup_kûl
(
cgroup_li°
);

2648 
	`s‰ì
(
cgroup_li°
);

2651 
	`fio_£m_ªmove
(
°¨tup_£m
);

2652 
	`°©_exô
();

2653  
exô_vÆue
;

2654 
	}
}

	@blktrace.c

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

6 
	~<uni°d.h
>

7 
	~<î∫o.h
>

9 
	~"Êi°.h
"

10 
	~"fio.h
"

11 
	~"iﬁog.h
"

12 
	~"blkåa˚.h
"

13 
	~"blkåa˚_≠i.h
"

14 
	~"o¶ib/löux-dev-lookup.h
"

16 
	sfûe_ˇche
 {

17 
	mmaj
;

18 
	mmö
;

19 
	mfûío
;

25 
	$disˇrd_pdu
(
FILE
* 
f
, 
blk_io_åa˚
 *
t
)

27 i‡(
t
->
pdu_Àn
 == 0)

30 
	`d¥öt
(
FD_BLKTRACE
, "disˇrdÖduÜí %u\n", 
t
->
pdu_Àn
);

31 i‡(
	`f£ek
(
f
, 
t
->
pdu_Àn
, 
SEEK_CUR
) < 0)

32  -
î∫o
;

34  
t
->
pdu_Àn
;

35 
	}
}

41 
boﬁ
 
	$is_blkåa˚
(c⁄° *
fûíame
, *
√ed_sw≠
)

43 
blk_io_åa˚
 
t
;

44 
fd
, 
ªt
;

46 
fd
 = 
	`›í
(
fûíame
, 
O_RDONLY
);

47 i‡(
fd
 < 0)

48  
Ál£
;

50 
ªt
 = 
	`ªad
(
fd
, &
t
, (t));

51 
	`˛o£
(
fd
);

53 i‡(
ªt
 < 0) {

54 
	`≥º‹
("read blktrace");

55  
Ál£
;

56 } i‡(
ªt
 !(
t
)) {

57 
	`log_îr
("fio: shortÑead on blktrace file\n");

58  
Ál£
;

61 i‡((
t
.
magic
 & 0xffffff00Ë=
BLK_IO_TRACE_MAGIC
) {

62 *
√ed_sw≠
 = 0;

63  
åue
;

69 
t
.
magic
 = 
	`fio_sw≠32
(t.magic);

70 i‡((
t
.
magic
 & 0xffffff00Ë=
BLK_IO_TRACE_MAGIC
) {

71 *
√ed_sw≠
 = 1;

72  
åue
;

75  
Ál£
;

76 
	}
}

78 
	#FMINORBITS
 20

	)

79 
	#FMINORMASK
 ((1U << 
FMINORBITS
Ë- 1)

	)

80 
	#FMAJOR
(
dev
Ë((Ë((devË>> 
FMINORBITS
))

	)

81 
	#FMINOR
(
dev
Ë((Ë((devË& 
FMINORMASK
))

	)

83 
	$åa˚_add_›í_˛o£_evít
(
thªad_d©a
 *
td
, 
fûío
, 
fûe_log_a˘
 
a˘i⁄
)

85 
io_põ˚
 *
ùo
;

87 
ùo
 = 
	`ˇŒoc
(1, (*ipo));

88 
	`öô_ùo
(
ùo
);

90 
ùo
->
ddú
 = 
DDIR_INVAL
;

91 
ùo
->
fûío
 = fileno;

92 
ùo
->
fûe_a˘i⁄
 = 
a˘i⁄
;

93 
	`Êi°_add_èû
(&
ùo
->
li°
, &
td
->
io_log_li°
);

94 
	}
}

96 
	$åa˚_add_fûe
(
thªad_d©a
 *
td
, 
__u32
 
devi˚
,

97 
fûe_ˇche
 *
ˇche
)

99 
maj
 = 
	`FMAJOR
(
devi˚
);

100 
mö
 = 
	`FMINOR
(
devi˚
);

101 
fio_fûe
 *
f
;

102 
dev
[256];

103 
i
;

105 i‡(
ˇche
->
maj
 =maj && cache->
mö
 == min)

106  
ˇche
->
fûío
;

108 
ˇche
->
maj
 = maj;

109 
ˇche
->
mö
 = min;

114 
	`f‹_óch_fûe
(
td
, 
f
, 
i
)

115 i‡(
f
->
maj‹
 =
maj
 && f->
mö‹
 =
mö
) {

116 
ˇche
->
fûío
 = 
f
->fileno;

117  
ˇche
->
fûío
;

120 
	`°r˝y
(
dev
, "/dev");

121 i‡(
	`blkåa˚_lookup_devi˚
(
td
->
o
.
ª∂ay_ªdúe˘
, 
dev
, 
maj
, 
mö
)) {

122 
fûío
;

124 i‡(
td
->
o
.
ª∂ay_ªdúe˘
)

125 
	`d¥öt
(
FD_BLKTRACE
, "deviceÜookup: %d/%d\n overridden"

126 " wôh: %s\n", 
maj
, 
mö
,

127 
td
->
o
.
ª∂ay_ªdúe˘
);

129 
	`d¥öt
(
FD_BLKTRACE
, "devi˚Üookup: %d/%d\n", 
maj
, 
mö
);

131 
	`d¥öt
(
FD_BLKTRACE
, "add devi˚†%s\n", 
dev
);

132 
fûío
 = 
	`add_fûe_ex˛usive
(
td
, 
dev
);

133 
td
->
o
.
›í_fûes
++;

134 
td
->
fûes
[
fûío
]->
maj‹
 = 
maj
;

135 
td
->
fûes
[
fûío
]->
mö‹
 = 
mö
;

136 
	`åa˚_add_›í_˛o£_evít
(
td
, 
fûío
, 
FIO_LOG_OPEN_FILE
);

137 
ˇche
->
fûío
 = fileno;

140  
ˇche
->
fûío
;

141 
	}
}

143 
	$t_byãs_Æign
(
thªad_›ti⁄s
 *
o
, 
blk_io_åa˚
 *
t
)

145 i‡(!
o
->
ª∂ay_Æign
)

148 
t
->
byãs
 = (t->byã†+ 
o
->
ª∂ay_Æign
 - 1) & ~(o->replay_align - 1);

149 
	}
}

154 
	$°‹e_ùo
(
thªad_d©a
 *
td
, 
off£t
,

155 
byãs
, 
rw
, 
âime
,

156 
fûío
)

158 
io_põ˚
 *
ùo
;

160 
ùo
 = 
	`ˇŒoc
(1, (*ipo));

161 
	`öô_ùo
(
ùo
);

163 
ùo
->
off£t
 = offset * 512;

164 i‡(
td
->
o
.
ª∂ay_sˇÀ
)

165 
ùo
->
off£t
 = ipo->off£à/ 
td
->
o
.
ª∂ay_sˇÀ
;

166 
	`ùo_byãs_Æign
(
td
->
o
.
ª∂ay_Æign
, 
ùo
);

167 
ùo
->
Àn
 = 
byãs
;

168 
ùo
->
dñay
 = 
âime
 / 1000;

169 i‡(
rw
)

170 
ùo
->
ddú
 = 
DDIR_WRITE
;

172 
ùo
->
ddú
 = 
DDIR_READ
;

173 
ùo
->
fûío
 = fileno;

175 
	`d¥öt
(
FD_BLKTRACE
, "store ddir=%d, off=%llu,Üen=%lu, delay=%lu\n",

176 
ùo
->
ddú
, ipo->
off£t
,

177 
ùo
->
Àn
, ipo->
dñay
);

178 
	`queue_io_põ˚
(
td
, 
ùo
);

179 
	}
}

181 
boﬁ
 
	$h™dÀ_åa˚_nŸify
(
blk_io_åa˚
 *
t
)

183 
t
->
a˘i⁄
) {

184 
BLK_TN_PROCESS
:

185 
	`d¥öt
(
FD_BLKTRACE
, "gotÖrocessÇotify: %x, %d\n",

186 
t
->
a˘i⁄
,Å->
pid
);

188 
BLK_TN_TIMESTAMP
:

189 
	`d¥öt
(
FD_BLKTRACE
, "gotÅimestampÇotify: %x, %d\n",

190 
t
->
a˘i⁄
,Å->
pid
);

192 
BLK_TN_MESSAGE
:

195 
	`d¥öt
(
FD_BLKTRACE
, "unknow¿åa˚á˘ %x\n", 
t
->
a˘i⁄
);

198  
Ál£
;

199 
	}
}

201 
boﬁ
 
	$h™dÀ_åa˚_disˇrd
(
thªad_d©a
 *
td
,

202 
blk_io_åa˚
 *
t
,

203 
âime
,

204 *
ios
, *
bs
,

205 
fûe_ˇche
 *
ˇche
)

207 
io_põ˚
 *
ùo
;

208 
fûío
;

210 i‡(
td
->
o
.
ª∂ay_skù
 & (1u << 
DDIR_TRIM
))

211  
Ál£
;

213 
ùo
 = 
	`ˇŒoc
(1, (*ipo));

214 
	`öô_ùo
(
ùo
);

215 
fûío
 = 
	`åa˚_add_fûe
(
td
, 
t
->
devi˚
, 
ˇche
);

217 
ios
[
DDIR_TRIM
]++;

218 i‡(
t
->
byãs
 > 
bs
[
DDIR_TRIM
])

219 
bs
[
DDIR_TRIM
] = 
t
->
byãs
;

221 
td
->
o
.
size
 +
t
->
byãs
;

223 
	`INIT_FLIST_HEAD
(&
ùo
->
li°
);

225 
ùo
->
off£t
 = 
t
->
£˘‹
 * 512;

226 i‡(
td
->
o
.
ª∂ay_sˇÀ
)

227 
ùo
->
off£t
 = ipo->off£à/ 
td
->
o
.
ª∂ay_sˇÀ
;

228 
	`ùo_byãs_Æign
(
td
->
o
.
ª∂ay_Æign
, 
ùo
);

229 
ùo
->
Àn
 = 
t
->
byãs
;

230 
ùo
->
dñay
 = 
âime
 / 1000;

231 
ùo
->
ddú
 = 
DDIR_TRIM
;

232 
ùo
->
fûío
 = fileno;

234 
	`d¥öt
(
FD_BLKTRACE
, "store discard, off=%llu,Üen=%lu, delay=%lu\n",

235 
ùo
->
off£t
, ipo->
Àn
,

236 
ùo
->
dñay
);

237 
	`queue_io_põ˚
(
td
, 
ùo
);

238  
åue
;

239 
	}
}

241 
	$dump_åa˚
(
blk_io_åa˚
 *
t
)

243 
	`log_îr
("blkåa˚: ign‹ög zîÿbyãÅø˚:á˘i⁄=%x\n", 
t
->
a˘i⁄
);

244 
	}
}

246 
boﬁ
 
	$h™dÀ_åa˚_fs
(
thªad_d©a
 *
td
, 
blk_io_åa˚
 *
t
,

247 
âime
, *
ios
,

248 *
bs
, 
fûe_ˇche
 *
ˇche
)

250 
rw
;

251 
fûío
;

253 
fûío
 = 
	`åa˚_add_fûe
(
td
, 
t
->
devi˚
, 
ˇche
);

255 
rw
 = (
t
->
a˘i⁄
 & 
	`BLK_TC_ACT
(
BLK_TC_WRITE
)) != 0;

257 i‡(
rw
) {

258 i‡(
td
->
o
.
ª∂ay_skù
 & (1u << 
DDIR_WRITE
))

259  
Ál£
;

261 i‡(
td
->
o
.
ª∂ay_skù
 & (1u << 
DDIR_READ
))

262  
Ál£
;

265 i‡(!
t
->
byãs
) {

266 i‡(!
	`fio_did_w¨n
(
FIO_WARN_BTRACE_ZERO
))

267 
	`dump_åa˚
(
t
);

268  
Ál£
;

271 i‡(
t
->
byãs
 > 
bs
[
rw
])

272 
bs
[
rw
] = 
t
->
byãs
;

274 
ios
[
rw
]++;

275 
td
->
o
.
size
 +
t
->
byãs
;

276 
	`°‹e_ùo
(
td
, 
t
->
£˘‹
,Å->
byãs
, 
rw
, 
âime
, 
fûío
);

277  
åue
;

278 
	}
}

280 
boﬁ
 
	$h™dÀ_åa˚_Êush
(
thªad_d©a
 *
td
, 
blk_io_åa˚
 *
t
,

281 
âime
, *
ios
,

282 
fûe_ˇche
 *
ˇche
)

284 
io_põ˚
 *
ùo
;

285 
fûío
;

287 i‡(
td
->
o
.
ª∂ay_skù
 & (1u << 
DDIR_SYNC
))

288  
Ál£
;

290 
ùo
 = 
	`ˇŒoc
(1, (*ipo));

291 
	`öô_ùo
(
ùo
);

292 
fûío
 = 
	`åa˚_add_fûe
(
td
, 
t
->
devi˚
, 
ˇche
);

294 
ùo
->
dñay
 = 
âime
 / 1000;

295 
ùo
->
ddú
 = 
DDIR_SYNC
;

296 
ùo
->
fûío
 = fileno;

298 
ios
[
DDIR_SYNC
]++;

299 
	`d¥öt
(
FD_BLKTRACE
, "°‹êÊush dñay=%lu\n", 
ùo
->
dñay
);

301 i‡(!(
td
->
Êags
 & 
TD_F_SYNCS
))

302 
td
->
Êags
 |
TD_F_SYNCS
;

304 
	`queue_io_põ˚
(
td
, 
ùo
);

305  
åue
;

306 
	}
}

312 
boﬁ
 
	$queue_åa˚
(
thªad_d©a
 *
td
, 
blk_io_åa˚
 *
t
,

313 *
ios
, *
bs
,

314 
fûe_ˇche
 *
ˇche
)

316 *
œ°_âime
 = &
td
->
io_log_œ°_âime
;

317 
dñay
 = 0;

319 i‡((
t
->
a˘i⁄
 & 0xffffË!
__BLK_TA_QUEUE
)

320  
Ál£
;

322 i‡(!(
t
->
a˘i⁄
 & 
	`BLK_TC_ACT
(
BLK_TC_NOTIFY
))) {

323 
dñay
 = 
	`dñay_sö˚_âime
(
td
, 
t
->
time
);

324 *
œ°_âime
 = 
t
->
time
;

327 
	`t_byãs_Æign
(&
td
->
o
, 
t
);

329 i‡(
t
->
a˘i⁄
 & 
	`BLK_TC_ACT
(
BLK_TC_NOTIFY
))

330  
	`h™dÀ_åa˚_nŸify
(
t
);

331 i‡(
t
->
a˘i⁄
 & 
	`BLK_TC_ACT
(
BLK_TC_DISCARD
))

332  
	`h™dÀ_åa˚_disˇrd
(
td
, 
t
, 
dñay
, 
ios
, 
bs
, 
ˇche
);

333 i‡(
t
->
a˘i⁄
 & 
	`BLK_TC_ACT
(
BLK_TC_FLUSH
))

334  
	`h™dÀ_åa˚_Êush
(
td
, 
t
, 
dñay
, 
ios
, 
ˇche
);

336  
	`h™dÀ_åa˚_fs
(
td
, 
t
, 
dñay
, 
ios
, 
bs
, 
ˇche
);

337 
	}
}

339 
	$byãsw≠_åa˚
(
blk_io_åa˚
 *
t
)

341 
t
->
magic
 = 
	`fio_sw≠32
(t->magic);

342 
t
->
£quí˚
 = 
	`fio_sw≠32
(t->sequence);

343 
t
->
time
 = 
	`fio_sw≠64
(t->time);

344 
t
->
£˘‹
 = 
	`fio_sw≠64
(t->sector);

345 
t
->
byãs
 = 
	`fio_sw≠32
(t->bytes);

346 
t
->
a˘i⁄
 = 
	`fio_sw≠32
(t->action);

347 
t
->
pid
 = 
	`fio_sw≠32
(t->pid);

348 
t
->
devi˚
 = 
	`fio_sw≠32
(t->device);

349 
t
->
˝u
 = 
	`fio_sw≠32
(t->cpu);

350 
t
->
îr‹
 = 
	`fio_sw≠16
(t->error);

351 
t
->
pdu_Àn
 = 
	`fio_sw≠16
(t->pdu_len);

352 
	}
}

354 
boﬁ
 
	$t_is_wrôe
(
blk_io_åa˚
 *
t
)

356  (
t
->
a˘i⁄
 & 
	`BLK_TC_ACT
(
BLK_TC_WRITE
 | 
BLK_TC_DISCARD
)) != 0;

357 
	}
}

359 
fio_ddú
 
	$t_gë_ddú
(
blk_io_åa˚
 *
t
)

361 i‡(
t
->
a˘i⁄
 & 
	`BLK_TC_ACT
(
BLK_TC_READ
))

362  
DDIR_READ
;

363 i‡(
t
->
a˘i⁄
 & 
	`BLK_TC_ACT
(
BLK_TC_WRITE
))

364  
DDIR_WRITE
;

365 i‡(
t
->
a˘i⁄
 & 
	`BLK_TC_ACT
(
BLK_TC_DISCARD
))

366  
DDIR_TRIM
;

368  
DDIR_INVAL
;

369 
	}
}

371 
	$dïth_öc
(
blk_io_åa˚
 *
t
, *
dïth
)

373 
fio_ddú
 
ddú
;

375 
ddú
 = 
	`t_gë_ddú
(
t
);

376 i‡(
ddú
 !
DDIR_INVAL
)

377 
dïth
[
ddú
]++;

378 
	}
}

380 
	$dïth_dec
(
blk_io_åa˚
 *
t
, *
dïth
)

382 
fio_ddú
 
ddú
;

384 
ddú
 = 
	`t_gë_ddú
(
t
);

385 i‡(
ddú
 !
DDIR_INVAL
)

386 
dïth
[
ddú
]--;

387 
	}
}

389 
	$dïth_íd
(
blk_io_åa˚
 *
t
, *
this_dïth
, *
dïth
)

391 
fio_ddú
 
ddú
 = 
DDIR_INVAL
;

393 
ddú
 = 
	`t_gë_ddú
(
t
);

394 i‡(
ddú
 !
DDIR_INVAL
) {

395 
dïth
[
ddú
] = 
	`max
(dïth[ddú], 
this_dïth
[ddir]);

396 
this_dïth
[
ddú
] = 0;

398 
	}
}

404 
boﬁ
 
	$öô_blkåa˚_ªad
(
thªad_d©a
 *
td
, c⁄° *
fûíame
, 
√ed_sw≠
)

406 
ﬁd_°©e
;

408 
td
->
io_log_rfûe
 = 
	`f›í
(
fûíame
, "rb");

409 i‡(!
td
->
io_log_rfûe
) {

410 
	`td_vîr‹
(
td
, 
î∫o
, "open blktrace file");

411 
îr
;

413 
td
->
io_log_blkåa˚_sw≠
 = 
√ed_sw≠
;

414 
td
->
io_log_œ°_âime
 = 0;

415 
td
->
o
.
size
 = 0;

417 
	`‰ì_ªÀa£_fûes
(
td
);

419 
ﬁd_°©e
 = 
	`td_bump_run°©e
(
td
, 
TD_SETTING_UP
);

421 i‡(!
	`ªad_blkåa˚
(
td
)) {

422 
îr
;

425 
	`td_ª°‹e_run°©e
(
td
, 
ﬁd_°©e
);

427 i‡(!
td
->
fûes_ödex
) {

428 
	`log_îr
("fio: didÇot findÑeplay device(s)\n");

429  
Ál£
;

432  
åue
;

434 
îr
:

435 i‡(
td
->
io_log_rfûe
) {

436 
	`f˛o£
(
td
->
io_log_rfûe
);

437 
td
->
io_log_rfûe
 = 
NULL
;

439  
Ál£
;

440 
	}
}

442 
boﬁ
 
	$ªad_blkåa˚
(
thªad_d©a
* 
td
)

444 
blk_io_åa˚
 
t
;

445 
fûe_ˇche
 
ˇche
 = {

446 .
maj
 = ~0U,

447 .
mö
 = ~0U,

449 
ios
[
DDIR_RWDIR_SYNC_CNT
] = { };

450 
rw_bs
[
DDIR_RWDIR_CNT
] = { };

451 
skù≥d_wrôes
;

452 
FILE
 *
f
 = 
td
->
io_log_rfûe
;

453 
i
, 
max_dïth
;

454 
fio_fûe
 *
fiof
;

455 
this_dïth
[
DDIR_RWDIR_CNT
] = { };

456 
dïth
[
DDIR_RWDIR_CNT
] = { };

457 
öt64_t
 
ôems_to_„tch
 = 0;

459 i‡(
td
->
o
.
ªad_iﬁog_chunked
) {

460 
ôems_to_„tch
 = 
	`iﬁog_ôems_to_„tch
(
td
);

461 i‡(!
ôems_to_„tch
)

462  
åue
;

465 
skù≥d_wrôes
 = 0;

467 
ªt
 = 
	`‰ód
(&
t
, 1, —), 
f
);

469 i‡(
	`„º‹
(
f
)) {

470 
	`td_vîr‹
(
td
, 
î∫o
, "read blktrace file");

471 
îr
;

472 } i‡(
	`„of
(
f
)) {

474 } i‡(
ªt
 < (Ë(
t
)) {

475 
	`log_îr
("fio: iolog shortÑead\n");

479 i‡(
td
->
io_log_blkåa˚_sw≠
)

480 
	`byãsw≠_åa˚
(&
t
);

482 i‡((
t
.
magic
 & 0xffffff00Ë!
BLK_IO_TRACE_MAGIC
) {

483 
	`log_îr
("fio: bad magic in blktrace data: %x\n",

484 
t
.
magic
);

485 
îr
;

487 i‡((
t
.
magic
 & 0xffË!
BLK_IO_TRACE_VERSION
) {

488 
	`log_îr
("fio: bad blktrace version %d\n",

489 
t
.
magic
 & 0xff);

490 
îr
;

492 
ªt
 = 
	`disˇrd_pdu
(
f
, &
t
);

493 i‡(
ªt
 < 0) {

494 
	`td_vîr‹
(
td
, -
ªt
, "blktraceÜseek");

495 
îr
;

497 i‡((
t
.
a˘i⁄
 & 
	`BLK_TC_ACT
(
BLK_TC_NOTIFY
)) == 0) {

498 i‡((
t
.
a˘i⁄
 & 0xffffË=
__BLK_TA_QUEUE
)

499 
	`dïth_öc
(&
t
, 
this_dïth
);

500 i‡(((
t
.
a˘i⁄
 & 0xffffË=
__BLK_TA_BACKMERGE
) ||

501 ((
t
.
a˘i⁄
 & 0xffffË=
__BLK_TA_FRONTMERGE
))

502 
	`dïth_dec
(&
t
, 
this_dïth
);

503 i‡((
t
.
a˘i⁄
 & 0xffffË=
__BLK_TA_COMPLETE
)

504 
	`dïth_íd
(&
t
, 
this_dïth
, 
dïth
);

506 i‡(
	`t_is_wrôe
(&
t
Ë&& 
ªad_⁄ly
) {

507 
skù≥d_wrôes
++;

512 i‡(!
	`queue_åa˚
(
td
, &
t
, 
ios
, 
rw_bs
, &
ˇche
))

515 i‡(
td
->
o
.
ªad_iﬁog_chunked
) {

516 
td
->
io_log_cuºít
++;

517 
ôems_to_„tch
--;

518 i‡(
ôems_to_„tch
 == 0)

523 i‡(
td
->
o
.
ªad_iﬁog_chunked
) {

524 
td
->
io_log_highm¨k
 =Åd->
io_log_cuºít
;

525 
td
->
io_log_checkm¨k
 = (td->
io_log_highm¨k
 + 1) / 2;

526 
	`fio_gëtime
(&
td
->
io_log_highm¨k_time
, 
NULL
);

529 i‡(
skù≥d_wrôes
)

530 
	`log_îr
("fio: %s skipsÑeplay of %lu writes dueÅoÑead-only\n",

531 
td
->
o
.
«me
, 
skù≥d_wrôes
);

533 i‡(
td
->
o
.
ªad_iﬁog_chunked
) {

534 i‡(
td
->
io_log_cuºít
 == 0) {

535  
Ál£
;

537 
td
->
o
.
td_ddú
 = 
TD_DDIR_RW
;

538 i‡((
rw_bs
[
DDIR_READ
] > 
td
->
o
.
max_bs
[DDIR_READ] ||

539 
rw_bs
[
DDIR_WRITE
] > 
td
->
o
.
max_bs
[DDIR_WRITE] ||

540 
rw_bs
[
DDIR_TRIM
] > 
td
->
o
.
max_bs
[DDIR_TRIM]) &&

541 
td
->
‹ig_buf„r
)

543 
td
->
o
.
max_bs
[
DDIR_READ
] = 
	`max
—d->o.max_bs[DDIR_READ], 
rw_bs
[DDIR_READ]);

544 
td
->
o
.
max_bs
[
DDIR_WRITE
] = 
	`max
—d->o.max_bs[DDIR_WRITE], 
rw_bs
[DDIR_WRITE]);

545 
td
->
o
.
max_bs
[
DDIR_TRIM
] = 
	`max
—d->o.max_bs[DDIR_TRIM], 
rw_bs
[DDIR_TRIM]);

546 
	`io_u_quõs˚
(
td
);

547 
	`‰ì_io_mem
(
td
);

548 
	`öô_io_u_buf„rs
(
td
);

550  
åue
;

553 
	`f‹_óch_fûe
(
td
, 
fiof
, 
i
)

554 
	`åa˚_add_›í_˛o£_evít
(
td
, 
fiof
->
fûío
, 
FIO_LOG_CLOSE_FILE
);

556 
	`f˛o£
(
td
->
io_log_rfûe
);

557 
td
->
io_log_rfûe
 = 
NULL
;

563 
max_dïth
 = 0;

564 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

565 i‡(
dïth
[
i
] > 1024)

566 
dïth
[
i
] = 1024;

567 i‡(!
dïth
[
i
] && 
ios
[i])

568 
dïth
[
i
] = 1;

569 
max_dïth
 = 
	`max
(
dïth
[
i
], max_depth);

572 i‡(!
ios
[
DDIR_READ
] && !ios[
DDIR_WRITE
] && !ios[
DDIR_TRIM
] &&

573 !
ios
[
DDIR_SYNC
]) {

574 
	`log_îr
("fio: foundÇo ios in blktrace data\n");

575  
Ál£
;

578 
td
->
o
.
td_ddú
 = 0;

579 i‡(
ios
[
DDIR_READ
]) {

580 
td
->
o
.
td_ddú
 |
TD_DDIR_READ
;

581 
td
->
o
.
max_bs
[
DDIR_READ
] = 
rw_bs
[DDIR_READ];

583 i‡(
ios
[
DDIR_WRITE
]) {

584 
td
->
o
.
td_ddú
 |
TD_DDIR_WRITE
;

585 
td
->
o
.
max_bs
[
DDIR_WRITE
] = 
rw_bs
[DDIR_WRITE];

587 i‡(
ios
[
DDIR_TRIM
]) {

588 
td
->
o
.
td_ddú
 |
TD_DDIR_TRIM
;

589 
td
->
o
.
max_bs
[
DDIR_TRIM
] = 
rw_bs
[DDIR_TRIM];

595 i‡(!
	`fio_›ti⁄_is_£t
(&
td
->
o
, 
iodïth
))

596 
td
->
o
.
iodïth
 =Åd->o.
iodïth_low
 = 
max_dïth
;

598  
åue
;

599 
îr
:

600 
	`f˛o£
(
f
);

601  
Ál£
;

602 
	}
}

604 
	$öô_mîge_∑øm_li°
(
fio_Â64_t
 *
vÆs
, 
blkåa˚_curs‹
 *
bcs
,

605 
ƒ_logs
, 
def
, 
size_t
 
off
)

607 
i
 = 0, 
Àn
 = 0;

609 
Àn
 < 
FIO_IO_U_LIST_MAX_LEN
 && 
vÆs
[Àn].
u
.
f
 != 0.0)

610 
Àn
++;

612 i‡(
Àn
 &&Üí !
ƒ_logs
)

613  
Àn
;

615 
i
 = 0; i < 
ƒ_logs
; i++) {

616 *
vÆ
 = (*)((*)&
bcs
[
i
] + 
off
);

617 *
vÆ
 = 
def
;

618 i‡(
Àn
)

619 *
vÆ
 = ()
vÆs
[
i
].
u
.
f
;

624 
	}
}

626 
	$föd_óæõ°_io
(
blkåa˚_curs‹
 *
bcs
, 
ƒ_logs
)

628 
__u64
 
time
 = ~(__u64)0;

629 
idx
 = 0, 
i
;

631 
i
 = 0; i < 
ƒ_logs
; i++) {

632 i‡(
bcs
[
i
].
t
.
time
 <Åime) {

633 
time
 = 
bcs
[
i
].
t
.time;

634 
idx
 = 
i
;

638  
idx
;

639 
	}
}

641 
	$mîge_föish_fûe
(
blkåa˚_curs‹
 *
bcs
, 
i
, *
ƒ_logs
)

643 
bcs
[
i
].
ôî
++;

644 i‡(
bcs
[
i
].
ôî
 < bcs[i].
ƒ_ôî
) {

645 
	`f£ek
(
bcs
[
i
].
f
, 0, 
SEEK_SET
);

649 *
ƒ_logs
 -= 1;

652 
	`f˛o£
(
bcs
[
i
].
f
);

655 
	`memmove
(&
bcs
[
i
], &bcs[*
ƒ_logs
], (bcs[i]));

656 
	}
}

658 
	$ªad_åa˚
(
thªad_d©a
 *
td
, 
blkåa˚_curs‹
 *
bc
)

660 
ªt
 = 0;

661 
blk_io_åa˚
 *
t
 = &
bc
->t;

663 
ªad_skù
:

665 
ªt
 = 
	`‰ód
(&
t
, 1, —), 
bc
->
f
);

666 i‡(
	`„º‹
(
bc
->
f
)) {

667 
	`td_vîr‹
(
td
, 
î∫o
, "read blktrace file");

668  
ªt
;

669 } i‡(
	`„of
(
bc
->
f
)) {

670 i‡(!
bc
->
Àngth
)

671 
bc
->
Àngth
 = bc->
t
.
time
;

672  
ªt
;

673 } i‡(
ªt
 < (Ë(*
t
)) {

674 
	`log_îr
("fio: iolog shortÑead\n");

678 i‡(
bc
->
sw≠
)

679 
	`byãsw≠_åa˚
(
t
);

682 i‡((
t
->
a˘i⁄
 & 0xffffË!
__BLK_TA_QUEUE
 ||

683 
	`t_gë_ddú
(
t
Ë=
DDIR_INVAL
) {

684 
ªt
 = 
	`disˇrd_pdu
(
bc
->
f
, 
t
);

685 i‡(
ªt
 < 0) {

686 
	`td_vîr‹
(
td
, -
ªt
, "blktraceÜseek");

687  
ªt
;

689 
ªad_skù
;

692 
t
->
time
 = (t->timê+ 
bc
->
ôî
 * bc->
Àngth
Ë* bc->
sˇœr
 / 100;

694  
ªt
;

695 
	}
}

697 
	$wrôe_åa˚
(
FILE
 *
Â
, 
blk_io_åa˚
 *
t
)

700 
t
->
pdu_Àn
 = 0;

701  
	`fwrôe
((*)
t
, (*t), 1, 
Â
);

702 
	}
}

704 
	$mîge_blkåa˚_iﬁogs
(
thªad_d©a
 *
td
)

706 
ƒ_logs
 = 
	`gë_max_°r_idx
(
td
->
o
.
ªad_iﬁog_fûe
);

707 
blkåa˚_curs‹
 *
bcs
 = 
	`mÆloc
((blktrace_cursor) *

708 
ƒ_logs
);

709 
blkåa˚_curs‹
 *
bc
;

710 
FILE
 *
mîge_Â
;

711 *
°r
, *
±r
, *
«me
, *
mîge_buf
;

712 
i
, 
ªt
;

714 
ªt
 = 
	`öô_mîge_∑øm_li°
(
td
->
o
.
mîge_blkåa˚_sˇœrs
, 
bcs
, 
ƒ_logs
,

715 100, 
	`off£tof
(
blkåa˚_curs‹
,

716 
sˇœr
));

717 i‡(
ªt
) {

718 
	`log_îr
("fio: merge_blktrace_scalars(%d) !=Çr_logs(%d)\n",

719 
ªt
, 
ƒ_logs
);

720 
îr_∑øm
;

723 
ªt
 = 
	`öô_mîge_∑øm_li°
(
td
->
o
.
mîge_blkåa˚_ôîs
, 
bcs
, 
ƒ_logs
,

724 1, 
	`off£tof
(
blkåa˚_curs‹
,

725 
ƒ_ôî
));

726 i‡(
ªt
) {

727 
	`log_îr
("fio: merge_blktrace_iters(%d) !=Çr_logs(%d)\n",

728 
ªt
, 
ƒ_logs
);

729 
îr_∑øm
;

733 
mîge_Â
 = 
	`f›í
(
td
->
o
.
mîge_blkåa˚_fûe
, "w");

734 
mîge_buf
 = 
	`mÆloc
(128 * 1024);

735 i‡(!
mîge_buf
)

736 
îr_out_fûe
;

737 
ªt
 = 
	`£tvbuf
(
mîge_Â
, 
mîge_buf
, 
_IOFBF
, 128 * 1024);

738 i‡(
ªt
)

739 
îr_mîge_buf
;

742 
°r
 = 
±r
 = 
	`°rdup
(
td
->
o
.
ªad_iﬁog_fûe
);

743 
ƒ_logs
 = 0;

744 
i
 = 0; (
«me
 = 
	`gë_√xt_°r
(&
±r
)Ë!
NULL
; i++) {

745 
bcs
[
i
].
f
 = 
	`f›í
(
«me
, "rb");

746 i‡(!
bcs
[
i
].
f
) {

747 
	`log_îr
("fio: couldÇŸ o≥¿fûe: %s\n", 
«me
);

748 
ªt
 = -
î∫o
;

749 
	`‰ì
(
°r
);

750 
îr_fûe
;

752 
ƒ_logs
++;

754 i‡(!
	`is_blkåa˚
(
«me
, &
bcs
[
i
].
sw≠
)) {

755 
	`log_îr
("fio: fûêi†nŸá blkåa˚: %s\n", 
«me
);

756 
	`‰ì
(
°r
);

757 
îr_fûe
;

760 
ªt
 = 
	`ªad_åa˚
(
td
, &
bcs
[
i
]);

761 i‡(
ªt
 < 0) {

762 
	`‰ì
(
°r
);

763 
îr_fûe
;

764 } i‡(!
ªt
) {

765 
	`mîge_föish_fûe
(
bcs
, 
i
, &
ƒ_logs
);

766 
i
--;

769 
	`‰ì
(
°r
);

772 
ƒ_logs
) {

773 
i
 = 
	`föd_óæõ°_io
(
bcs
, 
ƒ_logs
);

774 
bc
 = &
bcs
[
i
];

776 
ªt
 = 
	`disˇrd_pdu
(
bc
->
f
, &bc->
t
);

777 i‡(
ªt
 < 0) {

778 
	`td_vîr‹
(
td
, -
ªt
, "blktraceÜseek");

779 
îr_fûe
;

782 
ªt
 = 
	`wrôe_åa˚
(
mîge_Â
, &
bc
->
t
);

783 
ªt
 = 
	`ªad_åa˚
(
td
, 
bc
);

784 i‡(
ªt
 < 0)

785 
îr_fûe
;

786 i‡(!
ªt
)

787 
	`mîge_föish_fûe
(
bcs
, 
i
, &
ƒ_logs
);

791 
td
->
o
.
ªad_iﬁog_fûe
 =Åd->o.
mîge_blkåa˚_fûe
;

792 
ªt
 = 0;

794 
îr_fûe
:

796 
i
 = 0; i < 
ƒ_logs
; i++) {

797 
	`f˛o£
(
bcs
[
i
].
f
);

799 
îr_mîge_buf
:

800 
	`‰ì
(
mîge_buf
);

801 
îr_out_fûe
:

802 
	`fÊush
(
mîge_Â
);

803 
	`f˛o£
(
mîge_Â
);

804 
îr_∑øm
:

805 
	`‰ì
(
bcs
);

807  
ªt
;

808 
	}
}

	@blktrace.h

1 #i‚de‡
FIO_BLKTRACE_H


2 
	#FIO_BLKTRACE_H


	)

5 #ifde‡
FIO_HAVE_BLKTRACE


7 
	~<asm/ty≥s.h
>

9 
	~"blkåa˚_≠i.h
"

11 
	sblkåa˚_curs‹
 {

12 
fifo
 *
	mfifo
;

13 
FILE
 *
	mf
;

14 
__u64
 
	mÀngth
;

15 
blk_io_åa˚
 
	mt
;

16 
	msw≠
;

17 
	msˇœr
;

18 
	môî
;

19 
	mƒ_ôî
;

22 
boﬁ
 
is_blkåa˚
(const *, *);

23 
boﬁ
 
öô_blkåa˚_ªad
(
thªad_d©a
 *, const *, );

24 
boﬁ
 
ªad_blkåa˚
(
thªad_d©a
* 
td
);

26 
mîge_blkåa˚_iﬁogs
(
thªad_d©a
 *
td
);

30 
ölöe
 
boﬁ
 
	$is_blkåa˚
(c⁄° *
‚ame
, *
√ed_sw≠
)

32  
Ál£
;

33 
	}
}

35 
ölöe
 
boﬁ
 
	$öô_blkåa˚_ªad
(
thªad_d©a
 *
td
, c⁄° *
‚ame
,

36 
√ed_sw≠
)

38  
Ál£
;

39 
	}
}

41 
ölöe
 
boﬁ
 
	$ªad_blkåa˚
(
thªad_d©a
* 
td
)

43  
Ál£
;

44 
	}
}

47 
ölöe
 
	$mîge_blkåa˚_iﬁogs
(
thªad_d©a
 *
td
)

49  
Ál£
;

50 
	}
}

	@blktrace_api.h

1 #i‚de‡
BLKTRACEAPI_H


2 
	#BLKTRACEAPI_H


	)

4 
	~<asm/ty≥s.h
>

10 
	mBLK_TC_READ
 = 1 << 0,

11 
	mBLK_TC_WRITE
 = 1 << 1,

12 
	mBLK_TC_FLUSH
 = 1 << 2,

13 
	mBLK_TC_SYNC
 = 1 << 3,

14 
	mBLK_TC_QUEUE
 = 1 << 4,

15 
	mBLK_TC_REQUEUE
 = 1 << 5,

16 
	mBLK_TC_ISSUE
 = 1 << 6,

17 
	mBLK_TC_COMPLETE
 = 1 << 7,

18 
	mBLK_TC_FS
 = 1 << 8,

19 
	mBLK_TC_PC
 = 1 << 9,

20 
	mBLK_TC_NOTIFY
 = 1 << 10,

21 
	mBLK_TC_AHEAD
 = 1 << 11,

22 
	mBLK_TC_META
 = 1 << 12,

23 
	mBLK_TC_DISCARD
 = 1 << 13,

24 
	mBLK_TC_DRV_DATA
 = 1 << 14,

26 
	mBLK_TC_END
 = 1 << 15,

29 
	#BLK_TC_SHIFT
 (16)

	)

30 
	#BLK_TC_ACT
(
a˘
Ë(◊˘Ë<< 
BLK_TC_SHIFT
)

	)

36 
	m__BLK_TA_QUEUE
 = 1,

37 
	m__BLK_TA_BACKMERGE
,

38 
	m__BLK_TA_FRONTMERGE
,

39 
	m__BLK_TA_GETRQ
,

40 
	m__BLK_TA_SLEEPRQ
,

41 
	m__BLK_TA_REQUEUE
,

42 
	m__BLK_TA_ISSUE
,

43 
	m__BLK_TA_COMPLETE
,

44 
	m__BLK_TA_PLUG
,

45 
	m__BLK_TA_UNPLUG_IO
,

46 
	m__BLK_TA_UNPLUG_TIMER
,

47 
	m__BLK_TA_INSERT
,

48 
	m__BLK_TA_SPLIT
,

49 
	m__BLK_TA_BOUNCE
,

50 
	m__BLK_TA_REMAP
,

51 
	m__BLK_TA_ABORT
,

52 
	m__BLK_TA_DRV_DATA
,

58 
	eblkåa˚_nŸify
 {

59 
	m__BLK_TN_PROCESS
 = 0,

60 
	m__BLK_TN_TIMESTAMP
,

61 
	m__BLK_TN_MESSAGE
,

67 
	#BLK_TA_QUEUE
 (
__BLK_TA_QUEUE
 | 
	`BLK_TC_ACT
(
BLK_TC_QUEUE
))

	)

68 
	#BLK_TA_BACKMERGE
 (
__BLK_TA_BACKMERGE
 | 
	`BLK_TC_ACT
(
BLK_TC_QUEUE
))

	)

69 
	#BLK_TA_FRONTMERGE
 (
__BLK_TA_FRONTMERGE
 | 
	`BLK_TC_ACT
(
BLK_TC_QUEUE
))

	)

70 
	#BLK_TA_GETRQ
 (
__BLK_TA_GETRQ
 | 
	`BLK_TC_ACT
(
BLK_TC_QUEUE
))

	)

71 
	#BLK_TA_SLEEPRQ
 (
__BLK_TA_SLEEPRQ
 | 
	`BLK_TC_ACT
(
BLK_TC_QUEUE
))

	)

72 
	#BLK_TA_REQUEUE
 (
__BLK_TA_REQUEUE
 | 
	`BLK_TC_ACT
(
BLK_TC_REQUEUE
))

	)

73 
	#BLK_TA_ISSUE
 (
__BLK_TA_ISSUE
 | 
	`BLK_TC_ACT
(
BLK_TC_ISSUE
))

	)

74 
	#BLK_TA_COMPLETE
 (
__BLK_TA_COMPLETE
| 
	`BLK_TC_ACT
(
BLK_TC_COMPLETE
))

	)

75 
	#BLK_TA_PLUG
 (
__BLK_TA_PLUG
 | 
	`BLK_TC_ACT
(
BLK_TC_QUEUE
))

	)

76 
	#BLK_TA_UNPLUG_IO
 (
__BLK_TA_UNPLUG_IO
 | 
	`BLK_TC_ACT
(
BLK_TC_QUEUE
))

	)

77 
	#BLK_TA_UNPLUG_TIMER
 (
__BLK_TA_UNPLUG_TIMER
 | 
	`BLK_TC_ACT
(
BLK_TC_QUEUE
))

	)

78 
	#BLK_TA_INSERT
 (
__BLK_TA_INSERT
 | 
	`BLK_TC_ACT
(
BLK_TC_QUEUE
))

	)

79 
	#BLK_TA_SPLIT
 (
__BLK_TA_SPLIT
)

	)

80 
	#BLK_TA_BOUNCE
 (
__BLK_TA_BOUNCE
)

	)

81 
	#BLK_TA_REMAP
 (
__BLK_TA_REMAP
 | 
	`BLK_TC_ACT
(
BLK_TC_QUEUE
))

	)

82 
	#BLK_TA_DRV_DATA
 (
__BLK_TA_DRV_DATA
 | 
	`BLK_TC_ACT
(
BLK_TC_DRV_DATA
))

	)

84 
	#BLK_TN_PROCESS
 (
__BLK_TN_PROCESS
 | 
	`BLK_TC_ACT
(
BLK_TC_NOTIFY
))

	)

85 
	#BLK_TN_TIMESTAMP
 (
__BLK_TN_TIMESTAMP
 | 
	`BLK_TC_ACT
(
BLK_TC_NOTIFY
))

	)

86 
	#BLK_TN_MESSAGE
 (
__BLK_TN_MESSAGE
 | 
	`BLK_TC_ACT
(
BLK_TC_NOTIFY
))

	)

88 
	#BLK_IO_TRACE_MAGIC
 0x65617400

	)

89 
	#BLK_IO_TRACE_VERSION
 0x07

	)

94 
	sblk_io_åa˚
 {

95 
__u32
 
	mmagic
;

96 
__u32
 
	m£quí˚
;

97 
__u64
 
	mtime
;

98 
__u64
 
	m£˘‹
;

99 
__u32
 
	mbyãs
;

100 
__u32
 
	ma˘i⁄
;

101 
__u32
 
	mpid
;

102 
__u32
 
	mdevi˚
;

103 
__u32
 
	m˝u
;

104 
__u16
 
	mîr‹
;

105 
__u16
 
	mpdu_Àn
;

111 
	sblk_io_åa˚_ªm≠
 {

112 
__u32
 
	mdevi˚
;

113 
__u32
 
	mdevi˚_‰om
;

114 
__u64
 
	m£˘‹
;

120 
	sblk_u£r_åa˚_£tup
 {

121 
	m«me
[32];

122 
__u16
 
	ma˘_mask
;

123 
__u32
 
	mbuf_size
;

124 
__u32
 
	mbuf_ƒ
;

125 
__u64
 
	m°¨t_lba
;

126 
__u64
 
	míd_lba
;

127 
__u32
 
	mpid
;

	@cairo_text_helpers.c

1 
	~<ˇúo.h
>

2 
	~<gtk/gtk.h
>

3 
	~<m©h.h
>

5 
	$døw_Æig√d_ãxt
(
ˇúo_t
 *
¸
, c⁄° *
f⁄t
, 
x
, 
y
,

6 
f⁄tsize
, c⁄° *
ãxt
, 
Æignmít
)

8 
	#CENTERED
 0

	)

9 
	#LEFT_JUSTIFIED
 1

	)

10 
	#RIGHT_JUSTIFIED
 2

	)

12 
Á˘‹
, 
dúe˘i⁄
;

13 
ˇúo_ãxt_exã¡s_t
 
exã¡s
;

15 
Æignmít
) {

16 
CENTERED
:

17 
dúe˘i⁄
 = -1.0;

18 
Á˘‹
 = 0.5;

20 
RIGHT_JUSTIFIED
:

21 
dúe˘i⁄
 = -1.0;

22 
Á˘‹
 = 1.0;

24 
LEFT_JUSTIFIED
:

26 
dúe˘i⁄
 = 1.0;

27 
Á˘‹
 = 0.0;

30 
	`ˇúo_£À˘_f⁄t_Á˚
(
¸
, 
f⁄t
, 
CAIRO_FONT_SLANT_NORMAL
, 
CAIRO_FONT_WEIGHT_NORMAL
);

32 
	`ˇúo_£t_f⁄t_size
(
¸
, 
f⁄tsize
);

33 
	`ˇúo_ãxt_exã¡s
(
¸
, 
ãxt
, &
exã¡s
);

34 
x
 = x + 
dúe˘i⁄
 * (
Á˘‹
 * 
exã¡s
.
width
 +Éxã¡s.
x_bórög
);

35 
y
 = y - (
exã¡s
.
height
 / 2 +Éxã¡s.
y_bórög
);

37 
	`ˇúo_move_to
(
¸
, 
x
, 
y
);

38 
	`ˇúo_show_ãxt
(
¸
, 
ãxt
);

39 
	}
}

41 
	$døw_˚¡îed_ãxt
(
ˇúo_t
 *
¸
, c⁄° *
f⁄t
, 
x
, 
y
,

42 
f⁄tsize
, c⁄° *
ãxt
)

44 
	`døw_Æig√d_ãxt
(
¸
, 
f⁄t
, 
x
, 
y
, 
f⁄tsize
, 
ãxt
, 
CENTERED
);

45 
	}
}

47 
	$døw_right_ju°ifõd_ãxt
(
ˇúo_t
 *
¸
, c⁄° *
f⁄t
,

48 
x
, 
y
,

49 
f⁄tsize
, c⁄° *
ãxt
)

51 
	`døw_Æig√d_ãxt
(
¸
, 
f⁄t
, 
x
, 
y
, 
f⁄tsize
, 
ãxt
, 
RIGHT_JUSTIFIED
);

52 
	}
}

54 
	$døw_À·_ju°ifõd_ãxt
(
ˇúo_t
 *
¸
, c⁄° *
f⁄t
,

55 
x
, 
y
,

56 
f⁄tsize
, c⁄° *
ãxt
)

58 
	`døw_Æig√d_ãxt
(
¸
, 
f⁄t
, 
x
, 
y
, 
f⁄tsize
, 
ãxt
, 
LEFT_JUSTIFIED
);

59 
	}
}

61 
	$døw_vîtiˇl_˚¡îed_ãxt
(
ˇúo_t
 *
¸
, c⁄° *
f⁄t
, 
x
,

62 
y
, 
f⁄tsize
,

63 c⁄° *
ãxt
)

65 
sx
, 
sy
;

66 
ˇúo_ãxt_exã¡s_t
 
exã¡s
;

68 
	`ˇúo_£À˘_f⁄t_Á˚
(
¸
, 
f⁄t
, 
CAIRO_FONT_SLANT_NORMAL
, 
CAIRO_FONT_WEIGHT_NORMAL
);

70 
	`ˇúo_£t_f⁄t_size
(
¸
, 
f⁄tsize
);

71 
	`ˇúo_ãxt_exã¡s
(
¸
, 
ãxt
, &
exã¡s
);

72 
sx
 = 
x
;

73 
sy
 = 
y
;

74 
y
 = y + (
exã¡s
.
width
 / 2.0 +Éxã¡s.
x_bórög
);

75 
x
 = x - (
exã¡s
.
height
 / 2.0 +Éxã¡s.
y_bórög
);

77 
	`ˇúo_move_to
(
¸
, 
x
, 
y
);

78 
	`ˇúo_ßve
(
¸
);

79 
	`ˇúo_å™¶©e
(
¸
, -
sx
, -
sy
);

80 
	`ˇúo_rŸ©e
(
¸
, -90.0 * 
M_PI
 / 180.0);

81 
	`ˇúo_å™¶©e
(
¸
, 
sx
, 
sy
);

82 
	`ˇúo_show_ãxt
(
¸
, 
ãxt
);

83 
	`ˇúo_ª°‹e
(
¸
);

84 
	}
}

	@cairo_text_helpers.h

1 #i‚de‡
CAIRO_TEXT_HELPERS_H


2 
	#CAIRO_TEXT_HELPERS_H


	)

4 
døw_˚¡îed_ãxt
(
ˇúo_t
 *
¸
, c⁄° *
f⁄t
, 
x
, 
y
,

5 
f⁄tsize
, c⁄° *
ãxt
);

7 
døw_right_ju°ifõd_ãxt
(
ˇúo_t
 *
¸
, c⁄° *
f⁄t
,

8 
x
, 
y
,

9 
f⁄tsize
, c⁄° *
ãxt
);

11 
døw_À·_ju°ifõd_ãxt
(
ˇúo_t
 *
¸
, c⁄° *
f⁄t
,

12 
x
, 
y
,

13 
f⁄tsize
, c⁄° *
ãxt
);

15 
døw_vîtiˇl_˚¡îed_ãxt
(
ˇúo_t
 *
¸
, c⁄° *
f⁄t
, 
x
,

16 
y
, 
f⁄tsize
,

17 c⁄° *
ãxt
);

	@cconv.c

1 
	~<°rög.h
>

3 
	~"log.h
"

4 
	~"thªad_›ti⁄s.h
"

6 
	$°rög_to_˝u
(**
d°
, c⁄° 
uöt8_t
 *
§c
)

8 c⁄° *
__§c
 = (c⁄° *Ë
§c
;

10 i‡(
	`°æí
(
__§c
))

11 *
d°
 = 
	`°rdup
(
__§c
);

12 
	}
}

14 
	$__°rög_to_√t
(
uöt8_t
 *
d°
, c⁄° *
§c
, 
size_t
 
d°_size
)

16 i‡(
§c
)

17 
	`¢¥ötf
((*Ë
d°
, 
d°_size
, "%s", 
§c
);

19 
d°
[0] = '\0';

20 
	}
}

22 
	#°rög_to_√t
(
d°
, 
§c
Ë
	`__°rög_to_√t
((d°), (§c), (d°))

	)

24 
	$‰ì_thªad_›ti⁄s_to_˝u
(
thªad_›ti⁄s
 *
o
)

26 
i
;

28 
	`‰ì
(
o
->
des¸ùti⁄
);

29 
	`‰ì
(
o
->
«me
);

30 
	`‰ì
(
o
->
waô_f‹
);

31 
	`‰ì
(
o
->
dúe˘‹y
);

32 
	`‰ì
(
o
->
fûíame
);

33 
	`‰ì
(
o
->
fûíame_f‹m©
);

34 
	`‰ì
(
o
->
›ídú
);

35 
	`‰ì
(
o
->
i€ngöe
);

36 
	`‰ì
(
o
->
mm≠fûe
);

37 
	`‰ì
(
o
->
ªad_iﬁog_fûe
);

38 
	`‰ì
(
o
->
wrôe_iﬁog_fûe
);

39 
	`‰ì
(
o
->
mîge_blkåa˚_fûe
);

40 
	`‰ì
(
o
->
bw_log_fûe
);

41 
	`‰ì
(
o
->
œt_log_fûe
);

42 
	`‰ì
(
o
->
i›s_log_fûe
);

43 
	`‰ì
(
o
->
hi°_log_fûe
);

44 
	`‰ì
(
o
->
ª∂ay_ªdúe˘
);

45 
	`‰ì
(
o
->
exec_¥îun
);

46 
	`‰ì
(
o
->
exec_po°run
);

47 
	`‰ì
(
o
->
ioscheduÀr
);

48 
	`‰ì
(
o
->
¥ofûe
);

49 
	`‰ì
(
o
->
cgroup
);

51 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

52 
	`‰ì
(
o
->
bs•lô
[
i
]);

53 
	`‰ì
(
o
->
z⁄e_•lô
[
i
]);

55 
	}
}

57 
	$c⁄vît_thªad_›ti⁄s_to_˝u
(
thªad_›ti⁄s
 *
o
,

58 
thªad_›ti⁄s_∑ck
 *
t›
)

60 
i
, 
j
;

62 
i
 = 0; i < 
NR_OPTS_SZ
; i++)

63 
o
->
£t_›ti⁄s
[
i
] = 
	`À64_to_˝u
(
t›
->set_options[i]);

65 
	`°rög_to_˝u
(&
o
->
des¸ùti⁄
, 
t›
->description);

66 
	`°rög_to_˝u
(&
o
->
«me
, 
t›
->name);

67 
	`°rög_to_˝u
(&
o
->
waô_f‹
, 
t›
->wait_for);

68 
	`°rög_to_˝u
(&
o
->
dúe˘‹y
, 
t›
->directory);

69 
	`°rög_to_˝u
(&
o
->
fûíame
, 
t›
->filename);

70 
	`°rög_to_˝u
(&
o
->
fûíame_f‹m©
, 
t›
->filename_format);

71 
	`°rög_to_˝u
(&
o
->
›ídú
, 
t›
->opendir);

72 
	`°rög_to_˝u
(&
o
->
i€ngöe
, 
t›
->ioengine);

73 
	`°rög_to_˝u
(&
o
->
mm≠fûe
, 
t›
->mmapfile);

74 
	`°rög_to_˝u
(&
o
->
ªad_iﬁog_fûe
, 
t›
->read_iolog_file);

75 
	`°rög_to_˝u
(&
o
->
wrôe_iﬁog_fûe
, 
t›
->write_iolog_file);

76 
	`°rög_to_˝u
(&
o
->
mîge_blkåa˚_fûe
, 
t›
->merge_blktrace_file);

77 
	`°rög_to_˝u
(&
o
->
bw_log_fûe
, 
t›
->bw_log_file);

78 
	`°rög_to_˝u
(&
o
->
œt_log_fûe
, 
t›
->lat_log_file);

79 
	`°rög_to_˝u
(&
o
->
i›s_log_fûe
, 
t›
->iops_log_file);

80 
	`°rög_to_˝u
(&
o
->
hi°_log_fûe
, 
t›
->hist_log_file);

81 
	`°rög_to_˝u
(&
o
->
ª∂ay_ªdúe˘
, 
t›
->replay_redirect);

82 
	`°rög_to_˝u
(&
o
->
exec_¥îun
, 
t›
->exec_prerun);

83 
	`°rög_to_˝u
(&
o
->
exec_po°run
, 
t›
->exec_postrun);

84 
	`°rög_to_˝u
(&
o
->
ioscheduÀr
, 
t›
->ioscheduler);

85 
	`°rög_to_˝u
(&
o
->
¥ofûe
, 
t›
->profile);

86 
	`°rög_to_˝u
(&
o
->
cgroup
, 
t›
->cgroup);

88 
o
->
Ælow_¸óã
 = 
	`À32_to_˝u
(
t›
->allow_create);

89 
o
->
Ælow_mou¡ed_wrôe
 = 
	`À32_to_˝u
(
t›
->allow_mounted_write);

90 
o
->
td_ddú
 = 
	`À32_to_˝u
(
t›
->td_ddir);

91 
o
->
rw_£q
 = 
	`À32_to_˝u
(
t›
->rw_seq);

92 
o
->
kb_ba£
 = 
	`À32_to_˝u
(
t›
->kb_base);

93 
o
->
unô_ba£
 = 
	`À32_to_˝u
(
t›
->unit_base);

94 
o
->
ddú_£q_ƒ
 = 
	`À32_to_˝u
(
t›
->ddir_seq_nr);

95 
o
->
ddú_£q_add
 = 
	`À64_to_˝u
(
t›
->ddir_seq_add);

96 
o
->
iodïth
 = 
	`À32_to_˝u
(
t›
->iodepth);

97 
o
->
iodïth_low
 = 
	`À32_to_˝u
(
t›
->iodepth_low);

98 
o
->
iodïth_b©ch
 = 
	`À32_to_˝u
(
t›
->iodepth_batch);

99 
o
->
iodïth_b©ch_com∂ëe_mö
 = 
	`À32_to_˝u
(
t›
->iodepth_batch_complete_min);

100 
o
->
iodïth_b©ch_com∂ëe_max
 = 
	`À32_to_˝u
(
t›
->iodepth_batch_complete_max);

101 
o
->
£rülize_ovîœp
 = 
	`À32_to_˝u
(
t›
->serialize_overlap);

102 
o
->
size
 = 
	`À64_to_˝u
(
t›
->size);

103 
o
->
io_size
 = 
	`À64_to_˝u
(
t›
->io_size);

104 
o
->
size_≥r˚¡
 = 
	`À32_to_˝u
(
t›
->size_percent);

105 
o
->
io_size_≥r˚¡
 = 
	`À32_to_˝u
(
t›
->io_size_percent);

106 
o
->
fûl_devi˚
 = 
	`À32_to_˝u
(
t›
->fill_device);

107 
o
->
fûe_≠≥nd
 = 
	`À32_to_˝u
(
t›
->file_append);

108 
o
->
fûe_size_low
 = 
	`À64_to_˝u
(
t›
->file_size_low);

109 
o
->
fûe_size_high
 = 
	`À64_to_˝u
(
t›
->file_size_high);

110 
o
->
°¨t_off£t
 = 
	`À64_to_˝u
(
t›
->start_offset);

111 
o
->
°¨t_off£t_Æign
 = 
	`À64_to_˝u
(
t›
->start_offset_align);

112 
o
->
°¨t_off£t_≥r˚¡
 = 
	`À32_to_˝u
(
t›
->start_offset_percent);

114 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

115 
o
->
bs
[
i
] = 
	`À64_to_˝u
(
t›
->bs[i]);

116 
o
->
ba
[
i
] = 
	`À64_to_˝u
(
t›
->ba[i]);

117 
o
->
mö_bs
[
i
] = 
	`À64_to_˝u
(
t›
->min_bs[i]);

118 
o
->
max_bs
[
i
] = 
	`À64_to_˝u
(
t›
->max_bs[i]);

119 
o
->
bs•lô_ƒ
[
i
] = 
	`À32_to_˝u
(
t›
->bssplit_nr[i]);

121 i‡(
o
->
bs•lô_ƒ
[
i
]) {

122 
o
->
bs•lô
[
i
] = 
	`mÆloc
(o->
bs•lô_ƒ
[i] * (bssplit));

123 
j
 = 0; j < 
o
->
bs•lô_ƒ
[
i
]; j++) {

124 
o
->
bs•lô
[
i
][
j
].
bs
 = 
	`À64_to_˝u
(
t›
->bssplit[i][j].bs);

125 
o
->
bs•lô
[
i
][
j
].
≥rc
 = 
	`À32_to_˝u
(
t›
->bssplit[i][j].perc);

129 
o
->
z⁄e_•lô_ƒ
[
i
] = 
	`À32_to_˝u
(
t›
->zone_split_nr[i]);

131 i‡(
o
->
z⁄e_•lô_ƒ
[
i
]) {

132 
o
->
z⁄e_•lô
[
i
] = 
	`mÆloc
(o->
z⁄e_•lô_ƒ
[i] * (zone_split));

133 
j
 = 0; j < 
o
->
z⁄e_•lô_ƒ
[
i
]; j++) {

134 
o
->
z⁄e_•lô
[
i
][
j
].
ac˚ss_≥rc
 = 
t›
->zone_split[i][j].access_perc;

135 
o
->
z⁄e_•lô
[
i
][
j
].
size_≥rc
 = 
t›
->zone_split[i][j].size_perc;

139 
o
->
rwmix
[
i
] = 
	`À32_to_˝u
(
t›
->rwmix[i]);

140 
o
->
øã
[
i
] = 
	`À64_to_˝u
(
t›
->rate[i]);

141 
o
->
øãmö
[
i
] = 
	`À64_to_˝u
(
t›
->ratemin[i]);

142 
o
->
øã_i›s
[
i
] = 
	`À32_to_˝u
(
t›
->rate_iops[i]);

143 
o
->
øã_i›s_mö
[
i
] = 
	`À32_to_˝u
(
t›
->rate_iops_min[i]);

145 
o
->
≥rc_ønd
[
i
] = 
	`À32_to_˝u
(
t›
->perc_rand[i]);

147 
o
->
max_œãncy
[
i
] = 
	`À64_to_˝u
(
t›
->max_latency[i]);

150 
o
->
øãcy˛e
 = 
	`À32_to_˝u
(
t›
->ratecycle);

151 
o
->
io_submô_mode
 = 
	`À32_to_˝u
(
t›
->io_submit_mode);

152 
o
->
unique_fûíame
 = 
	`À32_to_˝u
(
t›
->unique_filename);

153 
o
->
ƒ_fûes
 = 
	`À32_to_˝u
(
t›
->nr_files);

154 
o
->
›í_fûes
 = 
	`À32_to_˝u
(
t›
->open_files);

155 
o
->
fûe_lock_mode
 = 
	`À32_to_˝u
(
t›
->file_lock_mode);

156 
o
->
odúe˘
 = 
	`À32_to_˝u
(
t›
->odirect);

157 
o
->
ﬂtomic
 = 
	`À32_to_˝u
(
t›
->oatomic);

158 
o
->
övÆid©e_ˇche
 = 
	`À32_to_˝u
(
t›
->invalidate_cache);

159 
o
->
¸óã_£rülize
 = 
	`À32_to_˝u
(
t›
->create_serialize);

160 
o
->
¸óã_fsync
 = 
	`À32_to_˝u
(
t›
->create_fsync);

161 
o
->
¸óã_⁄_›í
 = 
	`À32_to_˝u
(
t›
->create_on_open);

162 
o
->
¸óã_⁄ly
 = 
	`À32_to_˝u
(
t›
->create_only);

163 
o
->
íd_fsync
 = 
	`À32_to_˝u
(
t›
->end_fsync);

164 
o
->
¥e_ªad
 = 
	`À32_to_˝u
(
t›
->pre_read);

165 
o
->
sync_io
 = 
	`À32_to_˝u
(
t›
->sync_io);

166 
o
->
wrôe_höt
 = 
	`À32_to_˝u
(
t›
->write_hint);

167 
o
->
vîify
 = 
	`À32_to_˝u
(
t›
->verify);

168 
o
->
do_vîify
 = 
	`À32_to_˝u
(
t›
->do_verify);

169 
o
->
ex≥rimíèl_vîify
 = 
	`À32_to_˝u
(
t›
->experimental_verify);

170 
o
->
vîify_°©e
 = 
	`À32_to_˝u
(
t›
->verify_state);

171 
o
->
vîify_öãrvÆ
 = 
	`À32_to_˝u
(
t›
->verify_interval);

172 
o
->
vîify_off£t
 = 
	`À32_to_˝u
(
t›
->verify_offset);

174 
	`mem˝y
(
o
->
vîify_∑âîn
, 
t›
->vîify_∑âîn, 
MAX_PATTERN_SIZE
);

175 
	`mem˝y
(
o
->
buf„r_∑âîn
, 
t›
->buf„r_∑âîn, 
MAX_PATTERN_SIZE
);

177 
o
->
vîify_∑âîn_byãs
 = 
	`À32_to_˝u
(
t›
->verify_pattern_bytes);

178 
o
->
vîify_Áèl
 = 
	`À32_to_˝u
(
t›
->verify_fatal);

179 
o
->
vîify_dump
 = 
	`À32_to_˝u
(
t›
->verify_dump);

180 
o
->
vîify_async
 = 
	`À32_to_˝u
(
t›
->verify_async);

181 
o
->
vîify_b©ch
 = 
	`À32_to_˝u
(
t›
->verify_batch);

182 
o
->
u£_thªad
 = 
	`À32_to_˝u
(
t›
->use_thread);

183 
o
->
u∆ök
 = 
	`À32_to_˝u
(
t›
->unlink);

184 
o
->
u∆ök_óch_lo›
 = 
	`À32_to_˝u
(
t›
->unlink_each_loop);

185 
o
->
do_disk_utû
 = 
	`À32_to_˝u
(
t›
->do_disk_util);

186 
o
->
ovîride_sync
 = 
	`À32_to_˝u
(
t›
->override_sync);

187 
o
->
ønd_ª≥©abÀ
 = 
	`À32_to_˝u
(
t›
->rand_repeatable);

188 
o
->
ÆÃ™d_ª≥©abÀ
 = 
	`À32_to_˝u
(
t›
->allrand_repeatable);

189 
o
->
ønd_£ed
 = 
	`À64_to_˝u
(
t›
->rand_seed);

190 
o
->
log_íåõs
 = 
	`À32_to_˝u
(
t›
->log_entries);

191 
o
->
log_avg_m£c
 = 
	`À32_to_˝u
(
t›
->log_avg_msec);

192 
o
->
log_hi°_m£c
 = 
	`À32_to_˝u
(
t›
->log_hist_msec);

193 
o
->
log_hi°_cﬂr£√ss
 = 
	`À32_to_˝u
(
t›
->log_hist_coarseness);

194 
o
->
log_max
 = 
	`À32_to_˝u
(
t›
->log_max);

195 
o
->
log_off£t
 = 
	`À32_to_˝u
(
t›
->log_offset);

196 
o
->
log_¥io
 = 
	`À32_to_˝u
(
t›
->log_prio);

197 
o
->
log_gz
 = 
	`À32_to_˝u
(
t›
->log_gz);

198 
o
->
log_gz_°‹e
 = 
	`À32_to_˝u
(
t›
->log_gz_store);

199 
o
->
log_unix_ïoch
 = 
	`À32_to_˝u
(
t›
->log_unix_epoch);

200 
o
->
log_Æã∫©e_ïoch
 = 
	`À32_to_˝u
(
t›
->log_alternate_epoch);

201 
o
->
log_Æã∫©e_ïoch_˛ock_id
 = 
	`À32_to_˝u
(
t›
->log_alternate_epoch_clock_id);

202 
o
->
n‹™domm≠
 = 
	`À32_to_˝u
(
t›
->norandommap);

203 
o
->
so·øndomm≠
 = 
	`À32_to_˝u
(
t›
->softrandommap);

204 
o
->
bs_u«lig√d
 = 
	`À32_to_˝u
(
t›
->bs_unaligned);

205 
o
->
fsync_⁄_˛o£
 = 
	`À32_to_˝u
(
t›
->fsync_on_close);

206 
o
->
bs_is_£q_ønd
 = 
	`À32_to_˝u
(
t›
->bs_is_seq_rand);

207 
o
->
øndom_di°ributi⁄
 = 
	`À32_to_˝u
(
t›
->random_distribution);

208 
o
->
exôÆl_îr‹
 = 
	`À32_to_˝u
(
t›
->exitall_error);

209 
o
->
zùf_thëa
.
u
.
f
 = 
	`fio_uöt64_to_doubÀ
(
	`À64_to_˝u
(
t›
->zùf_thëa.u.
i
));

210 
o
->
∑ªto_h
.
u
.
f
 = 
	`fio_uöt64_to_doubÀ
(
	`À64_to_˝u
(
t›
->∑ªto_h.u.
i
));

211 
o
->
gauss_dev
.
u
.
f
 = 
	`fio_uöt64_to_doubÀ
(
	`À64_to_˝u
(
t›
->gauss_dev.u.
i
));

212 
o
->
øndom_˚¡î
.
u
.
f
 = 
	`fio_uöt64_to_doubÀ
(
	`À64_to_˝u
(
t›
->øndom_˚¡î.u.
i
));

213 
o
->
øndom_gíî©‹
 = 
	`À32_to_˝u
(
t›
->random_generator);

214 
o
->
hugïage_size
 = 
	`À32_to_˝u
(
t›
->hugepage_size);

215 
o
->
rw_mö_bs
 = 
	`À64_to_˝u
(
t›
->rw_min_bs);

216 
o
->
thöktime
 = 
	`À32_to_˝u
(
t›
->thinktime);

217 
o
->
thöktime_•ö
 = 
	`À32_to_˝u
(
t›
->thinktime_spin);

218 
o
->
thöktime_blocks
 = 
	`À32_to_˝u
(
t›
->thinktime_blocks);

219 
o
->
thöktime_blocks_ty≥
 = 
	`À32_to_˝u
(
t›
->thinktime_blocks_type);

220 
o
->
thöktime_iŸime
 = 
	`À32_to_˝u
(
t›
->thinktime_iotime);

221 
o
->
fsync_blocks
 = 
	`À32_to_˝u
(
t›
->fsync_blocks);

222 
o
->
fd©async_blocks
 = 
	`À32_to_˝u
(
t›
->fdatasync_blocks);

223 
o
->
b¨rõr_blocks
 = 
	`À32_to_˝u
(
t›
->barrier_blocks);

225 
o
->
vîify_backlog
 = 
	`À64_to_˝u
(
t›
->verify_backlog);

226 
o
->
°¨t_dñay
 = 
	`À64_to_˝u
(
t›
->start_delay);

227 
o
->
°¨t_dñay_high
 = 
	`À64_to_˝u
(
t›
->start_delay_high);

228 
o
->
timeout
 = 
	`À64_to_˝u
(
t›
->timeout);

229 
o
->
ømp_time
 = 
	`À64_to_˝u
(
t›
->ramp_time);

230 
o
->
ss_dur
 = 
	`À64_to_˝u
(
t›
->ss_dur);

231 
o
->
ss_ømp_time
 = 
	`À64_to_˝u
(
t›
->ss_ramp_time);

232 
o
->
ss_°©e
 = 
	`À32_to_˝u
(
t›
->ss_state);

233 
o
->
ss_limô
.
u
.
f
 = 
	`fio_uöt64_to_doubÀ
(
	`À64_to_˝u
(
t›
->ss_limô.u.
i
));

234 
o
->
z⁄e_ønge
 = 
	`À64_to_˝u
(
t›
->zone_range);

235 
o
->
z⁄e_size
 = 
	`À64_to_˝u
(
t›
->zone_size);

236 
o
->
z⁄e_ˇ∑côy
 = 
	`À64_to_˝u
(
t›
->zone_capacity);

237 
o
->
z⁄e_skù
 = 
	`À64_to_˝u
(
t›
->zone_skip);

238 
o
->
z⁄e_mode
 = 
	`À32_to_˝u
(
t›
->zone_mode);

239 
o
->
max_›í_z⁄es
 = 
	`__À32_to_˝u
(
t›
->max_open_zones);

240 
o
->
ign‹e_z⁄e_limôs
 = 
	`À32_to_˝u
(
t›
->ignore_zone_limits);

241 
o
->
lockmem
 = 
	`À64_to_˝u
(
t›
->lockmem);

242 
o
->
off£t_ö¸emít_≥r˚¡
 = 
	`À32_to_˝u
(
t›
->offset_increment_percent);

243 
o
->
off£t_ö¸emít
 = 
	`À64_to_˝u
(
t›
->offset_increment);

244 
o
->
numbî_ios
 = 
	`À64_to_˝u
(
t›
->number_ios);

246 
o
->
ovîwrôe
 = 
	`À32_to_˝u
(
t›
->overwrite);

247 
o
->
bw_avg_time
 = 
	`À32_to_˝u
(
t›
->bw_avg_time);

248 
o
->
i›s_avg_time
 = 
	`À32_to_˝u
(
t›
->iops_avg_time);

249 
o
->
lo›s
 = 
	`À32_to_˝u
(
t›
->loops);

250 
o
->
mem_ty≥
 = 
	`À32_to_˝u
(
t›
->mem_type);

251 
o
->
mem_Æign
 = 
	`À32_to_˝u
(
t›
->mem_align);

252 
o
->
exô_wh©
 = 
	`À32_to_˝u
(
t›
->exit_what);

253 
o
->
°⁄ewÆl
 = 
	`À32_to_˝u
(
t›
->stonewall);

254 
o
->
√w_group
 = 
	`À32_to_˝u
(
t›
->new_group);

255 
o
->
numjobs
 = 
	`À32_to_˝u
(
t›
->numjobs);

256 
o
->
˝us_Ælowed_pﬁicy
 = 
	`À32_to_˝u
(
t›
->cpus_allowed_policy);

257 
o
->
gpu_dev_id
 = 
	`À32_to_˝u
(
t›
->gpu_dev_id);

258 
o
->
iﬁog
 = 
	`À32_to_˝u
(
t›
->iolog);

259 
o
->
rwmixcy˛e
 = 
	`À32_to_˝u
(
t›
->rwmixcycle);

260 
o
->
ni˚
 = 
	`À32_to_˝u
(
t›
->nice);

261 
o
->
i›rio
 = 
	`À32_to_˝u
(
t›
->ioprio);

262 
o
->
i›rio_˛ass
 = 
	`À32_to_˝u
(
t›
->ioprio_class);

263 
o
->
fûe_£rvi˚_ty≥
 = 
	`À32_to_˝u
(
t›
->file_service_type);

264 
o
->
group_ªp‹tög
 = 
	`À32_to_˝u
(
t›
->group_reporting);

265 
o
->
°©s
 = 
	`À32_to_˝u
(
t›
->stats);

266 
o
->
Ádvi£_höt
 = 
	`À32_to_˝u
(
t›
->fadvise_hint);

267 
o
->
ÁŒoˇã_mode
 = 
	`À32_to_˝u
(
t›
->fallocate_mode);

268 
o
->
zîo_buf„rs
 = 
	`À32_to_˝u
(
t›
->zero_buffers);

269 
o
->
ªfûl_buf„rs
 = 
	`À32_to_˝u
(
t›
->refill_buffers);

270 
o
->
s¸ambÀ_buf„rs
 = 
	`À32_to_˝u
(
t›
->scramble_buffers);

271 
o
->
buf„r_∑âîn_byãs
 = 
	`À32_to_˝u
(
t›
->buffer_pattern_bytes);

272 
o
->
time_ba£d
 = 
	`À32_to_˝u
(
t›
->time_based);

273 
o
->
dißbÀ_œt
 = 
	`À32_to_˝u
(
t›
->disable_lat);

274 
o
->
dißbÀ_˛©
 = 
	`À32_to_˝u
(
t›
->disable_clat);

275 
o
->
dißbÀ_¶©
 = 
	`À32_to_˝u
(
t›
->disable_slat);

276 
o
->
dißbÀ_bw
 = 
	`À32_to_˝u
(
t›
->disable_bw);

277 
o
->
unifõd_rw_ªp
 = 
	`À32_to_˝u
(
t›
->unified_rw_rep);

278 
o
->
gtod_ªdu˚
 = 
	`À32_to_˝u
(
t›
->gtod_reduce);

279 
o
->
gtod_˝u
 = 
	`À32_to_˝u
(
t›
->gtod_cpu);

280 
o
->
˛ocksour˚
 = 
	`À32_to_˝u
(
t›
->clocksource);

281 
o
->
no_°Æl
 = 
	`À32_to_˝u
(
t›
->no_stall);

282 
o
->
åim_≥r˚¡age
 = 
	`À32_to_˝u
(
t›
->trim_percentage);

283 
o
->
åim_b©ch
 = 
	`À32_to_˝u
(
t›
->trim_batch);

284 
o
->
åim_zîo
 = 
	`À32_to_˝u
(
t›
->trim_zero);

285 
o
->
˛©_≥r˚¡ûes
 = 
	`À32_to_˝u
(
t›
->clat_percentiles);

286 
o
->
œt_≥r˚¡ûes
 = 
	`À32_to_˝u
(
t›
->lat_percentiles);

287 
o
->
¶©_≥r˚¡ûes
 = 
	`À32_to_˝u
(
t›
->slat_percentiles);

288 
o
->
≥r˚¡ûe_¥ecisi⁄
 = 
	`À32_to_˝u
(
t›
->percentile_precision);

289 
o
->
sig_figs
 = 
	`À32_to_˝u
(
t›
->sig_figs);

290 
o
->
c⁄töue_⁄_îr‹
 = 
	`À32_to_˝u
(
t›
->continue_on_error);

291 
o
->
cgroup_weight
 = 
	`À32_to_˝u
(
t›
->cgroup_weight);

292 
o
->
cgroup_nodñëe
 = 
	`À32_to_˝u
(
t›
->cgroup_nodelete);

293 
o
->
uid
 = 
	`À32_to_˝u
(
t›
->uid);

294 
o
->
gid
 = 
	`À32_to_˝u
(
t›
->gid);

295 
o
->
Êow_id
 = 
	`__À32_to_˝u
(
t›
->flow_id);

296 
o
->
Êow
 = 
	`À32_to_˝u
(
t›
->flow);

297 
o
->
Êow_¶ìp
 = 
	`À32_to_˝u
(
t›
->flow_sleep);

298 
o
->
sync_fûe_ønge
 = 
	`À32_to_˝u
(
t›
->sync_file_range);

299 
o
->
œãncy_èrgë
 = 
	`À64_to_˝u
(
t›
->latency_target);

300 
o
->
œãncy_wödow
 = 
	`À64_to_˝u
(
t›
->latency_window);

301 
o
->
œãncy_≥r˚¡ûe
.
u
.
f
 = 
	`fio_uöt64_to_doubÀ
(
	`À64_to_˝u
(
t›
->œãncy_≥r˚¡ûe.u.
i
));

302 
o
->
œãncy_run
 = 
	`À32_to_˝u
(
t›
->latency_run);

303 
o
->
com¥ess_≥r˚¡age
 = 
	`À32_to_˝u
(
t›
->compress_percentage);

304 
o
->
com¥ess_chunk
 = 
	`À32_to_˝u
(
t›
->compress_chunk);

305 
o
->
dedu≥_≥r˚¡age
 = 
	`À32_to_˝u
(
t›
->dedupe_percentage);

306 
o
->
dedu≥_mode
 = 
	`À32_to_˝u
(
t›
->dedupe_mode);

307 
o
->
dedu≥_w‹kög_£t_≥r˚¡age
 = 
	`À32_to_˝u
(
t›
->dedupe_working_set_percentage);

308 
o
->
dedu≥_globÆ
 = 
	`À32_to_˝u
(
t›
->dedupe_global);

309 
o
->
block_îr‹_hi°
 = 
	`À32_to_˝u
(
t›
->block_error_hist);

310 
o
->
ª∂ay_Æign
 = 
	`À32_to_˝u
(
t›
->replay_align);

311 
o
->
ª∂ay_sˇÀ
 = 
	`À32_to_˝u
(
t›
->replay_scale);

312 
o
->
ª∂ay_time_sˇÀ
 = 
	`À32_to_˝u
(
t›
->replay_time_scale);

313 
o
->
ª∂ay_skù
 = 
	`À32_to_˝u
(
t›
->replay_skip);

314 
o
->
≥r_job_logs
 = 
	`À32_to_˝u
(
t›
->per_job_logs);

315 
o
->
wrôe_bw_log
 = 
	`À32_to_˝u
(
t›
->write_bw_log);

316 
o
->
wrôe_œt_log
 = 
	`À32_to_˝u
(
t›
->write_lat_log);

317 
o
->
wrôe_i›s_log
 = 
	`À32_to_˝u
(
t›
->write_iops_log);

318 
o
->
wrôe_hi°_log
 = 
	`À32_to_˝u
(
t›
->write_hist_log);

320 
o
->
åim_backlog
 = 
	`À64_to_˝u
(
t›
->trim_backlog);

321 
o
->
øã_¥o˚ss
 = 
	`À32_to_˝u
(
t›
->rate_process);

322 
o
->
øã_ign_thök
 = 
	`À32_to_˝u
(
t›
->rate_ign_think);

324 
i
 = 0; i < 
FIO_IO_U_LIST_MAX_LEN
; i++)

325 
o
->
≥r˚¡ûe_li°
[
i
].
u
.
f
 = 
	`fio_uöt64_to_doubÀ
(
	`À64_to_˝u
(
t›
->percentile_list[i].u.i));

327 
i
 = 0; i < 
FIO_IO_U_LIST_MAX_LEN
; i++)

328 
o
->
mîge_blkåa˚_sˇœrs
[
i
].
u
.
f
 = 
	`fio_uöt64_to_doubÀ
(
	`À64_to_˝u
(
t›
->merge_blktrace_scalars[i].u.i));

330 
i
 = 0; i < 
FIO_IO_U_LIST_MAX_LEN
; i++)

331 
o
->
mîge_blkåa˚_ôîs
[
i
].
u
.
f
 = 
	`fio_uöt64_to_doubÀ
(
	`À64_to_˝u
(
t›
->merge_blktrace_iters[i].u.i));

333 
uöt8_t
 
˝umask
[
FIO_TOP_STR_MAX
];

334 
uöt8_t
 
vîify_˝umask
[
FIO_TOP_STR_MAX
];

335 
uöt8_t
 
log_gz_˝umask
[
FIO_TOP_STR_MAX
];

337 
	}
}

339 
	$c⁄vît_thªad_›ti⁄s_to_√t
(
thªad_›ti⁄s_∑ck
 *
t›
,

340 
thªad_›ti⁄s
 *
o
)

342 
i
, 
j
;

344 
i
 = 0; i < 
NR_OPTS_SZ
; i++)

345 
t›
->
£t_›ti⁄s
[
i
] = 
	`˝u_to_À64
(
o
->set_options[i]);

347 
	`°rög_to_√t
(
t›
->
des¸ùti⁄
, 
o
->description);

348 
	`°rög_to_√t
(
t›
->
«me
, 
o
->name);

349 
	`°rög_to_√t
(
t›
->
waô_f‹
, 
o
->wait_for);

350 
	`°rög_to_√t
(
t›
->
dúe˘‹y
, 
o
->directory);

351 
	`°rög_to_√t
(
t›
->
fûíame
, 
o
->filename);

352 
	`°rög_to_√t
(
t›
->
fûíame_f‹m©
, 
o
->filename_format);

353 
	`°rög_to_√t
(
t›
->
›ídú
, 
o
->opendir);

354 
	`°rög_to_√t
(
t›
->
i€ngöe
, 
o
->ioengine);

355 
	`°rög_to_√t
(
t›
->
mm≠fûe
, 
o
->mmapfile);

356 
	`°rög_to_√t
(
t›
->
ªad_iﬁog_fûe
, 
o
->read_iolog_file);

357 
	`°rög_to_√t
(
t›
->
wrôe_iﬁog_fûe
, 
o
->write_iolog_file);

358 
	`°rög_to_√t
(
t›
->
mîge_blkåa˚_fûe
, 
o
->merge_blktrace_file);

359 
	`°rög_to_√t
(
t›
->
bw_log_fûe
, 
o
->bw_log_file);

360 
	`°rög_to_√t
(
t›
->
œt_log_fûe
, 
o
->lat_log_file);

361 
	`°rög_to_√t
(
t›
->
i›s_log_fûe
, 
o
->iops_log_file);

362 
	`°rög_to_√t
(
t›
->
hi°_log_fûe
, 
o
->hist_log_file);

363 
	`°rög_to_√t
(
t›
->
ª∂ay_ªdúe˘
, 
o
->replay_redirect);

364 
	`°rög_to_√t
(
t›
->
exec_¥îun
, 
o
->exec_prerun);

365 
	`°rög_to_√t
(
t›
->
exec_po°run
, 
o
->exec_postrun);

366 
	`°rög_to_√t
(
t›
->
ioscheduÀr
, 
o
->ioscheduler);

367 
	`°rög_to_√t
(
t›
->
¥ofûe
, 
o
->profile);

368 
	`°rög_to_√t
(
t›
->
cgroup
, 
o
->cgroup);

370 
t›
->
Ælow_¸óã
 = 
	`˝u_to_À32
(
o
->allow_create);

371 
t›
->
Ælow_mou¡ed_wrôe
 = 
	`˝u_to_À32
(
o
->allow_mounted_write);

372 
t›
->
td_ddú
 = 
	`˝u_to_À32
(
o
->td_ddir);

373 
t›
->
rw_£q
 = 
	`˝u_to_À32
(
o
->rw_seq);

374 
t›
->
kb_ba£
 = 
	`˝u_to_À32
(
o
->kb_base);

375 
t›
->
unô_ba£
 = 
	`˝u_to_À32
(
o
->unit_base);

376 
t›
->
ddú_£q_ƒ
 = 
	`˝u_to_À32
(
o
->ddir_seq_nr);

377 
t›
->
iodïth
 = 
	`˝u_to_À32
(
o
->iodepth);

378 
t›
->
iodïth_low
 = 
	`˝u_to_À32
(
o
->iodepth_low);

379 
t›
->
iodïth_b©ch
 = 
	`˝u_to_À32
(
o
->iodepth_batch);

380 
t›
->
iodïth_b©ch_com∂ëe_mö
 = 
	`˝u_to_À32
(
o
->iodepth_batch_complete_min);

381 
t›
->
iodïth_b©ch_com∂ëe_max
 = 
	`˝u_to_À32
(
o
->iodepth_batch_complete_max);

382 
t›
->
£rülize_ovîœp
 = 
	`˝u_to_À32
(
o
->serialize_overlap);

383 
t›
->
size_≥r˚¡
 = 
	`˝u_to_À32
(
o
->size_percent);

384 
t›
->
io_size_≥r˚¡
 = 
	`˝u_to_À32
(
o
->io_size_percent);

385 
t›
->
fûl_devi˚
 = 
	`˝u_to_À32
(
o
->fill_device);

386 
t›
->
fûe_≠≥nd
 = 
	`˝u_to_À32
(
o
->file_append);

387 
t›
->
øãcy˛e
 = 
	`˝u_to_À32
(
o
->ratecycle);

388 
t›
->
io_submô_mode
 = 
	`˝u_to_À32
(
o
->io_submit_mode);

389 
t›
->
ƒ_fûes
 = 
	`˝u_to_À32
(
o
->nr_files);

390 
t›
->
unique_fûíame
 = 
	`˝u_to_À32
(
o
->unique_filename);

391 
t›
->
›í_fûes
 = 
	`˝u_to_À32
(
o
->open_files);

392 
t›
->
fûe_lock_mode
 = 
	`˝u_to_À32
(
o
->file_lock_mode);

393 
t›
->
odúe˘
 = 
	`˝u_to_À32
(
o
->odirect);

394 
t›
->
ﬂtomic
 = 
	`˝u_to_À32
(
o
->oatomic);

395 
t›
->
övÆid©e_ˇche
 = 
	`˝u_to_À32
(
o
->invalidate_cache);

396 
t›
->
¸óã_£rülize
 = 
	`˝u_to_À32
(
o
->create_serialize);

397 
t›
->
¸óã_fsync
 = 
	`˝u_to_À32
(
o
->create_fsync);

398 
t›
->
¸óã_⁄_›í
 = 
	`˝u_to_À32
(
o
->create_on_open);

399 
t›
->
¸óã_⁄ly
 = 
	`˝u_to_À32
(
o
->create_only);

400 
t›
->
íd_fsync
 = 
	`˝u_to_À32
(
o
->end_fsync);

401 
t›
->
¥e_ªad
 = 
	`˝u_to_À32
(
o
->pre_read);

402 
t›
->
sync_io
 = 
	`˝u_to_À32
(
o
->sync_io);

403 
t›
->
wrôe_höt
 = 
	`˝u_to_À32
(
o
->write_hint);

404 
t›
->
vîify
 = 
	`˝u_to_À32
(
o
->verify);

405 
t›
->
do_vîify
 = 
	`˝u_to_À32
(
o
->do_verify);

406 
t›
->
ex≥rimíèl_vîify
 = 
	`˝u_to_À32
(
o
->experimental_verify);

407 
t›
->
vîify_°©e
 = 
	`˝u_to_À32
(
o
->verify_state);

408 
t›
->
vîify_öãrvÆ
 = 
	`˝u_to_À32
(
o
->verify_interval);

409 
t›
->
vîify_off£t
 = 
	`˝u_to_À32
(
o
->verify_offset);

410 
t›
->
vîify_∑âîn_byãs
 = 
	`˝u_to_À32
(
o
->verify_pattern_bytes);

411 
t›
->
vîify_Áèl
 = 
	`˝u_to_À32
(
o
->verify_fatal);

412 
t›
->
vîify_dump
 = 
	`˝u_to_À32
(
o
->verify_dump);

413 
t›
->
vîify_async
 = 
	`˝u_to_À32
(
o
->verify_async);

414 
t›
->
vîify_b©ch
 = 
	`˝u_to_À32
(
o
->verify_batch);

415 
t›
->
u£_thªad
 = 
	`˝u_to_À32
(
o
->use_thread);

416 
t›
->
u∆ök
 = 
	`˝u_to_À32
(
o
->unlink);

417 
t›
->
u∆ök_óch_lo›
 = 
	`˝u_to_À32
(
o
->unlink_each_loop);

418 
t›
->
do_disk_utû
 = 
	`˝u_to_À32
(
o
->do_disk_util);

419 
t›
->
ovîride_sync
 = 
	`˝u_to_À32
(
o
->override_sync);

420 
t›
->
ønd_ª≥©abÀ
 = 
	`˝u_to_À32
(
o
->rand_repeatable);

421 
t›
->
ÆÃ™d_ª≥©abÀ
 = 
	`˝u_to_À32
(
o
->allrand_repeatable);

422 
t›
->
ønd_£ed
 = 
	`__˝u_to_À64
(
o
->rand_seed);

423 
t›
->
log_íåõs
 = 
	`˝u_to_À32
(
o
->log_entries);

424 
t›
->
log_avg_m£c
 = 
	`˝u_to_À32
(
o
->log_avg_msec);

425 
t›
->
log_max
 = 
	`˝u_to_À32
(
o
->log_max);

426 
t›
->
log_off£t
 = 
	`˝u_to_À32
(
o
->log_offset);

427 
t›
->
log_¥io
 = 
	`˝u_to_À32
(
o
->log_prio);

428 
t›
->
log_gz
 = 
	`˝u_to_À32
(
o
->log_gz);

429 
t›
->
log_gz_°‹e
 = 
	`˝u_to_À32
(
o
->log_gz_store);

430 
t›
->
log_unix_ïoch
 = 
	`˝u_to_À32
(
o
->log_unix_epoch);

431 
t›
->
log_Æã∫©e_ïoch
 = 
	`˝u_to_À32
(
o
->log_alternate_epoch);

432 
t›
->
log_Æã∫©e_ïoch_˛ock_id
 = 
	`˝u_to_À32
(
o
->log_alternate_epoch_clock_id);

433 
t›
->
n‹™domm≠
 = 
	`˝u_to_À32
(
o
->norandommap);

434 
t›
->
so·øndomm≠
 = 
	`˝u_to_À32
(
o
->softrandommap);

435 
t›
->
bs_u«lig√d
 = 
	`˝u_to_À32
(
o
->bs_unaligned);

436 
t›
->
fsync_⁄_˛o£
 = 
	`˝u_to_À32
(
o
->fsync_on_close);

437 
t›
->
bs_is_£q_ønd
 = 
	`˝u_to_À32
(
o
->bs_is_seq_rand);

438 
t›
->
øndom_di°ributi⁄
 = 
	`˝u_to_À32
(
o
->random_distribution);

439 
t›
->
exôÆl_îr‹
 = 
	`˝u_to_À32
(
o
->exitall_error);

440 
t›
->
zùf_thëa
.
u
.
i
 = 
	`__˝u_to_À64
(
	`fio_doubÀ_to_uöt64
(
o
->zùf_thëa.u.
f
));

441 
t›
->
∑ªto_h
.
u
.
i
 = 
	`__˝u_to_À64
(
	`fio_doubÀ_to_uöt64
(
o
->∑ªto_h.u.
f
));

442 
t›
->
gauss_dev
.
u
.
i
 = 
	`__˝u_to_À64
(
	`fio_doubÀ_to_uöt64
(
o
->gauss_dev.u.
f
));

443 
t›
->
øndom_˚¡î
.
u
.
i
 = 
	`__˝u_to_À64
(
	`fio_doubÀ_to_uöt64
(
o
->øndom_˚¡î.u.
f
));

444 
t›
->
øndom_gíî©‹
 = 
	`˝u_to_À32
(
o
->random_generator);

445 
t›
->
hugïage_size
 = 
	`˝u_to_À32
(
o
->hugepage_size);

446 
t›
->
rw_mö_bs
 = 
	`__˝u_to_À64
(
o
->rw_min_bs);

447 
t›
->
thöktime
 = 
	`˝u_to_À32
(
o
->thinktime);

448 
t›
->
thöktime_•ö
 = 
	`˝u_to_À32
(
o
->thinktime_spin);

449 
t›
->
thöktime_blocks
 = 
	`˝u_to_À32
(
o
->thinktime_blocks);

450 
t›
->
thöktime_blocks_ty≥
 = 
	`__˝u_to_À32
(
o
->thinktime_blocks_type);

451 
t›
->
thöktime_iŸime
 = 
	`__˝u_to_À32
(
o
->thinktime_iotime);

452 
t›
->
fsync_blocks
 = 
	`˝u_to_À32
(
o
->fsync_blocks);

453 
t›
->
fd©async_blocks
 = 
	`˝u_to_À32
(
o
->fdatasync_blocks);

454 
t›
->
b¨rõr_blocks
 = 
	`˝u_to_À32
(
o
->barrier_blocks);

455 
t›
->
ovîwrôe
 = 
	`˝u_to_À32
(
o
->overwrite);

456 
t›
->
bw_avg_time
 = 
	`˝u_to_À32
(
o
->bw_avg_time);

457 
t›
->
i›s_avg_time
 = 
	`˝u_to_À32
(
o
->iops_avg_time);

458 
t›
->
lo›s
 = 
	`˝u_to_À32
(
o
->loops);

459 
t›
->
mem_ty≥
 = 
	`˝u_to_À32
(
o
->mem_type);

460 
t›
->
mem_Æign
 = 
	`˝u_to_À32
(
o
->mem_align);

461 
t›
->
exô_wh©
 = 
	`˝u_to_À32
(
o
->exit_what);

462 
t›
->
°⁄ewÆl
 = 
	`˝u_to_À32
(
o
->stonewall);

463 
t›
->
√w_group
 = 
	`˝u_to_À32
(
o
->new_group);

464 
t›
->
numjobs
 = 
	`˝u_to_À32
(
o
->numjobs);

465 
t›
->
˝us_Ælowed_pﬁicy
 = 
	`˝u_to_À32
(
o
->cpus_allowed_policy);

466 
t›
->
gpu_dev_id
 = 
	`˝u_to_À32
(
o
->gpu_dev_id);

467 
t›
->
iﬁog
 = 
	`˝u_to_À32
(
o
->iolog);

468 
t›
->
rwmixcy˛e
 = 
	`˝u_to_À32
(
o
->rwmixcycle);

469 
t›
->
ni˚
 = 
	`˝u_to_À32
(
o
->nice);

470 
t›
->
i›rio
 = 
	`˝u_to_À32
(
o
->ioprio);

471 
t›
->
i›rio_˛ass
 = 
	`˝u_to_À32
(
o
->ioprio_class);

472 
t›
->
fûe_£rvi˚_ty≥
 = 
	`˝u_to_À32
(
o
->file_service_type);

473 
t›
->
group_ªp‹tög
 = 
	`˝u_to_À32
(
o
->group_reporting);

474 
t›
->
°©s
 = 
	`˝u_to_À32
(
o
->stats);

475 
t›
->
Ádvi£_höt
 = 
	`˝u_to_À32
(
o
->fadvise_hint);

476 
t›
->
ÁŒoˇã_mode
 = 
	`˝u_to_À32
(
o
->fallocate_mode);

477 
t›
->
zîo_buf„rs
 = 
	`˝u_to_À32
(
o
->zero_buffers);

478 
t›
->
ªfûl_buf„rs
 = 
	`˝u_to_À32
(
o
->refill_buffers);

479 
t›
->
s¸ambÀ_buf„rs
 = 
	`˝u_to_À32
(
o
->scramble_buffers);

480 
t›
->
buf„r_∑âîn_byãs
 = 
	`˝u_to_À32
(
o
->buffer_pattern_bytes);

481 
t›
->
time_ba£d
 = 
	`˝u_to_À32
(
o
->time_based);

482 
t›
->
dißbÀ_œt
 = 
	`˝u_to_À32
(
o
->disable_lat);

483 
t›
->
dißbÀ_˛©
 = 
	`˝u_to_À32
(
o
->disable_clat);

484 
t›
->
dißbÀ_¶©
 = 
	`˝u_to_À32
(
o
->disable_slat);

485 
t›
->
dißbÀ_bw
 = 
	`˝u_to_À32
(
o
->disable_bw);

486 
t›
->
unifõd_rw_ªp
 = 
	`˝u_to_À32
(
o
->unified_rw_rep);

487 
t›
->
gtod_ªdu˚
 = 
	`˝u_to_À32
(
o
->gtod_reduce);

488 
t›
->
gtod_˝u
 = 
	`˝u_to_À32
(
o
->gtod_cpu);

489 
t›
->
˛ocksour˚
 = 
	`˝u_to_À32
(
o
->clocksource);

490 
t›
->
no_°Æl
 = 
	`˝u_to_À32
(
o
->no_stall);

491 
t›
->
åim_≥r˚¡age
 = 
	`˝u_to_À32
(
o
->trim_percentage);

492 
t›
->
åim_b©ch
 = 
	`˝u_to_À32
(
o
->trim_batch);

493 
t›
->
åim_zîo
 = 
	`˝u_to_À32
(
o
->trim_zero);

494 
t›
->
˛©_≥r˚¡ûes
 = 
	`˝u_to_À32
(
o
->clat_percentiles);

495 
t›
->
œt_≥r˚¡ûes
 = 
	`˝u_to_À32
(
o
->lat_percentiles);

496 
t›
->
¶©_≥r˚¡ûes
 = 
	`˝u_to_À32
(
o
->slat_percentiles);

497 
t›
->
≥r˚¡ûe_¥ecisi⁄
 = 
	`˝u_to_À32
(
o
->percentile_precision);

498 
t›
->
sig_figs
 = 
	`˝u_to_À32
(
o
->sig_figs);

499 
t›
->
c⁄töue_⁄_îr‹
 = 
	`˝u_to_À32
(
o
->continue_on_error);

500 
t›
->
cgroup_weight
 = 
	`˝u_to_À32
(
o
->cgroup_weight);

501 
t›
->
cgroup_nodñëe
 = 
	`˝u_to_À32
(
o
->cgroup_nodelete);

502 
t›
->
uid
 = 
	`˝u_to_À32
(
o
->uid);

503 
t›
->
gid
 = 
	`˝u_to_À32
(
o
->gid);

504 
t›
->
Êow_id
 = 
	`__˝u_to_À32
(
o
->flow_id);

505 
t›
->
Êow
 = 
	`˝u_to_À32
(
o
->flow);

506 
t›
->
Êow_¶ìp
 = 
	`˝u_to_À32
(
o
->flow_sleep);

507 
t›
->
sync_fûe_ønge
 = 
	`˝u_to_À32
(
o
->sync_file_range);

508 
t›
->
œãncy_èrgë
 = 
	`__˝u_to_À64
(
o
->latency_target);

509 
t›
->
œãncy_wödow
 = 
	`__˝u_to_À64
(
o
->latency_window);

510 
t›
->
œãncy_≥r˚¡ûe
.
u
.
i
 = 
	`__˝u_to_À64
(
	`fio_doubÀ_to_uöt64
(
o
->œãncy_≥r˚¡ûe.u.
f
));

511 
t›
->
œãncy_run
 = 
	`__˝u_to_À32
(
o
->latency_run);

512 
t›
->
com¥ess_≥r˚¡age
 = 
	`˝u_to_À32
(
o
->compress_percentage);

513 
t›
->
com¥ess_chunk
 = 
	`˝u_to_À32
(
o
->compress_chunk);

514 
t›
->
dedu≥_≥r˚¡age
 = 
	`˝u_to_À32
(
o
->dedupe_percentage);

515 
t›
->
dedu≥_mode
 = 
	`˝u_to_À32
(
o
->dedupe_mode);

516 
t›
->
dedu≥_w‹kög_£t_≥r˚¡age
 = 
	`˝u_to_À32
(
o
->dedupe_working_set_percentage);

517 
t›
->
dedu≥_globÆ
 = 
	`˝u_to_À32
(
o
->dedupe_global);

518 
t›
->
block_îr‹_hi°
 = 
	`˝u_to_À32
(
o
->block_error_hist);

519 
t›
->
ª∂ay_Æign
 = 
	`˝u_to_À32
(
o
->replay_align);

520 
t›
->
ª∂ay_sˇÀ
 = 
	`˝u_to_À32
(
o
->replay_scale);

521 
t›
->
ª∂ay_time_sˇÀ
 = 
	`˝u_to_À32
(
o
->replay_time_scale);

522 
t›
->
ª∂ay_skù
 = 
	`˝u_to_À32
(
o
->replay_skip);

523 
t›
->
≥r_job_logs
 = 
	`˝u_to_À32
(
o
->per_job_logs);

524 
t›
->
wrôe_bw_log
 = 
	`˝u_to_À32
(
o
->write_bw_log);

525 
t›
->
wrôe_œt_log
 = 
	`˝u_to_À32
(
o
->write_lat_log);

526 
t›
->
wrôe_i›s_log
 = 
	`˝u_to_À32
(
o
->write_iops_log);

527 
t›
->
wrôe_hi°_log
 = 
	`˝u_to_À32
(
o
->write_hist_log);

529 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

530 
t›
->
bs
[
i
] = 
	`__˝u_to_À64
(
o
->bs[i]);

531 
t›
->
ba
[
i
] = 
	`__˝u_to_À64
(
o
->ba[i]);

532 
t›
->
mö_bs
[
i
] = 
	`__˝u_to_À64
(
o
->min_bs[i]);

533 
t›
->
max_bs
[
i
] = 
	`__˝u_to_À64
(
o
->max_bs[i]);

534 
t›
->
bs•lô_ƒ
[
i
] = 
	`˝u_to_À32
(
o
->bssplit_nr[i]);

536 i‡(
o
->
bs•lô_ƒ
[
i
]) {

537 
bs•lô_ƒ
 = 
o
->bs•lô_ƒ[
i
];

539 i‡(
bs•lô_ƒ
 > 
BSSPLIT_MAX
) {

540 
	`log_îr
("fio: BSSPLIT_MAX isÅoo small\n");

541 
bs•lô_ƒ
 = 
BSSPLIT_MAX
;

543 
j
 = 0; j < 
bs•lô_ƒ
; j++) {

544 
t›
->
bs•lô
[
i
][
j
].
bs
 = 
	`˝u_to_À64
(
o
->bssplit[i][j].bs);

545 
t›
->
bs•lô
[
i
][
j
].
≥rc
 = 
	`˝u_to_À32
(
o
->bssplit[i][j].perc);

549 
t›
->
z⁄e_•lô_ƒ
[
i
] = 
	`˝u_to_À32
(
o
->zone_split_nr[i]);

551 i‡(
o
->
z⁄e_•lô_ƒ
[
i
]) {

552 
z⁄e_•lô_ƒ
 = 
o
->z⁄e_•lô_ƒ[
i
];

554 i‡(
z⁄e_•lô_ƒ
 > 
ZONESPLIT_MAX
) {

555 
	`log_îr
("fio: ZONESPLIT_MAX isÅoo small\n");

556 
z⁄e_•lô_ƒ
 = 
ZONESPLIT_MAX
;

558 
j
 = 0; j < 
z⁄e_•lô_ƒ
; j++) {

559 
t›
->
z⁄e_•lô
[
i
][
j
].
ac˚ss_≥rc
 = 
o
->zone_split[i][j].access_perc;

560 
t›
->
z⁄e_•lô
[
i
][
j
].
size_≥rc
 = 
o
->zone_split[i][j].size_perc;

564 
t›
->
rwmix
[
i
] = 
	`˝u_to_À32
(
o
->rwmix[i]);

565 
t›
->
øã
[
i
] = 
	`˝u_to_À64
(
o
->rate[i]);

566 
t›
->
øãmö
[
i
] = 
	`˝u_to_À64
(
o
->ratemin[i]);

567 
t›
->
øã_i›s
[
i
] = 
	`˝u_to_À32
(
o
->rate_iops[i]);

568 
t›
->
øã_i›s_mö
[
i
] = 
	`˝u_to_À32
(
o
->rate_iops_min[i]);

570 
t›
->
≥rc_ønd
[
i
] = 
	`˝u_to_À32
(
o
->perc_rand[i]);

572 
t›
->
max_œãncy
[
i
] = 
	`__˝u_to_À64
(
o
->max_latency[i]);

575 
	`mem˝y
(
t›
->
vîify_∑âîn
, 
o
->vîify_∑âîn, 
MAX_PATTERN_SIZE
);

576 
	`mem˝y
(
t›
->
buf„r_∑âîn
, 
o
->buf„r_∑âîn, 
MAX_PATTERN_SIZE
);

578 
t›
->
size
 = 
	`__˝u_to_À64
(
o
->size);

579 
t›
->
io_size
 = 
	`__˝u_to_À64
(
o
->io_size);

580 
t›
->
vîify_backlog
 = 
	`__˝u_to_À64
(
o
->verify_backlog);

581 
t›
->
°¨t_dñay
 = 
	`__˝u_to_À64
(
o
->start_delay);

582 
t›
->
°¨t_dñay_high
 = 
	`__˝u_to_À64
(
o
->start_delay_high);

583 
t›
->
timeout
 = 
	`__˝u_to_À64
(
o
->timeout);

584 
t›
->
ømp_time
 = 
	`__˝u_to_À64
(
o
->ramp_time);

585 
t›
->
ss_dur
 = 
	`__˝u_to_À64
(top->ss_dur);

586 
t›
->
ss_ømp_time
 = 
	`__˝u_to_À64
(top->ss_ramp_time);

587 
t›
->
ss_°©e
 = 
	`˝u_to_À32
(top->ss_state);

588 
t›
->
ss_limô
.
u
.
i
 = 
	`__˝u_to_À64
(
	`fio_doubÀ_to_uöt64
(
o
->ss_limô.u.
f
));

589 
t›
->
z⁄e_ønge
 = 
	`__˝u_to_À64
(
o
->zone_range);

590 
t›
->
z⁄e_size
 = 
	`__˝u_to_À64
(
o
->zone_size);

591 
t›
->
z⁄e_ˇ∑côy
 = 
	`__˝u_to_À64
(
o
->zone_capacity);

592 
t›
->
z⁄e_skù
 = 
	`__˝u_to_À64
(
o
->zone_skip);

593 
t›
->
z⁄e_mode
 = 
	`__˝u_to_À32
(
o
->zone_mode);

594 
t›
->
max_›í_z⁄es
 = 
	`__˝u_to_À32
(
o
->max_open_zones);

595 
t›
->
ign‹e_z⁄e_limôs
 = 
	`˝u_to_À32
(
o
->ignore_zone_limits);

596 
t›
->
lockmem
 = 
	`__˝u_to_À64
(
o
->lockmem);

597 
t›
->
ddú_£q_add
 = 
	`__˝u_to_À64
(
o
->ddir_seq_add);

598 
t›
->
fûe_size_low
 = 
	`__˝u_to_À64
(
o
->file_size_low);

599 
t›
->
fûe_size_high
 = 
	`__˝u_to_À64
(
o
->file_size_high);

600 
t›
->
°¨t_off£t
 = 
	`__˝u_to_À64
(
o
->start_offset);

601 
t›
->
°¨t_off£t_Æign
 = 
	`__˝u_to_À64
(
o
->start_offset_align);

602 
t›
->
°¨t_off£t_≥r˚¡
 = 
	`__˝u_to_À32
(
o
->start_offset_percent);

603 
t›
->
åim_backlog
 = 
	`__˝u_to_À64
(
o
->trim_backlog);

604 
t›
->
off£t_ö¸emít_≥r˚¡
 = 
	`__˝u_to_À32
(
o
->offset_increment_percent);

605 
t›
->
off£t_ö¸emít
 = 
	`__˝u_to_À64
(
o
->offset_increment);

606 
t›
->
numbî_ios
 = 
	`__˝u_to_À64
(
o
->number_ios);

607 
t›
->
øã_¥o˚ss
 = 
	`˝u_to_À32
(
o
->rate_process);

608 
t›
->
øã_ign_thök
 = 
	`˝u_to_À32
(
o
->rate_ign_think);

610 
i
 = 0; i < 
FIO_IO_U_LIST_MAX_LEN
; i++)

611 
t›
->
≥r˚¡ûe_li°
[
i
].
u
.ò
	`__˝u_to_À64
(
	`fio_doubÀ_to_uöt64
(
o
->≥r˚¡ûe_li°[i].u.
f
));

613 
i
 = 0; i < 
FIO_IO_U_LIST_MAX_LEN
; i++)

614 
t›
->
mîge_blkåa˚_sˇœrs
[
i
].
u
.ò
	`__˝u_to_À64
(
	`fio_doubÀ_to_uöt64
(
o
->mîge_blkåa˚_sˇœrs[i].u.
f
));

616 
i
 = 0; i < 
FIO_IO_U_LIST_MAX_LEN
; i++)

617 
t›
->
mîge_blkåa˚_ôîs
[
i
].
u
.ò
	`__˝u_to_À64
(
	`fio_doubÀ_to_uöt64
(
o
->mîge_blkåa˚_ôîs[i].u.
f
));

619 
uöt8_t
 
˝umask
[
FIO_TOP_STR_MAX
];

620 
uöt8_t
 
vîify_˝umask
[
FIO_TOP_STR_MAX
];

621 
uöt8_t
 
log_gz_˝umask
[
FIO_TOP_STR_MAX
];

624 
	}
}

631 
	$fio_ã°_cc⁄v
(
thªad_›ti⁄s
 *
__o
)

633 
thªad_›ti⁄s
 
o
;

634 
thªad_›ti⁄s_∑ck
 
t›1
, 
t›2
;

636 
	`mem£t
(&
t›1
, 0, (top1));

637 
	`mem£t
(&
t›2
, 0, (top2));

639 
	`c⁄vît_thªad_›ti⁄s_to_√t
(&
t›1
, 
__o
);

640 
	`mem£t
(&
o
, 0, (o));

641 
	`c⁄vît_thªad_›ti⁄s_to_˝u
(&
o
, &
t›1
);

642 
	`c⁄vît_thªad_›ti⁄s_to_√t
(&
t›2
, &
o
);

644 
	`‰ì_thªad_›ti⁄s_to_˝u
(&
o
);

646  
	`memcmp
(&
t›1
, &
t›2
, (top1));

647 
	}
}

	@cgroup.c

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

6 
	~<m¡ít.h
>

7 
	~<sys/°©.h
>

8 
	~"fio.h
"

9 
	~"Êi°.h
"

10 
	~"cgroup.h
"

11 
	~"smÆloc.h
"

13 
fio_£m
 *
	glock
;

15 
	scgroup_membî
 {

16 
Êi°_hód
 
	mli°
;

17 *
	mroŸ
;

18 
	mcgroup_nodñëe
;

21 
cgroup_m¡
 *
	$föd_cgroup_m¡
(
thªad_d©a
 *
td
)

23 
cgroup_m¡
 *cgroup_m¡ = 
NULL
;

24 
m¡ít
 *
m¡
, 
dummy
;

25 
buf
[256] = {0};

26 
FILE
 *
f
;

27 
boﬁ
 
cgroup2
 = 
Ál£
;

29 
f
 = 
	`£tm¡ít
("/proc/mounts", "r");

30 i‡(!
f
) {

31 
	`td_vîr‹
(
td
, 
î∫o
, "setmntent /proc/mounts");

32  
NULL
;

35 (
m¡
 = 
	`gëm¡ít_r
(
f
, &
dummy
, 
buf
, (buf))Ë!
NULL
) {

36 i‡(!
	`°rcmp
(
m¡
->
m¡_ty≥
, "cgroup") &&

37 
	`°r°r
(
m¡
->
m¡_›ts
, "blkio"))

39 i‡(!
	`°rcmp
(
m¡
->
m¡_ty≥
, "cgroup2")) {

40 
cgroup2
 = 
åue
;

45 i‡(
m¡
) {

46 
cgroup_m¡
 = 
	`smÆloc
((*cgroup_mnt));

47 i‡(
cgroup_m¡
) {

48 
cgroup_m¡
->
∑th
 = 
	`smÆloc_°rdup
(
m¡
->
m¡_dú
);

49 i‡(!
cgroup_m¡
->
∑th
) {

50 
	`s‰ì
(
cgroup_m¡
);

51 
	`log_îr
("fio: couldÇotállocate memory\n");

53 
cgroup_m¡
->
cgroup2
 = cgroup2;

57 
	`log_îr
("fio: cgroup blkio doesÇotáppearÅo be mounted\n");

60 
	`ídm¡ít
(
f
);

61  
cgroup_m¡
;

62 
	}
}

64 
	$add_cgroup
(
thªad_d©a
 *
td
, c⁄° *
«me
,

65 
Êi°_hód
 *
˛i°
)

67 
cgroup_membî
 *
cm
;

69 i‡(!
lock
)

72 
cm
 = 
	`smÆloc
((*cm));

73 i‡(!
cm
) {

74 
îr
:

75 
	`log_îr
("fio: failedÅoállocate cgroup member\n");

79 
	`INIT_FLIST_HEAD
(&
cm
->
li°
);

80 
cm
->
roŸ
 = 
	`smÆloc_°rdup
(
«me
);

81 i‡(!
cm
->
roŸ
) {

82 
	`s‰ì
(
cm
);

83 
îr
;

85 i‡(
td
->
o
.
cgroup_nodñëe
)

86 
cm
->
cgroup_nodñëe
 = 1;

87 
	`fio_£m_down
(
lock
);

88 
	`Êi°_add_èû
(&
cm
->
li°
, 
˛i°
);

89 
	`fio_£m_up
(
lock
);

90 
	}
}

92 
	$cgroup_kûl
(
Êi°_hód
 *
˛i°
)

94 
Êi°_hód
 *
n
, *
tmp
;

95 
cgroup_membî
 *
cm
;

97 i‡(!
lock
)

100 
	`fio_£m_down
(
lock
);

102 
	`Êi°_f‹_óch_ß„
(
n
, 
tmp
, 
˛i°
) {

103 
cm
 = 
	`Êi°_íåy
(
n
, 
cgroup_membî
, 
li°
);

104 i‡(!
cm
->
cgroup_nodñëe
)

105 
	`rmdú
(
cm
->
roŸ
);

106 
	`Êi°_dñ
(&
cm
->
li°
);

107 
	`s‰ì
(
cm
->
roŸ
);

108 
	`s‰ì
(
cm
);

111 
	`fio_£m_up
(
lock
);

112 
	}
}

114 *
	$gë_cgroup_roŸ
(
thªad_d©a
 *
td
, 
cgroup_m¡
 *
m¡
)

116 *
°r
 = 
	`mÆloc
(64);

118 i‡(
td
->
o
.
cgroup
)

119 
	`•rötf
(
°r
, "%s/%s", 
m¡
->
∑th
, 
td
->
o
.
cgroup
);

121 
	`•rötf
(
°r
, "%s/%s", 
m¡
->
∑th
, 
td
->
o
.
«me
);

123  
°r
;

124 
	}
}

126 
	$wrôe_öt_to_fûe
(
thªad_d©a
 *
td
, c⁄° *
∑th
,

127 c⁄° *
fûíame
, 
vÆ
,

128 c⁄° *
⁄îr
)

130 
tmp
[256];

131 
FILE
 *
f
;

133 
	`•rötf
(
tmp
, "%s/%s", 
∑th
, 
fûíame
);

134 
f
 = 
	`f›í
(
tmp
, "w");

135 i‡(!
f
) {

136 
	`td_vîr‹
(
td
, 
î∫o
, 
⁄îr
);

140 
	`Ârötf
(
f
, "%u", 
vÆ
);

141 
	`f˛o£
(
f
);

144 
	}
}

146 
	$cgroup_wrôe_pid
(
thªad_d©a
 *
td
, *
∑th
, 
boﬁ
 
cgroup2
)

148 
vÆ
 = 
td
->
pid
;

150 i‡(
cgroup2
)

151  
	`wrôe_öt_to_fûe
(
td
, 
∑th
, "cgroup.procs",

152 
vÆ
, "cgroup writeÖid");

153  
	`wrôe_öt_to_fûe
(
td
, 
∑th
, "èsks", 
vÆ
, "cgroup writeÖid");

154 
	}
}

159 
	$cgroup_dñ_pid
(
thªad_d©a
 *
td
, 
cgroup_m¡
 *
m¡
)

161  
	`cgroup_wrôe_pid
(
td
, 
m¡
->
∑th
, m¡->
cgroup2
);

162 
	}
}

164 
	$cgroup_£tup
(
thªad_d©a
 *
td
, 
Êi°_hód
 *
˛i°
, 
cgroup_m¡
 **
m¡
)

166 *
roŸ
;

168 i‡(!
˛i°
)

171 i‡(!*
m¡
) {

172 *
m¡
 = 
	`föd_cgroup_m¡
(
td
);

173 i‡(!*
m¡
)

180 
roŸ
 = 
	`gë_cgroup_roŸ
(
td
, *
m¡
);

181 i‡(
	`mkdú
(
roŸ
, 0755) < 0) {

182 
__e
 = 
î∫o
;

184 i‡(
__e
 !
EEXIST
) {

185 
	`td_vîr‹
(
td
, 
__e
, "cgroup mkdir");

186 
	`log_îr
("fio:Ö©h %s\n", 
roŸ
);

187 
îr
;

190 
	`add_cgroup
(
td
, 
roŸ
, 
˛i°
);

192 i‡(
td
->
o
.
cgroup_weight
) {

193 i‡((*
m¡
)->
cgroup2
) {

194 
	`log_îr
("fio: cgroup weit doesn't work with cgroup2\n");

195 
îr
;

197 i‡(
	`wrôe_öt_to_fûe
(
td
, 
roŸ
, "blkio.weight",

198 
td
->
o
.
cgroup_weight
,

200 
îr
;

203 i‡(!
	`cgroup_wrôe_pid
(
td
, 
roŸ
, (*
m¡
)->
cgroup2
)) {

204 
	`‰ì
(
roŸ
);

208 
îr
:

209 
	`‰ì
(
roŸ
);

211 
	}
}

213 
	$cgroup_shutdown
(
thªad_d©a
 *
td
, 
cgroup_m¡
 *
m¡
)

215 i‡(
m¡
 =
NULL
)

217 i‡(!
td
->
o
.
cgroup_weight
 && !td->o.
cgroup
)

218 
out
;

220 
	`cgroup_dñ_pid
(
td
, 
m¡
);

221 
out
:

222 i‡(
m¡
->
∑th
)

223 
	`s‰ì
(
m¡
->
∑th
);

224 
	`s‰ì
(
m¡
);

225 
	}
}

227 
fio_öô
 
	$cgroup_öô
()

229 
lock
 = 
	`fio_£m_öô
(
FIO_SEM_UNLOCKED
);

230 i‡(!
lock
)

231 
	`log_îr
("fio: failedÅoállocate cgroupÜock\n");

232 
	}
}

234 
fio_exô
 
	$cgroup_exô
()

236 
	`fio_£m_ªmove
(
lock
);

237 
	}
}

	@cgroup.h

1 #i‚de‡
FIO_CGROUP_H


2 
	#FIO_CGROUP_H


	)

4 #ifde‡
FIO_HAVE_CGROUPS


6 
	scgroup_m¡
 {

7 *
	m∑th
;

8 
boﬁ
 
	mcgroup2
;

11 
cgroup_£tup
(
thªad_d©a
 *, 
Êi°_hód
 *, 
cgroup_m¡
 **);

12 
cgroup_shutdown
(
thªad_d©a
 *, 
cgroup_m¡
 *);

14 
cgroup_kûl
(
Êi°_hód
 *
li°
);

18 
	gcgroup_m¡
;

20 
ölöe
 
	$cgroup_£tup
(
thªad_d©a
 *
td
, 
Êi°_hód
 *
li°
,

21 
cgroup_m¡
 **
m¡
)

23 
	`td_vîr‹
(
td
, 
EINVAL
, "cgroup_setup");

25 
	}
}

27 
ölöe
 
	$cgroup_shutdown
(
thªad_d©a
 *
td
, 
cgroup_m¡
 *
m¡
)

29 
	}
}

31 
ölöe
 
	$cgroup_kûl
(
Êi°_hód
 *
li°
)

33 
	}
}

	@client.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<uni°d.h
>

4 
	~<î∫o.h
>

5 
	~<f˙é.h
>

6 
	~<pﬁl.h
>

7 
	~<sys/ty≥s.h
>

8 
	~<sys/°©.h
>

9 
	~<sys/sockë.h
>

10 
	~<sys/un.h
>

11 
	~<√töë/ö.h
>

12 
	~<¨∑/öë.h
>

13 
	~<√tdb.h
>

14 
	~<sig«l.h
>

15 #ifde‡
CONFIG_ZLIB


16 
	~<zlib.h
>

19 
	~"fio.h
"

20 
	~"˛õ¡.h
"

21 
	~"£rvî.h
"

22 
	~"Êi°.h
"

23 
	~"hash.h
"

24 
	~"vîify-°©e.h
"

26 
h™dÀ_du
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
);

27 
h™dÀ_ts
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
);

28 
h™dÀ_gs
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
);

29 
h™dÀ_¥obe
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
);

30 
h™dÀ_ãxt
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
);

31 
h™dÀ_°›
(
fio_˛õ¡
 *
˛õ¡
);

32 
h™dÀ_°¨t
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
);

34 
c⁄vît_ãxt
(
fio_√t_cmd
 *
cmd
);

35 
˛õ¡_di•œy_thªad_°©us
(
jobs_ëa
 *
je
);

37 
˛õ¡_›s
 
	gfio_˛õ¡_›s
 = {

38 .
ãxt
 = 
h™dÀ_ãxt
,

39 .
	gdisk_utû
 = 
h™dÀ_du
,

40 .
	gthªad_°©us
 = 
h™dÀ_ts
,

41 .
	ggroup_°©s
 = 
h™dÀ_gs
,

42 .
	g°›
 = 
h™dÀ_°›
,

43 .
	g°¨t
 = 
h™dÀ_°¨t
,

44 .
	gëa
 = 
˛õ¡_di•œy_thªad_°©us
,

45 .
	g¥obe
 = 
h™dÀ_¥obe
,

46 .
	gëa_m£c
 = 
FIO_CLIENT_DEF_ETA_MSEC
,

47 .
	g˛õ¡_ty≥
 = 
FIO_CLIENT_TYPE_CLI
,

50 
time•ec
 
	gëa_ts
;

52 
FLIST_HEAD
(
˛õ¡_li°
);

53 
FLIST_HEAD
(
ëa_li°
);

55 
FLIST_HEAD
(
¨g_li°
);

57 
thªad_°©
 
	g˛õ¡_ts
;

58 
group_run_°©s
 
	g˛õ¡_gs
;

59 
	gsum_°©_˛õ¡s
;

61 
	gsum_°©_ƒ
;

62 
buf_ouçut
 
	gÆl˛õ¡s
;

63 
js⁄_obje˘
 *
	groŸ
 = 
NULL
;

64 
js⁄_obje˘
 *
	gjob_›t_obje˘
 = 
NULL
;

65 
js⁄_¨øy
 *
	g˛õ¡s_¨øy
 = 
NULL
;

66 
js⁄_¨øy
 *
	gdu_¨øy
 = 
NULL
;

68 
	gîr‹_˛õ¡s
;

70 
	#FIO_CLIENT_HASH_BITS
 7

	)

71 
	#FIO_CLIENT_HASH_SZ
 (1 << 
FIO_CLIENT_HASH_BITS
)

	)

72 
	#FIO_CLIENT_HASH_MASK
 (
FIO_CLIENT_HASH_SZ
 - 1)

	)

73 
Êi°_hód
 
	g˛õ¡_hash
[
FIO_CLIENT_HASH_SZ
];

75 
cmd_iﬁog_pdu
 *
c⁄vît_iﬁog
(
fio_√t_cmd
 *, 
boﬁ
 *);

77 
	$fio_˛õ¡_add_hash
(
fio_˛õ¡
 *
˛õ¡
)

79 
buckë
 = 
	`hash_l⁄g
(
˛õ¡
->
fd
, 
FIO_CLIENT_HASH_BITS
);

81 
buckë
 &
FIO_CLIENT_HASH_MASK
;

82 
	`Êi°_add
(&
˛õ¡
->
hash_li°
, &
˛õ¡_hash
[
buckë
]);

83 
	}
}

85 
	$fio_˛õ¡_ªmove_hash
(
fio_˛õ¡
 *
˛õ¡
)

87 i‡(!
	`Êi°_em±y
(&
˛õ¡
->
hash_li°
))

88 
	`Êi°_dñ_öô
(&
˛õ¡
->
hash_li°
);

89 
	}
}

91 
fio_öô
 
	$fio_˛õ¡_hash_öô
()

93 
i
;

95 
i
 = 0; i < 
FIO_CLIENT_HASH_SZ
; i++)

96 
	`INIT_FLIST_HEAD
(&
˛õ¡_hash
[
i
]);

97 
	}
}

99 
	$ªad_d©a
(
fd
, *
d©a
, 
size_t
 
size
)

101 
ssize_t
 
ªt
;

103 
size
) {

104 
ªt
 = 
	`ªad
(
fd
, 
d©a
, 
size
);

105 i‡(
ªt
 < 0) {

106 i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EINTR
)

109 } i‡(!
ªt
)

112 
d©a
 +
ªt
;

113 
size
 -
ªt
;

117 i‡(
size
)

118  
EAGAIN
;

121 
	}
}

123 
	$ªad_öi_d©a
(
fd
, *
d©a
, 
size_t
 
size
)

125 *
p
 = 
d©a
;

126 
ªt
 = 0;

127 
FILE
 *
Â
;

128 
dupfd
;

130 
dupfd
 = 
	`dup
(
fd
);

131 i‡(
dupfd
 < 0)

132  
î∫o
;

134 
Â
 = 
	`fd›í
(
dupfd
, "r");

135 i‡(!
Â
) {

136 
ªt
 = 
î∫o
;

137 
	`˛o£
(
dupfd
);

138 
out
;

142 
ssize_t
 
Àn
;

143 
buf
[
OPT_LEN_MAX
+1], *
sub
;

145 i‡(!
	`fgës
(
buf
, (buf), 
Â
)) {

146 i‡(
	`„º‹
(
Â
)) {

147 i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EINTR
)

149 
ªt
 = 
î∫o
;

154 
sub
 = 
	`fio_›ti⁄_dup_subs
(
buf
);

155 
Àn
 = 
	`°æí
(
sub
);

156 i‡(
Àn
 + 1 > 
size
) {

157 
	`log_îr
("fio:Ço spaceÜeftÅoÑead data\n");

158 
	`‰ì
(
sub
);

159 
ªt
 = 
ENOSPC
;

163 
	`mem˝y
(
p
, 
sub
, 
Àn
);

164 
	`‰ì
(
sub
);

165 
p
 +
Àn
;

166 *
p
 = '\0';

167 
size
 -
Àn
;

170 
	`f˛o£
(
Â
);

171 
out
:

172  
ªt
;

173 
	}
}

175 
	$fio_˛õ¡_js⁄_öô
()

177 
time_buf
[32];

178 
time_t
 
time_p
;

180 i‡(!(
ouçut_f‹m©
 & 
FIO_OUTPUT_JSON
))

183 
	`time
(&
time_p
);

184 
	`os_˘ime_r
((c⁄° 
time_t
 *Ë&
time_p
, 
time_buf
, (time_buf));

185 
time_buf
[
	`°æí
(time_buf) - 1] = '\0';

187 
roŸ
 = 
	`js⁄_¸óã_obje˘
();

188 
	`js⁄_obje˘_add_vÆue_°rög
(
roŸ
, "fiÿvîsi⁄", 
fio_vîsi⁄_°rög
);

189 
	`js⁄_obje˘_add_vÆue_öt
(
roŸ
, "time°amp", 
time_p
);

190 
	`js⁄_obje˘_add_vÆue_°rög
(
roŸ
, "time", 
time_buf
);

192 
job_›t_obje˘
 = 
	`js⁄_¸óã_obje˘
();

193 
	`js⁄_obje˘_add_vÆue_obje˘
(
roŸ
, "globÆ o±i⁄s", 
job_›t_obje˘
);

194 
˛õ¡s_¨øy
 = 
	`js⁄_¸óã_¨øy
();

195 
	`js⁄_obje˘_add_vÆue_¨øy
(
roŸ
, "˛õ¡_°©s", 
˛õ¡s_¨øy
);

196 
du_¨øy
 = 
	`js⁄_¸óã_¨øy
();

197 
	`js⁄_obje˘_add_vÆue_¨øy
(
roŸ
, "disk_utû", 
du_¨øy
);

198 
	}
}

200 
	$fio_˛õ¡_js⁄_föi
()

202 
buf_ouçut
 
out
;

204 i‡(!
roŸ
)

207 
	`buf_ouçut_öô
(&
out
);

209 
	`__log_buf
(&
out
, "\n");

210 
	`js⁄_¥öt_obje˘
(
roŸ
, &
out
);

211 
	`__log_buf
(&
out
, "\n");

212 
	`log_öfo_buf
(
out
.
buf
, out.
buÊí
);

214 
	`buf_ouçut_‰ì
(&
out
);

216 
	`js⁄_‰ì_obje˘
(
roŸ
);

217 
roŸ
 = 
NULL
;

218 
job_›t_obje˘
 = 
NULL
;

219 
˛õ¡s_¨øy
 = 
NULL
;

220 
du_¨øy
 = 
NULL
;

221 
	}
}

223 
fio_˛õ¡
 *
	$föd_˛õ¡_by_fd
(
fd
)

225 
buckë
 = 
	`hash_l⁄g
(
fd
, 
FIO_CLIENT_HASH_BITS
Ë& 
FIO_CLIENT_HASH_MASK
;

226 
fio_˛õ¡
 *
˛õ¡
;

227 
Êi°_hód
 *
íåy
;

229 
	`Êi°_f‹_óch
(
íåy
, &
˛õ¡_hash
[
buckë
]) {

230 
˛õ¡
 = 
	`Êi°_íåy
(
íåy
, 
fio_˛õ¡
, 
hash_li°
);

232 i‡(
˛õ¡
->
fd
 == fd) {

233 
˛õ¡
->
ªfs
++;

234  
˛õ¡
;

238  
NULL
;

239 
	}
}

241 
	$fio_put_˛õ¡
(
fio_˛õ¡
 *
˛õ¡
)

243 i‡(--
˛õ¡
->
ªfs
)

246 
	`log_öfo_buf
(
˛õ¡
->
buf
.buf, clõ¡->buf.
buÊí
);

247 
	`buf_ouçut_‰ì
(&
˛õ¡
->
buf
);

249 
	`‰ì
(
˛õ¡
->
ho°«me
);

250 i‡(
˛õ¡
->
¨gv
)

251 
	`‰ì
(
˛õ¡
->
¨gv
);

252 i‡(
˛õ¡
->
«me
)

253 
	`‰ì
(
˛õ¡
->
«me
);

254 
˛õ¡
->
ƒ_fûes
) {

255 
˛õ¡_fûe
 *
cf
 = &
˛õ¡
->
fûes
[--˛õ¡->
ƒ_fûes
];

257 
	`‰ì
(
cf
->
fûe
);

259 i‡(
˛õ¡
->
fûes
)

260 
	`‰ì
(
˛õ¡
->
fûes
);

261 i‡(
˛õ¡
->
›t_li°s
)

262 
	`‰ì
(
˛õ¡
->
›t_li°s
);

264 i‡(!
˛õ¡
->
did_°©
)

265 
sum_°©_˛õ¡s
--;

267 i‡(
˛õ¡
->
îr‹
)

268 
îr‹_˛õ¡s
++;

270 
	`‰ì
(
˛õ¡
);

271 
	}
}

273 
	$fio_˛õ¡_dec_jobs_ëa
(
˛õ¡_ëa
 *
ëa
, 
˛õ¡_ëa_›
 
ëa_‚
)

275 i‡(!--
ëa
->
≥ndög
) {

276 
	`ëa_‚
(&
ëa
->eta);

277 
	`‰ì
(
ëa
);

282 
	}
}

284 
	$fio_døö_˛õ¡_ãxt
(
fio_˛õ¡
 *
˛õ¡
)

287 
fio_√t_cmd
 *
cmd
 = 
NULL
;

289 i‡(
	`fio_£rvî_pﬁl_fd
(
˛õ¡
->
fd
, 
POLLIN
, 0))

290 
cmd
 = 
	`fio_√t_ªcv_cmd
(
˛õ¡
->
fd
, 
Ál£
);

291 i‡(!
cmd
)

294 i‡(
cmd
->
›code
 =
FIO_NET_CMD_TEXT
) {

295 
	`c⁄vît_ãxt
(
cmd
);

296 
˛õ¡
->
›s
->
	`ãxt
(˛õ¡, 
cmd
);

299 
	`‰ì
(
cmd
);

301 
	}
}

303 
	$ªmove_˛õ¡
(
fio_˛õ¡
 *
˛õ¡
)

305 
	`as£π
(
˛õ¡
->
ªfs
);

307 
	`d¥öt
(
FD_NET
, "˛õ¡:Ñemoved <%s>\n", 
˛õ¡
->
ho°«me
);

309 
	`fio_døö_˛õ¡_ãxt
(
˛õ¡
);

311 i‡(!
	`Êi°_em±y
(&
˛õ¡
->
li°
))

312 
	`Êi°_dñ_öô
(&
˛õ¡
->
li°
);

314 
	`fio_˛õ¡_ªmove_hash
(
˛õ¡
);

316 i‡(!
	`Êi°_em±y
(&
˛õ¡
->
ëa_li°
)) {

317 
	`Êi°_dñ_öô
(&
˛õ¡
->
ëa_li°
);

318 
	`fio_˛õ¡_dec_jobs_ëa
(
˛õ¡
->
ëa_ö_Êight
, clõ¡->
›s
->
ëa
);

321 
	`˛o£
(
˛õ¡
->
fd
);

322 
˛õ¡
->
fd
 = -1;

324 i‡(
˛õ¡
->
›s
->
ªmoved
)

325 
˛õ¡
->
›s
->
	`ªmoved
(client);

327 
ƒ_˛õ¡s
--;

328 
	`fio_put_˛õ¡
(
˛õ¡
);

329 
	}
}

331 
fio_˛õ¡
 *
	$fio_gë_˛õ¡
(
fio_˛õ¡
 *
˛õ¡
)

333 
˛õ¡
->
ªfs
++;

334  
˛õ¡
;

335 
	}
}

337 
	$__fio_˛õ¡_add_cmd_›ti⁄
(
fio_˛õ¡
 *
˛õ¡
,

338 c⁄° *
›t
)

340 
ödex
;

342 
ödex
 = 
˛õ¡
->
¨gc
++;

343 
˛õ¡
->
¨gv
 = 
	`ªÆloc
(˛õ¡->¨gv, (*Ë* clõ¡->
¨gc
);

344 
˛õ¡
->
¨gv
[
ödex
] = 
	`°rdup
(
›t
);

345 
	`d¥öt
(
FD_NET
, "˛õ¡:ádd cmd %d: %s\n", 
ödex
, 
›t
);

346 
	}
}

348 
	$fio_˛õ¡_add_cmd_›ti⁄
(*
cookõ
, c⁄° *
›t
)

350 
fio_˛õ¡
 *
˛õ¡
 = 
cookõ
;

351 
Êi°_hód
 *
íåy
;

353 i‡(!
˛õ¡
 || !
›t
)

356 
	`__fio_˛õ¡_add_cmd_›ti⁄
(
˛õ¡
, 
›t
);

361 
	`Êi°_f‹_óch
(
íåy
, &
¨g_li°
) {

362 
˛õ¡
 = 
	`Êi°_íåy
(
íåy
, 
fio_˛õ¡
, 
¨g_li°
);

364 
	`__fio_˛õ¡_add_cmd_›ti⁄
(
˛õ¡
, 
›t
);

366 
	}
}

368 
fio_˛õ¡
 *
	$gë_√w_˛õ¡
()

370 
fio_˛õ¡
 *
˛õ¡
;

372 
˛õ¡
 = 
	`mÆloc
((*client));

373 
	`mem£t
(
˛õ¡
, 0, (*client));

375 
	`INIT_FLIST_HEAD
(&
˛õ¡
->
li°
);

376 
	`INIT_FLIST_HEAD
(&
˛õ¡
->
hash_li°
);

377 
	`INIT_FLIST_HEAD
(&
˛õ¡
->
¨g_li°
);

378 
	`INIT_FLIST_HEAD
(&
˛õ¡
->
ëa_li°
);

379 
	`INIT_FLIST_HEAD
(&
˛õ¡
->
cmd_li°
);

381 
	`buf_ouçut_öô
(&
˛õ¡
->
buf
);

383  
˛õ¡
;

384 
	}
}

386 
fio_˛õ¡
 *
	$fio_˛õ¡_add_ex∂icô
(
˛õ¡_›s
 *
›s
,

387 c⁄° *
ho°«me
, 
ty≥
,

388 
p‹t
)

390 
fio_˛õ¡
 *
˛õ¡
;

392 
˛õ¡
 = 
	`gë_√w_˛õ¡
();

394 i‡(
ty≥
 =
Fio_˛õ¡_sockë
)

395 
˛õ¡
->
is_sock
 = 
åue
;

397 
ùv6
;

399 
ùv6
 = 
ty≥
 =
Fio_˛õ¡_ùv6
;

400 i‡(
	`fio_£rvî_∑r£_ho°
(
ho°«me
, 
ùv6
,

401 &
˛õ¡
->
addr
.
sö_addr
,

402 &
˛õ¡
->
addr6
.
sö6_addr
))

403 
îr
;

405 
˛õ¡
->
p‹t
 =Öort;

408 
˛õ¡
->
fd
 = -1;

409 
˛õ¡
->
›s
 = ops;

410 
˛õ¡
->
ªfs
 = 1;

411 
˛õ¡
->
ty≥
 = 
›s
->
˛õ¡_ty≥
;

412 
˛õ¡
->
ho°«me
 = 
	`°rdup
(hostname);

414 
	`__fio_˛õ¡_add_cmd_›ti⁄
(
˛õ¡
, "fio");

416 
	`Êi°_add
(&
˛õ¡
->
li°
, &
˛õ¡_li°
);

417 
ƒ_˛õ¡s
++;

418 
	`d¥öt
(
FD_NET
, "˛õ¡:ádded <%s>\n", 
˛õ¡
->
ho°«me
);

419  
˛õ¡
;

420 
îr
:

421 
	`‰ì
(
˛õ¡
);

422  
NULL
;

423 
	}
}

425 
	$fio_˛õ¡_add_öi_fûe
(*
cookõ
, c⁄° *
öi_fûe
, 
boﬁ
 
ªmŸe
)

427 
fio_˛õ¡
 *
˛õ¡
 = 
cookõ
;

428 
˛õ¡_fûe
 *
cf
;

429 
size_t
 
√w_size
;

430 *
√w_fûes
;

432 i‡(!
˛õ¡
)

435 
	`d¥öt
(
FD_NET
, "˛õ¡ <%s>:ádd inò%s\n", 
˛õ¡
->
ho°«me
, 
öi_fûe
);

437 
√w_size
 = (
˛õ¡
->
ƒ_fûes
 + 1Ë* (
˛õ¡_fûe
);

438 
√w_fûes
 = 
	`ªÆloc
(
˛õ¡
->
fûes
, 
√w_size
);

439 i‡(!
√w_fûes
)

442 
˛õ¡
->
fûes
 = 
√w_fûes
;

443 
cf
 = &
˛õ¡
->
fûes
[˛õ¡->
ƒ_fûes
];

444 
cf
->
fûe
 = 
	`°rdup
(
öi_fûe
);

445 
cf
->
ªmŸe
 =Ñemote;

446 
˛õ¡
->
ƒ_fûes
++;

448 
	}
}

450 
	$fio_˛õ¡_add
(
˛õ¡_›s
 *
›s
, c⁄° *
ho°«me
, **
cookõ
)

452 
fio_˛õ¡
 *
exi°ög
 = *
cookõ
;

453 
fio_˛õ¡
 *
˛õ¡
;

455 i‡(
exi°ög
) {

460 i‡(
exi°ög
->
¨gc
 == 1)

461 
	`Êi°_add_èû
(&
exi°ög
->
¨g_li°
, &arg_list);

463 !
	`Êi°_em±y
(&
¨g_li°
))

464 
	`Êi°_dñ_öô
(
¨g_li°
.
√xt
);

468 
˛õ¡
 = 
	`gë_√w_˛õ¡
();

470 i‡(
	`fio_£rvî_∑r£_°rög
(
ho°«me
, &
˛õ¡
->hostname,

471 &
˛õ¡
->
is_sock
, &˛õ¡->
p‹t
,

472 &
˛õ¡
->
addr
.
sö_addr
,

473 &
˛õ¡
->
addr6
.
sö6_addr
,

474 &
˛õ¡
->
ùv6
)) {

475 
	`fio_put_˛õ¡
(
˛õ¡
);

479 
˛õ¡
->
fd
 = -1;

480 
˛õ¡
->
›s
 = ops;

481 
˛õ¡
->
ªfs
 = 1;

482 
˛õ¡
->
ty≥
 = 
›s
->
˛õ¡_ty≥
;

484 
	`__fio_˛õ¡_add_cmd_›ti⁄
(
˛õ¡
, "fio");

486 
	`Êi°_add
(&
˛õ¡
->
li°
, &
˛õ¡_li°
);

487 
ƒ_˛õ¡s
++;

488 
	`d¥öt
(
FD_NET
, "˛õ¡:ádded <%s>\n", 
˛õ¡
->
ho°«me
);

489 *
cookõ
 = 
˛õ¡
;

491 
	}
}

493 c⁄° *
	$£rvî_«me
(
fio_˛õ¡
 *
˛õ¡
, *
buf
,

494 
size_t
 
bufsize
)

496 c⁄° *
‰om
;

498 i‡(
˛õ¡
->
ùv6
)

499 
‰om
 = 
	`öë_¡›
(
AF_INET6
, (
sockaddr
 *Ë&
˛õ¡
->
addr6
.
sö6_addr
, 
buf
, 
bufsize
);

500 i‡(
˛õ¡
->
is_sock
)

501 
‰om
 = "sock";

503 
‰om
 = 
	`öë_¡›
(
AF_INET
, (
sockaddr
 *Ë&
˛õ¡
->
addr
.
sö_addr
, 
buf
, 
bufsize
);

505  
‰om
;

506 
	}
}

508 
	$¥obe_˛õ¡
(
fio_˛õ¡
 *
˛õ¡
)

510 
cmd_˛õ¡_¥obe_pdu
 
pdu
;

511 c⁄° *
¢ame
;

512 
uöt64_t
 
èg
;

513 
buf
[64];

515 
	`d¥öt
(
FD_NET
, "client: sendÖrobe\n");

517 #ifde‡
CONFIG_ZLIB


518 
pdu
.
Êags
 = 
	`__À64_to_˝u
(
FIO_PROBE_FLAG_ZLIB
);

520 
pdu
.
Êags
 = 0;

523 
¢ame
 = 
	`£rvî_«me
(
˛õ¡
, 
buf
, (buf));

524 
	`mem£t
(
pdu
.
£rvî
, 0, (pdu.server));

525 
	`¢¥ötf
((*Ë
pdu
.
£rvî
, ’du.£rvî), "%s", 
¢ame
);

527 
	`fio_√t_£nd_cmd
(
˛õ¡
->
fd
, 
FIO_NET_CMD_PROBE
, &
pdu
, ’du), &
èg
, &˛õ¡->
cmd_li°
);

528 
	}
}

530 
	$fio_˛õ¡_c⁄√˘_ù
(
fio_˛õ¡
 *
˛õ¡
)

532 
sockaddr
 *
addr
;

533 
sockÀn_t
 
sockÀn
;

534 
fd
, 
domaö
;

536 i‡(
˛õ¡
->
ùv6
) {

537 
˛õ¡
->
addr6
.
sö6_Ámûy
 = 
AF_INET6
;

538 
˛õ¡
->
addr6
.
sö6_p‹t
 = 
	`ht⁄s
(˛õ¡->
p‹t
);

539 
domaö
 = 
AF_INET6
;

540 
addr
 = (
sockaddr
 *Ë&
˛õ¡
->
addr6
;

541 
sockÀn
 = (
˛õ¡
->
addr6
);

543 
˛õ¡
->
addr
.
sö_Ámûy
 = 
AF_INET
;

544 
˛õ¡
->
addr
.
sö_p‹t
 = 
	`ht⁄s
(˛õ¡->
p‹t
);

545 
domaö
 = 
AF_INET
;

546 
addr
 = (
sockaddr
 *Ë&
˛õ¡
->addr;

547 
sockÀn
 = (
˛õ¡
->
addr
);

550 
fd
 = 
	`sockë
(
domaö
, 
SOCK_STREAM
, 0);

551 i‡(
fd
 < 0) {

552 
ªt
 = -
î∫o
;

554 
	`log_îr
("fio: sockë: %s\n", 
	`°ªº‹
(
î∫o
));

555  
ªt
;

558 i‡(
	`c⁄√˘
(
fd
, 
addr
, 
sockÀn
) < 0) {

559 
ªt
 = -
î∫o
;

561 
	`log_îr
("fio: c⁄√˘: %s\n", 
	`°ªº‹
(
î∫o
));

562 
	`log_îr
("fio: faûedÅÿc⁄√˘Åÿ%s:%u\n", 
˛õ¡
->
ho°«me
,

563 
˛õ¡
->
p‹t
);

564 
	`˛o£
(
fd
);

565  
ªt
;

568  
fd
;

569 
	}
}

571 
	$fio_˛õ¡_c⁄√˘_sock
(
fio_˛õ¡
 *
˛õ¡
)

573 
sockaddr_un
 *
addr
 = &
˛õ¡
->
addr_un
;

574 
sockÀn_t
 
Àn
;

575 
fd
;

577 
	`mem£t
(
addr
, 0, (*addr));

578 
addr
->
sun_Ámûy
 = 
AF_UNIX
;

579 
	`¢¥ötf
(
addr
->
sun_∑th
, (addr->sun_path), "%s",

580 
˛õ¡
->
ho°«me
);

582 
fd
 = 
	`sockë
(
AF_UNIX
, 
SOCK_STREAM
, 0);

583 i‡(
fd
 < 0) {

584 
ªt
 = -
î∫o
;

586 
	`log_îr
("fio: sockë: %s\n", 
	`°ªº‹
(
î∫o
));

587  
ªt
;

590 
Àn
 = (
addr
->
sun_Ámûy
Ë+ 
	`°æí
◊ddr->
sun_∑th
) + 1;

591 i‡(
	`c⁄√˘
(
fd
, (
sockaddr
 *Ë
addr
, 
Àn
) < 0) {

592 
ªt
 = -
î∫o
;

594 
	`log_îr
("fio: c⁄√˘; %s\n", 
	`°ªº‹
(
î∫o
));

595 
	`˛o£
(
fd
);

596  
ªt
;

599  
fd
;

600 
	}
}

602 
	$fio_˛õ¡_c⁄√˘
(
fio_˛õ¡
 *
˛õ¡
)

604 
fd
;

606 
	`d¥öt
(
FD_NET
, "˛õ¡: c⁄√˘Åÿho° %s\n", 
˛õ¡
->
ho°«me
);

608 i‡(
˛õ¡
->
is_sock
)

609 
fd
 = 
	`fio_˛õ¡_c⁄√˘_sock
(
˛õ¡
);

611 
fd
 = 
	`fio_˛õ¡_c⁄√˘_ù
(
˛õ¡
);

613 
	`d¥öt
(
FD_NET
, "˛õ¡: %†c⁄√˘ed %d\n", 
˛õ¡
->
ho°«me
, 
fd
);

615 i‡(
fd
 < 0)

616  
fd
;

618 
˛õ¡
->
fd
 = fd;

619 
	`fio_˛õ¡_add_hash
(
˛õ¡
);

620 
˛õ¡
->
°©e
 = 
Clõ¡_c⁄√˘ed
;

622 
	`¥obe_˛õ¡
(
˛õ¡
);

624 
	}
}

626 
	$fio_˛õ¡_ãrmö©e
(
fio_˛õ¡
 *
˛õ¡
)

628  
	`fio_√t_£nd_quô
(
˛õ¡
->
fd
);

629 
	}
}

631 
	$fio_˛õ¡s_ãrmö©e
()

633 
Êi°_hód
 *
íåy
;

634 
fio_˛õ¡
 *
˛õ¡
;

636 
	`d¥öt
(
FD_NET
, "client:Åerminate clients\n");

638 
	`Êi°_f‹_óch
(
íåy
, &
˛õ¡_li°
) {

639 
˛õ¡
 = 
	`Êi°_íåy
(
íåy
, 
fio_˛õ¡
, 
li°
);

640 
	`fio_˛õ¡_ãrmö©e
(
˛õ¡
);

642 
	}
}

644 
	$sig_öt
(
sig
)

646 
	`d¥öt
(
FD_NET
, "˛õ¡: gŸ sig«»%d\n", 
sig
);

647 
	`fio_˛õ¡s_ãrmö©e
();

648 
	}
}

650 
	$˛õ¡_sig«l_h™dÀr
()

652 
siga˘i⁄
 
a˘
;

654 
	`mem£t
(&
a˘
, 0, (act));

655 
a˘
.
ß_h™dÀr
 = 
sig_öt
;

656 
a˘
.
ß_Êags
 = 
SA_RESTART
;

657 
	`siga˘i⁄
(
SIGINT
, &
a˘
, 
NULL
);

659 
	`mem£t
(&
a˘
, 0, (act));

660 
a˘
.
ß_h™dÀr
 = 
sig_öt
;

661 
a˘
.
ß_Êags
 = 
SA_RESTART
;

662 
	`siga˘i⁄
(
SIGTERM
, &
a˘
, 
NULL
);

665 #ifde‡
WIN32


666 
	`mem£t
(&
a˘
, 0, (act));

667 
a˘
.
ß_h™dÀr
 = 
sig_öt
;

668 
a˘
.
ß_Êags
 = 
SA_RESTART
;

669 
	`siga˘i⁄
(
SIGBREAK
, &
a˘
, 
NULL
);

672 
	`mem£t
(&
a˘
, 0, (act));

673 
a˘
.
ß_h™dÀr
 = 
sig_show_°©us
;

674 
a˘
.
ß_Êags
 = 
SA_RESTART
;

675 
	`siga˘i⁄
(
SIGUSR1
, &
a˘
, 
NULL
);

676 
	}
}

678 
	$£nd_˛õ¡_cmd_löe
(
fio_˛õ¡
 *
˛õ¡
)

680 
cmd_sögÀ_löe_pdu
 *
c¶p
;

681 
cmd_löe_pdu
 *
˛p
;

682 
off£t
;

683 *
Àns
;

684 *
pdu
;

685 
size_t
 
mem
;

686 
i
, 
ªt
;

688 
	`d¥öt
(
FD_NET
, "˛õ¡: síd cmdlöê%d\n", 
˛õ¡
->
¨gc
);

690 
Àns
 = 
	`mÆloc
(
˛õ¡
->
¨gc
 * ());

695 
i
 = 0, 
mem
 = 0; i < 
˛õ¡
->
¨gc
; i++) {

696 
Àns
[
i
] = 
	`°æí
(
˛õ¡
->
¨gv
[i]) + 1;

697 
mem
 +
Àns
[
i
];

703 
mem
 +(*
˛p
Ë+ (
˛õ¡
->
¨gc
 * (*
c¶p
));

705 
pdu
 = 
	`mÆloc
(
mem
);

706 
˛p
 = 
pdu
;

707 
off£t
 = (*
˛p
);

709 
i
 = 0; i < 
˛õ¡
->
¨gc
; i++) {

710 
uöt16_t
 
¨g_Àn
 = 
Àns
[
i
];

712 
c¶p
 = 
pdu
 + 
off£t
;

713 
	`°r˝y
((*Ë
c¶p
->
ãxt
, 
˛õ¡
->
¨gv
[
i
]);

714 
c¶p
->
Àn
 = 
	`˝u_to_À16
(
¨g_Àn
);

715 
off£t
 +(*
c¶p
Ë+ 
¨g_Àn
;

718 
	`‰ì
(
Àns
);

719 
˛p
->
löes
 = 
	`˝u_to_À16
(
˛õ¡
->
¨gc
);

720 
˛p
->
˛õ¡_ty≥
 = 
	`__˝u_to_À16
(
˛õ¡
->
ty≥
);

721 
ªt
 = 
	`fio_√t_£nd_cmd
(
˛õ¡
->
fd
, 
FIO_NET_CMD_JOBLINE
, 
pdu
, 
mem
, 
NULL
, NULL);

722 
	`‰ì
(
pdu
);

723  
ªt
;

724 
	}
}

726 
	$fio_˛õ¡s_c⁄√˘
()

728 
fio_˛õ¡
 *
˛õ¡
;

729 
Êi°_hód
 *
íåy
, *
tmp
;

730 
ªt
;

732 #ifde‡
WIN32


733 
WSADATA
 
wsd
;

734 
	`WSASèπup
(
	`MAKEWORD
(2, 2), &
wsd
);

737 
	`d¥öt
(
FD_NET
, "client: connectáll\n");

739 
	`˛õ¡_sig«l_h™dÀr
();

741 
	`Êi°_f‹_óch_ß„
(
íåy
, 
tmp
, &
˛õ¡_li°
) {

742 
˛õ¡
 = 
	`Êi°_íåy
(
íåy
, 
fio_˛õ¡
, 
li°
);

744 
ªt
 = 
	`fio_˛õ¡_c⁄√˘
(
˛õ¡
);

745 i‡(
ªt
) {

746 
	`ªmove_˛õ¡
(
˛õ¡
);

750 i‡(
˛õ¡
->
¨gc
 > 1)

751 
	`£nd_˛õ¡_cmd_löe
(
˛õ¡
);

754  !
ƒ_˛õ¡s
;

755 
	}
}

757 
	$fio_°¨t_˛õ¡
(
fio_˛õ¡
 *
˛õ¡
)

759 
	`d¥öt
(
FD_NET
, "˛õ¡: sèπ %s\n", 
˛õ¡
->
ho°«me
);

760  
	`fio_√t_£nd_sim∂e_cmd
(
˛õ¡
->
fd
, 
FIO_NET_CMD_RUN
, 0, 
NULL
);

761 
	}
}

763 
	$fio_°¨t_Æl_˛õ¡s
()

765 
fio_˛õ¡
 *
˛õ¡
;

766 
Êi°_hód
 *
íåy
, *
tmp
;

767 
ªt
;

769 
	`d¥öt
(
FD_NET
, "client: startáll\n");

771 
	`fio_˛õ¡_js⁄_öô
();

773 
	`Êi°_f‹_óch_ß„
(
íåy
, 
tmp
, &
˛õ¡_li°
) {

774 
˛õ¡
 = 
	`Êi°_íåy
(
íåy
, 
fio_˛õ¡
, 
li°
);

776 
ªt
 = 
	`fio_°¨t_˛õ¡
(
˛õ¡
);

777 i‡(
ªt
) {

778 
	`ªmove_˛õ¡
(
˛õ¡
);

783  
	`Êi°_em±y
(&
˛õ¡_li°
);

784 
	}
}

786 
	$__fio_˛õ¡_£nd_ªmŸe_öi
(
fio_˛õ¡
 *
˛õ¡
,

787 c⁄° *
fûíame
)

789 
cmd_lﬂd_fûe_pdu
 *
pdu
;

790 
size_t
 
p_size
;

791 
ªt
;

793 
	`d¥öt
(
FD_NET
, "£ndÑemŸêöò%†tÿ%s\n", 
fûíame
, 
˛õ¡
->
ho°«me
);

795 
p_size
 = (*
pdu
Ë+ 
	`°æí
(
fûíame
) + 1;

796 
pdu
 = 
	`mÆloc
(
p_size
);

797 
	`mem£t
(
pdu
, 0, 
p_size
);

798 
pdu
->
«me_Àn
 = 
	`°æí
(
fûíame
);

799 
	`°r˝y
((*Ë
pdu
->
fûe
, 
fûíame
);

800 
pdu
->
˛õ¡_ty≥
 = 
	`˝u_to_À16
((
uöt16_t
Ë
˛õ¡
->
ty≥
);

802 
˛õ¡
->
£¡_job
 = 
åue
;

803 
ªt
 = 
	`fio_√t_£nd_cmd
(
˛õ¡
->
fd
, 
FIO_NET_CMD_LOAD_FILE
, 
pdu
, 
p_size
,
NULL
, NULL);

804 
	`‰ì
(
pdu
);

805  
ªt
;

806 
	}
}

812 
	$__fio_˛õ¡_£nd_loˇl_öi
(
fio_˛õ¡
 *
˛õ¡
,

813 c⁄° *
fûíame
)

815 
cmd_job_pdu
 *
pdu
;

816 
size_t
 
p_size
;

817 
°©
 
sb
;

818 *
p
;

819 *
buf
;

820 
off_t
 
Àn
;

821 
fd
, 
ªt
;

823 
	`d¥öt
(
FD_NET
, "£nd inò%†tÿ%s\n", 
fûíame
, 
˛õ¡
->
ho°«me
);

825 
fd
 = 
	`›í
(
fûíame
, 
O_RDONLY
);

826 i‡(
fd
 < 0) {

827 
ªt
 = -
î∫o
;

828 
	`log_îr
("fio: job fûê<%s> o≥n: %s\n", 
fûíame
, 
	`°ªº‹
(
î∫o
));

829  
ªt
;

832 i‡(
	`f°©
(
fd
, &
sb
) < 0) {

833 
ªt
 = -
î∫o
;

834 
	`log_îr
("fio: job fûê°©: %s\n", 
	`°ªº‹
(
î∫o
));

835 
	`˛o£
(
fd
);

836  
ªt
;

842 
sb
.
°_size
 +
OPT_LEN_MAX
;

843 
p_size
 = 
sb
.
°_size
 + (*
pdu
);

844 
pdu
 = 
	`mÆloc
(
p_size
);

845 
buf
 = 
pdu
->buf;

847 
Àn
 = 
sb
.
°_size
;

848 
p
 = 
buf
;

849 i‡(
	`ªad_öi_d©a
(
fd
, 
p
, 
Àn
)) {

850 
	`log_îr
("fio: faûedÑódög job fûê%s\n", 
fûíame
);

851 
	`˛o£
(
fd
);

852 
	`‰ì
(
pdu
);

856 
pdu
->
buf_Àn
 = 
	`__˝u_to_À32
(
sb
.
°_size
);

857 
pdu
->
˛õ¡_ty≥
 = 
	`˝u_to_À32
(
˛õ¡
->
ty≥
);

859 
˛õ¡
->
£¡_job
 = 
åue
;

860 
ªt
 = 
	`fio_√t_£nd_cmd
(
˛õ¡
->
fd
, 
FIO_NET_CMD_JOB
, 
pdu
, 
p_size
, 
NULL
, NULL);

861 
	`‰ì
(
pdu
);

862 
	`˛o£
(
fd
);

863  
ªt
;

864 
	}
}

866 
	$fio_˛õ¡_£nd_öi
(
fio_˛õ¡
 *
˛õ¡
, c⁄° *
fûíame
,

867 
boﬁ
 
ªmŸe
)

869 
ªt
;

871 i‡(!
ªmŸe
)

872 
ªt
 = 
	`__fio_˛õ¡_£nd_loˇl_öi
(
˛õ¡
, 
fûíame
);

874 
ªt
 = 
	`__fio_˛õ¡_£nd_ªmŸe_öi
(
˛õ¡
, 
fûíame
);

876 i‡(!
ªt
)

877 
˛õ¡
->
£¡_job
 = 
åue
;

879  
ªt
;

880 
	}
}

882 
	$fio_˛õ¡_£nd_cf
(
fio_˛õ¡
 *
˛õ¡
,

883 
˛õ¡_fûe
 *
cf
)

885  
	`fio_˛õ¡_£nd_öi
(
˛õ¡
, 
cf
->
fûe
, cf->
ªmŸe
);

886 
	}
}

888 
	$fio_˛õ¡s_£nd_öi
(c⁄° *
fûíame
)

890 
fio_˛õ¡
 *
˛õ¡
;

891 
Êi°_hód
 *
íåy
, *
tmp
;

893 
	`Êi°_f‹_óch_ß„
(
íåy
, 
tmp
, &
˛õ¡_li°
) {

894 
boﬁ
 
Áûed
 = 
Ál£
;

896 
˛õ¡
 = 
	`Êi°_íåy
(
íåy
, 
fio_˛õ¡
, 
li°
);

898 i‡(
˛õ¡
->
ƒ_fûes
) {

899 
i
;

901 
i
 = 0; i < 
˛õ¡
->
ƒ_fûes
; i++) {

902 
˛õ¡_fûe
 *
cf
;

904 
cf
 = &
˛õ¡
->
fûes
[
i
];

906 i‡(
	`fio_˛õ¡_£nd_cf
(
˛õ¡
, 
cf
)) {

907 
Áûed
 = 
åue
;

908 
	`ªmove_˛õ¡
(
˛õ¡
);

913 i‡(
˛õ¡
->
£¡_job
 || 
Áûed
)

915 i‡(!
fûíame
 || 
	`fio_˛õ¡_£nd_öi
(
˛õ¡
, filename, 0))

916 
	`ªmove_˛õ¡
(
˛õ¡
);

919  !
ƒ_˛õ¡s
;

920 
	}
}

922 
	$fio_˛õ¡_upd©e_›ti⁄s
(
fio_˛õ¡
 *
˛õ¡
,

923 
thªad_›ti⁄s
 *
o
, 
uöt64_t
 *
èg
)

925 
cmd_add_job_pdu
 
pdu
;

927 
pdu
.
thªad_numbî
 = 
	`˝u_to_À32
(
˛õ¡
->thread_number);

928 
pdu
.
groupid
 = 
	`˝u_to_À32
(
˛õ¡
->groupid);

929 
	`c⁄vît_thªad_›ti⁄s_to_√t
(&
pdu
.
t›
, 
o
);

931  
	`fio_√t_£nd_cmd
(
˛õ¡
->
fd
, 
FIO_NET_CMD_UPDATE_JOB
, &
pdu
, ’du), 
èg
, &˛õ¡->
cmd_li°
);

932 
	}
}

934 
	$c⁄vît_io_°©
(
io_°©
 *
d°
, io_°© *
§c
)

936 
d°
->
max_vÆ
 = 
	`À64_to_˝u
(
§c
->max_val);

937 
d°
->
mö_vÆ
 = 
	`À64_to_˝u
(
§c
->min_val);

938 
d°
->
ßm∂es
 = 
	`À64_to_˝u
(
§c
->samples);

943 
d°
->
món
.
u
.
f
 = 
	`fio_uöt64_to_doubÀ
(
	`À64_to_˝u
(d°->món.u.
i
));

944 
d°
->
S
.
u
.
f
 = 
	`fio_uöt64_to_doubÀ
(
	`À64_to_˝u
(d°->S.u.
i
));

945 
	}
}

947 
	$c⁄vît_ts
(
thªad_°©
 *
d°
, thªad_°© *
§c
)

949 
i
, 
j
, 
k
;

951 
d°
->
îr‹
 = 
	`À32_to_˝u
(
§c
->error);

952 
d°
->
thªad_numbî
 = 
	`À32_to_˝u
(
§c
->thread_number);

953 
d°
->
groupid
 = 
	`À32_to_˝u
(
§c
->groupid);

954 
d°
->
pid
 = 
	`À32_to_˝u
(
§c
->pid);

955 
d°
->
membîs
 = 
	`À32_to_˝u
(
§c
->members);

956 
d°
->
unifõd_rw_ªp
 = 
	`À32_to_˝u
(
§c
->unified_rw_rep);

957 
d°
->
i›rio
 = 
	`À32_to_˝u
(
§c
->ioprio);

958 
d°
->
dißbÀ_¥io_°©
 = 
	`À32_to_˝u
(
§c
->disable_prio_stat);

960 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

961 
	`c⁄vît_io_°©
(&
d°
->
˛©_°©
[
i
], &
§c
->clat_stat[i]);

962 
	`c⁄vît_io_°©
(&
d°
->
¶©_°©
[
i
], &
§c
->slat_stat[i]);

963 
	`c⁄vît_io_°©
(&
d°
->
œt_°©
[
i
], &
§c
->lat_stat[i]);

964 
	`c⁄vît_io_°©
(&
d°
->
bw_°©
[
i
], &
§c
->bw_stat[i]);

965 
	`c⁄vît_io_°©
(&
d°
->
i›s_°©
[
i
], &
§c
->iops_stat[i]);

967 
	`c⁄vît_io_°©
(&
d°
->
sync_°©
, &
§c
->sync_stat);

969 
d°
->
u§_time
 = 
	`À64_to_˝u
(
§c
->usr_time);

970 
d°
->
sys_time
 = 
	`À64_to_˝u
(
§c
->sys_time);

971 
d°
->
˘x
 = 
	`À64_to_˝u
(
§c
->ctx);

972 
d°
->
möf
 = 
	`À64_to_˝u
(
§c
->minf);

973 
d°
->
majf
 = 
	`À64_to_˝u
(
§c
->majf);

974 
d°
->
˛©_≥r˚¡ûes
 = 
	`À32_to_˝u
(
§c
->clat_percentiles);

975 
d°
->
œt_≥r˚¡ûes
 = 
	`À32_to_˝u
(
§c
->lat_percentiles);

976 
d°
->
¶©_≥r˚¡ûes
 = 
	`À32_to_˝u
(
§c
->slat_percentiles);

977 
d°
->
≥r˚¡ûe_¥ecisi⁄
 = 
	`À64_to_˝u
(
§c
->percentile_precision);

979 
i
 = 0; i < 
FIO_IO_U_LIST_MAX_LEN
; i++) {

980 
fio_Â64_t
 *
Âs
 = &
§c
->
≥r˚¡ûe_li°
[
i
];

981 
fio_Â64_t
 *
Âd
 = &
d°
->
≥r˚¡ûe_li°
[
i
];

983 
Âd
->
u
.
f
 = 
	`fio_uöt64_to_doubÀ
(
	`À64_to_˝u
(
Âs
->u.
i
));

986 
i
 = 0; i < 
FIO_IO_U_MAP_NR
; i++) {

987 
d°
->
io_u_m≠
[
i
] = 
	`À64_to_˝u
(
§c
->io_u_map[i]);

988 
d°
->
io_u_submô
[
i
] = 
	`À64_to_˝u
(
§c
->io_u_submit[i]);

989 
d°
->
io_u_com∂ëe
[
i
] = 
	`À64_to_˝u
(
§c
->io_u_complete[i]);

992 
i
 = 0; i < 
FIO_IO_U_LAT_N_NR
; i++)

993 
d°
->
io_u_œt_n
[
i
] = 
	`À64_to_˝u
(
§c
->io_u_lat_n[i]);

994 
i
 = 0; i < 
FIO_IO_U_LAT_U_NR
; i++)

995 
d°
->
io_u_œt_u
[
i
] = 
	`À64_to_˝u
(
§c
->io_u_lat_u[i]);

996 
i
 = 0; i < 
FIO_IO_U_LAT_M_NR
; i++)

997 
d°
->
io_u_œt_m
[
i
] = 
	`À64_to_˝u
(
§c
->io_u_lat_m[i]);

999 
i
 = 0; i < 
FIO_LAT_CNT
; i++)

1000 
j
 = 0; j < 
DDIR_RWDIR_CNT
; j++)

1001 
k
 = 0; k < 
FIO_IO_U_PLAT_NR
; k++)

1002 
d°
->
io_u_∂©
[
i
][
j
][
k
] = 
	`À64_to_˝u
(
§c
->io_u_plat[i][j][k]);

1004 
j
 = 0; j < 
FIO_IO_U_PLAT_NR
; j++)

1005 
d°
->
io_u_sync_∂©
[
j
] = 
	`À64_to_˝u
(
§c
->io_u_sync_plat[j]);

1007 
i
 = 0; i < 
DDIR_RWDIR_SYNC_CNT
; i++)

1008 
d°
->
tŸÆ_io_u
[
i
] = 
	`À64_to_˝u
(
§c
->total_io_u[i]);

1010 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

1011 
d°
->
sh‹t_io_u
[
i
] = 
	`À64_to_˝u
(
§c
->short_io_u[i]);

1012 
d°
->
dr›_io_u
[
i
] = 
	`À64_to_˝u
(
§c
->drop_io_u[i]);

1015 
d°
->
tŸÆ_submô
 = 
	`À64_to_˝u
(
§c
->total_submit);

1016 
d°
->
tŸÆ_com∂ëe
 = 
	`À64_to_˝u
(
§c
->total_complete);

1017 
d°
->
ƒ_z⁄e_ª£ts
 = 
	`À64_to_˝u
(
§c
->nr_zone_resets);

1019 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

1020 
d°
->
io_byãs
[
i
] = 
	`À64_to_˝u
(
§c
->io_bytes[i]);

1021 
d°
->
ru¡ime
[
i
] = 
	`À64_to_˝u
(
§c
->runtime[i]);

1024 
d°
->
tŸÆ_run_time
 = 
	`À64_to_˝u
(
§c
->total_run_time);

1025 
d°
->
c⁄töue_⁄_îr‹
 = 
	`À16_to_˝u
(
§c
->continue_on_error);

1026 
d°
->
tŸÆ_îr_cou¡
 = 
	`À64_to_˝u
(
§c
->total_err_count);

1027 
d°
->
fú°_îr‹
 = 
	`À32_to_˝u
(
§c
->first_error);

1028 
d°
->
kb_ba£
 = 
	`À32_to_˝u
(
§c
->kb_base);

1029 
d°
->
unô_ba£
 = 
	`À32_to_˝u
(
§c
->unit_base);

1031 
d°
->
sig_figs
 = 
	`À32_to_˝u
(
§c
->sig_figs);

1033 
d°
->
œãncy_dïth
 = 
	`À32_to_˝u
(
§c
->latency_depth);

1034 
d°
->
œãncy_èrgë
 = 
	`À64_to_˝u
(
§c
->latency_target);

1035 
d°
->
œãncy_wödow
 = 
	`À64_to_˝u
(
§c
->latency_window);

1036 
d°
->
œãncy_≥r˚¡ûe
.
u
.
f
 = 
	`fio_uöt64_to_doubÀ
(
	`À64_to_˝u
(
§c
->œãncy_≥r˚¡ûe.u.
i
));

1038 
d°
->
ƒ_block_öfos
 = 
	`À64_to_˝u
(
§c
->nr_block_infos);

1039 
i
 = 0; i < 
d°
->
ƒ_block_öfos
; i++)

1040 
d°
->
block_öfos
[
i
] = 
	`À32_to_˝u
(
§c
->block_infos[i]);

1042 
d°
->
ss_dur
 = 
	`À64_to_˝u
(
§c
->ss_dur);

1043 
d°
->
ss_°©e
 = 
	`À32_to_˝u
(
§c
->ss_state);

1044 
d°
->
ss_hód
 = 
	`À32_to_˝u
(
§c
->ss_head);

1045 
d°
->
ss_limô
.
u
.
f
 = 
	`fio_uöt64_to_doubÀ
(
	`À64_to_˝u
(
§c
->ss_limô.u.
i
));

1046 
d°
->
ss_¶›e
.
u
.
f
 = 
	`fio_uöt64_to_doubÀ
(
	`À64_to_˝u
(
§c
->ss_¶›e.u.
i
));

1047 
d°
->
ss_devüti⁄
.
u
.
f
 = 
	`fio_uöt64_to_doubÀ
(
	`À64_to_˝u
(
§c
->ss_devüti⁄.u.
i
));

1048 
d°
->
ss_¸ôîi⁄
.
u
.
f
 = 
	`fio_uöt64_to_doubÀ
(
	`À64_to_˝u
(
§c
->ss_¸ôîi⁄.u.
i
));

1050 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

1051 
d°
->
ƒ_˛©_¥io
[
i
] = 
	`À32_to_˝u
(
§c
->nr_clat_prio[i]);

1052 
j
 = 0; j < 
d°
->
ƒ_˛©_¥io
[
i
]; j++) {

1053 
k
 = 0; k < 
FIO_IO_U_PLAT_NR
; k++)

1054 
d°
->
˛©_¥io
[
i
][
j
].
io_u_∂©
[
k
] =

1055 
	`À64_to_˝u
(
§c
->
˛©_¥io
[
i
][
j
].
io_u_∂©
[
k
]);

1056 
	`c⁄vît_io_°©
(&
d°
->
˛©_¥io
[
i
][
j
].
˛©_°©
,

1057 &
§c
->
˛©_¥io
[
i
][
j
].
˛©_°©
);

1058 
d°
->
˛©_¥io
[
i
][
j
].
i›rio
 =

1059 
	`À32_to_˝u
(
d°
->
˛©_¥io
[
i
][
j
].
i›rio
);

1063 i‡(
d°
->
ss_°©e
 & 
FIO_SS_DATA
) {

1064 
i
 = 0; i < 
d°
->
ss_dur
; i++ ) {

1065 
d°
->
ss_i›s_d©a
[
i
] = 
	`À64_to_˝u
(
§c
->ss_iops_data[i]);

1066 
d°
->
ss_bw_d©a
[
i
] = 
	`À64_to_˝u
(
§c
->ss_bw_data[i]);

1070 
d°
->
ˇchehô
 = 
	`À64_to_˝u
(
§c
->cachehit);

1071 
d°
->
ˇchemiss
 = 
	`À64_to_˝u
(
§c
->cachemiss);

1072 
	}
}

1074 
	$c⁄vît_gs
(
group_run_°©s
 *
d°
, group_run_°©†*
§c
)

1076 
i
;

1078 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

1079 
d°
->
max_run
[
i
] = 
	`À64_to_˝u
(
§c
->max_run[i]);

1080 
d°
->
mö_run
[
i
] = 
	`À64_to_˝u
(
§c
->min_run[i]);

1081 
d°
->
max_bw
[
i
] = 
	`À64_to_˝u
(
§c
->max_bw[i]);

1082 
d°
->
mö_bw
[
i
] = 
	`À64_to_˝u
(
§c
->min_bw[i]);

1083 
d°
->
iobyãs
[
i
] = 
	`À64_to_˝u
(
§c
->iobytes[i]);

1084 
d°
->
agg
[
i
] = 
	`À64_to_˝u
(
§c
->agg[i]);

1087 
d°
->
kb_ba£
 = 
	`À32_to_˝u
(
§c
->kb_base);

1088 
d°
->
unô_ba£
 = 
	`À32_to_˝u
(
§c
->unit_base);

1089 
d°
->
sig_figs
 = 
	`À32_to_˝u
(
§c
->sig_figs);

1090 
d°
->
groupid
 = 
	`À32_to_˝u
(
§c
->groupid);

1091 
d°
->
unifõd_rw_ªp
 = 
	`À32_to_˝u
(
§c
->unified_rw_rep);

1092 
	}
}

1094 
	$js⁄_obje˘_add_˛õ¡_öfo
(
js⁄_obje˘
 *
obj
,

1095 
fio_˛õ¡
 *
˛õ¡
)

1097 c⁄° *
ho°«me
 = 
˛õ¡
->hostname ? client->hostname : "";

1099 
	`js⁄_obje˘_add_vÆue_°rög
(
obj
, "ho°«me", 
ho°«me
);

1100 
	`js⁄_obje˘_add_vÆue_öt
(
obj
, "p‹t", 
˛õ¡
->
p‹t
);

1101 
	}
}

1103 
	$h™dÀ_ts
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

1105 
cmd_ts_pdu
 *
p
 = (cmd_ts_pdu *Ë
cmd
->
∑ylﬂd
;

1106 
Êi°_hód
 *
›t_li°
 = 
NULL
;

1107 
js⁄_obje˘
 *
tsobj
;

1109 i‡(
˛õ¡
->
›t_li°s
 && 
p
->
ts
.
thªad_numbî
 <˛õ¡->
jobs
)

1110 
›t_li°
 = &
˛õ¡
->
›t_li°s
[
p
->
ts
.
thªad_numbî
 - 1];

1112 
tsobj
 = 
	`show_thªad_°©us
(&
p
->
ts
, &p->
rs
, 
›t_li°
, &
˛õ¡
->
buf
);

1113 
˛õ¡
->
did_°©
 = 
åue
;

1114 i‡(
tsobj
) {

1115 
	`js⁄_obje˘_add_˛õ¡_öfo
(
tsobj
, 
˛õ¡
);

1116 
	`js⁄_¨øy_add_vÆue_obje˘
(
˛õ¡s_¨øy
, 
tsobj
);

1119 i‡(
sum_°©_˛õ¡s
 <= 1)

1122 
	`sum_thªad_°©s
(&
˛õ¡_ts
, &
p
->
ts
);

1123 
	`sum_group_°©s
(&
˛õ¡_gs
, &
p
->
rs
);

1125 
˛õ¡_ts
.
membîs
++;

1126 
˛õ¡_ts
.
thªad_numbî
 = 
p
->
ts
.thread_number;

1127 
˛õ¡_ts
.
groupid
 = 
p
->
ts
.groupid;

1128 
˛õ¡_ts
.
unifõd_rw_ªp
 = 
p
->
ts
.unified_rw_rep;

1129 
˛õ¡_ts
.
sig_figs
 = 
p
->
ts
.sig_figs;

1131 i‡(++
sum_°©_ƒ
 =
sum_°©_˛õ¡s
) {

1132 
	`°r˝y
(
˛õ¡_ts
.
«me
, "All clients");

1133 
tsobj
 = 
	`show_thªad_°©us
(&
˛õ¡_ts
, &
˛õ¡_gs
, 
NULL
, &
Æl˛õ¡s
);

1134 i‡(
tsobj
) {

1135 
	`js⁄_obje˘_add_˛õ¡_öfo
(
tsobj
, 
˛õ¡
);

1136 
	`js⁄_¨øy_add_vÆue_obje˘
(
˛õ¡s_¨øy
, 
tsobj
);

1139 
	}
}

1141 
	$h™dÀ_gs
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

1143 
group_run_°©s
 *
gs
 = (group_run_°©†*Ë
cmd
->
∑ylﬂd
;

1145 i‡(
ouçut_f‹m©
 & 
FIO_OUTPUT_NORMAL
)

1146 
	`show_group_°©s
(
gs
, &
˛õ¡
->
buf
);

1147 
	}
}

1149 
	$h™dÀ_job_›t
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

1151 
cmd_job_›ti⁄
 *
pdu
 = (cmd_job_›ti⁄ *Ë
cmd
->
∑ylﬂd
;

1153 
pdu
->
globÆ
 = 
	`À16_to_˝u
(pdu->global);

1154 
pdu
->
åunˇãd
 = 
	`À16_to_˝u
(pdu->truncated);

1155 
pdu
->
groupid
 = 
	`À32_to_˝u
(pdu->groupid);

1157 i‡(
pdu
->
globÆ
) {

1158 i‡(!
job_›t_obje˘
)

1161 
	`js⁄_obje˘_add_vÆue_°rög
(
job_›t_obje˘
,

1162 (c⁄° *)
pdu
->
«me
,

1163 (c⁄° *)
pdu
->
vÆue
);

1164 } i‡(
˛õ¡
->
›t_li°s
) {

1165 
Êi°_hód
 *
›t_li°
 = &
˛õ¡
->
›t_li°s
[
pdu
->
groupid
];

1166 
¥öt_›ti⁄
 *
p
;

1168 
p
 = 
	`mÆloc
((*p));

1169 
p
->
«me
 = 
	`°rdup
((c⁄° *)
pdu
->name);

1170 
p
->
vÆue
 = 
pdu
->vÆue[0] ? 
	`°rdup
((const *)pdu->value) :

1171 
NULL
;

1172 
	`Êi°_add_èû
(&
p
->
li°
, 
›t_li°
);

1174 
	}
}

1176 
	$h™dÀ_ãxt
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

1178 
cmd_ãxt_pdu
 *
pdu
 = (cmd_ãxt_pdu *Ë
cmd
->
∑ylﬂd
;

1179 c⁄° *
buf
 = (c⁄° *Ë
pdu
->buf;

1180 c⁄° *
«me
;

1181 
fio_unu£d
 
ªt
;

1182 
buf_ouçut
 
out
;

1184 
	`buf_ouçut_öô
(&
out
);

1186 
«me
 = 
˛õ¡
->«mê? clõ¡->«mê: clõ¡->
ho°«me
;

1188 i‡(!
˛õ¡
->
skù_√wlöe
 && !(
ouçut_f‹m©
 & 
FIO_OUTPUT_TERSE
))

1189 
	`__log_buf
(&
out
, "<%s> ", 
«me
);

1190 
	`__log_buf
(&
out
, "%s", 
buf
);

1191 
	`log_öfo_buf
(
out
.
buf
, out.
buÊí
);

1192 
	`buf_ouçut_‰ì
(&
out
);

1193 
˛õ¡
->
skù_√wlöe
 = 
	`°rchr
(
buf
, '\n'Ë=
NULL
;

1194 
	}
}

1196 
	$c⁄vît_agg
(
disk_utû_agg
 *
agg
)

1198 
i
;

1200 
i
 = 0; i < 2; i++) {

1201 
agg
->
ios
[
i
] = 
	`À64_to_˝u
(agg->ios[i]);

1202 
agg
->
mîges
[
i
] = 
	`À64_to_˝u
(agg->merges[i]);

1203 
agg
->
£˘‹s
[
i
] = 
	`À64_to_˝u
(agg->sectors[i]);

1204 
agg
->
ticks
[
i
] = 
	`À64_to_˝u
(agg->ticks[i]);

1207 
agg
->
io_ticks
 = 
	`À64_to_˝u
(agg->io_ticks);

1208 
agg
->
time_ö_queue
 = 
	`À64_to_˝u
(agg->time_in_queue);

1209 
agg
->
¶avecou¡
 = 
	`À32_to_˝u
(agg->slavecount);

1210 
agg
->
max_utû
.
u
.
f
 = 
	`fio_uöt64_to_doubÀ
(
	`À64_to_˝u
◊gg->max_utû.u.
i
));

1211 
	}
}

1213 
	$c⁄vît_dus
(
disk_utû_°©
 *
dus
)

1215 
i
;

1217 
i
 = 0; i < 2; i++) {

1218 
dus
->
s
.
ios
[
i
] = 
	`À64_to_˝u
(dus->s.ios[i]);

1219 
dus
->
s
.
mîges
[
i
] = 
	`À64_to_˝u
(dus->s.merges[i]);

1220 
dus
->
s
.
£˘‹s
[
i
] = 
	`À64_to_˝u
(dus->s.sectors[i]);

1221 
dus
->
s
.
ticks
[
i
] = 
	`À64_to_˝u
(dus->s.ticks[i]);

1224 
dus
->
s
.
io_ticks
 = 
	`À64_to_˝u
(dus->s.io_ticks);

1225 
dus
->
s
.
time_ö_queue
 = 
	`À64_to_˝u
(dus->s.time_in_queue);

1226 
dus
->
s
.
m£c
 = 
	`À64_to_˝u
(dus->s.msec);

1227 
	}
}

1229 
	$h™dÀ_du
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

1231 
cmd_du_pdu
 *
du
 = (cmd_du_pdu *Ë
cmd
->
∑ylﬂd
;

1233 i‡(!
˛õ¡
->
disk_°©s_shown
)

1234 
˛õ¡
->
disk_°©s_shown
 = 
åue
;

1236 i‡(
ouçut_f‹m©
 & 
FIO_OUTPUT_JSON
) {

1237 
js⁄_obje˘
 *
duobj
;

1239 
	`js⁄_¨øy_add_disk_utû
(&
du
->
dus
, &du->
agg
, 
du_¨øy
);

1240 
duobj
 = 
	`js⁄_¨øy_œ°_vÆue_obje˘
(
du_¨øy
);

1241 
	`js⁄_obje˘_add_˛õ¡_öfo
(
duobj
, 
˛õ¡
);

1243 i‡(
ouçut_f‹m©
 & 
FIO_OUTPUT_NORMAL
) {

1244 
	`__log_buf
(&
˛õ¡
->
buf
, "\nDisk stats (read/write):\n");

1245 
	`¥öt_disk_utû
(&
du
->
dus
, &du->
agg
, 0, &
˛õ¡
->
buf
);

1247 i‡(
ouçut_f‹m©
 & 
FIO_OUTPUT_TERSE
 && 
ãr£_vîsi⁄
 >= 3) {

1248 
	`¥öt_disk_utû
(&
du
->
dus
, &du->
agg
, 1, &
˛õ¡
->
buf
);

1249 
	`__log_buf
(&
˛õ¡
->
buf
, "\n");

1251 
	}
}

1253 
	$c⁄vît_jobs_ëa
(
jobs_ëa
 *
je
)

1255 
i
;

1257 
je
->
ƒ_ru¬ög
 = 
	`À32_to_˝u
(je->nr_running);

1258 
je
->
ƒ_ømp
 = 
	`À32_to_˝u
(je->nr_ramp);

1259 
je
->
ƒ_≥ndög
 = 
	`À32_to_˝u
(je->nr_pending);

1260 
je
->
ƒ_£âög_up
 = 
	`À32_to_˝u
(je->nr_setting_up);

1261 
je
->
fûes_›í
 = 
	`À32_to_˝u
(je->files_open);

1263 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

1264 
je
->
m_øã
[
i
] = 
	`À64_to_˝u
(je->m_rate[i]);

1265 
je
->
t_øã
[
i
] = 
	`À64_to_˝u
(je->t_rate[i]);

1266 
je
->
m_i›s
[
i
] = 
	`À32_to_˝u
(je->m_iops[i]);

1267 
je
->
t_i›s
[
i
] = 
	`À32_to_˝u
(je->t_iops[i]);

1268 
je
->
øã
[
i
] = 
	`À64_to_˝u
(je->rate[i]);

1269 
je
->
i›s
[
i
] = 
	`À32_to_˝u
(je->iops[i]);

1272 
je
->
ñ≠£d_£c
 = 
	`À64_to_˝u
(je->elapsed_sec);

1273 
je
->
ëa_£c
 = 
	`À64_to_˝u
(je->eta_sec);

1274 
je
->
ƒ_thªads
 = 
	`À32_to_˝u
(je->nr_threads);

1275 
je
->
is_pow2
 = 
	`À32_to_˝u
(je->is_pow2);

1276 
je
->
unô_ba£
 = 
	`À32_to_˝u
(je->unit_base);

1277 
je
->
sig_figs
 = 
	`À32_to_˝u
(je->sig_figs);

1278 
	}
}

1280 
	$fio_˛õ¡_sum_jobs_ëa
(
jobs_ëa
 *
d°
, jobs_ë®*
je
)

1282 
i
;

1284 
d°
->
ƒ_ru¬ög
 +
je
->nr_running;

1285 
d°
->
ƒ_ømp
 +
je
->nr_ramp;

1286 
d°
->
ƒ_≥ndög
 +
je
->nr_pending;

1287 
d°
->
ƒ_£âög_up
 +
je
->nr_setting_up;

1288 
d°
->
fûes_›í
 +
je
->files_open;

1290 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

1291 
d°
->
m_øã
[
i
] +
je
->m_rate[i];

1292 
d°
->
t_øã
[
i
] +
je
->t_rate[i];

1293 
d°
->
m_i›s
[
i
] +
je
->m_iops[i];

1294 
d°
->
t_i›s
[
i
] +
je
->t_iops[i];

1295 
d°
->
øã
[
i
] +
je
->rate[i];

1296 
d°
->
i›s
[
i
] +
je
->iops[i];

1299 
d°
->
ñ≠£d_£c
 +
je
->elapsed_sec;

1301 i‡(
je
->
ëa_£c
 > 
d°
->eta_sec)

1302 
d°
->
ëa_£c
 = 
je
->eta_sec;

1304 
d°
->
ƒ_thªads
 +
je
->nr_threads;

1310 
	`°r˝y
((*Ë
d°
->
run_°r
, (*Ë
je
->run_str);

1311 
	}
}

1313 
boﬁ
 
	$ªmove_ª∂y_cmd
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

1315 
fio_√t_cmd_ª∂y
 *
ª∂y
 = 
NULL
;

1316 
Êi°_hód
 *
íåy
;

1318 
	`Êi°_f‹_óch
(
íåy
, &
˛õ¡
->
cmd_li°
) {

1319 
ª∂y
 = 
	`Êi°_íåy
(
íåy
, 
fio_√t_cmd_ª∂y
, 
li°
);

1321 i‡(
cmd
->
èg
 =(
uöçå_t
Ë
ª∂y
)

1324 
ª∂y
 = 
NULL
;

1327 i‡(!
ª∂y
) {

1328 
	`log_îr
("fio: clõ¡: u«bÀÅÿföd m©chögÅag (%Œx)\n", (Ë
cmd
->
èg
);

1329  
Ál£
;

1332 
	`Êi°_dñ
(&
ª∂y
->
li°
);

1333 
cmd
->
èg
 = 
ª∂y
->
ßved_èg
;

1334 
	`‰ì
(
ª∂y
);

1335  
åue
;

1336 
	}
}

1338 
	$fio_˛õ¡_waô_f‹_ª∂y
(
fio_˛õ¡
 *
˛õ¡
, 
uöt64_t
 
èg
)

1341 
fio_√t_cmd_ª∂y
 *
ª∂y
 = 
NULL
;

1342 
Êi°_hód
 *
íåy
;

1344 
	`Êi°_f‹_óch
(
íåy
, &
˛õ¡
->
cmd_li°
) {

1345 
ª∂y
 = 
	`Êi°_íåy
(
íåy
, 
fio_√t_cmd_ª∂y
, 
li°
);

1347 i‡(
èg
 =(
uöçå_t
Ë
ª∂y
)

1350 
ª∂y
 = 
NULL
;

1353 i‡(!
ª∂y
)

1356 
	`u¶ìp
(1000);

1360 
	}
}

1362 
	$h™dÀ_ëa
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

1364 
jobs_ëa
 *
je
 = (jobs_ë®*Ë
cmd
->
∑ylﬂd
;

1365 
˛õ¡_ëa
 *
ëa
 = (˛õ¡_ë®*Ë(
uöçå_t
Ë
cmd
->
èg
;

1367 
	`d¥öt
(
FD_NET
, "˛õ¡: gŸÉèÅag %p, %d\n", 
ëa
,Éè->
≥ndög
);

1369 
	`as£π
(
˛õ¡
->
ëa_ö_Êight
 =
ëa
);

1371 
˛õ¡
->
ëa_ö_Êight
 = 
NULL
;

1372 
	`Êi°_dñ_öô
(&
˛õ¡
->
ëa_li°
);

1373 
˛õ¡
->
ëa_timeouts
 = 0;

1375 i‡(
˛õ¡
->
›s
->
jobs_ëa
)

1376 
˛õ¡
->
›s
->
	`jobs_ëa
(˛õ¡, 
je
);

1378 
	`fio_˛õ¡_sum_jobs_ëa
(&
ëa
->ëa, 
je
);

1379 
	`fio_˛õ¡_dec_jobs_ëa
(
ëa
, 
˛õ¡
->
›s
->eta);

1380 
	}
}

1382 
	$˛õ¡_Êush_hi°_ßm∂es
(
FILE
 *
f
, 
hi°_cﬂr£√ss
, *
ßm∂es
,

1383 
uöt64_t
 
ßm∂e_size
)

1385 
io_ßm∂e
 *
s
;

1386 
log_off£t
;

1387 
uöt64_t
 
i
, 
j
, 
ƒ_ßm∂es
;

1388 
io_u_∂©_íåy
 *
íåy
;

1389 
uöt64_t
 *
io_u_∂©
;

1391 
°ride
 = 1 << 
hi°_cﬂr£√ss
;

1393 i‡(!
ßm∂e_size
)

1396 
s
 = 
	`__gë_ßm∂e
(
ßm∂es
, 0, 0);

1397 
log_off£t
 = (
s
->
__ddú
 & 
LOG_OFFSET_SAMPLE_BIT
) != 0;

1399 
ƒ_ßm∂es
 = 
ßm∂e_size
 / 
	`__log_íåy_sz
(
log_off£t
);

1401 
i
 = 0; i < 
ƒ_ßm∂es
; i++) {

1403 
s
 = (
io_ßm∂e
 *)((*)
	`__gë_ßm∂e
(
ßm∂es
, 
log_off£t
, 
i
) +

1404 
i
 * (
io_u_∂©_íåy
));

1406 
íåy
 = 
s
->
d©a
.
∂©_íåy
;

1407 
io_u_∂©
 = 
íåy
->io_u_plat;

1409 
	`Ârötf
(
f
, "%lu, %u, %Œu, ", (Ë
s
->
time
,

1410 
	`io_ßm∂e_ddú
(
s
), (Ës->
bs
);

1411 
j
 = 0; j < 
FIO_IO_U_PLAT_NR
 - 
°ride
; j += stride) {

1412 
	`Ârötf
(
f
, "%Œu, ", ()
	`hi°_sum
(
j
, 
°ride
, 
io_u_∂©
, 
NULL
));

1414 
	`Ârötf
(
f
, "%llu\n", ()

1415 
	`hi°_sum
(
FIO_IO_U_PLAT_NR
 - 
°ride
, såide, 
io_u_∂©
, 
NULL
));

1418 
	}
}

1420 
	$fio_˛õ¡_h™dÀ_iﬁog
(
fio_˛õ¡
 *
˛õ¡
,

1421 
fio_√t_cmd
 *
cmd
)

1423 
cmd_iﬁog_pdu
 *
pdu
 = 
NULL
;

1424 
boﬁ
 
°‹e_dúe˘
;

1425 *
log_∑th«me
 = 
NULL
;

1426 
ªt
 = 0;

1428 
pdu
 = 
	`c⁄vît_iﬁog
(
cmd
, &
°‹e_dúe˘
);

1429 i‡(!
pdu
) {

1430 
	`log_îr
("fio: failed converting IOÜog\n");

1431 
ªt
 = 1;

1432 
out
;

1436 
log_∑th«me
 = 
	`mÆloc
(10 + 
	`°æí
((*)
pdu
->
«me
) +

1437 
	`°æí
(
˛õ¡
->
ho°«me
));

1438 i‡(!
log_∑th«me
) {

1439 
	`log_îr
("fio: memoryállocation of uniqueÖathname failed\n");

1440 
ªt
 = -1;

1441 
out
;

1444 
	`•rötf
(
log_∑th«me
, "%s.%s", 
pdu
->
«me
, 
˛õ¡
->
ho°«me
);

1446 i‡(
°‹e_dúe˘
) {

1447 
ssize_t
 
wrŸe
;

1448 
size_t
 
sz
;

1449 
fd
;

1451 
fd
 = 
	`›í
((c⁄° *Ë
log_∑th«me
,

1452 
O_WRONLY
 | 
O_CREAT
 | 
O_TRUNC
, 0644);

1453 i‡(
fd
 < 0) {

1454 
	`log_îr
("fio: openÜog %s: %s\n",

1455 
log_∑th«me
, 
	`°ªº‹
(
î∫o
));

1456 
ªt
 = 1;

1457 
out
;

1460 
sz
 = 
cmd
->
pdu_Àn
 - (*
pdu
);

1461 
wrŸe
 = 
	`wrôe
(
fd
, 
pdu
->
ßm∂es
, 
sz
);

1462 
	`˛o£
(
fd
);

1464 i‡(
wrŸe
 !
sz
) {

1465 
	`log_îr
("fio: short write on compressedÜog\n");

1466 
ªt
 = 1;

1467 
out
;

1470 
ªt
 = 0;

1472 
FILE
 *
f
;

1473 
f
 = 
	`f›í
((c⁄° *Ë
log_∑th«me
, "w");

1474 i‡(!
f
) {

1475 
	`log_îr
("fio: fopenÜog %s : %s\n",

1476 
log_∑th«me
, 
	`°ªº‹
(
î∫o
));

1477 
ªt
 = 1;

1478 
out
;

1481 i‡(
pdu
->
log_ty≥
 =
IO_LOG_TYPE_HIST
) {

1482 
	`˛õ¡_Êush_hi°_ßm∂es
(
f
, 
pdu
->
log_hi°_cﬂr£√ss
,Ödu->
ßm∂es
,

1483 
pdu
->
ƒ_ßm∂es
 * (
io_ßm∂e
));

1485 
	`Êush_ßm∂es
(
f
, 
pdu
->
ßm∂es
,

1486 
pdu
->
ƒ_ßm∂es
 * (
io_ßm∂e
));

1488 
	`f˛o£
(
f
);

1489 
ªt
 = 0;

1492 
out
:

1493 i‡(
pdu
 &&Ödu !(*Ë
cmd
->
∑ylﬂd
)

1494 
	`‰ì
(
pdu
);

1496 i‡(
log_∑th«me
)

1497 
	`‰ì
(
log_∑th«me
);

1499  
ªt
;

1500 
	}
}

1502 
	$h™dÀ_¥obe
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

1504 
cmd_¥obe_ª∂y_pdu
 *
¥obe
 = (cmd_¥obe_ª∂y_pdu *Ë
cmd
->
∑ylﬂd
;

1505 c⁄° *
os
, *
¨ch
;

1506 
bô
[16];

1508 
os
 = 
	`fio_gë_os_°rög
(
¥obe
->os);

1509 i‡(!
os
)

1510 
os
 = "unknown";

1512 
¨ch
 = 
	`fio_gë_¨ch_°rög
(
¥obe
->arch);

1513 i‡(!
¨ch
)

1514 
os
 = "unknown";

1516 
	`•rötf
(
bô
, "%d-bô", 
¥obe
->
bµ
 * 8);

1517 
¥obe
->
Êags
 = 
	`À64_to_˝u
(probe->flags);

1519 i‡(
ouçut_f‹m©
 & 
FIO_OUTPUT_NORMAL
) {

1520 
	`log_öfo
("hostname=%s, be=%u, %s, os=%s,árch=%s, fio=%s, flags=%lx\n",

1521 
¥obe
->
ho°«me
,Örobe->
bigídün
, 
bô
, 
os
, 
¨ch
,

1522 
¥obe
->
fio_vîsi⁄
, (Ë¥obe->
Êags
);

1525 i‡(!
˛õ¡
->
«me
)

1526 
˛õ¡
->
«me
 = 
	`°rdup
((*Ë
¥obe
->
ho°«me
);

1527 
	}
}

1529 
	$h™dÀ_°¨t
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

1531 
cmd_°¨t_pdu
 *
pdu
 = (cmd_°¨t_pdu *Ë
cmd
->
∑ylﬂd
;

1533 
˛õ¡
->
°©e
 = 
Clõ¡_°¨ãd
;

1534 
˛õ¡
->
jobs
 = 
	`À32_to_˝u
(
pdu
->jobs);

1535 
˛õ¡
->
ƒ_°©
 = 
	`À32_to_˝u
(
pdu
->
°©_ouçuts
);

1537 i‡(
˛õ¡
->
jobs
) {

1538 
i
;

1540 i‡(
˛õ¡
->
›t_li°s
)

1541 
	`‰ì
(
˛õ¡
->
›t_li°s
);

1543 
˛õ¡
->
›t_li°s
 = 
	`mÆloc
(˛õ¡->
jobs
 * (
Êi°_hód
));

1544 
i
 = 0; i < 
˛õ¡
->
jobs
; i++)

1545 
	`INIT_FLIST_HEAD
(&
˛õ¡
->
›t_li°s
[
i
]);

1548 
sum_°©_˛õ¡s
 +
˛õ¡
->
ƒ_°©
;

1549 
	}
}

1551 
	$h™dÀ_°›
(
fio_˛õ¡
 *
˛õ¡
)

1553 i‡(
˛õ¡
->
îr‹
)

1554 
	`log_öfo
("˛õ¡ <%s>:Éxôed wôhÉº‹ %d\n", 
˛õ¡
->
ho°«me
, clõ¡->
îr‹
);

1555 
	}
}

1557 
	$c⁄vît_°›
(
fio_√t_cmd
 *
cmd
)

1559 
cmd_íd_pdu
 *
pdu
 = (cmd_íd_pdu *Ë
cmd
->
∑ylﬂd
;

1561 
pdu
->
îr‹
 = 
	`À32_to_˝u
(pdu->error);

1562 
	}
}

1564 
	$c⁄vît_ãxt
(
fio_√t_cmd
 *
cmd
)

1566 
cmd_ãxt_pdu
 *
pdu
 = (cmd_ãxt_pdu *Ë
cmd
->
∑ylﬂd
;

1568 
pdu
->
Àvñ
 = 
	`À32_to_˝u
(pdu->level);

1569 
pdu
->
buf_Àn
 = 
	`À32_to_˝u
(pdu->buf_len);

1570 
pdu
->
log_£c
 = 
	`À64_to_˝u
(pdu->log_sec);

1571 
pdu
->
log_u£c
 = 
	`À64_to_˝u
(pdu->log_usec);

1572 
	}
}

1574 
cmd_iﬁog_pdu
 *
	$c⁄vît_iﬁog_gz
(
fio_√t_cmd
 *
cmd
,

1575 
cmd_iﬁog_pdu
 *
pdu
)

1577 #ifde‡
CONFIG_ZLIB


1578 
cmd_iﬁog_pdu
 *
ªt
;

1579 
z_°ªam
 
°ªam
;

1580 
uöt64_t
 
ƒ_ßm∂es
;

1581 
size_t
 
tŸÆ
;

1582 *
p
;

1584 
°ªam
.
zÆloc
 = 
Z_NULL
;

1585 
°ªam
.
z‰ì
 = 
Z_NULL
;

1586 
°ªam
.
›aque
 = 
Z_NULL
;

1587 
°ªam
.
avaû_ö
 = 0;

1588 
°ªam
.
√xt_ö
 = 
Z_NULL
;

1590 i‡(
	`öÊ©eInô
(&
°ªam
Ë!
Z_OK
)

1591  
NULL
;

1596 
ƒ_ßm∂es
 = 
	`À64_to_˝u
(
pdu
->nr_samples);

1598 i‡(
pdu
->
log_ty≥
 =
IO_LOG_TYPE_HIST
)

1599 
tŸÆ
 = 
ƒ_ßm∂es
 * (
	`__log_íåy_sz
(
	`À32_to_˝u
(
pdu
->
log_off£t
)) +

1600 (
io_u_∂©_íåy
));

1602 
tŸÆ
 = 
ƒ_ßm∂es
 * 
	`__log_íåy_sz
(
	`À32_to_˝u
(
pdu
->
log_off£t
));

1603 
ªt
 = 
	`mÆloc
(
tŸÆ
 + (*
pdu
));

1604 
ªt
->
ƒ_ßm∂es
 =Çr_samples;

1606 
	`mem˝y
(
ªt
, 
pdu
, (*pdu));

1608 
p
 = (*Ë
ªt
 + (*
pdu
);

1610 
°ªam
.
avaû_ö
 = 
cmd
->
pdu_Àn
 - (*
pdu
);

1611 
°ªam
.
√xt_ö
 = (*)((*Ë
pdu
 + (*pdu));

1612 
°ªam
.
avaû_ö
) {

1613 
this_chunk
 = 65536;

1614 
this_Àn
;

1615 
îr
;

1617 i‡(
this_chunk
 > 
tŸÆ
)

1618 
this_chunk
 = 
tŸÆ
;

1620 
°ªam
.
avaû_out
 = 
this_chunk
;

1621 
°ªam
.
√xt_out
 = (*)
p
;

1622 
îr
 = 
	`öÊ©e
(&
°ªam
, 
Z_NO_FLUSH
);

1624 i‡(
îr
 < 0) {

1628 i‡(
îr
 =
Z_STREAM_ERROR
 ||Éº =
Z_BUF_ERROR
)

1630 
	`log_îr
("fio: inÊ©êîr‹ %d\n", 
îr
);

1631 
	`‰ì
(
ªt
);

1632 
ªt
 = 
NULL
;

1633 
îr
;

1636 
this_Àn
 = 
this_chunk
 - 
°ªam
.
avaû_out
;

1637 
p
 +
this_Àn
;

1638 
tŸÆ
 -
this_Àn
;

1641 
îr
:

1642 
	`öÊ©eEnd
(&
°ªam
);

1643  
ªt
;

1645  
NULL
;

1647 
	}
}

1653 
cmd_iﬁog_pdu
 *
	$c⁄vît_iﬁog
(
fio_√t_cmd
 *
cmd
,

1654 
boﬁ
 *
°‹e_dúe˘
)

1656 
cmd_iﬁog_pdu
 *
pdu
 = (cmd_iﬁog_pdu *Ë
cmd
->
∑ylﬂd
;

1657 
cmd_iﬁog_pdu
 *
ªt
;

1658 
uöt64_t
 
i
;

1659 
com¥es£d
;

1660 *
ßm∂es
;

1662 *
°‹e_dúe˘
 = 
Ál£
;

1668 
com¥es£d
 = 
	`À32_to_˝u
(
pdu
->compressed);

1669 i‡(
com¥es£d
 =
XMIT_COMPRESSED
) {

1670 #i‚de‡
CONFIG_ZLIB


1671 
	`log_îr
("fio: server sent compressed data by mistake\n");

1672  
NULL
;

1674 
ªt
 = 
	`c⁄vît_iﬁog_gz
(
cmd
, 
pdu
);

1675 i‡(!
ªt
) {

1676 
	`log_îr
("fio: failed decompressingÜog\n");

1677  
NULL
;

1679 } i‡(
com¥es£d
 =
STORE_COMPRESSED
) {

1680 *
°‹e_dúe˘
 = 
åue
;

1681 
ªt
 = 
pdu
;

1683 
ªt
 = 
pdu
;

1685 
ªt
->
ƒ_ßm∂es
 = 
	`À64_to_˝u
(ret->nr_samples);

1686 
ªt
->
thªad_numbî
 = 
	`À32_to_˝u
(ret->thread_number);

1687 
ªt
->
log_ty≥
 = 
	`À32_to_˝u
(ret->log_type);

1688 
ªt
->
com¥es£d
 = 
	`À32_to_˝u
(ret->compressed);

1689 
ªt
->
log_off£t
 = 
	`À32_to_˝u
(ret->log_offset);

1690 
ªt
->
log_¥io
 = 
	`À32_to_˝u
(ret->log_prio);

1691 
ªt
->
log_hi°_cﬂr£√ss
 = 
	`À32_to_˝u
(ret->log_hist_coarseness);

1693 i‡(*
°‹e_dúe˘
)

1694  
ªt
;

1696 
ßm∂es
 = &
ªt
->samples[0];

1697 
i
 = 0; i < 
ªt
->
ƒ_ßm∂es
; i++) {

1698 
io_ßm∂e
 *
s
;

1700 
s
 = 
	`__gë_ßm∂e
(
ßm∂es
, 
ªt
->
log_off£t
, 
i
);

1701 i‡(
ªt
->
log_ty≥
 =
IO_LOG_TYPE_HIST
)

1702 
s
 = (
io_ßm∂e
 *)((*)†+ (
io_u_∂©_íåy
Ë* 
i
);

1704 
s
->
time
 = 
	`À64_to_˝u
(s->time);

1705 i‡(
ªt
->
log_ty≥
 !
IO_LOG_TYPE_HIST
)

1706 
s
->
d©a
.
vÆ
 = 
	`À64_to_˝u
(s->data.val);

1707 
s
->
__ddú
 = 
	`__À32_to_˝u
(s->__ddir);

1708 
s
->
bs
 = 
	`À64_to_˝u
(s->bs);

1709 
s
->
¥i‹ôy
 = 
	`À16_to_˝u
(s->priority);

1711 i‡(
ªt
->
log_off£t
) {

1712 
io_ßm∂e_off£t
 *
so
 = (*Ë
s
;

1714 
so
->
off£t
 = 
	`À64_to_˝u
(so->offset);

1717 i‡(
ªt
->
log_ty≥
 =
IO_LOG_TYPE_HIST
) {

1718 
s
->
d©a
.
∂©_íåy
 = (
io_u_∂©_íåy
 *)(((*)s) + (*s));

1719 
s
->
d©a
.
∂©_íåy
->
li°
.
√xt
 = 
NULL
;

1720 
s
->
d©a
.
∂©_íåy
->
li°
.
¥ev
 = 
NULL
;

1724  
ªt
;

1725 
	}
}

1727 
	$£ndfûe_ª∂y
(
fd
, 
cmd_£ndfûe_ª∂y
 *
ªp
,

1728 
size_t
 
size
, 
uöt64_t
 
èg
)

1730 
ªp
->
îr‹
 = 
	`˝u_to_À32
(rep->error);

1731 
	`fio_√t_£nd_cmd
(
fd
, 
FIO_NET_CMD_SENDFILE
, 
ªp
, 
size
, &
èg
, 
NULL
);

1732 
	}
}

1734 
	$fio_£nd_fûe
(
fio_˛õ¡
 *
˛õ¡
, 
cmd_£ndfûe
 *
pdu
,

1735 
uöt64_t
 
èg
)

1737 
cmd_£ndfûe_ª∂y
 *
ªp
;

1738 
°©
 
sb
;

1739 
size_t
 
size
;

1740 
fd
;

1742 
size
 = (*
ªp
);

1743 
ªp
 = 
	`mÆloc
(
size
);

1745 i‡(
	`°©
((*)
pdu
->
∑th
, &
sb
) < 0) {

1746 
Áû
:

1747 
ªp
->
îr‹
 = 
î∫o
;

1748 
	`£ndfûe_ª∂y
(
˛õ¡
->
fd
, 
ªp
, 
size
, 
èg
);

1749 
	`‰ì
(
ªp
);

1753 
size
 +
sb
.
°_size
;

1754 
ªp
 = 
	`ªÆloc
‘ï, 
size
);

1755 
ªp
->
size
 = 
	`˝u_to_À32
((
uöt32_t
Ë
sb
.
°_size
);

1757 
fd
 = 
	`›í
((*)
pdu
->
∑th
, 
O_RDONLY
);

1758 i‡(
fd
 == -1 )

1759 
Áû
;

1761 
ªp
->
îr‹
 = 
	`ªad_d©a
(
fd
, &ªp->
d©a
, 
sb
.
°_size
);

1762 
	`£ndfûe_ª∂y
(
˛õ¡
->
fd
, 
ªp
, 
size
, 
èg
);

1763 
	`‰ì
(
ªp
);

1764 
	`˛o£
(
fd
);

1766 
	}
}

1768 
	$fio_h™dÀ_˛õ¡
(
fio_˛õ¡
 *
˛õ¡
)

1770 
˛õ¡_›s
 *
›s
 = 
˛õ¡
->ops;

1771 
fio_√t_cmd
 *
cmd
;

1773 
	`d¥öt
(
FD_NET
, "˛õ¡: h™dÀ %s\n", 
˛õ¡
->
ho°«me
);

1775 
cmd
 = 
	`fio_√t_ªcv_cmd
(
˛õ¡
->
fd
, 
åue
);

1776 i‡(!
cmd
)

1779 
	`d¥öt
(
FD_NET
, "client: got cmd op %s from %s (pdu=%u)\n",

1780 
	`fio_£rvî_›
(
cmd
->
›code
), 
˛õ¡
->
ho°«me
, cmd->
pdu_Àn
);

1782 
˛õ¡
->
œ°_cmd
 = 
cmd
->
›code
;

1784 
cmd
->
›code
) {

1785 
FIO_NET_CMD_QUIT
:

1786 i‡(
›s
->
quô
)

1787 
›s
->
	`quô
(
˛õ¡
, 
cmd
);

1788 
	`ªmove_˛õ¡
(
˛õ¡
);

1790 
FIO_NET_CMD_TEXT
:

1791 
	`c⁄vît_ãxt
(
cmd
);

1792 
›s
->
	`ãxt
(
˛õ¡
, 
cmd
);

1794 
FIO_NET_CMD_DU
: {

1795 
cmd_du_pdu
 *
du
 = (cmd_du_pdu *Ë
cmd
->
∑ylﬂd
;

1797 
	`c⁄vît_dus
(&
du
->
dus
);

1798 
	`c⁄vît_agg
(&
du
->
agg
);

1800 
›s
->
	`disk_utû
(
˛õ¡
, 
cmd
);

1803 
FIO_NET_CMD_TS
: {

1804 
cmd_ts_pdu
 *
p
 = (cmd_ts_pdu *Ë
cmd
->
∑ylﬂd
;

1805 
uöt64_t
 
off£t
;

1806 
i
;

1808 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

1809 i‡(
	`À32_to_˝u
(
p
->
ts
.
ƒ_˛©_¥io
[
i
])) {

1810 
off£t
 = 
	`À64_to_˝u
(
p
->
ts
.
˛©_¥io_off£t
[
i
]);

1811 
p
->
ts
.
˛©_¥io
[
i
] =

1812 (
˛©_¥io_°©
 *)((*)
p
 + 
off£t
);

1816 
	`d¥öt
(
FD_NET
, "˛õ¡:Ås->ss_°©ê%u\n", (Ë
	`À32_to_˝u
(
p
->
ts
.
ss_°©e
));

1817 i‡(
	`À32_to_˝u
(
p
->
ts
.
ss_°©e
Ë& 
FIO_SS_DATA
) {

1818 
	`d¥öt
(
FD_NET
, "client:Ñeceived steadystateÑing buffers\n");

1820 
off£t
 = 
	`À64_to_˝u
(
p
->
ts
.
ss_i›s_d©a_off£t
);

1821 
p
->
ts
.
ss_i›s_d©a
 = (
uöt64_t
 *)((*Ì + 
off£t
);

1823 
off£t
 = 
	`À64_to_˝u
(
p
->
ts
.
ss_bw_d©a_off£t
);

1824 
p
->
ts
.
ss_bw_d©a
 = (
uöt64_t
 *)((*Ì + 
off£t
);

1827 
	`c⁄vît_ts
(&
p
->
ts
, &p->ts);

1828 
	`c⁄vît_gs
(&
p
->
rs
, &p->rs);

1830 
›s
->
	`thªad_°©us
(
˛õ¡
, 
cmd
);

1833 
FIO_NET_CMD_GS
: {

1834 
group_run_°©s
 *
gs
 = (group_run_°©†*Ë
cmd
->
∑ylﬂd
;

1836 
	`c⁄vît_gs
(
gs
, gs);

1838 
›s
->
	`group_°©s
(
˛õ¡
, 
cmd
);

1841 
FIO_NET_CMD_ETA
: {

1842 
jobs_ëa
 *
je
 = (jobs_ë®*Ë
cmd
->
∑ylﬂd
;

1844 i‡(!
	`ªmove_ª∂y_cmd
(
˛õ¡
, 
cmd
))

1846 
	`c⁄vît_jobs_ëa
(
je
);

1847 
	`h™dÀ_ëa
(
˛õ¡
, 
cmd
);

1850 
FIO_NET_CMD_PROBE
:

1851 
	`ªmove_ª∂y_cmd
(
˛õ¡
, 
cmd
);

1852 
›s
->
	`¥obe
(
˛õ¡
, 
cmd
);

1854 
FIO_NET_CMD_SERVER_START
:

1855 
˛õ¡
->
°©e
 = 
Clõ¡_ru¬ög
;

1856 i‡(
›s
->
job_°¨t
)

1857 
›s
->
	`job_°¨t
(
˛õ¡
, 
cmd
);

1859 
FIO_NET_CMD_START
: {

1860 
cmd_°¨t_pdu
 *
pdu
 = (cmd_°¨t_pdu *Ë
cmd
->
∑ylﬂd
;

1862 
pdu
->
jobs
 = 
	`À32_to_˝u
(pdu->jobs);

1863 
›s
->
	`°¨t
(
˛õ¡
, 
cmd
);

1866 
FIO_NET_CMD_STOP
: {

1867 
cmd_íd_pdu
 *
pdu
 = (cmd_íd_pdu *Ë
cmd
->
∑ylﬂd
;

1869 
	`c⁄vît_°›
(
cmd
);

1870 
˛õ¡
->
°©e
 = 
Clõ¡_°›≥d
;

1871 
˛õ¡
->
îr‹
 = 
	`À32_to_˝u
(
pdu
->error);

1872 
˛õ¡
->
sig«l
 = 
	`À32_to_˝u
(
pdu
->signal);

1873 
›s
->
	`°›
(
˛õ¡
);

1876 
FIO_NET_CMD_ADD_JOB
: {

1877 
cmd_add_job_pdu
 *
pdu
 = (cmd_add_job_pdu *Ë
cmd
->
∑ylﬂd
;

1879 
˛õ¡
->
thªad_numbî
 = 
	`À32_to_˝u
(
pdu
->thread_number);

1880 
˛õ¡
->
groupid
 = 
	`À32_to_˝u
(
pdu
->groupid);

1882 i‡(
›s
->
add_job
)

1883 
›s
->
	`add_job
(
˛õ¡
, 
cmd
);

1886 
FIO_NET_CMD_IOLOG
:

1887 
	`fio_˛õ¡_h™dÀ_iﬁog
(
˛õ¡
, 
cmd
);

1889 
FIO_NET_CMD_UPDATE_JOB
:

1890 
›s
->
	`upd©e_job
(
˛õ¡
, 
cmd
);

1891 
	`ªmove_ª∂y_cmd
(
˛õ¡
, 
cmd
);

1893 
FIO_NET_CMD_VTRIGGER
: {

1894 
Æl_io_li°
 *
pdu
 = (Æl_io_li° *Ë
cmd
->
∑ylﬂd
;

1895 
buf
[128];

1896 
off
 = 0;

1898 i‡(
aux_∑th
) {

1899 
	`°r˝y
(
buf
, 
aux_∑th
);

1900 
off
 = 
	`°æí
(
buf
);

1903 
	`__vîify_ßve_°©e
(
pdu
, 
	`£rvî_«me
(
˛õ¡
, &
buf
[
off
], (buf) - off));

1904 
	`exec_åiggî
(
åiggî_cmd
);

1907 
FIO_NET_CMD_SENDFILE
: {

1908 
cmd_£ndfûe
 *
pdu
 = (cmd_£ndfûê*Ë
cmd
->
∑ylﬂd
;

1909 
	`fio_£nd_fûe
(
˛õ¡
, 
pdu
, 
cmd
->
èg
);

1912 
FIO_NET_CMD_JOB_OPT
: {

1913 
	`h™dÀ_job_›t
(
˛õ¡
, 
cmd
);

1917 
	`log_îr
("fio: unknow¿˛õ¡ op: %s\n", 
	`fio_£rvî_›
(
cmd
->
›code
));

1921 
	`‰ì
(
cmd
);

1923 
	}
}

1925 
	$fio_˛õ¡s_£nd_åiggî
(c⁄° *
cmd
)

1927 
Êi°_hód
 *
íåy
;

1928 
fio_˛õ¡
 *
˛õ¡
;

1929 
size_t
 
¶í
;

1931 
	`d¥öt
(
FD_NET
, "˛õ¡: síd våiggî: %s\n", 
cmd
);

1933 i‡(!
cmd
)

1934 
¶í
 = 0;

1936 
¶í
 = 
	`°æí
(
cmd
);

1938 
	`Êi°_f‹_óch
(
íåy
, &
˛õ¡_li°
) {

1939 
cmd_våiggî_pdu
 *
pdu
;

1941 
˛õ¡
 = 
	`Êi°_íåy
(
íåy
, 
fio_˛õ¡
, 
li°
);

1943 
pdu
 = 
	`mÆloc
((*pduË+ 
¶í
);

1944 
pdu
->
Àn
 = 
	`˝u_to_À16
((
uöt16_t
Ë
¶í
);

1945 i‡(
¶í
)

1946 
	`mem˝y
(
pdu
->
cmd
, cmd, 
¶í
);

1947 
	`fio_√t_£nd_cmd
(
˛õ¡
->
fd
, 
FIO_NET_CMD_VTRIGGER
, 
pdu
,

1948 (*
pdu
Ë+ 
¶í
, 
NULL
, NULL);

1949 
	`‰ì
(
pdu
);

1953 
	}
}

1955 
	$ªque°_˛õ¡_ëas
(
˛õ¡_›s
 *
›s
)

1957 
fio_˛õ¡
 *
˛õ¡
;

1958 
Êi°_hód
 *
íåy
;

1959 
˛õ¡_ëa
 *
ëa
;

1960 
skù≥d
 = 0;

1962 i‡(
ëa_¥öt
 =
FIO_ETA_NEVER
)

1965 
	`d¥öt
(
FD_NET
, "˛õ¡:Ñeque°Éè (%d)\n", 
ƒ_˛õ¡s
);

1967 
ëa
 = 
	`ˇŒoc
(1, (*ëaË+ 
	`__THREAD_RUNSTR_SZ
(
REAL_MAX_JOBS
));

1968 
ëa
->
≥ndög
 = 
ƒ_˛õ¡s
;

1970 
	`Êi°_f‹_óch
(
íåy
, &
˛õ¡_li°
) {

1971 
˛õ¡
 = 
	`Êi°_íåy
(
íåy
, 
fio_˛õ¡
, 
li°
);

1973 i‡(!
	`Êi°_em±y
(&
˛õ¡
->
ëa_li°
)) {

1974 
skù≥d
++;

1977 i‡(
˛õ¡
->
°©e
 !
Clõ¡_ru¬ög
)

1980 
	`as£π
(!
˛õ¡
->
ëa_ö_Êight
);

1981 
	`Êi°_add_èû
(&
˛õ¡
->
ëa_li°
, &eta_list);

1982 
˛õ¡
->
ëa_ö_Êight
 = 
ëa
;

1983 
	`fio_√t_£nd_sim∂e_cmd
(
˛õ¡
->
fd
, 
FIO_NET_CMD_SEND_ETA
,

1984 (
uöçå_t
Ë
ëa
, &
˛õ¡
->
cmd_li°
);

1987 
skù≥d
--) {

1988 i‡(!
	`fio_˛õ¡_dec_jobs_ëa
(
ëa
, 
›s
->eta))

1992 
	`d¥öt
(
FD_NET
, "˛õ¡:Ñeque°edÉèÅag %p\n", 
ëa
);

1993 
	}
}

1998 
	$h™dÀ_cmd_timeout
(
fio_˛õ¡
 *
˛õ¡
,

1999 
fio_√t_cmd_ª∂y
 *
ª∂y
)

2001 
uöt16_t
 
ª∂y_›code
 = 
ª∂y
->
›code
;

2003 
	`Êi°_dñ
(&
ª∂y
->
li°
);

2004 
	`‰ì
(
ª∂y
);

2006 i‡(
ª∂y_›code
 !
FIO_NET_CMD_SEND_ETA
)

2009 
	`log_öfo
("˛õ¡ <%s>:Åimeouà⁄ SEND_ETA\n", 
˛õ¡
->
ho°«me
);

2011 
	`Êi°_dñ_öô
(&
˛õ¡
->
ëa_li°
);

2012 i‡(
˛õ¡
->
ëa_ö_Êight
) {

2013 
	`fio_˛õ¡_dec_jobs_ëa
(
˛õ¡
->
ëa_ö_Êight
, clõ¡->
›s
->
ëa
);

2014 
˛õ¡
->
ëa_ö_Êight
 = 
NULL
;

2020 i‡(
˛õ¡
->
ëa_timeouts
++ > 5)

2024 
	}
}

2026 
	$˛õ¡_check_cmd_timeout
(
fio_˛õ¡
 *
˛õ¡
,

2027 
time•ec
 *
now
)

2029 
fio_√t_cmd_ª∂y
 *
ª∂y
;

2030 
Êi°_hód
 *
íåy
, *
tmp
;

2031 
ªt
 = 0;

2033 
	`Êi°_f‹_óch_ß„
(
íåy
, 
tmp
, &
˛õ¡
->
cmd_li°
) {

2034 
›
;

2036 
ª∂y
 = 
	`Êi°_íåy
(
íåy
, 
fio_√t_cmd_ª∂y
, 
li°
);

2038 i‡(
	`mtime_sö˚
(&
ª∂y
->
ts
, 
now
Ë< 
FIO_NET_CLIENT_TIMEOUT
)

2041 
›
 = 
ª∂y
->
›code
;

2042 i‡(!
	`h™dÀ_cmd_timeout
(
˛õ¡
, 
ª∂y
))

2045 
	`log_îr
("fio: clõ¡ %s,Åimeouà⁄ cmd %s\n", 
˛õ¡
->
ho°«me
,

2046 
	`fio_£rvî_›
(
›
));

2047 
ªt
 = 1;

2050  
	`Êi°_em±y
(&
˛õ¡
->
cmd_li°
Ë&& 
ªt
;

2051 
	}
}

2053 
	$fio_check_˛õ¡s_timed_out
()

2055 
fio_˛õ¡
 *
˛õ¡
;

2056 
Êi°_hód
 *
íåy
, *
tmp
;

2057 
time•ec
 
ts
;

2058 
ªt
 = 0;

2060 
	`fio_gëtime
(&
ts
, 
NULL
);

2062 
	`Êi°_f‹_óch_ß„
(
íåy
, 
tmp
, &
˛õ¡_li°
) {

2063 
˛õ¡
 = 
	`Êi°_íåy
(
íåy
, 
fio_˛õ¡
, 
li°
);

2065 i‡(
	`Êi°_em±y
(&
˛õ¡
->
cmd_li°
))

2068 i‡(!
	`˛õ¡_check_cmd_timeout
(
˛õ¡
, &
ts
))

2071 i‡(
˛õ¡
->
›s
->
timed_out
)

2072 
˛õ¡
->
›s
->
	`timed_out
(client);

2074 
	`log_îr
("fio: clõ¡ %†timed out\n", 
˛õ¡
->
ho°«me
);

2076 i‡(
˛õ¡
->
œ°_cmd
 !
FIO_NET_CMD_VTRIGGER
)

2077 
˛õ¡
->
îr‹
 = 
ETIMEDOUT
;

2079 
	`log_öfo
("fio: ignoringÅimeout dueÅo vtrigger\n");

2080 
	`ªmove_˛õ¡
(
˛õ¡
);

2081 
ªt
 = 1;

2084  
ªt
;

2085 
	}
}

2087 
	$fio_h™dÀ_˛õ¡s
(
˛õ¡_›s
 *
›s
)

2089 
pﬁlfd
 *
pfds
;

2090 
i
, 
ªt
 = 0, 
ªtvÆ
 = 0;

2092 
	`fio_gëtime
(&
ëa_ts
, 
NULL
);

2094 
pfds
 = 
	`mÆloc
(
ƒ_˛õ¡s
 * (
pﬁlfd
));

2096 
	`öô_thªad_°©
(&
˛õ¡_ts
);

2097 
	`öô_group_run_°©
(&
˛õ¡_gs
);

2099 !
exô_backíd
 && 
ƒ_˛õ¡s
) {

2100 
Êi°_hód
 *
íåy
, *
tmp
;

2101 
fio_˛õ¡
 *
˛õ¡
;

2103 
i
 = 0;

2104 
	`Êi°_f‹_óch_ß„
(
íåy
, 
tmp
, &
˛õ¡_li°
) {

2105 
˛õ¡
 = 
	`Êi°_íåy
(
íåy
, 
fio_˛õ¡
, 
li°
);

2107 i‡(!
˛õ¡
->
£¡_job
 && !˛õ¡->
›s
->
°ay_c⁄√˘ed
 &&

2108 
	`Êi°_em±y
(&
˛õ¡
->
cmd_li°
)) {

2109 
	`ªmove_˛õ¡
(
˛õ¡
);

2113 
pfds
[
i
].
fd
 = 
˛õ¡
->fd;

2114 
pfds
[
i
].
evíts
 = 
POLLIN
;

2115 
i
++;

2118 i‡(!
ƒ_˛õ¡s
)

2121 
	`as£π
(
i
 =
ƒ_˛õ¡s
);

2124 
time•ec
 
ts
;

2125 
timeout
;

2127 
	`fio_gëtime
(&
ts
, 
NULL
);

2128 i‡(
	`ëa_time_wôhö_¶ack
(
	`mtime_sö˚
(&
ëa_ts
, &
ts
))) {

2129 
	`ªque°_˛õ¡_ëas
(
›s
);

2130 
	`mem˝y
(&
ëa_ts
, &
ts
, (ts));

2132 i‡(
	`fio_check_˛õ¡s_timed_out
())

2136 
	`check_åiggî_fûe
();

2138 
timeout
 = 
	`mö
(100u, 
›s
->
ëa_m£c
);

2140 
ªt
 = 
	`pﬁl
(
pfds
, 
ƒ_˛õ¡s
, 
timeout
);

2141 i‡(
ªt
 < 0) {

2142 i‡(
î∫o
 =
EINTR
)

2144 
	`log_îr
("fio:Öﬁ»˛õ¡s: %s\n", 
	`°ªº‹
(
î∫o
));

2146 } i‡(!
ªt
)

2148 } 
ªt
 <= 0);

2150 
i
 = 0; i < 
ƒ_˛õ¡s
; i++) {

2151 i‡(!(
pfds
[
i
].
ªvíts
 & 
POLLIN
))

2154 
˛õ¡
 = 
	`föd_˛õ¡_by_fd
(
pfds
[
i
].
fd
);

2155 i‡(!
˛õ¡
) {

2156 
	`log_îr
("fio: unknow¿˛õ¡ fd %ld\n", (Ë
pfds
[
i
].
fd
);

2159 i‡(!
	`fio_h™dÀ_˛õ¡
(
˛õ¡
)) {

2160 
	`log_öfo
("client: host=%s disconnected\n",

2161 
˛õ¡
->
ho°«me
);

2162 
	`ªmove_˛õ¡
(
˛õ¡
);

2163 
ªtvÆ
 = 1;

2164 } i‡(
˛õ¡
->
îr‹
)

2165 
ªtvÆ
 = 1;

2166 
	`fio_put_˛õ¡
(
˛õ¡
);

2170 
	`log_öfo_buf
(
Æl˛õ¡s
.
buf
,áŒ˛õ¡s.
buÊí
);

2171 
	`buf_ouçut_‰ì
(&
Æl˛õ¡s
);

2173 
	`fio_˛õ¡_js⁄_föi
();

2175 
	`‰ì_˛©_¥io_°©s
(&
˛õ¡_ts
);

2176 
	`‰ì
(
pfds
);

2177  
ªtvÆ
 || 
îr‹_˛õ¡s
;

2178 
	}
}

2180 
	$˛õ¡_di•œy_thªad_°©us
(
jobs_ëa
 *
je
)

2182 i‡(!(
ouçut_f‹m©
 & 
FIO_OUTPUT_JSON
))

2183 
	`di•œy_thªad_°©us
(
je
);

2184 
	}
}

	@client.h

1 #i‚de‡
CLIENT_H


2 
	#CLIENT_H


	)

4 
	~<sys/un.h
>

5 
	~<√töë/ö.h
>

6 
	~<¨∑/öë.h
>

8 
	~"lib/ty≥s.h
"

9 
	~"°©.h
"

11 
	gfio_√t_cmd
;

14 
	mClõ¡_¸óãd
 = 0,

15 
	mClõ¡_c⁄√˘ed
 = 1,

16 
	mClõ¡_°¨ãd
 = 2,

17 
	mClõ¡_ru¬ög
 = 3,

18 
	mClõ¡_°›≥d
 = 4,

19 
	mClõ¡_exôed
 = 5,

22 
	s˛õ¡_fûe
 {

23 *
	mfûe
;

24 
boﬁ
 
	mªmŸe
;

27 
	sfio_˛õ¡
 {

28 
Êi°_hód
 
	mli°
;

29 
Êi°_hód
 
	mhash_li°
;

30 
Êi°_hód
 
	m¨g_li°
;

32 
sockaddr_ö
 
	maddr
;

33 
sockaddr_ö6
 
	maddr6
;

34 
sockaddr_un
 
	maddr_un
;

36 *
	mho°«me
;

37 
	mp‹t
;

38 
	mfd
;

39 
	mªfs
;

40 
	mœ°_cmd
;

42 *
	m«me
;

44 
Êi°_hód
 *
	m›t_li°s
;

46 
	m°©e
;

48 
boﬁ
 
	mskù_√wlöe
;

49 
boﬁ
 
	mis_sock
;

50 
boﬁ
 
	mdisk_°©s_shown
;

51 
	mjobs
;

52 
	mƒ_°©
;

53 
	mîr‹
;

54 
	msig«l
;

55 
	mùv6
;

56 
boﬁ
 
	m£¡_job
;

57 
boﬁ
 
	mdid_°©
;

58 
uöt32_t
 
	mty≥
;

60 
uöt32_t
 
	mthªad_numbî
;

61 
uöt32_t
 
	mgroupid
;

63 
Êi°_hód
 
	mëa_li°
;

64 
˛õ¡_ëa
 *
	mëa_ö_Êight
;

65 
	mëa_timeouts
;

67 
Êi°_hód
 
	mcmd_li°
;

69 
uöt16_t
 
	m¨gc
;

70 **
	m¨gv
;

72 
˛õ¡_›s
 *
	m›s
;

73 *
	m˛õ¡_d©a
;

75 
˛õ¡_fûe
 *
	mfûes
;

76 
	mƒ_fûes
;

78 
buf_ouçut
 
	mbuf
;

81 (
	t˛õ¡_cmd_›
)(
	tfio_˛õ¡
 *, 
	tfio_√t_cmd
 *);

82 (
	t˛õ¡_›
)(
	tfio_˛õ¡
 *);

83 (
	t˛õ¡_ëa_›
)(
	tjobs_ëa
 *
	tje
);

84 (
	t˛õ¡_timed_out_›
)(
	tfio_˛õ¡
 *);

85 (
	t˛õ¡_jobs_ëa_›
)(
	tfio_˛õ¡
 *
	t˛õ¡
, 
	tjobs_ëa
 *
	tje
);

87 
˛õ¡_›s
 
fio_˛õ¡_›s
;

89 
	s˛õ¡_›s
 {

90 
˛õ¡_cmd_›
 *
ãxt
;

91 
˛õ¡_cmd_›
 *
disk_utû
;

92 
˛õ¡_cmd_›
 *
thªad_°©us
;

93 
˛õ¡_cmd_›
 *
group_°©s
;

94 
˛õ¡_jobs_ëa_›
 *
jobs_ëa
;

95 
˛õ¡_ëa_›
 *
ëa
;

96 
˛õ¡_cmd_›
 *
¥obe
;

97 
˛õ¡_cmd_›
 *
quô
;

98 
˛õ¡_cmd_›
 *
add_job
;

99 
˛õ¡_cmd_›
 *
upd©e_job
;

100 
˛õ¡_timed_out_›
 *
timed_out
;

101 
˛õ¡_›
 *
°›
;

102 
˛õ¡_cmd_›
 *
°¨t
;

103 
˛õ¡_cmd_›
 *
job_°¨t
;

104 
˛õ¡_timed_out_›
 *
ªmoved
;

106 
ëa_m£c
;

107 
°ay_c⁄√˘ed
;

108 
uöt32_t
 
˛õ¡_ty≥
;

111 
	s˛õ¡_ëa
 {

112 
≥ndög
;

113 
jobs_ëa
 
ëa
;

116 
	`fio_h™dÀ_˛õ¡
(
fio_˛õ¡
 *);

117 
	`fio_˛õ¡_sum_jobs_ëa
(
jobs_ëa
 *
d°
, jobs_ë®*
je
);

120 
Fio_˛õ¡_ùv4
 = 1,

121 
Fio_˛õ¡_ùv6
,

122 
Fio_˛õ¡_sockë
,

125 
	`fio_˛õ¡_c⁄√˘
(
fio_˛õ¡
 *);

126 
	`fio_˛õ¡s_c⁄√˘
();

127 
	`fio_°¨t_˛õ¡
(
fio_˛õ¡
 *);

128 
	`fio_°¨t_Æl_˛õ¡s
();

129 
	`fio_˛õ¡s_£nd_öi
(const *);

130 
	`fio_˛õ¡_£nd_öi
(
fio_˛õ¡
 *, c⁄° *, 
boﬁ
);

131 
	`fio_h™dÀ_˛õ¡s
(
˛õ¡_›s
 *);

132 
	`fio_˛õ¡_add
(
˛õ¡_›s
 *, const *, **);

133 
fio_˛õ¡
 *
	`fio_˛õ¡_add_ex∂icô
(
˛õ¡_›s
 *, const *, , );

134 
	`fio_˛õ¡_add_cmd_›ti⁄
(*, const *);

135 
	`fio_˛õ¡_add_öi_fûe
(*, c⁄° *, 
boﬁ
);

136 
	`fio_˛õ¡_ãrmö©e
(
fio_˛õ¡
 *);

137 
fio_˛õ¡
 *
	`fio_gë_˛õ¡
(fio_client *);

138 
	`fio_put_˛õ¡
(
fio_˛õ¡
 *);

139 
	`fio_˛õ¡_upd©e_›ti⁄s
(
fio_˛õ¡
 *, 
thªad_›ti⁄s
 *, 
uöt64_t
 *);

140 
	`fio_˛õ¡_waô_f‹_ª∂y
(
fio_˛õ¡
 *, 
uöt64_t
);

141 
	`fio_˛õ¡s_£nd_åiggî
(const *);

143 
	#FIO_CLIENT_DEF_ETA_MSEC
 900

	)

146 
FIO_CLIENT_TYPE_CLI
 = 1,

147 
FIO_CLIENT_TYPE_GUI
 = 2,

150 
sum_°©_˛õ¡s
;

151 
thªad_°©
 
˛õ¡_ts
;

152 
group_run_°©s
 
˛õ¡_gs
;

	@compiler/compiler.h

1 #i‚de‡
FIO_COMPILER_H


2 
	#FIO_COMPILER_H


	)

4 
	#__mu°_check
 
	`__©åibuã__
((
w¨n_unu£d_ªsu…
))

	)

6 
	#__compûëime_w¨nög
(
mesßge
Ë
	`__©åibuã__
((
	`w¨nög
(mesßge)))

	)

7 
	#__compûëime_îr‹
(
mesßge
Ë
	`__©åibuã__
((
	`îr‹
(mesßge)))

	)

12 
	#fio_unu£d
 
	`__©åibuã__
((
__unu£d__
))

	)

13 
	#fio_öô
 
	`__©åibuã__
((
c⁄°ru˘‹
))

	)

14 
	#fio_exô
 
	`__©åibuã__
((
de°ru˘‹
))

	)

16 
	#fio_u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 0)

	)

22 
	#ty≥check
(
ty≥
,
x
) \

23 ({ 
ty≥
 
__dummy
; \

24 
	`__ty≥of__
(
x
Ë
__dummy2
; \

25 ()(&
__dummy
 =&
__dummy2
); \

27 })

	)

30 #i‡
deföed
(
CONFIG_STATIC_ASSERT
)

31 
	#compûëime_as£π
(
c⁄dôi⁄
, 
msg
Ë
	`_Sètic_as£π
(c⁄dôi⁄, msg)

	)

33 #ñi‡!
deföed
(
CONFIG_DISABLE_OPTIMIZATIONS
)

35 #i‚de‡
__compûëime_îr‹


36 
	#__compûëime_îr‹
(
mesßge
)

	)

39 #i‚de‡
__compûëime_îr‹_ÁŒback


40 
	#__compûëime_îr‹_ÁŒback
(
c⁄dôi⁄
Ëdÿ{ } 0)

	)

43 
	#__compûëime_as£π
(
c⁄dôi⁄
, 
msg
, 
¥efix
, 
suffix
) \

45 
__c⁄d
 = !(
c⁄dôi⁄
); \

46 
¥efix
 ## 
	`suffix
(Ë
	`__compûëime_îr‹
(
msg
); \

47 i‡(
__c⁄d
) \

48 
¥efix
 ## 
	`suffix
(); \

49 
	`__compûëime_îr‹_ÁŒback
(
__c⁄d
); \

50 } 0)

	)

52 
	#_compûëime_as£π
(
c⁄dôi⁄
, 
msg
, 
¥efix
, 
suffix
) \

53 
	`__compûëime_as£π
(
c⁄dôi⁄
, 
msg
, 
¥efix
, 
suffix
)

	)

55 
	#compûëime_as£π
(
c⁄dôi⁄
, 
msg
) \

56 
	`_compûëime_as£π
(
c⁄dôi⁄
, 
msg
, 
__compûëime_as£π_
, 
__LINE__
)

	)

60 
	#compûëime_as£π
(
c⁄dôi⁄
, 
msg
Ëdÿ{ } 0)

	)

64 #ifde‡
FIO_INTERNAL


65 
	#FIO_ARRAY_SIZE
(
x
Ë(((x)Ë/ (((x)[0])))

	)

66 
	#FIO_FIELD_SIZE
(
s
, 
f
Ë((((
	`__ty≥of__
(s))0)->f))

	)

69 #i‚de‡
__has_©åibuã


70 
	#__has_©åibuã
(
x
Ë
__GCC4_has_©åibuã_
##
	)
x

71 
	#__GCC4_has_©åibuã___ÁŒthrough__
 0

	)

74 #i‡
__has_©åibuã
(
__ÁŒthrough__
)

75 
	#fio_ÁŒthrough
 
	`__©åibuã__
((
__ÁŒthrough__
))

	)

77 
	#fio_ÁŒthrough
 dÿ{} 0Ë

	)

	@config-host.h

5 
	#CONFIG_64BIT


	)

6 
	#CONFIG_LITTLE_ENDIAN


	)

7 
	#CONFIG_ZLIB


	)

8 
	#CONFIG_POSIXAIO


	)

9 
	#CONFIG_POSIXAIO_FSYNC


	)

10 
	#CONFIG_PSHARED


	)

11 
	#CONFIG_PTHREAD_CONDATTR_SETCLOCK


	)

12 
	#CONFIG_PTHREAD_SIGMASK


	)

13 
	#CONFIG_PTHREAD_GETAFFINITY


	)

14 
	#CONFIG_HAVE_ASPRINTF


	)

15 
	#CONFIG_HAVE_VASPRINTF


	)

16 
	#CONFIG_LINUX_FALLOCATE


	)

17 
	#CONFIG_POSIX_FALLOCATE


	)

18 
	#CONFIG_FDATASYNC


	)

19 
	#CONFIG_PIPE


	)

20 
	#CONFIG_PIPE2


	)

21 
	#CONFIG_PREAD


	)

22 
	#CONFIG_SYNC_FILE_RANGE


	)

23 
	#CONFIG_SFAA


	)

24 
	#CONFIG_SYNC_SYNC


	)

25 
	#CONFIG_CMP_SWAP


	)

26 
	#CONFIG_CLOCK_GETTIME


	)

27 
	#CONFIG_CLOCK_MONOTONIC


	)

28 
	#CONFIG_CLOCKID_T


	)

29 
	#CONFIG_GETTIMEOFDAY


	)

30 
	#CONFIG_POSIX_FADVISE


	)

31 
	#CONFIG_3ARG_AFFINITY


	)

32 
	#CONFIG_STRSEP


	)

33 
	#CONFIG_STRCASESTR


	)

34 
	#CONFIG_GETOPT_LONG_ONLY


	)

35 
	#CONFIG_INET_ATON


	)

36 
	#CONFIG_SOCKLEN_T


	)

37 
	#CONFIG_LINUX_EXT4_MOVE_EXTENT


	)

38 
	#CONFIG_LINUX_SPLICE


	)

39 
	#CONFIG_TLS_THREAD


	)

40 
	#CONFIG_RUSAGE_THREAD


	)

41 
	#CONFIG_SCHED_IDLE


	)

42 
	#CONFIG_TCP_NODELAY


	)

43 
	#CONFIG_NET_WINDOWSIZE


	)

44 
	#CONFIG_NET_MSS


	)

45 
	#CONFIG_RLIMIT_MEMLOCK


	)

46 
	#CONFIG_PWRITEV


	)

47 
	#CONFIG_PWRITEV2


	)

48 
	#CONFIG_IPV6


	)

49 
	#CONFIG_SETVBUF


	)

50 
	#CONFIG_MTD


	)

51 
	#CONFIG_ARITHMETIC


	)

52 
	#CONFIG_GETMNTENT


	)

53 
	#CONFIG_STATIC_ASSERT


	)

54 
	#CONFIG_HAVE_BOOL


	)

55 
	#CONFIG_HAVE_STRNDUP


	)

56 
	#CONFIG_HAS_BLKZONED


	)

57 
	#CONFIG_BUILD_NATIVE


	)

58 
	#CONFIG_HAVE_KERNEL_RWF_T


	)

59 
	#CONFIG_HAVE_GETTID


	)

60 
	#CONFIG_HAVE_STATX


	)

61 
	#CONFIG_HAVE_STATX_SYSCALL


	)

62 
	#CONFIG_HAVE_TIMERFD_CREATE


	)

63 
	#CONFIG_HAVE_THP


	)

64 
	#CONFIG_SEED_BUCKETS
 4

	)

	@crc/crc16.c

8 
	~"¸c16.h
"

11 c⁄° 
	g¸c16_èbÀ
[256] = {

46 
	$fio_¸c16
(c⁄° *
buf„r
, 
Àn
)

48 c⁄° *
˝
 = (c⁄° *Ë
buf„r
;

49 
¸c
 = 0;

51 
Àn
--)

52 
¸c
 = 
	`¸c16_byã
(¸c, *
˝
++);

53  
¸c
;

54 
	}
}

	@crc/crc16.h

15 #i‚de‡
__CRC16_H


16 
	#__CRC16_H


	)

18 c⁄° 
¸c16_èbÀ
[256];

20 
fio_¸c16
(c⁄° *
buf„r
, 
Àn
);

22 
ölöe
 
	$¸c16_byã
(
¸c
,

23 c⁄° 
d©a
)

25  (
¸c
 >> 8Ë^ 
¸c16_èbÀ
[(¸¯^ 
d©a
) & 0xff];

26 
	}
}

	@crc/crc32.c

18 
	~"¸c32.h
"

20 c⁄° 
uöt32_t
 
	g¸˘ab
[256] = {

75 
uöt32_t
 
	$fio_¸c32
(c⁄° *
buf„r
, 
Àngth
)

77 c⁄° *
˝
 = (c⁄° *Ë
buf„r
;

78 
uöt32_t
 
¸c
 = 0;

80 
Àngth
--)

81 
¸c
 = (¸¯<< 8Ë^ 
¸˘ab
[((¸¯>> 24Ë^ *(
˝
++)) & 0xFF];

83  
¸c
;

84 
	}
}

	@crc/crc32.h

18 #i‚de‡
CRC32_H


19 
	#CRC32_H


	)

21 
	~<öây≥s.h
>

23 
uöt32_t
 
fio_¸c32
(const * const, );

	@crc/crc32c-arm64.c

1 
	~"¸c32c.h
"

2 
	~"../os/os.h
"

4 
boﬁ
 
	g¸c32c_¨m64_avaûabÀ
 = 
Ál£
;

6 #ifde‡
ARCH_HAVE_CRC_CRYPTO


8 
	#CRC32C3X8
(
ITR
) \

9 
¸c1
 = 
	`__¸c32cd
(¸c1, *((c⁄° 
uöt64_t
 *)
d©a
 + 42*1 + (
ITR
)));\

10 
¸c2
 = 
	`__¸c32cd
(¸c2, *((c⁄° 
uöt64_t
 *)
d©a
 + 42*2 + (
ITR
)));\

11 
¸c0
 = 
	`__¸c32cd
(¸c0, *((c⁄° 
uöt64_t
 *)
d©a
 + 42*0 + (
ITR
)));

	)

13 
	#CRC32C7X3X8
(
ITR
) do {\

14 
	`CRC32C3X8
((
ITR
)*7+0) \

15 
	`CRC32C3X8
((
ITR
)*7+1) \

16 
	`CRC32C3X8
((
ITR
)*7+2) \

17 
	`CRC32C3X8
((
ITR
)*7+3) \

18 
	`CRC32C3X8
((
ITR
)*7+4) \

19 
	`CRC32C3X8
((
ITR
)*7+5) \

20 
	`CRC32C3X8
((
ITR
)*7+6) \

21 } 0)

	)

23 
	~<¨m_a˛e.h
>

24 
	~<¨m_√⁄.h
>

26 
boﬁ
 
	g¸c32c_¥obed
;

32 
uöt32_t
 
	$¸c32c_¨m64
(c⁄° *
d©a
, 
Àngth
)

34 sig√d 
Àn
 = 
Àngth
;

35 
uöt32_t
 
¸c
 = ~0;

36 
uöt32_t
 
¸c0
, 
¸c1
, 
¸c2
;

39 c⁄° 
pﬁy64_t
 
k1
 = 0xe417f38a, 
k2
 = 0x8f158014;

40 
uöt64_t
 
t0
, 
t1
;

42 (
Àn
 -= 1024) >= 0) {

44 
¸c0
 = 
	`__¸c32cd
(
¸c
, *(c⁄° 
uöt64_t
 *)
d©a
);

45 
¸c1
 = 0;

46 
¸c2
 = 0;

47 
d©a
 +(
uöt64_t
);

51 
	`CRC32C7X3X8
(0);

52 
	`CRC32C7X3X8
(1);

53 
	`CRC32C7X3X8
(2);

54 
	`CRC32C7X3X8
(3);

55 
	`CRC32C7X3X8
(4);

56 
	`CRC32C7X3X8
(5);

58 
d©a
 +42*3*(
uöt64_t
);

64 
t1
 = (
uöt64_t
)
	`vmuŒ_p64
(
¸c1
, 
k2
);

65 
t0
 = (
uöt64_t
)
	`vmuŒ_p64
(
¸c0
, 
k1
);

66 
¸c
 = 
	`__¸c32cd
(
¸c2
, *(c⁄° 
uöt64_t
 *)
d©a
);

67 
¸c1
 = 
	`__¸c32cd
(0, 
t1
);

68 
¸c
 ^
¸c1
;

69 
¸c0
 = 
	`__¸c32cd
(0, 
t0
);

70 
¸c
 ^
¸c0
;

72 
d©a
 +(
uöt64_t
);

75 i‡(!(
Àn
 += 1024))

76  
¸c
;

78 (
Àn
 -(
uöt64_t
)) >= 0) {

79 
¸c
 = 
	`__¸c32cd
(¸c, *(c⁄° 
uöt64_t
 *)
d©a
);

80 
d©a
 +(
uöt64_t
);

84 i‡(
Àn
 & (
uöt32_t
)) {

85 
¸c
 = 
	`__¸c32cw
(¸c, *(c⁄° 
uöt32_t
 *)
d©a
);

86 
d©a
 +(
uöt32_t
);

88 i‡(
Àn
 & (
uöt16_t
)) {

89 
¸c
 = 
	`__¸c32ch
(¸c, *(c⁄° 
uöt16_t
 *)
d©a
);

90 
d©a
 +(
uöt16_t
);

92 i‡(
Àn
 & (
uöt8_t
)) {

93 
¸c
 = 
	`__¸c32cb
(¸c, *(c⁄° 
uöt8_t
 *)
d©a
);

96  
¸c
;

97 
	}
}

99 
	$¸c32c_¨m64_¥obe
()

101 i‡(!
¸c32c_¥obed
) {

102 
¸c32c_¨m64_avaûabÀ
 = 
	`os_˝u_has
(
CPU_ARM64_CRC32C
);

103 
¸c32c_¥obed
 = 
åue
;

105 
	}
}

	@crc/crc32c-intel.c

1 
	~"¸c32c.h
"

14 
boﬁ
 
	g¸c32c_öãl_avaûabÀ
 = 
Ál£
;

16 #ifde‡
ARCH_HAVE_SSE4_2


18 #i‡
BITS_PER_LONG
 == 64

19 
	#REX_PRE
 "0x48, "

	)

20 
	#SCALE_F
 8

	)

22 
	#REX_PRE


	)

23 
	#SCALE_F
 4

	)

26 
boﬁ
 
	g¸c32c_¥obed
;

28 
uöt32_t
 
	$¸c32c_öãl_À_hw_byã
(
uöt32_t
 
¸c
, c⁄° *
d©a
,

29 
Àngth
)

31 
Àngth
--) {

32 
__asm__
 
	`__vﬁ©ûe__
(

34 :"=S"(
¸c
)

35 :"0"(
¸c
), "c"(*
d©a
)

37 
d©a
++;

40  
¸c
;

41 
	}
}

47 
uöt32_t
 
	$¸c32c_öãl
(c⁄° *
d©a
, 
Àngth
)

49 
iquŸõ¡
 = 
Àngth
 / 
SCALE_F
;

50 
úemaödî
 = 
Àngth
 % 
SCALE_F
;

51 #i‡
BITS_PER_LONG
 == 64

52 
uöt64_t
 *
±mp
 = (uöt64_à*Ë
d©a
;

54 
uöt32_t
 *
±mp
 = (uöt32_à*Ë
d©a
;

56 
uöt32_t
 
¸c
 = ~0;

58 
iquŸõ¡
--) {

59 
__asm__
 
	`__vﬁ©ûe__
(

60 ".byã 0xf2, " 
REX_PRE
 "0xf, 0x38, 0xf1, 0xf1;"

61 :"=S"(
¸c
)

62 :"0"(
¸c
), "c"(*
±mp
)

64 
±mp
++;

67 i‡(
úemaödî
)

68 
¸c
 = 
	`¸c32c_öãl_À_hw_byã
(¸c, (*)
±mp
,

69 
úemaödî
);

71  
¸c
;

72 
	}
}

74 
	$¸c32c_öãl_¥obe
()

76 i‡(!
¸c32c_¥obed
) {

77 
óx
, 
ebx
, 
ecx
 = 0, 
edx
;

79 
óx
 = 1;

81 
	`do_˝uid
(&
óx
, &
ebx
, &
ecx
, &
edx
);

82 
¸c32c_öãl_avaûabÀ
 = (
ecx
 & (1 << 20)) != 0;

83 
¸c32c_¥obed
 = 
åue
;

85 
	}
}

	@crc/crc32c.c

33 
	~"¸c32c.h
"

44 c⁄° 
uöt32_t
 
	g¸c32c_èbÀ
[256] = {

116 
uöt32_t
 
	$¸c32c_sw
(c⁄° *
d©a
, 
Àngth
)

118 
uöt32_t
 
¸c
 = ~0;

120 
Àngth
--)

121 
¸c
 = 
¸c32c_èbÀ
[(¸¯^ *
d©a
++) & 0xFFL] ^ (crc >> 8);

123  
¸c
;

124 
	}
}

	@crc/crc32c.h

18 #i‚de‡
CRC32C_H


19 
	#CRC32C_H


	)

21 
	~<öây≥s.h
>

23 
	~"../¨ch/¨ch.h
"

24 
	~"../lib/ty≥s.h
"

26 
uöt32_t
 
¸c32c_sw
(const *, );

27 
boﬁ
 
¸c32c_¨m64_avaûabÀ
;

28 
boﬁ
 
¸c32c_öãl_avaûabÀ
;

30 #ifde‡
ARCH_HAVE_CRC_CRYPTO


31 
uöt32_t
 
¸c32c_¨m64
(const *, );

32 
¸c32c_¨m64_¥obe
();

34 
	#¸c32c_¨m64
 
¸c32c_sw


	)

35 
ölöe
 
	$¸c32c_¨m64_¥obe
()

37 
	}
}

40 #ifde‡
ARCH_HAVE_SSE4_2


41 
uöt32_t
 
¸c32c_öãl
(const *, );

42 
¸c32c_öãl_¥obe
();

44 
	#¸c32c_öãl
 
¸c32c_sw


	)

45 
ölöe
 
	$¸c32c_öãl_¥obe
()

47 
	}
}

50 
ölöe
 
uöt32_t
 
	$fio_¸c32c
(c⁄° *
buf
, 
Àn
)

52 i‡(
¸c32c_¨m64_avaûabÀ
)

53  
	`¸c32c_¨m64
(
buf
, 
Àn
);

55 i‡(
¸c32c_öãl_avaûabÀ
)

56  
	`¸c32c_öãl
(
buf
, 
Àn
);

58  
	`¸c32c_sw
(
buf
, 
Àn
);

59 
	}
}

	@crc/crc64.c

1 
	~"¸c64.h
"

6 c⁄° 
	g¸˘ab64
[256] = {

95 
	$fio_¸c64
(c⁄° *
buf„r
, 
Àngth
)

97 
¸c
 = 0;

99 
Àngth
--)

100 
¸c
 = 
¸˘ab64
[(¸¯^ *(
buf„r
++)) & 0xff] ^ (crc >> 8);

102  
¸c
;

103 
	}
}

	@crc/crc64.h

1 #i‚de‡
CRC64_H


2 
	#CRC64_H


	)

4 
fio_¸c64
(const *, );

	@crc/crc7.c

8 
	~"¸c7.h
"

11 c⁄° 
	g¸c7_syndrome_èbÀ
[256] = {

46 
	$fio_¸c7
(c⁄° *
buf„r
, 
Àn
)

48 
¸c
 = 0;

50 
Àn
--)

51 
¸c
 = 
	`¸c7_byã
(¸c, *
buf„r
++);

52  
¸c
;

53 
	}
}

	@crc/crc7.h

1 #i‚de‡
CRC7_H


2 
	#CRC7_H


	)

4 c⁄° 
¸c7_syndrome_èbÀ
[256];

6 
ölöe
 
	$¸c7_byã
(
¸c
, 
d©a
)

8  
¸c7_syndrome_èbÀ
[(
¸c
 << 1Ë^ 
d©a
];

9 
	}
}

11 
fio_¸c7
(c⁄° *
buf„r
, 
Àn
);

	@crc/fnv.c

1 
	~"‚v.h
"

3 
	#FNV_PRIME
 0x100000001b3ULL

	)

9 
uöt64_t
 
	$‚v
(c⁄° *
buf
, 
uöt32_t
 
Àn
, 
uöt64_t
 
hvÆ
)

11 c⁄° 
uöt64_t
 *
±r
 = 
buf
;

13 
Àn
) {

14 
hvÆ
 *
FNV_PRIME
;

15 i‡(
Àn
 >(
uöt64_t
)) {

16 
hvÆ
 ^(
uöt64_t
Ë*
±r
++;

17 
Àn
 -(
uöt64_t
);

20 c⁄° 
uöt8_t
 *
±r8
 = (c⁄° uöt8_à*Ë
±r
;

21 
uöt64_t
 
vÆ
 = 0;

22 
i
;

24 
i
 = 0; i < 
Àn
; i++) {

25 
vÆ
 <<= 8;

26 
vÆ
 |(
uöt8_t
Ë*
±r8
++;

28 
hvÆ
 ^
vÆ
;

33  
hvÆ
;

34 
	}
}

	@crc/fnv.h

1 #i‚de‡
FIO_FNV_H


2 
	#FIO_FNV_H


	)

4 
	~<öây≥s.h
>

6 
uöt64_t
 
‚v
(c⁄° *, 
uöt32_t
, uint64_t);

	@crc/md5.c

4 
	~<°rög.h
>

5 
	~"md5.h
"

7 
	$md5_å™sf‹m
(
uöt32_t
 *
hash
, uöt32_àc⁄° *
ö
)

9 
uöt32_t
 
a
, 
b
, 
c
, 
d
;

11 
a
 = 
hash
[0];

12 
b
 = 
hash
[1];

13 
c
 = 
hash
[2];

14 
d
 = 
hash
[3];

16 
	`MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[0] + 0xd76aa478, 7);

17 
	`MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[1] + 0xe8c7b756, 12);

18 
	`MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[2] + 0x242070db, 17);

19 
	`MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[3] + 0xc1bdceee, 22);

20 
	`MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[4] + 0xf57c0faf, 7);

21 
	`MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[5] + 0x4787c62a, 12);

22 
	`MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[6] + 0xa8304613, 17);

23 
	`MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[7] + 0xfd469501, 22);

24 
	`MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[8] + 0x698098d8, 7);

25 
	`MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[9] + 0x8b44f7af, 12);

26 
	`MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[10] + 0xffff5bb1, 17);

27 
	`MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[11] + 0x895cd7be, 22);

28 
	`MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[12] + 0x6b901122, 7);

29 
	`MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[13] + 0xfd987193, 12);

30 
	`MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[14] + 0xa679438e, 17);

31 
	`MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[15] + 0x49b40821, 22);

33 
	`MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[1] + 0xf61e2562, 5);

34 
	`MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[6] + 0xc040b340, 9);

35 
	`MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[11] + 0x265e5a51, 14);

36 
	`MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[0] + 0xe9b6c7aa, 20);

37 
	`MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[5] + 0xd62f105d, 5);

38 
	`MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[10] + 0x02441453, 9);

39 
	`MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[15] + 0xd8a1e681, 14);

40 
	`MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[4] + 0xe7d3fbc8, 20);

41 
	`MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[9] + 0x21e1cde6, 5);

42 
	`MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[14] + 0xc33707d6, 9);

43 
	`MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[3] + 0xf4d50d87, 14);

44 
	`MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[8] + 0x455a14ed, 20);

45 
	`MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[13] + 0xa9e3e905, 5);

46 
	`MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[2] + 0xfcefa3f8, 9);

47 
	`MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[7] + 0x676f02d9, 14);

48 
	`MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[12] + 0x8d2a4c8a, 20);

50 
	`MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[5] + 0xfffa3942, 4);

51 
	`MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[8] + 0x8771f681, 11);

52 
	`MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[11] + 0x6d9d6122, 16);

53 
	`MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[14] + 0xfde5380c, 23);

54 
	`MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[1] + 0xa4beea44, 4);

55 
	`MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[4] + 0x4bdecfa9, 11);

56 
	`MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[7] + 0xf6bb4b60, 16);

57 
	`MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[10] + 0xbebfbc70, 23);

58 
	`MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[13] + 0x289b7ec6, 4);

59 
	`MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[0] + 0xeaa127fa, 11);

60 
	`MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[3] + 0xd4ef3085, 16);

61 
	`MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[6] + 0x04881d05, 23);

62 
	`MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[9] + 0xd9d4d039, 4);

63 
	`MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[12] + 0xe6db99e5, 11);

64 
	`MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[15] + 0x1fa27cf8, 16);

65 
	`MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[2] + 0xc4ac5665, 23);

67 
	`MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[0] + 0xf4292244, 6);

68 
	`MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[7] + 0x432aff97, 10);

69 
	`MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[14] + 0xab9423a7, 15);

70 
	`MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[5] + 0xfc93a039, 21);

71 
	`MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[12] + 0x655b59c3, 6);

72 
	`MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[3] + 0x8f0ccc92, 10);

73 
	`MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[10] + 0xffeff47d, 15);

74 
	`MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[1] + 0x85845dd1, 21);

75 
	`MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[8] + 0x6fa87e4f, 6);

76 
	`MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[15] + 0xfe2ce6e0, 10);

77 
	`MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[6] + 0xa3014314, 15);

78 
	`MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[13] + 0x4e0811a1, 21);

79 
	`MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[4] + 0xf7537e82, 6);

80 
	`MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[11] + 0xbd3af235, 10);

81 
	`MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[2] + 0x2ad7d2bb, 15);

82 
	`MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[9] + 0xeb86d391, 21);

84 
hash
[0] +
a
;

85 
hash
[1] +
b
;

86 
hash
[2] +
c
;

87 
hash
[3] +
d
;

88 
	}
}

90 
	$fio_md5_öô
(
fio_md5_˘x
 *
m˘x
)

92 
m˘x
->
hash
[0] = 0x67452301;

93 
m˘x
->
hash
[1] = 0xefcdab89;

94 
m˘x
->
hash
[2] = 0x98badcfe;

95 
m˘x
->
hash
[3] = 0x10325476;

96 
	}
}

98 
	$fio_md5_upd©e
(
fio_md5_˘x
 *
m˘x
, c⁄° 
uöt8_t
 *
d©a
,

99 
Àn
)

101 c⁄° 
uöt32_t
 
avaû
 = (
m˘x
->
block
Ë- (m˘x->
byã_cou¡
 & 0x3f);

103 
m˘x
->
byã_cou¡
 +
Àn
;

105 i‡(
avaû
 > 
Àn
) {

106 
	`mem˝y
((*)
m˘x
->
block
 + ((m˘x->blockË- 
avaû
),

107 
d©a
, 
Àn
);

111 
	`mem˝y
((*)
m˘x
->
block
 + ((m˘x->blockË- 
avaû
),

112 
d©a
, 
avaû
);

114 
	`md5_å™sf‹m
(
m˘x
->
hash
, m˘x->
block
);

115 
d©a
 +
avaû
;

116 
Àn
 -
avaû
;

118 
Àn
 >(
m˘x
->
block
)) {

119 
	`mem˝y
(
m˘x
->
block
, 
d©a
, (mctx->block));

120 
	`md5_å™sf‹m
(
m˘x
->
hash
, m˘x->
block
);

121 
d©a
 +(
m˘x
->
block
);

122 
Àn
 -(
m˘x
->
block
);

125 
	`mem˝y
(
m˘x
->
block
, 
d©a
, 
Àn
);

126 
	}
}

128 
	$fio_md5_föÆ
(
fio_md5_˘x
 *
m˘x
)

130 c⁄° 
off£t
 = 
m˘x
->
byã_cou¡
 & 0x3f;

131 *
p
 = (*)
m˘x
->
block
 + 
off£t
;

132 
∑ddög
 = 56 - (
off£t
 + 1);

134 *
p
++ = 0x80;

135 i‡(
∑ddög
 < 0) {

136 
	`mem£t
(
p
, 0x00, 
∑ddög
 +  (
uöt64_t
));

137 
	`md5_å™sf‹m
(
m˘x
->
hash
, m˘x->
block
);

138 
p
 = (*)
m˘x
->
block
;

139 
∑ddög
 = 56;

142 
	`mem£t
(
p
, 0, 
∑ddög
);

143 
m˘x
->
block
[14] = m˘x->
byã_cou¡
 << 3;

144 
m˘x
->
block
[15] = m˘x->
byã_cou¡
 >> 29;

145 
	`md5_å™sf‹m
(
m˘x
->
hash
, m˘x->
block
);

146 
	}
}

	@crc/md5.h

1 #i‚de‡
MD5_H


2 
	#MD5_H


	)

4 
	~<°döt.h
>

6 
	#MD5_DIGEST_SIZE
 16

	)

7 
	#MD5_HMAC_BLOCK_SIZE
 64

	)

8 
	#MD5_BLOCK_WORDS
 16

	)

9 
	#MD5_HASH_WORDS
 4

	)

11 
	#F1
(
x
, 
y
, 
z
Ë(z ^ (x & (y ^ z)))

	)

12 
	#F2
(
x
, 
y
, 
z
Ë
	`F1
(z, x, y)

	)

13 
	#F3
(
x
, 
y
, 
z
Ë(x ^ y ^ z)

	)

14 
	#F4
(
x
, 
y
, 
z
Ë(y ^ (x | ~z))

	)

16 
	#MD5STEP
(
f
, 
w
, 
x
, 
y
, 
z
, 
ö
, 
s
) \

17 (
w
 +
	`f
(
x
, 
y
, 
z
Ë+ 
ö
, w = (w<<
s
 | w>>(32-s)Ë+ x)

	)

19 
	sfio_md5_˘x
 {

20 
uöt32_t
 *
	mhash
;

21 
uöt32_t
 
	mblock
[
MD5_BLOCK_WORDS
];

22 
uöt64_t
 
	mbyã_cou¡
;

25 
fio_md5_upd©e
(
fio_md5_˘x
 *, c⁄° 
uöt8_t
 *, );

26 
fio_md5_föÆ
(
fio_md5_˘x
 *);

27 
fio_md5_öô
(
fio_md5_˘x
 *);

	@crc/murmur3.c

1 
	~"murmur3.h
"

2 
	~"../compûî/compûî.h
"

4 
ölöe
 
uöt32_t
 
	$rŸl32
(
uöt32_t
 
x
, 
öt8_t
 
r
)

6  (
x
 << 
r
) | (x >> (32 -Ñ));

7 
	}
}

12 
ölöe
 
uöt32_t
 
	$fmix32
(
uöt32_t
 
h
)

14 
h
 ^= h >> 16;

15 
h
 *= 0x85ebca6b;

16 
h
 ^= h >> 13;

17 
h
 *= 0xc2b2ae35;

18 
h
 ^= h >> 16;

20  
h
;

21 
	}
}

23 
uöt32_t
 
	$murmur3_èû
(c⁄° 
uöt8_t
 *
d©a
, c⁄° 
nblocks
,

24 
uöt32_t
 
Àn
, c⁄° uöt32_à
c1
,

25 c⁄° 
uöt32_t
 
c2
, uöt32_à
h1
)

27 c⁄° 
uöt8_t
 *
èû
 = (c⁄° uöt8_à*)(
d©a
 + 
nblocks
 * 4);

29 
uöt32_t
 
k1
 = 0;

30 
Àn
 & 3) {

32 
k1
 ^
èû
[2] << 16;

33 
fio_ÁŒthrough
;

35 
k1
 ^
èû
[1] << 8;

36 
fio_ÁŒthrough
;

38 
k1
 ^
èû
[0];

39 
k1
 *
c1
;

40 
k1
 = 
	`rŸl32
(k1, 15);

41 
k1
 *
c2
;

42 
h1
 ^
k1
;

45  
	`fmix32
(
h1
 ^ 
Àn
);

46 
	}
}

48 
uöt32_t
 
	$murmurhash3
(c⁄° *
key
, 
uöt32_t
 
Àn
, uöt32_à
£ed
)

50 c⁄° 
uöt8_t
 *
d©a
 = (c⁄° uöt8_à*)
key
;

51 c⁄° 
nblocks
 = 
Àn
 / 4;

52 
uöt32_t
 
h1
 = 
£ed
;

53 c⁄° 
uöt32_t
 
c1
 = 0xcc9e2d51;

54 c⁄° 
uöt32_t
 
c2
 = 0x1b873593;

55 c⁄° 
uöt32_t
 *
blocks
 = (c⁄° uöt32_à*)(
d©a
 + 
nblocks
 * 4);

56 
i
;

58 
i
 = -
nblocks
; i; i++) {

59 
uöt32_t
 
k1
 = 
blocks
[
i
];

61 
k1
 *
c1
;

62 
k1
 = 
	`rŸl32
(k1, 15);

63 
k1
 *
c2
;

65 
h1
 ^
k1
;

66 
h1
 = 
	`rŸl32
(h1, 13);

67 
h1
 = h1 * 5 + 0xe6546b64;

70  
	`murmur3_èû
(
d©a
, 
nblocks
, 
Àn
, 
c1
, 
c2
, 
h1
);

71 
	}
}

	@crc/murmur3.h

1 #i‚de‡
FIO_MURMUR3_H


2 
	#FIO_MURMUR3_H


	)

4 
	~<öây≥s.h
>

6 
uöt32_t
 
murmurhash3
(c⁄° *
key
, uöt32_à
Àn
, uöt32_à
£ed
);

	@crc/sha1.c

7 
	~<°rög.h
>

8 
	~<¨∑/öë.h
>

10 
	~"sha1.h
"

13 
blk_SHA1Block
(
fio_sha1_˘x
 *
˘x
, c⁄° *
d©a
);

15 
	$fio_sha1_öô
(
fio_sha1_˘x
 *
˘x
)

17 
˘x
->
size
 = 0;

21 
˘x
->
H
[0] = 0x67452301;

22 
˘x
->
H
[1] = 0xefcdab89;

23 
˘x
->
H
[2] = 0x98badcfe;

24 
˘x
->
H
[3] = 0x10325476;

25 
˘x
->
H
[4] = 0xc3d2e1f0;

26 
	}
}

28 
	$fio_sha1_upd©e
(
fio_sha1_˘x
 *
˘x
, c⁄° *
d©a
,

29 
Àn
)

31 
ÀnW
 = 
˘x
->
size
 & 63;

33 
˘x
->
size
 +
Àn
;

37 i‡(
ÀnW
) {

38 
À·
 = 64 - 
ÀnW
;

39 i‡(
Àn
 < 
À·
)

40 
À·
 = 
Àn
;

41 
	`mem˝y
(
ÀnW
 + (*)
˘x
->
W
, 
d©a
, 
À·
);

42 
ÀnW
 = (ÀnW + 
À·
) & 63;

43 
Àn
 -
À·
;

44 
d©a
 +
À·
;

45 i‡(
ÀnW
)

47 
	`blk_SHA1Block
(
˘x
, ctx->
W
);

49 
Àn
 >= 64) {

50 
	`blk_SHA1Block
(
˘x
, 
d©a
);

51 
d©a
 += 64;

52 
Àn
 -= 64;

54 i‡(
Àn
)

55 
	`mem˝y
(
˘x
->
W
, 
d©a
, 
Àn
);

56 
	}
}

58 
	$fio_sha1_föÆ
(
fio_sha1_˘x
 *
˘x
)

60 c⁄° 
∑d
[64] = { 0x80 };

61 
∑dÀn
[2];

62 
i
;

66 
∑dÀn
[0] = 
	`ht⁄l
(
˘x
->
size
 >> 29);

67 
∑dÀn
[1] = 
	`ht⁄l
(
˘x
->
size
 << 3);

69 
i
 = 
˘x
->
size
 & 63;

70 
	`fio_sha1_upd©e
(
˘x
, 
∑d
, 1+ (63 & (55 - 
i
)));

71 
	`fio_sha1_upd©e
(
˘x
, 
∑dÀn
, 8);

72 
	}
}

74 #i‡
deföed
(
__i386__
Ë|| deföed(
__x86_64__
)

76 
	#SHA_ASM
(
›
, 
x
, 
n
Ë({ 
__ªs
; 
	`__asm__
(› " %1,%0":"Ù" (__ªs):"i" (n), "0" (x)); __ªs; })

	)

77 
	#SHA_ROL
(
x
,
n
Ë
	`SHA_ASM
("rﬁ", x,Ç)

	)

78 
	#SHA_ROR
(
x
,
n
Ë
	`SHA_ASM
("r‹", x,Ç)

	)

82 
	#SHA_ROT
(
X
,
l
,
r
Ë(((XË<< (l)Ë| ((XË>> (r)))

	)

83 
	#SHA_ROL
(
X
,
n
Ë
	`SHA_ROT
(X,n,32-“))

	)

84 
	#SHA_ROR
(
X
,
n
Ë
	`SHA_ROT
(X,32-“),n)

	)

89 
	#W
(
x
Ë(
¨øy
[(x)&15])

	)

90 
	#£tW
(
x
, 
vÆ
Ë(*(vﬁ©ûê*)&
	`W
(xË(vÆ))

	)

96 
	#SHA_SRC
(
t
Ë
	`ht⁄l
(
d©a
[t])

	)

97 
	#SHA_MIX
(
t
Ë
	`SHA_ROL
(
	`W
—+13Ë^ W—+8Ë^ W—+2Ë^ W—), 1)

	)

99 
	#SHA_ROUND
(
t
, 
öput
, 
‚
, 
c⁄°™t
, 
A
, 
B
, 
C
, 
D
, 
E
) do { \

100 
TEMP
 = 
	`öput
(
t
); 
	`£tW
(t, TEMP); \

101 
E
 +
TEMP
 + 
	`SHA_ROL
(
A
,5Ë+ (
‚
Ë+ (
c⁄°™t
); \

102 
B
 = 
	`SHA_ROR
(B, 2); } 0)

	)

104 
	#T_0_15
(
t
, 
A
, 
B
, 
C
, 
D
, 
E
Ë
	`SHA_ROUND
—, 
SHA_SRC
, (((C^D)&B)^DË, 0x5a827999, A, B, C, D, E )

	)

105 
	#T_16_19
(
t
, 
A
, 
B
, 
C
, 
D
, 
E
Ë
	`SHA_ROUND
—, 
SHA_MIX
, (((C^D)&B)^DË, 0x5a827999, A, B, C, D, E )

	)

106 
	#T_20_39
(
t
, 
A
, 
B
, 
C
, 
D
, 
E
Ë
	`SHA_ROUND
—, 
SHA_MIX
, (B^C^DË, 0x6ed9eba1, A, B, C, D, E )

	)

107 
	#T_40_59
(
t
, 
A
, 
B
, 
C
, 
D
, 
E
Ë
	`SHA_ROUND
—, 
SHA_MIX
, ((B&C)+(D&(B^C))Ë, 0x8f1bbcdc, A, B, C, D, E )

	)

108 
	#T_60_79
(
t
, 
A
, 
B
, 
C
, 
D
, 
E
Ë
	`SHA_ROUND
—, 
SHA_MIX
, (B^C^DË, 0xˇ62c1d6, A, B, C, D, E )

	)

110 
	$blk_SHA1Block
(
fio_sha1_˘x
 *
˘x
, c⁄° *
d©a
)

112 
A
,
B
,
C
,
D
,
E
;

113 
¨øy
[16];

115 
A
 = 
˘x
->
H
[0];

116 
B
 = 
˘x
->
H
[1];

117 
C
 = 
˘x
->
H
[2];

118 
D
 = 
˘x
->
H
[3];

119 
E
 = 
˘x
->
H
[4];

122 
	`T_0_15
–0, 
A
, 
B
, 
C
, 
D
, 
E
);

123 
	`T_0_15
–1, 
E
, 
A
, 
B
, 
C
, 
D
);

124 
	`T_0_15
–2, 
D
, 
E
, 
A
, 
B
, 
C
);

125 
	`T_0_15
–3, 
C
, 
D
, 
E
, 
A
, 
B
);

126 
	`T_0_15
–4, 
B
, 
C
, 
D
, 
E
, 
A
);

127 
	`T_0_15
–5, 
A
, 
B
, 
C
, 
D
, 
E
);

128 
	`T_0_15
–6, 
E
, 
A
, 
B
, 
C
, 
D
);

129 
	`T_0_15
–7, 
D
, 
E
, 
A
, 
B
, 
C
);

130 
	`T_0_15
–8, 
C
, 
D
, 
E
, 
A
, 
B
);

131 
	`T_0_15
–9, 
B
, 
C
, 
D
, 
E
, 
A
);

132 
	`T_0_15
(10, 
A
, 
B
, 
C
, 
D
, 
E
);

133 
	`T_0_15
(11, 
E
, 
A
, 
B
, 
C
, 
D
);

134 
	`T_0_15
(12, 
D
, 
E
, 
A
, 
B
, 
C
);

135 
	`T_0_15
(13, 
C
, 
D
, 
E
, 
A
, 
B
);

136 
	`T_0_15
(14, 
B
, 
C
, 
D
, 
E
, 
A
);

137 
	`T_0_15
(15, 
A
, 
B
, 
C
, 
D
, 
E
);

140 
	`T_16_19
(16, 
E
, 
A
, 
B
, 
C
, 
D
);

141 
	`T_16_19
(17, 
D
, 
E
, 
A
, 
B
, 
C
);

142 
	`T_16_19
(18, 
C
, 
D
, 
E
, 
A
, 
B
);

143 
	`T_16_19
(19, 
B
, 
C
, 
D
, 
E
, 
A
);

146 
	`T_20_39
(20, 
A
, 
B
, 
C
, 
D
, 
E
);

147 
	`T_20_39
(21, 
E
, 
A
, 
B
, 
C
, 
D
);

148 
	`T_20_39
(22, 
D
, 
E
, 
A
, 
B
, 
C
);

149 
	`T_20_39
(23, 
C
, 
D
, 
E
, 
A
, 
B
);

150 
	`T_20_39
(24, 
B
, 
C
, 
D
, 
E
, 
A
);

151 
	`T_20_39
(25, 
A
, 
B
, 
C
, 
D
, 
E
);

152 
	`T_20_39
(26, 
E
, 
A
, 
B
, 
C
, 
D
);

153 
	`T_20_39
(27, 
D
, 
E
, 
A
, 
B
, 
C
);

154 
	`T_20_39
(28, 
C
, 
D
, 
E
, 
A
, 
B
);

155 
	`T_20_39
(29, 
B
, 
C
, 
D
, 
E
, 
A
);

156 
	`T_20_39
(30, 
A
, 
B
, 
C
, 
D
, 
E
);

157 
	`T_20_39
(31, 
E
, 
A
, 
B
, 
C
, 
D
);

158 
	`T_20_39
(32, 
D
, 
E
, 
A
, 
B
, 
C
);

159 
	`T_20_39
(33, 
C
, 
D
, 
E
, 
A
, 
B
);

160 
	`T_20_39
(34, 
B
, 
C
, 
D
, 
E
, 
A
);

161 
	`T_20_39
(35, 
A
, 
B
, 
C
, 
D
, 
E
);

162 
	`T_20_39
(36, 
E
, 
A
, 
B
, 
C
, 
D
);

163 
	`T_20_39
(37, 
D
, 
E
, 
A
, 
B
, 
C
);

164 
	`T_20_39
(38, 
C
, 
D
, 
E
, 
A
, 
B
);

165 
	`T_20_39
(39, 
B
, 
C
, 
D
, 
E
, 
A
);

168 
	`T_40_59
(40, 
A
, 
B
, 
C
, 
D
, 
E
);

169 
	`T_40_59
(41, 
E
, 
A
, 
B
, 
C
, 
D
);

170 
	`T_40_59
(42, 
D
, 
E
, 
A
, 
B
, 
C
);

171 
	`T_40_59
(43, 
C
, 
D
, 
E
, 
A
, 
B
);

172 
	`T_40_59
(44, 
B
, 
C
, 
D
, 
E
, 
A
);

173 
	`T_40_59
(45, 
A
, 
B
, 
C
, 
D
, 
E
);

174 
	`T_40_59
(46, 
E
, 
A
, 
B
, 
C
, 
D
);

175 
	`T_40_59
(47, 
D
, 
E
, 
A
, 
B
, 
C
);

176 
	`T_40_59
(48, 
C
, 
D
, 
E
, 
A
, 
B
);

177 
	`T_40_59
(49, 
B
, 
C
, 
D
, 
E
, 
A
);

178 
	`T_40_59
(50, 
A
, 
B
, 
C
, 
D
, 
E
);

179 
	`T_40_59
(51, 
E
, 
A
, 
B
, 
C
, 
D
);

180 
	`T_40_59
(52, 
D
, 
E
, 
A
, 
B
, 
C
);

181 
	`T_40_59
(53, 
C
, 
D
, 
E
, 
A
, 
B
);

182 
	`T_40_59
(54, 
B
, 
C
, 
D
, 
E
, 
A
);

183 
	`T_40_59
(55, 
A
, 
B
, 
C
, 
D
, 
E
);

184 
	`T_40_59
(56, 
E
, 
A
, 
B
, 
C
, 
D
);

185 
	`T_40_59
(57, 
D
, 
E
, 
A
, 
B
, 
C
);

186 
	`T_40_59
(58, 
C
, 
D
, 
E
, 
A
, 
B
);

187 
	`T_40_59
(59, 
B
, 
C
, 
D
, 
E
, 
A
);

190 
	`T_60_79
(60, 
A
, 
B
, 
C
, 
D
, 
E
);

191 
	`T_60_79
(61, 
E
, 
A
, 
B
, 
C
, 
D
);

192 
	`T_60_79
(62, 
D
, 
E
, 
A
, 
B
, 
C
);

193 
	`T_60_79
(63, 
C
, 
D
, 
E
, 
A
, 
B
);

194 
	`T_60_79
(64, 
B
, 
C
, 
D
, 
E
, 
A
);

195 
	`T_60_79
(65, 
A
, 
B
, 
C
, 
D
, 
E
);

196 
	`T_60_79
(66, 
E
, 
A
, 
B
, 
C
, 
D
);

197 
	`T_60_79
(67, 
D
, 
E
, 
A
, 
B
, 
C
);

198 
	`T_60_79
(68, 
C
, 
D
, 
E
, 
A
, 
B
);

199 
	`T_60_79
(69, 
B
, 
C
, 
D
, 
E
, 
A
);

200 
	`T_60_79
(70, 
A
, 
B
, 
C
, 
D
, 
E
);

201 
	`T_60_79
(71, 
E
, 
A
, 
B
, 
C
, 
D
);

202 
	`T_60_79
(72, 
D
, 
E
, 
A
, 
B
, 
C
);

203 
	`T_60_79
(73, 
C
, 
D
, 
E
, 
A
, 
B
);

204 
	`T_60_79
(74, 
B
, 
C
, 
D
, 
E
, 
A
);

205 
	`T_60_79
(75, 
A
, 
B
, 
C
, 
D
, 
E
);

206 
	`T_60_79
(76, 
E
, 
A
, 
B
, 
C
, 
D
);

207 
	`T_60_79
(77, 
D
, 
E
, 
A
, 
B
, 
C
);

208 
	`T_60_79
(78, 
C
, 
D
, 
E
, 
A
, 
B
);

209 
	`T_60_79
(79, 
B
, 
C
, 
D
, 
E
, 
A
);

211 
˘x
->
H
[0] +
A
;

212 
˘x
->
H
[1] +
B
;

213 
˘x
->
H
[2] +
C
;

214 
˘x
->
H
[3] +
D
;

215 
˘x
->
H
[4] +
E
;

216 
	}
}

	@crc/sha1.h

1 #i‚de‡
FIO_SHA1


2 
	#FIO_SHA1


	)

4 
	~<öây≥s.h
>

12 
	sfio_sha1_˘x
 {

13 
uöt32_t
 *
	mH
;

14 
	mW
[16];

15 
	msize
;

18 
fio_sha1_öô
(
fio_sha1_˘x
 *);

19 
fio_sha1_upd©e
(
fio_sha1_˘x
 *, c⁄° *
d©aIn
, 
Àn
);

20 
fio_sha1_föÆ
(
fio_sha1_˘x
 *);

	@crc/sha256.c

19 
	~<°rög.h
>

21 
	~"../lib/bsw≠.h
"

22 
	~"sha256.h
"

24 
	#SHA256_DIGEST_SIZE
 32

	)

25 
	#SHA256_HMAC_BLOCK_SIZE
 64

	)

27 
ölöe
 
uöt32_t
 
	$Ch
(
uöt32_t
 
x
, uöt32_à
y
, uöt32_à
z
)

29  
z
 ^ (
x
 & (
y
 ^ z));

30 
	}
}

32 
ölöe
 
uöt32_t
 
	$Maj
(
uöt32_t
 
x
, uöt32_à
y
, uöt32_à
z
)

34  (
x
 & 
y
Ë| (
z
 & (x | y));

35 
	}
}

37 
	#e0
(
x
Ë(
	`r‹32
(x, 2Ë^Ñ‹32(x,13Ë^Ñ‹32(x,22))

	)

38 
	#e1
(
x
Ë(
	`r‹32
(x, 6Ë^Ñ‹32(x,11Ë^Ñ‹32(x,25))

	)

39 
	#s0
(
x
Ë(
	`r‹32
(x, 7Ë^Ñ‹32(x,18Ë^ (x >> 3))

	)

40 
	#s1
(
x
Ë(
	`r‹32
(x,17Ë^Ñ‹32(x,19Ë^ (x >> 10))

	)

42 
	#H0
 0x6a09e667

	)

43 
	#H1
 0xbb67´85

	)

44 
	#H2
 0x3c6ef372

	)

45 
	#H3
 0xa54ff53a

	)

46 
	#H4
 0x510e527f

	)

47 
	#H5
 0x9b05688c

	)

48 
	#H6
 0x1f83d9ab

	)

49 
	#H7
 0x5be0cd19

	)

51 
ölöe
 
uöt32_t
 
	$r‹32
(
uöt32_t
 
w‹d
, 
shi·
)

53  (
w‹d
 >> 
shi·
) | (word << (32 - shift));

54 
	}
}

56 
ölöe
 
	$LOAD_OP
(
I
, 
uöt32_t
 *
W
, c⁄° 
uöt8_t
 *
öput
)

58 
W
[
I
] = 
	`__be32_to_˝u
(((
uöt32_t
 *)(
öput
))[I]);

59 
	}
}

61 
ölöe
 
	$BLEND_OP
(
I
, 
uöt32_t
 *
W
)

63 
W
[
I
] = 
	`s1
(W[I-2]Ë+ W[I-7] + 
	`s0
(W[I-15]) + W[I-16];

64 
	}
}

66 
	$sha256_å™sf‹m
(
uöt32_t
 *
°©e
, c⁄° 
uöt8_t
 *
öput
)

68 
uöt32_t
 
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
, 
t1
, 
t2
;

69 
uöt32_t
 
W
[64];

70 
i
;

73 
i
 = 0; i < 16; i++)

74 
	`LOAD_OP
(
i
, 
W
, 
öput
);

77 
i
 = 16; i < 64; i++)

78 
	`BLEND_OP
(
i
, 
W
);

81 
a
=
°©e
[0]; 
b
=°©e[1]; 
c
=°©e[2]; 
d
=state[3];

82 
e
=
°©e
[4]; 
f
=°©e[5]; 
g
=°©e[6]; 
h
=state[7];

85 
t1
 = 
h
 + 
	`e1
(
e
Ë+ 
	`Ch
”,
f
,
g
Ë+ 0x428a2f98 + 
W
[ 0];

86 
t2
 = 
	`e0
(
a
Ë+ 
	`Maj
◊,
b
,
c
); 
d
+=
t1
; 
h
=t1+t2;

87 
t1
 = 
g
 + 
	`e1
(
d
Ë+ 
	`Ch
(d,
e
,
f
Ë+ 0x71374491 + 
W
[ 1];

88 
t2
 = 
	`e0
(
h
Ë+ 
	`Maj
(h,
a
,
b
); 
c
+=
t1
; 
g
=t1+t2;

89 
t1
 = 
f
 + 
	`e1
(
c
Ë+ 
	`Ch
(c,
d
,
e
Ë+ 0xb5c0fbc‡+ 
W
[ 2];

90 
t2
 = 
	`e0
(
g
Ë+ 
	`Maj
(g,
h
,
a
); 
b
+=
t1
; 
f
=t1+t2;

91 
t1
 = 
e
 + 
	`e1
(
b
Ë+ 
	`Ch
(b,
c
,
d
Ë+ 0xe9b5dba5 + 
W
[ 3];

92 
t2
 = 
	`e0
(
f
Ë+ 
	`Maj
(f,
g
,
h
); 
a
+=
t1
; 
e
=t1+t2;

93 
t1
 = 
d
 + 
	`e1
(
a
Ë+ 
	`Ch
◊,
b
,
c
Ë+ 0x3956c25b + 
W
[ 4];

94 
t2
 = 
	`e0
(
e
Ë+ 
	`Maj
”,
f
,
g
); 
h
+=
t1
; 
d
=t1+t2;

95 
t1
 = 
c
 + 
	`e1
(
h
Ë+ 
	`Ch
(h,
a
,
b
Ë+ 0x59f111f1 + 
W
[ 5];

96 
t2
 = 
	`e0
(
d
Ë+ 
	`Maj
(d,
e
,
f
); 
g
+=
t1
; 
c
=t1+t2;

97 
t1
 = 
b
 + 
	`e1
(
g
Ë+ 
	`Ch
(g,
h
,
a
Ë+ 0x923f82a4 + 
W
[ 6];

98 
t2
 = 
	`e0
(
c
Ë+ 
	`Maj
(c,
d
,
e
); 
f
+=
t1
; 
b
=t1+t2;

99 
t1
 = 
a
 + 
	`e1
(
f
Ë+ 
	`Ch
(f,
g
,
h
Ë+ 0xab1c5ed5 + 
W
[ 7];

100 
t2
 = 
	`e0
(
b
Ë+ 
	`Maj
(b,
c
,
d
); 
e
+=
t1
; 
a
=t1+t2;

102 
t1
 = 
h
 + 
	`e1
(
e
Ë+ 
	`Ch
”,
f
,
g
Ë+ 0xd807Ø98 + 
W
[ 8];

103 
t2
 = 
	`e0
(
a
Ë+ 
	`Maj
◊,
b
,
c
); 
d
+=
t1
; 
h
=t1+t2;

104 
t1
 = 
g
 + 
	`e1
(
d
Ë+ 
	`Ch
(d,
e
,
f
Ë+ 0x12835b01 + 
W
[ 9];

105 
t2
 = 
	`e0
(
h
Ë+ 
	`Maj
(h,
a
,
b
); 
c
+=
t1
; 
g
=t1+t2;

106 
t1
 = 
f
 + 
	`e1
(
c
Ë+ 
	`Ch
(c,
d
,
e
Ë+ 0x243185bê+ 
W
[10];

107 
t2
 = 
	`e0
(
g
Ë+ 
	`Maj
(g,
h
,
a
); 
b
+=
t1
; 
f
=t1+t2;

108 
t1
 = 
e
 + 
	`e1
(
b
Ë+ 
	`Ch
(b,
c
,
d
Ë+ 0x550c7dc3 + 
W
[11];

109 
t2
 = 
	`e0
(
f
Ë+ 
	`Maj
(f,
g
,
h
); 
a
+=
t1
; 
e
=t1+t2;

110 
t1
 = 
d
 + 
	`e1
(
a
Ë+ 
	`Ch
◊,
b
,
c
Ë+ 0x72be5d74 + 
W
[12];

111 
t2
 = 
	`e0
(
e
Ë+ 
	`Maj
”,
f
,
g
); 
h
+=
t1
; 
d
=t1+t2;

112 
t1
 = 
c
 + 
	`e1
(
h
Ë+ 
	`Ch
(h,
a
,
b
Ë+ 0x80deb1„ + 
W
[13];

113 
t2
 = 
	`e0
(
d
Ë+ 
	`Maj
(d,
e
,
f
); 
g
+=
t1
; 
c
=t1+t2;

114 
t1
 = 
b
 + 
	`e1
(
g
Ë+ 
	`Ch
(g,
h
,
a
Ë+ 0x9bdc06a7 + 
W
[14];

115 
t2
 = 
	`e0
(
c
Ë+ 
	`Maj
(c,
d
,
e
); 
f
+=
t1
; 
b
=t1+t2;

116 
t1
 = 
a
 + 
	`e1
(
f
Ë+ 
	`Ch
(f,
g
,
h
Ë+ 0xc19bf174 + 
W
[15];

117 
t2
 = 
	`e0
(
b
Ë+ 
	`Maj
(b,
c
,
d
); 
e
+=
t1
; 
a
=t1+t2;

119 
t1
 = 
h
 + 
	`e1
(
e
Ë+ 
	`Ch
”,
f
,
g
Ë+ 0xe49b69c1 + 
W
[16];

120 
t2
 = 
	`e0
(
a
Ë+ 
	`Maj
◊,
b
,
c
); 
d
+=
t1
; 
h
=t1+t2;

121 
t1
 = 
g
 + 
	`e1
(
d
Ë+ 
	`Ch
(d,
e
,
f
Ë+ 0xefbe4786 + 
W
[17];

122 
t2
 = 
	`e0
(
h
Ë+ 
	`Maj
(h,
a
,
b
); 
c
+=
t1
; 
g
=t1+t2;

123 
t1
 = 
f
 + 
	`e1
(
c
Ë+ 
	`Ch
(c,
d
,
e
Ë+ 0x0fc19dc6 + 
W
[18];

124 
t2
 = 
	`e0
(
g
Ë+ 
	`Maj
(g,
h
,
a
); 
b
+=
t1
; 
f
=t1+t2;

125 
t1
 = 
e
 + 
	`e1
(
b
Ë+ 
	`Ch
(b,
c
,
d
Ë+ 0x240ˇ1c¯+ 
W
[19];

126 
t2
 = 
	`e0
(
f
Ë+ 
	`Maj
(f,
g
,
h
); 
a
+=
t1
; 
e
=t1+t2;

127 
t1
 = 
d
 + 
	`e1
(
a
Ë+ 
	`Ch
◊,
b
,
c
Ë+ 0x2de92c6‡+ 
W
[20];

128 
t2
 = 
	`e0
(
e
Ë+ 
	`Maj
”,
f
,
g
); 
h
+=
t1
; 
d
=t1+t2;

129 
t1
 = 
c
 + 
	`e1
(
h
Ë+ 
	`Ch
(h,
a
,
b
Ë+ 0x4a7484Ø + 
W
[21];

130 
t2
 = 
	`e0
(
d
Ë+ 
	`Maj
(d,
e
,
f
); 
g
+=
t1
; 
c
=t1+t2;

131 
t1
 = 
b
 + 
	`e1
(
g
Ë+ 
	`Ch
(g,
h
,
a
Ë+ 0x5cb0a9d¯+ 
W
[22];

132 
t2
 = 
	`e0
(
c
Ë+ 
	`Maj
(c,
d
,
e
); 
f
+=
t1
; 
b
=t1+t2;

133 
t1
 = 
a
 + 
	`e1
(
f
Ë+ 
	`Ch
(f,
g
,
h
Ë+ 0x76f988d®+ 
W
[23];

134 
t2
 = 
	`e0
(
b
Ë+ 
	`Maj
(b,
c
,
d
); 
e
+=
t1
; 
a
=t1+t2;

136 
t1
 = 
h
 + 
	`e1
(
e
Ë+ 
	`Ch
”,
f
,
g
Ë+ 0x983e5152 + 
W
[24];

137 
t2
 = 
	`e0
(
a
Ë+ 
	`Maj
◊,
b
,
c
); 
d
+=
t1
; 
h
=t1+t2;

138 
t1
 = 
g
 + 
	`e1
(
d
Ë+ 
	`Ch
(d,
e
,
f
Ë+ 0xa831c66d + 
W
[25];

139 
t2
 = 
	`e0
(
h
Ë+ 
	`Maj
(h,
a
,
b
); 
c
+=
t1
; 
g
=t1+t2;

140 
t1
 = 
f
 + 
	`e1
(
c
Ë+ 
	`Ch
(c,
d
,
e
Ë+ 0xb00327c8 + 
W
[26];

141 
t2
 = 
	`e0
(
g
Ë+ 
	`Maj
(g,
h
,
a
); 
b
+=
t1
; 
f
=t1+t2;

142 
t1
 = 
e
 + 
	`e1
(
b
Ë+ 
	`Ch
(b,
c
,
d
Ë+ 0xbf597fc7 + 
W
[27];

143 
t2
 = 
	`e0
(
f
Ë+ 
	`Maj
(f,
g
,
h
); 
a
+=
t1
; 
e
=t1+t2;

144 
t1
 = 
d
 + 
	`e1
(
a
Ë+ 
	`Ch
◊,
b
,
c
Ë+ 0xc6e00bf3 + 
W
[28];

145 
t2
 = 
	`e0
(
e
Ë+ 
	`Maj
”,
f
,
g
); 
h
+=
t1
; 
d
=t1+t2;

146 
t1
 = 
c
 + 
	`e1
(
h
Ë+ 
	`Ch
(h,
a
,
b
Ë+ 0xd5a79147 + 
W
[29];

147 
t2
 = 
	`e0
(
d
Ë+ 
	`Maj
(d,
e
,
f
); 
g
+=
t1
; 
c
=t1+t2;

148 
t1
 = 
b
 + 
	`e1
(
g
Ë+ 
	`Ch
(g,
h
,
a
Ë+ 0x06ˇ6351 + 
W
[30];

149 
t2
 = 
	`e0
(
c
Ë+ 
	`Maj
(c,
d
,
e
); 
f
+=
t1
; 
b
=t1+t2;

150 
t1
 = 
a
 + 
	`e1
(
f
Ë+ 
	`Ch
(f,
g
,
h
Ë+ 0x14292967 + 
W
[31];

151 
t2
 = 
	`e0
(
b
Ë+ 
	`Maj
(b,
c
,
d
); 
e
+=
t1
; 
a
=t1+t2;

153 
t1
 = 
h
 + 
	`e1
(
e
Ë+ 
	`Ch
”,
f
,
g
Ë+ 0x27b70a85 + 
W
[32];

154 
t2
 = 
	`e0
(
a
Ë+ 
	`Maj
◊,
b
,
c
); 
d
+=
t1
; 
h
=t1+t2;

155 
t1
 = 
g
 + 
	`e1
(
d
Ë+ 
	`Ch
(d,
e
,
f
Ë+ 0x2e1b2138 + 
W
[33];

156 
t2
 = 
	`e0
(
h
Ë+ 
	`Maj
(h,
a
,
b
); 
c
+=
t1
; 
g
=t1+t2;

157 
t1
 = 
f
 + 
	`e1
(
c
Ë+ 
	`Ch
(c,
d
,
e
Ë+ 0x4d2c6df¯+ 
W
[34];

158 
t2
 = 
	`e0
(
g
Ë+ 
	`Maj
(g,
h
,
a
); 
b
+=
t1
; 
f
=t1+t2;

159 
t1
 = 
e
 + 
	`e1
(
b
Ë+ 
	`Ch
(b,
c
,
d
Ë+ 0x53380d13 + 
W
[35];

160 
t2
 = 
	`e0
(
f
Ë+ 
	`Maj
(f,
g
,
h
); 
a
+=
t1
; 
e
=t1+t2;

161 
t1
 = 
d
 + 
	`e1
(
a
Ë+ 
	`Ch
◊,
b
,
c
Ë+ 0x650a7354 + 
W
[36];

162 
t2
 = 
	`e0
(
e
Ë+ 
	`Maj
”,
f
,
g
); 
h
+=
t1
; 
d
=t1+t2;

163 
t1
 = 
c
 + 
	`e1
(
h
Ë+ 
	`Ch
(h,
a
,
b
Ë+ 0x766a0abb + 
W
[37];

164 
t2
 = 
	`e0
(
d
Ë+ 
	`Maj
(d,
e
,
f
); 
g
+=
t1
; 
c
=t1+t2;

165 
t1
 = 
b
 + 
	`e1
(
g
Ë+ 
	`Ch
(g,
h
,
a
Ë+ 0x81c2c92ê+ 
W
[38];

166 
t2
 = 
	`e0
(
c
Ë+ 
	`Maj
(c,
d
,
e
); 
f
+=
t1
; 
b
=t1+t2;

167 
t1
 = 
a
 + 
	`e1
(
f
Ë+ 
	`Ch
(f,
g
,
h
Ë+ 0x92722c85 + 
W
[39];

168 
t2
 = 
	`e0
(
b
Ë+ 
	`Maj
(b,
c
,
d
); 
e
+=
t1
; 
a
=t1+t2;

170 
t1
 = 
h
 + 
	`e1
(
e
Ë+ 
	`Ch
”,
f
,
g
Ë+ 0xa2b„8a1 + 
W
[40];

171 
t2
 = 
	`e0
(
a
Ë+ 
	`Maj
◊,
b
,
c
); 
d
+=
t1
; 
h
=t1+t2;

172 
t1
 = 
g
 + 
	`e1
(
d
Ë+ 
	`Ch
(d,
e
,
f
Ë+ 0xa81a664b + 
W
[41];

173 
t2
 = 
	`e0
(
h
Ë+ 
	`Maj
(h,
a
,
b
); 
c
+=
t1
; 
g
=t1+t2;

174 
t1
 = 
f
 + 
	`e1
(
c
Ë+ 
	`Ch
(c,
d
,
e
Ë+ 0xc24b8b70 + 
W
[42];

175 
t2
 = 
	`e0
(
g
Ë+ 
	`Maj
(g,
h
,
a
); 
b
+=
t1
; 
f
=t1+t2;

176 
t1
 = 
e
 + 
	`e1
(
b
Ë+ 
	`Ch
(b,
c
,
d
Ë+ 0xc76c51a3 + 
W
[43];

177 
t2
 = 
	`e0
(
f
Ë+ 
	`Maj
(f,
g
,
h
); 
a
+=
t1
; 
e
=t1+t2;

178 
t1
 = 
d
 + 
	`e1
(
a
Ë+ 
	`Ch
◊,
b
,
c
Ë+ 0xd192e819 + 
W
[44];

179 
t2
 = 
	`e0
(
e
Ë+ 
	`Maj
”,
f
,
g
); 
h
+=
t1
; 
d
=t1+t2;

180 
t1
 = 
c
 + 
	`e1
(
h
Ë+ 
	`Ch
(h,
a
,
b
Ë+ 0xd6990624 + 
W
[45];

181 
t2
 = 
	`e0
(
d
Ë+ 
	`Maj
(d,
e
,
f
); 
g
+=
t1
; 
c
=t1+t2;

182 
t1
 = 
b
 + 
	`e1
(
g
Ë+ 
	`Ch
(g,
h
,
a
Ë+ 0xf40e3585 + 
W
[46];

183 
t2
 = 
	`e0
(
c
Ë+ 
	`Maj
(c,
d
,
e
); 
f
+=
t1
; 
b
=t1+t2;

184 
t1
 = 
a
 + 
	`e1
(
f
Ë+ 
	`Ch
(f,
g
,
h
Ë+ 0x106Ø070 + 
W
[47];

185 
t2
 = 
	`e0
(
b
Ë+ 
	`Maj
(b,
c
,
d
); 
e
+=
t1
; 
a
=t1+t2;

187 
t1
 = 
h
 + 
	`e1
(
e
Ë+ 
	`Ch
”,
f
,
g
Ë+ 0x19a4c116 + 
W
[48];

188 
t2
 = 
	`e0
(
a
Ë+ 
	`Maj
◊,
b
,
c
); 
d
+=
t1
; 
h
=t1+t2;

189 
t1
 = 
g
 + 
	`e1
(
d
Ë+ 
	`Ch
(d,
e
,
f
Ë+ 0x1e376c08 + 
W
[49];

190 
t2
 = 
	`e0
(
h
Ë+ 
	`Maj
(h,
a
,
b
); 
c
+=
t1
; 
g
=t1+t2;

191 
t1
 = 
f
 + 
	`e1
(
c
Ë+ 
	`Ch
(c,
d
,
e
Ë+ 0x2748774¯+ 
W
[50];

192 
t2
 = 
	`e0
(
g
Ë+ 
	`Maj
(g,
h
,
a
); 
b
+=
t1
; 
f
=t1+t2;

193 
t1
 = 
e
 + 
	`e1
(
b
Ë+ 
	`Ch
(b,
c
,
d
Ë+ 0x34b0bcb5 + 
W
[51];

194 
t2
 = 
	`e0
(
f
Ë+ 
	`Maj
(f,
g
,
h
); 
a
+=
t1
; 
e
=t1+t2;

195 
t1
 = 
d
 + 
	`e1
(
a
Ë+ 
	`Ch
◊,
b
,
c
Ë+ 0x391c0cb3 + 
W
[52];

196 
t2
 = 
	`e0
(
e
Ë+ 
	`Maj
”,
f
,
g
); 
h
+=
t1
; 
d
=t1+t2;

197 
t1
 = 
c
 + 
	`e1
(
h
Ë+ 
	`Ch
(h,
a
,
b
Ë+ 0x4ed8Ø4®+ 
W
[53];

198 
t2
 = 
	`e0
(
d
Ë+ 
	`Maj
(d,
e
,
f
); 
g
+=
t1
; 
c
=t1+t2;

199 
t1
 = 
b
 + 
	`e1
(
g
Ë+ 
	`Ch
(g,
h
,
a
Ë+ 0x5b9cˇ4‡+ 
W
[54];

200 
t2
 = 
	`e0
(
c
Ë+ 
	`Maj
(c,
d
,
e
); 
f
+=
t1
; 
b
=t1+t2;

201 
t1
 = 
a
 + 
	`e1
(
f
Ë+ 
	`Ch
(f,
g
,
h
Ë+ 0x682e6ff3 + 
W
[55];

202 
t2
 = 
	`e0
(
b
Ë+ 
	`Maj
(b,
c
,
d
); 
e
+=
t1
; 
a
=t1+t2;

204 
t1
 = 
h
 + 
	`e1
(
e
Ë+ 
	`Ch
”,
f
,
g
Ë+ 0x748f82ì + 
W
[56];

205 
t2
 = 
	`e0
(
a
Ë+ 
	`Maj
◊,
b
,
c
); 
d
+=
t1
; 
h
=t1+t2;

206 
t1
 = 
g
 + 
	`e1
(
d
Ë+ 
	`Ch
(d,
e
,
f
Ë+ 0x78a5636‡+ 
W
[57];

207 
t2
 = 
	`e0
(
h
Ë+ 
	`Maj
(h,
a
,
b
); 
c
+=
t1
; 
g
=t1+t2;

208 
t1
 = 
f
 + 
	`e1
(
c
Ë+ 
	`Ch
(c,
d
,
e
Ë+ 0x84c87814 + 
W
[58];

209 
t2
 = 
	`e0
(
g
Ë+ 
	`Maj
(g,
h
,
a
); 
b
+=
t1
; 
f
=t1+t2;

210 
t1
 = 
e
 + 
	`e1
(
b
Ë+ 
	`Ch
(b,
c
,
d
Ë+ 0x8cc70208 + 
W
[59];

211 
t2
 = 
	`e0
(
f
Ë+ 
	`Maj
(f,
g
,
h
); 
a
+=
t1
; 
e
=t1+t2;

212 
t1
 = 
d
 + 
	`e1
(
a
Ë+ 
	`Ch
◊,
b
,
c
Ë+ 0x90beffÁ + 
W
[60];

213 
t2
 = 
	`e0
(
e
Ë+ 
	`Maj
”,
f
,
g
); 
h
+=
t1
; 
d
=t1+t2;

214 
t1
 = 
c
 + 
	`e1
(
h
Ë+ 
	`Ch
(h,
a
,
b
Ë+ 0xa4506˚b + 
W
[61];

215 
t2
 = 
	`e0
(
d
Ë+ 
	`Maj
(d,
e
,
f
); 
g
+=
t1
; 
c
=t1+t2;

216 
t1
 = 
b
 + 
	`e1
(
g
Ë+ 
	`Ch
(g,
h
,
a
Ë+ 0xbef9a3f7 + 
W
[62];

217 
t2
 = 
	`e0
(
c
Ë+ 
	`Maj
(c,
d
,
e
); 
f
+=
t1
; 
b
=t1+t2;

218 
t1
 = 
a
 + 
	`e1
(
f
Ë+ 
	`Ch
(f,
g
,
h
Ë+ 0xc67178f2 + 
W
[63];

219 
t2
 = 
	`e0
(
b
Ë+ 
	`Maj
(b,
c
,
d
); 
e
+=
t1
; 
a
=t1+t2;

221 
°©e
[0] +
a
; sèã[1] +
b
; sèã[2] +
c
; sèã[3] +
d
;

222 
°©e
[4] +
e
; sèã[5] +
f
; sèã[6] +
g
; sèã[7] +
h
;

225 
a
 = 
b
 = 
c
 = 
d
 = 
e
 = 
f
 = 
g
 = 
h
 = 
t1
 = 
t2
 = 0;

226 
	`mem£t
(
W
, 0, 64 * (
uöt32_t
));

227 
	}
}

229 
	$fio_sha256_öô
(
fio_sha256_˘x
 *
s˘x
)

231 
s˘x
->
°©e
[0] = 
H0
;

232 
s˘x
->
°©e
[1] = 
H1
;

233 
s˘x
->
°©e
[2] = 
H2
;

234 
s˘x
->
°©e
[3] = 
H3
;

235 
s˘x
->
°©e
[4] = 
H4
;

236 
s˘x
->
°©e
[5] = 
H5
;

237 
s˘x
->
°©e
[6] = 
H6
;

238 
s˘x
->
°©e
[7] = 
H7
;

239 
s˘x
->
cou¡
 = 0;

240 
	}
}

242 
	$fio_sha256_upd©e
(
fio_sha256_˘x
 *
s˘x
, c⁄° 
uöt8_t
 *
d©a
,

243 
Àn
)

245 
∑πül
, 
d⁄e
;

246 c⁄° 
uöt8_t
 *
§c
;

248 
∑πül
 = 
s˘x
->
cou¡
 & 0x3f;

249 
s˘x
->
cou¡
 +
Àn
;

250 
d⁄e
 = 0;

251 
§c
 = 
d©a
;

253 i‡((
∑πül
 + 
Àn
) > 63) {

254 i‡(
∑πül
) {

255 
d⁄e
 = -
∑πül
;

256 
	`mem˝y
(
s˘x
->
buf
 + 
∑πül
, 
d©a
, 
d⁄e
 + 64);

257 
§c
 = 
s˘x
->
buf
;

261 
	`sha256_å™sf‹m
(
s˘x
->
°©e
, 
§c
);

262 
d⁄e
 += 64;

263 
§c
 = 
d©a
 + 
d⁄e
;

264 } 
d⁄e
 + 63 < 
Àn
);

266 
∑πül
 = 0;

268 
	`mem˝y
(
s˘x
->
buf
 + 
∑πül
, 
§c
, 
Àn
 - 
d⁄e
);

269 
	}
}

271 
	$fio_sha256_föÆ
(
fio_sha256_˘x
 *
s˘x
)

273 
uöt64_t
 
bôs
;

274 
ödex
, 
∑d_Àn
;

275 
i
;

276 c⁄° 
uöt8_t
 
∑ddög
[64] = { 0x80, };

279 
bôs
 = (
uöt64_t
Ë
s˘x
->
cou¡
 << 3;

282 
ödex
 = 
s˘x
->
cou¡
 & 0x3f;

283 
∑d_Àn
 = (
ödex
 < 56) ? (56 - index) : ((64+56) - index);

284 
	`fio_sha256_upd©e
(
s˘x
, 
∑ddög
, 
∑d_Àn
);

287 
	`fio_sha256_upd©e
(
s˘x
, (c⁄° 
uöt8_t
 *)&
bôs
, (bits));

290 
i
 = 0; i < 8; i++)

291 
s˘x
->
buf
[
i
] = s˘x->
°©e
[i];

292 
	}
}

	@crc/sha256.h

1 #i‚de‡
FIO_SHA256_H


2 
	#FIO_SHA256_H


	)

4 
	~<öây≥s.h
>

6 
	#SHA256_DIGEST_SIZE
 32

	)

7 
	#SHA256_BLOCK_SIZE
 64

	)

9 
	sfio_sha256_˘x
 {

10 
uöt32_t
 
	mcou¡
;

11 
uöt32_t
 
	m°©e
[
SHA256_DIGEST_SIZE
 / 4];

12 
uöt8_t
 *
	mbuf
;

15 
fio_sha256_öô
(
fio_sha256_˘x
 *);

16 
fio_sha256_upd©e
(
fio_sha256_˘x
 *, c⁄° 
uöt8_t
 *, );

17 
fio_sha256_föÆ
(
fio_sha256_˘x
 *);

	@crc/sha3.c

15 
	~<°rög.h
>

17 
	~"../os/os.h
"

19 
	~"sha3.h
"

21 
	#KECCAK_ROUNDS
 24

	)

23 
	#ROTL64
(
x
, 
y
Ë(((xË<< (y)Ë| ((xË>> (64 - (y))))

	)

25 c⁄° 
uöt64_t
 
	gkecˇkf_∫dc
[24] = {

36 c⁄° 
	gkecˇkf_rŸc
[24] = {

41 c⁄° 
	gkecˇkf_pûn
[24] = {

48 
	$kecˇkf
(
uöt64_t
 
°
[25])

50 
i
, 
j
, 
round
;

51 
uöt64_t
 
t
, 
bc
[5];

53 
round
 = 0;Ñound < 
KECCAK_ROUNDS
;Ñound++) {

56 
i
 = 0; i < 5; i++)

57 
bc
[
i
] = 
°
[i] ^ st[i + 5] ^ st[i + 10] ^ st[i + 15]

58 ^ 
°
[
i
 + 20];

60 
i
 = 0; i < 5; i++) {

61 
t
 = 
bc
[(
i
 + 4Ë% 5] ^ 
	`ROTL64
(bc[(i + 1) % 5], 1);

62 
j
 = 0; j < 25; j += 5)

63 
°
[
j
 + 
i
] ^
t
;

67 
t
 = 
°
[1];

68 
i
 = 0; i < 24; i++) {

69 
j
 = 
kecˇkf_pûn
[
i
];

70 
bc
[0] = 
°
[
j
];

71 
°
[
j
] = 
	`ROTL64
(
t
, 
kecˇkf_rŸc
[
i
]);

72 
t
 = 
bc
[0];

76 
j
 = 0; j < 25; j += 5) {

77 
i
 = 0; i < 5; i++)

78 
bc
[
i
] = 
°
[
j
 + i];

79 
i
 = 0; i < 5; i++)

80 
°
[
j
 + 
i
] ^(~
bc
[(i + 1) % 5]) &

81 
bc
[(
i
 + 2) % 5];

85 
°
[0] ^
kecˇkf_∫dc
[
round
];

87 
	}
}

89 
	$fio_sha3_öô
(
fio_sha3_˘x
 *
s˘x
, 
dige°_sz
)

91 
	`mem£t
(
s˘x
->
°
, 0, (sctx->st));

92 
s˘x
->
md_Àn
 = 
dige°_sz
;

93 
s˘x
->
rsiz
 = 200 - 2 * 
dige°_sz
;

94 
s˘x
->
rsizw
 = s˘x->
rsiz
 / 8;

95 
s˘x
->
∑πül
 = 0;

96 
	`mem£t
(
s˘x
->
buf
, 0, (sctx->buf));

97 
	}
}

99 
	$fio_sha3_224_öô
(
fio_sha3_˘x
 *
s˘x
)

101 
	`fio_sha3_öô
(
s˘x
, 
SHA3_224_DIGEST_SIZE
);

102 
	}
}

104 
	$fio_sha3_256_öô
(
fio_sha3_˘x
 *
s˘x
)

106 
	`fio_sha3_öô
(
s˘x
, 
SHA3_256_DIGEST_SIZE
);

107 
	}
}

109 
	$fio_sha3_384_öô
(
fio_sha3_˘x
 *
s˘x
)

111 
	`fio_sha3_öô
(
s˘x
, 
SHA3_384_DIGEST_SIZE
);

112 
	}
}

114 
	$fio_sha3_512_öô
(
fio_sha3_˘x
 *
s˘x
)

116 
	`fio_sha3_öô
(
s˘x
, 
SHA3_512_DIGEST_SIZE
);

117 
	}
}

119 
	$fio_sha3_upd©e
(
fio_sha3_˘x
 *
s˘x
, c⁄° 
uöt8_t
 *
d©a
,

120 
Àn
)

122 
d⁄e
;

123 c⁄° 
uöt8_t
 *
§c
;

125 
d⁄e
 = 0;

126 
§c
 = 
d©a
;

128 i‡((
s˘x
->
∑πül
 + 
Àn
Ë> (s˘x->
rsiz
 - 1)) {

129 i‡(
s˘x
->
∑πül
) {

130 
d⁄e
 = -
s˘x
->
∑πül
;

131 
	`mem˝y
(
s˘x
->
buf
 + s˘x->
∑πül
, 
d©a
,

132 
d⁄e
 + 
s˘x
->
rsiz
);

133 
§c
 = 
s˘x
->
buf
;

137 
i
;

139 
i
 = 0; i < 
s˘x
->
rsizw
; i++)

140 
s˘x
->
°
[
i
] ^((
uöt64_t
 *Ë
§c
)[i];

141 
	`kecˇkf
(
s˘x
->
°
);

143 
d⁄e
 +
s˘x
->
rsiz
;

144 
§c
 = 
d©a
 + 
d⁄e
;

145 } 
d⁄e
 + (
s˘x
->
rsiz
 - 1Ë< 
Àn
);

147 
s˘x
->
∑πül
 = 0;

149 
	`mem˝y
(
s˘x
->
buf
 + s˘x->
∑πül
, 
§c
, 
Àn
 - 
d⁄e
);

150 
s˘x
->
∑πül
 +(
Àn
 - 
d⁄e
);

153 
	}
}

155 
	$fio_sha3_föÆ
(
fio_sha3_˘x
 *
s˘x
)

157 
i
, 
öÀn
 = 
s˘x
->
∑πül
;

159 
s˘x
->
buf
[
öÀn
++] = 0x06;

160 
	`mem£t
(
s˘x
->
buf
 + 
öÀn
, 0, s˘x->
rsiz
 - inlen);

161 
s˘x
->
buf
[s˘x->
rsiz
 - 1] |= 0x80;

163 
i
 = 0; i < 
s˘x
->
rsizw
; i++)

164 
s˘x
->
°
[
i
] ^((
uöt64_t
 *Ës˘x->
buf
)[i];

166 
	`kecˇkf
(
s˘x
->
°
);

168 
i
 = 0; i < 
s˘x
->
rsizw
; i++)

169 
s˘x
->
°
[
i
] = 
	`˝u_to_À64
(sctx->st[i]);

171 
	`mem˝y
(
s˘x
->
sha
, s˘x->
°
, s˘x->
md_Àn
);

172 
	}
}

	@crc/sha3.h

4 #i‚de‡
__CRYPTO_SHA3_H__


5 
	#__CRYPTO_SHA3_H__


	)

7 
	~<öây≥s.h
>

9 
	#SHA3_224_DIGEST_SIZE
 (224 / 8)

	)

10 
	#SHA3_224_BLOCK_SIZE
 (200 - 2 * 
SHA3_224_DIGEST_SIZE
)

	)

12 
	#SHA3_256_DIGEST_SIZE
 (256 / 8)

	)

13 
	#SHA3_256_BLOCK_SIZE
 (200 - 2 * 
SHA3_256_DIGEST_SIZE
)

	)

15 
	#SHA3_384_DIGEST_SIZE
 (384 / 8)

	)

16 
	#SHA3_384_BLOCK_SIZE
 (200 - 2 * 
SHA3_384_DIGEST_SIZE
)

	)

18 
	#SHA3_512_DIGEST_SIZE
 (512 / 8)

	)

19 
	#SHA3_512_BLOCK_SIZE
 (200 - 2 * 
SHA3_512_DIGEST_SIZE
)

	)

21 
	sfio_sha3_˘x
 {

22 
uöt64_t
 
	m°
[25];

23 
	mmd_Àn
;

24 
	mrsiz
;

25 
	mrsizw
;

27 
	m∑πül
;

28 
uöt8_t
 
	mbuf
[
SHA3_224_BLOCK_SIZE
];

30 
uöt8_t
 *
	msha
;

33 
fio_sha3_224_öô
(
fio_sha3_˘x
 *
s˘x
);

34 
fio_sha3_256_öô
(
fio_sha3_˘x
 *
s˘x
);

35 
fio_sha3_384_öô
(
fio_sha3_˘x
 *
s˘x
);

36 
fio_sha3_512_öô
(
fio_sha3_˘x
 *
s˘x
);

38 
fio_sha3_upd©e
(
fio_sha3_˘x
 *
s˘x
, c⁄° 
uöt8_t
 *
d©a
,

39 
Àn
);

40 
fio_sha3_föÆ
(
fio_sha3_˘x
 *
s˘x
);

	@crc/sha512.c

14 
	~<°rög.h
>

16 
	~"../lib/bsw≠.h
"

17 
	~"sha512.h
"

19 
	#SHA384_DIGEST_SIZE
 48

	)

20 
	#SHA512_DIGEST_SIZE
 64

	)

21 
	#SHA384_HMAC_BLOCK_SIZE
 128

	)

22 
	#SHA512_HMAC_BLOCK_SIZE
 128

	)

24 
ölöe
 
uöt64_t
 
	$Ch
(
uöt64_t
 
x
, uöt64_à
y
, uöt64_à
z
)

26  
z
 ^ (
x
 & (
y
 ^ z));

27 
	}
}

29 
ölöe
 
uöt64_t
 
	$Maj
(
uöt64_t
 
x
, uöt64_à
y
, uöt64_à
z
)

31  (
x
 & 
y
Ë| (
z
 & (x | y));

32 
	}
}

34 
ölöe
 
uöt64_t
 
	$RORuöt64_t
(
uöt64_t
 
x
, uöt64_à
y
)

36  (
x
 >> 
y
) | (x << (64 - y));

37 
	}
}

39 c⁄° 
uöt64_t
 
	gsha512_K
[80] = {

69 
	#e0
(
x
Ë(
	`RORuöt64_t
(x,28Ë^ RORuöt64_t(x,34Ë^ RORuöt64_t(x,39))

	)

70 
	#e1
(
x
Ë(
	`RORuöt64_t
(x,14Ë^ RORuöt64_t(x,18Ë^ RORuöt64_t(x,41))

	)

71 
	#s0
(
x
Ë(
	`RORuöt64_t
(x, 1Ë^ RORuöt64_t(x, 8Ë^ (x >> 7))

	)

72 
	#s1
(
x
Ë(
	`RORuöt64_t
(x,19Ë^ RORuöt64_t(x,61Ë^ (x >> 6))

	)

75 
	#H0
 0x6a09e667f3bcc908ULL

	)

76 
	#H1
 0xbb67´8584ˇa73bULL

	)

77 
	#H2
 0x3c6ef372„94f82bULL

	)

78 
	#H3
 0xa54ff53a5f1d36f1ULL

	)

79 
	#H4
 0x510e527Áde682d1ULL

	)

80 
	#H5
 0x9b05688c2b3e6c1fULL

	)

81 
	#H6
 0x1f83d9abfb41bd6bULL

	)

82 
	#H7
 0x5be0cd19137e2179ULL

	)

85 
	#HP0
 0xcbbb9d5dc1059ed8ULL

	)

86 
	#HP1
 0x629a292a367cd507ULL

	)

87 
	#HP2
 0x9159015a3070dd17ULL

	)

88 
	#HP3
 0x152„cd8f70e5939ULL

	)

89 
	#HP4
 0x67332667ffc00b31ULL

	)

90 
	#HP5
 0x8eb44a8768581511ULL

	)

91 
	#HP6
 0xdb0c2e0d64f98Á7ULL

	)

92 
	#HP7
 0x47b5481dbeÁ4Á4ULL

	)

94 
ölöe
 
	$LOAD_OP
(
I
, 
uöt64_t
 *
W
, c⁄° 
uöt8_t
 *
öput
)

96 
W
[
I
] = 
	`__be64_to_˝u
–((
uöt64_t
 *)(
öput
))[I] );

97 
	}
}

99 
ölöe
 
	$BLEND_OP
(
I
, 
uöt64_t
 *
W
)

101 
W
[
I
] = 
	`s1
(W[I-2]Ë+ W[I-7] + 
	`s0
(W[I-15]) + W[I-16];

102 
	}
}

104 
	$sha512_å™sf‹m
(
uöt64_t
 *
°©e
, uöt64_à*
W
, c⁄° 
uöt8_t
 *
öput
)

106 
uöt64_t
 
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
, 
t1
, 
t2
;

108 
i
;

111 
i
 = 0; i < 16; i++)

112 
	`LOAD_OP
(
i
, 
W
, 
öput
);

114 
i
 = 16; i < 80; i++)

115 
	`BLEND_OP
(
i
, 
W
);

118 
a
=
°©e
[0]; 
b
=°©e[1]; 
c
=°©e[2]; 
d
=state[3];

119 
e
=
°©e
[4]; 
f
=°©e[5]; 
g
=°©e[6]; 
h
=state[7];

122 
i
=0; i<80; i+=8) {

123 
t1
 = 
h
 + 
	`e1
(
e
Ë+ 
	`Ch
”,
f
,
g
Ë+ 
sha512_K
[
i
 ] + 
W
[i ];

124 
t2
 = 
	`e0
(
a
Ë+ 
	`Maj
◊,
b
,
c
); 
d
+=
t1
; 
h
=t1+t2;

125 
t1
 = 
g
 + 
	`e1
(
d
Ë+ 
	`Ch
(d,
e
,
f
Ë+ 
sha512_K
[
i
+1] + 
W
[i+1];

126 
t2
 = 
	`e0
(
h
Ë+ 
	`Maj
(h,
a
,
b
); 
c
+=
t1
; 
g
=t1+t2;

127 
t1
 = 
f
 + 
	`e1
(
c
Ë+ 
	`Ch
(c,
d
,
e
Ë+ 
sha512_K
[
i
+2] + 
W
[i+2];

128 
t2
 = 
	`e0
(
g
Ë+ 
	`Maj
(g,
h
,
a
); 
b
+=
t1
; 
f
=t1+t2;

129 
t1
 = 
e
 + 
	`e1
(
b
Ë+ 
	`Ch
(b,
c
,
d
Ë+ 
sha512_K
[
i
+3] + 
W
[i+3];

130 
t2
 = 
	`e0
(
f
Ë+ 
	`Maj
(f,
g
,
h
); 
a
+=
t1
; 
e
=t1+t2;

131 
t1
 = 
d
 + 
	`e1
(
a
Ë+ 
	`Ch
◊,
b
,
c
Ë+ 
sha512_K
[
i
+4] + 
W
[i+4];

132 
t2
 = 
	`e0
(
e
Ë+ 
	`Maj
”,
f
,
g
); 
h
+=
t1
; 
d
=t1+t2;

133 
t1
 = 
c
 + 
	`e1
(
h
Ë+ 
	`Ch
(h,
a
,
b
Ë+ 
sha512_K
[
i
+5] + 
W
[i+5];

134 
t2
 = 
	`e0
(
d
Ë+ 
	`Maj
(d,
e
,
f
); 
g
+=
t1
; 
c
=t1+t2;

135 
t1
 = 
b
 + 
	`e1
(
g
Ë+ 
	`Ch
(g,
h
,
a
Ë+ 
sha512_K
[
i
+6] + 
W
[i+6];

136 
t2
 = 
	`e0
(
c
Ë+ 
	`Maj
(c,
d
,
e
); 
f
+=
t1
; 
b
=t1+t2;

137 
t1
 = 
a
 + 
	`e1
(
f
Ë+ 
	`Ch
(f,
g
,
h
Ë+ 
sha512_K
[
i
+7] + 
W
[i+7];

138 
t2
 = 
	`e0
(
b
Ë+ 
	`Maj
(b,
c
,
d
); 
e
+=
t1
; 
a
=t1+t2;

141 
°©e
[0] +
a
; sèã[1] +
b
; sèã[2] +
c
; sèã[3] +
d
;

142 
°©e
[4] +
e
; sèã[5] +
f
; sèã[6] +
g
; sèã[7] +
h
;

145 
a
 = 
b
 = 
c
 = 
d
 = 
e
 = 
f
 = 
g
 = 
h
 = 
t1
 = 
t2
 = 0;

146 
	}
}

148 
	$fio_sha512_öô
(
fio_sha512_˘x
 *
s˘x
)

150 
s˘x
->
°©e
[0] = 
H0
;

151 
s˘x
->
°©e
[1] = 
H1
;

152 
s˘x
->
°©e
[2] = 
H2
;

153 
s˘x
->
°©e
[3] = 
H3
;

154 
s˘x
->
°©e
[4] = 
H4
;

155 
s˘x
->
°©e
[5] = 
H5
;

156 
s˘x
->
°©e
[6] = 
H6
;

157 
s˘x
->
°©e
[7] = 
H7
;

158 
s˘x
->
cou¡
[0] = sctx->count[1] = sctx->count[2] = sctx->count[3] = 0;

159 
	}
}

161 
	$fio_sha512_upd©e
(
fio_sha512_˘x
 *
s˘x
, c⁄° 
uöt8_t
 *
d©a
,

162 
Àn
)

164 
i
, 
idx
, 
∑π_Àn
;

167 
idx
 = ()((
s˘x
->
cou¡
[0] >> 3) & 0x7F);

170 i‡((
s˘x
->
cou¡
[0] +(
Àn
 << 3)) < (len << 3)) {

171 i‡((
s˘x
->
cou¡
[1] += 1) < 1)

172 i‡((
s˘x
->
cou¡
[2] += 1) < 1)

173 
s˘x
->
cou¡
[3]++;

174 
s˘x
->
cou¡
[1] +(
Àn
 >> 29);

177 
∑π_Àn
 = 128 - 
idx
;

180 i‡(
Àn
 >
∑π_Àn
) {

181 
	`mem˝y
(&
s˘x
->
buf
[
idx
], 
d©a
, 
∑π_Àn
);

182 
	`sha512_å™sf‹m
(
s˘x
->
°©e
, s˘x->
W
, s˘x->
buf
);

184 
i
 = 
∑π_Àn
; i + 127 < 
Àn
; i+=128)

185 
	`sha512_å™sf‹m
(
s˘x
->
°©e
, s˘x->
W
, &
d©a
[
i
]);

187 
idx
 = 0;

189 
i
 = 0;

193 
	`mem˝y
(&
s˘x
->
buf
[
idx
], &
d©a
[
i
], 
Àn
 - i);

196 
	`mem£t
(
s˘x
->
W
, 0, (sctx->W));

197 
	}
}

	@crc/sha512.h

1 #i‚de‡
FIO_SHA512_H


2 
	#FIO_SHA512_H


	)

4 
	~<öây≥s.h
>

6 
	sfio_sha512_˘x
 {

7 
uöt64_t
 
	m°©e
[8];

8 
uöt32_t
 
	mcou¡
[4];

9 
uöt8_t
 *
	mbuf
;

10 
uöt64_t
 
	mW
[80];

13 
fio_sha512_öô
(
fio_sha512_˘x
 *);

14 
fio_sha512_upd©e
(
fio_sha512_˘x
 *, c⁄° 
uöt8_t
 *, );

	@crc/test.c

1 
	~<öây≥s.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

6 
	~"../gëtime.h
"

7 
	~"../fio_time.h
"

8 
	~"../lib/ønd.h
"

9 
	~"../os/os.h
"

11 
	~"../¸c/md5.h
"

12 
	~"../¸c/¸c64.h
"

13 
	~"../¸c/¸c32.h
"

14 
	~"../¸c/¸c32c.h
"

15 
	~"../¸c/¸c16.h
"

16 
	~"../¸c/¸c7.h
"

17 
	~"../¸c/sha1.h
"

18 
	~"../¸c/sha256.h
"

19 
	~"../¸c/sha512.h
"

20 
	~"../¸c/sha3.h
"

21 
	~"../¸c/xxhash.h
"

22 
	~"../¸c/murmur3.h
"

23 
	~"../¸c/‚v.h
"

24 
	~"../hash.h
"

26 
	~"ã°.h
"

28 
	#CHUNK
 131072U

	)

29 
	#NR_CHUNKS
 2048U

	)

31 
	sã°_ty≥
 {

32 c⁄° *
	m«me
;

33 
	mmask
;

34 (*
	m‚
)(
	mã°_ty≥
 *, *, 
	msize_t
);

35 
uöt32_t
 
	mouçut
;

39 
	mT_MD5
 = 1U << 0,

40 
	mT_CRC64
 = 1U << 1,

41 
	mT_CRC32
 = 1U << 2,

42 
	mT_CRC32C
 = 1U << 3,

43 
	mT_CRC16
 = 1U << 4,

44 
	mT_CRC7
 = 1U << 5,

45 
	mT_SHA1
 = 1U << 6,

46 
	mT_SHA256
 = 1U << 7,

47 
	mT_SHA512
 = 1U << 8,

48 
	mT_XXHASH
 = 1U << 9,

49 
	mT_MURMUR3
 = 1U << 10,

50 
	mT_JHASH
 = 1U << 11,

51 
	mT_FNV
 = 1U << 12,

52 
	mT_SHA3_224
 = 1U << 13,

53 
	mT_SHA3_256
 = 1U << 14,

54 
	mT_SHA3_384
 = 1U << 15,

55 
	mT_SHA3_512
 = 1U << 16,

58 
	$t_md5
(
ã°_ty≥
 *
t
, *
buf
, 
size_t
 
size
)

60 
uöt32_t
 
dige°
[4];

61 
fio_md5_˘x
 
˘x
 = { .
hash
 = 
dige°
 };

62 
i
;

64 
	`fio_md5_öô
(&
˘x
);

66 
i
 = 0; i < 
NR_CHUNKS
; i++) {

67 
	`fio_md5_upd©e
(&
˘x
, 
buf
, 
size
);

68 
	`fio_md5_föÆ
(&
˘x
);

70 
	}
}

72 
	$t_¸c64
(
ã°_ty≥
 *
t
, *
buf
, 
size_t
 
size
)

74 
i
;

76 
i
 = 0; i < 
NR_CHUNKS
; i++)

77 
t
->
ouçut
 +
	`fio_¸c64
(
buf
, 
size
);

78 
	}
}

80 
	$t_¸c32
(
ã°_ty≥
 *
t
, *
buf
, 
size_t
 
size
)

82 
i
;

84 
i
 = 0; i < 
NR_CHUNKS
; i++)

85 
t
->
ouçut
 +
	`fio_¸c32
(
buf
, 
size
);

86 
	}
}

88 
	$t_¸c32c
(
ã°_ty≥
 *
t
, *
buf
, 
size_t
 
size
)

90 
i
;

92 
i
 = 0; i < 
NR_CHUNKS
; i++)

93 
t
->
ouçut
 +
	`fio_¸c32c
(
buf
, 
size
);

94 
	}
}

96 
	$t_¸c16
(
ã°_ty≥
 *
t
, *
buf
, 
size_t
 
size
)

98 
i
;

100 
i
 = 0; i < 
NR_CHUNKS
; i++)

101 
t
->
ouçut
 +
	`fio_¸c16
(
buf
, 
size
);

102 
	}
}

104 
	$t_¸c7
(
ã°_ty≥
 *
t
, *
buf
, 
size_t
 
size
)

106 
i
;

108 
i
 = 0; i < 
NR_CHUNKS
; i++)

109 
t
->
ouçut
 +
	`fio_¸c7
(
buf
, 
size
);

110 
	}
}

112 
	$t_sha1
(
ã°_ty≥
 *
t
, *
buf
, 
size_t
 
size
)

114 
uöt32_t
 
sha
[5];

115 
fio_sha1_˘x
 
˘x
 = { .
H
 = 
sha
 };

116 
i
;

118 
	`fio_sha1_öô
(&
˘x
);

120 
i
 = 0; i < 
NR_CHUNKS
; i++) {

121 
	`fio_sha1_upd©e
(&
˘x
, 
buf
, 
size
);

122 
	`fio_sha1_föÆ
(&
˘x
);

124 
	}
}

126 
	$t_sha256
(
ã°_ty≥
 *
t
, *
buf
, 
size_t
 
size
)

128 
uöt8_t
 
sha
[64];

129 
fio_sha256_˘x
 
˘x
 = { .
buf
 = 
sha
 };

130 
i
;

132 
	`fio_sha256_öô
(&
˘x
);

134 
i
 = 0; i < 
NR_CHUNKS
; i++) {

135 
	`fio_sha256_upd©e
(&
˘x
, 
buf
, 
size
);

136 
	`fio_sha256_föÆ
(&
˘x
);

138 
	}
}

140 
	$t_sha512
(
ã°_ty≥
 *
t
, *
buf
, 
size_t
 
size
)

142 
uöt8_t
 
sha
[128];

143 
fio_sha512_˘x
 
˘x
 = { .
buf
 = 
sha
 };

144 
i
;

146 
	`fio_sha512_öô
(&
˘x
);

148 
i
 = 0; i < 
NR_CHUNKS
; i++)

149 
	`fio_sha512_upd©e
(&
˘x
, 
buf
, 
size
);

150 
	}
}

152 
	$t_sha3_224
(
ã°_ty≥
 *
t
, *
buf
, 
size_t
 
size
)

154 
uöt8_t
 
sha
[
SHA3_224_DIGEST_SIZE
];

155 
fio_sha3_˘x
 
˘x
 = { .
sha
 = sha };

156 
i
;

158 
	`fio_sha3_224_öô
(&
˘x
);

160 
i
 = 0; i < 
NR_CHUNKS
; i++) {

161 
	`fio_sha3_upd©e
(&
˘x
, 
buf
, 
size
);

162 
	`fio_sha3_föÆ
(&
˘x
);

164 
	}
}

166 
	$t_sha3_256
(
ã°_ty≥
 *
t
, *
buf
, 
size_t
 
size
)

168 
uöt8_t
 
sha
[
SHA3_256_DIGEST_SIZE
];

169 
fio_sha3_˘x
 
˘x
 = { .
sha
 = sha };

170 
i
;

172 
	`fio_sha3_256_öô
(&
˘x
);

174 
i
 = 0; i < 
NR_CHUNKS
; i++) {

175 
	`fio_sha3_upd©e
(&
˘x
, 
buf
, 
size
);

176 
	`fio_sha3_föÆ
(&
˘x
);

178 
	}
}

180 
	$t_sha3_384
(
ã°_ty≥
 *
t
, *
buf
, 
size_t
 
size
)

182 
uöt8_t
 
sha
[
SHA3_384_DIGEST_SIZE
];

183 
fio_sha3_˘x
 
˘x
 = { .
sha
 = sha };

184 
i
;

186 
	`fio_sha3_384_öô
(&
˘x
);

188 
i
 = 0; i < 
NR_CHUNKS
; i++) {

189 
	`fio_sha3_upd©e
(&
˘x
, 
buf
, 
size
);

190 
	`fio_sha3_föÆ
(&
˘x
);

192 
	}
}

194 
	$t_sha3_512
(
ã°_ty≥
 *
t
, *
buf
, 
size_t
 
size
)

196 
uöt8_t
 
sha
[
SHA3_512_DIGEST_SIZE
];

197 
fio_sha3_˘x
 
˘x
 = { .
sha
 = sha };

198 
i
;

200 
	`fio_sha3_512_öô
(&
˘x
);

202 
i
 = 0; i < 
NR_CHUNKS
; i++) {

203 
	`fio_sha3_upd©e
(&
˘x
, 
buf
, 
size
);

204 
	`fio_sha3_föÆ
(&
˘x
);

206 
	}
}

208 
	$t_murmur3
(
ã°_ty≥
 *
t
, *
buf
, 
size_t
 
size
)

210 
i
;

212 
i
 = 0; i < 
NR_CHUNKS
; i++)

213 
t
->
ouçut
 +
	`murmurhash3
(
buf
, 
size
, 0x8989);

214 
	}
}

216 
	$t_jhash
(
ã°_ty≥
 *
t
, *
buf
, 
size_t
 
size
)

218 
i
;

220 
i
 = 0; i < 
NR_CHUNKS
; i++)

221 
t
->
ouçut
 +
	`jhash
(
buf
, 
size
, 0x8989);

222 
	}
}

224 
	$t_‚v
(
ã°_ty≥
 *
t
, *
buf
, 
size_t
 
size
)

226 
i
;

228 
i
 = 0; i < 
NR_CHUNKS
; i++)

229 
t
->
ouçut
 +
	`‚v
(
buf
, 
size
, 0x8989);

230 
	}
}

232 
	$t_xxhash
(
ã°_ty≥
 *
t
, *
buf
, 
size_t
 
size
)

234 *
°©e
;

235 
i
;

237 
°©e
 = 
	`XXH32_öô
(0x8989);

239 
i
 = 0; i < 
NR_CHUNKS
; i++)

240 
	`XXH32_upd©e
(
°©e
, 
buf
, 
size
);

242 
t
->
ouçut
 = 
	`XXH32_dige°
(
°©e
);

243 
	}
}

245 
ã°_ty≥
 
	gt
[] = {

247 .
«me
 = "md5",

248 .
	gmask
 = 
T_MD5
,

249 .
	g‚
 = 
t_md5
,

252 .
	g«me
 = "crc64",

253 .
	gmask
 = 
T_CRC64
,

254 .
	g‚
 = 
t_¸c64
,

257 .
	g«me
 = "crc32",

258 .
	gmask
 = 
T_CRC32
,

259 .
	g‚
 = 
t_¸c32
,

262 .
	g«me
 = "crc32c",

263 .
	gmask
 = 
T_CRC32C
,

264 .
	g‚
 = 
t_¸c32c
,

267 .
	g«me
 = "crc16",

268 .
	gmask
 = 
T_CRC16
,

269 .
	g‚
 = 
t_¸c16
,

272 .
	g«me
 = "crc7",

273 .
	gmask
 = 
T_CRC7
,

274 .
	g‚
 = 
t_¸c7
,

277 .
	g«me
 = "sha1",

278 .
	gmask
 = 
T_SHA1
,

279 .
	g‚
 = 
t_sha1
,

282 .
	g«me
 = "sha256",

283 .
	gmask
 = 
T_SHA256
,

284 .
	g‚
 = 
t_sha256
,

287 .
	g«me
 = "sha512",

288 .
	gmask
 = 
T_SHA512
,

289 .
	g‚
 = 
t_sha512
,

292 .
	g«me
 = "xxhash",

293 .
	gmask
 = 
T_XXHASH
,

294 .
	g‚
 = 
t_xxhash
,

297 .
	g«me
 = "murmur3",

298 .
	gmask
 = 
T_MURMUR3
,

299 .
	g‚
 = 
t_murmur3
,

302 .
	g«me
 = "jhash",

303 .
	gmask
 = 
T_JHASH
,

304 .
	g‚
 = 
t_jhash
,

307 .
	g«me
 = "fnv",

308 .
	gmask
 = 
T_FNV
,

309 .
	g‚
 = 
t_‚v
,

312 .
	g«me
 = "sha3-224",

313 .
	gmask
 = 
T_SHA3_224
,

314 .
	g‚
 = 
t_sha3_224
,

317 .
	g«me
 = "sha3-256",

318 .
	gmask
 = 
T_SHA3_256
,

319 .
	g‚
 = 
t_sha3_256
,

322 .
	g«me
 = "sha3-384",

323 .
	gmask
 = 
T_SHA3_384
,

324 .
	g‚
 = 
t_sha3_384
,

327 .
	g«me
 = "sha3-512",

328 .
	gmask
 = 
T_SHA3_512
,

329 .
	g‚
 = 
t_sha3_512
,

332 .
	g«me
 = 
NULL
,

336 
	$gë_ã°_mask
(c⁄° *
ty≥
)

338 *
o°r
, *
°r
 = 
	`°rdup
(
ty≥
);

339 
mask
;

340 *
«me
;

341 
i
;

343 
o°r
 = 
°r
;

344 
mask
 = 0;

345 (
«me
 = 
	`°r£p
(&
°r
, ",")Ë!
NULL
) {

346 
i
 = 0; 
t
[i].
«me
; i++) {

347 i‡(!
	`°rcmp
(
t
[
i
].
«me
,Çame)) {

348 
mask
 |
t
[
i
].mask;

354 
	`‰ì
(
o°r
);

355  
mask
;

356 
	}
}

358 
	$li°_ty≥s
()

360 
i
;

362 
i
 = 0; 
t
[i].
«me
; i++)

363 
	`¥ötf
("%s\n", 
t
[
i
].
«me
);

366 
	}
}

368 
	$fio_¸˘e°
(c⁄° *
ty≥
)

370 
ã°_mask
 = 0;

371 
uöt64_t
 
mb
 = 
CHUNK
 * 
NR_CHUNKS
;

372 
‰™d_°©e
 
°©e
;

373 
i
, 
fú°
 = 1;

374 *
buf
;

376 
	`¸c32c_¨m64_¥obe
();

377 
	`¸c32c_öãl_¥obe
();

379 i‡(!
ty≥
)

380 
ã°_mask
 = ~0U;

381 i‡(!
	`°rcmp
(
ty≥
, "help") || !strcmp(type, "list"))

382  
	`li°_ty≥s
();

384 
ã°_mask
 = 
	`gë_ã°_mask
(
ty≥
);

386 i‡(!
ã°_mask
) {

387 
	`Ârötf
(
°dîr
, "fio: unknow¿hash `%s`. AvaûabÀ:\n", 
ty≥
);

388  
	`li°_ty≥s
();

391 
buf
 = 
	`mÆloc
(
CHUNK
);

392 
	`öô_ønd_£ed
(&
°©e
, 0x8989, 0);

393 
	`fûl_øndom_buf
(&
°©e
, 
buf
, 
CHUNK
);

395 
i
 = 0; 
t
[i].
«me
; i++) {

396 
time•ec
 
ts
;

397 
mb_£c
;

398 
uöt64_t
 
u£c
;

399 
¥e
[3];

401 i‡(!(
t
[
i
].
mask
 & 
ã°_mask
))

408 i‡(
fú°
) {

409 
	`u£c_•ö
(100000);

410 
t
[
i
].
	`‚
(&t[i], 
buf
, 
CHUNK
);

413 
	`fio_gëtime
(&
ts
, 
NULL
);

414 
t
[
i
].
	`‚
(&t[i], 
buf
, 
CHUNK
);

415 
u£c
 = 
	`utime_sö˚_now
(&
ts
);

417 i‡(
u£c
) {

418 
mb_£c
 = (Ë
mb
 / (Ë
u£c
;

419 
mb_£c
 /= (1.024 * 1.024);

420 i‡(
	`°æí
(
t
[
i
].
«me
) >= 7)

421 
	`•rötf
(
¥e
, "\t");

423 
	`•rötf
(
¥e
, "\t\t");

424 
	`¥ötf
("%s:%s%8.2‡MiB/£c\n", 
t
[
i
].
«me
, 
¥e
, 
mb_£c
);

426 
	`¥ötf
("%s:ö‡MiB/£c\n", 
t
[
i
].
«me
);

427 
fú°
 = 0;

430 
	`‰ì
(
buf
);

432 
	}
}

	@crc/test.h

1 #i‚de‡
FIO_CRC_TEST_H


2 
	#FIO_CRC_TEST_H


	)

4 
fio_¸˘e°
(c⁄° *
ty≥
);

	@crc/xxhash.c

41 #i‡
deföed
(
__ARM_FEATURE_UNALIGNED
Ë|| deföed(
__i386
Ë|| deföed(
_M_IX86
Ë|| deföed(
__x86_64__
Ë|| deföed(
_M_X64
)

42 
	#XXH_USE_UNALIGNED_ACCESS
 1

	)

59 
	#XXH_FORCE_NATIVE_FORMAT
 0

	)

65 
	~"xxhash.h
"

66 
	~<°dlib.h
>

67 
	~<°rög.h
>

70 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
XXH_USE_UNALIGNED_ACCESS
)

71 
	#_PACKED
 
	`__©åibuã__
 ((
∑cked
))

	)

73 
	#_PACKED


	)

76 #i‡!
deföed
(
XXH_USE_UNALIGNED_ACCESS
Ë&& !deföed(
__GNUC__
)

77 #ifde‡
__IBMC__


78 #¥agm®
∑ck
(1)

80 #¥agm®
∑ck
(
push
, 1)

84 
	s_uöt32_t_S
 { 
uöt32_t
 
	mv
; } 
	t_PACKED
 
	tuöt32_t_S
;

86 #i‡!
deföed
(
XXH_USE_UNALIGNED_ACCESS
Ë&& !deföed(
__GNUC__
)

87 #¥agm®
∑ck
(
p›
)

90 
	#A32
(
x
Ë(((
uöt32_t_S
 *)(x))->
v
)

	)

96 
	#GCC_VERSION
 (
__GNUC__
 * 100 + 
__GNUC_MINOR__
)

	)

99 #i‡
deföed
(
_MSC_VER
)

100 
	#XXH_rŸl32
(
x
,
r
Ë
	`_rŸl
(x,r)

	)

102 
	#XXH_rŸl32
(
x
,
r
Ë((x <<ÑË| (x >> (32 -Ñ)))

	)

105 #i‡
deföed
(
_MSC_VER
)

106 
	#XXH_sw≠32
 
_byãsw≠_ul⁄g


	)

107 #ñi‡
GCC_VERSION
 >= 403

108 
	#XXH_sw≠32
 
__buûtö_bsw≠32


	)

110 
ölöe
 
uöt32_t
 
	$XXH_sw≠32
 (
uöt32_t
 
x
)

112  ((
x
 << 24) & 0xff000000 ) |

113 ((
x
 << 8) & 0x00ff0000 ) |

114 ((
x
 >> 8) & 0x0000ff00 ) |

115 ((
x
 >> 24) & 0x000000ff );

116 
	}
}

123 
	#PRIME32_1
 2654435761U

	)

124 
	#PRIME32_2
 2246822519U

	)

125 
	#PRIME32_3
 3266489917U

	)

126 
	#PRIME32_4
 668265263U

	)

127 
	#PRIME32_5
 374761393U

	)

133 íum { 
	mXXH_bigEndün
=0, 
	mXXH_lôéeEndün
=1 } 
	tXXH_ídü√ss
;

134 #i‚de‡
XXH_CPU_LITTLE_ENDIAN


135 c⁄° 
	g⁄e
 = 1;

136 
	#XXH_CPU_LITTLE_ENDIAN
 (*(*)(&
⁄e
))

	)

143 
	#XXH_STATIC_ASSERT
(
c
Ë{Énum { 
XXH_°©ic_as£π
 = 1/(!!(c)) }; }

144 

	)

149 íum { 
	mXXH_Æig√d
, 
	mXXH_u«lig√d
 } 
	tXXH_Æignmít
;

151 
uöt32_t
 
	$XXH_ªadLE32_Æign
(c⁄° 
uöt32_t
* 
±r
, 
XXH_ídü√ss
 
ídün
, 
XXH_Æignmít
 
Æign
)

153 i‡(
Æign
==
XXH_u«lig√d
)

154  
ídün
==
XXH_lôéeEndün
 ? 
	`A32
(
±r
Ë: 
	`XXH_sw≠32
(A32(ptr));

156  
ídün
==
XXH_lôéeEndün
 ? *
±r
 : 
	`XXH_sw≠32
(*ptr);

157 
	}
}

159 
uöt32_t
 
	$XXH_ªadLE32
(c⁄° 
uöt32_t
* 
±r
, 
XXH_ídü√ss
 
ídün
Ë{  
	`XXH_ªadLE32_Æign
’å,Éndün, 
XXH_u«lig√d
); 
	}
}

165 
uöt32_t
 
	$XXH32_ídün_Æign
(c⁄° * 
öput
, 
Àn
, 
uöt32_t
 
£ed
, 
XXH_ídü√ss
 
ídün
, 
XXH_Æignmít
 
Æign
)

167 c⁄° 
uöt8_t
 *
p
 = (c⁄° uöt8_à*)
öput
;

168 c⁄° 
uöt8_t
 * c⁄° 
bEnd
 = 
p
 + 
Àn
;

169 
uöt32_t
 
h32
;

171 #ifde‡
XXH_ACCEPT_NULL_INPUT_POINTER


172 i‡(
p
==
NULL
Ë{ 
Àn
=0;Ö=(c⁄° 
uöt8_t
 *)(
size_t
)16; }

175 i‡(
Àn
>=16)

177 c⁄° 
uöt8_t
 * c⁄° 
limô
 = 
bEnd
 - 16;

178 
uöt32_t
 
v1
 = 
£ed
 + 
PRIME32_1
 + 
PRIME32_2
;

179 
uöt32_t
 
v2
 = 
£ed
 + 
PRIME32_2
;

180 
uöt32_t
 
v3
 = 
£ed
 + 0;

181 
uöt32_t
 
v4
 = 
£ed
 - 
PRIME32_1
;

185 
v1
 +
	`XXH_ªadLE32_Æign
((c⁄° 
uöt32_t
*)
p
, 
ídün
, 
Æign
Ë* 
PRIME32_2
; v1 = 
	`XXH_rŸl32
(v1, 13); v1 *
PRIME32_1
;Ö+=4;

186 
v2
 +
	`XXH_ªadLE32_Æign
((c⁄° 
uöt32_t
*)
p
, 
ídün
, 
Æign
Ë* 
PRIME32_2
; v2 = 
	`XXH_rŸl32
(v2, 13); v2 *
PRIME32_1
;Ö+=4;

187 
v3
 +
	`XXH_ªadLE32_Æign
((c⁄° 
uöt32_t
*)
p
, 
ídün
, 
Æign
Ë* 
PRIME32_2
; v3 = 
	`XXH_rŸl32
(v3, 13); v3 *
PRIME32_1
;Ö+=4;

188 
v4
 +
	`XXH_ªadLE32_Æign
((c⁄° 
uöt32_t
*)
p
, 
ídün
, 
Æign
Ë* 
PRIME32_2
; v4 = 
	`XXH_rŸl32
(v4, 13); v4 *
PRIME32_1
;Ö+=4;

189 } 
p
<=
limô
);

191 
h32
 = 
	`XXH_rŸl32
(
v1
, 1Ë+ XXH_rŸl32(
v2
, 7Ë+ XXH_rŸl32(
v3
, 12Ë+ XXH_rŸl32(
v4
, 18);

195 
h32
 = 
£ed
 + 
PRIME32_5
;

198 
h32
 +(
uöt32_t
Ë
Àn
;

200 
p
<=
bEnd
-4)

202 
h32
 +
	`XXH_ªadLE32_Æign
((c⁄° 
uöt32_t
*)
p
, 
ídün
, 
Æign
Ë* 
PRIME32_3
;

203 
h32
 = 
	`XXH_rŸl32
(h32, 17Ë* 
PRIME32_4
 ;

204 
p
+=4;

207 
p
<
bEnd
)

209 
h32
 +(*
p
Ë* 
PRIME32_5
;

210 
h32
 = 
	`XXH_rŸl32
(h32, 11Ë* 
PRIME32_1
 ;

211 
p
++;

214 
h32
 ^= h32 >> 15;

215 
h32
 *
PRIME32_2
;

216 
h32
 ^= h32 >> 13;

217 
h32
 *
PRIME32_3
;

218 
h32
 ^= h32 >> 16;

220  
h32
;

221 
	}
}

224 
uöt32_t
 
	$XXH32
(c⁄° * 
öput
, 
uöt32_t
 
Àn
, uöt32_à
£ed
)

228 * 
°©e
 = 
	`XXH32_öô
(
£ed
);

229 
	`XXH32_upd©e
(
°©e
, 
öput
, 
Àn
);

230  
	`XXH32_dige°
(
°©e
);

232 
XXH_ídü√ss
 
ídün_dëe˘ed
 = (XXH_ídü√ss)
XXH_CPU_LITTLE_ENDIAN
;

234 #i‡!
	`deföed
(
XXH_USE_UNALIGNED_ACCESS
)

235 i‡((((
size_t
)
öput
) & 3))

237 i‡((
ídün_dëe˘ed
==
XXH_lôéeEndün
Ë|| 
XXH_FORCE_NATIVE_FORMAT
)

238  
	`XXH32_ídün_Æign
(
öput
, 
Àn
, 
£ed
, 
XXH_lôéeEndün
, 
XXH_Æig√d
);

240  
	`XXH32_ídün_Æign
(
öput
, 
Àn
, 
£ed
, 
XXH_bigEndün
, 
XXH_Æig√d
);

244 i‡((
ídün_dëe˘ed
==
XXH_lôéeEndün
Ë|| 
XXH_FORCE_NATIVE_FORMAT
)

245  
	`XXH32_ídün_Æign
(
öput
, 
Àn
, 
£ed
, 
XXH_lôéeEndün
, 
XXH_u«lig√d
);

247  
	`XXH32_ídün_Æign
(
öput
, 
Àn
, 
£ed
, 
XXH_bigEndün
, 
XXH_u«lig√d
);

249 
	}
}

256 
	$XXH32_sizeofSèã
()

258 
	`XXH_STATIC_ASSERT
(
XXH32_SIZEOFSTATE
 >(
XXH_°©e32_t
));

259  (
XXH_°©e32_t
);

260 
	}
}

263 
XXH_îr‹code
 
	$XXH32_ª£tSèã
(* 
°©e_ö
, 
uöt32_t
 
£ed
)

265 
XXH_°©e32_t
 * 
°©e
 = (XXH_°©e32_à*Ë
°©e_ö
;

266 
°©e
->
£ed
 = seed;

267 
°©e
->
v1
 = 
£ed
 + 
PRIME32_1
 + 
PRIME32_2
;

268 
°©e
->
v2
 = 
£ed
 + 
PRIME32_2
;

269 
°©e
->
v3
 = 
£ed
 + 0;

270 
°©e
->
v4
 = 
£ed
 - 
PRIME32_1
;

271 
°©e
->
tŸÆ_Àn
 = 0;

272 
°©e
->
memsize
 = 0;

273  
XXH_OK
;

274 
	}
}

277 * 
	$XXH32_öô
 (
uöt32_t
 
£ed
)

279 *
°©e
 = 
	`mÆloc
 ((
XXH_°©e32_t
));

280 
	`XXH32_ª£tSèã
(
°©e
, 
£ed
);

281  
°©e
;

282 
	}
}

285 
XXH_îr‹code
 
	$XXH32_upd©e_ídün
 (* 
°©e_ö
, c⁄° * 
öput
, 
Àn
, 
XXH_ídü√ss
 
ídün
)

287 
XXH_°©e32_t
 * 
°©e
 = (XXH_°©e32_à*Ë
°©e_ö
;

288 c⁄° 
uöt8_t
 *
p
 = (c⁄° uöt8_à*)
öput
;

289 c⁄° 
uöt8_t
 * c⁄° 
bEnd
 = 
p
 + 
Àn
;

291 #ifde‡
XXH_ACCEPT_NULL_INPUT_POINTER


292 i‡(
öput
==
NULL
Ë 
XXH_ERROR
;

295 
°©e
->
tŸÆ_Àn
 +
Àn
;

297 i‡(
°©e
->
memsize
 + 
Àn
 < 16)

299 
	`mem˝y
(
°©e
->
mem‹y
 + sèã->
memsize
, 
öput
, 
Àn
);

300 
°©e
->
memsize
 +
Àn
;

301  
XXH_OK
;

304 i‡(
°©e
->
memsize
)

306 
	`mem˝y
(
°©e
->
mem‹y
 + sèã->
memsize
, 
öput
, 16-state->memsize);

308 c⁄° 
uöt32_t
* 
p32
 = (c⁄° uöt32_t*)
°©e
->
mem‹y
;

309 
°©e
->
v1
 +
	`XXH_ªadLE32
(
p32
, 
ídün
Ë* 
PRIME32_2
; sèã->v1 = 
	`XXH_rŸl32
(°©e->v1, 13); sèã->v1 *
PRIME32_1
;Ö32++;

310 
°©e
->
v2
 +
	`XXH_ªadLE32
(
p32
, 
ídün
Ë* 
PRIME32_2
; sèã->v2 = 
	`XXH_rŸl32
(°©e->v2, 13); sèã->v2 *
PRIME32_1
;Ö32++;

311 
°©e
->
v3
 +
	`XXH_ªadLE32
(
p32
, 
ídün
Ë* 
PRIME32_2
; sèã->v3 = 
	`XXH_rŸl32
(°©e->v3, 13); sèã->v3 *
PRIME32_1
;Ö32++;

312 
°©e
->
v4
 +
	`XXH_ªadLE32
(
p32
, 
ídün
Ë* 
PRIME32_2
; sèã->v4 = 
	`XXH_rŸl32
(°©e->v4, 13); sèã->v4 *
PRIME32_1
;Ö32++;

314 
p
 +16-
°©e
->
memsize
;

315 
°©e
->
memsize
 = 0;

318 i‡(
p
 <
bEnd
-16)

320 c⁄° 
uöt8_t
 * c⁄° 
limô
 = 
bEnd
 - 16;

321 
uöt32_t
 
v1
 = 
°©e
->v1;

322 
uöt32_t
 
v2
 = 
°©e
->v2;

323 
uöt32_t
 
v3
 = 
°©e
->v3;

324 
uöt32_t
 
v4
 = 
°©e
->v4;

328 
v1
 +
	`XXH_ªadLE32
((c⁄° 
uöt32_t
*)
p
, 
ídün
Ë* 
PRIME32_2
; v1 = 
	`XXH_rŸl32
(v1, 13); v1 *
PRIME32_1
;Ö+=4;

329 
v2
 +
	`XXH_ªadLE32
((c⁄° 
uöt32_t
*)
p
, 
ídün
Ë* 
PRIME32_2
; v2 = 
	`XXH_rŸl32
(v2, 13); v2 *
PRIME32_1
;Ö+=4;

330 
v3
 +
	`XXH_ªadLE32
((c⁄° 
uöt32_t
*)
p
, 
ídün
Ë* 
PRIME32_2
; v3 = 
	`XXH_rŸl32
(v3, 13); v3 *
PRIME32_1
;Ö+=4;

331 
v4
 +
	`XXH_ªadLE32
((c⁄° 
uöt32_t
*)
p
, 
ídün
Ë* 
PRIME32_2
; v4 = 
	`XXH_rŸl32
(v4, 13); v4 *
PRIME32_1
;Ö+=4;

332 } 
p
<=
limô
);

334 
°©e
->
v1
 = v1;

335 
°©e
->
v2
 = v2;

336 
°©e
->
v3
 = v3;

337 
°©e
->
v4
 = v4;

340 i‡(
p
 < 
bEnd
)

342 
	`mem˝y
(
°©e
->
mem‹y
, 
p
, 
bEnd
-p);

343 
°©e
->
memsize
 = ()(
bEnd
-
p
);

346  
XXH_OK
;

347 
	}
}

349 
XXH_îr‹code
 
	$XXH32_upd©e
 (* 
°©e_ö
, c⁄° * 
öput
, 
Àn
)

351 
XXH_ídü√ss
 
ídün_dëe˘ed
 = (XXH_ídü√ss)
XXH_CPU_LITTLE_ENDIAN
;

353 i‡((
ídün_dëe˘ed
==
XXH_lôéeEndün
Ë|| 
XXH_FORCE_NATIVE_FORMAT
)

354  
	`XXH32_upd©e_ídün
(
°©e_ö
, 
öput
, 
Àn
, 
XXH_lôéeEndün
);

356  
	`XXH32_upd©e_ídün
(
°©e_ö
, 
öput
, 
Àn
, 
XXH_bigEndün
);

357 
	}
}

361 
uöt32_t
 
	$XXH32_öãrmedüãDige°_ídün
 (* 
°©e_ö
, 
XXH_ídü√ss
 
ídün
)

363 
XXH_°©e32_t
 * 
°©e
 = (XXH_°©e32_à*Ë
°©e_ö
;

364 c⁄° 
uöt8_t
 *
p
 = (c⁄° uöt8_à*)
°©e
->
mem‹y
;

365 
uöt8_t
 * 
bEnd
 = (uöt8_à*)
°©e
->
mem‹y
 + sèã->
memsize
;

366 
uöt32_t
 
h32
;

368 i‡(
°©e
->
tŸÆ_Àn
 >= 16)

370 
h32
 = 
	`XXH_rŸl32
(
°©e
->
v1
, 1Ë+ XXH_rŸl32(°©e->
v2
, 7Ë+ XXH_rŸl32(°©e->
v3
, 12Ë+ XXH_rŸl32(°©e->
v4
, 18);

374 
h32
 = 
°©e
->
£ed
 + 
PRIME32_5
;

377 
h32
 +(
uöt32_t
Ë
°©e
->
tŸÆ_Àn
;

379 
p
<=
bEnd
-4)

381 
h32
 +
	`XXH_ªadLE32
((c⁄° 
uöt32_t
*)
p
, 
ídün
Ë* 
PRIME32_3
;

382 
h32
 = 
	`XXH_rŸl32
(h32, 17Ë* 
PRIME32_4
;

383 
p
+=4;

386 
p
<
bEnd
)

388 
h32
 +(*
p
Ë* 
PRIME32_5
;

389 
h32
 = 
	`XXH_rŸl32
(h32, 11Ë* 
PRIME32_1
;

390 
p
++;

393 
h32
 ^= h32 >> 15;

394 
h32
 *
PRIME32_2
;

395 
h32
 ^= h32 >> 13;

396 
h32
 *
PRIME32_3
;

397 
h32
 ^= h32 >> 16;

399  
h32
;

400 
	}
}

403 
uöt32_t
 
	$XXH32_öãrmedüãDige°
 (* 
°©e_ö
)

405 
XXH_ídü√ss
 
ídün_dëe˘ed
 = (XXH_ídü√ss)
XXH_CPU_LITTLE_ENDIAN
;

407 i‡((
ídün_dëe˘ed
==
XXH_lôéeEndün
Ë|| 
XXH_FORCE_NATIVE_FORMAT
)

408  
	`XXH32_öãrmedüãDige°_ídün
(
°©e_ö
, 
XXH_lôéeEndün
);

410  
	`XXH32_öãrmedüãDige°_ídün
(
°©e_ö
, 
XXH_bigEndün
);

411 
	}
}

414 
uöt32_t
 
	$XXH32_dige°
 (* 
°©e_ö
)

416 
uöt32_t
 
h32
 = 
	`XXH32_öãrmedüãDige°
(
°©e_ö
);

418 
	`‰ì
(
°©e_ö
);

420  
h32
;

421 
	}
}

	@crc/xxhash.h

60 #¥agm®
⁄˚


62 #i‡
deföed
 (
__˝lu•lus
)

66 
	~<öây≥s.h
>

68 
	sXXH_°©e32_t


70 
uöt64_t
 
tŸÆ_Àn
;

71 
uöt32_t
 
£ed
;

72 
uöt32_t
 
v1
;

73 
uöt32_t
 
v2
;

74 
uöt32_t
 
v3
;

75 
uöt32_t
 
v4
;

76 
memsize
;

77 
mem‹y
[16];

83 íum { 
XXH_OK
=0, 
XXH_ERROR
 } 
	tXXH_îr‹code
;

91 
uöt32_t
 
XXH32
 (c⁄° * 
öput
, uöt32_à
Àn
, uöt32_à
£ed
);

110 * 
XXH32_öô
 (
uöt32_t
 
£ed
);

111 
XXH_îr‹code
 
XXH32_upd©e
 (* 
°©e
, c⁄° * 
öput
, 
Àn
);

112 
uöt32_t
 
XXH32_dige°
 (* 
°©e
);

137 
XXH32_sizeofSèã
();

138 
XXH_îr‹code
 
XXH32_ª£tSèã
(* 
°©e
, 
uöt32_t
 
£ed
);

140 
	#XXH32_SIZEOFSTATE
 48

	)

141 °ru˘ { 
Œ
[(
XXH32_SIZEOFSTATE
+(()-1))/()]; } 
	tXXH32_°©eS∑˚_t
;

154 
uöt32_t
 
XXH32_öãrmedüãDige°
 (* 
°©e
);

169 
	#XXH32_„ed
 
XXH32_upd©e


	)

170 
	#XXH32_ªsu…
 
XXH32_dige°


	)

171 
	#XXH32_gëI¡îmedüãResu…
 
XXH32_öãrmedüãDige°


	)

175 #i‡
deföed
 (
__˝lu•lus
)

	@debug.c

1 
	~<as£π.h
>

2 
	~<°d¨g.h
>

4 
	~"debug.h
"

5 
	~"log.h
"

7 #ifde‡
FIO_INC_DEBUG


8 
	$__d¥öt
(
ty≥
, c⁄° *
°r
, ...)

10 
va_li°
 
¨gs
;

12 
	`as£π
(
ty≥
 < 
FD_DEBUG_MAX
);

14 
	`va_°¨t
(
¨gs
, 
°r
);

15 
	`log_¥evÆi°
(
ty≥
, 
°r
, 
¨gs
);

16 
	`va_íd
(
¨gs
);

17 
	}
}

	@debug.h

1 #i‚de‡
FIO_DEBUG_H


2 
	#FIO_DEBUG_H


	)

4 
	~"lib/ty≥s.h
"

7 
	mFD_PROCESS
 = 0,

8 
	mFD_FILE
,

9 
	mFD_IO
,

10 
	mFD_MEM
,

11 
	mFD_BLKTRACE
,

12 
	mFD_VERIFY
,

13 
	mFD_RANDOM
,

14 
	mFD_PARSE
,

15 
	mFD_DISKUTIL
,

16 
	mFD_JOB
,

17 
	mFD_MUTEX
,

18 
	mFD_PROFILE
,

19 
	mFD_TIME
,

20 
	mFD_NET
,

21 
	mFD_RATE
,

22 
	mFD_COMPRESS
,

23 
	mFD_STEADYSTATE
,

24 
	mFD_HELPERTHREAD
,

25 
	mFD_ZBD
,

26 
	mFD_DEBUG_MAX
,

29 
fio_debug_jobno
, *
fio_debug_jobp
, *
fio_w¨√d
;

31 
ölöe
 
boﬁ
 
	$fio_did_w¨n
(
mask
)

33 i‡(*
fio_w¨√d
 & 
mask
)

34  
åue
;

36 *
fio_w¨√d
 |
mask
;

37  
Ál£
;

38 
	}
}

41 
	mFIO_WARN_ROOT_FLUSH
 = 1,

42 
	mFIO_WARN_VERIFY_BUF
 = 2,

43 
	mFIO_WARN_ZONED_BUG
 = 4,

44 
	mFIO_WARN_IOLOG_DROP
 = 8,

45 
	mFIO_WARN_FADVISE
 = 16,

46 
	mFIO_WARN_BTRACE_ZERO
 = 32,

49 #ifde‡
FIO_INC_DEBUG


50 
	sdebug_Àvñ
 {

51 c⁄° *
	m«me
;

52 c⁄° *
	mhñp
;

53 
	mshi·
;

54 
	mjobno
;

56 c⁄° 
debug_Àvñ
 
debug_Àvñs
[];

58 
fio_debug
;

60 
	$__d¥öt
(
ty≥
, c⁄° *
°r
, ...Ë
	`__©åibuã__
((
	`f‹m©
 (
¥ötf
, 2, 3)));

62 
	#d¥öt
(
ty≥
, 
°r
, 
¨gs
...) \

64 i‡(((1 << 
ty≥
Ë& 
fio_debug
) == 0) \

66 
	`__d¥öt
((
ty≥
), (
°r
), ##
¨gs
); \

67 
	}
} 0) \

68 

	)

71 
ölöe
 
	$d¥öt
(
ty≥
, c⁄° *
°r
, ...)

73 
	}
}

	@dedupe.c

1 
	~"fio.h
"

8 
	$öô_globÆ_dedu≥_w‹kög_£t_£eds
()

10 
i
;

11 
thªad_d©a
 *
td
;

13 
	`f‹_óch_td
(
td
, 
i
) {

14 i‡(!
td
->
o
.
dedu≥_globÆ
)

17 i‡(
	`öô_dedu≥_w‹kög_£t_£eds
(
td
, 1))

22 
	}
}

24 
	$öô_dedu≥_w‹kög_£t_£eds
(
thªad_d©a
 *
td
, 
boﬁ
 
globÆ_dedup
)

26 
tödex
;

27 
thªad_d©a
 *
td_£ed
;

28 
i
, 
j
, 
num_£ed_adv™˚míts
, 
∑ges_≥r_£ed
;

29 
‰™d_°©e
 
dedu≥_w‹kög_£t_°©e
 = {0};

31 i‡(!
td
->
o
.
dedu≥_≥r˚¡age
 || !—d->o.
dedu≥_mode
 =
DEDUPE_MODE_WORKING_SET
))

34 
tödex
 = 
td
->
thªad_numbî
 - 1;

35 
num_£ed_adv™˚míts
 = 
td
->
o
.
mö_bs
[
DDIR_WRITE
] /

36 
	`mö_nŸ_zîo
(
td
->
o
.
mö_bs
[
DDIR_WRITE
], (Ëtd->o.
com¥ess_chunk
);

41 
td
->
num_unique_∑ges
 = (td->
o
.
size
 * (Èd->o.
dedu≥_w‹kög_£t_≥r˚¡age
 / 100Ë/Åd->o.
mö_bs
[
DDIR_WRITE
];

42 
td
->
dedu≥_w‹kög_£t_°©es
 = 
	`mÆloc
((
‰™d_°©e
Ë*Åd->
num_unique_∑ges
);

43 i‡(!
td
->
dedu≥_w‹kög_£t_°©es
) {

44 
	`log_îr
("fio: couldÇotállocate dedupe working set\n");

48 
	`‰™d_c›y
(&
dedu≥_w‹kög_£t_°©e
, &
td
->
buf_°©e
);

49 
	`‰™d_c›y
(&
td
->
dedu≥_w‹kög_£t_°©es
[0], &
dedu≥_w‹kög_£t_°©e
);

50 
∑ges_≥r_£ed
 = 
	`max
(
td
->
num_unique_∑ges
 / 
thªad_numbî
, 1ull);

51 
i
 = 1; i < 
td
->
num_unique_∑ges
; i++) {

57 
j
 = 0; j < 
num_£ed_adv™˚míts
; j++)

58 
	`__gë_√xt_£ed
(&
dedu≥_w‹kög_£t_°©e
);

65 i‡(
globÆ_dedup
 && 
i
 % 
∑ges_≥r_£ed
 == 0) {

66 
td_£ed
 = 
	`äumbî_to_td
(++
tödex
 % 
thªad_numbî
);

67 
	`‰™d_c›y
(&
dedu≥_w‹kög_£t_°©e
, &
td_£ed
->
buf_°©e
);

70 
	`‰™d_c›y
(&
td
->
dedu≥_w‹kög_£t_°©es
[
i
], &
dedu≥_w‹kög_£t_°©e
);

74 
	}
}

	@dedupe.h

1 #i‚de‡
DEDUPE_H


2 
	#DEDUPE_H


	)

4 
öô_dedu≥_w‹kög_£t_£eds
(
thªad_d©a
 *
td
, 
boﬁ
 
globÆ_dedu≥
);

5 
öô_globÆ_dedu≥_w‹kög_£t_£eds
();

	@diskutil.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<sys/ty≥s.h
>

4 
	~<sys/°©.h
>

5 
	~<sys/sysma¸os.h
>

6 
	~<dúít.h
>

7 
	~<libgí.h
>

8 #ifde‡
CONFIG_VALGRIND_DEV


9 
	~<vÆgröd/drd.h
>

11 
	#DRD_IGNORE_VAR
(
x
Ëdÿ{ } 0)

	)

14 
	~"fio.h
"

15 
	~"smÆloc.h
"

16 
	~"diskutû.h
"

17 
	~"hñ≥r_thªad.h
"

19 
	gœ°_majdev
, 
	gœ°_mödev
;

20 
disk_utû
 *
	gœ°_du
;

22 
fio_£m
 *
	gdisk_utû_£m
;

24 
disk_utû
 *
__öô_≥r_fûe_disk_utû
(
thªad_d©a
 *
td
,

25 
majdev
, 
mödev
, *
∑th
);

27 
	$disk_utû_‰ì
(
disk_utû
 *
du
)

29 i‡(
du
 =
œ°_du
)

30 
œ°_du
 = 
NULL
;

32 !
	`Êi°_em±y
(&
du
->
¶aves
)) {

33 
disk_utû
 *
¶ave
;

35 
¶ave
 = 
	`Êi°_fú°_íåy
(&
du
->
¶aves
, 
disk_utû
, 
¶avñi°
);

36 
	`Êi°_dñ
(&
¶ave
->
¶avñi°
);

37 
¶ave
->
u£rs
--;

40 
	`fio_£m_ªmove
(
du
->
lock
);

41 
	`‰ì
(
du
->
sysfs_roŸ
);

42 
	`s‰ì
(
du
);

43 
	}
}

45 
	$gë_io_ticks
(
disk_utû
 *
du
, 
disk_utû_°©
 *
dus
)

47 
ö_Êight
;

48 
£˘‹s
[2];

49 
löe
[256];

50 
FILE
 *
f
;

51 *
p
;

52 
ªt
;

54 
	`d¥öt
(
FD_DISKUTIL
, "›í sèàfûe: %s\n", 
du
->
∑th
);

56 
f
 = 
	`f›í
(
du
->
∑th
, "r");

57 i‡(!
f
)

60 
p
 = 
	`fgës
(
löe
, ÷öe), 
f
);

61 i‡(!
p
) {

62 
	`f˛o£
(
f
);

66 
	`d¥öt
(
FD_DISKUTIL
, "%s: %s", 
du
->
∑th
, 
p
);

68 
ªt
 = 
	`ssˇnf
(
p
, "%llu %llu %llu %llu %llu %llu %llu %llu %u %llu %llu\n",

69 (*Ë&
dus
->
s
.
ios
[0],

70 (*Ë&
dus
->
s
.
mîges
[0],

71 &
£˘‹s
[0],

72 (*Ë&
dus
->
s
.
ticks
[0],

73 (*Ë&
dus
->
s
.
ios
[1],

74 (*Ë&
dus
->
s
.
mîges
[1],

75 &
£˘‹s
[1],

76 (*Ë&
dus
->
s
.
ticks
[1],

77 &
ö_Êight
,

78 (*Ë&
dus
->
s
.
io_ticks
,

79 (*Ë&
dus
->
s
.
time_ö_queue
);

80 
	`f˛o£
(
f
);

81 
	`d¥öt
(
FD_DISKUTIL
, "%s: sèàªad ok? %d\n", 
du
->
∑th
, 
ªt
 == 1);

82 
dus
->
s
.
£˘‹s
[0] = sectors[0];

83 
dus
->
s
.
£˘‹s
[1] = sectors[1];

84  
ªt
 != 11;

85 
	}
}

87 
	$upd©e_io_tick_disk
(
disk_utû
 *
du
)

89 
disk_utû_°©
 
__dus
, *
dus
, *
ldus
;

90 
time•ec
 
t
;

92 i‡(!
du
->
u£rs
)

94 i‡(
	`gë_io_ticks
(
du
, &
__dus
))

97 
dus
 = &
du
->dus;

98 
ldus
 = &
du
->
œ°_dus
;

100 
dus
->
s
.
£˘‹s
[0] +(
__dus
.s.£˘‹s[0] - 
ldus
->s.sectors[0]);

101 
dus
->
s
.
£˘‹s
[1] +(
__dus
.s.£˘‹s[1] - 
ldus
->s.sectors[1]);

102 
dus
->
s
.
ios
[0] +(
__dus
.s.ios[0] - 
ldus
->s.ios[0]);

103 
dus
->
s
.
ios
[1] +(
__dus
.s.ios[1] - 
ldus
->s.ios[1]);

104 
dus
->
s
.
mîges
[0] +(
__dus
.s.mîges[0] - 
ldus
->s.merges[0]);

105 
dus
->
s
.
mîges
[1] +(
__dus
.s.mîges[1] - 
ldus
->s.merges[1]);

106 
dus
->
s
.
ticks
[0] +(
__dus
.s.ticks[0] - 
ldus
->s.ticks[0]);

107 
dus
->
s
.
ticks
[1] +(
__dus
.s.ticks[1] - 
ldus
->s.ticks[1]);

108 
dus
->
s
.
io_ticks
 +(
__dus
.s.io_tick†- 
ldus
->s.io_ticks);

109 
dus
->
s
.
time_ö_queue
 +(
__dus
.s.time_ö_queuê- 
ldus
->s.time_in_queue);

111 
	`fio_gëtime
(&
t
, 
NULL
);

112 
dus
->
s
.
m£c
 +
	`mtime_sö˚
(&
du
->
time
, &
t
);

113 
	`mem˝y
(&
du
->
time
, &
t
, (t));

114 
	`mem˝y
(&
ldus
->
s
, &
__dus
.s, (__dus.s));

115 
	}
}

117 
	$upd©e_io_ticks
()

119 
Êi°_hód
 *
íåy
;

120 
disk_utû
 *
du
;

121 
ªt
 = 0;

123 
	`d¥öt
(
FD_DISKUTIL
, "update ioÅicks\n");

125 
	`fio_£m_down
(
disk_utû_£m
);

127 i‡(!
	`hñ≥r_should_exô
()) {

128 
	`Êi°_f‹_óch
(
íåy
, &
disk_li°
) {

129 
du
 = 
	`Êi°_íåy
(
íåy
, 
disk_utû
, 
li°
);

130 
	`upd©e_io_tick_disk
(
du
);

133 
ªt
 = 1;

135 
	`fio_£m_up
(
disk_utû_£m
);

136  
ªt
;

137 
	}
}

139 
disk_utû
 *
	$disk_utû_exi°s
(
maj‹
, 
mö‹
)

141 
Êi°_hód
 *
íåy
;

142 
disk_utû
 *
du
;

144 
	`fio_£m_down
(
disk_utû_£m
);

146 
	`Êi°_f‹_óch
(
íåy
, &
disk_li°
) {

147 
du
 = 
	`Êi°_íåy
(
íåy
, 
disk_utû
, 
li°
);

149 i‡(
maj‹
 =
du
->maj‹ && 
mö‹
 == du->minor) {

150 
	`fio_£m_up
(
disk_utû_£m
);

151  
du
;

155 
	`fio_£m_up
(
disk_utû_£m
);

156  
NULL
;

157 
	}
}

159 
	$gë_devi˚_numbîs
(*
fûe_«me
, *
maj
, *
mö
)

161 
°©
 
°
;

162 
majdev
, 
mödev
;

163 
ãm≤ame
[
PATH_MAX
], *
p
;

165 i‡(!
	`l°©
(
fûe_«me
, &
°
)) {

166 i‡(
	`S_ISBLK
(
°
.
°_mode
)) {

167 
majdev
 = 
	`maj‹
(
°
.
°_rdev
);

168 
mödev
 = 
	`mö‹
(
°
.
°_rdev
);

169 } i‡(
	`S_ISCHR
(
°
.
°_mode
) ||

170 
	`S_ISFIFO
(
°
.
°_mode
)) {

173 
majdev
 = 
	`maj‹
(
°
.
°_dev
);

174 
mödev
 = 
	`mö‹
(
°
.
°_dev
);

180 
	`¢¥ötf
(
ãm≤ame
, 
	`FIO_ARRAY_SIZE
—em≤ame), "%s", 
fûe_«me
);

181 
p
 = 
	`dú«me
(
ãm≤ame
);

182 i‡(
	`°©
(
p
, &
°
)) {

183 
	`≥º‹
("disk util stat");

187 
majdev
 = 
	`maj‹
(
°
.
°_dev
);

188 
mödev
 = 
	`mö‹
(
°
.
°_dev
);

191 *
mö
 = 
mödev
;

192 *
maj
 = 
majdev
;

195 
	}
}

197 
	$ªad_block_dev_íåy
(*
∑th
, *
maj
, *
mö
)

199 
löe
[256], *
p
;

200 
FILE
 *
f
;

202 
f
 = 
	`f›í
(
∑th
, "r");

203 i‡(!
f
) {

204 
	`≥º‹
("openÖath");

208 
p
 = 
	`fgës
(
löe
, ÷öe), 
f
);

209 
	`f˛o£
(
f
);

211 i‡(!
p
)

214 i‡(
	`ssˇnf
(
p
, "%u:%u", 
maj
, 
mö
) != 2)

218 
	}
}

220 
	$föd_add_disk_¶aves
(
thªad_d©a
 *
td
, *
∑th
,

221 
disk_utû
 *
ma°îdu
)

223 
DIR
 *
dúh™dÀ
 = 
NULL
;

224 
dúít
 *dúíà
NULL
;

225 
¶avesdú
[
PATH_MAX
], 
ãmµ©h
[PATH_MAX], 
¶avï©h
[PATH_MAX];

226 
disk_utû
 *
¶avedu
 = 
NULL
;

227 
majdev
, 
mödev
;

228 
ssize_t
 
lökÀn
;

230 
	`•rötf
(
¶avesdú
, "%s/%s", 
∑th
, "slaves");

231 
dúh™dÀ
 = 
	`›ídú
(
¶avesdú
);

232 i‡(!
dúh™dÀ
)

235 (
dúít
 = 
	`ªaddú
(
dúh™dÀ
)Ë!
NULL
) {

236 i‡(!
	`°rcmp
(
dúít
->
d_«me
, ".") ||

237 !
	`°rcmp
(
dúít
->
d_«me
, ".."))

240 
	`now¨n_¢¥ötf
(
ãmµ©h
, —emµ©h), "%s/%s", 
¶avesdú
,

241 
dúít
->
d_«me
);

246 
lökÀn
 = 
	`ªadlök
(
ãmµ©h
, 
¶avï©h
, 
PATH_MAX
 - 1);

247 i‡(
lökÀn
 < 0) {

248 
	`≥º‹
("readlink() for slave device.");

249 
	`˛o£dú
(
dúh™dÀ
);

252 
¶avï©h
[
lökÀn
] = '\0';

254 
	`now¨n_¢¥ötf
(
ãmµ©h
, (temppath), "%s/%s/dev",

255 
¶avesdú
, 
¶avï©h
);

256 i‡(
	`ac˚ss
(
ãmµ©h
, 
F_OK
) != 0)

257 
	`now¨n_¢¥ötf
(
ãmµ©h
, (temppath),

258 "%s/%s/devi˚/dev", 
¶avesdú
,

259 
¶avï©h
);

260 i‡(
	`ªad_block_dev_íåy
(
ãmµ©h
, &
majdev
, &
mödev
)) {

261 
	`≥º‹
("Error getting slave deviceÇumbers");

262 
	`˛o£dú
(
dúh™dÀ
);

269 
¶avedu
 = 
	`disk_utû_exi°s
(
majdev
, 
mödev
);

270 i‡(
¶avedu
)

273 
	`now¨n_¢¥ötf
(
ãmµ©h
, —emµ©h), "%s/%s", 
¶avesdú
,

274 
¶avï©h
);

275 
	`__öô_≥r_fûe_disk_utû
(
td
, 
majdev
, 
mödev
, 
ãmµ©h
);

276 
¶avedu
 = 
	`disk_utû_exi°s
(
majdev
, 
mödev
);

280 i‡(
¶avedu
) {

281 
¶avedu
->
u£rs
++;

282 
	`Êi°_add_èû
(&
¶avedu
->
¶avñi°
, &
ma°îdu
->
¶aves
);

286 
	`˛o£dú
(
dúh™dÀ
);

287 
	}
}

289 
disk_utû
 *
	$disk_utû_add
(
thªad_d©a
 *
td
, 
majdev
,

290 
mödev
, *
∑th
)

292 
disk_utû
 *
du
, *
__du
;

293 
Êi°_hód
 *
íåy
;

294 
l
;

296 
	`d¥öt
(
FD_DISKUTIL
, "add maj/mö %d/%d: %s\n", 
majdev
, 
mödev
, 
∑th
);

298 
du
 = 
	`smÆloc
((*du));

299 i‡(!
du
)

300  
NULL
;

302 
	`DRD_IGNORE_VAR
(
du
->
u£rs
);

303 
	`mem£t
(
du
, 0, (*du));

304 
	`INIT_FLIST_HEAD
(&
du
->
li°
);

305 
l
 = 
	`¢¥ötf
(
du
->
∑th
, (du->path), "%s/stat",Öath);

306 i‡(
l
 < 0 ||Ü >(
du
->
∑th
)) {

307 
	`log_îr
("constructedÖath \"%.100s[...]/stat\"ÜargerÅhan buffer (%zu bytes)\n",

308 
∑th
, (
du
->path) - 1);

309 
	`s‰ì
(
du
);

310  
NULL
;

312 
	`¢¥ötf
((*Ë
du
->
dus
.
«me
, 
	`FIO_ARRAY_SIZE
(du->dus.name), "%s",

313 
	`ba£«me
(
∑th
));

314 
du
->
sysfs_roŸ
 = 
	`°rdup
(
∑th
);

315 
du
->
maj‹
 = 
majdev
;

316 
du
->
mö‹
 = 
mödev
;

317 
	`INIT_FLIST_HEAD
(&
du
->
¶avñi°
);

318 
	`INIT_FLIST_HEAD
(&
du
->
¶aves
);

319 
du
->
lock
 = 
	`fio_£m_öô
(
FIO_SEM_UNLOCKED
);

320 
du
->
u£rs
 = 0;

322 
	`fio_£m_down
(
disk_utû_£m
);

324 
	`Êi°_f‹_óch
(
íåy
, &
disk_li°
) {

325 
__du
 = 
	`Êi°_íåy
(
íåy
, 
disk_utû
, 
li°
);

327 
	`d¥öt
(
FD_DISKUTIL
, "found %†öÜi°\n", 
__du
->
dus
.
«me
);

329 i‡(!
	`°rcmp
((*Ë
du
->
dus
.
«me
, (*Ë
__du
->dus.name)) {

330 
	`disk_utû_‰ì
(
du
);

331 
	`fio_£m_up
(
disk_utû_£m
);

332  
__du
;

336 
	`d¥öt
(
FD_DISKUTIL
, "add %†tÿli°\n", 
du
->
dus
.
«me
);

338 
	`fio_gëtime
(&
du
->
time
, 
NULL
);

339 
	`gë_io_ticks
(
du
, &du->
œ°_dus
);

341 
	`Êi°_add_èû
(&
du
->
li°
, &
disk_li°
);

342 
	`fio_£m_up
(
disk_utû_£m
);

344 
	`föd_add_disk_¶aves
(
td
, 
∑th
, 
du
);

345  
du
;

346 
	}
}

348 
	$check_dev_m©ch
(
majdev
, 
mödev
, *
∑th
)

350 
maj‹
, 
mö‹
;

352 i‡(
	`ªad_block_dev_íåy
(
∑th
, &
maj‹
, &
mö‹
))

355 i‡(
majdev
 =
maj‹
 && 
mödev
 =
mö‹
)

359 
	}
}

361 
	$föd_block_dú
(
majdev
, 
mödev
, *
∑th
, 
lök_ok
)

363 
dúít
 *
dú
;

364 
°©
 
°
;

365 
found
 = 0;

366 
DIR
 *
D
;

368 
D
 = 
	`›ídú
(
∑th
);

369 i‡(!
D
)

372 (
dú
 = 
	`ªaddú
(
D
)Ë!
NULL
) {

373 
fuŒ_∑th
[257];

375 i‡(!
	`°rcmp
(
dú
->
d_«me
, ".") || !strcmp(dir->d_name, ".."))

378 
	`•rötf
(
fuŒ_∑th
, "%s/%s", 
∑th
, 
dú
->
d_«me
);

380 i‡(!
	`°rcmp
(
dú
->
d_«me
, "dev")) {

381 i‡(!
	`check_dev_m©ch
(
majdev
, 
mödev
, 
fuŒ_∑th
)) {

382 
found
 = 1;

387 i‡(
lök_ok
) {

388 i‡(
	`°©
(
fuŒ_∑th
, &
°
) == -1) {

389 
	`≥º‹
("stat");

393 i‡(
	`l°©
(
fuŒ_∑th
, &
°
) == -1) {

394 
	`≥º‹
("stat");

399 i‡(!
	`S_ISDIR
(
°
.
°_mode
Ë|| 
	`S_ISLNK
(st.st_mode))

402 
found
 = 
	`föd_block_dú
(
majdev
, 
mödev
, 
fuŒ_∑th
, 0);

403 i‡(
found
) {

404 
	`°r˝y
(
∑th
, 
fuŒ_∑th
);

409 
	`˛o£dú
(
D
);

410  
found
;

411 
	}
}

413 
disk_utû
 *
	$__öô_≥r_fûe_disk_utû
(
thªad_d©a
 *
td
,

414 
majdev
, 
mödev
,

415 *
∑th
)

417 
°©
 
°
;

418 
tmp
[
PATH_MAX
];

419 *
p
;

426 
	`•rötf
(
tmp
, "%s/../queue", 
∑th
);

427 i‡(!
	`°©
(
tmp
, &
°
)) {

428 
p
 = 
	`dú«me
(
∑th
);

429 
	`•rötf
(
tmp
, "%s/queue", 
p
);

430 i‡(
	`°©
(
tmp
, &
°
)) {

431 
	`log_îr
("unknown sysfsÜayout\n");

432  
NULL
;

434 
	`¢¥ötf
(
tmp
, 
	`FIO_ARRAY_SIZE
—mp), "%s", 
p
);

435 
	`•rötf
(
∑th
, "%s", 
tmp
);

438  
	`disk_utû_add
(
td
, 
majdev
, 
mödev
, 
∑th
);

439 
	}
}

441 
disk_utû
 *
	$öô_≥r_fûe_disk_utû
(
thªad_d©a
 *
td
,

442 *
fûíame
)

445 
foo
[
PATH_MAX
];

446 
disk_utû
 *
du
;

447 
mödev
, 
majdev
;

449 i‡(
	`gë_devi˚_numbîs
(
fûíame
, &
majdev
, &
mödev
))

450  
NULL
;

452 
	`d¥öt
(
FD_DISKUTIL
, "%†bñ⁄g†tÿmaj/mö %d/%d\n", 
fûíame
, 
majdev
,

453 
mödev
);

455 
du
 = 
	`disk_utû_exi°s
(
majdev
, 
mödev
);

456 i‡(
du
)

457  
du
;

465 i‡(
mödev
 =
œ°_mödev
 && 
majdev
 =
œ°_majdev
)

466  
œ°_du
;

468 
œ°_mödev
 = 
mödev
;

469 
œ°_majdev
 = 
majdev
;

471 
	`•rötf
(
foo
, "/sys/block");

472 i‡(!
	`föd_block_dú
(
majdev
, 
mödev
, 
foo
, 1))

473  
NULL
;

475  
	`__öô_≥r_fûe_disk_utû
(
td
, 
majdev
, 
mödev
, 
foo
);

476 
	}
}

478 
disk_utû
 *
	$__öô_disk_utû
(
thªad_d©a
 *
td
,

479 
fio_fûe
 *
f
)

481  
	`öô_≥r_fûe_disk_utû
(
td
, 
f
->
fûe_«me
);

482 
	}
}

484 
	$öô_disk_utû
(
thªad_d©a
 *
td
)

486 
fio_fûe
 *
f
;

487 
i
;

489 i‡(!
td
->
o
.
do_disk_utû
 ||

490 
	`td_i€ngöe_Êagged
(
td
, 
FIO_DISKLESSIO
 | 
FIO_NODISKUTIL
))

493 
	`f‹_óch_fûe
(
td
, 
f
, 
i
)

494 
f
->
du
 = 
	`__öô_disk_utû
(
td
, f);

495 
	}
}

497 
	$disk_utû_¥u√_íåõs
()

499 
	`fio_£m_down
(
disk_utû_£m
);

501 !
	`Êi°_em±y
(&
disk_li°
)) {

502 
disk_utû
 *
du
;

504 
du
 = 
	`Êi°_fú°_íåy
(&
disk_li°
, 
disk_utû
, 
li°
);

505 
	`Êi°_dñ
(&
du
->
li°
);

506 
	`disk_utû_‰ì
(
du
);

509 
œ°_majdev
 = 
œ°_mödev
 = -1;

510 
	`fio_£m_up
(
disk_utû_£m
);

511 
	`fio_£m_ªmove
(
disk_utû_£m
);

512 
	}
}

514 
	$£tup_disk_utû
()

516 
disk_utû_£m
 = 
	`fio_£m_öô
(
FIO_SEM_UNLOCKED
);

517 
	}
}

	@diskutil.h

1 #i‚de‡
FIO_DISKUTIL_H


2 
	#FIO_DISKUTIL_H


	)

3 
	#FIO_DU_NAME_SZ
 64

	)

5 
	~<limôs.h
>

7 
	~"hñ≥r_thªad.h
"

8 
	~"fio_£m.h
"

10 
	sdisk_utû_°©s
 {

11 
uöt64_t
 
	mios
[2];

12 
uöt64_t
 
	mmîges
[2];

13 
uöt64_t
 
	m£˘‹s
[2];

14 
uöt64_t
 
	mticks
[2];

15 
uöt64_t
 
	mio_ticks
;

16 
uöt64_t
 
	mtime_ö_queue
;

17 
uöt64_t
 
	mm£c
;

23 
	sdisk_utû_°©
 {

24 
uöt8_t
 
	m«me
[
FIO_DU_NAME_SZ
];

25 
disk_utû_°©s
 
	ms
;

28 
	sdisk_utû_agg
 {

29 
uöt64_t
 
	mios
[2];

30 
uöt64_t
 
	mmîges
[2];

31 
uöt64_t
 
	m£˘‹s
[2];

32 
uöt64_t
 
	mticks
[2];

33 
uöt64_t
 
	mio_ticks
;

34 
uöt64_t
 
	mtime_ö_queue
;

35 
uöt32_t
 
	m¶avecou¡
;

36 
uöt32_t
 
	m∑d
;

37 
fio_Â64_t
 
	mmax_utû
;

43 
	sdisk_utû
 {

44 
Êi°_hód
 
	mli°
;

48 
Êi°_hód
 
	m¶avñi°
;

50 *
	msysfs_roŸ
;

51 
	m∑th
[
PATH_MAX
];

52 
	mmaj‹
, 
	mmö‹
;

54 
disk_utû_°©
 
	mdus
;

55 
disk_utû_°©
 
	mœ°_dus
;

57 
disk_utû_agg
 
	magg
;

66 
Êi°_hód
 
	m¶aves
;

68 
time•ec
 
	mtime
;

70 
fio_£m
 *
	mlock
;

71 
	mu£rs
;

74 
ölöe
 
	$disk_utû_mod
(
disk_utû
 *
du
, 
vÆ
)

76 i‡(
du
) {

77 
Êi°_hód
 *
n
;

79 
	`fio_£m_down
(
du
->
lock
);

80 
du
->
u£rs
 +
vÆ
;

82 
	`Êi°_f‹_óch
(
n
, &
du
->
¶avñi°
) {

83 
disk_utû
 *
¶ave
;

85 
¶ave
 = 
	`Êi°_íåy
(
n
, 
disk_utû
, 
¶avñi°
);

86 
¶ave
->
u£rs
 +
vÆ
;

88 
	`fio_£m_up
(
du
->
lock
);

90 
	}
}

91 
ölöe
 
	$disk_utû_öc
(
disk_utû
 *
du
)

93 
	`disk_utû_mod
(
du
, 1);

94 
	}
}

96 
ölöe
 
	$disk_utû_dec
(
disk_utû
 *
du
)

98 
	`disk_utû_mod
(
du
, -1);

99 
	}
}

101 
	#DISK_UTIL_MSEC
 (250)

	)

103 
Êi°_hód
 
disk_li°
;

108 #ifde‡
FIO_HAVE_DISK_UTIL


109 
öô_disk_utû
(
thªad_d©a
 *);

110 
upd©e_io_ticks
();

111 
£tup_disk_utû
();

112 
disk_utû_¥u√_íåõs
();

115 
	#disk_utû_¥u√_íåõs
()

	)

116 
	#öô_disk_utû
(
td
)

	)

117 
	#£tup_disk_utû
()

	)

119 
ölöe
 
	$upd©e_io_ticks
()

121  
	`hñ≥r_should_exô
();

122 
	}
}

	@engines/cmdprio.c

6 
	~"cmd¥io.h
"

12 
	scmd¥io_∑r£_ªsu…
 {

13 
•lô_¥io
 *
	míåõs
;

14 
	mƒ_íåõs
;

22 
	scmd¥io_vÆues
 {

23 *
	m¥ios
;

24 
	mƒ_¥ios
;

27 
	$föd_˛©_¥io_ödex
(*
Æl_¥ios
, 
ƒ_¥ios
,

28 
öt32_t
 
¥io
)

30 
i
;

32 
i
 = 0; i < 
ƒ_¥ios
; i++) {

33 i‡(
Æl_¥ios
[
i
] =
¥io
)

34  
i
;

38 
	}
}

47 
	$assign_˛©_¥io_ödex
(
cmd¥io_¥io
 *
¥io
,

48 
cmd¥io_vÆues
 *
vÆues
)

50 
˛©_¥io_ödex
 = 
	`föd_˛©_¥io_ödex
(
vÆues
->
¥ios
,

51 
vÆues
->
ƒ_¥ios
,

52 
¥io
->prio);

53 i‡(
˛©_¥io_ödex
 == -1) {

54 
˛©_¥io_ödex
 = 
vÆues
->
ƒ_¥ios
;

55 
vÆues
->
¥ios
[
˛©_¥io_ödex
] = 
¥io
->prio;

56 
vÆues
->
ƒ_¥ios
++;

58 
¥io
->
˛©_¥io_ödex
 = clat_prio_index;

59 
	}
}

66 
	$öô_cmd¥io_vÆues
(
cmd¥io_vÆues
 *
vÆues
,

67 
max_unique_¥ios
, 
thªad_°©
 *
ts
)

69 
vÆues
->
¥ios
 = 
	`ˇŒoc
(
max_unique_¥ios
 + 1,

70 (*
vÆues
->
¥ios
));

71 i‡(!
vÆues
->
¥ios
)

75 
vÆues
->
¥ios
[0] = 
ts
->
i›rio
;

76 
vÆues
->
ƒ_¥ios
++;

79 
	}
}

85 
	$öô_ts_˛©_¥io
(
thªad_°©
 *
ts
, 
fio_ddú
 
ddú
,

86 
cmd¥io_vÆues
 *
vÆues
)

88 
i
;

90 i‡(
	`Æloc_˛©_¥io_°©_ddú
(
ts
, 
ddú
, 
vÆues
->
ƒ_¥ios
))

93 
i
 = 0; i < 
vÆues
->
ƒ_¥ios
; i++)

94 
ts
->
˛©_¥io
[
ddú
][
i
].
i›rio
 = 
vÆues
->
¥ios
[i];

97 
	}
}

99 
	$fio_cmd¥io_fûl_b•rio
(
cmd¥io_b•rio
 *
b•rio
,

100 
•lô_¥io
 *
íåõs
,

101 
cmd¥io_vÆues
 *
vÆues
,

102 
im∂icô_cmd¥io
, 
°¨t
, 
íd
)

104 
cmd¥io_¥io
 *
¥io
;

105 
i
 = 
íd
 - 
°¨t
 + 1;

107 
b•rio
->
¥ios
 = 
	`ˇŒoc
(
i
, (*bsprio->prios));

108 i‡(!
b•rio
->
¥ios
)

111 
b•rio
->
bs
 = 
íåõs
[
°¨t
].bs;

112 
b•rio
->
ƒ_¥ios
 = 0;

113 
i
 = 
°¨t
; i <
íd
; i++) {

114 
¥io
 = &
b•rio
->
¥ios
[b•rio->
ƒ_¥ios
];

115 
¥io
->
≥rc
 = 
íåõs
[
i
].perc;

116 i‡(
íåõs
[
i
].
¥io
 == -1)

117 
¥io
->¥iÿ
im∂icô_cmd¥io
;

119 
¥io
->¥iÿ
íåõs
[
i
].prio;

120 
	`assign_˛©_¥io_ödex
(
¥io
, 
vÆues
);

121 
b•rio
->
tŸ_≥rc
 +
íåõs
[
i
].
≥rc
;

122 i‡(
b•rio
->
tŸ_≥rc
 > 100) {

123 
	`log_îr
("fio: cmdprio_bssplitÅotalÖercentage "

124 "f‹ bs: %"
PRIu64
"Éxceeds 100\n",

125 
b•rio
->
bs
);

126 
	`‰ì
(
b•rio
->
¥ios
);

129 
b•rio
->
ƒ_¥ios
++;

133 
	}
}

136 
	$fio_cmd¥io_gíî©e_b•rio_desc
(
cmd¥io_b•rio_desc
 *
b•rio_desc
,

137 
cmd¥io_∑r£_ªsu…
 *
∑r£_ªs
,

138 
cmd¥io_vÆues
 *
vÆues
,

139 
im∂icô_cmd¥io
)

141 
•lô_¥io
 *
íåõs
 = 
∑r£_ªs
->entries;

142 
ƒ_íåõs
 = 
∑r£_ªs
->nr_entries;

143 
cmd¥io_b•rio
 *
b•rio
;

144 
i
, 
°¨t
, 
cou¡
 = 0;

150 
i
 = 0; i < 
ƒ_íåõs
; i++) {

151 
i
 + 1 < 
ƒ_íåõs
 && 
íåõs
[i].
bs
 ==Éntries[i + 1].bs)

152 
i
++;

153 
cou¡
++;

160 
b•rio_desc
->
b•rios
 = 
	`ˇŒoc
(
cou¡
, (*bsprio_desc->bsprios));

161 i‡(!
b•rio_desc
->
b•rios
)

164 
°¨t
 = 0;

165 
b•rio_desc
->
ƒ_b•rios
 = 0;

166 
i
 = 0; i < 
ƒ_íåõs
; i++) {

167 
i
 + 1 < 
ƒ_íåõs
 && 
íåõs
[i].
bs
 ==Éntries[i + 1].bs)

168 
i
++;

169 
b•rio
 = &
b•rio_desc
->
b•rios
[b•rio_desc->
ƒ_b•rios
];

174 i‡(
	`fio_cmd¥io_fûl_b•rio
(
b•rio
, 
íåõs
, 
vÆues
,

175 
im∂icô_cmd¥io
, 
°¨t
, 
i
))

178 
°¨t
 = 
i
 + 1;

179 
b•rio_desc
->
ƒ_b•rios
++;

183 
	}
}

185 
	$fio_cmd¥io_bs•lô_ddú
(
thªad_›ti⁄s
 *
to
, *
cb_¨g
,

186 
fio_ddú
 
ddú
, *
°r
, 
boﬁ
 
d©a
)

188 
cmd¥io_∑r£_ªsu…
 *
∑r£_ªs_¨r
 = 
cb_¨g
;

189 
cmd¥io_∑r£_ªsu…
 *
∑r£_ªs
 = &
∑r£_ªs_¨r
[
ddú
];

191 i‡(
ddú
 =
DDIR_TRIM
)

194 i‡(
	`•lô_∑r£_¥io_ddú
(
to
, &
∑r£_ªs
->
íåõs
,

195 &
∑r£_ªs
->
ƒ_íåõs
, 
°r
))

199 
	}
}

201 
	$fio_cmd¥io_bs•lô_∑r£
(
thªad_d©a
 *
td
, c⁄° *
öput
,

202 
cmd¥io_∑r£_ªsu…
 *
∑r£_ªs
)

204 *
°r
, *
p
;

205 
ªt
 = 0;

207 
p
 = 
°r
 = 
	`°rdup
(
öput
);

209 
	`°rù_bœnk_‰⁄t
(&
°r
);

210 
	`°rù_bœnk_íd
(
°r
);

212 
ªt
 = 
	`°r_•lô_∑r£
(
td
, 
°r
, 
fio_cmd¥io_bs•lô_ddú
, 
∑r£_ªs
,

213 
Ál£
);

215 
	`‰ì
(
p
);

216  
ªt
;

217 
	}
}

227 
	$fio_cmd¥io_≥r˚¡age
(
cmd¥io
 *cmd¥io, 
io_u
 *io_u,

228 
cmd¥io_b•rio
 **
b•rio
)

230 
cmd¥io_b•rio
 *
b•rio_íåy
;

231 
fio_ddú
 
ddú
 = 
io_u
->ddir;

232 
i
;

234 
cmd¥io
->
mode
) {

235 
CMDPRIO_MODE_PERC
:

236 *
b•rio
 = 
NULL
;

237  
cmd¥io
->
≥rc_íåy
[
ddú
].
≥rc
;

238 
CMDPRIO_MODE_BSSPLIT
:

239 
i
 = 0; i < 
cmd¥io
->
b•rio_desc
[
ddú
].
ƒ_b•rios
; i++) {

240 
b•rio_íåy
 = &
cmd¥io
->
b•rio_desc
[
ddú
].
b•rios
[
i
];

241 i‡(
b•rio_íåy
->
bs
 =
io_u
->
buÊí
) {

242 *
b•rio
 = 
b•rio_íåy
;

243  
b•rio_íåy
->
tŸ_≥rc
;

252 
	`as£π
(0);

259 *
b•rio
 = 
NULL
;

261 
	}
}

274 
boﬁ
 
	$fio_cmd¥io_£t_i›rio
(
thªad_d©a
 *
td
, 
cmd¥io
 *cmdprio,

275 
io_u
 *io_u)

277 
cmd¥io_b•rio
 *
b•rio
;

278 
p
, 
ønd
;

279 
uöt32_t
 
≥rc
 = 0;

280 
i
;

282 
p
 = 
	`fio_cmd¥io_≥r˚¡age
(
cmd¥io
, 
io_u
, &
b•rio
);

283 i‡(!
p
)

284  
Ál£
;

286 
ønd
 = 
	`ønd_bëwìn
(&
td
->
¥io_°©e
, 0, 99);

287 i‡(
ønd
 >
p
)

288  
Ál£
;

290 
cmd¥io
->
mode
) {

291 
CMDPRIO_MODE_PERC
:

292 
io_u
->
i›rio
 = 
cmd¥io
->
≥rc_íåy
[io_u->
ddú
].
¥io
;

293 
io_u
->
˛©_¥io_ödex
 =

294 
cmd¥io
->
≥rc_íåy
[
io_u
->
ddú
].
˛©_¥io_ödex
;

295  
åue
;

296 
CMDPRIO_MODE_BSSPLIT
:

297 
	`as£π
(
b•rio
);

298 
i
 = 0; i < 
b•rio
->
ƒ_¥ios
; i++) {

299 
cmd¥io_¥io
 *
¥io
 = &
b•rio
->
¥ios
[
i
];

301 
≥rc
 +
¥io
->perc;

302 i‡(
ønd
 < 
≥rc
) {

303 
io_u
->
i›rio
 = 
¥io
->prio;

304 
io_u
->
˛©_¥io_ödex
 = 
¥io
->clat_prio_index;

305  
åue
;

310 
	`as£π
(0);

314 
	`as£π
(0);

315  
Ál£
;

316 
	}
}

318 
	$fio_cmd¥io_gí_≥rc
(
thªad_d©a
 *
td
, 
cmd¥io
 *cmdprio)

320 
cmd¥io_›ti⁄s
 *
›ti⁄s
 = 
cmd¥io
->options;

321 
cmd¥io_¥io
 *
¥io
;

322 
cmd¥io_vÆues
 
vÆues
[
CMDPRIO_RWDIR_CNT
] = {};

323 
thªad_°©
 *
ts
 = &
td
->ts;

324 
fio_ddú
 
ddú
;

325 
ªt
;

327 
ddú
 = 0; ddú < 
CMDPRIO_RWDIR_CNT
; ddir++) {

333 i‡(!
›ti⁄s
->
≥r˚¡age
[
ddú
] ||

334 (
ddú
 =
DDIR_READ
 && !
	`td_ªad
(
td
)) ||

335 (
ddú
 =
DDIR_WRITE
 && !
	`td_wrôe
(
td
)))

338 
ªt
 = 
	`öô_cmd¥io_vÆues
(&
vÆues
[
ddú
], 1, 
ts
);

339 i‡(
ªt
)

340 
îr
;

342 
¥io
 = &
cmd¥io
->
≥rc_íåy
[
ddú
];

343 
¥io
->
≥rc
 = 
›ti⁄s
->
≥r˚¡age
[
ddú
];

344 
¥io
->¥iÿ
	`i›rio_vÆue
(
›ti⁄s
->
˛ass
[
ddú
],

345 
›ti⁄s
->
Àvñ
[
ddú
]);

346 
	`assign_˛©_¥io_ödex
(
¥io
, &
vÆues
[
ddú
]);

348 
ªt
 = 
	`öô_ts_˛©_¥io
(
ts
, 
ddú
, &
vÆues
[ddir]);

349 i‡(
ªt
)

350 
îr
;

352 
	`‰ì
(
vÆues
[
ddú
].
¥ios
);

353 
vÆues
[
ddú
].
¥ios
 = 
NULL
;

354 
vÆues
[
ddú
].
ƒ_¥ios
 = 0;

359 
îr
:

360 
ddú
 = 0; ddú < 
CMDPRIO_RWDIR_CNT
; ddir++)

361 
	`‰ì
(
vÆues
[
ddú
].
¥ios
);

362 
	`‰ì_˛©_¥io_°©s
(
ts
);

364  
ªt
;

365 
	}
}

367 
	$fio_cmd¥io_∑r£_™d_gí_bs•lô
(
thªad_d©a
 *
td
,

368 
cmd¥io
 *cmdprio)

370 
cmd¥io_›ti⁄s
 *
›ti⁄s
 = 
cmd¥io
->options;

371 
cmd¥io_∑r£_ªsu…
 
∑r£_ªs
[
CMDPRIO_RWDIR_CNT
] = {};

372 
cmd¥io_vÆues
 
vÆues
[
CMDPRIO_RWDIR_CNT
] = {};

373 
thªad_°©
 *
ts
 = &
td
->ts;

374 
ªt
, 
im∂icô_cmd¥io
;

375 
fio_ddú
 
ddú
;

377 
ªt
 = 
	`fio_cmd¥io_bs•lô_∑r£
(
td
, 
›ti⁄s
->
bs•lô_°r
,

378 &
∑r£_ªs
[0]);

379 i‡(
ªt
)

380 
îr
;

382 
ddú
 = 0; ddú < 
CMDPRIO_RWDIR_CNT
; ddir++) {

388 i‡(!
∑r£_ªs
[
ddú
].
ƒ_íåõs
 ||

389 (
ddú
 =
DDIR_READ
 && !
	`td_ªad
(
td
)) ||

390 (
ddú
 =
DDIR_WRITE
 && !
	`td_wrôe
(
td
))) {

391 
	`‰ì
(
∑r£_ªs
[
ddú
].
íåõs
);

392 
∑r£_ªs
[
ddú
].
íåõs
 = 
NULL
;

393 
∑r£_ªs
[
ddú
].
ƒ_íåõs
 = 0;

397 
ªt
 = 
	`öô_cmd¥io_vÆues
(&
vÆues
[
ddú
],

398 
∑r£_ªs
[
ddú
].
ƒ_íåõs
, 
ts
);

399 i‡(
ªt
)

400 
îr
;

402 
im∂icô_cmd¥io
 = 
	`i›rio_vÆue
(
›ti⁄s
->
˛ass
[
ddú
],

403 
›ti⁄s
->
Àvñ
[
ddú
]);

405 
ªt
 = 
	`fio_cmd¥io_gíî©e_b•rio_desc
(&
cmd¥io
->
b•rio_desc
[
ddú
],

406 &
∑r£_ªs
[
ddú
],

407 &
vÆues
[
ddú
],

408 
im∂icô_cmd¥io
);

409 i‡(
ªt
)

410 
îr
;

412 
	`‰ì
(
∑r£_ªs
[
ddú
].
íåõs
);

413 
∑r£_ªs
[
ddú
].
íåõs
 = 
NULL
;

414 
∑r£_ªs
[
ddú
].
ƒ_íåõs
 = 0;

416 
ªt
 = 
	`öô_ts_˛©_¥io
(
ts
, 
ddú
, &
vÆues
[ddir]);

417 i‡(
ªt
)

418 
îr
;

420 
	`‰ì
(
vÆues
[
ddú
].
¥ios
);

421 
vÆues
[
ddú
].
¥ios
 = 
NULL
;

422 
vÆues
[
ddú
].
ƒ_¥ios
 = 0;

427 
îr
:

428 
ddú
 = 0; ddú < 
CMDPRIO_RWDIR_CNT
; ddir++) {

429 
	`‰ì
(
∑r£_ªs
[
ddú
].
íåõs
);

430 
	`‰ì
(
vÆues
[
ddú
].
¥ios
);

432 
	`‰ì_˛©_¥io_°©s
(
ts
);

433 
	`fio_cmd¥io_˛ónup
(
cmd¥io
);

435  
ªt
;

436 
	}
}

438 
	$fio_cmd¥io_∑r£_™d_gí
(
thªad_d©a
 *
td
,

439 
cmd¥io
 *cmdprio)

441 
cmd¥io_›ti⁄s
 *
›ti⁄s
 = 
cmd¥io
->options;

442 
i
, 
ªt
;

448 
i
 = 0; i < 
CMDPRIO_RWDIR_CNT
; i++) {

454 i‡(!
›ti⁄s
->
˛ass
[
i
])

455 
›ti⁄s
->
˛ass
[
i
] = 
IOPRIO_CLASS_RT
;

458 
cmd¥io
->
mode
) {

459 
CMDPRIO_MODE_BSSPLIT
:

460 
ªt
 = 
	`fio_cmd¥io_∑r£_™d_gí_bs•lô
(
td
, 
cmd¥io
);

462 
CMDPRIO_MODE_PERC
:

463 
ªt
 = 
	`fio_cmd¥io_gí_≥rc
(
td
, 
cmd¥io
);

466 
	`as£π
(0);

470  
ªt
;

471 
	}
}

473 
	$fio_cmd¥io_˛ónup
(
cmd¥io
 *cmdprio)

475 
fio_ddú
 
ddú
;

476 
i
;

478 
ddú
 = 0; ddú < 
CMDPRIO_RWDIR_CNT
; ddir++) {

479 
i
 = 0; i < 
cmd¥io
->
b•rio_desc
[
ddú
].
ƒ_b•rios
; i++)

480 
	`‰ì
(
cmd¥io
->
b•rio_desc
[
ddú
].
b•rios
[
i
].
¥ios
);

481 
	`‰ì
(
cmd¥io
->
b•rio_desc
[
ddú
].
b•rios
);

482 
cmd¥io
->
b•rio_desc
[
ddú
].
b•rios
 = 
NULL
;

483 
cmd¥io
->
b•rio_desc
[
ddú
].
ƒ_b•rios
 = 0;

490 
cmd¥io
->
›ti⁄s
 = 
NULL
;

491 
	}
}

493 
	$fio_cmd¥io_öô
(
thªad_d©a
 *
td
, 
cmd¥io
 *cmdprio,

494 
cmd¥io_›ti⁄s
 *
›ti⁄s
)

496 
thªad_›ti⁄s
 *
to
 = &
td
->
o
;

497 
boﬁ
 
has_cmd¥io_≥r˚¡age
 = 
Ál£
;

498 
boﬁ
 
has_cmd¥io_bs•lô
 = 
Ál£
;

499 
i
;

501 
cmd¥io
->
›ti⁄s
 = options;

503 i‡(
›ti⁄s
->
bs•lô_°r
 && 
	`°æí
(options->bssplit_str))

504 
has_cmd¥io_bs•lô
 = 
åue
;

506 
i
 = 0; i < 
CMDPRIO_RWDIR_CNT
; i++) {

507 i‡(
›ti⁄s
->
≥r˚¡age
[
i
])

508 
has_cmd¥io_≥r˚¡age
 = 
åue
;

514 i‡(
has_cmd¥io_≥r˚¡age
 && 
has_cmd¥io_bs•lô
) {

515 
	`log_îr
("%s: cmdprio_percentageánd cmdprio_bssplit options "

517 
to
->
«me
);

521 i‡(
has_cmd¥io_bs•lô
)

522 
cmd¥io
->
mode
 = 
CMDPRIO_MODE_BSSPLIT
;

523 i‡(
has_cmd¥io_≥r˚¡age
)

524 
cmd¥io
->
mode
 = 
CMDPRIO_MODE_PERC
;

526 
cmd¥io
->
mode
 = 
CMDPRIO_MODE_NONE
;

529 i‡(
cmd¥io
->
mode
 =
CMDPRIO_MODE_NONE
)

532  
	`fio_cmd¥io_∑r£_™d_gí
(
td
, 
cmd¥io
);

533 
	}
}

	@engines/cmdprio.h

6 #i‚de‡
FIO_CMDPRIO_H


7 
	#FIO_CMDPRIO_H


	)

9 
	~"../fio.h
"

12 
	#CMDPRIO_RWDIR_CNT
 2

	)

15 
	mCMDPRIO_MODE_NONE
,

16 
	mCMDPRIO_MODE_PERC
,

17 
	mCMDPRIO_MODE_BSSPLIT
,

20 
	scmd¥io_¥io
 {

21 
öt32_t
 
	m¥io
;

22 
uöt32_t
 
	m≥rc
;

23 
uöt16_t
 
	m˛©_¥io_ödex
;

26 
	scmd¥io_b•rio
 {

27 
uöt64_t
 
	mbs
;

28 
uöt32_t
 
	mtŸ_≥rc
;

29 
	mƒ_¥ios
;

30 
cmd¥io_¥io
 *
	m¥ios
;

33 
	scmd¥io_b•rio_desc
 {

34 
cmd¥io_b•rio
 *
	mb•rios
;

35 
	mƒ_b•rios
;

38 
	scmd¥io_›ti⁄s
 {

39 
	m≥r˚¡age
[
CMDPRIO_RWDIR_CNT
];

40 
	m˛ass
[
CMDPRIO_RWDIR_CNT
];

41 
	mÀvñ
[
CMDPRIO_RWDIR_CNT
];

42 *
	mbs•lô_°r
;

45 
	scmd¥io
 {

46 
cmd¥io_›ti⁄s
 *
	m›ti⁄s
;

47 
cmd¥io_¥io
 
	m≥rc_íåy
[
CMDPRIO_RWDIR_CNT
];

48 
cmd¥io_b•rio_desc
 
	mb•rio_desc
[
CMDPRIO_RWDIR_CNT
];

49 
	mmode
;

52 
boﬁ
 
fio_cmd¥io_£t_i›rio
(
thªad_d©a
 *
td
, 
cmd¥io
 *cmdprio,

53 
io_u
 *io_u);

55 
fio_cmd¥io_˛ónup
(
cmd¥io
 *cmdprio);

57 
fio_cmd¥io_öô
(
thªad_d©a
 *
td
, 
cmd¥io
 *cmdprio,

58 
cmd¥io_›ti⁄s
 *
›ti⁄s
);

	@engines/cpu.c

8 
	~"../fio.h
"

9 
	~"../›tgroup.h
"

12 
size_t
 
	gqs‹t_size
 = (256 * (1ULL << 10));

14 
	smwc
 {

15 
uöt32_t
 
	mw
;

16 
uöt32_t
 
	mz
;

19 
	e°ªss_mode
 {

20 
	mFIO_CPU_NOOP
 = 0,

21 
	mFIO_CPU_QSORT
 = 1,

24 
	s˝u_›ti⁄s
 {

25 *
	m∑d
;

26 
	m˝ulﬂd
;

27 
	m˝ucy˛e
;

28 
°ªss_mode
 
	m˝umode
;

29 
	mexô_io_d⁄e
;

30 
öt32_t
 *
	mqs‹t_d©a
;

33 
fio_›ti⁄
 
	g›ti⁄s
[] = {

35 .
«me
 = "cpuload",

36 .
	g ame
 = "CPUÜoad",

37 .
	gty≥
 = 
FIO_OPT_INT
,

38 .
	goff1
 = 
off£tof
(
˝u_›ti⁄s
, 
˝ulﬂd
),

39 .
	ghñp
 = "UseÅhisÖercentage of CPU",

40 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

41 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

44 .
	g«me
 = "cpumode",

45 .
	g ame
 = "cpumode",

46 .
	gty≥
 = 
FIO_OPT_STR
,

47 .
	ghñp
 = "Stress mode",

48 .
	goff1
 = 
off£tof
(
˝u_›ti⁄s
, 
˝umode
),

49 .
	gdef
 = "noop",

50 .
	gposvÆ
 = {

51 { .
ivÆ
 = "noop",

52 .
	govÆ
 = 
FIO_CPU_NOOP
,

53 .
	ghñp
 = "NOOP instructions",

55 { .
	givÆ
 = "qsort",

56 .
	govÆ
 = 
FIO_CPU_QSORT
,

57 .
	ghñp
 = "QSORT computation",

60 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

61 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

64 .
	g«me
 = "cpuchunks",

65 .
	g ame
 = "CPU chunk",

66 .
	gty≥
 = 
FIO_OPT_INT
,

67 .
	goff1
 = 
off£tof
(
˝u_›ti⁄s
, 
˝ucy˛e
),

68 .
	ghñp
 = "Length ofÅhe CPU burn cycles (usecs)",

69 .
	gdef
 = "50000",

70 .
	g∑ª¡
 = "cpuload",

71 .
	ghide
 = 1,

72 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

73 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

76 .
	g«me
 = "exit_on_io_done",

77 .
	g ame
 = "Exit when IOÅhreadsáre done",

78 .
	gty≥
 = 
FIO_OPT_BOOL
,

79 .
	goff1
 = 
off£tof
(
˝u_›ti⁄s
, 
exô_io_d⁄e
),

80 .
	ghñp
 = "Exit when IOÅhreads finish",

81 .
	gdef
 = "0",

82 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

83 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

86 .
	g«me
 = 
NULL
,

96 
uöt32_t
 
	$mwc32
(
mwc
 *mwc)

98 
mwc
->
z
 = 36969 * (mwc->z & 65535) + (mwc->z >> 16);

99 
mwc
->
w
 = 18000 * (mwc->w & 65535) + (mwc->w >> 16);

100  (
mwc
->
z
 << 16Ë+ mwc->
w
;

101 
	}
}

107 
	$°ªss_qs‹t_cmp_1
(c⁄° *
p1
, c⁄° *
p2
)

109 c⁄° 
öt32_t
 *
i1
 = (c⁄° i¡32_à*)
p1
;

110 c⁄° 
öt32_t
 *
i2
 = (c⁄° i¡32_à*)
p2
;

112 i‡(*
i1
 > *
i2
)

114 i‡(*
i1
 < *
i2
)

118 
	}
}

124 
	$°ªss_qs‹t_cmp_2
(c⁄° *
p1
, c⁄° *
p2
)

126  
	`°ªss_qs‹t_cmp_1
(
p2
, 
p1
);

127 
	}
}

133 
	$°ªss_qs‹t_cmp_3
(c⁄° *
p1
, c⁄° *
p2
)

135 c⁄° 
öt8_t
 *
i1
 = (c⁄° i¡8_à*)
p1
;

136 c⁄° 
öt8_t
 *
i2
 = (c⁄° i¡8_à*)
p2
;

139  *
i1
 - *
i2
;

140 
	}
}

142 
	$do_qs‹t
(
thªad_d©a
 *
td
)

144 
thªad_›ti⁄s
 *
o
 = &
td
->o;

145 
˝u_›ti⁄s
 *
co
 = 
td
->
eo
;

146 
time•ec
 
°¨t
, 
now
;

148 
	`fio_gë_m⁄o_time
(&
°¨t
);

151 
	`qs‹t
(
co
->
qs‹t_d©a
, 
qs‹t_size
, (*(co->qs‹t_d©a)), 
°ªss_qs‹t_cmp_1
);

154 
	`qs‹t
(
co
->
qs‹t_d©a
, 
qs‹t_size
, (*(co->qs‹t_d©a)), 
°ªss_qs‹t_cmp_2
);

157 
	`qs‹t
((
uöt8_t
 *)
co
->
qs‹t_d©a
, 
qs‹t_size
 * 4, (uöt8_t), 
°ªss_qs‹t_cmp_3
);

160 
	`qs‹t
(
co
->
qs‹t_d©a
, 
qs‹t_size
, (*(co->qs‹t_d©a)), 
°ªss_qs‹t_cmp_2
);

161 
	`fio_gë_m⁄o_time
(&
now
);

169 
co
->
˝ucy˛e
 = 
	`utime_sö˚
(&
°¨t
, &
now
);

170 
o
->
thöktime
 = ((Ë
co
->
˝ucy˛e
 *

171 (100 - 
co
->
˝ulﬂd
)) / co->cpuload;

174 
	}
}

176 
fio_q_°©us
 
	$fio_˝uio_queue
(
thªad_d©a
 *
td
,

177 
io_u
 
fio_unu£d
 *io_u)

179 
˝u_›ti⁄s
 *
co
 = 
td
->
eo
;

181 i‡(
co
->
exô_io_d⁄e
 && !
	`fio_ru¬ög_‹_≥ndög_io_thªads
()) {

182 
td
->
d⁄e
 = 1;

183  
FIO_Q_BUSY
;

186 
co
->
˝umode
) {

187 
FIO_CPU_NOOP
:

188 
	`u£c_•ö
(
co
->
˝ucy˛e
);

190 
FIO_CPU_QSORT
:

191 
	`do_qs‹t
(
td
);

195  
FIO_Q_COMPLETED
;

196 
	}
}

198 
	$no›_öô
(
thªad_d©a
 *
td
)

200 
˝u_›ti⁄s
 *
co
 = 
td
->
eo
;

202 
	`log_öfo
("%s (noop): ioengine=%s, cpuload=%u, cpucycle=%u\n",

203 
td
->
o
.
«me
,Åd->
io_›s
->«me, 
co
->
˝ulﬂd
, co->
˝ucy˛e
);

205 
	}
}

207 
	$qs‹t_˛ónup
(
thªad_d©a
 *
td
)

209 
˝u_›ti⁄s
 *
co
 = 
td
->
eo
;

211 i‡(
co
->
qs‹t_d©a
) {

212 
	`‰ì
(
co
->
qs‹t_d©a
);

213 
co
->
qs‹t_d©a
 = 
NULL
;

217 
	}
}

219 
	$qs‹t_öô
(
thªad_d©a
 *
td
)

222 
mwc
 mwc = { 521288629UL, 362436069UL };

223 
˝u_›ti⁄s
 *
co
 = 
td
->
eo
;

224 
öt32_t
 *
±r
;

225 
i
;

227 
co
->
qs‹t_d©a
 = 
	`ˇŒoc
(
qs‹t_size
, (*co->qsort_data));

228 i‡(
co
->
qs‹t_d©a
 =
NULL
) {

229 
	`td_vîr‹
(
td
, 
ENOMEM
, "qsort_init");

234 
±r
 = 
co
->
qs‹t_d©a
, 
i
 = 0; i < 
qs‹t_size
; i++)

235 *
±r
++ = 
	`mwc32
(&
mwc
);

237 
	`log_öfo
("%s (qsort): ioengine=%s, cpuload=%u, cpucycle=%u\n",

238 
td
->
o
.
«me
,Åd->
io_›s
->«me, 
co
->
˝ulﬂd
, co->
˝ucy˛e
);

241 
	}
}

243 
	$fio_˝uio_öô
(
thªad_d©a
 *
td
)

245 
thªad_›ti⁄s
 *
o
 = &
td
->o;

246 
˝u_›ti⁄s
 *
co
 = 
td
->
eo
;

247 
td_¥evious_°©e
;

248 *
msg
;

250 i‡(!
co
->
˝ulﬂd
) {

251 
	`td_vmsg
(
td
, 
EINVAL
, "cpuÅhreadÇeedsÑate (cpuload=)","cpuio");

255 i‡(
co
->
˝ulﬂd
 > 100)

256 
co
->
˝ulﬂd
 = 100;

259 
td_¥evious_°©e
 = 
td
->
run°©e
;

265 
	`td_£t_run°©e
(
td
, 
TD_SETTING_UP
);

270 
o
->
thöktime_blocks
 = 1;

271 
o
->
thöktime_blocks_ty≥
 = 
THINKTIME_BLOCKS_TYPE_COMPLETE
;

272 
o
->
thöktime_•ö
 = 0;

273 
o
->
thöktime
 = ((Ë
co
->
˝ucy˛e
 *

274 (100 - 
co
->
˝ulﬂd
)) / co->cpuload;

276 
o
->
ƒ_fûes
 = o->
›í_fûes
 = 1;

278 
co
->
˝umode
) {

279 
FIO_CPU_NOOP
:

280 
	`no›_öô
(
td
);

282 
FIO_CPU_QSORT
:

283 
	`qs‹t_öô
(
td
);

286 i‡(
	`a•rötf
(&
msg
, "bad cpuÉngöêmode: %d", 
co
->
˝umode
) < 0)

287 
msg
 = 
NULL
;

288 
	`td_vmsg
(
td
, 
EINVAL
, 
msg
 ? : "(?)", 
__func__
);

289 
	`‰ì
(
msg
);

294 
	`td_£t_run°©e
(
td
, 
td_¥evious_°©e
);

296 
	}
}

298 
	$fio_˝uio_˛ónup
(
thªad_d©a
 *
td
)

300 
˝u_›ti⁄s
 *
co
 = 
td
->
eo
;

302 
co
->
˝umode
) {

303 
FIO_CPU_NOOP
:

305 
FIO_CPU_QSORT
:

306 
	`qs‹t_˛ónup
(
td
);

309 
	}
}

311 
	$fio_˝uio_›í
(
thªad_d©a
 
fio_unu£d
 *
td
,

312 
fio_fûe
 
fio_unu£d
 *
f
)

315 
	}
}

317 
i€ngöe_›s
 
	gi€ngöe
 = {

318 .
«me
 = "cpuio",

319 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

320 .
	gqueue
 = 
fio_˝uio_queue
,

321 .
	göô
 = 
fio_˝uio_öô
,

322 .
	g˛ónup
 = 
fio_˝uio_˛ónup
,

323 .
	g›í_fûe
 = 
fio_˝uio_›í
,

324 .
	gÊags
 = 
FIO_SYNCIO
 | 
FIO_DISKLESSIO
 | 
FIO_NOIO
,

325 .
	g›ti⁄s
 = 
›ti⁄s
,

326 .
	g›ti⁄_°ru˘_size
 = (
˝u_›ti⁄s
),

329 
fio_öô
 
	$fio_˝uio_ªgi°î
()

331 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

332 
	}
}

334 
fio_exô
 
	$fio_˝uio_uƒegi°î
()

336 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

337 
	}
}

	@engines/dev-dax.c

46 
	~<°dio.h
>

47 
	~<limôs.h
>

48 
	~<°dlib.h
>

49 
	~<uni°d.h
>

50 
	~<î∫o.h
>

51 
	~<sys/mm™.h
>

52 
	~<sys/°©.h
>

53 
	~<sys/sysma¸os.h
>

54 
	~<libgí.h
>

55 
	~<libpmem.h
>

57 
	~"../fio.h
"

58 
	~"../vîify.h
"

64 
	#MMAP_TOTAL_SZ
 (1 * 1024 * 1024 * 1024UL)

	)

66 
	sfio_devdax_d©a
 {

67 *
	mdevdax_±r
;

68 
size_t
 
	mdevdax_sz
;

69 
off_t
 
	mdevdax_off
;

72 
	$fio_devdax_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

73 
size_t
 
Àngth
, 
off_t
 
off
)

75 
fio_devdax_d©a
 *
fdd
 = 
	`FILE_ENG_DATA
(
f
);

76 
Êags
 = 0;

78 i‡(
	`td_rw
(
td
))

79 
Êags
 = 
PROT_READ
 | 
PROT_WRITE
;

80 i‡(
	`td_wrôe
(
td
)) {

81 
Êags
 = 
PROT_WRITE
;

83 i‡(
td
->
o
.
vîify
 !
VERIFY_NONE
)

84 
Êags
 |
PROT_READ
;

86 
Êags
 = 
PROT_READ
;

88 
fdd
->
devdax_±r
 = 
	`mm≠
(
NULL
, 
Àngth
, 
Êags
, 
MAP_SHARED
, 
f
->
fd
, 
off
);

89 i‡(
fdd
->
devdax_±r
 =
MAP_FAILED
) {

90 
fdd
->
devdax_±r
 = 
NULL
;

91 
	`td_vîr‹
(
td
, 
î∫o
, "mmap");

94 i‡(
td
->
îr‹
 && 
fdd
->
devdax_±r
)

95 
	`munm≠
(
fdd
->
devdax_±r
, 
Àngth
);

97  
td
->
îr‹
;

98 
	}
}

103 
	$fio_devdax_¥ï_limôed
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

105 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

106 
fio_devdax_d©a
 *
fdd
 = 
	`FILE_ENG_DATA
(
f
);

108 i‡(
io_u
->
buÊí
 > 
f
->
ªÆ_fûe_size
) {

109 
	`log_îr
("dev-dax: bsÅoo big for dev-daxÉngine\n");

110  
EIO
;

113 
fdd
->
devdax_sz
 = 
	`mö
(
MMAP_TOTAL_SZ
, 
f
->
ªÆ_fûe_size
);

114 i‡(
fdd
->
devdax_sz
 > 
f
->
io_size
)

115 
fdd
->
devdax_sz
 = 
f
->
io_size
;

117 
fdd
->
devdax_off
 = 
io_u
->
off£t
;

119  
	`fio_devdax_fûe
(
td
, 
f
, 
fdd
->
devdax_sz
, fdd->
devdax_off
);

120 
	}
}

125 
	$fio_devdax_¥ï_fuŒ
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

127 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

128 
fio_devdax_d©a
 *
fdd
 = 
	`FILE_ENG_DATA
(
f
);

129 
ªt
;

131 i‡(
	`fio_fûe_∑πül_mm≠
(
f
))

132  
EINVAL
;

134 i‡(
io_u
->
off£t
 !(
size_t
) io_u->offset ||

135 
f
->
io_size
 !(
size_t
) f->io_size) {

136 
	`fio_fûe_£t_∑πül_mm≠
(
f
);

137  
EINVAL
;

140 
fdd
->
devdax_sz
 = 
f
->
io_size
;

141 
fdd
->
devdax_off
 = 0;

143 
ªt
 = 
	`fio_devdax_fûe
(
td
, 
f
, 
fdd
->
devdax_sz
, fdd->
devdax_off
);

144 i‡(
ªt
)

145 
	`fio_fûe_£t_∑πül_mm≠
(
f
);

147  
ªt
;

148 
	}
}

150 
	$fio_devdax_¥ï
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

152 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

153 
fio_devdax_d©a
 *
fdd
 = 
	`FILE_ENG_DATA
(
f
);

154 
ªt
;

159 i‡(
io_u
->
off£t
 >
fdd
->
devdax_off
 &&

160 
io_u
->
off£t
 + io_u->
buÊí
 <
fdd
->
devdax_off
 + fdd->
devdax_sz
)

161 
d⁄e
;

166 i‡(
fdd
->
devdax_±r
) {

167 i‡(
	`munm≠
(
fdd
->
devdax_±r
, fdd->
devdax_sz
) < 0)

168  
î∫o
;

169 
fdd
->
devdax_±r
 = 
NULL
;

172 i‡(
	`fio_devdax_¥ï_fuŒ
(
td
, 
io_u
)) {

173 
	`td_˛ór_îr‹
(
td
);

174 
ªt
 = 
	`fio_devdax_¥ï_limôed
(
td
, 
io_u
);

175 i‡(
ªt
)

176  
ªt
;

179 
d⁄e
:

180 
io_u
->
mm≠_d©a
 = 
fdd
->
devdax_±r
 + io_u->
off£t
 - fdd->
devdax_off
 -

181 
f
->
fûe_off£t
;

183 
	}
}

185 
fio_q_°©us
 
	$fio_devdax_queue
(
thªad_d©a
 *
td
,

186 
io_u
 *io_u)

188 
	`fio_ro_check
(
td
, 
io_u
);

189 
io_u
->
îr‹
 = 0;

191 
io_u
->
ddú
) {

192 
DDIR_READ
:

193 
	`mem˝y
(
io_u
->
x„r_buf
, io_u->
mm≠_d©a
, io_u->
x„r_buÊí
);

195 
DDIR_WRITE
:

196 
	`pmem_mem˝y_≥rsi°
(
io_u
->
mm≠_d©a
, io_u->
x„r_buf
,

197 
io_u
->
x„r_buÊí
);

199 
DDIR_SYNC
:

200 
DDIR_DATASYNC
:

201 
DDIR_SYNC_FILE_RANGE
:

204 
io_u
->
îr‹
 = 
EINVAL
;

208  
FIO_Q_COMPLETED
;

209 
	}
}

211 
	$fio_devdax_öô
(
thªad_d©a
 *
td
)

213 
thªad_›ti⁄s
 *
o
 = &
td
->o;

215 i‡((
o
->
rw_mö_bs
 & 
∑ge_mask
) &&

216 (
o
->
fsync_blocks
 || o->
fd©async_blocks
)) {

217 
	`log_îr
("dev-dax: mmap options dictateá minimum block size of %llu bytes\n",

218 (Ë
∑ge_size
);

223 
	}
}

225 
	$fio_devdax_›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

227 
fio_devdax_d©a
 *
fdd
;

228 
ªt
;

230 
ªt
 = 
	`gíîic_›í_fûe
(
td
, 
f
);

231 i‡(
ªt
)

232  
ªt
;

234 
fdd
 = 
	`ˇŒoc
(1, (*fdd));

235 i‡(!
fdd
) {

236 
fio_unu£d
 
__ªt
;

237 
__ªt
 = 
	`gíîic_˛o£_fûe
(
td
, 
f
);

241 
	`FILE_SET_ENG_DATA
(
f
, 
fdd
);

244 
	}
}

246 
	$fio_devdax_˛o£_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

248 
fio_devdax_d©a
 *
fdd
 = 
	`FILE_ENG_DATA
(
f
);

250 
	`FILE_SET_ENG_DATA
(
f
, 
NULL
);

251 
	`‰ì
(
fdd
);

252 
	`fio_fûe_˛ór_∑πül_mm≠
(
f
);

254  
	`gíîic_˛o£_fûe
(
td
, 
f
);

255 
	}
}

258 
	$fio_devdax_gë_fûe_size
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

260 
•©h
[
PATH_MAX
];

261 
≈©h
[
PATH_MAX
];

262 *
Ω©h
, *
ba£«me
;

263 
FILE
 *
sfûe
;

264 
uöt64_t
 
size
;

265 
°©
 
°
;

266 
rc
;

268 i‡(
	`fio_fûe_size_known
(
f
))

271 i‡(
f
->
fûëy≥
 !
FIO_TYPE_CHAR
)

272  -
EINVAL
;

274 
rc
 = 
	`°©
(
f
->
fûe_«me
, &
°
);

275 i‡(
rc
 < 0) {

276 
	`log_îr
("%s: failedÅo stat file %s (%s)\n",

277 
td
->
o
.
«me
, 
f
->
fûe_«me
, 
	`°ªº‹
(
î∫o
));

278  -
î∫o
;

281 
	`¢¥ötf
(
•©h
, 
PATH_MAX
, "/sys/dev/char/%d:%d/subsystem",

282 
	`maj‹
(
°
.
°_rdev
), 
	`mö‹
(st.st_rdev));

284 
Ω©h
 = 
	`ªÆ∑th
(
•©h
, 
≈©h
);

285 i‡(!
Ω©h
) {

286 
	`log_îr
("%s:Ñealpath on %s failed (%s)\n",

287 
td
->
o
.
«me
, 
•©h
, 
	`°ªº‹
(
î∫o
));

288  -
î∫o
;

292 
ba£«me
 = 
	`°ºchr
(
Ω©h
, '/');

293 i‡(!
ba£«me
 || 
	`°rcmp
("dax", basename+1)) {

294 
	`log_îr
("%s: %sÇotá DAX device!\n",

295 
td
->
o
.
«me
, 
f
->
fûe_«me
);

298 
	`¢¥ötf
(
•©h
, 
PATH_MAX
, "/sys/dev/char/%d:%d/size",

299 
	`maj‹
(
°
.
°_rdev
), 
	`mö‹
(st.st_rdev));

301 
sfûe
 = 
	`f›í
(
•©h
, "r");

302 i‡(!
sfûe
) {

303 
	`log_îr
("%s: fopen on %s failed (%s)\n",

304 
td
->
o
.
«me
, 
•©h
, 
	`°ªº‹
(
î∫o
));

308 
rc
 = 
	`fsˇnf
(
sfûe
, "%lu", &
size
);

309 i‡(
rc
 < 0) {

310 
	`log_îr
("%s: fscanf on %s failed (%s)\n",

311 
td
->
o
.
«me
, 
•©h
, 
	`°ªº‹
(
î∫o
));

312 
	`f˛o£
(
sfûe
);

316 
f
->
ªÆ_fûe_size
 = 
size
;

318 
	`f˛o£
(
sfûe
);

320 i‡(
f
->
fûe_off£t
 > f->
ªÆ_fûe_size
) {

321 
	`log_îr
("%s: off£àexãnd†íd (%Œu > %Œu)\n", 
td
->
o
.
«me
,

322 (Ë
f
->
fûe_off£t
,

323 (Ë
f
->
ªÆ_fûe_size
);

327 
	`fio_fûe_£t_size_known
(
f
);

329 
	}
}

331 
FIO_STATIC
 
i€ngöe_›s
 
	gi€ngöe
 = {

332 .
«me
 = "dev-dax",

333 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

334 .
	göô
 = 
fio_devdax_öô
,

335 .
	g¥ï
 = 
fio_devdax_¥ï
,

336 .
	gqueue
 = 
fio_devdax_queue
,

337 .
	g›í_fûe
 = 
fio_devdax_›í_fûe
,

338 .
	g˛o£_fûe
 = 
fio_devdax_˛o£_fûe
,

339 .
	ggë_fûe_size
 = 
fio_devdax_gë_fûe_size
,

340 .
	gÊags
 = 
FIO_SYNCIO
 | 
FIO_DISKLESSIO
 | 
FIO_NOEXTEND
 | 
FIO_NODISKUTIL
,

343 
fio_öô
 
	$fio_devdax_ªgi°î
()

345 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

346 
	}
}

348 
fio_exô
 
	$fio_devdax_uƒegi°î
()

350 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

351 
	}
}

	@engines/dfs.c

7 
	~<fio.h
>

8 
	~<›tgroup.h
>

10 
	~<daos.h
>

11 
	~<daos_fs.h
>

13 
boﬁ
 
	gdaos_öôülized
;

14 
	gnum_thªads
;

15 
±hªad_muãx_t
 
	gdaos_muãx
 = 
PTHREAD_MUTEX_INITIALIZER
;

16 
daos_h™dÀ_t
 
	gpoh
;

17 
daos_h™dÀ_t
 
	gcoh
;

18 
daos_o˛ass_id_t
 
	gcid
 = 
OC_UNKNOWN
;

19 
dfs_t
 *
	gdfs
;

21 
	sdaos_iou
 {

22 
io_u
 *
	mio_u
;

23 
daos_evít_t
 
	mev
;

24 
d_sg_li°_t
 
	msgl
;

25 
d_iov_t
 
	miov
;

26 
daos_size_t
 
	msize
;

27 
boﬁ
 
	mcom∂ëe
;

30 
	sdaos_d©a
 {

31 
daos_h™dÀ_t
 
	meqh
;

32 
dfs_obj_t
 *
	mobj
;

33 
io_u
 **
	mio_us
;

34 
	mqueued
;

35 
	mnum_ios
;

38 
	sdaos_fio_›ti⁄s
 {

39 *
	m∑d
;

40 *
	mpoﬁ
;

41 *
	mc⁄t
;

42 
daos_size_t
 
	mchsz
;

43 *
	mo˛ass
;

44 #i‡!
deföed
(
DAOS_API_VERSION_MAJOR
) || DAOS_API_VERSION_MAJOR < 1

45 *
	msv˛
;

49 
fio_›ti⁄
 
	g›ti⁄s
[] = {

51 .
«me
 = "pool",

52 .
	g ame
 = "pool uuid orÜabel",

53 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

54 .
	goff1
 = 
off£tof
(
daos_fio_›ti⁄s
, 
poﬁ
),

55 .
	ghñp
 = "DAOSÖool uuid orÜabel",

56 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

57 .
	ggroup
 = 
FIO_OPT_G_DFS
,

60 .
	g«me
 = "cont",

61 .
	g ame
 = "container uuid orÜabel",

62 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

63 .
	goff1
 = 
off£tof
(
daos_fio_›ti⁄s
, 
c⁄t
),

64 .
	ghñp
 = "DAOS container uuid orÜabel",

65 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

66 .
	ggroup
 = 
FIO_OPT_G_DFS
,

69 .
	g«me
 = "chunk_size",

70 .
	g ame
 = "DFS chunk size",

71 .
	gty≥
 = 
FIO_OPT_ULL
,

72 .
	goff1
 = 
off£tof
(
daos_fio_›ti⁄s
, 
chsz
),

73 .
	ghñp
 = "DFS chunk size in bytes",

74 .
	gdef
 = "0",

75 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

76 .
	ggroup
 = 
FIO_OPT_G_DFS
,

79 .
	g«me
 = "object_class",

80 .
	g ame
 = "object class",

81 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

82 .
	goff1
 = 
off£tof
(
daos_fio_›ti⁄s
, 
o˛ass
),

83 .
	ghñp
 = "DAOS object class",

84 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

85 .
	ggroup
 = 
FIO_OPT_G_DFS
,

87 #i‡!
deföed
(
DAOS_API_VERSION_MAJOR
) || DAOS_API_VERSION_MAJOR < 1

89 .
	g«me
 = "svcl",

90 .
	g ame
 = "List of serviceÑanks",

91 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

92 .
	goff1
 = 
off£tof
(
daos_fio_›ti⁄s
, 
sv˛
),

93 .
	ghñp
 = "List ofÖoolÑeplicated serviceÑanks",

94 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

95 .
	ggroup
 = 
FIO_OPT_G_DFS
,

99 .
	g«me
 = 
NULL
,

103 
	$daos_fio_globÆ_öô
(
thªad_d©a
 *
td
)

105 
daos_fio_›ti⁄s
 *
eo
 = 
td
->eo;

106 
daos_poﬁ_öfo_t
 
poﬁ_öfo
;

107 
daos_c⁄t_öfo_t
 
co_öfo
;

108 
rc
 = 0;

110 #i‡!
	`deföed
(
DAOS_API_VERSION_MAJOR
) || DAOS_API_VERSION_MAJOR < 1

111 i‡(!
eo
->
poﬁ
 || !eo->
c⁄t
 || !eo->
sv˛
) {

113 i‡(!
eo
->
poﬁ
 || !eo->
c⁄t
) {

115 
	`log_îr
("MissingÑequired DAOS options\n");

116  
EINVAL
;

119 
rc
 = 
	`daos_öô
();

120 i‡(
rc
 !-
DER_ALREADY
 &&Ñc) {

121 
	`log_îr
("FaûedÅÿöôülizêdao†%d\n", 
rc
);

122 
	`td_vîr‹
(
td
, 
rc
, "daos_init");

123  
rc
;

126 #i‡!
	`deföed
(
DAOS_API_VERSION_MAJOR
) || \

127 (
DAOS_API_VERSION_MAJOR
 =1 && 
DAOS_API_VERSION_MINOR
 < 3)

128 
uuid_t
 
poﬁ_uuid
, 
co_uuid
;

130 
rc
 = 
	`uuid_∑r£
(
eo
->
poﬁ
, 
poﬁ_uuid
);

131 i‡(
rc
) {

132 
	`log_îr
("FaûedÅÿ∑r£ 'Poﬁ uuid': %s\n", 
eo
->
poﬁ
);

133 
	`td_vîr‹
(
td
, 
EINVAL
, "uuid_parse(eo->pool)");

134  
EINVAL
;

137 
rc
 = 
	`uuid_∑r£
(
eo
->
c⁄t
, 
co_uuid
);

138 i‡(
rc
) {

139 
	`log_îr
("FaûedÅÿ∑r£ 'C⁄àuuid': %s\n", 
eo
->
c⁄t
);

140 
	`td_vîr‹
(
td
, 
EINVAL
, "uuid_parse(eo->cont)");

141  
EINVAL
;

146 #i‡!
	`deföed
(
DAOS_API_VERSION_MAJOR
) || DAOS_API_VERSION_MAJOR < 1

147 
d_ønk_li°_t
 *
sv˛
 = 
NULL
;

149 
sv˛
 = 
	`daos_ønk_li°_∑r£
(
eo
->svcl, ":");

150 i‡(
sv˛
 =
NULL
) {

151 
	`log_îr
("FailedÅoÖarse svcl\n");

152 
	`td_vîr‹
(
td
, 
EINVAL
, "daos_rank_list_parse");

153  
EINVAL
;

156 
rc
 = 
	`daos_poﬁ_c⁄√˘
(
poﬁ_uuid
, 
NULL
, 
sv˛
, 
DAOS_PC_RW
,

157 &
poh
, &
poﬁ_öfo
, 
NULL
);

158 
	`d_ønk_li°_‰ì
(
sv˛
);

159 #ñi‡(
DAOS_API_VERSION_MAJOR
 =1 && 
DAOS_API_VERSION_MINOR
 < 3)

160 
rc
 = 
	`daos_poﬁ_c⁄√˘
(
poﬁ_uuid
, 
NULL
, 
DAOS_PC_RW
, &
poh
, &
poﬁ_öfo
,

161 
NULL
);

163 
rc
 = 
	`daos_poﬁ_c⁄√˘
(
eo
->
poﬁ
, 
NULL
, 
DAOS_PC_RW
, &
poh
, &
poﬁ_öfo
,

164 
NULL
);

166 i‡(
rc
) {

167 
	`log_îr
("FaûedÅÿc⁄√˘Åÿpoﬁ %d\n", 
rc
);

168 
	`td_vîr‹
(
td
, 
rc
, "daos_pool_connect");

169  
rc
;

173 #i‡!
	`deföed
(
DAOS_API_VERSION_MAJOR
) || \

174 (
DAOS_API_VERSION_MAJOR
 =1 && 
DAOS_API_VERSION_MINOR
 < 3)

175 
rc
 = 
	`daos_c⁄t_›í
(
poh
, 
co_uuid
, 
DAOS_COO_RW
, &
coh
, &
co_öfo
, 
NULL
);

177 
rc
 = 
	`daos_c⁄t_›í
(
poh
, 
eo
->
c⁄t
, 
DAOS_COO_RW
, &
coh
, &
co_öfo
, 
NULL
);

179 i‡(
rc
) {

180 
	`log_îr
("FaûedÅÿ›í c⁄èöî: %d\n", 
rc
);

181 
	`td_vîr‹
(
td
, 
rc
, "daos_cont_open");

182 ()
	`daos_poﬁ_disc⁄√˘
(
poh
, 
NULL
);

183  
rc
;

187 
rc
 = 
	`dfs_mou¡
(
poh
, 
coh
, 
O_RDWR
, &
dfs
);

188 i‡(
rc
) {

189 
	`log_îr
("FaûedÅÿmou¡ DFSÇame•a˚: %d\n", 
rc
);

190 
	`td_vîr‹
(
td
, 
rc
, "dfs_mount");

191 ()
	`daos_poﬁ_disc⁄√˘
(
poh
, 
NULL
);

192 ()
	`daos_c⁄t_˛o£
(
coh
, 
NULL
);

193  
rc
;

197 i‡(
eo
->
o˛ass
)

198 
cid
 = 
	`daos_o˛ass_«me2id
(
eo
->
o˛ass
);

201 
	}
}

203 
	$daos_fio_globÆ_˛ónup
()

205 
rc
;

206 
ªt
 = 0;

208 
rc
 = 
	`dfs_umou¡
(
dfs
);

209 i‡(
rc
) {

210 
	`log_îr
("ÁûedÅÿumou¡ dfs: %d\n", 
rc
);

211 
ªt
 = 
rc
;

213 
rc
 = 
	`daos_c⁄t_˛o£
(
coh
, 
NULL
);

214 i‡(
rc
) {

215 
	`log_îr
("ÁûedÅÿ˛o£ c⁄èöî: %d\n", 
rc
);

216 i‡(
ªt
 == 0)

217 
ªt
 = 
rc
;

219 
rc
 = 
	`daos_poﬁ_disc⁄√˘
(
poh
, 
NULL
);

220 i‡(
rc
) {

221 
	`log_îr
("ÁûedÅÿdisc⁄√˘Öoﬁ: %d\n", 
rc
);

222 i‡(
ªt
 == 0)

223 
ªt
 = 
rc
;

225 
rc
 = 
	`daos_föi
();

226 i‡(
rc
) {

227 
	`log_îr
("ÁûedÅÿföÆizêdaos: %d\n", 
rc
);

228 i‡(
ªt
 == 0)

229 
ªt
 = 
rc
;

232  
ªt
;

233 
	}
}

235 
	$daos_fio_£tup
(
thªad_d©a
 *
td
)

238 
	}
}

240 
	$daos_fio_öô
(
thªad_d©a
 *
td
)

242 
daos_d©a
 *
dd
;

243 
rc
 = 0;

245 
	`±hªad_muãx_lock
(&
daos_muãx
);

247 
dd
 = 
	`mÆloc
((*dd));

248 i‡(
dd
 =
NULL
) {

249 
	`log_îr
("FailedÅoállocate DAOS-private data\n");

250 
rc
 = 
ENOMEM
;

251 
out
;

254 
dd
->
queued
 = 0;

255 
dd
->
num_ios
 = 
td
->
o
.
iodïth
;

256 
dd
->
io_us
 = 
	`ˇŒoc
(dd->
num_ios
, (
io_u
 *));

257 i‡(
dd
->
io_us
 =
NULL
) {

258 
	`log_îr
("FailedÅoállocate IO queue\n");

259 
rc
 = 
ENOMEM
;

260 
out
;

264 i‡(!
daos_öôülized
) {

265 
rc
 = 
	`daos_fio_globÆ_öô
(
td
);

266 i‡(
rc
)

267 
out
;

268 
daos_öôülized
 = 
åue
;

271 
rc
 = 
	`daos_eq_¸óã
(&
dd
->
eqh
);

272 i‡(
rc
) {

273 
	`log_îr
("FaûedÅÿ¸óãÉvíàqueue: %d\n", 
rc
);

274 
	`td_vîr‹
(
td
, 
rc
, "daos_eq_create");

275 
out
;

278 
td
->
io_›s_d©a
 = 
dd
;

279 
num_thªads
++;

280 
out
:

281 i‡(
rc
) {

282 i‡(
dd
) {

283 
	`‰ì
(
dd
->
io_us
);

284 
	`‰ì
(
dd
);

286 i‡(
num_thªads
 =0 && 
daos_öôülized
) {

288 ()
	`daos_fio_globÆ_˛ónup
();

289 
daos_öôülized
 = 
Ál£
;

292 
	`±hªad_muãx_u∆ock
(&
daos_muãx
);

293  
rc
;

294 
	}
}

296 
	$daos_fio_˛ónup
(
thªad_d©a
 *
td
)

298 
daos_d©a
 *
dd
 = 
td
->
io_›s_d©a
;

299 
rc
;

301 i‡(
dd
 =
NULL
)

304 
rc
 = 
	`daos_eq_de°roy
(
dd
->
eqh
, 
DAOS_EQ_DESTROY_FORCE
);

305 i‡(
rc
 < 0) {

306 
	`log_îr
("ÁûedÅÿde°royÉvíàqueue: %d\n", 
rc
);

307 
	`td_vîr‹
(
td
, 
rc
, "daos_eq_destroy");

310 
	`‰ì
(
dd
->
io_us
);

311 
	`‰ì
(
dd
);

313 
	`±hªad_muãx_lock
(&
daos_muãx
);

314 
num_thªads
--;

315 i‡(
daos_öôülized
 && 
num_thªads
 == 0) {

316 
ªt
;

318 
ªt
 = 
	`daos_fio_globÆ_˛ónup
();

319 i‡(
ªt
 < 0 && 
rc
 == 0) {

320 
	`log_îr
("ÁûedÅÿ˛ó¿up: %d\n", 
ªt
);

321 
	`td_vîr‹
(
td
, 
ªt
, "daos_fio_global_cleanup");

323 
daos_öôülized
 = 
Ál£
;

325 
	`±hªad_muãx_u∆ock
(&
daos_muãx
);

326 
	}
}

328 
	$daos_fio_gë_fûe_size
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

330 *
fûe_«me
 = 
f
->file_name;

331 
°©
 
°buf
 = {0};

332 
rc
;

334 
	`d¥öt
(
FD_FILE
, "df†°© %s\n", 
f
->
fûe_«me
);

336 i‡(!
daos_öôülized
)

339 
rc
 = 
	`dfs_°©
(
dfs
, 
NULL
, 
fûe_«me
, &
°buf
);

340 i‡(
rc
) {

341 
	`log_îr
("FaûedÅÿ°© %s: %d\n", 
f
->
fûe_«me
, 
rc
);

342 
	`td_vîr‹
(
td
, 
rc
, "dfs_stat");

343  
rc
;

346 
f
->
ªÆ_fûe_size
 = 
°buf
.
°_size
;

348 
	}
}

350 
	$daos_fio_˛o£
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

352 
daos_d©a
 *
dd
 = 
td
->
io_›s_d©a
;

353 
rc
;

355 
	`d¥öt
(
FD_FILE
, "df†ªÀa£ %s\n", 
f
->
fûe_«me
);

357 
rc
 = 
	`dfs_ªÀa£
(
dd
->
obj
);

358 i‡(
rc
) {

359 
	`log_îr
("FaûedÅÿªÀa£ %s: %d\n", 
f
->
fûe_«me
, 
rc
);

360 
	`td_vîr‹
(
td
, 
rc
, "dfs_release");

361  
rc
;

365 
	}
}

367 
	$daos_fio_›í
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

369 
daos_d©a
 *
dd
 = 
td
->
io_›s_d©a
;

370 
daos_fio_›ti⁄s
 *
eo
 = 
td
->eo;

371 
Êags
 = 0;

372 
rc
;

374 
	`d¥öt
(
FD_FILE
, "dfs open %s (%s/%d/%d)\n",

375 
f
->
fûe_«me
, 
	`td_wrôe
(
td
Ë& !
ªad_⁄ly
 ? "rw" : "r",

376 
td
->
o
.
¸óã_⁄_›í
,Åd->o.
Ælow_¸óã
);

378 i‡(
td
->
o
.
¸óã_⁄_›í
 &&Åd->o.
Ælow_¸óã
)

379 
Êags
 |
O_CREAT
;

381 i‡(
	`td_wrôe
(
td
)) {

382 i‡(!
ªad_⁄ly
)

383 
Êags
 |
O_RDWR
;

384 i‡(
td
->
o
.
Ælow_¸óã
)

385 
Êags
 |
O_CREAT
;

386 } i‡(
	`td_ªad
(
td
)) {

387 
Êags
 |
O_RDONLY
;

390 
rc
 = 
	`dfs_›í
(
dfs
, 
NULL
, 
f
->
fûe_«me
,

391 
S_IFREG
 | 
S_IRUSR
 | 
S_IWUSR
,

392 
Êags
, 
cid
, 
eo
->
chsz
, 
NULL
, &
dd
->
obj
);

393 i‡(
rc
) {

394 
	`log_îr
("FaûedÅÿ›í %s: %d\n", 
f
->
fûe_«me
, 
rc
);

395 
	`td_vîr‹
(
td
, 
rc
, "dfs_open");

396  
rc
;

400 
	}
}

402 
	$daos_fio_u∆ök
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

404 
rc
;

406 
	`d¥öt
(
FD_FILE
, "df†ªmovê%s\n", 
f
->
fûe_«me
);

408 
rc
 = 
	`dfs_ªmove
(
dfs
, 
NULL
, 
f
->
fûe_«me
, 
Ál£
, NULL);

409 i‡(
rc
) {

410 
	`log_îr
("FaûedÅÿªmovê%s: %d\n", 
f
->
fûe_«me
, 
rc
);

411 
	`td_vîr‹
(
td
, 
rc
, "dfs_remove");

412  
rc
;

416 
	}
}

418 
	$daos_fio_övÆid©e
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

420 
	`d¥öt
(
FD_FILE
, "df†övÆid©ê%s\n", 
f
->
fûe_«me
);

422 
	}
}

424 
	$daos_fio_io_u_‰ì
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

426 
daos_iou
 *
io
 = 
io_u
->
ígöe_d©a
;

428 i‡(
io
) {

429 
io_u
->
ígöe_d©a
 = 
NULL
;

430 
	`‰ì
(
io
);

432 
	}
}

434 
	$daos_fio_io_u_öô
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

436 
daos_iou
 *
io
;

438 
io
 = 
	`mÆloc
((
daos_iou
));

439 i‡(!
io
) {

440 
	`td_vîr‹
(
td
, 
ENOMEM
, "malloc");

441  
ENOMEM
;

443 
io
->
io_u
 = io_u;

444 
io_u
->
ígöe_d©a
 = 
io
;

446 
	}
}

448 
io_u
 * 
	$daos_fio_evít
(
thªad_d©a
 *
td
, 
evít
)

450 
daos_d©a
 *
dd
 = 
td
->
io_›s_d©a
;

452  
dd
->
io_us
[
evít
];

453 
	}
}

455 
	$daos_fio_gëevíts
(
thªad_d©a
 *
td
, 
mö
,

456 
max
, c⁄° 
time•ec
 *
t
)

458 
daos_d©a
 *
dd
 = 
td
->
io_›s_d©a
;

459 
daos_evít_t
 *
evp
[
max
];

460 
evíts
 = 0;

461 
i
;

462 
rc
;

464 
evíts
 < 
mö
) {

465 
rc
 = 
	`daos_eq_pﬁl
(
dd
->
eqh
, 0, 
DAOS_EQ_NOWAIT
, 
max
, 
evp
);

466 i‡(
rc
 < 0) {

467 
	`log_îr
("Evíàpﬁ»Áûed: %d\n", 
rc
);

468 
	`td_vîr‹
(
td
, 
rc
, "daos_eq_poll");

469  
evíts
;

472 
i
 = 0; i < 
rc
; i++) {

473 
daos_iou
 *
io
;

474 
io_u
 *io_u;

476 
io
 = 
	`c⁄èöî_of
(
evp
[
i
], 
daos_iou
, 
ev
);

477 i‡(
io
->
com∂ëe
)

478 
	`log_îr
("Completion onálready completed I/O\n");

480 
io_u
 = 
io
->io_u;

481 i‡(
io
->
ev
.
ev_îr‹
)

482 
io_u
->
îr‹
 = 
io
->
ev
.
ev_îr‹
;

484 
io_u
->
ªsid
 = 0;

486 
dd
->
io_us
[
evíts
] = 
io_u
;

487 
dd
->
queued
--;

488 
	`daos_evít_föi
(&
io
->
ev
);

489 
io
->
com∂ëe
 = 
åue
;

490 
evíts
++;

494 
	`d¥öt
(
FD_IO
, "df†eq_poﬁÑëu∫ög %d (%u/%u)\n", 
evíts
, 
mö
, 
max
);

496  
evíts
;

497 
	}
}

499 
fio_q_°©us
 
	$daos_fio_queue
(
thªad_d©a
 *
td
,

500 
io_u
 *io_u)

502 
daos_d©a
 *
dd
 = 
td
->
io_›s_d©a
;

503 
daos_iou
 *
io
 = 
io_u
->
ígöe_d©a
;

504 
daos_off_t
 
off£t
 = 
io_u
->offset;

505 
rc
;

507 i‡(
dd
->
queued
 =
td
->
o
.
iodïth
)

508  
FIO_Q_BUSY
;

510 
io
->
sgl
.
sg_ƒ
 = 1;

511 
io
->
sgl
.
sg_ƒ_out
 = 0;

512 
	`d_iov_£t
(&
io
->
iov
, 
io_u
->
x„r_buf
, io_u->
x„r_buÊí
);

513 
io
->
sgl
.
sg_iovs
 = &io->
iov
;

514 
io
->
size
 = 
io_u
->
x„r_buÊí
;

516 
io
->
com∂ëe
 = 
Ál£
;

517 
rc
 = 
	`daos_evít_öô
(&
io
->
ev
, 
dd
->
eqh
, 
NULL
);

518 i‡(
rc
) {

519 
	`log_îr
("Evíàöô faûed: %d\n", 
rc
);

520 
io_u
->
îr‹
 = 
rc
;

521  
FIO_Q_COMPLETED
;

524 
io_u
->
ddú
) {

525 
DDIR_WRITE
:

526 
rc
 = 
	`dfs_wrôe
(
dfs
, 
dd
->
obj
, &
io
->
sgl
, 
off£t
, &io->
ev
);

527 i‡(
rc
) {

528 
	`log_îr
("dfs_wrôêÁûed: %d\n", 
rc
);

529 
io_u
->
îr‹
 = 
rc
;

530  
FIO_Q_COMPLETED
;

533 
DDIR_READ
:

534 
rc
 = 
	`dfs_ªad
(
dfs
, 
dd
->
obj
, &
io
->
sgl
, 
off£t
, &io->
size
,

535 &
io
->
ev
);

536 i‡(
rc
) {

537 
	`log_îr
("dfs_ªad faûed: %d\n", 
rc
);

538 
io_u
->
îr‹
 = 
rc
;

539  
FIO_Q_COMPLETED
;

542 
DDIR_SYNC
:

543 
io_u
->
îr‹
 = 0;

544  
FIO_Q_COMPLETED
;

546 
	`d¥öt
(
FD_IO
, "InvÆid IOÅy≥: %d\n", 
io_u
->
ddú
);

547 
io_u
->
îr‹
 = -
DER_INVAL
;

548  
FIO_Q_COMPLETED
;

551 
dd
->
queued
++;

552  
FIO_Q_QUEUED
;

553 
	}
}

555 
	$daos_fio_¥ï
(
thªad_d©a
 
fio_unu£d
 *
td
, 
io_u
 *io_u)

558 
	}
}

561 
FIO_STATIC
 
i€ngöe_›s
 
	gi€ngöe
 = {

562 .
«me
 = "dfs",

563 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

564 .
	gÊags
 = 
FIO_DISKLESSIO
 | 
FIO_NODISKUTIL
,

566 .
	g£tup
 = 
daos_fio_£tup
,

567 .
	göô
 = 
daos_fio_öô
,

568 .
	g¥ï
 = 
daos_fio_¥ï
,

569 .
	g˛ónup
 = 
daos_fio_˛ónup
,

571 .
	g›í_fûe
 = 
daos_fio_›í
,

572 .
	gövÆid©e
 = 
daos_fio_övÆid©e
,

573 .
	ggë_fûe_size
 = 
daos_fio_gë_fûe_size
,

574 .
	g˛o£_fûe
 = 
daos_fio_˛o£
,

575 .
	gu∆ök_fûe
 = 
daos_fio_u∆ök
,

577 .
	gqueue
 = 
daos_fio_queue
,

578 .
	ggëevíts
 = 
daos_fio_gëevíts
,

579 .
	gevít
 = 
daos_fio_evít
,

580 .
	gio_u_öô
 = 
daos_fio_io_u_öô
,

581 .
	gio_u_‰ì
 = 
daos_fio_io_u_‰ì
,

583 .
	g›ti⁄_°ru˘_size
 = (
daos_fio_›ti⁄s
),

584 .
	g›ti⁄s
 = 
›ti⁄s
,

587 
fio_öô
 
	$fio_dfs_ªgi°î
()

589 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

590 
	}
}

592 
fio_exô
 
	$fio_dfs_uƒegi°î
()

594 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

595 
	}
}

	@engines/e4defrag.c

9 
	~<sys/ty≥s.h
>

10 
	~<sys/°©.h
>

11 
	~<°dio.h
>

12 
	~<î∫o.h
>

13 
	~<f˙é.h
>

15 
	~"../fio.h
"

16 
	~"../›tgroup.h
"

18 #i‚de‡
EXT4_IOC_MOVE_EXT


19 
	#EXT4_IOC_MOVE_EXT
 
	`_IOWR
('f', 15, 
move_exã¡
)

	)

20 
	smove_exã¡
 {

21 
__u32
 
	mª£rved
;

22 
__u32
 
	md⁄‹_fd
;

23 
__u64
 
	m‹ig_°¨t
;

24 
__u64
 
	md⁄‹_°¨t
;

25 
__u64
 
	mÀn
;

26 
__u64
 
	mmoved_Àn
;

30 
	se4de‰ag_d©a
 {

31 
	md⁄‹_fd
;

32 
	mbsz
;

35 
	se4de‰ag_›ti⁄s
 {

36 *
	m∑d
;

37 
	mö∂a˚
;

38 * 
	md⁄‹_«me
;

41 
fio_›ti⁄
 
	g›ti⁄s
[] = {

43 .
«me
 = "donorname",

44 .
	g ame
 = "Donor Name",

45 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

46 .
	goff1
 = 
off£tof
(
e4de‰ag_›ti⁄s
, 
d⁄‹_«me
),

47 .
	ghñp
 = "File usedásá block donor",

48 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

49 .
	ggroup
 = 
FIO_OPT_G_E4DEFRAG
,

52 .
	g«me
 = "inplace",

53 .
	g ame
 = "In Place",

54 .
	gty≥
 = 
FIO_OPT_INT
,

55 .
	goff1
 = 
off£tof
(
e4de‰ag_›ti⁄s
, 
ö∂a˚
),

56 .
	gmövÆ
 = 0,

57 .
	gmaxvÆ
 = 1,

58 .
	ghñp
 = "Allocánd free space inside defragÉvent",

59 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

60 .
	ggroup
 = 
FIO_OPT_G_E4DEFRAG
,

63 .
	g«me
 = 
NULL
,

67 
	$fio_e4de‰ag_öô
(
thªad_d©a
 *
td
)

69 
r
, 
Àn
 = 0;

70 
e4de‰ag_›ti⁄s
 *
o
 = 
td
->
eo
;

71 
e4de‰ag_d©a
 *
ed
;

72 
°©
 
°ub
;

73 
d⁄‹_«me
[
PATH_MAX
];

75 i‡(!
o
->
d⁄‹_«me
 || !
	`°æí
(o->donor_name)) {

76 
	`log_îr
("'donorname' optionsÑequired\n");

80 
ed
 = 
	`mÆloc
((*ed));

81 i‡(!
ed
) {

82 
	`td_vîr‹
(
td
, 
ENOMEM
, "io_queue_init");

85 
	`mem£t
(
ed
, 0 ,(*ed));

87 i‡(
td
->
o
.
dúe˘‹y
)

88 
Àn
 = 
	`•rötf
(
d⁄‹_«me
, "%s/", 
td
->
o
.
dúe˘‹y
);

89 
	`•rötf
(
d⁄‹_«me
 + 
Àn
, "%s", 
o
->donor_name);

91 
ed
->
d⁄‹_fd
 = 
	`›í
(
d⁄‹_«me
, 
O_CREAT
|
O_WRONLY
, 0644);

92 i‡(
ed
->
d⁄‹_fd
 < 0) {

93 
	`td_vîr‹
(
td
, 
î∫o
, "io_queue_init");

94 
	`log_îr
("C™'à›í d⁄‹ fûê%†îr:%d\n", 
d⁄‹_«me
, 
ed
->
d⁄‹_fd
);

95 
	`‰ì
(
ed
);

99 i‡(!
o
->
ö∂a˚
) {

100 
__Àn
 = 
td
->
o
.
fûe_size_high
 -Åd->o.
°¨t_off£t
;

101 
r
 = 
	`ÁŒoˇã
(
ed
->
d⁄‹_fd
, 0, 
td
->
o
.
°¨t_off£t
, 
__Àn
);

102 i‡(
r
)

103 
îr
;

105 
r
 = 
	`f°©
(
ed
->
d⁄‹_fd
, &
°ub
);

106 i‡(
r
)

107 
îr
;

109 
ed
->
bsz
 = 
°ub
.
°_blksize
;

110 
td
->
io_›s_d©a
 = 
ed
;

112 
îr
:

113 
	`td_vîr‹
(
td
, 
î∫o
, "io_queue_init");

114 
	`˛o£
(
ed
->
d⁄‹_fd
);

115 
	`‰ì
(
ed
);

117 
	}
}

119 
	$fio_e4de‰ag_˛ónup
(
thªad_d©a
 *
td
)

121 
e4de‰ag_d©a
 *
ed
 = 
td
->
io_›s_d©a
;

122 i‡(
ed
) {

123 i‡(
ed
->
d⁄‹_fd
 >= 0)

124 
	`˛o£
(
ed
->
d⁄‹_fd
);

125 
	`‰ì
(
ed
);

127 
	}
}

130 
fio_q_°©us
 
	$fio_e4de‰ag_queue
(
thªad_d©a
 *
td
,

131 
io_u
 *io_u)

134 
ªt
;

135 
Àn
;

136 
move_exã¡
 
me
;

137 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

138 
e4de‰ag_d©a
 *
ed
 = 
td
->
io_›s_d©a
;

139 
e4de‰ag_›ti⁄s
 *
o
 = 
td
->
eo
;

141 
	`fio_ro_check
(
td
, 
io_u
);

147 i‡(
io_u
->
ddú
 !
DDIR_WRITE
) {

148 
io_u
->
îr‹
 = 
EINVAL
;

149  
FIO_Q_COMPLETED
;

152 i‡(
o
->
ö∂a˚
) {

153 
ªt
 = 
	`ÁŒoˇã
(
ed
->
d⁄‹_fd
, 0, 
io_u
->
off£t
, io_u->
x„r_buÊí
);

154 i‡(
ªt
)

155 
out
;

158 
	`mem£t
(&
me
, 0, (me));

159 
me
.
d⁄‹_fd
 = 
ed
->donor_fd;

160 
me
.
‹ig_°¨t
 = 
io_u
->
off£t
 / 
ed
->
bsz
;

161 
me
.
d⁄‹_°¨t
 = me.
‹ig_°¨t
;

162 
Àn
 = (
io_u
->
off£t
 + io_u->
x„r_buÊí
 + 
ed
->
bsz
 -1);

163 
me
.
Àn
 =Üí / 
ed
->
bsz
 - me.
‹ig_°¨t
;

165 
ªt
 = 
	`io˘l
(
f
->
fd
, 
EXT4_IOC_MOVE_EXT
, &
me
);

166 
Àn
 = 
me
.
moved_Àn
 * 
ed
->
bsz
;

168 i‡(
Àn
 > 
io_u
->
x„r_buÊí
)

169 
Àn
 = 
io_u
->
x„r_buÊí
;

171 i‡(
Àn
 !
io_u
->
x„r_buÊí
) {

172 i‡(
Àn
) {

173 
io_u
->
ªsid
 = io_u->
x„r_buÊí
 - 
Àn
;

174 
io_u
->
îr‹
 = 0;

177 
io_u
->
îr‹
 = 
EINVAL
;

180 i‡(
ªt
)

181 
io_u
->
îr‹
 = 
î∫o
;

183 i‡(
o
->
ö∂a˚
)

184 
ªt
 = 
	`·runˇã
(
ed
->
d⁄‹_fd
, 0);

185 
out
:

186 i‡(
ªt
 && !
io_u
->
îr‹
)

187 
io_u
->
îr‹
 = 
î∫o
;

189  
FIO_Q_COMPLETED
;

190 
	}
}

192 
i€ngöe_›s
 
	gi€ngöe
 = {

193 .
«me
 = "e4defrag",

194 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

195 .
	göô
 = 
fio_e4de‰ag_öô
,

196 .
	gqueue
 = 
fio_e4de‰ag_queue
,

197 .
	g›í_fûe
 = 
gíîic_›í_fûe
,

198 .
	g˛o£_fûe
 = 
gíîic_˛o£_fûe
,

199 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

200 .
	gÊags
 = 
FIO_SYNCIO
,

201 .
	g˛ónup
 = 
fio_e4de‰ag_˛ónup
,

202 .
	g›ti⁄s
 = 
›ti⁄s
,

203 .
	g›ti⁄_°ru˘_size
 = (
e4de‰ag_›ti⁄s
),

207 
fio_öô
 
	$fio_syncio_ªgi°î
()

209 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

210 
	}
}

212 
fio_exô
 
	$fio_syncio_uƒegi°î
()

214 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

215 
	}
}

	@engines/exec.c

7 
	~"../fio.h
"

8 
	~"../›tgroup.h
"

9 
	~<sig«l.h
>

11 
	sexec_›ti⁄s
 {

12 *
	m∑d
;

13 *
	m¥ogøm
;

14 *
	m¨gumíts
;

15 
	mgø˚_time
;

16 
	m°d_ªdúe˘
;

17 
pid_t
 
	mpid
;

20 
fio_›ti⁄
 
	g›ti⁄s
[] = {

22 .
«me
 = "program",

23 .
	g ame
 = "Program",

24 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

25 .
	goff1
 = 
off£tof
(
exec_›ti⁄s
, 
¥ogøm
),

26 .
	ghñp
 = "ProgramÅoÉxecute",

27 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

28 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

31 .
	g«me
 = "arguments",

32 .
	g ame
 = "Arguments",

33 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

34 .
	goff1
 = 
off£tof
(
exec_›ti⁄s
, 
¨gumíts
),

35 .
	ghñp
 = "ArgumentsÅoÖass",

36 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

37 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

40 .
	g«me
 = "grace_time",

41 .
	g ame
 = "GraceÅime",

42 .
	gty≥
 = 
FIO_OPT_INT
,

43 .
	gmövÆ
 = 0,

44 .
	gdef
 = "1",

45 .
	goff1
 = 
off£tof
(
exec_›ti⁄s
, 
gø˚_time
),

46 .
	ghñp
 = "GraceÅime before sendingá SIGKILL",

47 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

48 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

51 .
	g«me
 = "std_redirect",

52 .
	g ame
 = "StdÑedirect",

53 .
	gty≥
 = 
FIO_OPT_BOOL
,

54 .
	gdef
 = "1",

55 .
	goff1
 = 
off£tof
(
exec_›ti⁄s
, 
°d_ªdúe˘
),

56 .
	ghñp
 = "Redirect stdout & stderrÅo files",

57 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

58 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

61 .
	g«me
 = 
NULL
,

65 *
	$°r_ª∂a˚
(*
‹ig
, c⁄° *
ªp
, c⁄° *
wôh
)

73 *
ªsu…
, *
ö£π
, *
tmp
;

74 
Àn_ªp
, 
Àn_wôh
, 
Àn_‰⁄t
, 
cou¡
;

77 i‡(!
‹ig
 || !
ªp
)

78  
‹ig
;

80 
Àn_ªp
 = 
	`°æí
(
ªp
);

81 i‡(
Àn_ªp
 == 0)

82  
‹ig
;

84 i‡(!
wôh
)

85 
wôh
 = "";

86 
Àn_wôh
 = 
	`°æí
(
wôh
);

88 
ö£π
 = 
‹ig
;

89 
cou¡
 = 0; (
tmp
 = 
	`°r°r
(
ö£π
, 
ªp
)); ++count) {

90 
ö£π
 = 
tmp
 + 
Àn_ªp
;

93 
tmp
 = 
ªsu…
 = 
	`mÆloc
(
	`°æí
(
‹ig
Ë+ (
Àn_wôh
 - 
Àn_ªp
Ë* 
cou¡
 + 1);

95 i‡(!
ªsu…
)

96  
‹ig
;

98 
cou¡
--) {

99 
ö£π
 = 
	`°r°r
(
‹ig
, 
ªp
);

100 
Àn_‰⁄t
 = 
ö£π
 - 
‹ig
;

101 
tmp
 = 
	`°∫˝y
—mp, 
‹ig
, 
Àn_‰⁄t
) +Üen_front;

102 
tmp
 = 
	`°r˝y
—mp, 
wôh
Ë+ 
Àn_wôh
;

103 
‹ig
 +
Àn_‰⁄t
 + 
Àn_ªp
;

105 
	`°r˝y
(
tmp
, 
‹ig
);

106  
ªsu…
;

107 
	}
}

109 *
	$ex∑nd_v¨übÀs
(
thªad_›ti⁄s
 *
o
, *
¨gumíts
)

111 
°r
[16];

112 *
ex∑nded_ru¡ime
, *
ex∑nded_«me
;

113 
	`¢¥ötf
(
°r
, (°r), "%Œd", 
o
->
timeout
 / 1000000);

116 
ex∑nded_ru¡ime
 = 
	`°r_ª∂a˚
(
¨gumíts
, "%r", 
°r
);

119 
ex∑nded_«me
 = 
	`°r_ª∂a˚
(
ex∑nded_ru¡ime
, "%n", 
o
->
«me
);

121 
	`‰ì
(
ex∑nded_ru¡ime
);

122  
ex∑nded_«me
;

123 
	}
}

125 
	$exec_background
(
thªad_›ti⁄s
 *
o
, 
exec_›ti⁄s
 *
eo
)

127 *
outfûíame
 = 
NULL
, *
îrfûíame
 = NULL;

128 
outfd
 = 0, 
îrfd
 = 0;

129 
pid_t
 
pid
;

130 *
ex∑nded_¨gumíts
 = 
NULL
;

132 **
¨gumíts_¨øy
 = 
NULL
;

133 *
p
;

134 *
exec_cmd
 = 
NULL
;

135 
size_t
 
¨gumíts_nb_ôems
 = 0, 
q
;

137 i‡(
	`a•rötf
(&
outfûíame
, "%s.°dout", 
o
->
«me
) < 0)

140 i‡(
	`a•rötf
(&
îrfûíame
, "%s.°dîr", 
o
->
«me
) < 0) {

141 
	`‰ì
(
outfûíame
);

146 
ex∑nded_¨gumíts
 = 
	`ex∑nd_v¨übÀs
(
o
, 
eo
->
¨gumíts
);

148 i‡(
eo
->
°d_ªdúe˘
) {

149 
	`log_öfo
("%s : Saving output of %s %s : stdout=%s stderr=%s\n",

150 
o
->
«me
, 
eo
->
¥ogøm
, 
ex∑nded_¨gumíts
, 
outfûíame
,

151 
îrfûíame
);

154 
outfd
 = 
	`›í
(
outfûíame
, 
O_CREAT
 | 
O_WRONLY
 | 
O_TRUNC
, 0644);

155 i‡(
outfd
 < 0) {

156 
	`log_îr
("fio: cannot open output file %s : %s\n",

157 
outfûíame
, 
	`°ªº‹
(
î∫o
));

158 
	`‰ì
(
outfûíame
);

159 
	`‰ì
(
îrfûíame
);

160 
	`‰ì
(
ex∑nded_¨gumíts
);

164 
îrfd
 = 
	`›í
(
îrfûíame
, 
O_CREAT
 | 
O_WRONLY
 | 
O_TRUNC
, 0644);

165 i‡(
îrfd
 < 0) {

166 
	`log_îr
("fio: cannot open output file %s : %s\n",

167 
îrfûíame
, 
	`°ªº‹
(
î∫o
));

168 
	`‰ì
(
outfûíame
);

169 
	`‰ì
(
îrfûíame
);

170 
	`‰ì
(
ex∑nded_¨gumíts
);

171 
	`˛o£
(
outfd
);

175 
	`log_öfo
("%s : Running %s %s\n",

176 
o
->
«me
, 
eo
->
¥ogøm
, 
ex∑nded_¨gumíts
);

179 
pid
 = 
	`f‹k
();

182 i‡(
pid
 > 0) {

183 
eo
->
pid
 =Öid;

184 i‡(
eo
->
°d_ªdúe˘
) {

186 
	`˛o£
(
outfd
);

187 
	`˛o£
(
îrfd
);

188 
	`‰ì
(
outfûíame
);

189 
	`‰ì
(
îrfûíame
);

191 
	`‰ì
(
ex∑nded_¨gumíts
);

196 i‡(
pid
 < 0) {

197 
	`log_îr
("fio: f‹kög faûed %†\n", 
	`°ªº‹
(
î∫o
));

198 i‡(
eo
->
°d_ªdúe˘
) {

199 
	`˛o£
(
outfd
);

200 
	`˛o£
(
îrfd
);

201 
	`‰ì
(
outfûíame
);

202 
	`‰ì
(
îrfûíame
);

204 
	`‰ì
(
ex∑nded_¨gumíts
);

209 i‡(
pid
 == 0) {

210 i‡(
eo
->
°d_ªdúe˘
) {

212 
	`dup2
(
outfd
, 1);

214 
	`dup2
(
îrfd
, 2);

215 
	`˛o£
(
outfd
);

216 
	`˛o£
(
îrfd
);

217 
	`‰ì
(
outfûíame
);

218 
	`‰ì
(
îrfûíame
);

228 i‡(
ex∑nded_¨gumíts
 !
NULL
) {

229 i‡(
	`a•rötf
(&
exec_cmd
, "%†%s", 
eo
->
¥ogøm
, 
ex∑nded_¨gumíts
) < 0) {

230 
	`‰ì
(
ex∑nded_¨gumíts
);

234 i‡(
	`a•rötf
(&
exec_cmd
, "%s", 
eo
->
¥ogøm
) < 0)

242 
p
 = 
exec_cmd
;

244 
p
 +
	`°r•n
(p, " ");

246 i‡(!(
q
 = 
	`°rc•n
(
p
, " ")))

249 i‡(
q
) {

250 
¨gumíts_¨øy
 =

251 
	`ªÆloc
(
¨gumíts_¨øy
,

252 (
¨gumíts_nb_ôems
 +

254 
¨gumíts_¨øy
[
¨gumíts_nb_ôems
] =

255 
	`mÆloc
(
q
 + 1);

256 
	`°∫˝y
(
¨gumíts_¨øy
[
¨gumíts_nb_ôems
], 
p
,

257 
q
);

258 
¨gumíts_¨øy
[
¨gumíts_nb_ôems
][
q
] = 0;

259 
¨gumíts_nb_ôems
++;

260 
p
 +
q
;

265 
¨gumíts_¨øy
 =

266 
	`ªÆloc
(
¨gumíts_¨øy
,

267 (
¨gumíts_nb_ôems
 + 1) * (*));

268 
¨gumíts_¨øy
[
¨gumíts_nb_ôems
] = 
NULL
;

274 
	`execvp
(
¨gumíts_¨øy
[0],árguments_array);

278 i‡(
ex∑nded_¨gumíts
)

279 
	`‰ì
(
ex∑nded_¨gumíts
);

280 i‡(
¨gumíts_¨øy
)

281 
	`‰ì
(
¨gumíts_¨øy
);

283 
	}
}

285 
fio_q_°©us


286 
	$fio_exec_queue
(
thªad_d©a
 *
td
, 
io_u
 
fio_unu£d
 * io_u)

288 
thªad_›ti⁄s
 *
o
 = &
td
->o;

289 
exec_›ti⁄s
 *
eo
 = 
td
->eo;

292 i‡(
eo
->
pid
 == -1) {

293 
	`exec_background
(
o
, 
eo
);

300 
	`u¶ìp
(
o
->
thöktime
);

301 i‡(
	`utime_sö˚_now
(&
td
->
°¨t
Ë> 
o
->
timeout
) {

303 
	`kûl
(
eo
->
pid
, 
SIGTERM
);

308 
	`¶ìp
(
eo
->
gø˚_time
);

312  
FIO_Q_COMPLETED
;

313 
	}
}

315 
	$fio_exec_öô
(
thªad_d©a
 *
td
)

317 
thªad_›ti⁄s
 *
o
 = &
td
->o;

318 
exec_›ti⁄s
 *
eo
 = 
td
->eo;

319 
td_¥evious_°©e
;

321 
eo
->
pid
 = -1;

323 i‡(!
eo
->
¥ogøm
) {

324 
	`td_vmsg
(
td
, 
EINVAL
,

330 
	`log_öfo
("%s :Örogram=%s,árguments=%s\n",

331 
td
->
o
.
«me
, 
eo
->
¥ogøm
,Éo->
¨gumíts
);

334 
td_¥evious_°©e
 = 
td
->
run°©e
;

341 
	`td_£t_run°©e
(
td
, 
TD_SETTING_UP
);

346 
o
->
thöktime_blocks
 = 1;

347 
o
->
thöktime_blocks_ty≥
 = 
THINKTIME_BLOCKS_TYPE_COMPLETE
;

348 
o
->
thöktime_•ö
 = 0;

350 
o
->
thöktime
 = 50000;

352 
o
->
ƒ_fûes
 = o->
›í_fûes
 = 1;

355 
	`td_£t_run°©e
(
td
, 
td_¥evious_°©e
);

357 
	}
}

359 
	$fio_exec_˛ónup
(
thªad_d©a
 *
td
)

361 
exec_›ti⁄s
 *
eo
 = 
td
->eo;

363 i‡(
eo
->
pid
 > 0)

364 
	`kûl
(
eo
->
pid
, 
SIGKILL
);

365 
	}
}

368 
	$fio_exec_›í
(
thªad_d©a
 
fio_unu£d
 * 
td
,

369 
fio_fûe
 
fio_unu£d
 * 
f
)

372 
	}
}

374 
i€ngöe_›s
 
	gi€ngöe
 = {

375 .
«me
 = "exec",

376 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

377 .
	gqueue
 = 
fio_exec_queue
,

378 .
	göô
 = 
fio_exec_öô
,

379 .
	g˛ónup
 = 
fio_exec_˛ónup
,

380 .
	g›í_fûe
 = 
fio_exec_›í
,

381 .
	gÊags
 = 
FIO_SYNCIO
 | 
FIO_DISKLESSIO
 | 
FIO_NOIO
,

382 .
	g›ti⁄s
 = 
›ti⁄s
,

383 .
	g›ti⁄_°ru˘_size
 = (
exec_›ti⁄s
),

386 
fio_öô
 
	$fio_exec_ªgi°î
()

388 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

389 
	}
}

391 
fio_exô
 
	$fio_exec_uƒegi°î
()

393 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

394 
	}
}

	@engines/falloc.c

11 
	~<°dio.h
>

12 
	~<î∫o.h
>

13 
	~<f˙é.h
>

15 
	~"../fio.h
"

16 
	~"../fûehash.h
"

22 
	$›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

24 
‰om_hash
 = 0;

26 
	`d¥öt
(
FD_FILE
, "fd o≥¿%s\n", 
f
->
fûe_«me
);

28 i‡(
f
->
fûëy≥
 !
FIO_TYPE_FILE
 && f->fûëy≥ !
FIO_TYPE_BLOCK
) {

29 
	`log_îr
("fio: only filesánd blockdeváre supported fallocate \n");

32 i‡(!
	`°rcmp
(
f
->
fûe_«me
, "-")) {

33 
	`log_îr
("fio: can'tÑead/writeÅo stdin/out\n");

37 
›í_agaö
:

38 
‰om_hash
 = 
	`fûe_lookup_›í
(
f
, 
O_CREAT
|
O_RDWR
);

40 i‡(
f
->
fd
 == -1) {

41 
buf
[
FIO_VERROR_SIZE
];

42 
e
 = 
î∫o
;

44 
	`¢¥ötf
(
buf
, (buf), "›í(%s)", 
f
->
fûe_«me
);

45 
	`td_vîr‹
(
td
, 
e
, 
buf
);

48 i‡(!
‰om_hash
 && 
f
->
fd
 != -1) {

49 i‡(
	`add_fûe_hash
(
f
)) {

50 
fio_unu£d
 
ªt
;

55 
ªt
 = 
	`gíîic_˛o£_fûe
(
td
, 
f
);

56 
›í_agaö
;

61 
	}
}

63 #i‚de‡
FALLOC_FL_KEEP_SIZE


64 
	#FALLOC_FL_KEEP_SIZE
 0x01

	)

66 #i‚de‡
FALLOC_FL_PUNCH_HOLE


67 
	#FALLOC_FL_PUNCH_HOLE
 0x02

	)

70 
fio_q_°©us
 
	$fio_ÁŒoˇã_queue
(
thªad_d©a
 *
td
,

71 
io_u
 *io_u)

73 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

74 
ªt
;

75 
Êags
 = 0;

77 
	`fio_ro_check
(
td
, 
io_u
);

79 i‡(
io_u
->
ddú
 =
DDIR_READ
)

80 
Êags
 = 
FALLOC_FL_KEEP_SIZE
;

81 i‡(
io_u
->
ddú
 =
DDIR_WRITE
)

82 
Êags
 = 0;

83 i‡(
io_u
->
ddú
 =
DDIR_TRIM
)

84 
Êags
 = 
FALLOC_FL_PUNCH_HOLE
 | 
FALLOC_FL_KEEP_SIZE
;

86 
ªt
 = 
	`ÁŒoˇã
(
f
->
fd
, 
Êags
, 
io_u
->
off£t
, io_u->
x„r_buÊí
);

88 i‡(
ªt
)

89 
io_u
->
îr‹
 = 
î∫o
;

91  
FIO_Q_COMPLETED
;

92 
	}
}

94 
i€ngöe_›s
 
	gi€ngöe
 = {

95 .
«me
 = "falloc",

96 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

97 .
	gqueue
 = 
fio_ÁŒoˇã_queue
,

98 .
	g›í_fûe
 = 
›í_fûe
,

99 .
	g˛o£_fûe
 = 
gíîic_˛o£_fûe
,

100 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

101 .
	gÊags
 = 
FIO_SYNCIO


104 
fio_öô
 
	$fio_syncio_ªgi°î
()

106 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

107 
	}
}

109 
fio_exô
 
	$fio_syncio_uƒegi°î
()

111 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

112 
	}
}

	@engines/fileoperations.c

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<f˙é.h
>

10 
	~<î∫o.h
>

11 
	~<sys/ty≥s.h
>

12 
	~<sys/°©.h
>

13 
	~<uni°d.h
>

14 
	~"../fio.h
"

15 
	~"../›tgroup.h
"

16 
	~"../o¶ib/°©x.h
"

19 
	sfc_d©a
 {

20 
fio_ddú
 
	m°©_ddú
;

23 
	sfûe°©_›ti⁄s
 {

24 *
	m∑d
;

25 
	m°©_ty≥
;

29 
	mFIO_FILESTAT_STAT
 = 1,

30 
	mFIO_FILESTAT_LSTAT
 = 2,

31 
	mFIO_FILESTAT_STATX
 = 3,

34 
fio_›ti⁄
 
	g›ti⁄s
[] = {

36 .
«me
 = "stat_type",

37 .
	g ame
 = "stat_type",

38 .
	gty≥
 = 
FIO_OPT_STR
,

39 .
	goff1
 = 
off£tof
(
fûe°©_›ti⁄s
, 
°©_ty≥
),

40 .
	ghñp
 = "Specify stat system callÅypeÅo measureÜookup/getattrÖerformance",

41 .
	gdef
 = "stat",

42 .
	gposvÆ
 = {

43 { .
ivÆ
 = "stat",

44 .
	govÆ
 = 
FIO_FILESTAT_STAT
,

45 .
	ghñp
 = "Use stat(2)",

47 { .
	givÆ
 = "lstat",

48 .
	govÆ
 = 
FIO_FILESTAT_LSTAT
,

49 .
	ghñp
 = "UseÜstat(2)",

51 { .
	givÆ
 = "statx",

52 .
	govÆ
 = 
FIO_FILESTAT_STATX
,

53 .
	ghñp
 = "Use statx(2) ifÉxists",

56 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

57 .
	ggroup
 = 
FIO_OPT_G_FILESTAT
,

60 .
	g«me
 = 
NULL
,

65 
	$›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

67 
time•ec
 
°¨t
;

68 
do_œt
 = !
td
->
o
.
dißbÀ_œt
;

70 
	`d¥öt
(
FD_FILE
, "fd o≥¿%s\n", 
f
->
fûe_«me
);

72 i‡(
f
->
fûëy≥
 !
FIO_TYPE_FILE
) {

73 
	`log_îr
("fio: only filesáre supported\n");

76 i‡(!
	`°rcmp
(
f
->
fûe_«me
, "-")) {

77 
	`log_îr
("fio: can'tÑead/writeÅo stdin/out\n");

81 i‡(
do_œt
)

82 
	`fio_gëtime
(&
°¨t
, 
NULL
);

84 
f
->
fd
 = 
	`›í
(f->
fûe_«me
, 
O_CREAT
|
O_RDWR
, 0600);

86 i‡(
f
->
fd
 == -1) {

87 
buf
[
FIO_VERROR_SIZE
];

88 
e
 = 
î∫o
;

90 
	`¢¥ötf
(
buf
, (buf), "›í(%s)", 
f
->
fûe_«me
);

91 
	`td_vîr‹
(
td
, 
e
, 
buf
);

95 i‡(
do_œt
) {

96 
fc_d©a
 *
d©a
 = 
td
->
io_›s_d©a
;

97 
uöt64_t
 
n£c
;

99 
n£c
 = 
	`¡ime_sö˚_now
(&
°¨t
);

100 
	`add_˛©_ßm∂e
(
td
, 
d©a
->
°©_ddú
, 
n£c
, 0, 0, 0, 0);

104 
	}
}

106 
	$°©_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

108 
fûe°©_›ti⁄s
 *
o
 = 
td
->
eo
;

109 
time•ec
 
°¨t
;

110 
do_œt
 = !
td
->
o
.
dißbÀ_œt
;

111 
°©
 
°©buf
;

112 #i‚de‡
WIN32


113 
°©x
 
°©xbuf
;

114 *
ab•©h
;

116 
ªt
;

118 
	`d¥öt
(
FD_FILE
, "fd sèà%s\n", 
f
->
fûe_«me
);

120 i‡(
f
->
fûëy≥
 !
FIO_TYPE_FILE
) {

121 
	`log_îr
("fio: only filesáre supported\n");

124 i‡(!
	`°rcmp
(
f
->
fûe_«me
, "-")) {

125 
	`log_îr
("fio: can'tÑead/writeÅo stdin/out\n");

129 i‡(
do_œt
)

130 
	`fio_gëtime
(&
°¨t
, 
NULL
);

132 
o
->
°©_ty≥
) {

133 
FIO_FILESTAT_STAT
:

134 
ªt
 = 
	`°©
(
f
->
fûe_«me
, &
°©buf
);

136 
FIO_FILESTAT_LSTAT
:

137 
ªt
 = 
	`l°©
(
f
->
fûe_«me
, &
°©buf
);

139 
FIO_FILESTAT_STATX
:

140 #i‚de‡
WIN32


141 
ab•©h
 = 
	`ªÆ∑th
(
f
->
fûe_«me
, 
NULL
);

142 i‡(
ab•©h
) {

143 
ªt
 = 
	`°©x
(-1, 
ab•©h
, 0, 
STATX_ALL
, &
°©xbuf
);

144 
	`‰ì
(
ab•©h
);

146 
ªt
 = -1;

148 
ªt
 = -1;

152 
ªt
 = -1;

156 i‡(
ªt
 == -1) {

157 
buf
[
FIO_VERROR_SIZE
];

158 
e
 = 
î∫o
;

160 
	`¢¥ötf
(
buf
, (buf), "°©(%sËty≥=%u", 
f
->
fûe_«me
,

161 
o
->
°©_ty≥
);

162 
	`td_vîr‹
(
td
, 
e
, 
buf
);

166 i‡(
do_œt
) {

167 
fc_d©a
 *
d©a
 = 
td
->
io_›s_d©a
;

168 
uöt64_t
 
n£c
;

170 
n£c
 = 
	`¡ime_sö˚_now
(&
°¨t
);

171 
	`add_˛©_ßm∂e
(
td
, 
d©a
->
°©_ddú
, 
n£c
, 0, 0, 0, 0);

175 
	}
}

178 
	$dñëe_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

180 
time•ec
 
°¨t
;

181 
do_œt
 = !
td
->
o
.
dißbÀ_œt
;

182 
ªt
;

184 
	`d¥öt
(
FD_FILE
, "fd dñëê%s\n", 
f
->
fûe_«me
);

186 i‡(
f
->
fûëy≥
 !
FIO_TYPE_FILE
) {

187 
	`log_îr
("fio: only filesáre supported\n");

190 i‡(!
	`°rcmp
(
f
->
fûe_«me
, "-")) {

191 
	`log_îr
("fio: can'tÑead/writeÅo stdin/out\n");

195 i‡(
do_œt
)

196 
	`fio_gëtime
(&
°¨t
, 
NULL
);

198 
ªt
 = 
	`u∆ök
(
f
->
fûe_«me
);

200 i‡(
ªt
 == -1) {

201 
buf
[
FIO_VERROR_SIZE
];

202 
e
 = 
î∫o
;

204 
	`¢¥ötf
(
buf
, (buf), "dñëe(%s)", 
f
->
fûe_«me
);

205 
	`td_vîr‹
(
td
, 
e
, 
buf
);

209 i‡(
do_œt
) {

210 
fc_d©a
 *
d©a
 = 
td
->
io_›s_d©a
;

211 
uöt64_t
 
n£c
;

213 
n£c
 = 
	`¡ime_sö˚_now
(&
°¨t
);

214 
	`add_˛©_ßm∂e
(
td
, 
d©a
->
°©_ddú
, 
n£c
, 0, 0, 0, 0);

218 
	}
}

220 
	$övÆid©e_do_nŸhög
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

224 
	}
}

226 
fio_q_°©us
 
	$queue_io
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

228  
FIO_Q_COMPLETED
;

229 
	}
}

236 
	$gë_fûe_size
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

238 
f
->
ªÆ_fûe_size
 = 
	`td_mö_bs
(
td
);

240 
	}
}

242 
	$öô
(
thªad_d©a
 *
td
)

244 
fc_d©a
 *
d©a
;

246 
d©a
 = 
	`ˇŒoc
(1, (*data));

248 i‡(
	`td_ªad
(
td
))

249 
d©a
->
°©_ddú
 = 
DDIR_READ
;

250 i‡(
	`td_wrôe
(
td
))

251 
d©a
->
°©_ddú
 = 
DDIR_WRITE
;

253 
td
->
io_›s_d©a
 = 
d©a
;

255 
	}
}

257 
	$˛ónup
(
thªad_d©a
 *
td
)

259 
fc_d©a
 *
d©a
 = 
td
->
io_›s_d©a
;

261 
	`‰ì
(
d©a
);

262 
	}
}

264 
i€ngöe_›s
 
	gi€ngöe_fûe¸óã
 = {

265 .
«me
 = "filecreate",

266 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

267 .
	göô
 = 
öô
,

268 .
	g˛ónup
 = 
˛ónup
,

269 .
	gqueue
 = 
queue_io
,

270 .
	ggë_fûe_size
 = 
gë_fûe_size
,

271 .
	g›í_fûe
 = 
›í_fûe
,

272 .
	g˛o£_fûe
 = 
gíîic_˛o£_fûe
,

273 .
	gÊags
 = 
FIO_DISKLESSIO
 | 
FIO_SYNCIO
 | 
FIO_FAKEIO
 |

274 
FIO_NOSTATS
 | 
FIO_NOFILEHASH
,

277 
i€ngöe_›s
 
	gi€ngöe_fûe°©
 = {

278 .
«me
 = "filestat",

279 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

280 .
	göô
 = 
öô
,

281 .
	g˛ónup
 = 
˛ónup
,

282 .
	gqueue
 = 
queue_io
,

283 .
	gövÆid©e
 = 
övÆid©e_do_nŸhög
,

284 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

285 .
	g›í_fûe
 = 
°©_fûe
,

286 .
	gÊags
 = 
FIO_SYNCIO
 | 
FIO_FAKEIO
 |

287 
FIO_NOSTATS
 | 
FIO_NOFILEHASH
,

288 .
	g›ti⁄s
 = 
›ti⁄s
,

289 .
	g›ti⁄_°ru˘_size
 = (
fûe°©_›ti⁄s
),

292 
i€ngöe_›s
 
	gi€ngöe_fûedñëe
 = {

293 .
«me
 = "filedelete",

294 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

295 .
	göô
 = 
öô
,

296 .
	gövÆid©e
 = 
övÆid©e_do_nŸhög
,

297 .
	g˛ónup
 = 
˛ónup
,

298 .
	gqueue
 = 
queue_io
,

299 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

300 .
	g›í_fûe
 = 
dñëe_fûe
,

301 .
	gÊags
 = 
FIO_SYNCIO
 | 
FIO_FAKEIO
 |

302 
FIO_NOSTATS
 | 
FIO_NOFILEHASH
,

306 
fio_öô
 
	$fio_fûe›î©i⁄s_ªgi°î
()

308 
	`ªgi°î_i€ngöe
(&
i€ngöe_fûe¸óã
);

309 
	`ªgi°î_i€ngöe
(&
i€ngöe_fûe°©
);

310 
	`ªgi°î_i€ngöe
(&
i€ngöe_fûedñëe
);

311 
	}
}

313 
fio_exô
 
	$fio_fûe›î©i⁄s_uƒegi°î
()

315 
	`uƒegi°î_i€ngöe
(&
i€ngöe_fûe¸óã
);

316 
	`uƒegi°î_i€ngöe
(&
i€ngöe_fûe°©
);

317 
	`uƒegi°î_i€ngöe
(&
i€ngöe_fûedñëe
);

318 
	}
}

	@engines/ftruncate.c

9 
	~<î∫o.h
>

10 
	~<uni°d.h
>

12 
	~"../fio.h
"

14 
fio_q_°©us
 
	$fio_·runˇã_queue
(
thªad_d©a
 *
td
,

15 
io_u
 *io_u)

17 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

18 
ªt
;

20 
	`fio_ro_check
(
td
, 
io_u
);

22 i‡(
io_u
->
ddú
 !
DDIR_WRITE
) {

23 
io_u
->
îr‹
 = 
EINVAL
;

24  
FIO_Q_COMPLETED
;

27 
ªt
 = 
	`·runˇã
(
f
->
fd
, 
io_u
->
off£t
);

28 i‡(
ªt
)

29 
io_u
->
îr‹
 = 
î∫o
;

31  
FIO_Q_COMPLETED
;

32 
	}
}

34 
i€ngöe_›s
 
	gi€ngöe
 = {

35 .
«me
 = "ftruncate",

36 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

37 .
	gqueue
 = 
fio_·runˇã_queue
,

38 .
	g›í_fûe
 = 
gíîic_›í_fûe
,

39 .
	g˛o£_fûe
 = 
gíîic_˛o£_fûe
,

40 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

41 .
	gÊags
 = 
FIO_SYNCIO
 | 
FIO_FAKEIO


44 
fio_öô
 
	$fio_syncio_ªgi°î
()

46 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

47 
	}
}

49 
fio_exô
 
	$fio_syncio_uƒegi°î
()

51 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

52 
	}
}

	@engines/gfapi.h

1 
	~<glu°îfs/≠i/glfs.h
>

2 
	~"../fio.h
"

4 
	sgf_›ti⁄s
 {

5 *
	m∑d
;

6 *
	mgf_vﬁ
;

7 *
	mgf_brick
;

8 
	mgf_sögÀ_ö°™˚
;

11 
	sgf_d©a
 {

12 
glfs_t
 *
	mfs
;

13 
glfs_fd_t
 *
	mfd
;

14 
io_u
 **
	maio_evíts
;

17 
fio_›ti⁄
 
gÁpi_›ti⁄s
[];

18 
fio_gf_£tup
(
thªad_d©a
 *
td
);

19 
fio_gf_˛ónup
(
thªad_d©a
 *
td
);

20 
fio_gf_gë_fûe_size
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
);

21 
fio_gf_›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
);

22 
fio_gf_˛o£_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
);

23 
fio_gf_u∆ök_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
);

	@engines/glusterfs.c

8 
	~"gÁpi.h
"

9 
	~"../›tgroup.h
"

11 
fio_›ti⁄
 
	ggÁpi_›ti⁄s
[] = {

13 .
«me
 = "volume",

14 .
	g ame
 = "Glusterfs volume",

15 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

16 .
	ghñp
 = "Name ofÅhe Glusterfs volume",

17 .
	goff1
 = 
off£tof
(
gf_›ti⁄s
, 
gf_vﬁ
),

18 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

19 .
	ggroup
 = 
FIO_OPT_G_GFAPI
,

22 .
	g«me
 = "brick",

23 .
	g ame
 = "Glusterfs brickÇame",

24 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

25 .
	ghñp
 = "Name ofÅhe Glusterfs brickÅo connect",

26 .
	goff1
 = 
off£tof
(
gf_›ti⁄s
, 
gf_brick
),

27 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

28 .
	ggroup
 = 
FIO_OPT_G_GFAPI
,

31 .
	g«me
 = "single-instance",

32 .
	g ame
 = "Single glusterfs instance",

33 .
	gty≥
 = 
FIO_OPT_BOOL
,

34 .
	ghñp
 = "Only one glusterfs instance",

35 .
	goff1
 = 
off£tof
(
gf_›ti⁄s
, 
gf_sögÀ_ö°™˚
),

36 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

37 .
	ggroup
 = 
FIO_OPT_G_GFAPI
,

40 .
	g«me
 = 
NULL
,

44 
	sglfs_öfo
 {

45 
Êi°_hód
 
	mli°
;

46 *
	mvﬁume
;

47 *
	mbrick
;

48 
glfs_t
 *
	mfs
;

49 
	mªfcou¡
;

52 
±hªad_muãx_t
 
	gglfs_lock
 = 
PTHREAD_MUTEX_INITIALIZER
;

53 
FLIST_HEAD
(
glfs_li°_hód
);

55 
glfs_t
 *
	$fio_gf_√w_fs
(*
vﬁume
, *
brick
)

57 
r
 = 0;

58 
glfs_t
 *
fs
;

59 
°©
 
sb
 = { 0, };

61 
fs
 = 
	`glfs_√w
(
vﬁume
);

62 i‡(!
fs
) {

63 
	`log_îr
("glfs_new failed.\n");

64 
out
;

66 
	`glfs_£t_loggög
(
fs
, "/tmp/fio_gfapi.log", 7);

68 
r
 = 
	`glfs_£t_vﬁfûe_£rvî
(
fs
, "t˝", 
brick
, 0);

69 i‡(
r
) {

70 
	`log_îr
("glfs_set_volfile_server failed.\n");

71 
out
;

73 
r
 = 
	`glfs_öô
(
fs
);

74 i‡(
r
) {

75 
	`log_îr
("glfs_init failed. Is glusterdÑunning on brick?\n");

76 
out
;

78 
	`¶ìp
(2);

79 
r
 = 
	`glfs_l°©
(
fs
, ".", &
sb
);

80 i‡(
r
) {

81 
	`log_îr
("glfs_lstat failed.\n");

82 
out
;

85 
out
:

86 i‡(
r
) {

87 
	`glfs_föi
(
fs
);

88 
fs
 = 
NULL
;

90  
fs
;

91 
	}
}

93 
glfs_t
 *
	$fio_gf_gë_glfs
(
gf_›ti⁄s
 *
›t
,

94 *
vﬁume
, *
brick
)

96 
glfs_öfo
 *
glfs
 = 
NULL
;

97 
glfs_öfo
 *
tmp
;

98 
Êi°_hód
 *
íåy
;

100 i‡(!
›t
->
gf_sögÀ_ö°™˚
)

101  
	`fio_gf_√w_fs
(
vﬁume
, 
brick
);

103 
	`±hªad_muãx_lock
 (&
glfs_lock
);

105 
	`Êi°_f‹_óch
(
íåy
, &
glfs_li°_hód
) {

106 
tmp
 = 
	`Êi°_íåy
(
íåy
, 
glfs_öfo
, 
li°
);

107 i‡(!
	`°rcmp
(
vﬁume
, 
tmp
->volume) &&

108 !
	`°rcmp
(
brick
, 
tmp
->brick)) {

109 
glfs
 = 
tmp
;

114 i‡(
glfs
) {

115 
glfs
->
ªfcou¡
++;

117 
glfs
 = 
	`mÆloc
((*glfs));

118 i‡(!
glfs
)

119 
out
;

120 
	`INIT_FLIST_HEAD
(&
glfs
->
li°
);

121 
glfs
->
ªfcou¡
 = 0;

122 
glfs
->
vﬁume
 = 
	`°rdup
(volume);

123 
glfs
->
brick
 = 
	`°rdup
(brick);

124 
glfs
->
fs
 = 
	`fio_gf_√w_fs
(
vﬁume
, 
brick
);

125 i‡(!
glfs
->
fs
) {

126 
	`‰ì
(
glfs
);

127 
glfs
 = 
NULL
;

128 
out
;

131 
	`Êi°_add_èû
(&
glfs
->
li°
, &
glfs_li°_hód
);

132 
glfs
->
ªfcou¡
 = 1;

135 
out
:

136 
	`±hªad_muãx_u∆ock
 (&
glfs_lock
);

138 i‡(
glfs
)

139  
glfs
->
fs
;

140  
NULL
;

141 
	}
}

143 
	$fio_gf_put_glfs
(
gf_›ti⁄s
 *
›t
, 
glfs_t
 *
fs
)

145 
glfs_öfo
 *
glfs
 = 
NULL
;

146 
glfs_öfo
 *
tmp
;

147 
Êi°_hód
 *
íåy
;

149 i‡(!
›t
->
gf_sögÀ_ö°™˚
) {

150 
	`glfs_föi
(
fs
);

154 
	`±hªad_muãx_lock
 (&
glfs_lock
);

156 
	`Êi°_f‹_óch
(
íåy
, &
glfs_li°_hód
) {

157 
tmp
 = 
	`Êi°_íåy
(
íåy
, 
glfs_öfo
, 
li°
);

158 i‡(
tmp
->
fs
 == fs) {

159 
glfs
 = 
tmp
;

164 i‡(!
glfs
) {

165 
	`log_îr
("glfsÇot foundÅo fini.\n");

167 
glfs
->
ªfcou¡
--;

169 i‡(
glfs
->
ªfcou¡
 == 0) {

170 
	`glfs_föi
(
glfs
->
fs
);

171 
	`‰ì
(
glfs
->
vﬁume
);

172 
	`‰ì
(
glfs
->
brick
);

173 
	`Êi°_dñ
(&
glfs
->
li°
);

177 
	`±hªad_muãx_u∆ock
 (&
glfs_lock
);

178 
	}
}

180 
	$fio_gf_£tup
(
thªad_d©a
 *
td
)

182 
gf_d©a
 *
g
 = 
NULL
;

183 
gf_›ti⁄s
 *
›t
 = 
td
->
eo
;

185 
	`d¥öt
(
FD_IO
, "fio setup\n");

187 i‡(
td
->
io_›s_d©a
)

190 
g
 = 
	`mÆloc
((
gf_d©a
));

191 i‡(!
g
) {

192 
	`log_îr
("malloc failed.\n");

193  -
ENOMEM
;

195 
g
->
fd
 = 
NULL
;

196 
g
->
aio_evíts
 = 
NULL
;

198 
g
->
fs
 = 
	`fio_gf_gë_glfs
(
›t
, o±->
gf_vﬁ
, o±->
gf_brick
);

199 i‡(!
g
->
fs
)

200 
˛ónup
;

202 
	`d¥öt
(
FD_FILE
, "fiÿ£tu∞%p\n", 
g
->
fs
);

203 
td
->
io_›s_d©a
 = 
g
;

205 
˛ónup
:

206 
	`‰ì
(
g
);

207 
td
->
io_›s_d©a
 = 
NULL
;

208  -
EIO
;

209 
	}
}

211 
	$fio_gf_˛ónup
(
thªad_d©a
 *
td
)

213 
gf_d©a
 *
g
 = 
td
->
io_›s_d©a
;

215 i‡(
g
) {

216 i‡(
g
->
aio_evíts
)

217 
	`‰ì
(
g
->
aio_evíts
);

218 i‡(
g
->
fd
)

219 
	`glfs_˛o£
(
g
->
fd
);

220 i‡(
g
->
fs
)

221 
	`fio_gf_put_glfs
(
td
->
eo
, 
g
->
fs
);

222 
	`‰ì
(
g
);

223 
td
->
io_›s_d©a
 = 
NULL
;

225 
	}
}

227 
	$fio_gf_gë_fûe_size
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

229 
°©
 
buf
;

230 
ªt
;

231 
gf_d©a
 *
g
 = 
td
->
io_›s_d©a
;

233 
	`d¥öt
(
FD_FILE
, "gë fûêsizê%s\n", 
f
->
fûe_«me
);

235 i‡(!
g
 || !g->
fs
) {

238 i‡(
	`fio_fûe_size_known
(
f
))

241 
ªt
 = 
	`glfs_l°©
(
g
->
fs
, 
f
->
fûe_«me
, &
buf
);

242 i‡(
ªt
 < 0) {

243 
	`log_îr
("glfs_lstat failed.\n");

244  
ªt
;

247 
f
->
ªÆ_fûe_size
 = 
buf
.
°_size
;

248 
	`fio_fûe_£t_size_known
(
f
);

252 
	}
}

254 
	$fio_gf_›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

257 
Êags
 = 0;

258 
ªt
 = 0;

259 
gf_d©a
 *
g
 = 
td
->
io_›s_d©a
;

260 
°©
 
sb
 = { 0, };

262 i‡(
	`td_wrôe
(
td
)) {

263 i‡(!
ªad_⁄ly
)

264 
Êags
 = 
O_RDWR
;

265 } i‡(
	`td_ªad
(
td
)) {

266 i‡(!
ªad_⁄ly
)

267 
Êags
 = 
O_RDWR
;

269 
Êags
 = 
O_RDONLY
;

272 i‡(
td
->
o
.
odúe˘
)

273 
Êags
 |
OS_O_DIRECT
;

274 
Êags
 |
td
->
o
.
sync_io
;

276 
	`d¥öt
(
FD_FILE
, "fiÿfûê%†›í modê%†tdÑw %s\n", 
f
->
fûe_«me
,

277 
Êags
 & 
O_RDONLY
 ? "ro" : "rw", 
	`td_ªad
(
td
) ? "read" : "write");

278 
g
->
fd
 = 
	`glfs_¸ót
(g->
fs
, 
f
->
fûe_«me
, 
Êags
, 0644);

279 i‡(!
g
->
fd
) {

280 
ªt
 = 
î∫o
;

281 
	`log_îr
("glfs_creat failed.\n");

282  
ªt
;

285 i‡(
	`td_ªad
(
td
)) {

286 i‡(
	`glfs_l°©
(
g
->
fs
, 
f
->
fûe_«me
, &
sb
)

287 || 
sb
.
°_size
 < 
f
->
ªÆ_fûe_size
) {

288 
	`d¥öt
(
FD_FILE
, "fiÿexãnd fûê%†‰om %jdÅÿ%" 
PRIu64
 "\n",

289 
f
->
fûe_«me
, (
ötmax_t
Ë
sb
.
°_size
, f->
ªÆ_fûe_size
);

290 #i‡
	`deföed
(
CONFIG_GF_NEW_API
)

291 
ªt
 = 
	`glfs_·runˇã
(
g
->
fd
, 
f
->
ªÆ_fûe_size
, 
NULL
, NULL);

293 
ªt
 = 
	`glfs_·runˇã
(
g
->
fd
, 
f
->
ªÆ_fûe_size
);

295 i‡(
ªt
) {

296 
	`log_îr
("Áûed fiÿexãnd fûê%†tÿ%" 
PRIu64
 "\n",

297 
f
->
fûe_«me
, f->
ªÆ_fûe_size
);

299 
À·
;

300 
bs
;

301 *
b
;

302 
r
;

305 
b
 = 
	`mÆloc
(
td
->
o
.
max_bs
[
DDIR_WRITE
]);

307 
À·
 = 
f
->
ªÆ_fûe_size
;

308 
À·
 && !
td
->
ãrmö©e
) {

309 
bs
 = 
td
->
o
.
max_bs
[
DDIR_WRITE
];

310 i‡(
bs
 > 
À·
)

311 
bs
 = 
À·
;

313 
	`fûl_io_buf„r
(
td
, 
b
, 
bs
, bs);

315 
r
 = 
	`glfs_wrôe
(
g
->
fd
, 
b
, 
bs
, 0);

316 
	`d¥öt
(
FD_IO
,

317 "fiÿwrôê%d o‡%" 
PRIu64
 " file %s\n",

318 
r
, 
f
->
ªÆ_fûe_size
,

319 
f
->
fûe_«me
);

321 i‡(
r
 > 0) {

322 
À·
 -
r
;

325 i‡(
r
 < 0) {

326 
__e
 = 
î∫o
;

328 i‡(
__e
 =
ENOSPC
) {

329 i‡(
td
->
o
.

330 
fûl_devi˚
)

332 
log_öfo


337 
	`td_vîr‹
(
td
, 
î∫o
,

340 
	`td_vîr‹
(
td
, 
EIO
,

347 i‡(
b
)

348 
	`‰ì
(
b
);

349 
	`glfs_l£ek
(
g
->
fd
, 0, 
SEEK_SET
);

351 i‡(
td
->
ãrmö©e
 &&Åd->
o
.
u∆ök
) {

352 
	`d¥öt
(
FD_FILE
, "terminate unlink %s\n",

353 
f
->
fûe_«me
);

354 
	`glfs_u∆ök
(
g
->
fs
, 
f
->
fûe_«me
);

355 } i‡(
td
->
o
.
¸óã_fsync
) {

356 #i‡
	`deföed
(
CONFIG_GF_NEW_API
)

357 i‡(
	`glfs_fsync
(
g
->
fd
, 
NULL
, NULL) < 0) {

359 i‡(
	`glfs_fsync
(
g
->
fd
) < 0) {

361 
	`d¥öt
(
FD_FILE
,

363 
f
->
fûe_«me
);

364 
	`td_vîr‹
(
td
, 
î∫o
, "fsync");

365 
	`glfs_˛o£
(
g
->
fd
);

366 
g
->
fd
 = 
NULL
;

373 #i‡
	`deföed
(
GFAPI_USE_FADVISE
)

375 
r
 = 0;

376 i‡(
	`td_øndom
(
td
)) {

377 
r
 = 
	`glfs_Ádvi£
(
g
->
fd
, 0, 
f
->
ªÆ_fûe_size
,

378 
POSIX_FADV_RANDOM
);

380 
r
 = 
	`glfs_Ádvi£
(
g
->
fd
, 0, 
f
->
ªÆ_fûe_size
,

381 
POSIX_FADV_SEQUENTIAL
);

383 i‡(
r
) {

384 
	`d¥öt
(
FD_FILE
, "fiÿ%∞Ádvi£ %†°©u†%d\n", 
g
->
fs
,

385 
f
->
fûe_«me
, 
r
);

389 
	`d¥öt
(
FD_FILE
, "fiÿ%∞¸óãd %s\n", 
g
->
fs
, 
f
->
fûe_«me
);

390 
f
->
fd
 = -1;

391 
f
->
shadow_fd
 = -1;

392 
td
->
o
.
›í_fûes
 ++;

393  
ªt
;

394 
	}
}

396 
	$fio_gf_˛o£_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

398 
ªt
 = 0;

399 
gf_d©a
 *
g
 = 
td
->
io_›s_d©a
;

401 
	`d¥öt
(
FD_FILE
, "fd clo£ %s\n", 
f
->
fûe_«me
);

403 i‡(
g
) {

404 i‡(
g
->
fd
 && 
	`glfs_˛o£
(g->fd) < 0)

405 
ªt
 = 
î∫o
;

406 
g
->
fd
 = 
NULL
;

409  
ªt
;

410 
	}
}

412 
	$fio_gf_u∆ök_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

414 
ªt
 = 0;

415 
gf_d©a
 *
g
 = 
td
->
io_›s_d©a
;

417 
	`d¥öt
(
FD_FILE
, "fd u∆ök %s\n", 
f
->
fûe_«me
);

419 i‡(
g
) {

420 i‡(
g
->
fd
 && 
	`glfs_˛o£
(g->fd) < 0)

421 
ªt
 = 
î∫o
;

423 
	`glfs_u∆ök
(
g
->
fs
, 
f
->
fûe_«me
);

425 i‡(
g
->
fs
)

426 
	`glfs_föi
(
g
->
fs
);

428 
g
->
fd
 = 
NULL
;

429 
	`‰ì
(
g
);

431 
td
->
io_›s_d©a
 = 
NULL
;

433  
ªt
;

434 
	}
}

	@engines/glusterfs_async.c

7 
	~"gÁpi.h
"

8 
	#NOT_YET
 1

	)

9 
	sfio_gf_iou
 {

10 
io_u
 *
	mio_u
;

11 
	mio_com∂ëe
;

14 
io_u
 *
	$fio_gf_evít
(
thªad_d©a
 *
td
, 
evít
)

16 
gf_d©a
 *gf_d©®
td
->
io_›s_d©a
;

18 
	`d¥öt
(
FD_IO
, "%s\n", 
__FUNCTION__
);

19  
gf_d©a
->
aio_evíts
[
evít
];

20 
	}
}

22 
	$fio_gf_gëevíts
(
thªad_d©a
 *
td
, 
mö
,

23 
max
, c⁄° 
time•ec
 *
t
)

25 
gf_d©a
 *
g
 = 
td
->
io_›s_d©a
;

26 
evíts
 = 0;

27 
io_u
 *io_u;

28 
i
;

30 
	`d¥öt
(
FD_IO
, "%s\n", 
__FUNCTION__
);

32 
	`io_u_qôî
(&
td
->
io_u_Æl
, 
io_u
, 
i
) {

33 
fio_gf_iou
 *
io
;

35 i‡(!(
io_u
->
Êags
 & 
IO_U_F_FLIGHT
))

38 
io
 = 
io_u
->
ígöe_d©a
;

39 i‡(
io
->
io_com∂ëe
) {

40 
io
->
io_com∂ëe
 = 0;

41 
g
->
aio_evíts
[
evíts
] = 
io_u
;

42 
evíts
++;

44 i‡(
evíts
 >
max
)

49 i‡(
evíts
 < 
mö
)

50 
	`u¶ìp
(100);

56  
evíts
;

57 
	}
}

59 
	$fio_gf_io_u_‰ì
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

61 
fio_gf_iou
 *
io
 = 
io_u
->
ígöe_d©a
;

63 i‡(
io
) {

64 i‡(
io
->
io_com∂ëe
)

65 
	`log_îr
("incomplete IO found.\n");

66 
io_u
->
ígöe_d©a
 = 
NULL
;

67 
	`‰ì
(
io
);

69 
	}
}

71 
	$fio_gf_io_u_öô
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

73 
fio_gf_iou
 *
io
;

74 
	`d¥öt
(
FD_FILE
, "%s\n", 
__FUNCTION__
);

76 
io
 = 
	`mÆloc
((
fio_gf_iou
));

77 i‡(!
io
) {

78 
	`td_vîr‹
(
td
, 
î∫o
, "malloc");

81 
io
->
io_com∂ëe
 = 0;

82 
io
->
io_u
 = io_u;

83 
io_u
->
ígöe_d©a
 = 
io
;

85 
	}
}

87 #i‡
deföed
(
CONFIG_GF_NEW_API
)

88 
	$gf_async_cb
(
glfs_fd_t
 * 
fd
, 
ssize_t
 
ªt
, 
glfs_°©
 *
¥e°©
,

89 
glfs_°©
 *
po°°©
, *
d©a
)

91 
	$gf_async_cb
(
glfs_fd_t
 * 
fd
, 
ssize_t
 
ªt
, *
d©a
)

94 
io_u
 *io_u = 
d©a
;

95 
fio_gf_iou
 *
iou
 = 
io_u
->
ígöe_d©a
;

97 
	`d¥öt
(
FD_IO
, "%†ªà%zd\n", 
__FUNCTION__
, 
ªt
);

98 
iou
->
io_com∂ëe
 = 1;

99 
	}
}

101 
fio_q_°©us
 
	$fio_gf_async_queue
(
thªad_d©a
 
fio_unu£d
 * 
td
,

102 
io_u
 *io_u)

104 
gf_d©a
 *
g
 = 
td
->
io_›s_d©a
;

105 
r
;

107 
	`d¥öt
(
FD_IO
, "%†› %s\n", 
__FUNCTION__
, 
	`io_ddú_«me
(
io_u
->
ddú
));

109 
	`fio_ro_check
(
td
, 
io_u
);

111 i‡(
io_u
->
ddú
 =
DDIR_READ
)

112 
r
 = 
	`glfs_¥ód_async
(
g
->
fd
, 
io_u
->
x„r_buf
, io_u->
x„r_buÊí
,

113 
io_u
->
off£t
, 0, 
gf_async_cb
, io_u);

114 i‡(
io_u
->
ddú
 =
DDIR_WRITE
)

115 
r
 = 
	`glfs_pwrôe_async
(
g
->
fd
, 
io_u
->
x„r_buf
, io_u->
x„r_buÊí
,

116 
io_u
->
off£t
, 0, 
gf_async_cb
, io_u);

117 #i‡
	`deföed
(
CONFIG_GF_TRIM
)

118 i‡(
io_u
->
ddú
 =
DDIR_TRIM
)

119 
r
 = 
	`glfs_disˇrd_async
(
g
->
fd
, 
io_u
->
off£t
, io_u->
x„r_buÊí
,

120 
gf_async_cb
, 
io_u
);

122 i‡(
io_u
->
ddú
 =
DDIR_DATASYNC
)

123 
r
 = 
	`glfs_fd©async_async
(
g
->
fd
, 
gf_async_cb
, 
io_u
);

124 i‡(
io_u
->
ddú
 =
DDIR_SYNC
)

125 
r
 = 
	`glfs_fsync_async
(
g
->
fd
, 
gf_async_cb
, 
io_u
);

127 
r
 = 
EINVAL
;

129 i‡(
r
) {

130 
	`log_îr
("glfs queue failed.\n");

131 
io_u
->
îr‹
 = 
r
;

132 
Áûed
;

134  
FIO_Q_QUEUED
;

136 
Áûed
:

137 
io_u
->
îr‹
 = 
r
;

138 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "xfer");

139  
FIO_Q_COMPLETED
;

140 
	}
}

142 
	$fio_gf_async_£tup
(
thªad_d©a
 *
td
)

144 
gf_d©a
 *
g
;

145 
r
;

147 #i‡
	`deföed
(
NOT_YET
)

148 
	`log_îr
("theásync interface is still veryÉxperimental...\n");

150 
r
 = 
	`fio_gf_£tup
(
td
);

151 i‡(
r
)

152  
r
;

154 
td
->
o
.
u£_thªad
 = 1;

155 
g
 = 
td
->
io_›s_d©a
;

156 
g
->
aio_evíts
 = 
	`ˇŒoc
(
td
->
o
.
iodïth
, (
io_u
 *));

157 i‡(!
g
->
aio_evíts
) {

158 
r
 = -
ENOMEM
;

159 
	`fio_gf_˛ónup
(
td
);

160  
r
;

163  
r
;

164 
	}
}

166 
i€ngöe_›s
 
	gi€ngöe
 = {

167 .
«me
 = "gfapi_async",

168 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

169 .
	göô
 = 
fio_gf_async_£tup
,

170 .
	g˛ónup
 = 
fio_gf_˛ónup
,

171 .
	gqueue
 = 
fio_gf_async_queue
,

172 .
	g›í_fûe
 = 
fio_gf_›í_fûe
,

173 .
	g˛o£_fûe
 = 
fio_gf_˛o£_fûe
,

174 .
	gu∆ök_fûe
 = 
fio_gf_u∆ök_fûe
,

175 .
	ggë_fûe_size
 = 
fio_gf_gë_fûe_size
,

176 .
	ggëevíts
 = 
fio_gf_gëevíts
,

177 .
	gevít
 = 
fio_gf_evít
,

178 .
	gio_u_öô
 = 
fio_gf_io_u_öô
,

179 .
	gio_u_‰ì
 = 
fio_gf_io_u_‰ì
,

180 .
	g›ti⁄s
 = 
gÁpi_›ti⁄s
,

181 .
	g›ti⁄_°ru˘_size
 = (
gf_›ti⁄s
),

182 .
	gÊags
 = 
FIO_DISKLESSIO
,

185 
fio_öô
 
	$fio_gf_ªgi°î
()

187 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

188 
	}
}

190 
fio_exô
 
	$fio_gf_uƒegi°î
()

192 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

193 
	}
}

	@engines/glusterfs_sync.c

8 
	~"gÁpi.h
"

10 
	#LAST_POS
(
f
Ë((f)->
ígöe_pos
)

	)

11 
	$fio_gf_¥ï
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

13 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

14 
gf_d©a
 *
g
 = 
td
->
io_›s_d©a
;

16 
	`d¥öt
(
FD_FILE
, "fioÖrep\n");

18 i‡(!
	`ddú_rw
(
io_u
->
ddú
))

21 i‡(
	`LAST_POS
(
f
Ë!-1ULL && LAST_POS(fË=
io_u
->
off£t
)

24 i‡(
	`glfs_l£ek
(
g
->
fd
, 
io_u
->
off£t
, 
SEEK_SET
) < 0) {

25 
	`td_vîr‹
(
td
, 
î∫o
, "lseek");

30 
	}
}

32 
fio_q_°©us
 
	$fio_gf_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

34 
gf_d©a
 *
g
 = 
td
->
io_›s_d©a
;

35 
ªt
 = 0;

37 
	`d¥öt
(
FD_FILE
, "fiÿqueuêÀ¿%Œu\n", 
io_u
->
x„r_buÊí
);

38 
	`fio_ro_check
(
td
, 
io_u
);

40 i‡(
io_u
->
ddú
 =
DDIR_READ
)

41 
ªt
 = 
	`glfs_ªad
(
g
->
fd
, 
io_u
->
x„r_buf
, io_u->
x„r_buÊí
, 0);

42 i‡(
io_u
->
ddú
 =
DDIR_WRITE
)

43 
ªt
 = 
	`glfs_wrôe
(
g
->
fd
, 
io_u
->
x„r_buf
, io_u->
x„r_buÊí
, 0);

44 i‡(
io_u
->
ddú
 =
DDIR_SYNC
)

45 #i‡
	`deföed
(
CONFIG_GF_NEW_API
)

46 
ªt
 = 
	`glfs_fsync
(
g
->
fd
, 
NULL
, NULL);

48 
ªt
 = 
	`glfs_fsync
(
g
->
fd
);

50 i‡(
io_u
->
ddú
 =
DDIR_DATASYNC
)

51 #i‡
	`deföed
(
CONFIG_GF_NEW_API
)

52 
ªt
 = 
	`glfs_fd©async
(
g
->
fd
, 
NULL
, NULL);

54 
ªt
 = 
	`glfs_fd©async
(
g
->
fd
);

57 
	`log_îr
("unsupported operation.\n");

58 
io_u
->
îr‹
 = 
EINVAL
;

59  
FIO_Q_COMPLETED
;

61 
	`d¥öt
(
FD_FILE
, "fiÿÀ¿%ŒuÑë %d\n", 
io_u
->
x„r_buÊí
, 
ªt
);

62 i‡(
io_u
->
fûe
 && 
ªt
 >0 && 
	`ddú_rw
(io_u->
ddú
))

63 
	`LAST_POS
(
io_u
->
fûe
Ëio_u->
off£t
 + 
ªt
;

65 i‡(
ªt
 !()
io_u
->
x„r_buÊí
) {

66 i‡(
ªt
 >= 0) {

67 
io_u
->
ªsid
 = io_u->
x„r_buÊí
 - 
ªt
;

68 
io_u
->
îr‹
 = 0;

69  
FIO_Q_COMPLETED
;

71 
io_u
->
îr‹
 = 
î∫o
;

74 i‡(
io_u
->
îr‹
) {

75 
	`log_îr
("IO failed.\n");

76 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "xfer");

79  
FIO_Q_COMPLETED
;

81 
	}
}

83 
i€ngöe_›s
 
	gi€ngöe
 = {

84 .
«me
 = "gfapi",

85 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

86 .
	göô
 = 
fio_gf_£tup
,

87 .
	g˛ónup
 = 
fio_gf_˛ónup
,

88 .
	g¥ï
 = 
fio_gf_¥ï
,

89 .
	gqueue
 = 
fio_gf_queue
,

90 .
	g›í_fûe
 = 
fio_gf_›í_fûe
,

91 .
	g˛o£_fûe
 = 
fio_gf_˛o£_fûe
,

92 .
	gu∆ök_fûe
 = 
fio_gf_u∆ök_fûe
,

93 .
	ggë_fûe_size
 = 
fio_gf_gë_fûe_size
,

94 .
	g›ti⁄s
 = 
gÁpi_›ti⁄s
,

95 .
	g›ti⁄_°ru˘_size
 = (
gf_›ti⁄s
),

96 .
	gÊags
 = 
FIO_SYNCIO
 | 
FIO_DISKLESSIO
,

99 
fio_öô
 
	$fio_gf_ªgi°î
()

101 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

102 
	}
}

104 
fio_exô
 
	$fio_gf_uƒegi°î
()

106 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

107 
	}
}

	@engines/http.c

23 
	~<±hªad.h
>

24 
	~<time.h
>

25 
	~<cuæ/cuæ.h
>

26 
	~<›ís¶/hmac.h
>

27 
	~<›ís¶/sha.h
>

28 
	~<›ís¶/md5.h
>

29 
	~"fio.h
"

30 
	~"../›tgroup.h
"

35 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wdeprecated-declarations"

38 
	mFIO_HTTP_WEBDAV
 = 0,

39 
	mFIO_HTTP_S3
 = 1,

40 
	mFIO_HTTP_SWIFT
 = 2,

42 
	mFIO_HTTPS_OFF
 = 0,

43 
	mFIO_HTTPS_ON
 = 1,

44 
	mFIO_HTTPS_INSECURE
 = 2,

47 
	shâp_d©a
 {

48 
CURL
 *
	mcuæ
;

51 
	shâp_›ti⁄s
 {

52 *
	m∑d
;

53 
	mhâps
;

54 *
	mho°
;

55 *
	mu£r
;

56 *
	m∑ss
;

57 *
	ms3_key
;

58 *
	ms3_keyid
;

59 *
	ms3_ªgi⁄
;

60 *
	ms3_s£_cu°omî_key
;

61 *
	ms3_s£_cu°omî_Æg‹ôhm
;

62 *
	ms3_°‹age_˛ass
;

63 *
	mswi·_auth_tokí
;

64 
	mvîbo£
;

65 
	mmode
;

68 
	shâp_cuæ_°ªam
 {

69 *
	mbuf
;

70 
size_t
 
	mpos
;

71 
size_t
 
	mmax
;

74 
fio_›ti⁄
 
	g›ti⁄s
[] = {

76 .
«me
 = "https",

77 .
	g ame
 = "https",

78 .
	gty≥
 = 
FIO_OPT_STR
,

79 .
	ghñp
 = "Enable https",

80 .
	goff1
 = 
off£tof
(
hâp_›ti⁄s
, 
hâps
),

81 .
	gdef
 = "off",

82 .
	gposvÆ
 = {

83 { .
ivÆ
 = "off",

84 .
	govÆ
 = 
FIO_HTTPS_OFF
,

85 .
	ghñp
 = "No HTTPS",

87 { .
	givÆ
 = "on",

88 .
	govÆ
 = 
FIO_HTTPS_ON
,

89 .
	ghñp
 = "Enable HTTPS",

91 { .
	givÆ
 = "insecure",

92 .
	govÆ
 = 
FIO_HTTPS_INSECURE
,

93 .
	ghñp
 = "Enable HTTPS, disableÖeer verification",

96 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

97 .
	ggroup
 = 
FIO_OPT_G_HTTP
,

100 .
	g«me
 = "http_host",

101 .
	g ame
 = "http_host",

102 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

103 .
	ghñp
 = "Hostname (S3 bucket)",

104 .
	goff1
 = 
off£tof
(
hâp_›ti⁄s
, 
ho°
),

105 .
	gdef
 = "localhost",

106 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

107 .
	ggroup
 = 
FIO_OPT_G_HTTP
,

110 .
	g«me
 = "http_user",

111 .
	g ame
 = "http_user",

112 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

113 .
	ghñp
 = "HTTP userÇame",

114 .
	goff1
 = 
off£tof
(
hâp_›ti⁄s
, 
u£r
),

115 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

116 .
	ggroup
 = 
FIO_OPT_G_HTTP
,

119 .
	g«me
 = "http_pass",

120 .
	g ame
 = "http_pass",

121 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

122 .
	ghñp
 = "HTTPÖassword",

123 .
	goff1
 = 
off£tof
(
hâp_›ti⁄s
, 
∑ss
),

124 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

125 .
	ggroup
 = 
FIO_OPT_G_HTTP
,

128 .
	g«me
 = "http_s3_key",

129 .
	g ame
 = "S3 secret key",

130 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

131 .
	ghñp
 = "S3 secret key",

132 .
	goff1
 = 
off£tof
(
hâp_›ti⁄s
, 
s3_key
),

133 .
	gdef
 = "",

134 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

135 .
	ggroup
 = 
FIO_OPT_G_HTTP
,

138 .
	g«me
 = "http_s3_keyid",

139 .
	g ame
 = "S3 key id",

140 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

141 .
	ghñp
 = "S3 key id",

142 .
	goff1
 = 
off£tof
(
hâp_›ti⁄s
, 
s3_keyid
),

143 .
	gdef
 = "",

144 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

145 .
	ggroup
 = 
FIO_OPT_G_HTTP
,

148 .
	g«me
 = "http_swift_auth_token",

149 .
	g ame
 = "SwiftáuthÅoken",

150 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

151 .
	ghñp
 = "OpenStack SwiftáuthÅoken",

152 .
	goff1
 = 
off£tof
(
hâp_›ti⁄s
, 
swi·_auth_tokí
),

153 .
	gdef
 = "",

154 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

155 .
	ggroup
 = 
FIO_OPT_G_HTTP
,

158 .
	g«me
 = "http_s3_region",

159 .
	g ame
 = "S3Ñegion",

160 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

161 .
	ghñp
 = "S3Ñegion",

162 .
	goff1
 = 
off£tof
(
hâp_›ti⁄s
, 
s3_ªgi⁄
),

163 .
	gdef
 = "us-east-1",

164 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

165 .
	ggroup
 = 
FIO_OPT_G_HTTP
,

168 .
	g«me
 = "http_s3_sse_customer_key",

169 .
	g ame
 = "SSE Customer Key",

170 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

171 .
	ghñp
 = "S3 SSE Customer Key",

172 .
	goff1
 = 
off£tof
(
hâp_›ti⁄s
, 
s3_s£_cu°omî_key
),

173 .
	gdef
 = "",

174 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

175 .
	ggroup
 = 
FIO_OPT_G_HTTP
,

178 .
	g«me
 = "http_s3_sse_customer_algorithm",

179 .
	g ame
 = "SSE Customer Algorithm",

180 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

181 .
	ghñp
 = "S3 SSE Customer Algorithm",

182 .
	goff1
 = 
off£tof
(
hâp_›ti⁄s
, 
s3_s£_cu°omî_Æg‹ôhm
),

183 .
	gdef
 = "AES256",

184 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

185 .
	ggroup
 = 
FIO_OPT_G_HTTP
,

188 .
	g«me
 = "http_s3_storage_class",

189 .
	g ame
 = "S3 Storage class",

190 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

191 .
	ghñp
 = "S3 Storage Class",

192 .
	goff1
 = 
off£tof
(
hâp_›ti⁄s
, 
s3_°‹age_˛ass
),

193 .
	gdef
 = "STANDARD",

194 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

195 .
	ggroup
 = 
FIO_OPT_G_HTTP
,

198 .
	g«me
 = "http_mode",

199 .
	g ame
 = "Request modeÅo use",

200 .
	gty≥
 = 
FIO_OPT_STR
,

201 .
	ghñp
 = "WhetherÅo use WebDAV, Swift, or S3",

202 .
	goff1
 = 
off£tof
(
hâp_›ti⁄s
, 
mode
),

203 .
	gdef
 = "webdav",

204 .
	gposvÆ
 = {

205 { .
ivÆ
 = "webdav",

206 .
	govÆ
 = 
FIO_HTTP_WEBDAV
,

207 .
	ghñp
 = "WebDAV server",

209 { .
	givÆ
 = "s3",

210 .
	govÆ
 = 
FIO_HTTP_S3
,

211 .
	ghñp
 = "S3 storage backend",

213 { .
	givÆ
 = "swift",

214 .
	govÆ
 = 
FIO_HTTP_SWIFT
,

215 .
	ghñp
 = "OpenStack Swift storage",

218 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

219 .
	ggroup
 = 
FIO_OPT_G_HTTP
,

222 .
	g«me
 = "http_verbose",

223 .
	g ame
 = "HTTP verbosityÜevel",

224 .
	gty≥
 = 
FIO_OPT_INT
,

225 .
	ghñp
 = "increase httpÉngine verbosity",

226 .
	goff1
 = 
off£tof
(
hâp_›ti⁄s
, 
vîbo£
),

227 .
	gdef
 = "0",

228 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

229 .
	ggroup
 = 
FIO_OPT_G_HTTP
,

232 .
	g«me
 = 
NULL
,

236 *
	$_aws_urõncode
(c⁄° *
uri
)

238 
size_t
 
bufsize
 = 1024;

239 *
r
 = 
	`mÆloc
(
bufsize
);

240 
c
;

241 
i
, 
n
;

242 c⁄° *
hex
 = "0123456789ABCDEF";

244 i‡(!
r
) {

245 
	`log_îr
("malloc failed\n");

246  
NULL
;

249 
n
 = 0;

250 
i
 = 0; (
c
 = 
uri
[i]); i++) {

251 i‡(
n
 > 
bufsize
-5) {

252 
	`log_îr
("encodingÅhe URL failed\n");

253  
NULL
;

256 i‡–(
c
 >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')

257 || (
c
 >= '0' && c <= '9') || c == '_' || c == '-'

258 || 
c
 == '~' || c == '.' || c == '/')

259 
r
[
n
++] = 
c
;

261 
r
[
n
++] = '%';

262 
r
[
n
++] = 
hex
[(
c
 >> 4 ) & 0xF];

263 
r
[
n
++] = 
hex
[
c
 & 0xF];

266 
r
[
n
++] = 0;

267  
r
;

268 
	}
}

270 *
	$_c⁄v_hex
(c⁄° *
p
, 
size_t
 
Àn
)

272 *
r
;

273 
i
,
n
;

274 c⁄° *
hex
 = "0123456789abcdef";

275 
r
 = 
	`mÆloc
(
Àn
 * 2 + 1);

276 
n
 = 0;

277 
i
 = 0; i < 
Àn
; i++) {

278 
r
[
n
++] = 
hex
[(
p
[
i
] >> 4 ) & 0xF];

279 
r
[
n
++] = 
hex
[
p
[
i
] & 0xF];

281 
r
[
n
] = 0;

283  
r
;

284 
	}
}

286 *
	$_gí_hex_sha256
(c⁄° *
p
, 
size_t
 
Àn
)

288 
hash
[
SHA256_DIGEST_LENGTH
];

290 
	`SHA256
((*)
p
, 
Àn
, 
hash
);

291  
	`_c⁄v_hex
(
hash
, 
SHA256_DIGEST_LENGTH
);

292 
	}
}

294 *
	$_gí_hex_md5
(c⁄° *
p
, 
size_t
 
Àn
)

296 
hash
[
MD5_DIGEST_LENGTH
];

298 
	`MD5
((*)
p
, 
Àn
, 
hash
);

299  
	`_c⁄v_hex
(
hash
, 
MD5_DIGEST_LENGTH
);

300 
	}
}

302 *
	$_c⁄v_ba£64_ícode
(c⁄° *
p
, 
size_t
 
Àn
)

304 *
r
, *
ªt
;

305 
i
;

306 c⁄° 
sEncodögTabÀ
[] = {

317 
size_t
 
out_Àn
 = 4 * ((
Àn
 + 2) / 3);

318 
ªt
 = 
r
 = 
	`mÆloc
(
out_Àn
 + 1);

320 
i
 = 0; i < 
Àn
 - 2; i += 3) {

321 *
r
++ = 
sEncodögTabÀ
[(
p
[
i
] >> 2) & 0x3F];

322 *
r
++ = 
sEncodögTabÀ
[((
p
[
i
] & 0x3) << 4) | (() (p[i + 1] & 0xF0) >> 4)];

323 *
r
++ = 
sEncodögTabÀ
[((
p
[
i
 + 1] & 0xF) << 2) | (() (p[i + 2] & 0xC0) >> 6)];

324 *
r
++ = 
sEncodögTabÀ
[
p
[
i
 + 2] & 0x3F];

327 i‡(
i
 < 
Àn
) {

328 *
r
++ = 
sEncodögTabÀ
[(
p
[
i
] >> 2) & 0x3F];

329 i‡(
i
 =(
Àn
 - 1)) {

330 *
r
++ = 
sEncodögTabÀ
[((
p
[
i
] & 0x3) << 4)];

331 *
r
++ = '=';

333 *
r
++ = 
sEncodögTabÀ
[((
p
[
i
] & 0x3) << 4) | (() (p[i + 1] & 0xF0) >> 4)];

334 *
r
++ = 
sEncodögTabÀ
[((
p
[
i
 + 1] & 0xF) << 2)];

336 *
r
++ = '=';

339 
ªt
[
out_Àn
]=0;

340  
ªt
;

341 
	}
}

343 *
	$_gí_ba£64_md5
(c⁄° *
p
, 
size_t
 
Àn
)

345 
hash
[
MD5_DIGEST_LENGTH
];

346 
	`MD5
((*)
p
, 
Àn
, 
hash
);

347  
	`_c⁄v_ba£64_ícode
(
hash
, 
MD5_DIGEST_LENGTH
);

348 
	}
}

350 
	$_hmac
(*
md
, *
key
, 
key_Àn
, *
d©a
) {

351 #i‚de‡
CONFIG_HAVE_OPAQUE_HMAC_CTX


352 
HMAC_CTX
 
_˘x
;

354 
HMAC_CTX
 *
˘x
;

355 
hmac_Àn
;

357 #ifde‡
CONFIG_HAVE_OPAQUE_HMAC_CTX


358 
˘x
 = 
	`HMAC_CTX_√w
();

360 
˘x
 = &
_˘x
;

362 
	`HMAC_CTX_öô
(
˘x
);

364 
	`HMAC_Inô_ex
(
˘x
, 
key
, 
key_Àn
, 
	`EVP_sha256
(), 
NULL
);

365 
	`HMAC_Upd©e
(
˘x
, (*)
d©a
, 
	`°æí
(data));

366 
	`HMAC_FöÆ
(
˘x
, 
md
, &
hmac_Àn
);

367 #ifde‡
CONFIG_HAVE_OPAQUE_HMAC_CTX


368 
	`HMAC_CTX_‰ì
(
˘x
);

370 
	`HMAC_CTX_˛ónup
(
˘x
);

372 
	}
}

374 
	$_cuæ_åa˚
(
CURL
 *
h™dÀ
, 
cuæ_öfŸy≥
 
ty≥
,

375 *
d©a
, 
size_t
 
size
,

376 *
u£Ω
)

378 c⁄° *
ãxt
;

379 ()
h™dÀ
;

380 ()
u£Ω
;

382 
ty≥
) {

383 
CURLINFO_TEXT
:

384 
	`Ârötf
(
°dîr
, "=Info: %s", 
d©a
);

385 
fio_ÁŒthrough
;

387 
CURLINFO_SSL_DATA_OUT
:

388 
CURLINFO_SSL_DATA_IN
:

391 
CURLINFO_HEADER_OUT
:

392 
ãxt
 = "=> Send header";

394 
CURLINFO_DATA_OUT
:

395 
ãxt
 = "=> Send data";

397 
CURLINFO_HEADER_IN
:

398 
ãxt
 = "<= Recv header";

400 
CURLINFO_DATA_IN
:

401 
ãxt
 = "<= Recv data";

405 
	`log_öfo
("%s: %s", 
ãxt
, 
d©a
);

407 
	}
}

412 
	$_add_aws_auth_hódî
(
CURL
 *
cuæ
, 
cuæ_¶i°
 *
¶i°
, 
hâp_›ti⁄s
 *
o
,

413 
›
, c⁄° *
uri
, *
buf
, 
size_t
 
Àn
)

415 
d©e_sh‹t
[16];

416 
d©e_iso
[32];

417 
mëhod
[8];

418 
dkey
[128];

419 
¸eq
[4096];

420 
°s
[512];

421 
s
[512];

422 *
uri_ícoded
 = 
NULL
;

423 *
dsha
 = 
NULL
;

424 *
csha
 = 
NULL
;

425 *
sig«tuª
 = 
NULL
;

426 c⁄° *
£rvi˚
 = "s3";

427 c⁄° *
aws
 = "aws4_request";

428 
md
[
SHA256_DIGEST_LENGTH
];

429 
s£_key
[33] = {0};

430 *
s£_key_ba£64
 = 
NULL
;

431 *
s£_key_md5_ba£64
 = 
NULL
;

433 
time_t
 
t
 = 
	`time
(
NULL
);

434 
tm
 *
gtm
 = 
	`gmtime
(&
t
);

436 
	`°r·ime
 (
d©e_sh‹t
, (d©e_sh‹t), "%Y%m%d", 
gtm
);

437 
	`°r·ime
 (
d©e_iso
, (d©e_iso), "%Y%m%dT%H%M%SZ", 
gtm
);

438 
uri_ícoded
 = 
	`_aws_urõncode
(
uri
);

440 i‡(
o
->
s3_s£_cu°omî_key
 !
NULL
)

441 
	`°∫˝y
((*)
s£_key
, 
o
->
s3_s£_cu°omî_key
, (sse_key) - 1);

443 i‡(
›
 =
DDIR_WRITE
) {

444 
dsha
 = 
	`_gí_hex_sha256
(
buf
, 
Àn
);

445 
	`•rötf
(
mëhod
, "PUT");

448 i‡(
›
 =
DDIR_READ
)

449 
	`•rötf
(
mëhod
, "GET");

451 
	`•rötf
(
mëhod
, "DELETE");

452 
dsha
 = 
	`_gí_hex_sha256
("", 0);

456 i‡(
s£_key
[0] != '\0') {

457 
s£_key_ba£64
 = 
	`_c⁄v_ba£64_ícode
(
s£_key
, (sse_key) - 1);

458 
s£_key_md5_ba£64
 = 
	`_gí_ba£64_md5
(
s£_key
, (sse_key) - 1);

459 
	`¢¥ötf
(
¸eq
, (creq),

477 , 
mëhod


478 , 
uri_ícoded
, 
o
->
ho°
, 
dsha
, 
d©e_iso


479 , 
o
->
s3_s£_cu°omî_Æg‹ôhm
, 
s£_key_ba£64


480 , 
s£_key_md5_ba£64
, 
o
->
s3_°‹age_˛ass
, 
dsha
);

482 
	`¢¥ötf
(
¸eq
, (creq),

493 , 
mëhod


494 , 
uri_ícoded
, 
o
->
ho°
, 
dsha
, 
d©e_iso
, o->
s3_°‹age_˛ass
, dsha);

497 
csha
 = 
	`_gí_hex_sha256
(
¸eq
, 
	`°æí
(creq));

498 
	`¢¥ötf
(
°s
, (sts), "AWS4-HMAC-SHA256\n%s\n%s/%s/%s/%s\n%s",

499 
d©e_iso
, 
d©e_sh‹t
, 
o
->
s3_ªgi⁄
, 
£rvi˚
, 
aws
, 
csha
);

501 
	`¢¥ötf
((*)
dkey
, (dkey), "AWS4%s", 
o
->
s3_key
);

502 
	`_hmac
(
md
, 
dkey
, 
	`°æí
(dkey), 
d©e_sh‹t
);

503 
	`_hmac
(
md
, md, 
SHA256_DIGEST_LENGTH
, 
o
->
s3_ªgi⁄
);

504 
	`_hmac
(
md
, md, 
SHA256_DIGEST_LENGTH
, (*Ë
£rvi˚
);

505 
	`_hmac
(
md
, md, 
SHA256_DIGEST_LENGTH
, (*Ë
aws
);

506 
	`_hmac
(
md
, md, 
SHA256_DIGEST_LENGTH
, 
°s
);

508 
sig«tuª
 = 
	`_c⁄v_hex
(
md
, 
SHA256_DIGEST_LENGTH
);

511 
¶i°
 = 
	`cuæ_¶i°_≠≥nd
(slist, "Accept:");

513 
	`¢¥ötf
(
s
, (s), "x-amz-c⁄ã¡-sha256: %s", 
dsha
);

514 
¶i°
 = 
	`cuæ_¶i°_≠≥nd
(¶i°, 
s
);

516 
	`¢¥ötf
(
s
, (s), "x-amz-d©e: %s", 
d©e_iso
);

517 
¶i°
 = 
	`cuæ_¶i°_≠≥nd
(¶i°, 
s
);

519 i‡(
s£_key
[0] != '\0') {

520 
	`¢¥ötf
(
s
, (s), "x-amz-£rvî-side-í¸y±i⁄-cu°omî-Æg‹ôhm: %s", 
o
->
s3_s£_cu°omî_Æg‹ôhm
);

521 
¶i°
 = 
	`cuæ_¶i°_≠≥nd
(¶i°, 
s
);

522 
	`¢¥ötf
(
s
, (s), "x-amz-£rvî-side-í¸y±i⁄-cu°omî-key: %s", 
s£_key_ba£64
);

523 
¶i°
 = 
	`cuæ_¶i°_≠≥nd
(¶i°, 
s
);

524 
	`¢¥ötf
(
s
, (s), "x-amz-£rvî-side-í¸y±i⁄-cu°omî-key-md5: %s", 
s£_key_md5_ba£64
);

525 
¶i°
 = 
	`cuæ_¶i°_≠≥nd
(¶i°, 
s
);

528 
	`¢¥ötf
(
s
, (s), "x-amz-°‹age-˛ass: %s", 
o
->
s3_°‹age_˛ass
);

529 
¶i°
 = 
	`cuæ_¶i°_≠≥nd
(¶i°, 
s
);

531 i‡(
s£_key
[0] != '\0') {

532 
	`¢¥ötf
(
s
, (s), "Authorization: AWS4-HMAC-SHA256 Credential=%s/%s/%s/s3/aws4_request,"

539 
o
->
s3_keyid
, 
d©e_sh‹t
, o->
s3_ªgi⁄
, 
sig«tuª
);

541 
	`¢¥ötf
(
s
, (s), "Authorization: AWS4-HMAC-SHA256 Credential=%s/%s/%s/s3/aws4_request,"

543 
o
->
s3_keyid
, 
d©e_sh‹t
, o->
s3_ªgi⁄
, 
sig«tuª
);

545 
¶i°
 = 
	`cuæ_¶i°_≠≥nd
(¶i°, 
s
);

547 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_HTTPHEADER
, 
¶i°
);

549 
	`‰ì
(
uri_ícoded
);

550 
	`‰ì
(
csha
);

551 
	`‰ì
(
dsha
);

552 
	`‰ì
(
sig«tuª
);

553 i‡(
s£_key_ba£64
 !
NULL
) {

554 
	`‰ì
(
s£_key_ba£64
);

555 
	`‰ì
(
s£_key_md5_ba£64
);

557 
	}
}

559 
	$_add_swi·_hódî
(
CURL
 *
cuæ
, 
cuæ_¶i°
 *
¶i°
, 
hâp_›ti⁄s
 *
o
,

560 
›
, c⁄° *
uri
, *
buf
, 
size_t
 
Àn
)

562 *
dsha
 = 
NULL
;

563 
s
[512];

565 i‡(
›
 =
DDIR_WRITE
) {

566 
dsha
 = 
	`_gí_hex_md5
(
buf
, 
Àn
);

569 
¶i°
 = 
	`cuæ_¶i°_≠≥nd
(slist, "Accept:");

571 
	`¢¥ötf
(
s
, (s), "ëag: %s", 
dsha
);

572 
¶i°
 = 
	`cuæ_¶i°_≠≥nd
(¶i°, 
s
);

574 
	`¢¥ötf
(
s
, (s), "x-auth-tokí: %s", 
o
->
swi·_auth_tokí
);

575 
¶i°
 = 
	`cuæ_¶i°_≠≥nd
(¶i°, 
s
);

577 
	`cuæ_ósy_£t›t
(
cuæ
, 
CURLOPT_HTTPHEADER
, 
¶i°
);

579 
	`‰ì
(
dsha
);

580 
	}
}

582 
	$fio_hâp_˛ónup
(
thªad_d©a
 *
td
)

584 
hâp_d©a
 *
hâp
 = 
td
->
io_›s_d©a
;

586 i‡(
hâp
) {

587 
	`cuæ_ósy_˛ónup
(
hâp
->
cuæ
);

588 
	`‰ì
(
hâp
);

590 
	}
}

592 
size_t
 
	$_hâp_ªad
(*
±r
, 
size_t
 
size
, size_à
nmemb
, *
°ªam
)

594 
hâp_cuæ_°ªam
 *
°©e
 = 
°ªam
;

595 
size_t
 
Àn
 = 
size
 * 
nmemb
;

597 i‡(!
°ªam
)

599 i‡(
Àn
+
°©e
->
pos
 > sèã->
max
)

600 
Àn
 = 
°©e
->
max
 - sèã->
pos
;

601 
	`mem˝y
(
±r
, &
°©e
->
buf
[°©e->
pos
], 
Àn
);

602 
°©e
->
pos
 +
Àn
;

603  
Àn
;

604 
	}
}

606 
size_t
 
	$_hâp_wrôe
(*
±r
, 
size_t
 
size
, size_à
nmemb
, *
°ªam
)

608 
hâp_cuæ_°ªam
 *
°©e
 = 
°ªam
;

610 i‡(!
°ªam
)

611  
nmemb
;

612 i‡(
size
 != 1)

613  
CURLE_WRITE_ERROR
;

614 i‡(
nmemb
 + 
°©e
->
pos
 > sèã->
max
)

615  
CURLE_WRITE_ERROR
;

616 
	`mem˝y
(&
°©e
->
buf
[°©e->
pos
], 
±r
, 
nmemb
);

617 
°©e
->
pos
 +
nmemb
;

618  
nmemb
;

619 
	}
}

621 
	$_hâp_£ek
(*
°ªam
, 
cuæ_off_t
 
off£t
, 
‹igö
)

623 
hâp_cuæ_°ªam
 *
°©e
 = 
°ªam
;

624 i‡(
off£t
 < 
°©e
->
max
 && 
‹igö
 =
SEEK_SET
) {

625 
°©e
->
pos
 = 
off£t
;

626  
CURL_SEEKFUNC_OK
;

628  
CURL_SEEKFUNC_FAIL
;

629 
	}
}

631 
fio_q_°©us
 
	$fio_hâp_queue
(
thªad_d©a
 *
td
,

632 
io_u
 *io_u)

634 
hâp_d©a
 *
hâp
 = 
td
->
io_›s_d©a
;

635 
hâp_›ti⁄s
 *
o
 = 
td
->
eo
;

636 
hâp_cuæ_°ªam
 
_cuæ_°ªam
;

637 
cuæ_¶i°
 *
¶i°
 = 
NULL
;

638 
obje˘
[512];

639 
uæ
[1024];

640 
°©us
;

641 
CURLcode
 
ªs
;

642 
r
 = -1;

644 
	`fio_ro_check
(
td
, 
io_u
);

645 
	`mem£t
(&
_cuæ_°ªam
, 0, (_curl_stream));

646 
	`¢¥ötf
(
obje˘
, (obje˘), "%s_%Œu_%Œu", 
td
->
fûes
[0]->
fûe_«me
,

647 
io_u
->
off£t
, io_u->
x„r_buÊí
);

648 i‡(
o
->
hâps
 =
FIO_HTTPS_OFF
)

649 
	`¢¥ötf
(
uæ
, (uæ), "hâp://%s%s", 
o
->
ho°
, 
obje˘
);

651 
	`¢¥ötf
(
uæ
, (uæ), "hâps://%s%s", 
o
->
ho°
, 
obje˘
);

652 
	`cuæ_ósy_£t›t
(
hâp
->
cuæ
, 
CURLOPT_URL
, 
uæ
);

653 
_cuæ_°ªam
.
buf
 = 
io_u
->
x„r_buf
;

654 
_cuæ_°ªam
.
max
 = 
io_u
->
x„r_buÊí
;

655 
	`cuæ_ósy_£t›t
(
hâp
->
cuæ
, 
CURLOPT_SEEKDATA
, &
_cuæ_°ªam
);

656 
	`cuæ_ósy_£t›t
(
hâp
->
cuæ
, 
CURLOPT_INFILESIZE_LARGE
, (
cuæ_off_t
)
io_u
->
x„r_buÊí
);

658 i‡(
o
->
mode
 =
FIO_HTTP_S3
)

659 
	`_add_aws_auth_hódî
(
hâp
->
cuæ
, 
¶i°
, 
o
, 
io_u
->
ddú
, 
obje˘
,

660 
io_u
->
x„r_buf
, io_u->
x„r_buÊí
);

661 i‡(
o
->
mode
 =
FIO_HTTP_SWIFT
)

662 
	`_add_swi·_hódî
(
hâp
->
cuæ
, 
¶i°
, 
o
, 
io_u
->
ddú
, 
obje˘
,

663 
io_u
->
x„r_buf
, io_u->
x„r_buÊí
);

665 i‡(
io_u
->
ddú
 =
DDIR_WRITE
) {

666 
	`cuæ_ósy_£t›t
(
hâp
->
cuæ
, 
CURLOPT_READDATA
, &
_cuæ_°ªam
);

667 
	`cuæ_ósy_£t›t
(
hâp
->
cuæ
, 
CURLOPT_WRITEDATA
, 
NULL
);

668 
	`cuæ_ósy_£t›t
(
hâp
->
cuæ
, 
CURLOPT_UPLOAD
, 1L);

669 
ªs
 = 
	`cuæ_ósy_≥rf‹m
(
hâp
->
cuæ
);

670 i‡(
ªs
 =
CURLE_OK
) {

671 
	`cuæ_ósy_gëöfo
(
hâp
->
cuæ
, 
CURLINFO_RESPONSE_CODE
, &
°©us
);

672 i‡(
°©us
 == 100 || (status >= 200 && status <= 204))

673 
out
;

674 
	`log_îr
("DDIR_WRITE faûed wôh HTTP sètu†codê%ld\n", 
°©us
);

676 
îr
;

677 } i‡(
io_u
->
ddú
 =
DDIR_READ
) {

678 
	`cuæ_ósy_£t›t
(
hâp
->
cuæ
, 
CURLOPT_READDATA
, 
NULL
);

679 
	`cuæ_ósy_£t›t
(
hâp
->
cuæ
, 
CURLOPT_WRITEDATA
, &
_cuæ_°ªam
);

680 
	`cuæ_ósy_£t›t
(
hâp
->
cuæ
, 
CURLOPT_HTTPGET
, 1L);

681 
ªs
 = 
	`cuæ_ósy_≥rf‹m
(
hâp
->
cuæ
);

682 i‡(
ªs
 =
CURLE_OK
) {

683 
	`cuæ_ósy_gëöfo
(
hâp
->
cuæ
, 
CURLINFO_RESPONSE_CODE
, &
°©us
);

684 i‡(
°©us
 == 200)

685 
out
;

686 i‡(
°©us
 == 404) {

689 
	`mem£t
(
io_u
->
x„r_buf
, 0, io_u->
x„r_buÊí
);

690 
out
;

692 
	`log_îr
("DDIR_READ faûed wôh HTTP sètu†codê%ld\n", 
°©us
);

694 
îr
;

695 } i‡(
io_u
->
ddú
 =
DDIR_TRIM
) {

696 
	`cuæ_ósy_£t›t
(
hâp
->
cuæ
, 
CURLOPT_HTTPGET
, 1L);

697 
	`cuæ_ósy_£t›t
(
hâp
->
cuæ
, 
CURLOPT_CUSTOMREQUEST
, "DELETE");

698 
	`cuæ_ósy_£t›t
(
hâp
->
cuæ
, 
CURLOPT_INFILESIZE_LARGE
, (
cuæ_off_t
)0);

699 
	`cuæ_ósy_£t›t
(
hâp
->
cuæ
, 
CURLOPT_READDATA
, 
NULL
);

700 
	`cuæ_ósy_£t›t
(
hâp
->
cuæ
, 
CURLOPT_WRITEDATA
, 
NULL
);

701 
ªs
 = 
	`cuæ_ósy_≥rf‹m
(
hâp
->
cuæ
);

702 i‡(
ªs
 =
CURLE_OK
) {

703 
	`cuæ_ósy_gëöfo
(
hâp
->
cuæ
, 
CURLINFO_RESPONSE_CODE
, &
°©us
);

704 i‡(
°©us
 == 200 || status == 202 || status == 204 || status == 404)

705 
out
;

706 
	`log_îr
("DDIR_TRIM faûed wôh HTTP sètu†codê%ld\n", 
°©us
);

708 
îr
;

711 
	`log_îr
("WARNING: Only DDIR_READ/DDIR_WRITE/DDIR_TRIMáre supported!\n");

713 
îr
:

714 
io_u
->
îr‹
 = 
r
;

715 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "transfer");

716 
out
:

717 
	`cuæ_¶i°_‰ì_Æl
(
¶i°
);

718  
FIO_Q_COMPLETED
;

719 
	}
}

721 
io_u
 *
	$fio_hâp_evít
(
thªad_d©a
 *
td
, 
evít
)

724  
NULL
;

725 
	}
}

727 
	$fio_hâp_gëevíts
(
thªad_d©a
 *
td
, 
mö
,

728 
max
, c⁄° 
time•ec
 *
t
)

732 
	}
}

734 
	$fio_hâp_£tup
(
thªad_d©a
 *
td
)

736 
hâp_d©a
 *
hâp
 = 
NULL
;

737 
hâp_›ti⁄s
 *
o
 = 
td
->
eo
;

740 
hâp
 = 
	`ˇŒoc
(1, (*http));

741 i‡(!
hâp
) {

742 
	`log_îr
("calloc failed.\n");

743 
˛ónup
;

746 
hâp
->
cuæ
 = 
	`cuæ_ósy_öô
();

747 i‡(
o
->
vîbo£
)

748 
	`cuæ_ósy_£t›t
(
hâp
->
cuæ
, 
CURLOPT_VERBOSE
, 1L);

749 i‡(
o
->
vîbo£
 > 1)

750 
	`cuæ_ósy_£t›t
(
hâp
->
cuæ
, 
CURLOPT_DEBUGFUNCTION
, &
_cuæ_åa˚
);

751 
	`cuæ_ósy_£t›t
(
hâp
->
cuæ
, 
CURLOPT_NOPROGRESS
, 1L);

752 
	`cuæ_ósy_£t›t
(
hâp
->
cuæ
, 
CURLOPT_FOLLOWLOCATION
, 1L);

753 
	`cuæ_ósy_£t›t
(
hâp
->
cuæ
, 
CURLOPT_PROTOCOLS
, 
CURLPROTO_HTTP
|
CURLPROTO_HTTPS
);

754 i‡(
o
->
hâps
 =
FIO_HTTPS_INSECURE
) {

755 
	`cuæ_ósy_£t›t
(
hâp
->
cuæ
, 
CURLOPT_SSL_VERIFYPEER
, 0L);

756 
	`cuæ_ósy_£t›t
(
hâp
->
cuæ
, 
CURLOPT_SSL_VERIFYHOST
, 0L);

758 
	`cuæ_ósy_£t›t
(
hâp
->
cuæ
, 
CURLOPT_READFUNCTION
, 
_hâp_ªad
);

759 
	`cuæ_ósy_£t›t
(
hâp
->
cuæ
, 
CURLOPT_WRITEFUNCTION
, 
_hâp_wrôe
);

760 
	`cuæ_ósy_£t›t
(
hâp
->
cuæ
, 
CURLOPT_SEEKFUNCTION
, &
_hâp_£ek
);

761 i‡(
o
->
u£r
 && o->
∑ss
) {

762 
	`cuæ_ósy_£t›t
(
hâp
->
cuæ
, 
CURLOPT_USERNAME
, 
o
->
u£r
);

763 
	`cuæ_ósy_£t›t
(
hâp
->
cuæ
, 
CURLOPT_PASSWORD
, 
o
->
∑ss
);

764 
	`cuæ_ósy_£t›t
(
hâp
->
cuæ
, 
CURLOPT_HTTPAUTH
, 
CURLAUTH_ANY
);

767 
td
->
io_›s_d©a
 = 
hâp
;

770 
td
->
o
.
u£_thªad
 = 1;

773 
˛ónup
:

774 
	`fio_hâp_˛ónup
(
td
);

776 
	}
}

778 
	$fio_hâp_›í
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

781 
	}
}

782 
	$fio_hâp_övÆid©e
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

785 
	}
}

787 
FIO_STATIC
 
i€ngöe_›s
 
	gi€ngöe
 = {

788 .
«me
 = "http",

789 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

790 .
	gÊags
 = 
FIO_DISKLESSIO
 | 
FIO_SYNCIO
,

791 .
	g£tup
 = 
fio_hâp_£tup
,

792 .
	gqueue
 = 
fio_hâp_queue
,

793 .
	ggëevíts
 = 
fio_hâp_gëevíts
,

794 .
	gevít
 = 
fio_hâp_evít
,

795 .
	g˛ónup
 = 
fio_hâp_˛ónup
,

796 .
	g›í_fûe
 = 
fio_hâp_›í
,

797 .
	gövÆid©e
 = 
fio_hâp_övÆid©e
,

798 .
	g›ti⁄s
 = 
›ti⁄s
,

799 .
	g›ti⁄_°ru˘_size
 = (
hâp_›ti⁄s
),

802 
fio_öô
 
	$fio_hâp_ªgi°î
()

804 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

805 
	}
}

807 
fio_exô
 
	$fio_hâp_uƒegi°î
()

809 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

810 
	}
}

	@engines/ime.c

39 
	~<°dio.h
>

40 
	~<°dlib.h
>

41 
	~<î∫o.h
>

42 
	~<löux/limôs.h
>

43 
	~<ime_«tive.h
>

45 
	~"../fio.h
"

54 
	#FIO_IME_IN_PROGRESS
 -1

	)

55 
	#FIO_IME_REQ_ERROR
 -2

	)

63 
boﬁ
 
	gfio_ime_is_öôülized
 = 
Ál£
;

65 
	simesio_ªq
 {

66 
	mfd
;

67 
fio_ddú
 
	mddú
;

68 
off_t
 
	moff£t
;

70 
	simóio_ªq
 {

71 
ime_aiocb
 
	miocb
;

72 
ssize_t
 
	m°©us
;

73 
fio_ddú
 
	mddú
;

74 
±hªad_c⁄d_t
 
	mc⁄d_ídio
;

75 
±hªad_muãx_t
 
	m°©us_muãx
;

79 
	sime_d©a
 {

81 
imóio_ªq
 *
	mai‹eqs
;

82 
imesio_ªq
 *
	msi‹eq
;

84 
iovec
 *
	miovecs
;

85 
io_u
 **
	mio_us
;

86 
io_u
 **
	mevít_io_us
;

87 
	mqueued
;

88 
	mevíts
;

91 
	mdïth
;

92 
	mhód
;

93 
	mèû
;

94 
	mcur_commô
;

97 
	mœ°_off£t
;

100 
imóio_ªq
 *
	mœ°_ªq
;

109 
	$fio_ime_queue_ö¸
 (
ime_d©a
 *
ime_d
)

111 
ime_d
->
hód
 = (ime_d->hód + 1Ë% ime_d->
dïth
;

112 
ime_d
->
queued
++;

113 
	}
}

115 
	$fio_ime_queue_ªd
 (
ime_d©a
 *
ime_d
)

117 
ime_d
->
èû
 = (ime_d->èû + 1Ë% ime_d->
dïth
;

118 
ime_d
->
queued
--;

119 
ime_d
->
evíts
--;

120 
	}
}

122 
	$fio_ime_queue_commô
 (
ime_d©a
 *
ime_d
, 
iov˙t
)

124 
ime_d
->
cur_commô
 = (ime_d->cur_commô + 
iov˙t
Ë% ime_d->
dïth
;

125 
ime_d
->
evíts
 +
iov˙t
;

126 
	}
}

128 
	$fio_ime_queue_ª£t
 (
ime_d©a
 *
ime_d
)

130 
ime_d
->
hód
 = 0;

131 
ime_d
->
èû
 = 0;

132 
ime_d
->
cur_commô
 = 0;

133 
ime_d
->
queued
 = 0;

134 
ime_d
->
evíts
 = 0;

135 
	}
}

142 *
	$fio_£t_ime_fûíame
(* 
fûíame
)

144 
__thªad
 
ime_fûíame
[
PATH_MAX
];

145 
ªt
;

147 
ªt
 = 
	`¢¥ötf
(
ime_fûíame
, 
PATH_MAX
, "%s%s", 
DEFAULT_IME_FILE_PREFIX
, 
fûíame
);

148 i‡(
ªt
 < 
PATH_MAX
)

149  
ime_fûíame
;

151  
NULL
;

152 
	}
}

154 
	$fio_ime_gë_fûe_size
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

156 
°©
 
buf
;

157 
ªt
;

158 *
ime_fûíame
;

160 
	`d¥öt
(
FD_FILE
, "gë fûêsizê%s\n", 
f
->
fûe_«me
);

162 
ime_fûíame
 = 
	`fio_£t_ime_fûíame
(
f
->
fûe_«me
);

163 i‡(
ime_fûíame
 =
NULL
)

165 
ªt
 = 
	`ime_«tive_°©
(
ime_fûíame
, &
buf
);

166 i‡(
ªt
 == -1) {

167 
	`td_vîr‹
(
td
, 
î∫o
, "fstat");

171 
f
->
ªÆ_fûe_size
 = 
buf
.
°_size
;

173 
	}
}

177 
	$fio_ime_›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

179 
Êags
 = 0;

180 
ªt
;

181 
uöt64_t
 
desúed_fs
;

182 *
ime_fûíame
;

184 
	`d¥öt
(
FD_FILE
, "fd o≥¿%s\n", 
f
->
fûe_«me
);

186 i‡(
	`td_åim
(
td
)) {

187 
	`td_vîr‹
(
td
, 
EINVAL
, "IME doesÇot support TRIM operation");

191 i‡(
td
->
o
.
ﬂtomic
) {

192 
	`td_vîr‹
(
td
, 
EINVAL
, "IME doesÇot supportátomic IO");

195 i‡(
td
->
o
.
odúe˘
)

196 
Êags
 |
O_DIRECT
;

197 
Êags
 |
td
->
o
.
sync_io
;

198 i‡(
td
->
o
.
¸óã_⁄_›í
 &&Åd->o.
Ælow_¸óã
)

199 
Êags
 |
O_CREAT
;

201 i‡(
	`td_wrôe
(
td
)) {

202 i‡(!
ªad_⁄ly
)

203 
Êags
 |
O_RDWR
;

205 i‡(
td
->
o
.
Ælow_¸óã
)

206 
Êags
 |
O_CREAT
;

207 } i‡(
	`td_ªad
(
td
)) {

208 
Êags
 |
O_RDONLY
;

211 
	`td_vîr‹
(
td
, 
EINVAL
, "Unsopported open mode");

215 
ime_fûíame
 = 
	`fio_£t_ime_fûíame
(
f
->
fûe_«me
);

216 i‡(
ime_fûíame
 =
NULL
)

218 
f
->
fd
 = 
	`ime_«tive_›í
(
ime_fûíame
, 
Êags
, 0600);

219 i‡(
f
->
fd
 == -1) {

220 
buf
[
FIO_VERROR_SIZE
];

221 
__e
 = 
î∫o
;

223 
	`¢¥ötf
(
buf
, (buf), "›í(%s)", 
f
->
fûe_«me
);

224 
	`td_vîr‹
(
td
, 
__e
, 
buf
);

232 
ªt
 = 
	`fio_ime_gë_fûe_size
(
td
, 
f
);

233 i‡(
ªt
 < 0) {

234 
	`ime_«tive_˛o£
(
f
->
fd
);

235 
	`td_vîr‹
(
td
, 
î∫o
, "ime_get_file_size");

239 
desúed_fs
 = 
f
->
io_size
 + f->
fûe_off£t
;

240 i‡(
	`td_wrôe
(
td
)) {

241 
	`d¥öt
(
FD_FILE
, "Laying out file %s%s\n",

242 
DEFAULT_IME_FILE_PREFIX
, 
f
->
fûe_«me
);

243 i‡(!
td
->
o
.
¸óã_⁄_›í
 &&

244 
f
->
ªÆ_fûe_size
 < 
desúed_fs
 &&

245 
	`ime_«tive_·runˇã
(
f
->
fd
, 
desúed_fs
) < 0) {

246 
	`ime_«tive_˛o£
(
f
->
fd
);

247 
	`td_vîr‹
(
td
, 
î∫o
, "ime_native_ftruncate");

250 i‡(
f
->
ªÆ_fûe_size
 < 
desúed_fs
)

251 
f
->
ªÆ_fûe_size
 = 
desúed_fs
;

252 } i‡(
	`td_ªad
(
td
Ë&& 
f
->
ªÆ_fûe_size
 < 
desúed_fs
) {

253 
	`ime_«tive_˛o£
(
f
->
fd
);

254 
	`log_îr
("error: can'tÑead %lu bytes from file with "

255 "%lu byãs\n", 
desúed_fs
, 
f
->
ªÆ_fûe_size
);

260 
	}
}

262 
	$fio_ime_˛o£_fûe
(
thªad_d©a
 
fio_unu£d
 *
td
, 
fio_fûe
 *
f
)

264 
ªt
 = 0;

266 
	`d¥öt
(
FD_FILE
, "fd clo£ %s\n", 
f
->
fûe_«me
);

268 i‡(
	`ime_«tive_˛o£
(
f
->
fd
) < 0)

269 
ªt
 = 
î∫o
;

271 
f
->
fd
 = -1;

272  
ªt
;

273 
	}
}

275 
	$fio_ime_u∆ök_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

277 *
ime_fûíame
 = 
	`fio_£t_ime_fûíame
(
f
->
fûe_«me
);

278 
ªt
;

280 i‡(
ime_fûíame
 =
NULL
)

283 
ªt
 = 
	`u∆ök
(
ime_fûíame
);

284  
ªt
 < 0 ? 
î∫o
 : 0;

285 
	}
}

287 
io_u
 *
	$fio_ime_evít
(
thªad_d©a
 *
td
, 
evít
)

289 
ime_d©a
 *
ime_d
 = 
td
->
io_›s_d©a
;

291  
ime_d
->
evít_io_us
[
evít
];

292 
	}
}

297 
	$fio_ime_£tup
(
thªad_d©a
 *
td
)

299 
fio_fûe
 *
f
;

300 
i
;

302 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

303 
	`d¥öt
(
FD_FILE
, "setup: set file sizeÅo 0 for %p/%d/%s\n",

304 
f
, 
i
, f->
fûe_«me
);

305 
f
->
ªÆ_fûe_size
 = 0;

309 
	}
}

311 
	$fio_ime_ígöe_öô
(
thªad_d©a
 *
td
)

313 
fio_fûe
 *
f
;

314 
i
;

316 
	`d¥öt
(
FD_IO
, "imeÉngine init\n");

317 i‡(
fio_ime_is_öôülized
 && !
td
->
o
.
u£_thªad
) {

318 
	`log_îr
("Warning: something might go wrong. NotállÅhreads/forks were"

322 
	`ime_«tive_öô
();

323 
fio_ime_is_öôülized
 = 
åue
;

328 
	`f‹_óch_fûe
(
td
, 
f
, 
i
)

329 
f
->
ªÆ_fûe_size
 = f->
io_size
 + f->
fûe_off£t
;

332 
	}
}

334 
	$fio_ime_ígöe_föÆize
(
thªad_d©a
 *
td
)

337 i‡(!
td
->
o
.
u£_thªad
) {

338 i‡(
	`ime_«tive_föÆize
() < 0)

339 
	`log_îr
("error in ime_native_finalize\n");

340 
fio_ime_is_öôülized
 = 
Ál£
;

342 
	}
}

353 
	$fio_ime_psync_íd
(
thªad_d©a
 *
td
, 
io_u
 *io_u, 
ssize_t
 
ªt
)

355 i‡(
ªt
 !(
ssize_t
Ë
io_u
->
x„r_buÊí
) {

356 i‡(
ªt
 >= 0) {

357 
io_u
->
ªsid
 = io_u->
x„r_buÊí
 - 
ªt
;

358 
io_u
->
îr‹
 = 0;

359  
FIO_Q_COMPLETED
;

361 
io_u
->
îr‹
 = 
î∫o
;

364 i‡(
io_u
->
îr‹
) {

365 
	`io_u_log_îr‹
(
td
, 
io_u
);

366 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "xfer");

369  
FIO_Q_COMPLETED
;

370 
	}
}

372 
fio_q_°©us
 
	$fio_ime_psync_queue
(
thªad_d©a
 *
td
,

373 
io_u
 *io_u)

375 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

376 
ssize_t
 
ªt
;

378 
	`fio_ro_check
(
td
, 
io_u
);

380 i‡(
io_u
->
ddú
 =
DDIR_READ
)

381 
ªt
 = 
	`ime_«tive_¥ód
(
f
->
fd
, 
io_u
->
x„r_buf
, io_u->
x„r_buÊí
, io_u->
off£t
);

382 i‡(
io_u
->
ddú
 =
DDIR_WRITE
)

383 
ªt
 = 
	`ime_«tive_pwrôe
(
f
->
fd
, 
io_u
->
x„r_buf
, io_u->
x„r_buÊí
, io_u->
off£t
);

384 i‡(
io_u
->
ddú
 =
DDIR_SYNC
)

385 
ªt
 = 
	`ime_«tive_fsync
(
f
->
fd
);

387 
ªt
 = 
io_u
->
x„r_buÊí
;

388 
io_u
->
îr‹
 = 
EINVAL
;

391  
	`fio_ime_psync_íd
(
td
, 
io_u
, 
ªt
);

392 
	}
}

400 
boﬁ
 
	$fio_ime_psyncv_ˇn_queue
(
ime_d©a
 *
ime_d
, 
io_u
 *io_u)

408  (
ime_d
->
queued
 == 0 || (

409 
ime_d
->
evíts
 == 0 &&

410 
ime_d
->
œ°_off£t
 =
io_u
->
off£t
 &&

411 
ime_d
->
si‹eq
->
ddú
 =
io_u
->ddir &&

412 
ime_d
->
si‹eq
->
fd
 =
io_u
->
fûe
->fd));

413 
	}
}

417 
	$fio_ime_psyncv_íqueue
(
ime_d©a
 *
ime_d
, 
io_u
 *io_u)

419 
imesio_ªq
 *
i‹eq
 = 
ime_d
->
si‹eq
;

420 
iovec
 *
iov
 = &
ime_d
->
iovecs
[ime_d->
hód
];

422 
iov
->
iov_ba£
 = 
io_u
->
x„r_buf
;

423 
iov
->
iov_Àn
 = 
io_u
->
x„r_buÊí
;

425 i‡(
ime_d
->
queued
 == 0) {

426 
i‹eq
->
off£t
 = 
io_u
->offset;

427 
i‹eq
->
ddú
 = 
io_u
->ddir;

428 
i‹eq
->
fd
 = 
io_u
->
fûe
->fd;

431 
ime_d
->
io_us
[ime_d->
hód
] = 
io_u
;

432 
ime_d
->
œ°_off£t
 = 
io_u
->
off£t
 + io_u->
x„r_buÊí
;

433 
	`fio_ime_queue_ö¸
(
ime_d
);

434 
	}
}

439 
fio_q_°©us
 
	$fio_ime_psyncv_queue
(
thªad_d©a
 *
td
,

440 
io_u
 *io_u)

442 
ime_d©a
 *
ime_d
 = 
td
->
io_›s_d©a
;

444 
	`fio_ro_check
(
td
, 
io_u
);

446 i‡(
ime_d
->
queued
 =ime_d->
dïth
)

447  
FIO_Q_BUSY
;

449 i‡(
io_u
->
ddú
 =
DDIR_READ
 || io_u->ddú =
DDIR_WRITE
) {

450 i‡(!
	`fio_ime_psyncv_ˇn_queue
(
ime_d
, 
io_u
))

451  
FIO_Q_BUSY
;

453 
	`d¥öt
(
FD_IO
, "queue: ddir=%dát %u commit=%u queued=%uÉvents=%u\n",

454 
io_u
->
ddú
, 
ime_d
->
hód
, ime_d->
cur_commô
,

455 
ime_d
->
queued
, ime_d->
evíts
);

456 
	`fio_ime_psyncv_íqueue
(
ime_d
, 
io_u
);

457  
FIO_Q_QUEUED
;

458 } i‡(
io_u
->
ddú
 =
DDIR_SYNC
) {

459 i‡(
	`ime_«tive_fsync
(
io_u
->
fûe
->
fd
) < 0) {

460 
io_u
->
îr‹
 = 
î∫o
;

461 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "fsync");

463  
FIO_Q_COMPLETED
;

465 
io_u
->
îr‹
 = 
EINVAL
;

466 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "wrong ddir");

467  
FIO_Q_COMPLETED
;

469 
	}
}

474 
	$fio_ime_psyncv_íd
(
thªad_d©a
 *
td
, 
ssize_t
 
byãs
)

476 
ime_d©a
 *
ime_d
 = 
td
->
io_›s_d©a
;

477 
io_u
 *io_u;

478 
i
;

479 
îr
 = 
î∫o
;

481 
i
 = 0; i < 
ime_d
->
queued
; i++) {

482 
io_u
 = 
ime_d
->
io_us
[
i
];

484 i‡(
byãs
 == -1)

485 
io_u
->
îr‹
 = 
îr
;

487 
this_io
;

489 
this_io
 = 
byãs
;

490 i‡(
this_io
 > 
io_u
->
x„r_buÊí
)

491 
this_io
 = 
io_u
->
x„r_buÊí
;

493 
io_u
->
ªsid
 = io_u->
x„r_buÊí
 - 
this_io
;

494 
io_u
->
îr‹
 = 0;

495 
byãs
 -
this_io
;

499 i‡(
byãs
 == -1) {

500 
	`td_vîr‹
(
td
, 
îr
, "xferÖsyncv");

501  -
îr
;

505 
	}
}

510 
	$fio_ime_psyncv_commô
(
thªad_d©a
 *
td
)

512 
ime_d©a
 *
ime_d
 = 
td
->
io_›s_d©a
;

513 
imesio_ªq
 *
i‹eq
;

514 
ªt
 = 0;

518 i‡(!
ime_d
->
queued
 || ime_d->
evíts
)

521 
i‹eq
 = 
ime_d
->
si‹eq
;

522 
ime_d
->
evíts
 = ime_d->
queued
;

523 i‡(
i‹eq
->
ddú
 =
DDIR_READ
)

524 
ªt
 = 
	`ime_«tive_¥ódv
(
i‹eq
->
fd
, 
ime_d
->
iovecs
, ime_d->
queued
, i‹eq->
off£t
);

526 
ªt
 = 
	`ime_«tive_pwrôev
(
i‹eq
->
fd
, 
ime_d
->
iovecs
, ime_d->
queued
, i‹eq->
off£t
);

528 
	`d¥öt
(
FD_IO
, "commôãd %d iovecs\n", 
ime_d
->
queued
);

530  
	`fio_ime_psyncv_íd
(
td
, 
ªt
);

531 
	}
}

533 
	$fio_ime_psyncv_gëevíts
(
thªad_d©a
 *
td
, 
mö
,

534 
max
, c⁄° 
time•ec
 *
t
)

536 
ime_d©a
 *
ime_d
 = 
td
->
io_›s_d©a
;

537 
io_u
 *io_u;

538 
evíts
 = 0;

539 
cou¡
;

541 i‡(
ime_d
->
evíts
) {

542 
cou¡
 = 0; cou¡ < 
ime_d
->
evíts
; count++) {

543 
io_u
 = 
ime_d
->
io_us
[
cou¡
];

544 
ime_d
->
evít_io_us
[
evíts
] = 
io_u
;

545 
evíts
++;

547 
	`fio_ime_queue_ª£t
(
ime_d
);

550 
	`d¥öt
(
FD_IO
, "getevents(%u,%u)Ñet=%d queued=%uÉvents=%u\n",

551 
mö
, 
max
, 
evíts
, 
ime_d
->
queued
, ime_d->events);

552  
evíts
;

553 
	}
}

555 
	$fio_ime_psyncv_öô
(
thªad_d©a
 *
td
)

557 
ime_d©a
 *
ime_d
;

559 i‡(
	`fio_ime_ígöe_öô
(
td
) < 0)

562 
ime_d
 = 
	`ˇŒoc
(1, (*ime_d));

564 
ime_d
->
si‹eq
 = 
	`mÆloc
((
imesio_ªq
));

565 
ime_d
->
iovecs
 = 
	`mÆloc
(
td
->
o
.
iodïth
 * (
iovec
));

566 
ime_d
->
io_us
 = 
	`mÆloc
(2 * 
td
->
o
.
iodïth
 * (
io_u
 *));

567 
ime_d
->
evít_io_us
 = ime_d->
io_us
 + 
td
->
o
.
iodïth
;

569 
ime_d
->
dïth
 = 
td
->
o
.
iodïth
;

571 
td
->
io_›s_d©a
 = 
ime_d
;

573 
	}
}

575 
	$fio_ime_psyncv_˛ón
(
thªad_d©a
 *
td
)

577 
ime_d©a
 *
ime_d
 = 
td
->
io_›s_d©a
;

579 i‡(
ime_d
) {

580 
	`‰ì
(
ime_d
->
si‹eq
);

581 
	`‰ì
(
ime_d
->
iovecs
);

582 
	`‰ì
(
ime_d
->
io_us
);

583 
	`‰ì
(
ime_d
);

584 
td
->
io_›s_d©a
 = 
NULL
;

587 
	`fio_ime_ígöe_föÆize
(
td
);

588 
	}
}

596 
	$fio_ime_aio_com∂ëe_cb
 (
ime_aiocb
 *
aiocb
, 
îr
,

597 
ssize_t
 
byãs
)

599 
imóio_ªq
 *
i‹eq
 = (imóio_ªq *Ë
aiocb
->
u£r_c⁄ãxt
;

601 
	`±hªad_muãx_lock
(&
i‹eq
->
°©us_muãx
);

602 
i‹eq
->
°©us
 = 
îr
 =0 ? 
byãs
 : 
FIO_IME_REQ_ERROR
;

603 
	`±hªad_muãx_u∆ock
(&
i‹eq
->
°©us_muãx
);

605 
	`±hªad_c⁄d_sig«l
(&
i‹eq
->
c⁄d_ídio
);

606 
	}
}

608 
boﬁ
 
	$fio_ime_aio_ˇn_queue
 (
ime_d©a
 *
ime_d
, 
io_u
 *io_u)

611  
åue
;

612 
	}
}

613 
boﬁ
 
	$fio_ime_aio_ˇn_≠≥nd
 (
ime_d©a
 *
ime_d
, 
io_u
 *io_u)

620  (
ime_d
->
hód
 != 0 &&

621 
ime_d
->
queued
 - ime_d->
evíts
 > 0 &&

622 
ime_d
->
œ°_off£t
 =
io_u
->
off£t
 &&

623 
ime_d
->
œ°_ªq
->
ddú
 =
io_u
->ddir &&

624 
ime_d
->
œ°_ªq
->
iocb
.
fd
 =
io_u
->
fûe
->fd);

625 
	}
}

629 
	$fio_ime_aio_íqueue
(
ime_d©a
 *
ime_d
, 
io_u
 *io_u)

631 
imóio_ªq
 *
i‹eq
 = &
ime_d
->
ai‹eqs
[ime_d->
hód
];

632 
ime_aiocb
 *
iocb
 = &
i‹eq
->iocb;

633 
iovec
 *
iov
 = &
ime_d
->
iovecs
[ime_d->
hód
];

635 
iov
->
iov_ba£
 = 
io_u
->
x„r_buf
;

636 
iov
->
iov_Àn
 = 
io_u
->
x„r_buÊí
;

638 i‡(
	`fio_ime_aio_ˇn_≠≥nd
(
ime_d
, 
io_u
))

639 
ime_d
->
œ°_ªq
->
iocb
.
iov˙t
++;

641 
i‹eq
->
°©us
 = 
FIO_IME_IN_PROGRESS
;

642 
i‹eq
->
ddú
 = 
io_u
->ddir;

643 
ime_d
->
œ°_ªq
 = 
i‹eq
;

645 
iocb
->
com∂ëe_cb
 = &
fio_ime_aio_com∂ëe_cb
;

646 
iocb
->
fd
 = 
io_u
->
fûe
->fd;

647 
iocb
->
fûe_off£t
 = 
io_u
->
off£t
;

648 
iocb
->
iov
 = iov;

649 
iocb
->
iov˙t
 = 1;

650 
iocb
->
Êags
 = 0;

651 
iocb
->
u£r_c⁄ãxt
 = (
öçå_t
Ë
i‹eq
;

654 
ime_d
->
io_us
[ime_d->
hód
] = 
io_u
;

655 
ime_d
->
œ°_off£t
 = 
io_u
->
off£t
 + io_u->
x„r_buÊí
;

656 
	`fio_ime_queue_ö¸
(
ime_d
);

657 
	}
}

663 
fio_q_°©us
 
	$fio_ime_aio_queue
(
thªad_d©a
 *
td
,

664 
io_u
 *io_u)

666 
ime_d©a
 *
ime_d
 = 
td
->
io_›s_d©a
;

668 
	`fio_ro_check
(
td
, 
io_u
);

670 
	`d¥öt
(
FD_IO
, "queue: ddir=%dát %u commit=%u queued=%uÉvents=%u\n",

671 
io_u
->
ddú
, 
ime_d
->
hód
, ime_d->
cur_commô
,

672 
ime_d
->
queued
, ime_d->
evíts
);

674 i‡(
ime_d
->
queued
 =ime_d->
dïth
)

675  
FIO_Q_BUSY
;

677 i‡(
io_u
->
ddú
 =
DDIR_READ
 || io_u->ddú =
DDIR_WRITE
) {

678 i‡(!
	`fio_ime_aio_ˇn_queue
(
ime_d
, 
io_u
))

679  
FIO_Q_BUSY
;

681 
	`fio_ime_aio_íqueue
(
ime_d
, 
io_u
);

682  
FIO_Q_QUEUED
;

683 } i‡(
io_u
->
ddú
 =
DDIR_SYNC
) {

684 i‡(
	`ime_«tive_fsync
(
io_u
->
fûe
->
fd
) < 0) {

685 
io_u
->
îr‹
 = 
î∫o
;

686 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "fsync");

688  
FIO_Q_COMPLETED
;

690 
io_u
->
îr‹
 = 
EINVAL
;

691 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "wrong ddir");

692  
FIO_Q_COMPLETED
;

694 
	}
}

696 
	$fio_ime_aio_commô
(
thªad_d©a
 *
td
)

698 
ime_d©a
 *
ime_d
 = 
td
->
io_›s_d©a
;

699 
imóio_ªq
 *
i‹eq
;

700 
ªt
 = 0;

703 
ime_d
->
queued
 - ime_d->
evíts
) {

704 
i‹eq
 = &
ime_d
->
ai‹eqs
[ime_d->
cur_commô
];

705 i‡(
i‹eq
->
ddú
 =
DDIR_READ
)

706 
ªt
 = 
	`ime_«tive_aio_ªad
(&
i‹eq
->
iocb
);

708 
ªt
 = 
	`ime_«tive_aio_wrôe
(&
i‹eq
->
iocb
);

710 
	`fio_ime_queue_commô
(
ime_d
, 
i‹eq
->
iocb
.
iov˙t
);

713 i‡(
ªt
 < 0) {

714 
i‹eq
->
°©us
 = 
FIO_IME_REQ_ERROR
;

715  -
î∫o
;

718 
	`io_u_m¨k_submô
(
td
, 
i‹eq
->
iocb
.
iov˙t
);

719 
	`d¥öt
(
FD_IO
, "committed %d iovecs commit=%u queued=%uÉvents=%u\n",

720 
i‹eq
->
iocb
.
iov˙t
, 
ime_d
->
cur_commô
,

721 
ime_d
->
queued
, ime_d->
evíts
);

725 
	}
}

727 
	$fio_ime_aio_gëevíts
(
thªad_d©a
 *
td
, 
mö
,

728 
max
, c⁄° 
time•ec
 *
t
)

730 
ime_d©a
 *
ime_d
 = 
td
->
io_›s_d©a
;

731 
imóio_ªq
 *
i‹eq
;

732 
io_u
 *io_u;

733 
evíts
 = 0;

734 
cou¡
;

735 
ssize_t
 
byãs
;

737 
ime_d
->
evíts
) {

738 
i‹eq
 = &
ime_d
->
ai‹eqs
[ime_d->
èû
];

742 i‡(
evíts
 &&Évít†+ 
i‹eq
->
iocb
.
iov˙t
 > 
max
)

745 i‡(
i‹eq
->
°©us
 !
FIO_IME_IN_PROGRESS
) {

747 
byãs
 = 
i‹eq
->
°©us
;

748 
cou¡
 = 0; cou¡ < 
i‹eq
->
iocb
.
iov˙t
; count++) {

749 
io_u
 = 
ime_d
->
io_us
[ime_d->
èû
];

750 
ime_d
->
evít_io_us
[
evíts
] = 
io_u
;

751 
evíts
++;

752 
	`fio_ime_queue_ªd
(
ime_d
);

754 i‡(
i‹eq
->
°©us
 =
FIO_IME_REQ_ERROR
)

755 
io_u
->
îr‹
 = 
EIO
;

757 
io_u
->
ªsid
 = 
byãs
 > io_u->
x„r_buÊí
 ?

758 0 : 
io_u
->
x„r_buÊí
 - 
byãs
;

759 
io_u
->
îr‹
 = 0;

760 
byãs
 -
io_u
->
x„r_buÊí
 - io_u->
ªsid
;

764 
	`±hªad_muãx_lock
(&
i‹eq
->
°©us_muãx
);

765 
i‹eq
->
°©us
 =
FIO_IME_IN_PROGRESS
)

766 
	`±hªad_c⁄d_waô
(&
i‹eq
->
c⁄d_ídio
, &i‹eq->
°©us_muãx
);

767 
	`±hªad_muãx_u∆ock
(&
i‹eq
->
°©us_muãx
);

772 
	`d¥öt
(
FD_IO
, "gëevíts(%u,%uËªt=%d queued=%uÉvíts=%u\n", 
mö
, 
max
,

773 
evíts
, 
ime_d
->
queued
, ime_d->events);

774  
evíts
;

775 
	}
}

777 
	$fio_ime_aio_öô
(
thªad_d©a
 *
td
)

779 
ime_d©a
 *
ime_d
;

780 
imóio_ªq
 *
i‹eq
;

781 
i
;

783 i‡(
	`fio_ime_ígöe_öô
(
td
) < 0)

786 
ime_d
 = 
	`ˇŒoc
(1, (*ime_d));

788 
ime_d
->
ai‹eqs
 = 
	`mÆloc
(
td
->
o
.
iodïth
 * (
imóio_ªq
));

789 
ime_d
->
iovecs
 = 
	`mÆloc
(
td
->
o
.
iodïth
 * (
iovec
));

790 
ime_d
->
io_us
 = 
	`mÆloc
(2 * 
td
->
o
.
iodïth
 * (
io_u
 *));

791 
ime_d
->
evít_io_us
 = ime_d->
io_us
 + 
td
->
o
.
iodïth
;

793 
ime_d
->
dïth
 = 
td
->
o
.
iodïth
;

794 
i
 = 0; i < 
ime_d
->
dïth
; i++) {

795 
i‹eq
 = &
ime_d
->
ai‹eqs
[
i
];

796 
	`±hªad_c⁄d_öô
(&
i‹eq
->
c⁄d_ídio
, 
NULL
);

797 
	`±hªad_muãx_öô
(&
i‹eq
->
°©us_muãx
, 
NULL
);

800 
td
->
io_›s_d©a
 = 
ime_d
;

802 
	}
}

804 
	$fio_ime_aio_˛ón
(
thªad_d©a
 *
td
)

806 
ime_d©a
 *
ime_d
 = 
td
->
io_›s_d©a
;

807 
imóio_ªq
 *
i‹eq
;

808 
i
;

810 i‡(
ime_d
) {

811 
i
 = 0; i < 
ime_d
->
dïth
; i++) {

812 
i‹eq
 = &
ime_d
->
ai‹eqs
[
i
];

813 
	`±hªad_c⁄d_de°roy
(&
i‹eq
->
c⁄d_ídio
);

814 
	`±hªad_muãx_de°roy
(&
i‹eq
->
°©us_muãx
);

816 
	`‰ì
(
ime_d
->
ai‹eqs
);

817 
	`‰ì
(
ime_d
->
iovecs
);

818 
	`‰ì
(
ime_d
->
io_us
);

819 
	`‰ì
(
ime_d
);

820 
td
->
io_›s_d©a
 = 
NULL
;

823 
	`fio_ime_ígöe_föÆize
(
td
);

824 
	}
}

835 
i€ngöe_›s
 
	gi€ngöe_¥w
 = {

836 .
«me
 = "ime_psync",

837 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

838 .
	g£tup
 = 
fio_ime_£tup
,

839 .
	göô
 = 
fio_ime_ígöe_öô
,

840 .
	g˛ónup
 = 
fio_ime_ígöe_föÆize
,

841 .
	gqueue
 = 
fio_ime_psync_queue
,

842 .
	g›í_fûe
 = 
fio_ime_›í_fûe
,

843 .
	g˛o£_fûe
 = 
fio_ime_˛o£_fûe
,

844 .
	ggë_fûe_size
 = 
fio_ime_gë_fûe_size
,

845 .
	gu∆ök_fûe
 = 
fio_ime_u∆ök_fûe
,

846 .
	gÊags
 = 
FIO_SYNCIO
 | 
FIO_DISKLESSIO
,

849 
i€ngöe_›s
 
	gi€ngöe_pvrw
 = {

850 .
«me
 = "ime_psyncv",

851 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

852 .
	g£tup
 = 
fio_ime_£tup
,

853 .
	göô
 = 
fio_ime_psyncv_öô
,

854 .
	g˛ónup
 = 
fio_ime_psyncv_˛ón
,

855 .
	gqueue
 = 
fio_ime_psyncv_queue
,

856 .
	gcommô
 = 
fio_ime_psyncv_commô
,

857 .
	ggëevíts
 = 
fio_ime_psyncv_gëevíts
,

858 .
	gevít
 = 
fio_ime_evít
,

859 .
	g›í_fûe
 = 
fio_ime_›í_fûe
,

860 .
	g˛o£_fûe
 = 
fio_ime_˛o£_fûe
,

861 .
	ggë_fûe_size
 = 
fio_ime_gë_fûe_size
,

862 .
	gu∆ök_fûe
 = 
fio_ime_u∆ök_fûe
,

863 .
	gÊags
 = 
FIO_SYNCIO
 | 
FIO_DISKLESSIO
,

866 
i€ngöe_›s
 
	gi€ngöe_aio
 = {

867 .
«me
 = "ime_aio",

868 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

869 .
	g£tup
 = 
fio_ime_£tup
,

870 .
	göô
 = 
fio_ime_aio_öô
,

871 .
	g˛ónup
 = 
fio_ime_aio_˛ón
,

872 .
	gqueue
 = 
fio_ime_aio_queue
,

873 .
	gcommô
 = 
fio_ime_aio_commô
,

874 .
	ggëevíts
 = 
fio_ime_aio_gëevíts
,

875 .
	gevít
 = 
fio_ime_evít
,

876 .
	g›í_fûe
 = 
fio_ime_›í_fûe
,

877 .
	g˛o£_fûe
 = 
fio_ime_˛o£_fûe
,

878 .
	ggë_fûe_size
 = 
fio_ime_gë_fûe_size
,

879 .
	gu∆ök_fûe
 = 
fio_ime_u∆ök_fûe
,

880 .
	gÊags
 = 
FIO_DISKLESSIO
,

883 
fio_öô
 
	$fio_ime_ªgi°î
()

885 
	`ªgi°î_i€ngöe
(&
i€ngöe_¥w
);

886 
	`ªgi°î_i€ngöe
(&
i€ngöe_pvrw
);

887 
	`ªgi°î_i€ngöe
(&
i€ngöe_aio
);

888 
	}
}

890 
fio_exô
 
	$fio_ime_uƒegi°î
()

892 
	`uƒegi°î_i€ngöe
(&
i€ngöe_¥w
);

893 
	`uƒegi°î_i€ngöe
(&
i€ngöe_pvrw
);

894 
	`uƒegi°î_i€ngöe
(&
i€ngöe_aio
);

896 i‡(
fio_ime_is_öôülized
 && 
	`ime_«tive_föÆize
() < 0)

897 
	`log_îr
("Warning: IME didÇot finalizeÖroperly\n");

898 
	}
}

	@engines/io_uring.c

9 
	~<°dlib.h
>

10 
	~<uni°d.h
>

11 
	~<î∫o.h
>

12 
	~<sys/time.h
>

13 
	~<sys/ªsour˚.h
>

15 
	~"../fio.h
"

16 
	~"../lib/pow2.h
"

17 
	~"../›tgroup.h
"

18 
	~"../lib/memÆign.h
"

19 
	~"../lib/Ês.h
"

20 
	~"../lib/roundup.h
"

22 #ifde‡
ARCH_HAVE_IOURING


24 
	~"../lib/ty≥s.h
"

25 
	~"../os/löux/io_urög.h
"

26 
	~"cmd¥io.h
"

27 
	~"nvme.h
"

29 
	~<sys/°©.h
>

31 
	eurög_cmd_ty≥
 {

32 
	mFIO_URING_CMD_NVME
 = 1,

35 
	sio_sq_rög
 {

36 *
	mhód
;

37 *
	mèû
;

38 *
	mrög_mask
;

39 *
	mrög_íåõs
;

40 *
	mÊags
;

41 *
	m¨øy
;

44 
	sio_cq_rög
 {

45 *
	mhód
;

46 *
	mèû
;

47 *
	mrög_mask
;

48 *
	mrög_íåõs
;

49 
io_urög_cqe
 *
	mcqes
;

52 
	si‹ög_mm≠
 {

53 *
	m±r
;

54 
size_t
 
	mÀn
;

57 
	si‹ög_d©a
 {

58 
	mrög_fd
;

60 
io_u
 **
	mio_u_ödex
;

62 *
	mfds
;

64 
io_sq_rög
 
	msq_rög
;

65 
io_urög_sqe
 *
	msqes
;

66 
iovec
 *
	miovecs
;

67 
	msq_rög_mask
;

69 
io_cq_rög
 
	mcq_rög
;

70 
	mcq_rög_mask
;

72 
	mqueued
;

73 
	mcq_rög_off
;

74 
	miodïth
;

75 
	m¥ï≥d
;

77 
i‹ög_mm≠
 
	mmm≠
[3];

79 
cmd¥io
 
	mcmd¥io
;

82 
	si‹ög_›ti⁄s
 {

83 
thªad_d©a
 *
	mtd
;

84 
	mhùri
;

85 
cmd¥io_›ti⁄s
 
	mcmd¥io_›ti⁄s
;

86 
	mfixedbufs
;

87 
	mªgi°îfûes
;

88 
	msqpﬁl_thªad
;

89 
	msqpﬁl_£t
;

90 
	msqpﬁl_˝u
;

91 
	mn⁄ve˘‹ed
;

92 
	munˇched
;

93 
	mnowaô
;

94 
	mf‹˚_async
;

95 
urög_cmd_ty≥
 
	mcmd_ty≥
;

98 c⁄° 
	gddú_to_›
[2][2] = {

99 { 
IORING_OP_READV
, 
IORING_OP_READ
 },

100 { 
IORING_OP_WRITEV
, 
IORING_OP_WRITE
 }

103 c⁄° 
	gfixed_ddú_to_›
[2] = {

104 
IORING_OP_READ_FIXED
,

105 
IORING_OP_WRITE_FIXED


108 
	$fio_i‹ög_sqpﬁl_cb
(*
d©a
, *
vÆ
)

110 
i‹ög_›ti⁄s
 *
o
 = 
d©a
;

112 
o
->
sqpﬁl_˝u
 = *
vÆ
;

113 
o
->
sqpﬁl_£t
 = 1;

115 
	}
}

117 
fio_›ti⁄
 
	g›ti⁄s
[] = {

119 .
«me
 = "hipri",

120 .
	g ame
 = "High Priority",

121 .
	gty≥
 = 
FIO_OPT_STR_SET
,

122 .
	goff1
 = 
off£tof
(
i‹ög_›ti⁄s
, 
hùri
),

123 .
	ghñp
 = "UseÖolled IO completions",

124 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

125 .
	ggroup
 = 
FIO_OPT_G_IOURING
,

127 #ifde‡
FIO_HAVE_IOPRIO_CLASS


129 .
	g«me
 = "cmdprio_percentage",

130 .
	g ame
 = "highÖriorityÖercentage",

131 .
	gty≥
 = 
FIO_OPT_INT
,

132 .
	goff1
 = 
off£tof
(
i‹ög_›ti⁄s
,

133 
cmd¥io_›ti⁄s
.
≥r˚¡age
[
DDIR_READ
]),

134 .
	goff2
 = 
off£tof
(
i‹ög_›ti⁄s
,

135 
cmd¥io_›ti⁄s
.
≥r˚¡age
[
DDIR_WRITE
]),

136 .
	gmövÆ
 = 0,

137 .
	gmaxvÆ
 = 100,

138 .
	ghñp
 = "Send highÖriority I/OÅhisÖercentage ofÅheÅime",

139 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

140 .
	ggroup
 = 
FIO_OPT_G_IOURING
,

143 .
	g«me
 = "cmdprio_class",

144 .
	g ame
 = "Asynchronous I/OÖriority class",

145 .
	gty≥
 = 
FIO_OPT_INT
,

146 .
	goff1
 = 
off£tof
(
i‹ög_›ti⁄s
,

147 
cmd¥io_›ti⁄s
.
˛ass
[
DDIR_READ
]),

148 .
	goff2
 = 
off£tof
(
i‹ög_›ti⁄s
,

149 
cmd¥io_›ti⁄s
.
˛ass
[
DDIR_WRITE
]),

150 .
	ghñp
 = "Setásynchronous IOÖriority class",

151 .
	gmövÆ
 = 
IOPRIO_MIN_PRIO_CLASS
 + 1,

152 .
	gmaxvÆ
 = 
IOPRIO_MAX_PRIO_CLASS
,

153 .
	göãrvÆ
 = 1,

154 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

155 .
	ggroup
 = 
FIO_OPT_G_IOURING
,

158 .
	g«me
 = "cmdprio",

159 .
	g ame
 = "Asynchronous I/OÖriorityÜevel",

160 .
	gty≥
 = 
FIO_OPT_INT
,

161 .
	goff1
 = 
off£tof
(
i‹ög_›ti⁄s
,

162 
cmd¥io_›ti⁄s
.
Àvñ
[
DDIR_READ
]),

163 .
	goff2
 = 
off£tof
(
i‹ög_›ti⁄s
,

164 
cmd¥io_›ti⁄s
.
Àvñ
[
DDIR_WRITE
]),

165 .
	ghñp
 = "Setásynchronous IOÖriorityÜevel",

166 .
	gmövÆ
 = 
IOPRIO_MIN_PRIO
,

167 .
	gmaxvÆ
 = 
IOPRIO_MAX_PRIO
,

168 .
	göãrvÆ
 = 1,

169 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

170 .
	ggroup
 = 
FIO_OPT_G_IOURING
,

173 .
	g«me
 = "cmdprio_bssplit",

174 .
	g ame
 = "PriorityÖercentage block size split",

175 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

176 .
	goff1
 = 
off£tof
(
i‹ög_›ti⁄s
,

177 
cmd¥io_›ti⁄s
.
bs•lô_°r
),

178 .
	ghñp
 = "SetÖriorityÖercentages for different block sizes",

179 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

180 .
	ggroup
 = 
FIO_OPT_G_IOURING
,

184 .
	g«me
 = "cmdprio_percentage",

185 .
	g ame
 = "highÖriorityÖercentage",

186 .
	gty≥
 = 
FIO_OPT_UNSUPPORTED
,

187 .
	ghñp
 = "YourÖlatform doesÇot support I/OÖriority classes",

190 .
	g«me
 = "cmdprio_class",

191 .
	g ame
 = "Asynchronous I/OÖriority class",

192 .
	gty≥
 = 
FIO_OPT_UNSUPPORTED
,

193 .
	ghñp
 = "YourÖlatform doesÇot support I/OÖriority classes",

196 .
	g«me
 = "cmdprio",

197 .
	g ame
 = "Asynchronous I/OÖriorityÜevel",

198 .
	gty≥
 = 
FIO_OPT_UNSUPPORTED
,

199 .
	ghñp
 = "YourÖlatform doesÇot support I/OÖriority classes",

202 .
	g«me
 = "cmdprio_bssplit",

203 .
	g ame
 = "PriorityÖercentage block size split",

204 .
	gty≥
 = 
FIO_OPT_UNSUPPORTED
,

205 .
	ghñp
 = "YourÖlatform doesÇot support I/OÖriority classes",

209 .
	g«me
 = "fixedbufs",

210 .
	g ame
 = "Fixed (pre-mapped) IO buffers",

211 .
	gty≥
 = 
FIO_OPT_STR_SET
,

212 .
	goff1
 = 
off£tof
(
i‹ög_›ti⁄s
, 
fixedbufs
),

213 .
	ghñp
 = "Pre map IO buffers",

214 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

215 .
	ggroup
 = 
FIO_OPT_G_IOURING
,

218 .
	g«me
 = "registerfiles",

219 .
	g ame
 = "Register file set",

220 .
	gty≥
 = 
FIO_OPT_STR_SET
,

221 .
	goff1
 = 
off£tof
(
i‹ög_›ti⁄s
, 
ªgi°îfûes
),

222 .
	ghñp
 = "Pre-open/register files",

223 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

224 .
	ggroup
 = 
FIO_OPT_G_IOURING
,

227 .
	g«me
 = "sqthread_poll",

228 .
	g ame
 = "Kernel SQÅhreadÖolling",

229 .
	gty≥
 = 
FIO_OPT_INT
,

230 .
	goff1
 = 
off£tof
(
i‹ög_›ti⁄s
, 
sqpﬁl_thªad
),

231 .
	ghñp
 = "Offload submission/completionÅo kernelÅhread",

232 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

233 .
	ggroup
 = 
FIO_OPT_G_IOURING
,

236 .
	g«me
 = "sqthread_poll_cpu",

237 .
	g ame
 = "SQ Thread Poll CPU",

238 .
	gty≥
 = 
FIO_OPT_INT
,

239 .
	gcb
 = 
fio_i‹ög_sqpﬁl_cb
,

240 .
	ghñp
 = "What CPUÅoÑun SQÅhreadÖolling on",

241 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

242 .
	ggroup
 = 
FIO_OPT_G_IOURING
,

245 .
	g«me
 = "nonvectored",

246 .
	g ame
 = "Non-vectored",

247 .
	gty≥
 = 
FIO_OPT_INT
,

248 .
	goff1
 = 
off£tof
(
i‹ög_›ti⁄s
, 
n⁄ve˘‹ed
),

249 .
	gdef
 = "-1",

250 .
	ghñp
 = "UseÇon-vectoredÑead/write commands",

251 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

252 .
	ggroup
 = 
FIO_OPT_G_IOURING
,

255 .
	g«me
 = "uncached",

256 .
	g ame
 = "Uncached",

257 .
	gty≥
 = 
FIO_OPT_INT
,

258 .
	goff1
 = 
off£tof
(
i‹ög_›ti⁄s
, 
unˇched
),

259 .
	ghñp
 = "Use RWF_UNCACHED for bufferedÑead/writes",

260 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

261 .
	ggroup
 = 
FIO_OPT_G_IOURING
,

264 .
	g«me
 = "nowait",

265 .
	g ame
 = "RWF_NOWAIT",

266 .
	gty≥
 = 
FIO_OPT_BOOL
,

267 .
	goff1
 = 
off£tof
(
i‹ög_›ti⁄s
, 
nowaô
),

268 .
	ghñp
 = "Use RWF_NOWAIT forÑeads/writes",

269 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

270 .
	ggroup
 = 
FIO_OPT_G_IOURING
,

273 .
	g«me
 = "force_async",

274 .
	g ame
 = "Forceásync",

275 .
	gty≥
 = 
FIO_OPT_INT
,

276 .
	goff1
 = 
off£tof
(
i‹ög_›ti⁄s
, 
f‹˚_async
),

277 .
	ghñp
 = "Set IOSQE_ASYNCÉvery NÑequests",

278 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

279 .
	ggroup
 = 
FIO_OPT_G_IOURING
,

282 .
	g«me
 = "cmd_type",

283 .
	g ame
 = "Uring cmdÅype",

284 .
	gty≥
 = 
FIO_OPT_STR
,

285 .
	goff1
 = 
off£tof
(
i‹ög_›ti⁄s
, 
cmd_ty≥
),

286 .
	ghñp
 = "Specify uring-cmdÅype",

287 .
	gdef
 = "nvme",

288 .
	gposvÆ
 = {

289 { .
ivÆ
 = "nvme",

290 .
	govÆ
 = 
FIO_URING_CMD_NVME
,

291 .
	ghñp
 = "IssueÇvme-uring-cmd",

294 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

295 .
	ggroup
 = 
FIO_OPT_G_IOURING
,

298 .
	g«me
 = 
NULL
,

302 
	$io_urög_íãr
(
i‹ög_d©a
 *
ld
, 
to_submô
,

303 
mö_com∂ëe
, 
Êags
)

305 #ifde‡
FIO_ARCH_HAS_SYSCALL


306  
	`__do_sysˇŒ6
(
__NR_io_urög_íãr
, 
ld
->
rög_fd
, 
to_submô
,

307 
mö_com∂ëe
, 
Êags
, 
NULL
, 0);

309  
	`sysˇŒ
(
__NR_io_urög_íãr
, 
ld
->
rög_fd
, 
to_submô
,

310 
mö_com∂ëe
, 
Êags
, 
NULL
, 0);

312 
	}
}

314 
	$fio_i‹ög_¥ï
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

316 
i‹ög_d©a
 *
ld
 = 
td
->
io_›s_d©a
;

317 
i‹ög_›ti⁄s
 *
o
 = 
td
->
eo
;

318 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

319 
io_urög_sqe
 *
sqe
;

321 
sqe
 = &
ld
->
sqes
[
io_u
->
ödex
];

323 i‡(
o
->
ªgi°îfûes
) {

324 
sqe
->
fd
 = 
f
->
ígöe_pos
;

325 
sqe
->
Êags
 = 
IOSQE_FIXED_FILE
;

327 
sqe
->
fd
 = 
f
->fd;

328 
sqe
->
Êags
 = 0;

331 i‡(
io_u
->
ddú
 =
DDIR_READ
 || io_u->ddú =
DDIR_WRITE
) {

332 i‡(
o
->
fixedbufs
) {

333 
sqe
->
›code
 = 
fixed_ddú_to_›
[
io_u
->
ddú
];

334 
sqe
->
addr
 = (Ë
io_u
->
x„r_buf
;

335 
sqe
->
Àn
 = 
io_u
->
x„r_buÊí
;

336 
sqe
->
buf_ödex
 = 
io_u
->
ödex
;

338 
iovec
 *
iov
 = &
ld
->
iovecs
[
io_u
->
ödex
];

344 
iov
->
iov_ba£
 = 
io_u
->
x„r_buf
;

345 
iov
->
iov_Àn
 = 
io_u
->
x„r_buÊí
;

347 
sqe
->
›code
 = 
ddú_to_›
[
io_u
->
ddú
][!!
o
->
n⁄ve˘‹ed
];

348 i‡(
o
->
n⁄ve˘‹ed
) {

349 
sqe
->
addr
 = (Ë
iov
->
iov_ba£
;

350 
sqe
->
Àn
 = 
iov
->
iov_Àn
;

352 
sqe
->
addr
 = (Ë
iov
;

353 
sqe
->
Àn
 = 1;

356 
sqe
->
rw_Êags
 = 0;

357 i‡(!
td
->
o
.
odúe˘
 && o->
unˇched
)

358 
sqe
->
rw_Êags
 |
RWF_UNCACHED
;

359 i‡(
o
->
nowaô
)

360 
sqe
->
rw_Êags
 |
RWF_NOWAIT
;

372 
sqe
->
i›rio
 = 
td
->ioprio;

373 
sqe
->
off
 = 
io_u
->
off£t
;

374 } i‡(
	`ddú_sync
(
io_u
->
ddú
)) {

375 
sqe
->
i›rio
 = 0;

376 i‡(
io_u
->
ddú
 =
DDIR_SYNC_FILE_RANGE
) {

377 
sqe
->
off
 = 
f
->
fú°_wrôe
;

378 
sqe
->
Àn
 = 
f
->
œ°_wrôe
 - f->
fú°_wrôe
;

379 
sqe
->
sync_ønge_Êags
 = 
td
->
o
.
sync_fûe_ønge
;

380 
sqe
->
›code
 = 
IORING_OP_SYNC_FILE_RANGE
;

382 
sqe
->
off
 = 0;

383 
sqe
->
addr
 = 0;

384 
sqe
->
Àn
 = 0;

385 i‡(
io_u
->
ddú
 =
DDIR_DATASYNC
)

386 
sqe
->
fsync_Êags
 |
IORING_FSYNC_DATASYNC
;

387 
sqe
->
›code
 = 
IORING_OP_FSYNC
;

391 i‡(
o
->
f‹˚_async
 && ++
ld
->
¥ï≥d
 == o->force_async) {

392 
ld
->
¥ï≥d
 = 0;

393 
sqe
->
Êags
 |
IOSQE_ASYNC
;

396 
sqe
->
u£r_d©a
 = (Ë
io_u
;

398 
	}
}

400 
	$fio_i‹ög_cmd_¥ï
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

402 
i‹ög_d©a
 *
ld
 = 
td
->
io_›s_d©a
;

403 
i‹ög_›ti⁄s
 *
o
 = 
td
->
eo
;

404 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

405 
nvme_urög_cmd
 *
cmd
;

406 
io_urög_sqe
 *
sqe
;

409 i‡(
o
->
cmd_ty≥
 !
FIO_URING_CMD_NVME
)

410  -
EINVAL
;

412 
sqe
 = &
ld
->
sqes
[(
io_u
->
ödex
) << 1];

414 i‡(
o
->
ªgi°îfûes
) {

415 
sqe
->
fd
 = 
f
->
ígöe_pos
;

416 
sqe
->
Êags
 = 
IOSQE_FIXED_FILE
;

418 
sqe
->
fd
 = 
f
->fd;

420 
sqe
->
rw_Êags
 = 0;

421 i‡(!
td
->
o
.
odúe˘
 && o->
unˇched
)

422 
sqe
->
rw_Êags
 |
RWF_UNCACHED
;

423 i‡(
o
->
nowaô
)

424 
sqe
->
rw_Êags
 |
RWF_NOWAIT
;

426 
sqe
->
›code
 = 
IORING_OP_URING_CMD
;

427 
sqe
->
u£r_d©a
 = (Ë
io_u
;

428 i‡(
o
->
n⁄ve˘‹ed
)

429 
sqe
->
cmd_›
 = 
NVME_URING_CMD_IO
;

431 
sqe
->
cmd_›
 = 
NVME_URING_CMD_IO_VEC
;

432 i‡(
o
->
f‹˚_async
 && ++
ld
->
¥ï≥d
 == o->force_async) {

433 
ld
->
¥ï≥d
 = 0;

434 
sqe
->
Êags
 |
IOSQE_ASYNC
;

436 i‡(
o
->
fixedbufs
) {

437 
sqe
->
urög_cmd_Êags
 = 
IORING_URING_CMD_FIXED
;

438 
sqe
->
buf_ödex
 = 
io_u
->
ödex
;

441 
cmd
 = (
nvme_urög_cmd
 *)
sqe
->cmd;

442  
	`fio_nvme_urög_cmd_¥ï
(
cmd
, 
io_u
,

443 
o
->
n⁄ve˘‹ed
 ? 
NULL
 : &
ld
->
iovecs
[
io_u
->
ödex
]);

444 
	}
}

446 
io_u
 *
	$fio_i‹ög_evít
(
thªad_d©a
 *
td
, 
evít
)

448 
i‹ög_d©a
 *
ld
 = 
td
->
io_›s_d©a
;

449 
io_urög_cqe
 *
cqe
;

450 
io_u
 *io_u;

451 
ödex
;

453 
ödex
 = (
evít
 + 
ld
->
cq_rög_off
Ë&Üd->
cq_rög_mask
;

455 
cqe
 = &
ld
->
cq_rög
.
cqes
[
ödex
];

456 
io_u
 = (io_u *Ë(
uöçå_t
Ë
cqe
->
u£r_d©a
;

458 i‡(
cqe
->
ªs
 !
io_u
->
x„r_buÊí
) {

459 i‡(
cqe
->
ªs
 > 
io_u
->
x„r_buÊí
)

460 
io_u
->
îr‹
 = -
cqe
->
ªs
;

462 
io_u
->
ªsid
 = io_u->
x„r_buÊí
 - 
cqe
->
ªs
;

464 
io_u
->
îr‹
 = 0;

466  
io_u
;

467 
	}
}

469 
io_u
 *
	$fio_i‹ög_cmd_evít
(
thªad_d©a
 *
td
, 
evít
)

471 
i‹ög_d©a
 *
ld
 = 
td
->
io_›s_d©a
;

472 
i‹ög_›ti⁄s
 *
o
 = 
td
->
eo
;

473 
io_urög_cqe
 *
cqe
;

474 
io_u
 *io_u;

475 
ödex
;

477 
ödex
 = (
evít
 + 
ld
->
cq_rög_off
Ë&Üd->
cq_rög_mask
;

478 i‡(
o
->
cmd_ty≥
 =
FIO_URING_CMD_NVME
)

479 
ödex
 <<= 1;

481 
cqe
 = &
ld
->
cq_rög
.
cqes
[
ödex
];

482 
io_u
 = (io_u *Ë(
uöçå_t
Ë
cqe
->
u£r_d©a
;

484 i‡(
cqe
->
ªs
 != 0)

485 
io_u
->
îr‹
 = -
cqe
->
ªs
;

487 
io_u
->
îr‹
 = 0;

489  
io_u
;

490 
	}
}

492 
	$fio_i‹ög_cqrög_ª≠
(
thªad_d©a
 *
td
, 
evíts
,

493 
max
)

495 
i‹ög_d©a
 *
ld
 = 
td
->
io_›s_d©a
;

496 
io_cq_rög
 *
rög
 = &
ld
->
cq_rög
;

497 
hód
, 
ª≠ed
 = 0;

499 
hód
 = *
rög
->head;

501 i‡(
hód
 =
	`©omic_lﬂd_acquúe
(
rög
->
èû
))

503 
ª≠ed
++;

504 
hód
++;

505 } 
ª≠ed
 + 
evíts
 < 
max
);

507 i‡(
ª≠ed
)

508 
	`©omic_°‹e_ªÀa£
(
rög
->
hód
, head);

510  
ª≠ed
;

511 
	}
}

513 
	$fio_i‹ög_gëevíts
(
thªad_d©a
 *
td
, 
mö
,

514 
max
, c⁄° 
time•ec
 *
t
)

516 
i‹ög_d©a
 *
ld
 = 
td
->
io_›s_d©a
;

517 
a˘uÆ_mö
 = 
td
->
o
.
iodïth_b©ch_com∂ëe_mö
 =0 ? 0 : 
mö
;

518 
i‹ög_›ti⁄s
 *
o
 = 
td
->
eo
;

519 
io_cq_rög
 *
rög
 = &
ld
->
cq_rög
;

520 
evíts
 = 0;

521 
r
;

523 
ld
->
cq_rög_off
 = *
rög
->
hód
;

525 
r
 = 
	`fio_i‹ög_cqrög_ª≠
(
td
, 
evíts
, 
max
);

526 i‡(
r
) {

527 
evíts
 +
r
;

528 i‡(
a˘uÆ_mö
 != 0)

529 
a˘uÆ_mö
 -
r
;

533 i‡(!
o
->
sqpﬁl_thªad
) {

534 
r
 = 
	`io_urög_íãr
(
ld
, 0, 
a˘uÆ_mö
,

535 
IORING_ENTER_GETEVENTS
);

536 i‡(
r
 < 0) {

537 i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EINTR
)

539 
r
 = -
î∫o
;

540 
	`td_vîr‹
(
td
, 
î∫o
, "io_uring_enter");

544 } 
evíts
 < 
mö
);

546  
r
 < 0 ?Ñ : 
evíts
;

547 
	}
}

549 
ölöe
 
	$fio_i‹ög_cmd¥io_¥ï
(
thªad_d©a
 *
td
,

550 
io_u
 *io_u)

552 
i‹ög_d©a
 *
ld
 = 
td
->
io_›s_d©a
;

553 
cmd¥io
 *cmd¥iÿ&
ld
->cmdprio;

555 i‡(
	`fio_cmd¥io_£t_i›rio
(
td
, 
cmd¥io
, 
io_u
))

556 
ld
->
sqes
[
io_u
->
ödex
].
i›rio
 = io_u->ioprio;

557 
	}
}

559 
fio_q_°©us
 
	$fio_i‹ög_queue
(
thªad_d©a
 *
td
,

560 
io_u
 *io_u)

562 
i‹ög_d©a
 *
ld
 = 
td
->
io_›s_d©a
;

563 
io_sq_rög
 *
rög
 = &
ld
->
sq_rög
;

564 
èû
, 
√xt_èû
;

566 
	`fio_ro_check
(
td
, 
io_u
);

568 i‡(
ld
->
queued
 =ld->
iodïth
)

569  
FIO_Q_BUSY
;

571 i‡(
io_u
->
ddú
 =
DDIR_TRIM
) {

572 i‡(
ld
->
queued
)

573  
FIO_Q_BUSY
;

575 
	`do_io_u_åim
(
td
, 
io_u
);

576 
	`io_u_m¨k_submô
(
td
, 1);

577 
	`io_u_m¨k_com∂ëe
(
td
, 1);

578  
FIO_Q_COMPLETED
;

581 
èû
 = *
rög
->tail;

582 
√xt_èû
 = 
èû
 + 1;

583 i‡(
√xt_èû
 =
	`©omic_lﬂd_acquúe
(
rög
->
hód
))

584  
FIO_Q_BUSY
;

586 i‡(
ld
->
cmd¥io
.
mode
 !
CMDPRIO_MODE_NONE
)

587 
	`fio_i‹ög_cmd¥io_¥ï
(
td
, 
io_u
);

589 
rög
->
¨øy
[
èû
 & 
ld
->
sq_rög_mask
] = 
io_u
->
ödex
;

590 
	`©omic_°‹e_ªÀa£
(
rög
->
èû
, 
√xt_èû
);

592 
ld
->
queued
++;

593  
FIO_Q_QUEUED
;

594 
	}
}

596 
	$fio_i‹ög_queued
(
thªad_d©a
 *
td
, 
°¨t
, 
ƒ
)

598 
i‹ög_d©a
 *
ld
 = 
td
->
io_›s_d©a
;

599 
time•ec
 
now
;

601 i‡(!
	`fio_fûl_issue_time
(
td
))

604 
	`fio_gëtime
(&
now
, 
NULL
);

606 
ƒ
--) {

607 
io_sq_rög
 *
rög
 = &
ld
->
sq_rög
;

608 
ödex
 = 
rög
->
¨øy
[
°¨t
 & 
ld
->
sq_rög_mask
];

609 
io_u
 *io_u = 
ld
->
io_u_ödex
[
ödex
];

611 
	`mem˝y
(&
io_u
->
issue_time
, &
now
, (now));

612 
	`io_u_queued
(
td
, 
io_u
);

614 
°¨t
++;

620 i‡(
td
->
o
.
ªad_iﬁog_fûe
)

621 
	`mem˝y
(&
td
->
œ°_issue
, &
now
, (now));

622 
	}
}

624 
	$fio_i‹ög_commô
(
thªad_d©a
 *
td
)

626 
i‹ög_d©a
 *
ld
 = 
td
->
io_›s_d©a
;

627 
i‹ög_›ti⁄s
 *
o
 = 
td
->
eo
;

628 
ªt
;

630 i‡(!
ld
->
queued
)

638 i‡(
o
->
sqpﬁl_thªad
) {

639 
io_sq_rög
 *
rög
 = &
ld
->
sq_rög
;

640 
Êags
;

642 
Êags
 = 
	`©omic_lﬂd_acquúe
(
rög
->flags);

643 i‡(
Êags
 & 
IORING_SQ_NEED_WAKEUP
)

644 
	`io_urög_íãr
(
ld
,Üd->
queued
, 0,

645 
IORING_ENTER_SQ_WAKEUP
);

646 
ld
->
queued
 = 0;

651 
°¨t
 = *
ld
->
sq_rög
.
hód
;

652 
ƒ
 = 
ld
->
queued
;

654 
ªt
 = 
	`io_urög_íãr
(
ld
, 
ƒ
, 0, 
IORING_ENTER_GETEVENTS
);

655 i‡(
ªt
 > 0) {

656 
	`fio_i‹ög_queued
(
td
, 
°¨t
, 
ªt
);

657 
	`io_u_m¨k_submô
(
td
, 
ªt
);

659 
ld
->
queued
 -
ªt
;

660 
ªt
 = 0;

661 } i‡(!
ªt
) {

662 
	`io_u_m¨k_submô
(
td
, 
ªt
);

665 i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EINTR
) {

666 
ªt
 = 
	`fio_i‹ög_cqrög_ª≠
(
td
, 0, 
ld
->
queued
);

667 i‡(
ªt
)

670 
	`u¶ìp
(1);

673 
ªt
 = -
î∫o
;

674 
	`td_vîr‹
(
td
, 
î∫o
, "io_uring_enter submit");

677 } 
ld
->
queued
);

679  
ªt
;

680 
	}
}

682 
	$fio_i‹ög_unm≠
(
i‹ög_d©a
 *
ld
)

684 
i
;

686 
i
 = 0; i < 
	`FIO_ARRAY_SIZE
(
ld
->
mm≠
); i++)

687 
	`munm≠
(
ld
->
mm≠
[
i
].
±r
,Üd->mm≠[i].
Àn
);

688 
	`˛o£
(
ld
->
rög_fd
);

689 
	}
}

691 
	$fio_i‹ög_˛ónup
(
thªad_d©a
 *
td
)

693 
i‹ög_d©a
 *
ld
 = 
td
->
io_›s_d©a
;

695 i‡(
ld
) {

696 i‡(!(
td
->
Êags
 & 
TD_F_CHILD
))

697 
	`fio_i‹ög_unm≠
(
ld
);

699 
	`fio_cmd¥io_˛ónup
(&
ld
->
cmd¥io
);

700 
	`‰ì
(
ld
->
io_u_ödex
);

701 
	`‰ì
(
ld
->
iovecs
);

702 
	`‰ì
(
ld
->
fds
);

703 
	`‰ì
(
ld
);

705 
	}
}

707 
	$fio_i‹ög_mm≠
(
i‹ög_d©a
 *
ld
, 
io_urög_∑øms
 *
p
)

709 
io_sq_rög
 *
§ög
 = &
ld
->
sq_rög
;

710 
io_cq_rög
 *
¸ög
 = &
ld
->
cq_rög
;

711 *
±r
;

713 
ld
->
mm≠
[0].
Àn
 = 
p
->
sq_off
.
¨øy
 +Ö->
sq_íåõs
 * (
__u32
);

714 
±r
 = 
	`mm≠
(0, 
ld
->
mm≠
[0].
Àn
, 
PROT_READ
 | 
PROT_WRITE
,

715 
MAP_SHARED
 | 
MAP_POPULATE
, 
ld
->
rög_fd
,

716 
IORING_OFF_SQ_RING
);

717 
ld
->
mm≠
[0].
±r
 =Ötr;

718 
§ög
->
hód
 = 
±r
 + 
p
->
sq_off
.head;

719 
§ög
->
èû
 = 
±r
 + 
p
->
sq_off
.tail;

720 
§ög
->
rög_mask
 = 
±r
 + 
p
->
sq_off
.ring_mask;

721 
§ög
->
rög_íåõs
 = 
±r
 + 
p
->
sq_off
.ring_entries;

722 
§ög
->
Êags
 = 
±r
 + 
p
->
sq_off
.flags;

723 
§ög
->
¨øy
 = 
±r
 + 
p
->
sq_off
.array;

724 
ld
->
sq_rög_mask
 = *
§ög
->
rög_mask
;

726 i‡(
p
->
Êags
 & 
IORING_SETUP_SQE128
)

727 
ld
->
mm≠
[1].
Àn
 = 2 * 
p
->
sq_íåõs
 * (
io_urög_sqe
);

729 
ld
->
mm≠
[1].
Àn
 = 
p
->
sq_íåõs
 * (
io_urög_sqe
);

730 
ld
->
sqes
 = 
	`mm≠
(0,Üd->
mm≠
[1].
Àn
, 
PROT_READ
 | 
PROT_WRITE
,

731 
MAP_SHARED
 | 
MAP_POPULATE
, 
ld
->
rög_fd
,

732 
IORING_OFF_SQES
);

733 
ld
->
mm≠
[1].
±r
 =Üd->
sqes
;

735 i‡(
p
->
Êags
 & 
IORING_SETUP_CQE32
) {

736 
ld
->
mm≠
[2].
Àn
 = 
p
->
cq_off
.
cqes
 +

737 2 * 
p
->
cq_íåõs
 * (
io_urög_cqe
);

739 
ld
->
mm≠
[2].
Àn
 = 
p
->
cq_off
.
cqes
 +

740 
p
->
cq_íåõs
 * (
io_urög_cqe
);

742 
±r
 = 
	`mm≠
(0, 
ld
->
mm≠
[2].
Àn
, 
PROT_READ
 | 
PROT_WRITE
,

743 
MAP_SHARED
 | 
MAP_POPULATE
, 
ld
->
rög_fd
,

744 
IORING_OFF_CQ_RING
);

745 
ld
->
mm≠
[2].
±r
 =Ötr;

746 
¸ög
->
hód
 = 
±r
 + 
p
->
cq_off
.head;

747 
¸ög
->
èû
 = 
±r
 + 
p
->
cq_off
.tail;

748 
¸ög
->
rög_mask
 = 
±r
 + 
p
->
cq_off
.ring_mask;

749 
¸ög
->
rög_íåõs
 = 
±r
 + 
p
->
cq_off
.ring_entries;

750 
¸ög
->
cqes
 = 
±r
 + 
p
->
cq_off
.cqes;

751 
ld
->
cq_rög_mask
 = *
¸ög
->
rög_mask
;

753 
	}
}

755 
	$fio_i‹ög_¥obe
(
thªad_d©a
 *
td
)

757 
i‹ög_d©a
 *
ld
 = 
td
->
io_›s_d©a
;

758 
i‹ög_›ti⁄s
 *
o
 = 
td
->
eo
;

759 
io_urög_¥obe
 *
p
;

760 
ªt
;

763 i‡(
o
->
n⁄ve˘‹ed
 != -1)

767 
o
->
n⁄ve˘‹ed
 = 0;

769 
p
 = 
	`mÆloc
((*pË+ 256 * (
io_urög_¥obe_›
));

770 i‡(!
p
)

773 
	`mem£t
(
p
, 0, (*pË+ 256 * (
io_urög_¥obe_›
));

774 
ªt
 = 
	`sysˇŒ
(
__NR_io_urög_ªgi°î
, 
ld
->
rög_fd
,

775 
IORING_REGISTER_PROBE
, 
p
, 256);

776 i‡(
ªt
 < 0)

777 
out
;

779 i‡(
IORING_OP_WRITE
 > 
p
->
›s_Àn
)

780 
out
;

782 i‡((
p
->
›s
[
IORING_OP_READ
].
Êags
 & 
IO_URING_OP_SUPPORTED
) &&

783 (
p
->
›s
[
IORING_OP_WRITE
].
Êags
 & 
IO_URING_OP_SUPPORTED
))

784 
o
->
n⁄ve˘‹ed
 = 1;

785 
out
:

786 
	`‰ì
(
p
);

787 
	}
}

789 
	$fio_i‹ög_queue_öô
(
thªad_d©a
 *
td
)

791 
i‹ög_d©a
 *
ld
 = 
td
->
io_›s_d©a
;

792 
i‹ög_›ti⁄s
 *
o
 = 
td
->
eo
;

793 
dïth
 = 
td
->
o
.
iodïth
;

794 
io_urög_∑øms
 
p
;

795 
ªt
;

797 
	`mem£t
(&
p
, 0, (p));

799 i‡(
o
->
hùri
)

800 
p
.
Êags
 |
IORING_SETUP_IOPOLL
;

801 i‡(
o
->
sqpﬁl_thªad
) {

802 
p
.
Êags
 |
IORING_SETUP_SQPOLL
;

803 i‡(
o
->
sqpﬁl_£t
) {

804 
p
.
Êags
 |
IORING_SETUP_SQ_AFF
;

805 
p
.
sq_thªad_˝u
 = 
o
->
sqpﬁl_˝u
;

813 
p
.
Êags
 |
IORING_SETUP_CQSIZE
;

814 
p
.
cq_íåõs
 = 
dïth
;

820 
p
.
Êags
 |
IORING_SETUP_COOP_TASKRUN
;

826 
p
.
Êags
 |
IORING_SETUP_SINGLE_ISSUER
 | 
IORING_SETUP_DEFER_TASKRUN
;

828 
ªåy
:

829 
ªt
 = 
	`sysˇŒ
(
__NR_io_urög_£tup
, 
dïth
, &
p
);

830 i‡(
ªt
 < 0) {

831 i‡(
î∫o
 =
EINVAL
 && 
p
.
Êags
 & 
IORING_SETUP_DEFER_TASKRUN
) {

832 
p
.
Êags
 &~
IORING_SETUP_DEFER_TASKRUN
;

833 
p
.
Êags
 &~
IORING_SETUP_SINGLE_ISSUER
;

834 
ªåy
;

836 i‡(
î∫o
 =
EINVAL
 && 
p
.
Êags
 & 
IORING_SETUP_COOP_TASKRUN
) {

837 
p
.
Êags
 &~
IORING_SETUP_COOP_TASKRUN
;

838 
ªåy
;

840 i‡(
î∫o
 =
EINVAL
 && 
p
.
Êags
 & 
IORING_SETUP_CQSIZE
) {

841 
p
.
Êags
 &~
IORING_SETUP_CQSIZE
;

842 
ªåy
;

844  
ªt
;

847 
ld
->
rög_fd
 = 
ªt
;

849 
	`fio_i‹ög_¥obe
(
td
);

851 i‡(
o
->
fixedbufs
) {

852 
ªt
 = 
	`sysˇŒ
(
__NR_io_urög_ªgi°î
, 
ld
->
rög_fd
,

853 
IORING_REGISTER_BUFFERS
, 
ld
->
iovecs
, 
dïth
);

854 i‡(
ªt
 < 0)

855  
ªt
;

858  
	`fio_i‹ög_mm≠
(
ld
, &
p
);

859 
	}
}

861 
	$fio_i‹ög_cmd_queue_öô
(
thªad_d©a
 *
td
)

863 
i‹ög_d©a
 *
ld
 = 
td
->
io_›s_d©a
;

864 
i‹ög_›ti⁄s
 *
o
 = 
td
->
eo
;

865 
dïth
 = 
td
->
o
.
iodïth
;

866 
io_urög_∑øms
 
p
;

867 
ªt
;

869 
	`mem£t
(&
p
, 0, (p));

871 i‡(
o
->
hùri
)

872 
p
.
Êags
 |
IORING_SETUP_IOPOLL
;

873 i‡(
o
->
sqpﬁl_thªad
) {

874 
p
.
Êags
 |
IORING_SETUP_SQPOLL
;

875 i‡(
o
->
sqpﬁl_£t
) {

876 
p
.
Êags
 |
IORING_SETUP_SQ_AFF
;

877 
p
.
sq_thªad_˝u
 = 
o
->
sqpﬁl_˝u
;

880 i‡(
o
->
cmd_ty≥
 =
FIO_URING_CMD_NVME
) {

881 
p
.
Êags
 |
IORING_SETUP_SQE128
;

882 
p
.
Êags
 |
IORING_SETUP_CQE32
;

889 
p
.
Êags
 |
IORING_SETUP_CQSIZE
;

890 
p
.
cq_íåõs
 = 
dïth
;

896 
p
.
Êags
 |
IORING_SETUP_COOP_TASKRUN
;

902 
p
.
Êags
 |
IORING_SETUP_SINGLE_ISSUER
 | 
IORING_SETUP_DEFER_TASKRUN
;

904 
ªåy
:

905 
ªt
 = 
	`sysˇŒ
(
__NR_io_urög_£tup
, 
dïth
, &
p
);

906 i‡(
ªt
 < 0) {

907 i‡(
î∫o
 =
EINVAL
 && 
p
.
Êags
 & 
IORING_SETUP_DEFER_TASKRUN
) {

908 
p
.
Êags
 &~
IORING_SETUP_DEFER_TASKRUN
;

909 
p
.
Êags
 &~
IORING_SETUP_SINGLE_ISSUER
;

910 
ªåy
;

912 i‡(
î∫o
 =
EINVAL
 && 
p
.
Êags
 & 
IORING_SETUP_COOP_TASKRUN
) {

913 
p
.
Êags
 &~
IORING_SETUP_COOP_TASKRUN
;

914 
ªåy
;

916 i‡(
î∫o
 =
EINVAL
 && 
p
.
Êags
 & 
IORING_SETUP_CQSIZE
) {

917 
p
.
Êags
 &~
IORING_SETUP_CQSIZE
;

918 
ªåy
;

920  
ªt
;

923 
ld
->
rög_fd
 = 
ªt
;

925 
	`fio_i‹ög_¥obe
(
td
);

927 i‡(
o
->
fixedbufs
) {

928 
ªt
 = 
	`sysˇŒ
(
__NR_io_urög_ªgi°î
, 
ld
->
rög_fd
,

929 
IORING_REGISTER_BUFFERS
, 
ld
->
iovecs
, 
dïth
);

930 i‡(
ªt
 < 0)

931  
ªt
;

934  
	`fio_i‹ög_mm≠
(
ld
, &
p
);

935 
	}
}

937 
	$fio_i‹ög_ªgi°î_fûes
(
thªad_d©a
 *
td
)

939 
i‹ög_d©a
 *
ld
 = 
td
->
io_›s_d©a
;

940 
fio_fûe
 *
f
;

941 
i
;

942 
ªt
;

944 
ld
->
fds
 = 
	`ˇŒoc
(
td
->
o
.
ƒ_fûes
, ());

946 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

947 
ªt
 = 
	`gíîic_›í_fûe
(
td
, 
f
);

948 i‡(
ªt
)

949 
îr
;

950 
ld
->
fds
[
i
] = 
f
->
fd
;

951 
f
->
ígöe_pos
 = 
i
;

954 
ªt
 = 
	`sysˇŒ
(
__NR_io_urög_ªgi°î
, 
ld
->
rög_fd
,

955 
IORING_REGISTER_FILES
, 
ld
->
fds
, 
td
->
o
.
ƒ_fûes
);

956 i‡(
ªt
) {

957 
îr
:

958 
	`‰ì
(
ld
->
fds
);

959 
ld
->
fds
 = 
NULL
;

966 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

967 i‡(
ªt
) {

968 
fio_unu£d
 
ªt2
;

969 
ªt2
 = 
	`gíîic_˛o£_fûe
(
td
, 
f
);

971 
f
->
fd
 = -1;

974  
ªt
;

975 
	}
}

977 
	$fio_i‹ög_po°_öô
(
thªad_d©a
 *
td
)

979 
i‹ög_d©a
 *
ld
 = 
td
->
io_›s_d©a
;

980 
i‹ög_›ti⁄s
 *
o
 = 
td
->
eo
;

981 
io_u
 *io_u;

982 
îr
, 
i
;

984 
i
 = 0; i < 
td
->
o
.
iodïth
; i++) {

985 
iovec
 *
iov
 = &
ld
->
iovecs
[
i
];

987 
io_u
 = 
ld
->
io_u_ödex
[
i
];

988 
iov
->
iov_ba£
 = 
io_u
->
buf
;

989 
iov
->
iov_Àn
 = 
	`td_max_bs
(
td
);

992 
îr
 = 
	`fio_i‹ög_queue_öô
(
td
);

993 i‡(
îr
) {

994 
öô_îr
 = 
î∫o
;

996 i‡(
öô_îr
 =
ENOSYS
)

997 
	`log_îr
("fio: your kernel doesn't support io_uring\n");

998 
	`td_vîr‹
(
td
, 
öô_îr
, "io_queue_init");

1002 
i
 = 0; i < 
td
->
o
.
iodïth
; i++) {

1003 
io_urög_sqe
 *
sqe
;

1005 
sqe
 = &
ld
->
sqes
[
i
];

1006 
	`mem£t
(
sqe
, 0, (*sqe));

1009 i‡(
o
->
ªgi°îfûes
) {

1010 
îr
 = 
	`fio_i‹ög_ªgi°î_fûes
(
td
);

1011 i‡(
îr
) {

1012 
	`td_vîr‹
(
td
, 
î∫o
, "ioring_register_files");

1018 
	}
}

1020 
	$fio_i‹ög_cmd_po°_öô
(
thªad_d©a
 *
td
)

1022 
i‹ög_d©a
 *
ld
 = 
td
->
io_›s_d©a
;

1023 
i‹ög_›ti⁄s
 *
o
 = 
td
->
eo
;

1024 
io_u
 *io_u;

1025 
îr
, 
i
;

1027 
i
 = 0; i < 
td
->
o
.
iodïth
; i++) {

1028 
iovec
 *
iov
 = &
ld
->
iovecs
[
i
];

1030 
io_u
 = 
ld
->
io_u_ödex
[
i
];

1031 
iov
->
iov_ba£
 = 
io_u
->
buf
;

1032 
iov
->
iov_Àn
 = 
	`td_max_bs
(
td
);

1035 
îr
 = 
	`fio_i‹ög_cmd_queue_öô
(
td
);

1036 i‡(
îr
) {

1037 
öô_îr
 = 
î∫o
;

1039 
	`td_vîr‹
(
td
, 
öô_îr
, "io_queue_init");

1043 
i
 = 0; i < 
td
->
o
.
iodïth
; i++) {

1044 
io_urög_sqe
 *
sqe
;

1046 i‡(
o
->
cmd_ty≥
 =
FIO_URING_CMD_NVME
) {

1047 
sqe
 = &
ld
->
sqes
[
i
 << 1];

1048 
	`mem£t
(
sqe
, 0, 2 * (*sqe));

1050 
sqe
 = &
ld
->
sqes
[
i
];

1051 
	`mem£t
(
sqe
, 0, (*sqe));

1055 i‡(
o
->
ªgi°îfûes
) {

1056 
îr
 = 
	`fio_i‹ög_ªgi°î_fûes
(
td
);

1057 i‡(
îr
) {

1058 
	`td_vîr‹
(
td
, 
î∫o
, "ioring_register_files");

1064 
	}
}

1066 
	$fio_i‹ög_öô
(
thªad_d©a
 *
td
)

1068 
i‹ög_›ti⁄s
 *
o
 = 
td
->
eo
;

1069 
i‹ög_d©a
 *
ld
;

1070 
ªt
;

1073 i‡(
o
->
sqpﬁl_thªad
)

1074 
o
->
ªgi°îfûes
 = 1;

1076 i‡(
o
->
ªgi°îfûes
 && 
td
->o.
ƒ_fûes
 !td->o.
›í_fûes
) {

1077 
	`log_îr
("fio: io_uringÑegistered filesÑequireÇr_filesÅo "

1082 
ld
 = 
	`ˇŒoc
(1, (*ld));

1085 
ld
->
iodïth
 = 
td
->
o
.iodepth;

1086 
td
->
o
.
iodïth
 = 
	`roundup_pow2
(td->o.iodepth);

1089 
ld
->
io_u_ödex
 = 
	`ˇŒoc
(
td
->
o
.
iodïth
, (
io_u
 *));

1090 
ld
->
iovecs
 = 
	`ˇŒoc
(
td
->
o
.
iodïth
, (
iovec
));

1092 
td
->
io_›s_d©a
 = 
ld
;

1094 
ªt
 = 
	`fio_cmd¥io_öô
(
td
, &
ld
->
cmd¥io
, &
o
->
cmd¥io_›ti⁄s
);

1095 i‡(
ªt
) {

1096 
	`td_vîr‹
(
td
, 
EINVAL
, "fio_ioring_init");

1101 
	}
}

1103 
	$fio_i‹ög_io_u_öô
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

1105 
i‹ög_d©a
 *
ld
 = 
td
->
io_›s_d©a
;

1107 
ld
->
io_u_ödex
[
io_u
->
ödex
] = io_u;

1109 
	}
}

1111 
	$fio_i‹ög_›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

1113 
i‹ög_d©a
 *
ld
 = 
td
->
io_›s_d©a
;

1114 
i‹ög_›ti⁄s
 *
o
 = 
td
->
eo
;

1116 i‡(!
ld
 || !
o
->
ªgi°îfûes
)

1117  
	`gíîic_›í_fûe
(
td
, 
f
);

1119 
f
->
fd
 = 
ld
->
fds
[f->
ígöe_pos
];

1121 
	}
}

1123 
	$fio_i‹ög_cmd_›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

1125 
i‹ög_d©a
 *
ld
 = 
td
->
io_›s_d©a
;

1126 
i‹ög_›ti⁄s
 *
o
 = 
td
->
eo
;

1128 i‡(
o
->
cmd_ty≥
 =
FIO_URING_CMD_NVME
) {

1129 
nvme_d©a
 *
d©a
 = 
NULL
;

1130 
nsid
, 
lba_size
 = 0;

1131 
∆ba
 = 0;

1132 
ªt
;

1135 
d©a
 = 
	`FILE_ENG_DATA
(
f
);

1136 i‡(
d©a
 =
NULL
) {

1137 
ªt
 = 
	`fio_nvme_gë_öfo
(
f
, &
nsid
, &
lba_size
, &
∆ba
);

1138 i‡(
ªt
)

1139  
ªt
;

1141 
d©a
 = 
	`ˇŒoc
(1, (
nvme_d©a
));

1142 
d©a
->
nsid
 =Çsid;

1143 
d©a
->
lba_shi·
 = 
	`ûog2
(
lba_size
);

1145 
	`FILE_SET_ENG_DATA
(
f
, 
d©a
);

1148 i‡(!
ld
 || !
o
->
ªgi°îfûes
)

1149  
	`gíîic_›í_fûe
(
td
, 
f
);

1151 
f
->
fd
 = 
ld
->
fds
[f->
ígöe_pos
];

1153 
	}
}

1155 
	$fio_i‹ög_˛o£_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

1157 
i‹ög_d©a
 *
ld
 = 
td
->
io_›s_d©a
;

1158 
i‹ög_›ti⁄s
 *
o
 = 
td
->
eo
;

1160 i‡(!
ld
 || !
o
->
ªgi°îfûes
)

1161  
	`gíîic_˛o£_fûe
(
td
, 
f
);

1163 
f
->
fd
 = -1;

1165 
	}
}

1167 
	$fio_i‹ög_cmd_˛o£_fûe
(
thªad_d©a
 *
td
,

1168 
fio_fûe
 *
f
)

1170 
i‹ög_d©a
 *
ld
 = 
td
->
io_›s_d©a
;

1171 
i‹ög_›ti⁄s
 *
o
 = 
td
->
eo
;

1173 i‡(
o
->
cmd_ty≥
 =
FIO_URING_CMD_NVME
) {

1174 
nvme_d©a
 *
d©a
 = 
	`FILE_ENG_DATA
(
f
);

1176 
	`FILE_SET_ENG_DATA
(
f
, 
NULL
);

1177 
	`‰ì
(
d©a
);

1179 i‡(!
ld
 || !
o
->
ªgi°îfûes
)

1180  
	`gíîic_˛o£_fûe
(
td
, 
f
);

1182 
f
->
fd
 = -1;

1184 
	}
}

1186 
	$fio_i‹ög_cmd_gë_fûe_size
(
thªad_d©a
 *
td
,

1187 
fio_fûe
 *
f
)

1189 
i‹ög_›ti⁄s
 *
o
 = 
td
->
eo
;

1191 i‡(
	`fio_fûe_size_known
(
f
))

1194 i‡(
o
->
cmd_ty≥
 =
FIO_URING_CMD_NVME
) {

1195 
nvme_d©a
 *
d©a
 = 
NULL
;

1196 
nsid
, 
lba_size
 = 0;

1197 
∆ba
 = 0;

1198 
ªt
;

1200 
ªt
 = 
	`fio_nvme_gë_öfo
(
f
, &
nsid
, &
lba_size
, &
∆ba
);

1201 i‡(
ªt
)

1202  
ªt
;

1204 
d©a
 = 
	`ˇŒoc
(1, (
nvme_d©a
));

1205 
d©a
->
nsid
 =Çsid;

1206 
d©a
->
lba_shi·
 = 
	`ûog2
(
lba_size
);

1208 
f
->
ªÆ_fûe_size
 = 
lba_size
 * 
∆ba
;

1209 
	`fio_fûe_£t_size_known
(
f
);

1211 
	`FILE_SET_ENG_DATA
(
f
, 
d©a
);

1214  
	`gíîic_gë_fûe_size
(
td
, 
f
);

1215 
	}
}

1217 
	$fio_i‹ög_cmd_gë_z⁄ed_modñ
(
thªad_d©a
 *
td
,

1218 
fio_fûe
 *
f
,

1219 
zbd_z⁄ed_modñ
 *
modñ
)

1221  
	`fio_nvme_gë_z⁄ed_modñ
(
td
, 
f
, 
modñ
);

1222 
	}
}

1224 
	$fio_i‹ög_cmd_ªp‹t_z⁄es
(
thªad_d©a
 *
td
,

1225 
fio_fûe
 *
f
, 
uöt64_t
 
off£t
,

1226 
zbd_z⁄e
 *
zbdz
,

1227 
ƒ_z⁄es
)

1229  
	`fio_nvme_ªp‹t_z⁄es
(
td
, 
f
, 
off£t
, 
zbdz
, 
ƒ_z⁄es
);

1230 
	}
}

1232 
	$fio_i‹ög_cmd_ª£t_wp
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

1233 
uöt64_t
 
off£t
, uöt64_à
Àngth
)

1235  
	`fio_nvme_ª£t_wp
(
td
, 
f
, 
off£t
, 
Àngth
);

1236 
	}
}

1238 
	$fio_i‹ög_cmd_gë_max_›í_z⁄es
(
thªad_d©a
 *
td
,

1239 
fio_fûe
 *
f
,

1240 *
max_›í_z⁄es
)

1242  
	`fio_nvme_gë_max_›í_z⁄es
(
td
, 
f
, 
max_›í_z⁄es
);

1243 
	}
}

1245 
i€ngöe_›s
 
	gi€ngöe_urög
 = {

1246 .
«me
 = "io_uring",

1247 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

1248 .
	gÊags
 = 
FIO_ASYNCIO_SYNC_TRIM
 | 
FIO_NO_OFFLOAD
 |

1249 
FIO_ASYNCIO_SETS_ISSUE_TIME
,

1250 .
	göô
 = 
fio_i‹ög_öô
,

1251 .
	gpo°_öô
 = 
fio_i‹ög_po°_öô
,

1252 .
	gio_u_öô
 = 
fio_i‹ög_io_u_öô
,

1253 .
	g¥ï
 = 
fio_i‹ög_¥ï
,

1254 .
	gqueue
 = 
fio_i‹ög_queue
,

1255 .
	gcommô
 = 
fio_i‹ög_commô
,

1256 .
	ggëevíts
 = 
fio_i‹ög_gëevíts
,

1257 .
	gevít
 = 
fio_i‹ög_evít
,

1258 .
	g˛ónup
 = 
fio_i‹ög_˛ónup
,

1259 .
	g›í_fûe
 = 
fio_i‹ög_›í_fûe
,

1260 .
	g˛o£_fûe
 = 
fio_i‹ög_˛o£_fûe
,

1261 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

1262 .
	g›ti⁄s
 = 
›ti⁄s
,

1263 .
	g›ti⁄_°ru˘_size
 = (
i‹ög_›ti⁄s
),

1266 
i€ngöe_›s
 
	gi€ngöe_urög_cmd
 = {

1267 .
«me
 = "io_uring_cmd",

1268 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

1269 .
	gÊags
 = 
FIO_ASYNCIO_SYNC_TRIM
 | 
FIO_NO_OFFLOAD
 |

1270 
FIO_MEMALIGN
 | 
FIO_RAWIO
 |

1271 
FIO_ASYNCIO_SETS_ISSUE_TIME
,

1272 .
	göô
 = 
fio_i‹ög_öô
,

1273 .
	gpo°_öô
 = 
fio_i‹ög_cmd_po°_öô
,

1274 .
	gio_u_öô
 = 
fio_i‹ög_io_u_öô
,

1275 .
	g¥ï
 = 
fio_i‹ög_cmd_¥ï
,

1276 .
	gqueue
 = 
fio_i‹ög_queue
,

1277 .
	gcommô
 = 
fio_i‹ög_commô
,

1278 .
	ggëevíts
 = 
fio_i‹ög_gëevíts
,

1279 .
	gevít
 = 
fio_i‹ög_cmd_evít
,

1280 .
	g˛ónup
 = 
fio_i‹ög_˛ónup
,

1281 .
	g›í_fûe
 = 
fio_i‹ög_cmd_›í_fûe
,

1282 .
	g˛o£_fûe
 = 
fio_i‹ög_cmd_˛o£_fûe
,

1283 .
	ggë_fûe_size
 = 
fio_i‹ög_cmd_gë_fûe_size
,

1284 .
	ggë_z⁄ed_modñ
 = 
fio_i‹ög_cmd_gë_z⁄ed_modñ
,

1285 .
	gªp‹t_z⁄es
 = 
fio_i‹ög_cmd_ªp‹t_z⁄es
,

1286 .
	gª£t_wp
 = 
fio_i‹ög_cmd_ª£t_wp
,

1287 .
	ggë_max_›í_z⁄es
 = 
fio_i‹ög_cmd_gë_max_›í_z⁄es
,

1288 .
	g›ti⁄s
 = 
›ti⁄s
,

1289 .
	g›ti⁄_°ru˘_size
 = (
i‹ög_›ti⁄s
),

1292 
fio_öô
 
	$fio_i‹ög_ªgi°î
()

1294 
	`ªgi°î_i€ngöe
(&
i€ngöe_urög
);

1295 
	`ªgi°î_i€ngöe
(&
i€ngöe_urög_cmd
);

1296 
	}
}

1298 
fio_exô
 
	$fio_i‹ög_uƒegi°î
()

1300 
	`uƒegi°î_i€ngöe
(&
i€ngöe_urög
);

1301 
	`uƒegi°î_i€ngöe
(&
i€ngöe_urög_cmd
);

1302 
	}
}

	@engines/libaio.c

7 
	~<°dlib.h
>

8 
	~<uni°d.h
>

9 
	~<î∫o.h
>

10 
	~<libaio.h
>

11 
	~<sys/time.h
>

12 
	~<sys/ªsour˚.h
>

14 
	~"../fio.h
"

15 
	~"../lib/pow2.h
"

16 
	~"../›tgroup.h
"

17 
	~"../lib/memÆign.h
"

18 
	~"cmd¥io.h
"

21 #i‚de‡
IOCB_FLAG_IOPRIO


22 
	#IOCB_FLAG_IOPRIO
 (1 << 1)

	)

26 #i‚de‡
CONFIG_LIBAIO_RW_FLAGS


27 
	#aio_rw_Êags
 
__∑d2


	)

30 
fio_libaio_commô
(
thªad_d©a
 *
td
);

31 
fio_libaio_öô
(
thªad_d©a
 *
td
);

33 
	slibaio_d©a
 {

34 
io_c⁄ãxt_t
 
	maio_˘x
;

35 
io_evít
 *
	maio_evíts
;

36 
iocb
 **
	miocbs
;

37 
io_u
 **
	mio_us
;

39 
io_u
 **
	mio_u_ödex
;

49 
	mis_pow2
;

50 
	míåõs
;

51 
	mqueued
;

52 
	mhód
;

53 
	mèû
;

55 
cmd¥io
 
	mcmd¥io
;

58 
	slibaio_›ti⁄s
 {

59 
thªad_d©a
 *
	mtd
;

60 
	mu£r•a˚_ª≠
;

61 
cmd¥io_›ti⁄s
 
	mcmd¥io_›ti⁄s
;

62 
	mnowaô
;

65 
fio_›ti⁄
 
	g›ti⁄s
[] = {

67 .
«me
 = "userspace_reap",

68 .
	g ame
 = "Libaio userspaceÑeaping",

69 .
	gty≥
 = 
FIO_OPT_STR_SET
,

70 .
	goff1
 = 
off£tof
(
libaio_›ti⁄s
, 
u£r•a˚_ª≠
),

71 .
	ghñp
 = "Useálternative user-spaceÑeap implementation",

72 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

73 .
	ggroup
 = 
FIO_OPT_G_LIBAIO
,

75 #ifde‡
FIO_HAVE_IOPRIO_CLASS


77 .
	g«me
 = "cmdprio_percentage",

78 .
	g ame
 = "highÖriorityÖercentage",

79 .
	gty≥
 = 
FIO_OPT_INT
,

80 .
	goff1
 = 
off£tof
(
libaio_›ti⁄s
,

81 
cmd¥io_›ti⁄s
.
≥r˚¡age
[
DDIR_READ
]),

82 .
	goff2
 = 
off£tof
(
libaio_›ti⁄s
,

83 
cmd¥io_›ti⁄s
.
≥r˚¡age
[
DDIR_WRITE
]),

84 .
	gmövÆ
 = 0,

85 .
	gmaxvÆ
 = 100,

86 .
	ghñp
 = "Send highÖriority I/OÅhisÖercentage ofÅheÅime",

87 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

88 .
	ggroup
 = 
FIO_OPT_G_LIBAIO
,

91 .
	g«me
 = "cmdprio_class",

92 .
	g ame
 = "Asynchronous I/OÖriority class",

93 .
	gty≥
 = 
FIO_OPT_INT
,

94 .
	goff1
 = 
off£tof
(
libaio_›ti⁄s
,

95 
cmd¥io_›ti⁄s
.
˛ass
[
DDIR_READ
]),

96 .
	goff2
 = 
off£tof
(
libaio_›ti⁄s
,

97 
cmd¥io_›ti⁄s
.
˛ass
[
DDIR_WRITE
]),

98 .
	ghñp
 = "Setásynchronous IOÖriority class",

99 .
	gmövÆ
 = 
IOPRIO_MIN_PRIO_CLASS
 + 1,

100 .
	gmaxvÆ
 = 
IOPRIO_MAX_PRIO_CLASS
,

101 .
	göãrvÆ
 = 1,

102 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

103 .
	ggroup
 = 
FIO_OPT_G_LIBAIO
,

106 .
	g«me
 = "cmdprio",

107 .
	g ame
 = "Asynchronous I/OÖriorityÜevel",

108 .
	gty≥
 = 
FIO_OPT_INT
,

109 .
	goff1
 = 
off£tof
(
libaio_›ti⁄s
,

110 
cmd¥io_›ti⁄s
.
Àvñ
[
DDIR_READ
]),

111 .
	goff2
 = 
off£tof
(
libaio_›ti⁄s
,

112 
cmd¥io_›ti⁄s
.
Àvñ
[
DDIR_WRITE
]),

113 .
	ghñp
 = "Setásynchronous IOÖriorityÜevel",

114 .
	gmövÆ
 = 
IOPRIO_MIN_PRIO
,

115 .
	gmaxvÆ
 = 
IOPRIO_MAX_PRIO
,

116 .
	göãrvÆ
 = 1,

117 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

118 .
	ggroup
 = 
FIO_OPT_G_LIBAIO
,

121 .
	g«me
 = "cmdprio_bssplit",

122 .
	g ame
 = "PriorityÖercentage block size split",

123 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

124 .
	goff1
 = 
off£tof
(
libaio_›ti⁄s
,

125 
cmd¥io_›ti⁄s
.
bs•lô_°r
),

126 .
	ghñp
 = "SetÖriorityÖercentages for different block sizes",

127 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

128 .
	ggroup
 = 
FIO_OPT_G_LIBAIO
,

132 .
	g«me
 = "cmdprio_percentage",

133 .
	g ame
 = "highÖriorityÖercentage",

134 .
	gty≥
 = 
FIO_OPT_UNSUPPORTED
,

135 .
	ghñp
 = "YourÖlatform doesÇot support I/OÖriority classes",

138 .
	g«me
 = "cmdprio_class",

139 .
	g ame
 = "Asynchronous I/OÖriority class",

140 .
	gty≥
 = 
FIO_OPT_UNSUPPORTED
,

141 .
	ghñp
 = "YourÖlatform doesÇot support I/OÖriority classes",

144 .
	g«me
 = "cmdprio",

145 .
	g ame
 = "Asynchronous I/OÖriorityÜevel",

146 .
	gty≥
 = 
FIO_OPT_UNSUPPORTED
,

147 .
	ghñp
 = "YourÖlatform doesÇot support I/OÖriority classes",

150 .
	g«me
 = "cmdprio_bssplit",

151 .
	g ame
 = "PriorityÖercentage block size split",

152 .
	gty≥
 = 
FIO_OPT_UNSUPPORTED
,

153 .
	ghñp
 = "YourÖlatform doesÇot support I/OÖriority classes",

157 .
	g«me
 = "nowait",

158 .
	g ame
 = "RWF_NOWAIT",

159 .
	gty≥
 = 
FIO_OPT_BOOL
,

160 .
	goff1
 = 
off£tof
(
libaio_›ti⁄s
, 
nowaô
),

161 .
	ghñp
 = "Set RWF_NOWAIT forÑeads/writes",

162 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

163 .
	ggroup
 = 
FIO_OPT_G_LIBAIO
,

166 .
	g«me
 = 
NULL
,

170 
ölöe
 
	$rög_öc
(
libaio_d©a
 *
ld
, *
vÆ
,

171 
add
)

173 i‡(
ld
->
is_pow2
)

174 *
vÆ
 = (*vÆ + 
add
Ë& (
ld
->
íåõs
 - 1);

176 *
vÆ
 = (*vÆ + 
add
Ë% 
ld
->
íåõs
;

177 
	}
}

179 
	$fio_libaio_¥ï
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

181 
libaio_›ti⁄s
 *
o
 = 
td
->
eo
;

182 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

183 
iocb
 *iocb = &
io_u
->iocb;

185 i‡(
io_u
->
ddú
 =
DDIR_READ
) {

186 
	`io_¥ï_¥ód
(
iocb
, 
f
->
fd
, 
io_u
->
x„r_buf
, io_u->
x„r_buÊí
, io_u->
off£t
);

187 i‡(
o
->
nowaô
)

188 
iocb
->
aio_rw_Êags
 |
RWF_NOWAIT
;

189 } i‡(
io_u
->
ddú
 =
DDIR_WRITE
) {

190 
	`io_¥ï_pwrôe
(
iocb
, 
f
->
fd
, 
io_u
->
x„r_buf
, io_u->
x„r_buÊí
, io_u->
off£t
);

191 i‡(
o
->
nowaô
)

192 
iocb
->
aio_rw_Êags
 |
RWF_NOWAIT
;

193 } i‡(
	`ddú_sync
(
io_u
->
ddú
))

194 
	`io_¥ï_fsync
(
iocb
, 
f
->
fd
);

197 
	}
}

199 
ölöe
 
	$fio_libaio_cmd¥io_¥ï
(
thªad_d©a
 *
td
,

200 
io_u
 *io_u)

202 
libaio_d©a
 *
ld
 = 
td
->
io_›s_d©a
;

203 
cmd¥io
 *cmd¥iÿ&
ld
->cmdprio;

205 i‡(
	`fio_cmd¥io_£t_i›rio
(
td
, 
cmd¥io
, 
io_u
)) {

206 
io_u
->
iocb
.
aio_ªq¥io
 = io_u->
i›rio
;

207 
io_u
->
iocb
.
u
.
c
.
Êags
 |
IOCB_FLAG_IOPRIO
;

209 
	}
}

211 
io_u
 *
	$fio_libaio_evít
(
thªad_d©a
 *
td
, 
evít
)

213 
libaio_d©a
 *
ld
 = 
td
->
io_›s_d©a
;

214 
io_evít
 *
ev
;

215 
io_u
 *io_u;

217 
ev
 = 
ld
->
aio_evíts
 + 
evít
;

218 
io_u
 = 
	`c⁄èöî_of
(
ev
->
obj
, io_u, 
iocb
);

220 i‡(
ev
->
ªs
 !
io_u
->
x„r_buÊí
) {

221 i‡(
ev
->
ªs
 > 
io_u
->
x„r_buÊí
)

222 
io_u
->
îr‹
 = -
ev
->
ªs
;

224 
io_u
->
ªsid
 = io_u->
x„r_buÊí
 - 
ev
->
ªs
;

226 
io_u
->
îr‹
 = 0;

228  
io_u
;

229 
	}
}

231 
	saio_rög
 {

232 
	mid
;

233 
	mƒ
;

234 
	mhód
;

235 
	mèû
;

237 
	mmagic
;

238 
	mcom∑t_„©uªs
;

239 
	möcom∑t_„©uªs
;

240 
	mhódî_Àngth
;

242 
io_evít
 
	mevíts
[0];

245 
	#AIO_RING_MAGIC
 0xa10a10a1

	)

247 
	$u£r_io_gëevíts
(
io_c⁄ãxt_t
 
aio_˘x
, 
max
,

248 
io_evít
 *
evíts
)

250 
i
 = 0;

251 
hód
;

252 
aio_rög
 *
rög
 = (aio_rög*Ë
aio_˘x
;

254 
i
 < 
max
) {

255 
hód
 = 
rög
->head;

257 i‡(
hód
 =
rög
->
èû
) {

262 
evíts
[
i
] = 
rög
->evíts[
hód
];

263 
	`©omic_°‹e_ªÀa£
(&
rög
->
hód
,

264 (
hód
 + 1Ë% 
rög
->
ƒ
);

265 
i
++;

269  
i
;

270 
	}
}

272 
	$fio_libaio_gëevíts
(
thªad_d©a
 *
td
, 
mö
,

273 
max
, c⁄° 
time•ec
 *
t
)

275 
libaio_d©a
 *
ld
 = 
td
->
io_›s_d©a
;

276 
libaio_›ti⁄s
 *
o
 = 
td
->
eo
;

277 
a˘uÆ_mö
 = 
td
->
o
.
iodïth_b©ch_com∂ëe_mö
 =0 ? 0 : 
mö
;

278 
time•ec
 
__…
, *
…
 = 
NULL
;

279 
r
, 
evíts
 = 0;

281 i‡(
t
) {

282 
__…
 = *
t
;

283 
…
 = &
__…
;

287 i‡(
o
->
u£r•a˚_ª≠
 == 1

288 && 
a˘uÆ_mö
 == 0

289 && ((
aio_rög
 *)(
ld
->
aio_˘x
))->
magic


290 =
AIO_RING_MAGIC
) {

291 
r
 = 
	`u£r_io_gëevíts
(
ld
->
aio_˘x
, 
max
,

292 
ld
->
aio_evíts
 + 
evíts
);

294 
r
 = 
	`io_gëevíts
(
ld
->
aio_˘x
, 
a˘uÆ_mö
,

295 
max
, 
ld
->
aio_evíts
 + 
evíts
, 
…
);

297 i‡(
r
 > 0)

298 
evíts
 +
r
;

299 i‡((
mö
 && 
r
 =0Ë||Ñ =-
EAGAIN
) {

300 
	`fio_libaio_commô
(
td
);

301 i‡(
a˘uÆ_mö
)

302 
	`u¶ìp
(10);

303 } i‡(
r
 !-
EINTR
)

305 } 
evíts
 < 
mö
);

307  
r
 < 0 ?Ñ : 
evíts
;

308 
	}
}

310 
fio_q_°©us
 
	$fio_libaio_queue
(
thªad_d©a
 *
td
,

311 
io_u
 *io_u)

313 
libaio_d©a
 *
ld
 = 
td
->
io_›s_d©a
;

315 
	`fio_ro_check
(
td
, 
io_u
);

317 i‡(
ld
->
queued
 =
td
->
o
.
iodïth
)

318  
FIO_Q_BUSY
;

326 i‡(
	`ddú_sync
(
io_u
->
ddú
)) {

327 i‡(
ld
->
queued
)

328  
FIO_Q_BUSY
;

330 
	`do_io_u_sync
(
td
, 
io_u
);

331  
FIO_Q_COMPLETED
;

334 i‡(
io_u
->
ddú
 =
DDIR_TRIM
) {

335 i‡(
ld
->
queued
)

336  
FIO_Q_BUSY
;

338 
	`do_io_u_åim
(
td
, 
io_u
);

339 
	`io_u_m¨k_submô
(
td
, 1);

340 
	`io_u_m¨k_com∂ëe
(
td
, 1);

341  
FIO_Q_COMPLETED
;

344 i‡(
ld
->
cmd¥io
.
mode
 !
CMDPRIO_MODE_NONE
)

345 
	`fio_libaio_cmd¥io_¥ï
(
td
, 
io_u
);

347 
ld
->
iocbs
[ld->
hód
] = &
io_u
->
iocb
;

348 
ld
->
io_us
[ld->
hód
] = 
io_u
;

349 
	`rög_öc
(
ld
, &ld->
hód
, 1);

350 
ld
->
queued
++;

351  
FIO_Q_QUEUED
;

352 
	}
}

354 
	$fio_libaio_queued
(
thªad_d©a
 *
td
, 
io_u
 **
io_us
,

355 
ƒ
)

357 
time•ec
 
now
;

358 
i
;

360 i‡(!
	`fio_fûl_issue_time
(
td
))

363 
	`fio_gëtime
(&
now
, 
NULL
);

365 
i
 = 0; i < 
ƒ
; i++) {

366 
io_u
 *io_u = 
io_us
[
i
];

368 
	`mem˝y
(&
io_u
->
issue_time
, &
now
, (now));

369 
	`io_u_queued
(
td
, 
io_u
);

375 i‡(
td
->
o
.
ªad_iﬁog_fûe
)

376 
	`mem˝y
(&
td
->
œ°_issue
, &
now
, (now));

377 
	}
}

379 
	$fio_libaio_commô
(
thªad_d©a
 *
td
)

381 
libaio_d©a
 *
ld
 = 
td
->
io_›s_d©a
;

382 
iocb
 **
iocbs
;

383 
io_u
 **
io_us
;

384 
time•ec
 
ts
;

385 
ªt
, 
waô_°¨t
 = 0;

387 i‡(!
ld
->
queued
)

391 
ƒ
 = 
ld
->
queued
;

393 
ƒ
 = 
	`mö
((Ëƒ, 
ld
->
íåõs
 -Üd->
èû
);

394 
io_us
 = 
ld
->io_u†+Üd->
èû
;

395 
iocbs
 = 
ld
->iocb†+Üd->
èû
;

397 
ªt
 = 
	`io_submô
(
ld
->
aio_˘x
, 
ƒ
, 
iocbs
);

398 i‡(
ªt
 > 0) {

399 
	`fio_libaio_queued
(
td
, 
io_us
, 
ªt
);

400 
	`io_u_m¨k_submô
(
td
, 
ªt
);

402 
ld
->
queued
 -
ªt
;

403 
	`rög_öc
(
ld
, &ld->
èû
, 
ªt
);

404 
ªt
 = 0;

405 
waô_°¨t
 = 0;

406 } i‡(
ªt
 =-
EINTR
 || !ret) {

407 i‡(!
ªt
)

408 
	`io_u_m¨k_submô
(
td
, 
ªt
);

409 
waô_°¨t
 = 0;

411 } i‡(
ªt
 =-
EAGAIN
) {

420 i‡(
ld
->
queued
) {

421 
ªt
 = 0;

424 i‡(!
waô_°¨t
) {

425 
	`fio_gëtime
(&
ts
, 
NULL
);

426 
waô_°¨t
 = 1;

427 } i‡(
	`mtime_sö˚_now
(&
ts
) > 30000) {

428 
	`log_îr
("fio:áioáppearsÅo be stalled, giving up\n");

431 
	`u¶ìp
(1);

433 } i‡(
ªt
 =-
ENOMEM
) {

439 i‡(
ld
->
queued
)

440 
ªt
 = 0;

444 } 
ld
->
queued
);

446  
ªt
;

447 
	}
}

449 
	$fio_libaio_ˇn˚l
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

451 
libaio_d©a
 *
ld
 = 
td
->
io_›s_d©a
;

453  
	`io_ˇn˚l
(
ld
->
aio_˘x
, &
io_u
->
iocb
,Üd->
aio_evíts
);

454 
	}
}

456 
	$fio_libaio_˛ónup
(
thªad_d©a
 *
td
)

458 
libaio_d©a
 *
ld
 = 
td
->
io_›s_d©a
;

460 i‡(
ld
) {

467 i‡(!(
td
->
Êags
 & 
TD_F_CHILD
))

468 
	`io_de°roy
(
ld
->
aio_˘x
);

470 
	`fio_cmd¥io_˛ónup
(&
ld
->
cmd¥io
);

471 
	`‰ì
(
ld
->
aio_evíts
);

472 
	`‰ì
(
ld
->
iocbs
);

473 
	`‰ì
(
ld
->
io_us
);

474 
	`‰ì
(
ld
);

476 
	}
}

478 
	$fio_libaio_po°_öô
(
thªad_d©a
 *
td
)

480 
libaio_d©a
 *
ld
 = 
td
->
io_›s_d©a
;

481 
îr
;

483 
îr
 = 
	`io_queue_öô
(
td
->
o
.
iodïth
, &
ld
->
aio_˘x
);

484 i‡(
îr
) {

485 
	`td_vîr‹
(
td
, -
îr
, "io_queue_init");

490 
	}
}

492 
	$fio_libaio_öô
(
thªad_d©a
 *
td
)

494 
libaio_d©a
 *
ld
;

495 
libaio_›ti⁄s
 *
o
 = 
td
->
eo
;

496 
ªt
;

498 
ld
 = 
	`ˇŒoc
(1, (*ld));

500 
ld
->
íåõs
 = 
td
->
o
.
iodïth
;

501 
ld
->
is_pow2
 = 
	`is_powî_of_2
÷d->
íåõs
);

502 
ld
->
aio_evíts
 = 
	`ˇŒoc
÷d->
íåõs
, (
io_evít
));

503 
ld
->
iocbs
 = 
	`ˇŒoc
÷d->
íåõs
, (
iocb
 *));

504 
ld
->
io_us
 = 
	`ˇŒoc
÷d->
íåõs
, (
io_u
 *));

506 
td
->
io_›s_d©a
 = 
ld
;

508 
ªt
 = 
	`fio_cmd¥io_öô
(
td
, &
ld
->
cmd¥io
, &
o
->
cmd¥io_›ti⁄s
);

509 i‡(
ªt
) {

510 
	`td_vîr‹
(
td
, 
EINVAL
, "fio_libaio_init");

515 
	}
}

517 
FIO_STATIC
 
i€ngöe_›s
 
	gi€ngöe
 = {

518 .
«me
 = "libaio",

519 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

520 .
	gÊags
 = 
FIO_ASYNCIO_SYNC_TRIM
 |

521 
FIO_ASYNCIO_SETS_ISSUE_TIME
,

522 .
	göô
 = 
fio_libaio_öô
,

523 .
	gpo°_öô
 = 
fio_libaio_po°_öô
,

524 .
	g¥ï
 = 
fio_libaio_¥ï
,

525 .
	gqueue
 = 
fio_libaio_queue
,

526 .
	gcommô
 = 
fio_libaio_commô
,

527 .
	gˇn˚l
 = 
fio_libaio_ˇn˚l
,

528 .
	ggëevíts
 = 
fio_libaio_gëevíts
,

529 .
	gevít
 = 
fio_libaio_evít
,

530 .
	g˛ónup
 = 
fio_libaio_˛ónup
,

531 .
	g›í_fûe
 = 
gíîic_›í_fûe
,

532 .
	g˛o£_fûe
 = 
gíîic_˛o£_fûe
,

533 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

534 .
	g›ti⁄s
 = 
›ti⁄s
,

535 .
	g›ti⁄_°ru˘_size
 = (
libaio_›ti⁄s
),

538 
fio_öô
 
	$fio_libaio_ªgi°î
()

540 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

541 
	}
}

543 
fio_exô
 
	$fio_libaio_uƒegi°î
()

545 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

546 
	}
}

	@engines/libcufile.c

13 
	~<°dlib.h
>

14 
	~<uni°d.h
>

15 
	~<î∫o.h
>

16 
	~<°rög.h
>

17 
	~<sys/time.h
>

18 
	~<sys/ªsour˚.h
>

19 
	~<cufûe.h
>

20 
	~<cuda.h
>

21 
	~<cuda_ru¡ime.h
>

22 
	~<±hªad.h
>

24 
	~"../fio.h
"

25 
	~"../lib/pow2.h
"

26 
	~"../›tgroup.h
"

27 
	~"../lib/memÆign.h
"

29 
	#ALIGNED_4KB
(
v
Ë(((vË& 0x0fffË=0)

	)

31 
	#LOGGED_BUFLEN_NOT_ALIGNED
 0x01

	)

32 
	#LOGGED_GPU_OFFSET_NOT_ALIGNED
 0x02

	)

33 
	#GPU_ID_SEP
 ":"

	)

36 
	mIO_CUFILE
 = 1,

37 
	mIO_POSIX
 = 2

40 
	slibcufûe_›ti⁄s
 {

41 
thªad_d©a
 *
	mtd
;

42 *
	mgpu_ids
;

44 *
	mcu_mem_±r
;

45 *
	mjunk_buf
;

47 
	mmy_gpu_id
;

48 
	mcuda_io
;

49 
size_t
 
	mtŸÆ_mem
;

50 
	mlogged
;

54 
	sfio_libcufûe_d©a
 {

55 
CUfûeDes¸_t
 
	mcf_des¸
;

56 
CUfûeH™dÀ_t
 
	mcf_h™dÀ
;

59 
fio_›ti⁄
 
	g›ti⁄s
[] = {

61 .
«me
 = "gpu_dev_ids",

62 .
	g ame
 = "libcufileÉngine gpu dev ids",

63 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

64 .
	goff1
 = 
off£tof
(
libcufûe_›ti⁄s
, 
gpu_ids
),

65 .
	ghñp
 = "GPU IDs, o√Öî subjob, sï¨©ed by " 
GPU_ID_SEP
,

66 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

67 .
	ggroup
 = 
FIO_OPT_G_LIBCUFILE
,

70 .
	g«me
 = "cuda_io",

71 .
	g ame
 = "libcufile cuda io",

72 .
	gty≥
 = 
FIO_OPT_STR
,

73 .
	goff1
 = 
off£tof
(
libcufûe_›ti⁄s
, 
cuda_io
),

74 .
	ghñp
 = "Type of I/OÅo use with CUDA",

75 .
	gdef
 = "cufile",

76 .
	gposvÆ
 = {

77 { .
ivÆ
 = "cufile",

78 .
	govÆ
 = 
IO_CUFILE
,

79 .
	ghñp
 = "libcufileÇvidia-fs"

81 { .
	givÆ
 = "posix",

82 .
	govÆ
 = 
IO_POSIX
,

83 .
	ghñp
 = "POSIX I/O"

86 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

87 .
	ggroup
 = 
FIO_OPT_G_LIBCUFILE
,

90 .
	g«me
 = 
NULL
,

94 
	gru¬ög
 = 0;

95 
	gcufûe_öôülized
 = 0;

96 
±hªad_muãx_t
 
	gru¬ög_lock
 = 
PTHREAD_MUTEX_INITIALIZER
;

98 
	#check_cud¨u¡imeˇŒ
(
‚
, 
rc
) \

100 
cudaEº‹_t
 
ªs
 = 
‚
; \

101 i‡(
ªs
 !
cudaSuc˚ss
) { \

102 c⁄° *
°r
 = 
	`cudaGëEº‹Name
(
ªs
); \

103 
	`log_îr
("cudaÑuntimeápi call failed %s:%d :Érr=%d:%s\n", \

104 #‚, 
__LINE__
, 
ªs
, 
°r
); \

105 
rc
 = -1; \

107 
rc
 = 0; \

108 } 0)

	)

110 c⁄° *
	$fio_libcufûe_gë_cuda_îr‹
(
CUfûeEº‹_t
 
°
)

112 i‡(
	`IS_CUFILE_ERR
(
°
.
îr
))

113  
	`cufûe›_°©us_îr‹
(
°
.
îr
);

115 
	}
}

121 
	$fio_libcufûe_föd_gpu_id
(
thªad_d©a
 *
td
)

123 
libcufûe_›ti⁄s
 *
o
 = 
td
->
eo
;

124 
gpu_id
 = 0;

126 i‡(
o
->
gpu_ids
 !
NULL
) {

127 *
gpu_ids
, *
pos
, *
cur
;

128 
i
, 
id_cou¡
, 
gpu_idx
;

130 
id_cou¡
 = 0, 
cur
 = 
o
->
gpu_ids
; cu∏!
NULL
; id_count++) {

131 
cur
 = 
	`°rchr
(cur, 
GPU_ID_SEP
[0]);

132 i‡(
cur
 !
NULL
)

133 
cur
++;

136 
gpu_idx
 = 
td
->
subjob_numbî
 % 
id_cou¡
;

138 
pos
 = 
gpu_ids
 = 
	`°rdup
(
o
->gpu_ids);

139 i‡(
gpu_ids
 =
NULL
) {

140 
	`log_îr
("°rdup(gpu_ids):Éº=%d\n", 
î∫o
);

144 
i
 = 0;

145 
pos
 !
NULL
 && 
i
 <
gpu_idx
) {

146 
i
++;

147 
cur
 = 
	`°r£p
(&
pos
, 
GPU_ID_SEP
);

150 i‡(
cur
)

151 
gpu_id
 = 
	`©oi
(
cur
);

153 
	`‰ì
(
gpu_ids
);

156  
gpu_id
;

157 
	}
}

159 
	$fio_libcufûe_öô
(
thªad_d©a
 *
td
)

161 
libcufûe_›ti⁄s
 *
o
 = 
td
->
eo
;

162 
CUfûeEº‹_t
 
°©us
;

163 
öôülized
;

164 
rc
;

166 
	`±hªad_muãx_lock
(&
ru¬ög_lock
);

167 i‡(
ru¬ög
 == 0) {

168 
	`as£π
(
cufûe_öôülized
 == 0);

169 i‡(
o
->
cuda_io
 =
IO_CUFILE
) {

171 
°©us
 = 
	`cuFûeDrivîO≥n
();

172 i‡(
°©us
.
îr
 !
CU_FILE_SUCCESS
)

173 
	`log_îr
("cuFûeDrivîO≥n:Éº=%d:%s\n", 
°©us
.
îr
,

174 
	`fio_libcufûe_gë_cuda_îr‹
(
°©us
));

176 
cufûe_öôülized
 = 1;

179 
ru¬ög
++;

180 
öôülized
 = 
cufûe_öôülized
;

181 
	`±hªad_muãx_u∆ock
(&
ru¬ög_lock
);

183 i‡(
o
->
cuda_io
 =
IO_CUFILE
 && !
öôülized
)

186 
o
->
my_gpu_id
 = 
	`fio_libcufûe_föd_gpu_id
(
td
);

187 i‡(
o
->
my_gpu_id
 < 0)

190 
	`d¥öt
(
FD_MEM
, "Subjob %d u£†GPU %d\n", 
td
->
subjob_numbî
, 
o
->
my_gpu_id
);

191 
	`check_cud¨u¡imeˇŒ
(
	`cudaSëDevi˚
(
o
->
my_gpu_id
), 
rc
);

192 i‡(
rc
 != 0)

196 
	}
}

198 
ölöe
 
	$fio_libcufûe_¥e_wrôe
(
thªad_d©a
 *
td
,

199 
libcufûe_›ti⁄s
 *
o
,

200 
io_u
 *io_u,

201 
size_t
 
gpu_off£t
)

203 
rc
 = 0;

205 i‡(
o
->
cuda_io
 =
IO_CUFILE
) {

206 i‡(
td
->
o
.
vîify
) {

212 
	`check_cud¨u¡imeˇŒ
(
	`cudaMem˝y
(((*Ë
o
->
cu_mem_±r
Ë+ 
gpu_off£t
,

213 
io_u
->
x„r_buf
,

214 
io_u
->
x„r_buÊí
,

215 
cudaMem˝yHo°ToDevi˚
), 
rc
);

216 i‡(
rc
 != 0) {

217 
	`log_îr
("DDIR_WRITE cudaMemcpy H2D failed\n");

218 
io_u
->
îr‹
 = 
EIO
;

221 } i‡(
o
->
cuda_io
 =
IO_POSIX
) {

230 
	`check_cud¨u¡imeˇŒ
(
	`cudaMem˝y
(
o
->
junk_buf
 + 
gpu_off£t
,

231 ((*Ë
o
->
cu_mem_±r
Ë+ 
gpu_off£t
,

232 
io_u
->
x„r_buÊí
,

233 
cudaMem˝yDevi˚ToHo°
), 
rc
);

234 i‡(
rc
 != 0) {

235 
	`log_îr
("DDIR_WRITE cudaMemcpy D2H failed\n");

236 
io_u
->
îr‹
 = 
EIO
;

239 
	`log_îr
("IŒegÆ CUDA IOÅy≥: %d\n", 
o
->
cuda_io
);

240 
	`as£π
(0);

241 
rc
 = 
EINVAL
;

244  
rc
;

245 
	}
}

247 
ölöe
 
	$fio_libcufûe_po°_ªad
(
thªad_d©a
 *
td
,

248 
libcufûe_›ti⁄s
 *
o
,

249 
io_u
 *io_u,

250 
size_t
 
gpu_off£t
)

252 
rc
 = 0;

254 i‡(
o
->
cuda_io
 =
IO_CUFILE
) {

255 i‡(
td
->
o
.
vîify
) {

257 
	`check_cud¨u¡imeˇŒ
(
	`cudaMem˝y
(
io_u
->
x„r_buf
,

258 ((*Ë
o
->
cu_mem_±r
Ë+ 
gpu_off£t
,

259 
io_u
->
x„r_buÊí
,

260 
cudaMem˝yDevi˚ToHo°
), 
rc
);

261 i‡(
rc
 != 0) {

262 
	`log_îr
("DDIR_READ cudaMemcpy D2H failed\n");

263 
io_u
->
îr‹
 = 
EIO
;

266 } i‡(
o
->
cuda_io
 =
IO_POSIX
) {

268 
	`check_cud¨u¡imeˇŒ
(
	`cudaMem˝y
(((*Ë
o
->
cu_mem_±r
Ë+ 
gpu_off£t
,

269 
io_u
->
x„r_buf
,

270 
io_u
->
x„r_buÊí
,

271 
cudaMem˝yHo°ToDevi˚
), 
rc
);

272 i‡(
rc
 != 0) {

273 
	`log_îr
("DDIR_READ cudaMemcpy H2D failed\n");

274 
io_u
->
îr‹
 = 
EIO
;

277 
	`log_îr
("IŒegÆ CUDA IOÅy≥: %d\n", 
o
->
cuda_io
);

278 
	`as£π
(0);

279 
rc
 = 
EINVAL
;

282  
rc
;

283 
	}
}

285 
fio_q_°©us
 
	$fio_libcufûe_queue
(
thªad_d©a
 *
td
,

286 
io_u
 *io_u)

288 
libcufûe_›ti⁄s
 *
o
 = 
td
->
eo
;

289 
fio_libcufûe_d©a
 *
fcd
 = 
	`FILE_ENG_DATA
(
io_u
->
fûe
);

290 
io_off£t
;

291 
ssize_t
 
sz
;

292 
ssize_t
 
ªmaöög
;

293 
size_t
 
x„ªd
;

294 
size_t
 
gpu_off£t
;

295 
rc
;

297 i‡(
o
->
cuda_io
 =
IO_CUFILE
 && 
fcd
 =
NULL
) {

298 
io_u
->
îr‹
 = 
EINVAL
;

299 
	`td_vîr‹
(
td
, 
EINVAL
, "xfer");

300  
FIO_Q_COMPLETED
;

303 
	`fio_ro_check
(
td
, 
io_u
);

305 
io_u
->
ddú
) {

306 
DDIR_SYNC
:

307 
rc
 = 
	`fsync
(
io_u
->
fûe
->
fd
);

308 i‡(
rc
 != 0) {

309 
io_u
->
îr‹
 = 
î∫o
;

310 
	`log_îr
("fsync:Éº=%d\n", 
î∫o
);

314 
DDIR_DATASYNC
:

315 
rc
 = 
	`fd©async
(
io_u
->
fûe
->
fd
);

316 i‡(
rc
 != 0) {

317 
io_u
->
îr‹
 = 
î∫o
;

318 
	`log_îr
("fd©async:Éº=%d\n", 
î∫o
);

322 
DDIR_READ
:

323 
DDIR_WRITE
:

329 
gpu_off£t
 = 
io_u
->
ödex
 * io_u->
x„r_buÊí
;

330 
io_off£t
 = 
io_u
->
off£t
;

331 
ªmaöög
 = 
io_u
->
x„r_buÊí
;

333 
x„ªd
 = 0;

334 
sz
 = 0;

336 
	`as£π
(
gpu_off£t
 + 
io_u
->
x„r_buÊí
 <
o
->
tŸÆ_mem
);

338 i‡(
o
->
cuda_io
 =
IO_CUFILE
) {

339 i‡(!(
	`ALIGNED_4KB
(
io_u
->
x„r_buÊí
) ||

340 (
o
->
logged
 & 
LOGGED_BUFLEN_NOT_ALIGNED
))) {

341 
	`log_îr
("buÊíÇŸ 4KB-Æig√d: %Œu\n", 
io_u
->
x„r_buÊí
);

342 
o
->
logged
 |
LOGGED_BUFLEN_NOT_ALIGNED
;

345 i‡(!(
	`ALIGNED_4KB
(
gpu_off£t
) ||

346 (
o
->
logged
 & 
LOGGED_GPU_OFFSET_NOT_ALIGNED
))) {

347 
	`log_îr
("gpu_off£ànŸ 4KB-Æig√d: %lu\n", 
gpu_off£t
);

348 
o
->
logged
 |
LOGGED_GPU_OFFSET_NOT_ALIGNED
;

352 i‡(
io_u
->
ddú
 =
DDIR_WRITE
)

353 
rc
 = 
	`fio_libcufûe_¥e_wrôe
(
td
, 
o
, 
io_u
, 
gpu_off£t
);

355 i‡(
io_u
->
îr‹
 != 0)

358 
ªmaöög
 > 0) {

359 
	`as£π
(
gpu_off£t
 + 
x„ªd
 <
o
->
tŸÆ_mem
);

360 i‡(
io_u
->
ddú
 =
DDIR_READ
) {

361 i‡(
o
->
cuda_io
 =
IO_CUFILE
) {

362 
sz
 = 
	`cuFûeRód
(
fcd
->
cf_h™dÀ
, 
o
->
cu_mem_±r
, 
ªmaöög
,

363 
io_off£t
 + 
x„ªd
, 
gpu_off£t
 + xfered);

364 i‡(
sz
 == -1) {

365 
io_u
->
îr‹
 = 
î∫o
;

366 
	`log_îr
("cuFûeRód:Éº=%d\n", 
î∫o
);

367 } i‡(
sz
 < 0) {

368 
io_u
->
îr‹
 = 
EIO
;

369 
	`log_îr
("cuFûeRód:Éº=%ld:%s\n", 
sz
,

370 
	`cufûe›_°©us_îr‹
(-
sz
));

372 } i‡(
o
->
cuda_io
 =
IO_POSIX
) {

373 
sz
 = 
	`¥ód
(
io_u
->
fûe
->
fd
, ((*Ëio_u->
x„r_buf
Ë+ 
x„ªd
,

374 
ªmaöög
, 
io_off£t
 + 
x„ªd
);

375 i‡(
sz
 < 0) {

376 
io_u
->
îr‹
 = 
î∫o
;

377 
	`log_îr
("¥ód:Éº=%d\n", 
î∫o
);

380 
	`log_îr
("IŒegÆ CUDA IOÅy≥: %d\n", 
o
->
cuda_io
);

381 
io_u
->
îr‹
 = -1;

382 
	`as£π
(0);

384 } i‡(
io_u
->
ddú
 =
DDIR_WRITE
) {

385 i‡(
o
->
cuda_io
 =
IO_CUFILE
) {

386 
sz
 = 
	`cuFûeWrôe
(
fcd
->
cf_h™dÀ
, 
o
->
cu_mem_±r
, 
ªmaöög
,

387 
io_off£t
 + 
x„ªd
, 
gpu_off£t
 + xfered);

388 i‡(
sz
 == -1) {

389 
io_u
->
îr‹
 = 
î∫o
;

390 
	`log_îr
("cuFûeWrôe:Éº=%d\n", 
î∫o
);

391 } i‡(
sz
 < 0) {

392 
io_u
->
îr‹
 = 
EIO
;

393 
	`log_îr
("cuFûeWrôe:Éº=%ld:%s\n", 
sz
,

394 
	`cufûe›_°©us_îr‹
(-
sz
));

396 } i‡(
o
->
cuda_io
 =
IO_POSIX
) {

397 
sz
 = 
	`pwrôe
(
io_u
->
fûe
->
fd
,

398 ((*Ë
io_u
->
x„r_buf
Ë+ 
x„ªd
,

399 
ªmaöög
, 
io_off£t
 + 
x„ªd
);

400 i‡(
sz
 < 0) {

401 
io_u
->
îr‹
 = 
î∫o
;

402 
	`log_îr
("pwrôe:Éº=%d\n", 
î∫o
);

405 
	`log_îr
("IŒegÆ CUDA IOÅy≥: %d\n", 
o
->
cuda_io
);

406 
io_u
->
îr‹
 = -1;

407 
	`as£π
(0);

410 
	`log_îr
("nŸ DDIR_READ o∏DDIR_WRITE: %d\n", 
io_u
->
ddú
);

411 
io_u
->
îr‹
 = -1;

412 
	`as£π
(0);

416 i‡(
io_u
->
îr‹
 != 0)

419 
ªmaöög
 -
sz
;

420 
x„ªd
 +
sz
;

422 i‡(
ªmaöög
 != 0)

423 
	`log_öfo
("Incomplete %s: %ld bytesÑemaining\n",

424 
io_u
->
ddú
 =
DDIR_READ
? "ªad" : "wrôe", 
ªmaöög
);

427 i‡(
io_u
->
îr‹
 != 0)

430 i‡(
io_u
->
ddú
 =
DDIR_READ
)

431 
rc
 = 
	`fio_libcufûe_po°_ªad
(
td
, 
o
, 
io_u
, 
gpu_off£t
);

435 
io_u
->
îr‹
 = 
EINVAL
;

439 i‡(
io_u
->
îr‹
 != 0) {

440 
	`log_îr
("IO failed\n");

441 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "xfer");

444  
FIO_Q_COMPLETED
;

445 
	}
}

447 
	$fio_libcufûe_›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

449 
libcufûe_›ti⁄s
 *
o
 = 
td
->
eo
;

450 
fio_libcufûe_d©a
 *
fcd
 = 
NULL
;

451 
rc
;

452 
CUfûeEº‹_t
 
°©us
;

454 
rc
 = 
	`gíîic_›í_fûe
(
td
, 
f
);

455 i‡(
rc
)

456  
rc
;

458 i‡(
o
->
cuda_io
 =
IO_CUFILE
) {

459 
fcd
 = 
	`ˇŒoc
(1, (*fcd));

460 i‡(
fcd
 =
NULL
) {

461 
rc
 = 
ENOMEM
;

462 
exô_îr
;

465 
fcd
->
cf_des¸
.
h™dÀ
.
fd
 = 
f
->fd;

466 
fcd
->
cf_des¸
.
ty≥
 = 
CU_FILE_HANDLE_TYPE_OPAQUE_FD
;

467 
°©us
 = 
	`cuFûeH™dÀRegi°î
(&
fcd
->
cf_h™dÀ
, &fcd->
cf_des¸
);

468 i‡(
°©us
.
îr
 !
CU_FILE_SUCCESS
) {

469 
	`log_îr
("cufûêªgi°î:Éº=%d:%s\n", 
°©us
.
îr
,

470 
	`fio_libcufûe_gë_cuda_îr‹
(
°©us
));

471 
rc
 = 
EINVAL
;

472 
exô_îr
;

476 
	`FILE_SET_ENG_DATA
(
f
, 
fcd
);

479 
exô_îr
:

480 i‡(
fcd
) {

481 
	`‰ì
(
fcd
);

482 
fcd
 = 
NULL
;

484 i‡(
f
) {

485 
rc2
 = 
	`gíîic_˛o£_fûe
(
td
, 
f
);

486 i‡(
rc2
)

487 
	`log_îr
("gíîic_˛o£_fûe:Éº=%d\n", 
rc2
);

489  
rc
;

490 
	}
}

492 
	$fio_libcufûe_˛o£_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

494 
fio_libcufûe_d©a
 *
fcd
 = 
	`FILE_ENG_DATA
(
f
);

495 
rc
;

497 i‡(
fcd
 !
NULL
) {

498 
	`cuFûeH™dÀDîegi°î
(
fcd
->
cf_h™dÀ
);

499 
	`FILE_SET_ENG_DATA
(
f
, 
NULL
);

500 
	`‰ì
(
fcd
);

503 
rc
 = 
	`gíîic_˛o£_fûe
(
td
, 
f
);

505  
rc
;

506 
	}
}

508 
	$fio_libcufûe_iomem_Æloc
(
thªad_d©a
 *
td
, 
size_t
 
tŸÆ_mem
)

510 
libcufûe_›ti⁄s
 *
o
 = 
td
->
eo
;

511 
rc
;

512 
CUfûeEº‹_t
 
°©us
;

514 
o
->
tŸÆ_mem
 =Åotal_mem;

515 
o
->
logged
 = 0;

516 
o
->
cu_mem_±r
 = 
NULL
;

517 
o
->
junk_buf
 = 
NULL
;

518 
td
->
‹ig_buf„r
 = 
	`ˇŒoc
(1, 
tŸÆ_mem
);

519 i‡(!
td
->
‹ig_buf„r
) {

520 
	`log_îr
("‹ig_buf„∏ˇŒo¯Áûed:Éº=%d\n", 
î∫o
);

521 
exô_îr‹
;

524 i‡(
o
->
cuda_io
 =
IO_POSIX
) {

525 
o
->
junk_buf
 = 
	`ˇŒoc
(1, 
tŸÆ_mem
);

526 i‡(
o
->
junk_buf
 =
NULL
) {

527 
	`log_îr
("junk_bu‡ˇŒo¯Áûed:Éº=%d\n", 
î∫o
);

528 
exô_îr‹
;

532 
	`d¥öt
(
FD_MEM
, "AŒo¯%zu f‹ GPU %d\n", 
tŸÆ_mem
, 
o
->
my_gpu_id
);

533 
	`check_cud¨u¡imeˇŒ
(
	`cudaMÆloc
(&
o
->
cu_mem_±r
, 
tŸÆ_mem
), 
rc
);

534 i‡(
rc
 != 0)

535 
exô_îr‹
;

536 
	`check_cud¨u¡imeˇŒ
(
	`cudaMem£t
(
o
->
cu_mem_±r
, 0xab, 
tŸÆ_mem
), 
rc
);

537 i‡(
rc
 != 0)

538 
exô_îr‹
;

540 i‡(
o
->
cuda_io
 =
IO_CUFILE
) {

541 
°©us
 = 
	`cuFûeBufRegi°î
(
o
->
cu_mem_±r
, 
tŸÆ_mem
, 0);

542 i‡(
°©us
.
îr
 !
CU_FILE_SUCCESS
) {

543 
	`log_îr
("cuFûeBufRegi°î:Éº=%d:%s\n", 
°©us
.
îr
,

544 
	`fio_libcufûe_gë_cuda_îr‹
(
°©us
));

545 
exô_îr‹
;

551 
exô_îr‹
:

552 i‡(
td
->
‹ig_buf„r
) {

553 
	`‰ì
(
td
->
‹ig_buf„r
);

554 
td
->
‹ig_buf„r
 = 
NULL
;

556 i‡(
o
->
junk_buf
) {

557 
	`‰ì
(
o
->
junk_buf
);

558 
o
->
junk_buf
 = 
NULL
;

560 i‡(
o
->
cu_mem_±r
) {

561 
	`cudaFªe
(
o
->
cu_mem_±r
);

562 
o
->
cu_mem_±r
 = 
NULL
;

565 
	}
}

567 
	$fio_libcufûe_iomem_‰ì
(
thªad_d©a
 *
td
)

569 
libcufûe_›ti⁄s
 *
o
 = 
td
->
eo
;

571 i‡(
o
->
junk_buf
) {

572 
	`‰ì
(
o
->
junk_buf
);

573 
o
->
junk_buf
 = 
NULL
;

575 i‡(
o
->
cu_mem_±r
) {

576 i‡(
o
->
cuda_io
 =
IO_CUFILE
)

577 
	`cuFûeBufDîegi°î
(
o
->
cu_mem_±r
);

578 
	`cudaFªe
(
o
->
cu_mem_±r
);

579 
o
->
cu_mem_±r
 = 
NULL
;

581 i‡(
td
->
‹ig_buf„r
) {

582 
	`‰ì
(
td
->
‹ig_buf„r
);

583 
td
->
‹ig_buf„r
 = 
NULL
;

585 
	}
}

587 
	$fio_libcufûe_˛ónup
(
thªad_d©a
 *
td
)

589 
libcufûe_›ti⁄s
 *
o
 = 
td
->
eo
;

591 
	`±hªad_muãx_lock
(&
ru¬ög_lock
);

592 
ru¬ög
--;

593 
	`as£π
(
ru¬ög
 >= 0);

594 i‡(
ru¬ög
 == 0) {

597 i‡(
o
->
cuda_io
 =
IO_CUFILE
 && 
cufûe_öôülized
)

598 
	`cuFûeDrivîClo£
();

599 
cufûe_öôülized
 = 0;

601 
	`±hªad_muãx_u∆ock
(&
ru¬ög_lock
);

602 
	}
}

604 
FIO_STATIC
 
i€ngöe_›s
 
	gi€ngöe
 = {

605 .
«me
 = "libcufile",

606 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

607 .
	göô
 = 
fio_libcufûe_öô
,

608 .
	gqueue
 = 
fio_libcufûe_queue
,

609 .
	g›í_fûe
 = 
fio_libcufûe_›í_fûe
,

610 .
	g˛o£_fûe
 = 
fio_libcufûe_˛o£_fûe
,

611 .
	giomem_Æloc
 = 
fio_libcufûe_iomem_Æloc
,

612 .
	giomem_‰ì
 = 
fio_libcufûe_iomem_‰ì
,

613 .
	g˛ónup
 = 
fio_libcufûe_˛ónup
,

614 .
	gÊags
 = 
FIO_SYNCIO
,

615 .
	g›ti⁄s
 = 
›ti⁄s
,

616 .
	g›ti⁄_°ru˘_size
 = (
libcufûe_›ti⁄s
)

619 
fio_öô
 
	$fio_libcufûe_ªgi°î
()

621 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

622 
	}
}

624 
fio_exô
 
	$fio_libcufûe_uƒegi°î
()

626 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

627 
	}
}

	@engines/libhdfs.c

14 
	~<m©h.h
>

15 
	~<hdfs.h
>

17 
	~"../fio.h
"

18 
	~"../›tgroup.h
"

20 
	#CHUNCK_NAME_LENGTH_MAX
 80

	)

21 
	#CHUNCK_CREATION_BUFFER_SIZE
 65536

	)

23 
	shdfsio_d©a
 {

24 
hdfsFS
 
	mfs
;

25 
hdfsFûe
 
	mÂ
;

26 
uöt64_t
 
	mcuº_fûe_id
;

29 
	shdfsio_›ti⁄s
 {

30 *
	m∑d
;

31 *
	mho°
;

32 *
	mdúe˘‹y
;

33 
	mp‹t
;

34 
	mchunck_size
;

35 
	msögÀ_ö°™˚
;

36 
	mu£_dúe˘
;

39 
fio_›ti⁄
 
	g›ti⁄s
[] = {

41 .
«me
 = "namenode",

42 .
	g ame
 = "hfdsÇamenode",

43 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

44 .
	goff1
 = 
off£tof
(
hdfsio_›ti⁄s
, 
ho°
),

45 .
	gdef
 = "localhost",

46 .
	ghñp
 = "Namenode ofÅhe HDFS cluster",

47 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

48 .
	ggroup
 = 
FIO_OPT_G_HDFS
,

51 .
	g«me
 = "hostname",

52 .
	g ame
 = "hfdsÇamenode",

53 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

54 .
	goff1
 = 
off£tof
(
hdfsio_›ti⁄s
, 
ho°
),

55 .
	gdef
 = "localhost",

56 .
	ghñp
 = "Namenode ofÅhe HDFS cluster",

57 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

58 .
	ggroup
 = 
FIO_OPT_G_HDFS
,

61 .
	g«me
 = "port",

62 .
	g ame
 = "hdfsÇamenodeÖort",

63 .
	gty≥
 = 
FIO_OPT_INT
,

64 .
	goff1
 = 
off£tof
(
hdfsio_›ti⁄s
, 
p‹t
),

65 .
	gdef
 = "9000",

66 .
	gmövÆ
 = 1,

67 .
	gmaxvÆ
 = 65535,

68 .
	ghñp
 = "Port used byÅhe HDFS clusterÇamenode",

69 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

70 .
	ggroup
 = 
FIO_OPT_G_HDFS
,

73 .
	g«me
 = "hdfsdirectory",

74 .
	g ame
 = "hfds directory",

75 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

76 .
	goff1
 = 
off£tof
(
hdfsio_›ti⁄s
, 
dúe˘‹y
),

77 .
	gdef
 = "/",

78 .
	ghñp
 = "The HDFS directory where fio will create chunks",

79 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

80 .
	ggroup
 = 
FIO_OPT_G_HDFS
,

83 .
	g«me
 = "chunk_size",

84 .
	gÆüs
 = "chunck_size",

85 .
	g ame
 = "Chunk size",

86 .
	gty≥
 = 
FIO_OPT_INT
,

87 .
	goff1
 = 
off£tof
(
hdfsio_›ti⁄s
, 
chunck_size
),

88 .
	gdef
 = "1048576",

89 .
	ghñp
 = "Size of individual chunk",

90 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

91 .
	ggroup
 = 
FIO_OPT_G_HDFS
,

94 .
	g«me
 = "single_instance",

95 .
	g ame
 = "Single Instance",

96 .
	gty≥
 = 
FIO_OPT_BOOL
,

97 .
	goff1
 = 
off£tof
(
hdfsio_›ti⁄s
, 
sögÀ_ö°™˚
),

98 .
	gdef
 = "1",

99 .
	ghñp
 = "Useá single instance",

100 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

101 .
	ggroup
 = 
FIO_OPT_G_HDFS
,

104 .
	g«me
 = "hdfs_use_direct",

105 .
	g ame
 = "HDFS Use Direct",

106 .
	gty≥
 = 
FIO_OPT_BOOL
,

107 .
	goff1
 = 
off£tof
(
hdfsio_›ti⁄s
, 
u£_dúe˘
),

108 .
	gdef
 = "0",

109 .
	ghñp
 = "UseÑeadDirect instead of hdfsRead",

110 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

111 .
	ggroup
 = 
FIO_OPT_G_HDFS
,

114 .
	g«me
 = 
NULL
,

119 
	$gë_chunck_«me
(*
de°
, *
fûe_«me
, 
uöt64_t
 
chunk_id
) {

120  
	`¢¥ötf
(
de°
, 
CHUNCK_NAME_LENGTH_MAX
, "%s_%lu", 
fûe_«me
, 
chunk_id
);

121 
	}
}

123 
	$fio_hdfsio_¥ï
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

125 
hdfsio_›ti⁄s
 *
›ti⁄s
 = 
td
->
eo
;

126 
hdfsio_d©a
 *
hd
 = 
td
->
io_›s_d©a
;

127 
f_id
;

128 
‚ame
[
CHUNCK_NAME_LENGTH_MAX
];

129 
›í_Êags
;

132 
f_id
 = 
	`Êo‹
(
io_u
->
off£t
 / 
›ti⁄s
-> 
chunck_size
);

134 i‡(
f_id
 =
hd
->
cuº_fûe_id
) {

139 i‡(
hd
->
cuº_fûe_id
 != -1) {

140 i‡–
	`hdfsClo£Fûe
(
hd
->
fs
, hd->
Â
) == -1) {

141 
	`log_îr
("hdfs: u«bÀÅÿ˛o£ fûe: %s\n", 
	`°ªº‹
(
î∫o
));

142  
î∫o
;

144 
hd
->
cuº_fûe_id
 = -1;

147 i‡(
io_u
->
ddú
 =
DDIR_READ
 || io_u->ddú =
DDIR_SYNC
) {

148 
›í_Êags
 = 
O_RDONLY
;

149 } i‡(
io_u
->
ddú
 =
DDIR_WRITE
) {

150 
›í_Êags
 = 
O_WRONLY
;

152 
	`log_îr
("hdfs: Invalid I/O Operation\n");

156 
	`gë_chunck_«me
(
‚ame
, 
io_u
->
fûe
->
fûe_«me
, 
f_id
);

157 
hd
->
Â
 = 
	`hdfsO≥nFûe
(hd->
fs
, 
‚ame
, 
›í_Êags
, 0, 0,

158 
›ti⁄s
->
chunck_size
);

159 if(
hd
->
Â
 =
NULL
) {

160 
	`log_îr
("hdfs: u«bÀÅÿ›í fûe: %s: %d\n", 
‚ame
, 
	`°ªº‹
(
î∫o
));

161  
î∫o
;

163 
hd
->
cuº_fûe_id
 = 
f_id
;

166 
	}
}

168 
fio_q_°©us
 
	$fio_hdfsio_queue
(
thªad_d©a
 *
td
,

169 
io_u
 *io_u)

171 
hdfsio_d©a
 *
hd
 = 
td
->
io_›s_d©a
;

172 
hdfsio_›ti⁄s
 *
›ti⁄s
 = 
td
->
eo
;

173 
ªt
;

174 
off£t
;

176 
off£t
 = 
io_u
->off£à% 
›ti⁄s
->
chunck_size
;

178 if–(
io_u
->
ddú
 =
DDIR_READ
 || io_u->ddú =
DDIR_WRITE
) &&

179 
	`hdfsTñl
(
hd
->
fs
, hd->
Â
Ë!
off£t
 && 
	`hdfsSìk
(hd->fs, hd->fp, offset) != 0 ) {

180 
	`log_îr
("hdfs: sìk faûed: %s,áª you doögÑ™dom wrôêsmÆÀ∏th™ chunk sizê?\n", 
	`°ªº‹
(
î∫o
));

181 
io_u
->
îr‹
 = 
î∫o
;

182  
FIO_Q_COMPLETED
;

186 i‡(
io_u
->
ddú
 =
DDIR_READ
) {

187 i‡(
›ti⁄s
->
u£_dúe˘
) {

188 
ªt
 = 
	`ªadDúe˘
(
hd
->
fs
, hd->
Â
, 
io_u
->
x„r_buf
, io_u->
x„r_buÊí
);

190 
ªt
 = 
	`hdfsRód
(
hd
->
fs
, hd->
Â
, 
io_u
->
x„r_buf
, io_u->
x„r_buÊí
);

192 } i‡(
io_u
->
ddú
 =
DDIR_WRITE
) {

193 
ªt
 = 
	`hdfsWrôe
(
hd
->
fs
, hd->
Â
, 
io_u
->
x„r_buf
,

194 
io_u
->
x„r_buÊí
);

195 } i‡(
io_u
->
ddú
 =
DDIR_SYNC
) {

196 
ªt
 = 
	`hdfsFlush
(
hd
->
fs
, hd->
Â
);

198 
	`log_îr
("hdfs: InvÆid I/O O≥øti⁄: %d\n", 
io_u
->
ddú
);

199 
ªt
 = 
EINVAL
;

203 i‡(
ªt
 !()
io_u
->
x„r_buÊí
) {

204 i‡(
ªt
 >= 0) {

205 
io_u
->
ªsid
 = io_u->
x„r_buÊí
 - 
ªt
;

206 
io_u
->
îr‹
 = 0;

207  
FIO_Q_COMPLETED
;

209 
io_u
->
îr‹
 = 
î∫o
;

213 i‡(
io_u
->
îr‹
)

214 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "xfer");

216  
FIO_Q_COMPLETED
;

217 
	}
}

219 
	$fio_hdfsio_›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

221 i‡(
td
->
o
.
odúe˘
) {

222 
td
->
îr‹
 = 
EINVAL
;

227 
	}
}

229 
	$fio_hdfsio_˛o£_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

231 
hdfsio_d©a
 *
hd
 = 
td
->
io_›s_d©a
;

233 i‡(
hd
->
cuº_fûe_id
 != -1) {

234 i‡–
	`hdfsClo£Fûe
(
hd
->
fs
, hd->
Â
) == -1) {

235 
	`log_îr
("hdfs: u«bÀÅÿ˛o£ fûe: %s\n", 
	`°ªº‹
(
î∫o
));

236  
î∫o
;

238 
hd
->
cuº_fûe_id
 = -1;

241 
	}
}

243 
	$fio_hdfsio_io_u_öô
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

245 
hdfsio_›ti⁄s
 *
›ti⁄s
 = 
td
->
eo
;

246 
hdfsio_d©a
 *
hd
 = 
td
->
io_›s_d©a
;

247 
fio_fûe
 *
f
;

248 
uöt64_t
 
j
,
k
;

249 
i
, 
Áûuª
 = 0;

250 
uöt8_t
 
buf„r
[
CHUNCK_CREATION_BUFFER_SIZE
];

251 
uöt64_t
 
byãs_À·
;

252 
‚ame
[
CHUNCK_NAME_LENGTH_MAX
];

253 
hdfsFûe
 
Â
;

254 
hdfsFûeInfo
 *
fi
;

255 
tOff£t
 
fi_size
;

257 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

258 
k
 = 0;

259 
j
=0; j < 
f
->
ªÆ_fûe_size
; j +
›ti⁄s
->
chunck_size
) {

260 
	`gë_chunck_«me
(
‚ame
, 
f
->
fûe_«me
, 
k
++);

261 
fi
 = 
	`hdfsGëP©hInfo
(
hd
->
fs
, 
‚ame
);

262 
fi_size
 = 
fi
 ? fi->
mSize
 : 0;

264 if–
fi
 && 
fi_size
 >
›ti⁄s
->
chunck_size
) {

267 
Â
 = 
	`hdfsO≥nFûe
(
hd
->
fs
, 
‚ame
, 
O_WRONLY
, 0, 0,

268 
›ti⁄s
->
chunck_size
);

269 if(
Â
 =
NULL
) {

270 
Áûuª
 = 
î∫o
;

271 
	`log_îr
("hdfs: u«bÀÅÿ¥ï¨êfûêchunk %s: %s\n", 
‚ame
, 
	`°ªº‹
(
î∫o
));

274 
byãs_À·
 = 
›ti⁄s
->
chunck_size
;

275 
	`mem£t
(
buf„r
, 0, 
CHUNCK_CREATION_BUFFER_SIZE
);

276  
byãs_À·
 > 
CHUNCK_CREATION_BUFFER_SIZE
) {

277 if–
	`hdfsWrôe
(
hd
->
fs
, 
Â
, 
buf„r
, 
CHUNCK_CREATION_BUFFER_SIZE
)

278 !
CHUNCK_CREATION_BUFFER_SIZE
) {

279 
Áûuª
 = 
î∫o
;

280 
	`log_îr
("hdfs: u«bÀÅÿ¥ï¨êfûêchunk %s: %s\n", 
‚ame
, 
	`°ªº‹
(
î∫o
));

283 
byãs_À·
 -
CHUNCK_CREATION_BUFFER_SIZE
;

285 if(
byãs_À·
 > 0) {

286 if–
	`hdfsWrôe
(
hd
->
fs
, 
Â
, 
buf„r
, 
byãs_À·
)

287 !
byãs_À·
) {

288 
Áûuª
 = 
î∫o
;

292 if–
	`hdfsClo£Fûe
(
hd
->
fs
, 
Â
) != 0) {

293 
Áûuª
 = 
î∫o
;

294 
	`log_îr
("hdfs: u«bÀÅÿ¥ï¨êfûêchunk %s: %s\n", 
‚ame
, 
	`°ªº‹
(
î∫o
));

298 if(
Áûuª
) {

303 if–!
Áûuª
 ) {

304 
	`fio_fûe_£t_size_known
(
f
);

307  
Áûuª
;

308 
	}
}

310 
	$fio_hdfsio_£tup
(
thªad_d©a
 *
td
)

312 
hdfsio_d©a
 *
hd
;

313 
fio_fûe
 *
f
;

314 
i
;

315 
uöt64_t
 
fûe_size
, 
tŸÆ_fûe_size
;

317 i‡(!
td
->
io_›s_d©a
) {

318 
hd
 = 
	`mÆloc
((*hd));

319 
	`mem£t
(
hd
, 0, (*hd));

321 
hd
->
cuº_fûe_id
 = -1;

323 
td
->
io_›s_d©a
 = 
hd
;

326 
tŸÆ_fûe_size
 = 0;

327 
fûe_size
 = 0;

329 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

330 if(!
td
->
o
.
fûe_size_low
) {

331 
fûe_size
 = 
	`Êo‹
(
td
->
o
.
size
 /Åd->o.
ƒ_fûes
);

332 
tŸÆ_fûe_size
 +
fûe_size
;

334 i‡(
td
->
o
.
fûe_size_low
 =td->o.
fûe_size_high
)

335 
fûe_size
 = 
td
->
o
.
fûe_size_low
;

337 
fûe_size
 = 
	`gë_ønd_fûe_size
(
td
);

339 
f
->
ªÆ_fûe_size
 = 
fûe_size
;

345 i‡(!
td
->
o
.
fûe_size_low
 && 
tŸÆ_fûe_size
 <Åd->o.
size
) {

346 
f
->
ªÆ_fûe_size
 +(
td
->
o
.
size
 - 
tŸÆ_fûe_size
);

350 
	}
}

352 
	$fio_hdfsio_öô
(
thªad_d©a
 *
td
)

354 
hdfsio_d©a
 *
hd
 = 
td
->
io_›s_d©a
;

355 
hdfsio_›ti⁄s
 *
›ti⁄s
 = 
td
->
eo
;

356 
Áûuª
;

357 
hdfsBuûdî
 *
bld
;

359 i‡(
›ti⁄s
->
ho°
 =
NULL
 || o±i⁄s->
p‹t
 == 0) {

360 
	`log_îr
("hdfs: serverÇot defined\n");

361  
EINVAL
;

364 
bld
 = 
	`hdfsNewBuûdî
();

365 i‡(!
bld
) {

366 
Áûuª
 = 
î∫o
;

367 
	`log_îr
("hdfs: unableÅoállocate connect builder\n");

368  
Áûuª
;

370 
	`hdfsBuûdîSëNameNode
(
bld
, 
›ti⁄s
->
ho°
);

371 
	`hdfsBuûdîSëNameNodeP‹t
(
bld
, 
›ti⁄s
->
p‹t
);

372 if(! 
›ti⁄s
->
sögÀ_ö°™˚
) {

373 
	`hdfsBuûdîSëF‹˚NewIn°™˚
(
bld
);

375 
hd
->
fs
 = 
	`hdfsBuûdîC⁄√˘
(
bld
);

378 i‡(
	`hdfsExi°s
(
hd
->
fs
, 
›ti⁄s
->
dúe˘‹y
Ë< 0 || 
	`hdfsSëW‹kögDúe˘‹y
(hd->fs, options->directory) < 0) {

379 
Áûuª
 = 
î∫o
;

380 
	`log_îr
("hdfs: invÆid w‹kög dúe˘‹y %s: %s\n", 
›ti⁄s
->
dúe˘‹y
, 
	`°ªº‹
(
î∫o
));

381  
Áûuª
;

385 
	}
}

387 
	$fio_hdfsio_io_u_‰ì
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

389 
hdfsio_d©a
 *
hd
 = 
td
->
io_›s_d©a
;

391 i‡(
hd
->
fs
 && 
	`hdfsDisc⁄√˘
(hd->fs) < 0) {

392 
	`log_îr
("hdfs: disc⁄√˘ faûed: %d\n", 
î∫o
);

394 
	}
}

396 
FIO_STATIC
 
i€ngöe_›s
 
	gi€ngöe
 = {

397 .
«me
 = "libhdfs",

398 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

399 .
	gÊags
 = 
FIO_SYNCIO
 | 
FIO_DISKLESSIO
 | 
FIO_NODISKUTIL
,

400 .
	g£tup
 = 
fio_hdfsio_£tup
,

401 .
	göô
 = 
fio_hdfsio_öô
,

402 .
	g¥ï
 = 
fio_hdfsio_¥ï
,

403 .
	gqueue
 = 
fio_hdfsio_queue
,

404 .
	g›í_fûe
 = 
fio_hdfsio_›í_fûe
,

405 .
	g˛o£_fûe
 = 
fio_hdfsio_˛o£_fûe
,

406 .
	gio_u_öô
 = 
fio_hdfsio_io_u_öô
,

407 .
	gio_u_‰ì
 = 
fio_hdfsio_io_u_‰ì
,

408 .
	g›ti⁄_°ru˘_size
 = (
hdfsio_›ti⁄s
),

409 .
	g›ti⁄s
 = 
›ti⁄s
,

413 
fio_öô
 
	$fio_hdfsio_ªgi°î
()

415 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

416 
	}
}

418 
fio_exô
 
	$fio_hdfsio_uƒegi°î
()

420 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

421 
	}
}

	@engines/libiscsi.c

8 
	~"../fio.h
"

9 
	~"../›tgroup.h
"

11 
	~<°dlib.h
>

12 
	~<iscsi/iscsi.h
>

13 
	~<iscsi/scsi-lowÀvñ.h
>

14 
	~<pﬁl.h
>

16 
	giscsi_lun
;

17 
	giscsi_öfo
;

19 
	siscsi_èsk
 {

20 
scsi_èsk
 *
	mscsi_èsk
;

21 
iscsi_lun
 *
	miscsi_lun
;

22 
io_u
 *
	mio_u
;

25 
	siscsi_lun
 {

26 
iscsi_öfo
 *
	miscsi_öfo
;

27 
iscsi_c⁄ãxt
 *
	miscsi
;

28 
iscsi_uæ
 *
	muæ
;

29 
	mblock_size
;

30 
uöt64_t
 
	mnum_blocks
;

33 
	siscsi_öfo
 {

34 
iscsi_lun
 **
	mluns
;

35 
	mƒ_luns
;

36 
pﬁlfd
 *
	mpfds
;

37 
iscsi_èsk
 **
	mcom∂ëe_evíts
;

38 
	mƒ_evíts
;

41 
	siscsi_›ti⁄s
 {

42 *
	m∑d
;

43 *
	möôüt‹
;

46 
fio_›ti⁄
 
	g›ti⁄s
[] = {

48 .
«me
 = "initiator",

49 .
	g ame
 = "initiator",

50 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

51 .
	goff1
 = 
off£tof
(
iscsi_›ti⁄s
, 
öôüt‹
),

52 .
	gdef
 = "iqn.2019-04.org.fio:fio",

53 .
	ghñp
 = "initiatorÇame",

54 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

55 .
	ggroup
 = 
FIO_OPT_G_ISCSI
,

59 .
	g«me
 = 
NULL
,

63 
	$fio_iscsi_£tup_lun
(
iscsi_öfo
 *iscsi_info,

64 *
öôüt‹
, 
fio_fûe
 *
f
, 
i
)

66 
iscsi_lun
 *iscsi_lu¿
NULL
;

67 
scsi_èsk
 *
èsk
 = 
NULL
;

68 
scsi_ªadˇ∑côy16
 *
rc16
 = 
NULL
;

69 
ªt
 = 0;

71 
iscsi_lun
 = 
	`mÆloc
((iscsi_lun));

72 
	`mem£t
(
iscsi_lun
, 0, (iscsi_lun));

74 
iscsi_lun
->
iscsi_öfo
 = iscsi_info;

76 
iscsi_lun
->
uæ
 = 
	`iscsi_∑r£_fuŒ_uæ
(
NULL
, 
f
->
fûe_«me
);

77 i‡(
iscsi_lun
->
uæ
 =
NULL
) {

78 
	`log_îr
("iscsi: faûedÅÿ∑r£ uæ: %s\n", 
f
->
fûe_«me
);

79 
ªt
 = 
EINVAL
;

80 
out
;

83 
iscsi_lun
->
iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
öôüt‹
);

84 i‡(
iscsi_lun
->
iscsi
 =
NULL
) {

85 
	`log_îr
("iscsi: failedÅo create iscsi context.\n");

86 
ªt
 = 1;

87 
out
;

90 i‡(
	`iscsi_£t_èrgë«me
(
iscsi_lun
->
iscsi
, iscsi_lun->
uæ
->
èrgë
)) {

91 
	`log_îr
("iscsi: failedÅo setÅargetÇame.\n");

92 
ªt
 = 
EINVAL
;

93 
out
;

96 i‡(
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi_lun
->
iscsi
, 
ISCSI_SESSION_NORMAL
) != 0) {

97 
	`log_îr
("iscsi: failedÅo set sessionÅype.\n");

98 
ªt
 = 
EINVAL
;

99 
out
;

102 i‡(
	`iscsi_£t_hódî_dige°
(
iscsi_lun
->
iscsi
,

103 
ISCSI_HEADER_DIGEST_NONE_CRC32C
) != 0) {

104 
	`log_îr
("iscsi: failedÅo set header digest.\n");

105 
ªt
 = 
EINVAL
;

106 
out
;

109 i‡(
	`iscsi_fuŒ_c⁄√˘_sync
(
iscsi_lun
->
iscsi
,

110 
iscsi_lun
->
uæ
->
p‹èl
,

111 
iscsi_lun
->
uæ
->
lun
)) {

112 
	`log_îr
("iscsi: failedÅo connectÅo LUN : %s\n",

113 
	`iscsi_gë_îr‹
(
iscsi_lun
->
iscsi
));

114 
ªt
 = 
EINVAL
;

115 
out
;

118 
èsk
 = 
	`iscsi_ªadˇ∑côy16_sync
(
iscsi_lun
->
iscsi
, iscsi_lun->
uæ
->
lun
);

119 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

120 
	`log_îr
("iscsi: failedÅo sendÑeadcapacity command: %s\n",

121 
	`iscsi_gë_îr‹
(
iscsi_lun
->
iscsi
));

122 
ªt
 = 
EINVAL
;

123 
out
;

126 
rc16
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

127 i‡(
rc16
 =
NULL
) {

128 
	`log_îr
("iscsi: failedÅo unmarshalÑeadcapacity16 data.\n");

129 
ªt
 = 
EINVAL
;

130 
out
;

133 
iscsi_lun
->
block_size
 = 
rc16
->
block_Àngth
;

134 
iscsi_lun
->
num_blocks
 = 
rc16
->
ªtu∫ed_lba
 + 1;

136 
	`scsi_‰ì_scsi_èsk
(
èsk
);

137 
èsk
 = 
NULL
;

139 
f
->
ªÆ_fûe_size
 = 
iscsi_lun
->
num_blocks
 * iscsi_lun->
block_size
;

140 
f
->
ígöe_d©a
 = 
iscsi_lun
;

142 
iscsi_öfo
->
luns
[
i
] = 
iscsi_lun
;

143 
iscsi_öfo
->
pfds
[
i
].
fd
 = 
	`iscsi_gë_fd
(
iscsi_lun
->
iscsi
);

145 
out
:

146 i‡(
èsk
) {

147 
	`scsi_‰ì_scsi_èsk
(
èsk
);

150 i‡(
ªt
 && 
iscsi_lun
) {

151 i‡(
iscsi_lun
->
iscsi
 !
NULL
) {

152 i‡(
	`iscsi_is_logged_ö
(
iscsi_lun
->
iscsi
)) {

153 
	`iscsi_logout_sync
(
iscsi_lun
->
iscsi
);

155 
	`iscsi_de°roy_c⁄ãxt
(
iscsi_lun
->
iscsi
);

157 
	`‰ì
(
iscsi_lun
);

160  
ªt
;

161 
	}
}

163 
	$fio_iscsi_£tup
(
thªad_d©a
 *
td
)

165 
iscsi_›ti⁄s
 *
›ti⁄s
 = 
td
->
eo
;

166 
iscsi_öfo
 *iscsi_öfÿ
NULL
;

167 
ªt
 = 0;

168 
fio_fûe
 *
f
;

169 
i
;

171 
iscsi_öfo
 = 
	`mÆloc
((iscsi_info));

172 
iscsi_öfo
->
ƒ_luns
 = 
td
->
o
.
ƒ_fûes
;

173 
iscsi_öfo
->
luns
 = 
	`ˇŒoc
(iscsi_öfo->
ƒ_luns
, (
iscsi_lun
*));

174 
iscsi_öfo
->
pfds
 = 
	`ˇŒoc
(iscsi_öfo->
ƒ_luns
, (
pﬁlfd
));

176 
iscsi_öfo
->
ƒ_evíts
 = 0;

177 
iscsi_öfo
->
com∂ëe_evíts
 = 
	`ˇŒoc
(
td
->
o
.
iodïth
, (
iscsi_èsk
*));

179 
td
->
io_›s_d©a
 = 
iscsi_öfo
;

181 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

182 
ªt
 = 
	`fio_iscsi_£tup_lun
(
iscsi_öfo
, 
›ti⁄s
->
öôüt‹
, 
f
, 
i
);

183 i‡(
ªt
 < 0) ;

186  
ªt
;

187 
	}
}

189 
	$fio_iscsi_öô
(
thªad_d©a
 *
td
) {

191 
	}
}

193 
	$fio_iscsi_˛ónup_lun
(
iscsi_lun
 *iscsi_lun) {

194 i‡(
iscsi_lun
->
iscsi
 !
NULL
) {

195 i‡(
	`iscsi_is_logged_ö
(
iscsi_lun
->
iscsi
)) {

196 
	`iscsi_logout_sync
(
iscsi_lun
->
iscsi
);

198 
	`iscsi_de°roy_c⁄ãxt
(
iscsi_lun
->
iscsi
);

200 
	`‰ì
(
iscsi_lun
);

201 
	}
}

203 
	$fio_iscsi_˛ónup
(
thªad_d©a
 *
td
)

205 
iscsi_öfo
 *iscsi_öfÿ
td
->
io_›s_d©a
;

207 
i
 = 0; i < 
iscsi_öfo
->
ƒ_luns
; i++) {

208 i‡(
iscsi_öfo
->
luns
[
i
]) {

209 
	`fio_iscsi_˛ónup_lun
(
iscsi_öfo
->
luns
[
i
]);

210 
iscsi_öfo
->
luns
[
i
] = 
NULL
;

214 
	`‰ì
(
iscsi_öfo
->
luns
);

215 
	`‰ì
(
iscsi_öfo
->
pfds
);

216 
	`‰ì
(
iscsi_öfo
->
com∂ëe_evíts
);

217 
	`‰ì
(
iscsi_öfo
);

218 
	}
}

220 
	$fio_iscsi_¥ï
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

223 
	}
}

225 
	$fio_iscsi_›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

228 
	}
}

230 
	$fio_iscsi_˛o£_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

233 
	}
}

235 
	$iscsi_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
,

236 *
comm™d_d©a
, *
¥iv©e_d©a
)

238 
iscsi_èsk
 *iscsi_èsk = (iscsi_èsk*)
¥iv©e_d©a
;

239 
iscsi_lun
 *iscsi_lu¿
iscsi_èsk
->iscsi_lun;

240 
iscsi_öfo
 *iscsi_öfÿ
iscsi_lun
->iscsi_info;

241 
io_u
 *io_u = 
iscsi_èsk
->io_u;

243 i‡(
°©us
 =
SCSI_STATUS_GOOD
) {

244 
io_u
->
îr‹
 = 0;

246 
	`log_îr
("iscsi:Ñequest failed withÉrror %s.\n",

247 
	`iscsi_gë_îr‹
(
iscsi_lun
->
iscsi
));

249 
io_u
->
îr‹
 = 1;

250 
io_u
->
ªsid
 = io_u->
x„r_buÊí
;

253 
iscsi_öfo
->
com∂ëe_evíts
[iscsi_öfo->
ƒ_evíts
] = 
iscsi_èsk
;

254 
iscsi_öfo
->
ƒ_evíts
++;

255 
	}
}

257 
fio_q_°©us
 
	$fio_iscsi_queue
(
thªad_d©a
 *
td
,

258 
io_u
 *io_u)

260 
iscsi_lun
 *iscsi_lu¿
io_u
->
fûe
->
ígöe_d©a
;

261 
scsi_èsk
 *scsi_èsk = 
NULL
;

262 
iscsi_èsk
 *iscsi_èsk = 
	`mÆloc
((iscsi_task));

263 
ªt
 = -1;

265 i‡(
io_u
->
ddú
 =
DDIR_READ
 || io_u->ddú =
DDIR_WRITE
) {

266 i‡(
io_u
->
off£t
 % 
iscsi_lun
->
block_size
 != 0) {

267 
	`log_îr
("iscsi: offset isÇotálignÅo block size.\n");

268 
ªt
 = -1;

269 
out
;

272 i‡(
io_u
->
x„r_buÊí
 % 
iscsi_lun
->
block_size
 != 0) {

273 
	`log_îr
("iscsi: buflen isÇotálignÅo block size.\n");

274 
ªt
 = -1;

275 
out
;

279 i‡(
io_u
->
ddú
 =
DDIR_READ
) {

280 
scsi_èsk
 = 
	`scsi_cdb_ªad16
(
io_u
->
off£t
 / 
iscsi_lun
->
block_size
,

281 
io_u
->
x„r_buÊí
,

282 
iscsi_lun
->
block_size
,

284 
ªt
 = 
	`scsi_èsk_add_d©a_ö_buf„r
(
scsi_èsk
, 
io_u
->
x„r_buÊí
,

285 
io_u
->
x„r_buf
);

286 i‡(
ªt
 < 0) {

287 
	`log_îr
("iscsi: failedÅoádd data in buffer.\n");

288 
out
;

290 } i‡(
io_u
->
ddú
 =
DDIR_WRITE
) {

291 
scsi_èsk
 = 
	`scsi_cdb_wrôe16
(
io_u
->
off£t
 / 
iscsi_lun
->
block_size
,

292 
io_u
->
x„r_buÊí
,

293 
iscsi_lun
->
block_size
,

295 
ªt
 = 
	`scsi_èsk_add_d©a_out_buf„r
(
scsi_èsk
, 
io_u
->
x„r_buÊí
,

296 
io_u
->
x„r_buf
);

297 i‡(
ªt
 < 0) {

298 
	`log_îr
("iscsi: failedÅoádd data out buffer.\n");

299 
out
;

301 } i‡(
	`ddú_sync
(
io_u
->
ddú
)) {

302 
scsi_èsk
 = 
	`scsi_cdb_synchr⁄izeˇche16
(

303 0, 
iscsi_lun
->
num_blocks
 * iscsi_lun->
block_size
, 0, 0);

305 
	`log_îr
("iscsi: invÆid I/O o≥øti⁄: %d\n", 
io_u
->
ddú
);

306 
ªt
 = 
EINVAL
;

307 
out
;

310 
iscsi_èsk
->
scsi_èsk
 = scsi_task;

311 
iscsi_èsk
->
iscsi_lun
 = iscsi_lun;

312 
iscsi_èsk
->
io_u
 = io_u;

314 
ªt
 = 
	`iscsi_scsi_comm™d_async
(
iscsi_lun
->
iscsi
, iscsi_lun->
uæ
->
lun
,

315 
scsi_èsk
, 
iscsi_cb
, 
NULL
, 
iscsi_èsk
);

316 i‡(
ªt
 < 0) {

317 
	`log_îr
("iscsi: failedÅo send scsi command.\n");

318 
out
;

321  
FIO_Q_QUEUED
;

323 
out
:

324 i‡(
iscsi_èsk
) {

325 
	`‰ì
(
iscsi_èsk
);

328 i‡(
scsi_èsk
) {

329 
	`scsi_‰ì_scsi_èsk
(
scsi_èsk
);

332 i‡(
ªt
) {

333 
io_u
->
îr‹
 = 
ªt
;

335  
FIO_Q_COMPLETED
;

336 
	}
}

338 
	$fio_iscsi_gëevíts
(
thªad_d©a
 *
td
, 
mö
,

339 
max
, c⁄° 
time•ec
 *
t
)

341 
iscsi_öfo
 *iscsi_öfÿ
td
->
io_›s_d©a
;

342 
ªt
 = 0;

344 
iscsi_öfo
->
ƒ_evíts
 = 0;

346 
iscsi_öfo
->
ƒ_evíts
 < 
mö
) {

347 
i
 = 0; i < 
iscsi_öfo
->
ƒ_luns
; i++) {

348 
evíts
 = 
	`iscsi_which_evíts
(
iscsi_öfo
->
luns
[
i
]->
iscsi
);

349 
iscsi_öfo
->
pfds
[
i
].
evíts
 =Évents;

352 
ªt
 = 
	`pﬁl
(
iscsi_öfo
->
pfds
, iscsi_öfo->
ƒ_luns
, -1);

353 i‡(
ªt
 < 0) {

354 i‡(
î∫o
 =
EINTR
 ||Éºnÿ=
EAGAIN
) {

357 
	`log_îr
("iscsi: failedÅoÖollÉvents: %s.\n",

358 
	`°ªº‹
(
î∫o
));

362 
i
 = 0; i < 
iscsi_öfo
->
ƒ_luns
; i++) {

363 
ªt
 = 
	`iscsi_£rvi˚
(
iscsi_öfo
->
luns
[
i
]->
iscsi
,

364 
iscsi_öfo
->
pfds
[
i
].
ªvíts
);

365 
	`as£π
(
ªt
 >= 0);

369  
ªt
 < 0 ?Ñë : 
iscsi_öfo
->
ƒ_evíts
;

370 
	}
}

372 
io_u
 *
	$fio_iscsi_evít
(
thªad_d©a
 *
td
, 
evít
)

374 
iscsi_öfo
 *iscsi_öfÿ(iscsi_öfo*)
td
->
io_›s_d©a
;

375 
iscsi_èsk
 *iscsi_èsk = 
iscsi_öfo
->
com∂ëe_evíts
[
evít
];

376 
io_u
 *io_u = 
iscsi_èsk
->io_u;

378 
iscsi_öfo
->
com∂ëe_evíts
[
evít
] = 
NULL
;

380 
	`scsi_‰ì_scsi_èsk
(
iscsi_èsk
->
scsi_èsk
);

381 
	`‰ì
(
iscsi_èsk
);

383  
io_u
;

384 
	}
}

386 
FIO_STATIC
 
i€ngöe_›s
 
	gi€ngöe
 = {

387 .
«me
 = "libiscsi",

388 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

389 .
	gÊags
 = 
FIO_SYNCIO
 | 
FIO_DISKLESSIO
 | 
FIO_NODISKUTIL
,

390 .
	g£tup
 = 
fio_iscsi_£tup
,

391 .
	göô
 = 
fio_iscsi_öô
,

392 .
	g¥ï
 = 
fio_iscsi_¥ï
,

393 .
	gqueue
 = 
fio_iscsi_queue
,

394 .
	ggëevíts
 = 
fio_iscsi_gëevíts
,

395 .
	gevít
 = 
fio_iscsi_evít
,

396 .
	g˛ónup
 = 
fio_iscsi_˛ónup
,

397 .
	g›í_fûe
 = 
fio_iscsi_›í_fûe
,

398 .
	g˛o£_fûe
 = 
fio_iscsi_˛o£_fûe
,

399 .
	g›ti⁄_°ru˘_size
 = (
iscsi_›ti⁄s
),

400 .
	g›ti⁄s
 = 
›ti⁄s
,

403 
fio_öô
 
	$fio_iscsi_ªgi°î
()

405 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

406 
	}
}

408 
fio_exô
 
	$fio_iscsi_uƒegi°î
()

410 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

411 
	}
}

	@engines/libpmem.c

50 
	~<°dio.h
>

51 
	~<°dlib.h
>

52 
	~<uni°d.h
>

53 
	~<î∫o.h
>

54 
	~<libpmem.h
>

56 
	~"../fio.h
"

57 
	~"../vîify.h
"

59 
	sfio_libpmem_d©a
 {

60 *
	mlibpmem_±r
;

61 
size_t
 
	mlibpmem_sz
;

62 
off_t
 
	mlibpmem_off
;

65 
	$fio_libpmem_öô
(
thªad_d©a
 *
td
)

67 
thªad_›ti⁄s
 *
o
 = &
td
->o;

69 
	`d¥öt
(
FD_IO
, "o->rw_min_bs %llu\n o->fsync_blocks %u\n o->fdatasync_blocks %u\n",

70 
o
->
rw_mö_bs
, o->
fsync_blocks
, o->
fd©async_blocks
);

71 
	`d¥öt
(
FD_IO
, "DEBUG fio_libpmem_init\n");

73 i‡((
o
->
rw_mö_bs
 & 
∑ge_mask
) &&

74 (
o
->
fsync_blocks
 || o->
fd©async_blocks
)) {

75 
	`log_îr
("libpmem: mmap options dictateá minimum block size of "

76 "%Œu byãs\n", (Ë
∑ge_size
);

80 
	}
}

86 
	$fio_libpmem_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

87 
size_t
 
Àngth
, 
off_t
 
off
)

89 
fio_libpmem_d©a
 *
fdd
 = 
	`FILE_ENG_DATA
(
f
);

90 
mode_t
 
mode
 = 
S_IWUSR
 | 
S_IRUSR
;

91 
size_t
 
m≠≥d_Àn
;

92 
is_pmem
;

94 
	`d¥öt
(
FD_IO
, "DEBUG fio_libpmem_file\n");

95 
	`d¥öt
(
FD_IO
, "f->fûe_«mê%†td->o.vîify = %d \n", 
f
->
fûe_«me
,

96 
td
->
o
.
vîify
);

97 
	`d¥öt
(
FD_IO
, "length = %ld f->fd = %d off = %ld file mode = %d \n",

98 
Àngth
, 
f
->
fd
, 
off
, 
mode
);

101 i‡(
fdd
->
libpmem_±r
) {

102 
	`d¥öt
(
FD_IO
,"pmem_unmap \n");

103 i‡(
	`pmem_unm≠
(
fdd
->
libpmem_±r
, fdd->
libpmem_sz
) < 0)

104  
î∫o
;

105 
fdd
->
libpmem_±r
 = 
NULL
;

108 if((
fdd
->
libpmem_±r
 = 
	`pmem_m≠_fûe
(
f
->
fûe_«me
, 
Àngth
, 
PMEM_FILE_CREATE
, 
mode
, &
m≠≥d_Àn
, &
is_pmem
)Ë=
NULL
) {

109 
	`td_vîr‹
(
td
, 
î∫o
, 
	`pmem_îr‹msg
());

110 
îr
;

113 i‡(!
is_pmem
) {

114 
	`td_vîr‹
(
td
, 
î∫o
, "file_name doesÇotÖointÅoÖersistent memory");

117 
îr
:

118 i‡(
td
->
îr‹
 && 
fdd
->
libpmem_±r
)

119 
	`pmem_unm≠
(
fdd
->
libpmem_±r
, 
Àngth
);

121  
td
->
îr‹
;

122 
	}
}

124 
	$fio_libpmem_›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

126 
fio_libpmem_d©a
 *
fdd
;

128 
	`d¥öt
(
FD_IO
, "DEBUG fio_libpmem_open_file\n");

129 
	`d¥öt
(
FD_IO
, "f->io_size=%ld\n", 
f
->
io_size
);

130 
	`d¥öt
(
FD_IO
, "td->o.size=%Œd\n", 
td
->
o
.
size
);

131 
	`d¥öt
(
FD_IO
, "td->o.iodïth=%d\n", 
td
->
o
.
iodïth
);

132 
	`d¥öt
(
FD_IO
, "td->o.iodïth_b©ch=%d\n", 
td
->
o
.
iodïth_b©ch
);

134 i‡(
	`fio_fûe_›í
(
f
))

135 
	`td_io_˛o£_fûe
(
td
, 
f
);

137 
fdd
 = 
	`ˇŒoc
(1, (*fdd));

138 i‡(!
fdd
) {

141 
	`FILE_SET_ENG_DATA
(
f
, 
fdd
);

142 
fdd
->
libpmem_sz
 = 
f
->
io_size
;

143 
fdd
->
libpmem_off
 = 0;

145  
	`fio_libpmem_fûe
(
td
, 
f
, 
fdd
->
libpmem_sz
, fdd->
libpmem_off
);

146 
	}
}

148 
	$fio_libpmem_¥ï
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

150 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

151 
fio_libpmem_d©a
 *
fdd
 = 
	`FILE_ENG_DATA
(
f
);

153 
	`d¥öt
(
FD_IO
, "DEBUG fio_libpmem_prep\n");

154 
	`d¥öt
(
FD_IO
, "io_u->offset %llu : fdd->libpmem_off %ld : "

156 
io_u
->
off£t
, 
fdd
->
libpmem_off
,

157 
io_u
->
buÊí
, 
fdd
->
libpmem_sz
);

159 i‡(
io_u
->
buÊí
 > 
f
->
ªÆ_fûe_size
) {

160 
	`log_îr
("libpmem: bs biggerÅhanÅhe file size\n");

161  
EIO
;

164 
io_u
->
mm≠_d©a
 = 
fdd
->
libpmem_±r
 + io_u->
off£t
 - fdd->
libpmem_off


165 - 
f
->
fûe_off£t
;

167 
	}
}

169 
fio_q_°©us
 
	$fio_libpmem_queue
(
thªad_d©a
 *
td
,

170 
io_u
 *io_u)

172 
Êags
 = 0;

174 
	`fio_ro_check
(
td
, 
io_u
);

175 
io_u
->
îr‹
 = 0;

177 
	`d¥öt
(
FD_IO
, "DEBUG fio_libpmem_queue\n");

178 
	`d¥öt
(
FD_IO
, "td->o.odirect %dÅd->o.sync_io %d\n",

179 
td
->
o
.
odúe˘
,Åd->o.
sync_io
);

181 
Êags
 = 
td
->
o
.
sync_io
 ? 0 : 
PMEM_F_MEM_NODRAIN
;

182 
Êags
 |
td
->
o
.
odúe˘
 ? 
PMEM_F_MEM_NONTEMPORAL
 : 
PMEM_F_MEM_TEMPORAL
;

184 
io_u
->
ddú
) {

185 
DDIR_READ
:

186 
	`mem˝y
(
io_u
->
x„r_buf
, io_u->
mm≠_d©a
, io_u->
x„r_buÊí
);

188 
DDIR_WRITE
:

189 
	`d¥öt
(
FD_IO
, "DEBUG mmap_data=%p, xfer_buf=%p\n",

190 
io_u
->
mm≠_d©a
, io_u->
x„r_buf
);

191 
	`pmem_mem˝y
(
io_u
->
mm≠_d©a
,

192 
io_u
->
x„r_buf
,

193 
io_u
->
x„r_buÊí
,

194 
Êags
);

196 
DDIR_SYNC
:

197 
DDIR_DATASYNC
:

198 
DDIR_SYNC_FILE_RANGE
:

199 
	`pmem_døö
();

202 
io_u
->
îr‹
 = 
EINVAL
;

206  
FIO_Q_COMPLETED
;

207 
	}
}

209 
	$fio_libpmem_˛o£_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

211 
fio_libpmem_d©a
 *
fdd
 = 
	`FILE_ENG_DATA
(
f
);

212 
ªt
 = 0;

214 
	`d¥öt
(
FD_IO
, "DEBUG fio_libpmem_close_file\n");

216 i‡(
fdd
->
libpmem_±r
)

217 
ªt
 = 
	`pmem_unm≠
(
fdd
->
libpmem_±r
, fdd->
libpmem_sz
);

218 i‡(
	`fio_fûe_›í
(
f
))

219 
ªt
 &
	`gíîic_˛o£_fûe
(
td
, 
f
);

221 
	`FILE_SET_ENG_DATA
(
f
, 
NULL
);

222 
	`‰ì
(
fdd
);

224  
ªt
;

225 
	}
}

227 
FIO_STATIC
 
i€ngöe_›s
 
	gi€ngöe
 = {

228 .
«me
 = "libpmem",

229 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

230 .
	göô
 = 
fio_libpmem_öô
,

231 .
	g¥ï
 = 
fio_libpmem_¥ï
,

232 .
	gqueue
 = 
fio_libpmem_queue
,

233 .
	g›í_fûe
 = 
fio_libpmem_›í_fûe
,

234 .
	g˛o£_fûe
 = 
fio_libpmem_˛o£_fûe
,

235 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

236 .
	g¥ï›uœã_fûe
 = 
gíîic_¥ï›uœã_fûe
,

237 .
	gÊags
 = 
FIO_SYNCIO
 | 
FIO_RAWIO
 | 
FIO_DISKLESSIO
 | 
FIO_NOEXTEND
 |

238 
FIO_NODISKUTIL
 | 
FIO_BARRIER
 | 
FIO_MEMALIGN
,

241 
fio_öô
 
	$fio_libpmem_ªgi°î
()

243 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

244 
	}
}

246 
fio_exô
 
	$fio_libpmem_uƒegi°î
()

248 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

249 
	}
}

	@engines/librpma_apm.c

17 
	~"libΩma_fio.h
"

21 
ölöe
 
˛õ¡_io_Êush
(
thªad_d©a
 *
td
,

22 
io_u
 *
fú°_io_u
, io_u *
œ°_io_u
,

23 
Àn
);

25 
˛õ¡_gë_io_u_ödex
(
ibv_wc
 *
wc
, *
io_u_ödex
);

27 
	$˛õ¡_öô
(
thªad_d©a
 *
td
)

29 
libΩma_fio_˛õ¡_d©a
 *
ccd
;

30 
sq_size
;

31 
uöt32_t
 
cq_size
;

32 
Ωma_c⁄n_cfg
 *
cfg
 = 
NULL
;

33 
Ωma_≥î_cfg
 *
pcfg
 = 
NULL
;

34 
ªt
;

37 i‡(
	`td_åim
(
td
)) {

38 
	`td_vîr‹
(
td
, 
EINVAL
, "Not supported mode.");

49 i‡(
	`td_øndom
(
td
Ë|| 
	`td_rw
(td)) {

60 
sq_size
 = 2 * 
td
->
o
.
iodïth
;

61 } i‡(
	`td_wrôe
(
td
)) {

63 i‡(
td
->
o
.
sync_io
) {

64 
sq_size
 = 2;

71 
sq_size
 = 
td
->
o
.
iodïth
 + 
	`LIBRPMA_FIO_CEIL
(td->o.iodepth,

72 
td
->
o
.
iodïth_b©ch
);

76 i‡(
td
->
o
.
sync_io
) {

77 
sq_size
 = 1;

79 
sq_size
 = 
td
->
o
.
iodïth
;

82 
cq_size
 = 
sq_size
;

85 i‡((
ªt
 = 
	`Ωma_c⁄n_cfg_√w
(&
cfg
))) {

86 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_conn_cfg_new");

91 i‡((
ªt
 = 
	`Ωma_c⁄n_cfg_£t_sq_size
(
cfg
, 
sq_size
))) {

92 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_conn_cfg_set_sq_size");

93 
îr_cfg_dñëe
;

95 i‡((
ªt
 = 
	`Ωma_c⁄n_cfg_£t_cq_size
(
cfg
, 
cq_size
))) {

96 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_conn_cfg_set_cq_size");

97 
îr_cfg_dñëe
;

100 i‡(
	`libΩma_fio_˛õ¡_öô
(
td
, 
cfg
))

101 
îr_cfg_dñëe
;

103 
ccd
 = 
td
->
io_›s_d©a
;

105 i‡(
ccd
->
£rvî_mr_Êush_ty≥
 =
RPMA_FLUSH_TYPE_PERSISTENT
) {

106 i‡(!
ccd
->
ws
->
dúe˘_wrôe_to_pmem
) {

107 i‡(
td
->
thªad_numbî
 == 1)

108 
	`log_îr
(

110 
îr_˛ónup_comm⁄
;

114 i‡((
ªt
 = 
	`Ωma_≥î_cfg_√w
(&
pcfg
))) {

115 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_peer_cfg_new");

116 
îr_˛ónup_comm⁄
;

119 i‡((
ªt
 = 
	`Ωma_≥î_cfg_£t_dúe˘_wrôe_to_pmem
(
pcfg
, 
åue
))) {

120 
	`libΩma_td_vîr‹
(
td
, 
ªt
,

122 (Ë
	`Ωma_≥î_cfg_dñëe
(&
pcfg
);

123 
îr_˛ónup_comm⁄
;

126 i‡((
ªt
 = 
	`Ωma_c⁄n_≠∂y_ªmŸe_≥î_cfg
(
ccd
->
c⁄n
, 
pcfg
))) {

127 
	`libΩma_td_vîr‹
(
td
, 
ªt
,

129 (Ë
	`Ωma_≥î_cfg_dñëe
(&
pcfg
);

130 
îr_˛ónup_comm⁄
;

133 (Ë
	`Ωma_≥î_cfg_dñëe
(&
pcfg
);

134 } i‡(
td
->
thªad_numbî
 == 1) {

136 
	`log_îr
(

141 i‡((
ªt
 = 
	`Ωma_c⁄n_cfg_dñëe
(&
cfg
))) {

142 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_conn_cfg_delete");

146 
ccd
->
Êush
 = 
˛õ¡_io_Êush
;

147 
ccd
->
gë_io_u_ödex
 = 
˛õ¡_gë_io_u_ödex
;

151 
îr_˛ónup_comm⁄
:

152 
	`libΩma_fio_˛õ¡_˛ónup
(
td
);

154 
îr_cfg_dñëe
:

155 (Ë
	`Ωma_c⁄n_cfg_dñëe
(&
cfg
);

158 
	}
}

160 
	$˛õ¡_˛ónup
(
thªad_d©a
 *
td
)

162 
libΩma_fio_˛õ¡_d©a
 *
ccd
 = 
td
->
io_›s_d©a
;

164 i‡(
ccd
 =
NULL
)

167 
	`‰ì
(
ccd
->
˛õ¡_d©a
);

169 
	`libΩma_fio_˛õ¡_˛ónup
(
td
);

170 
	}
}

172 
ölöe
 
	$˛õ¡_io_Êush
(
thªad_d©a
 *
td
,

173 
io_u
 *
fú°_io_u
, io_u *
œ°_io_u
,

174 
Àn
)

176 
libΩma_fio_˛õ¡_d©a
 *
ccd
 = 
td
->
io_›s_d©a
;

177 
size_t
 
d°_off£t
 = 
fú°_io_u
->
off£t
;

178 
ªt
;

180 i‡((
ªt
 = 
	`Ωma_Êush
(
ccd
->
c⁄n
, ccd->
£rvî_mr
, 
d°_off£t
, 
Àn
,

181 
ccd
->
£rvî_mr_Êush_ty≥
, 
RPMA_F_COMPLETION_ALWAYS
,

182 (*)(
uöçå_t
)
œ°_io_u
->
ödex
))) {

183 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_flush");

188 
	}
}

190 
	$˛õ¡_gë_io_u_ödex
(
ibv_wc
 *
wc
, *
io_u_ödex
)

192 
	`mem˝y
(
io_u_ödex
, &
wc
->
wr_id
, (*io_u_index));

195 
	}
}

197 
FIO_STATIC
 
i€ngöe_›s
 
	gi€ngöe_˛õ¡
 = {

198 .
«me
 = "librpma_apm_client",

199 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

200 .
	göô
 = 
˛õ¡_öô
,

201 .
	gpo°_öô
 = 
libΩma_fio_˛õ¡_po°_öô
,

202 .
	ggë_fûe_size
 = 
libΩma_fio_˛õ¡_gë_fûe_size
,

203 .
	g›í_fûe
 = 
libΩma_fio_fûe_n›
,

204 .
	gqueue
 = 
libΩma_fio_˛õ¡_queue
,

205 .
	gcommô
 = 
libΩma_fio_˛õ¡_commô
,

206 .
	ggëevíts
 = 
libΩma_fio_˛õ¡_gëevíts
,

207 .
	gevít
 = 
libΩma_fio_˛õ¡_evít
,

208 .
	gîrdëaûs
 = 
libΩma_fio_˛õ¡_îrdëaûs
,

209 .
	g˛o£_fûe
 = 
libΩma_fio_fûe_n›
,

210 .
	g˛ónup
 = 
˛õ¡_˛ónup
,

211 .
	gÊags
 = 
FIO_DISKLESSIO
 | 
FIO_ASYNCIO_SETS_ISSUE_TIME
,

212 .
	g›ti⁄s
 = 
libΩma_fio_›ti⁄s
,

213 .
	g›ti⁄_°ru˘_size
 = (
libΩma_fio_›ti⁄s_vÆues
),

218 
	$£rvî_›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

220  
	`libΩma_fio_£rvî_›í_fûe
(
td
, 
f
, 
NULL
);

221 
	}
}

223 
fio_q_°©us
 
	$£rvî_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

225  
FIO_Q_COMPLETED
;

226 
	}
}

228 
FIO_STATIC
 
i€ngöe_›s
 
	gi€ngöe_£rvî
 = {

229 .
«me
 = "librpma_apm_server",

230 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

231 .
	göô
 = 
libΩma_fio_£rvî_öô
,

232 .
	g›í_fûe
 = 
£rvî_›í_fûe
,

233 .
	g˛o£_fûe
 = 
libΩma_fio_£rvî_˛o£_fûe
,

234 .
	gqueue
 = 
£rvî_queue
,

235 .
	gövÆid©e
 = 
libΩma_fio_fûe_n›
,

236 .
	g˛ónup
 = 
libΩma_fio_£rvî_˛ónup
,

237 .
	gÊags
 = 
FIO_SYNCIO
,

238 .
	g›ti⁄s
 = 
libΩma_fio_›ti⁄s
,

239 .
	g›ti⁄_°ru˘_size
 = (
libΩma_fio_›ti⁄s_vÆues
),

244 
fio_öô
 
	$fio_libΩma_≠m_ªgi°î
()

246 
	`ªgi°î_i€ngöe
(&
i€ngöe_˛õ¡
);

247 
	`ªgi°î_i€ngöe
(&
i€ngöe_£rvî
);

248 
	}
}

250 
fio_exô
 
	$fio_libΩma_≠m_uƒegi°î
()

252 
	`uƒegi°î_i€ngöe
(&
i€ngöe_˛õ¡
);

253 
	`uƒegi°î_i€ngöe
(&
i€ngöe_£rvî
);

254 
	}
}

	@engines/librpma_fio.c

16 #ifde‡
CONFIG_LIBPMEM2_INSTALLED


17 
	~"libΩma_fio_pmem2.h
"

19 
	~"libΩma_fio_pmem.h
"

22 
fio_›ti⁄
 
	glibΩma_fio_›ti⁄s
[] = {

24 .
«me
 = "serverip",

25 .
	g ame
 = "rpma_server_ip",

26 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

27 .
	goff1
 = 
off£tof
(
libΩma_fio_›ti⁄s_vÆues
, 
£rvî_ù
),

28 .
	ghñp
 = "IPáddressÅhe server isÜistening on",

29 .
	gdef
 = "",

30 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

31 .
	ggroup
 = 
FIO_OPT_G_LIBRPMA
,

34 .
	g«me
 = "port",

35 .
	g ame
 = "rpma_serverÖort",

36 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

37 .
	goff1
 = 
off£tof
(
libΩma_fio_›ti⁄s_vÆues
, 
p‹t
),

38 .
	ghñp
 = "portÅhe server isÜistening on",

39 .
	gdef
 = "7204",

40 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

41 .
	ggroup
 = 
FIO_OPT_G_LIBRPMA
,

44 .
	g«me
 = "direct_write_to_pmem",

45 .
	g ame
 = "Direct WriteÅo PMem (via RDMA) fromÅheÑemote host isÖossible",

46 .
	gty≥
 = 
FIO_OPT_BOOL
,

47 .
	goff1
 = 
off£tof
(
libΩma_fio_›ti⁄s_vÆues
,

48 
dúe˘_wrôe_to_pmem
),

49 .
	ghñp
 = "SetÅoÅrue ONLY when Direct WriteÅo PMem fromÅheÑemote host isÖossible (https://pmem.io/rpma/documentation/basic-direct-write-to-pmem.html)",

50 .
	gdef
 = "",

51 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

52 .
	ggroup
 = 
FIO_OPT_G_LIBRPMA
,

55 .
	g«me
 = "busy_wait_polling",

56 .
	g ame
 = "SetÅo 0Åo wait for completion instead of busy-waitÖolling completion.",

57 .
	gty≥
 = 
FIO_OPT_BOOL
,

58 .
	goff1
 = 
off£tof
(
libΩma_fio_›ti⁄s_vÆues
,

59 
busy_waô_pﬁlög
),

60 .
	ghñp
 = "SetÅo false if you wantÅoÑeduce CPU usage",

61 .
	gdef
 = "1",

62 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

63 .
	ggroup
 = 
FIO_OPT_G_LIBRPMA
,

66 .
	g«me
 = 
NULL
,

70 
	$libΩma_fio_td_p‹t
(c⁄° *
p‹t_ba£_°r
, 
thªad_d©a
 *
td
,

71 *
p‹t_out
)

73 
p‹t_ul
 = 
	`°πoul
(
p‹t_ba£_°r
, 
NULL
, 10);

74 
p‹t_√w
;

76 
p‹t_out
[0] = '\0';

78 i‡(
p‹t_ul
 =
ULONG_MAX
) {

79 
	`td_vîr‹
(
td
, 
î∫o
, "strtoul");

82 
p‹t_ul
 +
td
->
thªad_numbî
 - 1;

83 i‡(
p‹t_ul
 >
UINT_MAX
) {

84 
	`log_îr
("[%u]ÖortÇumber (%lu) biggerÅhan UINT_MAX\n",

85 
td
->
thªad_numbî
, 
p‹t_ul
);

89 
p‹t_√w
 = 
p‹t_ul
;

90 
	`¢¥ötf
(
p‹t_out
, 
LIBRPMA_FIO_PORT_STR_LEN_MAX
 - 1, "%u", 
p‹t_√w
);

93 
	}
}

95 *
	$libΩma_fio_Æloˇã_døm
(
thªad_d©a
 *
td
, 
size_t
 
size
,

96 
libΩma_fio_mem
 *
mem
)

98 *
mem_±r
 = 
NULL
;

99 
ªt
;

101 i‡((
ªt
 = 
	`posix_memÆign
((**)&
mem_±r
, 
∑ge_size
, 
size
))) {

102 
	`log_îr
("fio:Öosix_memalign() failed\n");

103 
	`td_vîr‹
(
td
, 
ªt
, "posix_memalign");

104  
NULL
;

107 
mem
->
mem_±r
 = mem_ptr;

108 
mem
->
size_mm≠
 = 0;

110  
mem_±r
;

111 
	}
}

113 *
	$libΩma_fio_Æloˇã_pmem
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

114 
size_t
 
size
, 
libΩma_fio_mem
 *
mem
)

116 
size_t
 
ws_off£t
;

117 
mem
->
mem_±r
 = 
NULL
;

119 i‡(
size
 % 
∑ge_size
) {

120 
	`log_îr
("fio: size (%zu) isÇotálignedÅoÖage size (%zu)\n",

121 
size
, 
∑ge_size
);

122  
NULL
;

125 i‡(
f
->
fûëy≥
 =
FIO_TYPE_CHAR
) {

127 
ws_off£t
 = (
td
->
thªad_numbî
 - 1Ë* 
size
;

130 
ws_off£t
 = 0;

133 i‡(!
f
->
fûe_«me
) {

134 
	`log_îr
("fio: filename isÇot set\n");

135  
NULL
;

138 i‡(
	`libΩma_fio_pmem_m≠_fûe
(
f
, 
size
, 
mem
, 
ws_off£t
)) {

139 
	`log_îr
("fio:Üibrpma_fio_pmem_map_file(%s) failed\n",

140 
f
->
fûe_«me
);

141  
NULL
;

144 
	`log_öfo
("fio: size of memory mapped fromÅhe file %s: %zu\n",

145 
f
->
fûe_«me
, 
mem
->
size_mm≠
);

147 
	`log_öfo
("fio:Üibøry u£dÅÿm≠ PMem from fûe: %s\n", 
RPMA_PMEM_USED
);

149  
mem
->
mem_±r
 ? mem->mem_±∏+ 
ws_off£t
 : 
NULL
;

150 
	}
}

152 
	$libΩma_fio_‰ì
(
libΩma_fio_mem
 *
mem
)

154 i‡(
mem
->
size_mm≠
)

155 
	`libΩma_fio_unm≠
(
mem
);

157 
	`‰ì
(
mem
->
mem_±r
);

158 
	}
}

160 
	#LIBRPMA_FIO_RETRY_MAX_NO
 10

	)

161 
	#LIBRPMA_FIO_RETRY_DELAY_S
 5

	)

163 
	$libΩma_fio_˛õ¡_öô
(
thªad_d©a
 *
td
,

164 
Ωma_c⁄n_cfg
 *
cfg
)

166 
libΩma_fio_˛õ¡_d©a
 *
ccd
;

167 
libΩma_fio_›ti⁄s_vÆues
 *
o
 = 
td
->
eo
;

168 
ibv_c⁄ãxt
 *
dev
 = 
NULL
;

169 
p‹t_td
[
LIBRPMA_FIO_PORT_STR_LEN_MAX
];

170 
Ωma_c⁄n_ªq
 *
ªq
 = 
NULL
;

171 
Ωma_c⁄n_evít
 
evít
;

172 
Ωma_c⁄n_¥iv©e_d©a
 
pd©a
;

173 
Ωma_log_Àvñ
 
log_Àvñ_aux
 = 
RPMA_LOG_LEVEL_WARNING
;

174 
ªmŸe_Êush_ty≥
;

175 
ªåy
;

176 
ªt
;

179 #ifde‡
FIO_INC_DEBUG


180 i‡((1UL << 
FD_NET
Ë& 
fio_debug
)

181 
log_Àvñ_aux
 = 
RPMA_LOG_LEVEL_INFO
;

185 
	`Ωma_log_£t_thªshﬁd
(
RPMA_LOG_THRESHOLD
, 
RPMA_LOG_LEVEL_INFO
);

186 
	`Ωma_log_£t_thªshﬁd
(
RPMA_LOG_THRESHOLD_AUX
, 
log_Àvñ_aux
);

189 i‡((
ªt
 = 
	`Ωma_utûs_gë_ibv_c⁄ãxt
(
o
->
£rvî_ù
,

190 
RPMA_UTIL_IBV_CONTEXT_REMOTE
, &
dev
))) {

191 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_utils_get_ibv_context");

196 
ccd
 = 
	`ˇŒoc
(1, (*ccd));

197 i‡(
ccd
 =
NULL
) {

198 
	`td_vîr‹
(
td
, 
î∫o
, "calloc");

203 
ccd
->
io_us_queued
 = 
	`ˇŒoc
(
td
->
o
.
iodïth
, (*ccd->io_us_queued));

204 i‡(
ccd
->
io_us_queued
 =
NULL
) {

205 
	`td_vîr‹
(
td
, 
î∫o
, "calloc");

206 
îr_‰ì_ccd
;

209 
ccd
->
io_us_Êight
 = 
	`ˇŒoc
(
td
->
o
.
iodïth
, (*ccd->io_us_flight));

210 i‡(
ccd
->
io_us_Êight
 =
NULL
) {

211 
	`td_vîr‹
(
td
, 
î∫o
, "calloc");

212 
îr_‰ì_io_u_queues
;

215 
ccd
->
io_us_com∂ëed
 = 
	`ˇŒoc
(
td
->
o
.
iodïth
,

216 (*
ccd
->
io_us_com∂ëed
));

217 i‡(
ccd
->
io_us_com∂ëed
 =
NULL
) {

218 
	`td_vîr‹
(
td
, 
î∫o
, "calloc");

219 
îr_‰ì_io_u_queues
;

223 i‡((
ªt
 = 
	`Ωma_≥î_√w
(
dev
, &
ccd
->
≥î
))) {

224 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_peer_new");

225 
îr_‰ì_io_u_queues
;

229 i‡(
	`libΩma_fio_td_p‹t
(
o
->
p‹t
, 
td
, 
p‹t_td
))

230 
îr_≥î_dñëe
;

232 
ªåy
 = 0;Ñëry < 
LIBRPMA_FIO_RETRY_MAX_NO
;Ñetry++) {

233 i‡((
ªt
 = 
	`Ωma_c⁄n_ªq_√w
(
ccd
->
≥î
, 
o
->
£rvî_ù
, 
p‹t_td
,

234 
cfg
, &
ªq
))) {

235 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_conn_req_new");

236 
îr_≥î_dñëe
;

243 i‡((
ªt
 = 
	`Ωma_c⁄n_ªq_c⁄√˘
(&
ªq
, 
NULL
, &
ccd
->
c⁄n
))) {

244 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_conn_req_connect");

245 
îr_ªq_dñëe
;

249 i‡((
ªt
 = 
	`Ωma_c⁄n_√xt_evít
(
ccd
->
c⁄n
, &
evít
))) {

250 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_conn_next_event");

251 
îr_c⁄n_dñëe
;

252 } i‡(
evít
 =
RPMA_CONN_ESTABLISHED
) {

254 } i‡(
evít
 =
RPMA_CONN_REJECTED
) {

255 (Ë
	`Ωma_c⁄n_disc⁄√˘
(
ccd
->
c⁄n
);

256 (Ë
	`Ωma_c⁄n_dñëe
(&
ccd
->
c⁄n
);

257 i‡(
ªåy
 < 
LIBRPMA_FIO_RETRY_MAX_NO
 - 1) {

258 
	`log_îr
("Thread [%d]: Retrying (#%i) ...\n",

259 
td
->
thªad_numbî
, 
ªåy
 + 1);

260 
	`¶ìp
(
LIBRPMA_FIO_RETRY_DELAY_S
);

262 
	`log_îr
(

264 
td
->
thªad_numbî
);

267 
	`log_îr
(

269 
	`Ωma_utûs_c⁄n_evít_2°r
(
evít
));

270 
îr_c⁄n_dñëe
;

274 i‡(
ªåy
 > 0)

275 
	`log_îr
("Thread [%d]: ConnectedáfterÑetry #%i\n",

276 
td
->
thªad_numbî
, 
ªåy
);

278 i‡(
ccd
->
c⁄n
 =
NULL
)

279 
îr_≥î_dñëe
;

282 i‡((
ªt
 = 
	`Ωma_c⁄n_gë_cq
(
ccd
->
c⁄n
, &ccd->
cq
))) {

283 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_conn_get_cq");

284 
îr_c⁄n_dñëe
;

288 i‡((
ªt
 = 
	`Ωma_c⁄n_gë_¥iv©e_d©a
(
ccd
->
c⁄n
, &
pd©a
))) {

289 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_conn_get_private_data");

290 
îr_c⁄n_dñëe
;

294 
ccd
->
ws
 = 
pd©a
.
±r
;

297 i‡((
ªt
 = 
	`Ωma_mr_ªmŸe_‰om_des¸ùt‹
(&
ccd
->
ws
->
des¸ùt‹
[0],

298 
ccd
->
ws
->
mr_desc_size
, &ccd->
£rvî_mr
))) {

299 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_mr_remote_from_descriptor");

300 
îr_c⁄n_dñëe
;

304 i‡((
ªt
 = 
	`Ωma_mr_ªmŸe_gë_size
(
ccd
->
£rvî_mr
, &ccd->
ws_size
))) {

305 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_mr_remote_get_size");

306 
îr_c⁄n_dñëe
;

310 i‡((
ªt
 = 
	`Ωma_mr_ªmŸe_gë_Êush_ty≥
(
ccd
->
£rvî_mr
,

311 &
ªmŸe_Êush_ty≥
))) {

312 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_mr_remote_get_flush_type");

313 
îr_c⁄n_dñëe
;

316 
ccd
->
£rvî_mr_Êush_ty≥
 =

317 (
ªmŸe_Êush_ty≥
 & 
RPMA_MR_USAGE_FLUSH_TYPE_PERSISTENT
) ?

318 
RPMA_FLUSH_TYPE_PERSISTENT
 : 
RPMA_FLUSH_TYPE_VISIBILITY
;

324 
td
->
o
.
mem_Æign
 = 
∑ge_size
;

326 
td
->
io_›s_d©a
 = 
ccd
;

330 
îr_c⁄n_dñëe
:

331 (Ë
	`Ωma_c⁄n_disc⁄√˘
(
ccd
->
c⁄n
);

332 (Ë
	`Ωma_c⁄n_dñëe
(&
ccd
->
c⁄n
);

334 
îr_ªq_dñëe
:

335 (Ë
	`Ωma_c⁄n_ªq_dñëe
(&
ªq
);

337 
îr_≥î_dñëe
:

338 (Ë
	`Ωma_≥î_dñëe
(&
ccd
->
≥î
);

340 
îr_‰ì_io_u_queues
:

341 
	`‰ì
(
ccd
->
io_us_queued
);

342 
	`‰ì
(
ccd
->
io_us_Êight
);

343 
	`‰ì
(
ccd
->
io_us_com∂ëed
);

345 
îr_‰ì_ccd
:

346 
	`‰ì
(
ccd
);

349 
	}
}

351 
	$libΩma_fio_˛õ¡_˛ónup
(
thªad_d©a
 *
td
)

353 
libΩma_fio_˛õ¡_d©a
 *
ccd
 = 
td
->
io_›s_d©a
;

354 
Ωma_c⁄n_evít
 
ev
;

355 
ªt
;

357 i‡(
ccd
 =
NULL
)

361 i‡((
ªt
 = 
	`Ωma_mr_dîeg
(&
ccd
->
‹ig_mr
)))

362 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_mr_dereg");

364 i‡((
ªt
 = 
	`Ωma_mr_ªmŸe_dñëe
(&
ccd
->
£rvî_mr
)))

365 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_mr_remote_delete");

367 i‡((
ªt
 = 
	`Ωma_c⁄n_disc⁄√˘
(
ccd
->
c⁄n
)))

368 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_conn_disconnect");

370 i‡((
ªt
 = 
	`Ωma_c⁄n_√xt_evít
(
ccd
->
c⁄n
, &
ev
))) {

371 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_conn_next_event");

372 } i‡(
ev
 !
RPMA_CONN_CLOSED
) {

373 
	`log_îr
(

375 
	`Ωma_utûs_c⁄n_evít_2°r
(
ev
));

378 i‡((
ªt
 = 
	`Ωma_c⁄n_dñëe
(&
ccd
->
c⁄n
)))

379 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_conn_delete");

381 i‡((
ªt
 = 
	`Ωma_≥î_dñëe
(&
ccd
->
≥î
)))

382 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_peer_delete");

384 
	`‰ì
(
ccd
->
io_us_queued
);

385 
	`‰ì
(
ccd
->
io_us_Êight
);

386 
	`‰ì
(
ccd
->
io_us_com∂ëed
);

387 
	`‰ì
(
ccd
);

388 
td
->
io_›s_d©a
 = 
NULL
;

389 
	}
}

391 
	$libΩma_fio_fûe_n›
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

395 
	}
}

397 
	$libΩma_fio_˛õ¡_po°_öô
(
thªad_d©a
 *
td
)

399 
libΩma_fio_˛õ¡_d©a
 *
ccd
 = 
td
->
io_›s_d©a
;

400 
size_t
 
io_us_size
;

401 
ªt
;

407 
ccd
->
‹ig_buf„r_Æig√d
 = 
	`PTR_ALIGN
(
td
->
‹ig_buf„r
, 
∑ge_mask
) +

408 
td
->
o
.
mem_Æign
;

414 
io_us_size
 = ()
	`td_max_bs
(
td
) *

415 ()
td
->
o
.
iodïth
;

417 i‡((
ªt
 = 
	`Ωma_mr_ªg
(
ccd
->
≥î
, ccd->
‹ig_buf„r_Æig√d
, 
io_us_size
,

418 
RPMA_MR_USAGE_READ_DST
 | 
RPMA_MR_USAGE_READ_SRC
 |

419 
RPMA_MR_USAGE_WRITE_DST
 | 
RPMA_MR_USAGE_WRITE_SRC
 |

420 
RPMA_MR_USAGE_FLUSH_TYPE_PERSISTENT
, &
ccd
->
‹ig_mr
)))

421 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_mr_reg");

422  
ªt
;

423 
	}
}

425 
	$libΩma_fio_˛õ¡_gë_fûe_size
(
thªad_d©a
 *
td
,

426 
fio_fûe
 *
f
)

428 
libΩma_fio_˛õ¡_d©a
 *
ccd
 = 
td
->
io_›s_d©a
;

430 
f
->
ªÆ_fûe_size
 = 
ccd
->
ws_size
;

431 
	`fio_fûe_£t_size_known
(
f
);

434 
	}
}

436 
fio_q_°©us
 
	$˛õ¡_queue_sync
(
thªad_d©a
 *
td
,

437 
io_u
 *io_u)

439 
libΩma_fio_˛õ¡_d©a
 *
ccd
 = 
td
->
io_›s_d©a
;

440 
ibv_wc
 
wc
;

441 
io_u_ödex
;

442 
ªt
;

445 i‡(
io_u
->
ddú
 =
DDIR_READ
) {

447 i‡(
	`libΩma_fio_˛õ¡_io_ªad
(
td
, 
io_u
,

448 
RPMA_F_COMPLETION_ALWAYS
))

449 
îr
;

450 } i‡(
io_u
->
ddú
 =
DDIR_WRITE
) {

452 i‡(
	`libΩma_fio_˛õ¡_io_wrôe
(
td
, 
io_u
))

453 
îr
;

454 i‡(
ccd
->
	`Êush
(
td
, 
io_u
, io_u, io_u->
x„r_buÊí
))

455 
îr
;

457 
	`log_îr
("unsuµ‹ãd IO mode: %s\n", 
	`io_ddú_«me
(
io_u
->
ddú
));

458 
îr
;

463 
ªt
 = 
	`Ωma_cq_gë_wc
(
ccd
->
cq
, 1, &
wc
, 
NULL
);

464 i‡(
ªt
 =
RPMA_E_NO_COMPLETION
) {

467 } i‡(
ªt
 != 0) {

469 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_cq_get_wc");

470 
îr
;

474 i‡(
wc
.
°©us
 !
IBV_WC_SUCCESS
)

475 
îr
;

477 i‡(
wc
.
›code
 =
IBV_WC_SEND
)

478 ++
ccd
->
›_£nd_com∂ëed
;

480 i‡(
wc
.
›code
 =
IBV_WC_RECV
)

481 ++
ccd
->
›_ªcv_com∂ëed
;

487 i‡(
ccd
->
	`gë_io_u_ödex
(&
wc
, &
io_u_ödex
) != 1)

488 
îr
;

490 i‡(
io_u
->
ödex
 !
io_u_ödex
) {

491 
	`log_îr
(

493 
io_u_ödex
);

494 
îr
;

498 i‡(
	`libΩma_fio_˛õ¡_io_com∂ëe_Æl_£nds
(
td
))

499 
îr
;

501  
FIO_Q_COMPLETED
;

503 
îr
:

504 
io_u
->
îr‹
 = -1;

505  
FIO_Q_COMPLETED
;

506 
	}
}

508 
fio_q_°©us
 
	$libΩma_fio_˛õ¡_queue
(
thªad_d©a
 *
td
,

509 
io_u
 *io_u)

511 
libΩma_fio_˛õ¡_d©a
 *
ccd
 = 
td
->
io_›s_d©a
;

513 i‡(
ccd
->
io_u_queued_ƒ
 =()
td
->
o
.
iodïth
)

514  
FIO_Q_BUSY
;

516 i‡(
td
->
o
.
sync_io
)

517  
	`˛õ¡_queue_sync
(
td
, 
io_u
);

520 
ccd
->
io_us_queued
[ccd->
io_u_queued_ƒ
] = 
io_u
;

521 
ccd
->
io_u_queued_ƒ
++;

523  
FIO_Q_QUEUED
;

524 
	}
}

526 
	$libΩma_fio_˛õ¡_commô
(
thªad_d©a
 *
td
)

528 
libΩma_fio_˛õ¡_d©a
 *
ccd
 = 
td
->
io_›s_d©a
;

529 
Êags
 = 
RPMA_F_COMPLETION_ON_ERROR
;

530 
time•ec
 
now
;

531 
boﬁ
 
fûl_time
;

532 
i
;

533 
io_u
 *
Êush_fú°_io_u
 = 
NULL
;

534 
Êush_Àn
 = 0;

536 i‡(!
ccd
->
io_us_queued
)

540 
i
 = 0; i < 
ccd
->
io_u_queued_ƒ
; i++) {

541 
io_u
 *io_u = 
ccd
->
io_us_queued
[
i
];

543 i‡(
io_u
->
ddú
 =
DDIR_READ
) {

544 i‡(
i
 + 1 =
ccd
->
io_u_queued_ƒ
 ||

545 
ccd
->
io_us_queued
[
i
 + 1]->
ddú
 =
DDIR_WRITE
)

546 
Êags
 = 
RPMA_F_COMPLETION_ALWAYS
;

548 i‡(
	`libΩma_fio_˛õ¡_io_ªad
(
td
, 
io_u
, 
Êags
))

550 } i‡(
io_u
->
ddú
 =
DDIR_WRITE
) {

552 i‡(
	`libΩma_fio_˛õ¡_io_wrôe
(
td
, 
io_u
))

556 i‡(
Êush_fú°_io_u
 =
NULL
)

557 
Êush_fú°_io_u
 = 
io_u
;

563 
Êush_Àn
 +
io_u
->
x„r_buÊí
;

569 i‡(!
	`td_øndom
(
td
)) {

578 i‡((
i
 + 1 < 
ccd
->
io_u_queued_ƒ
) &&

579 (
ccd
->
io_us_queued
[
i
 + 1]->
ddú
 =
DDIR_WRITE
))

584 i‡(
ccd
->
	`Êush
(
td
, 
Êush_fú°_io_u
, 
io_u
, 
Êush_Àn
))

591 
Êush_fú°_io_u
 = 
NULL
;

592 
Êush_Àn
 = 0;

594 
	`log_îr
("unsupported IO mode: %s\n",

595 
	`io_ddú_«me
(
io_u
->
ddú
));

600 i‡((
fûl_time
 = 
	`fio_fûl_issue_time
(
td
))) {

601 
	`fio_gëtime
(&
now
, 
NULL
);

606 i‡(
td
->
o
.
ªad_iﬁog_fûe
)

607 
	`mem˝y
(&
td
->
œ°_issue
, &
now
, (now));

611 
i
 = 0; i < 
ccd
->
io_u_queued_ƒ
; i++) {

612 
io_u
 *io_u = 
ccd
->
io_us_queued
[
i
];

615 i‡(
fûl_time
)

616 
	`mem˝y
(&
io_u
->
issue_time
, &
now
, (now));

619 
ccd
->
io_us_Êight
[ccd->
io_u_Êight_ƒ
] = 
io_u
;

620 
ccd
->
io_u_Êight_ƒ
++;

627 
	`io_u_queued
(
td
, 
io_u
);

631 
	`io_u_m¨k_submô
(
td
, 
ccd
->
io_u_queued_ƒ
);

632 
ccd
->
io_u_queued_ƒ
 = 0;

635 
	}
}

643 
	$˛õ¡_gëevít_¥o˚ss
(
thªad_d©a
 *
td
)

645 
libΩma_fio_˛õ¡_d©a
 *
ccd
 = 
td
->
io_›s_d©a
;

646 
ibv_wc
 
wc
;

648 
io_u_ödex
;

650 
cm∂_num
 = 0;

652 
io_u
 *io_u;

653 
i
;

654 
ªt
;

657 i‡((
ªt
 = 
	`Ωma_cq_gë_wc
(
ccd
->
cq
, 1, &
wc
, 
NULL
))) {

659 i‡(
ªt
 =
RPMA_E_NO_COMPLETION
) {

665 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_cq_get_wc");

670 i‡(
wc
.
°©us
 !
IBV_WC_SUCCESS
) {

671 
td
->
îr‹
 = 
wc
.
°©us
;

675 i‡(
wc
.
›code
 =
IBV_WC_SEND
)

676 ++
ccd
->
›_£nd_com∂ëed
;

677 i‡(
wc
.
›code
 =
IBV_WC_RECV
)

678 ++
ccd
->
›_ªcv_com∂ëed
;

680 i‡((
ªt
 = 
ccd
->
	`gë_io_u_ödex
(&
wc
, &
io_u_ödex
)) != 1)

681  
ªt
;

684 
i
 = 0; i < 
ccd
->
io_u_Êight_ƒ
; ++i) {

685 i‡(
ccd
->
io_us_Êight
[
i
]->
ödex
 =
io_u_ödex
) {

686 
cm∂_num
 = 
i
 + 1;

692 i‡(
cm∂_num
 == 0) {

693 
	`log_îr
(

695 
io_u_ödex
);

700 
i
 = 0; i < 
cm∂_num
; ++i) {

702 
io_u
 = 
ccd
->
io_us_Êight
[
i
];

705 
ccd
->
io_us_com∂ëed
[ccd->
io_u_com∂ëed_ƒ
] = 
io_u
;

706 
ccd
->
io_u_com∂ëed_ƒ
++;

710 
i
 = 
cm∂_num
; i < 
ccd
->
io_u_Êight_ƒ
; ++i)

711 
ccd
->
io_us_Êight
[
i
 - 
cm∂_num
] = ccd->io_us_flight[i];

712 
ccd
->
io_u_Êight_ƒ
 -
cm∂_num
;

714  
cm∂_num
;

715 
	}
}

717 
	$libΩma_fio_˛õ¡_gëevíts
(
thªad_d©a
 *
td
, 
mö
,

718 
max
, c⁄° 
time•ec
 *
t
)

720 
libΩma_fio_˛õ¡_d©a
 *
ccd
 = 
td
->
io_›s_d©a
;

722 
cm∂_num_tŸÆ
 = 0;

724 
cm∂_num
;

727 
cm∂_num
 = 
	`˛õ¡_gëevít_¥o˚ss
(
td
);

728 i‡(
cm∂_num
 > 0) {

730 
cm∂_num_tŸÆ
 +
cm∂_num
;

731 } i‡(
cm∂_num
 == 0) {

736 i‡(
cm∂_num_tŸÆ
 >
mö
 &&

737 
ccd
->
›_£nd_com∂ëed
 >ccd->
›_ªcv_com∂ëed
)

757 } 
cm∂_num_tŸÆ
 < 
max
 ||

758 
ccd
->
›_£nd_com∂ëed
 < ccd->
›_ªcv_com∂ëed
);

764 i‡(
ccd
->
›_£nd_po°ed
 =ccd->
›_£nd_com∂ëed
 &&

765 
ccd
->
›_£nd_com∂ëed
 =ccd->
›_ªcv_com∂ëed
) {

766 
ccd
->
›_£nd_po°ed
 = 0;

767 
ccd
->
›_£nd_com∂ëed
 = 0;

768 
ccd
->
›_ªcv_com∂ëed
 = 0;

771  
cm∂_num_tŸÆ
;

772 
	}
}

774 
io_u
 *
	$libΩma_fio_˛õ¡_evít
(
thªad_d©a
 *
td
, 
evít
)

776 
libΩma_fio_˛õ¡_d©a
 *
ccd
 = 
td
->
io_›s_d©a
;

777 
io_u
 *io_u;

778 
i
;

781 
io_u
 = 
ccd
->
io_us_com∂ëed
[0];

784 
i
 = 1; i < 
ccd
->
io_u_com∂ëed_ƒ
; ++i)

785 
ccd
->
io_us_com∂ëed
[
i
 - 1] = ccd->io_us_completed[i];

786 
ccd
->
io_u_com∂ëed_ƒ
--;

788 
	`d¥öt_io_u
(
io_u
, "client_event");

790  
io_u
;

791 
	}
}

793 *
	$libΩma_fio_˛õ¡_îrdëaûs
(
io_u
 *io_u)

796 
ibv_wc_°©us
 
°©us
 = 
io_u
->
îr‹
;

797 c⁄° *
°©us_°r
 = 
	`ibv_wc_°©us_°r
(
°©us
);

799 *
dëaûs
 = 
	`°rdup
(
°©us_°r
);

800 i‡(
dëaûs
 =
NULL
) {

801 
	`Ârötf
(
°dîr
, "Eº‹: %s\n", 
°©us_°r
);

802 
	`Ârötf
(
°dîr
, "FatalÉrror: out of memory. Aborting.\n");

803 
	`ab‹t
();

807  
dëaûs
;

808 
	}
}

810 
	$libΩma_fio_£rvî_öô
(
thªad_d©a
 *
td
)

812 
libΩma_fio_›ti⁄s_vÆues
 *
o
 = 
td
->
eo
;

813 
libΩma_fio_£rvî_d©a
 *
csd
;

814 
ibv_c⁄ãxt
 *
dev
 = 
NULL
;

815 
Ωma_log_Àvñ
 
log_Àvñ_aux
 = 
RPMA_LOG_LEVEL_WARNING
;

816 
ªt
 = -1;

819 #ifde‡
FIO_INC_DEBUG


820 i‡((1UL << 
FD_NET
Ë& 
fio_debug
)

821 
log_Àvñ_aux
 = 
RPMA_LOG_LEVEL_INFO
;

825 
	`Ωma_log_£t_thªshﬁd
(
RPMA_LOG_THRESHOLD
, 
RPMA_LOG_LEVEL_INFO
);

826 
	`Ωma_log_£t_thªshﬁd
(
RPMA_LOG_THRESHOLD_AUX
, 
log_Àvñ_aux
);

830 i‡((
ªt
 = 
	`Ωma_utûs_gë_ibv_c⁄ãxt
(
o
->
£rvî_ù
,

831 
RPMA_UTIL_IBV_CONTEXT_LOCAL
, &
dev
))) {

832 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_utils_get_ibv_context");

837 
csd
 = 
	`ˇŒoc
(1, (*csd));

838 i‡(
csd
 =
NULL
) {

839 
	`td_vîr‹
(
td
, 
î∫o
, "calloc");

844 i‡((
ªt
 = 
	`Ωma_≥î_√w
(
dev
, &
csd
->
≥î
))) {

845 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_peer_new");

846 
îr_‰ì_csd
;

849 
td
->
io_›s_d©a
 = 
csd
;

853 
îr_‰ì_csd
:

854 
	`‰ì
(
csd
);

857 
	}
}

859 
	$libΩma_fio_£rvî_˛ónup
(
thªad_d©a
 *
td
)

861 
libΩma_fio_£rvî_d©a
 *
csd
 = 
td
->
io_›s_d©a
;

862 
ªt
;

864 i‡(
csd
 =
NULL
)

868 i‡((
ªt
 = 
	`Ωma_≥î_dñëe
(&
csd
->
≥î
)))

869 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_peer_delete");

871 
	`‰ì
(
csd
);

872 
	}
}

874 
	$libΩma_fio_£rvî_›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

875 
Ωma_c⁄n_cfg
 *
cfg
)

877 
libΩma_fio_£rvî_d©a
 *
csd
 = 
td
->
io_›s_d©a
;

878 
libΩma_fio_›ti⁄s_vÆues
 *
o
 = 
td
->
eo
;

879 
Ωma_c⁄n_evít
 
c⁄n_evít
 = 
RPMA_CONN_UNDEFINED
;

880 
libΩma_fio_w‹k•a˚
 
ws
 = {0};

881 
Ωma_c⁄n_¥iv©e_d©a
 
pd©a
;

882 
uöt32_t
 
max_msg_num
;

883 
Ωma_c⁄n_ªq
 *
c⁄n_ªq
;

884 
Ωma_c⁄n
 *
c⁄n
;

885 
Ωma_mr_loˇl
 *
mr
;

886 
p‹t_td
[
LIBRPMA_FIO_PORT_STR_LEN_MAX
];

887 
Ωma_ï
 *
ï
;

888 
size_t
 
mem_size
 = 
td
->
o
.
size
;

889 
size_t
 
mr_desc_size
;

890 *
ws_±r
;

891 
boﬁ
 
is_døm
;

892 
ußge_mem_ty≥
;

893 
ªt
;

895 i‡(!
f
->
fûe_«me
) {

896 
	`log_îr
("fio: filename isÇot set\n");

901 i‡(
	`libΩma_fio_td_p‹t
(
o
->
p‹t
, 
td
, 
p‹t_td
))

904 i‡((
ªt
 = 
	`Ωma_ï_li°í
(
csd
->
≥î
, 
o
->
£rvî_ù
, 
p‹t_td
, &
ï
))) {

905 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_ep_listen");

909 
is_døm
 = !
	`°rcmp
(
f
->
fûe_«me
, "malloc");

910 i‡(
is_døm
) {

912 
ws_±r
 = 
	`libΩma_fio_Æloˇã_døm
(
td
, 
mem_size
, &
csd
->
mem
);

913 
ußge_mem_ty≥
 = 
RPMA_MR_USAGE_FLUSH_TYPE_VISIBILITY
;

916 
ws_±r
 = 
	`libΩma_fio_Æloˇã_pmem
(
td
, 
f
, 
mem_size
, &
csd
->
mem
);

917 
ußge_mem_ty≥
 = 
RPMA_MR_USAGE_FLUSH_TYPE_PERSISTENT
;

920 i‡(
ws_±r
 =
NULL
)

921 
îr_ï_shutdown
;

923 
f
->
ªÆ_fûe_size
 = 
mem_size
;

925 i‡((
ªt
 = 
	`Ωma_mr_ªg
(
csd
->
≥î
, 
ws_±r
, 
mem_size
,

926 
RPMA_MR_USAGE_READ_DST
 | 
RPMA_MR_USAGE_READ_SRC
 |

927 
RPMA_MR_USAGE_WRITE_DST
 | 
RPMA_MR_USAGE_WRITE_SRC
 |

928 
ußge_mem_ty≥
, &
mr
))) {

929 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_mr_reg");

930 
îr_‰ì
;

933 i‡(!
is_døm
 && 
f
->
fûëy≥
 =
FIO_TYPE_FILE
) {

934 
ªt
 = 
	`Ωma_mr_advi£
(
mr
, 0, 
mem_size
,

935 
IBV_ADVISE_MR_ADVICE_PREFETCH_WRITE
,

936 
IBV_ADVISE_MR_FLAG_FLUSH
);

937 i‡(
ªt
) {

938 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_mr_advise");

940 i‡(
ªt
 =
RPMA_E_INVAL
)

941 
îr_mr_dîeg
;

944 
	`log_îr
("Note: havingÑpma_mr_advise(3) failed because of RPMA_E_NOSUPP or RPMA_E_PROVIDER may come witháÖerformanceÖenalty, but it isÇotá blocker forÑunningÅhe benchmark.\n");

949 i‡((
ªt
 = 
	`Ωma_mr_gë_des¸ùt‹_size
(
mr
, &
mr_desc_size
))) {

950 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_mr_get_descriptor_size");

951 
îr_mr_dîeg
;

955 i‡(
mr_desc_size
 > 
LIBRPMA_FIO_DESCRIPTOR_MAX_SIZE
) {

956 
	`log_îr
(

958 
LIBRPMA_FIO_DESCRIPTOR_MAX_SIZE
);

959 
îr_mr_dîeg
;

963 i‡((
ªt
 = 
	`Ωma_mr_gë_des¸ùt‹
(
mr
, &
ws
.
des¸ùt‹
[0]))) {

964 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_mr_get_descriptor");

965 
îr_mr_dîeg
;

968 i‡(
cfg
 !
NULL
) {

969 i‡((
ªt
 = 
	`Ωma_c⁄n_cfg_gë_rq_size
(
cfg
, &
max_msg_num
))) {

970 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_conn_cfg_get_rq_size");

971 
îr_mr_dîeg
;

975 i‡(
max_msg_num
 > 
UINT16_MAX
) {

976 
	`log_îr
("fio: iodepthÅoo big (%u > %u)\n",

977 
max_msg_num
, 
UINT16_MAX
);

981 
ws
.
max_msg_num
 = max_msg_num;

985 
ws
.
dúe˘_wrôe_to_pmem
 = 
o
->direct_write_to_pmem;

986 
ws
.
mr_desc_size
 = mr_desc_size;

987 
pd©a
.
±r
 = &
ws
;

988 
pd©a
.
Àn
 = (
ws
);

991 i‡((
ªt
 = 
	`Ωma_ï_√xt_c⁄n_ªq
(
ï
, 
cfg
, &
c⁄n_ªq
))) {

992 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_ep_next_conn_req");

993 
îr_mr_dîeg
;

996 i‡(
csd
->
¥ï¨e_c⁄√˘i⁄
 && csd->
	`¥ï¨e_c⁄√˘i⁄
(
td
, 
c⁄n_ªq
))

997 
îr_ªq_dñëe
;

1000 i‡((
ªt
 = 
	`Ωma_c⁄n_ªq_c⁄√˘
(&
c⁄n_ªq
, &
pd©a
, &
c⁄n
))) {

1001 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_conn_req_connect");

1002 
îr_ªq_dñëe
;

1006 i‡((
ªt
 = 
	`Ωma_c⁄n_√xt_evít
(
c⁄n
, &
c⁄n_evít
))) {

1007 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_conn_next_event");

1008 
îr_c⁄n_dñëe
;

1009 } i‡(
c⁄n_evít
 !
RPMA_CONN_ESTABLISHED
) {

1010 
	`log_îr
("rpma_conn_next_eventÑeturnedán unexptectedÉvent\n");

1011 
îr_c⁄n_dñëe
;

1015 (Ë
	`Ωma_ï_shutdown
(&
ï
);

1017 
csd
->
ws_mr
 = 
mr
;

1018 
csd
->
ws_±r
 = ws_ptr;

1019 
csd
->
c⁄n
 = conn;

1022 i‡((
ªt
 = 
	`Ωma_c⁄n_gë_cq
(
csd
->
c⁄n
, &csd->
cq
))) {

1023 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_conn_get_cq");

1024 
îr_c⁄n_dñëe
;

1029 
îr_c⁄n_dñëe
:

1030 (Ë
	`Ωma_c⁄n_dñëe
(&
c⁄n
);

1032 
îr_ªq_dñëe
:

1033 (Ë
	`Ωma_c⁄n_ªq_dñëe
(&
c⁄n_ªq
);

1035 
îr_mr_dîeg
:

1036 (Ë
	`Ωma_mr_dîeg
(&
mr
);

1038 
îr_‰ì
:

1039 
	`libΩma_fio_‰ì
(&
csd
->
mem
);

1041 
îr_ï_shutdown
:

1042 (Ë
	`Ωma_ï_shutdown
(&
ï
);

1045 
	}
}

1047 
	$libΩma_fio_£rvî_˛o£_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

1049 
libΩma_fio_£rvî_d©a
 *
csd
 = 
td
->
io_›s_d©a
;

1050 
Ωma_c⁄n_evít
 
c⁄n_evít
 = 
RPMA_CONN_UNDEFINED
;

1051 
rv
 = 0;

1052 
ªt
;

1055 
ªt
 = 
	`Ωma_c⁄n_√xt_evít
(
csd
->
c⁄n
, &
c⁄n_evít
);

1056 i‡(!
ªt
 && 
c⁄n_evít
 !
RPMA_CONN_CLOSED
) {

1057 
	`log_îr
("rpma_conn_next_eventÑeturnedán unexptectedÉvent\n");

1058 
rv
 = -1;

1061 i‡((
ªt
 = 
	`Ωma_c⁄n_disc⁄√˘
(
csd
->
c⁄n
))) {

1062 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_conn_disconnect");

1063 
rv
 = -1;

1066 i‡((
ªt
 = 
	`Ωma_c⁄n_dñëe
(&
csd
->
c⁄n
))) {

1067 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_conn_delete");

1068 
rv
 = -1;

1071 i‡((
ªt
 = 
	`Ωma_mr_dîeg
(&
csd
->
ws_mr
))) {

1072 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_mr_dereg");

1073 
rv
 = -1;

1076 
	`libΩma_fio_‰ì
(&
csd
->
mem
);

1078  
rv
;

1079 
	}
}

	@engines/librpma_fio.h

16 #i‚de‡
LIBRPMA_FIO_H


17 
	#LIBRPMA_FIO_H
 1

	)

19 
	~"../fio.h
"

20 
	~"../›tgroup.h
"

22 
	~<libΩma.h
>

26 
	#libΩma_td_vîr‹
(
td
, 
îr
, 
func
) \

27 
	`td_vmsg
((
td
), (
îr
), 
	`Ωma_îr_2°r
”º), (
func
))

	)

30 
	#LIBRPMA_FIO_CEIL
(
a
, 
b
Ë((◊Ë+ (bË- 1Ë/ (b))

	)

33 
	slibΩma_fio_›ti⁄s_vÆues
 {

38 *
	m∑d
;

39 *
	m£rvî_ù
;

41 *
	mp‹t
;

43 
	mdúe˘_wrôe_to_pmem
;

45 
	mbusy_waô_pﬁlög
;

48 
fio_›ti⁄
 
libΩma_fio_›ti⁄s
[];

54 
	#LIBRPMA_FIO_DESCRIPTOR_MAX_SIZE
 24

	)

56 
	slibΩma_fio_w‹k•a˚
 {

57 
uöt16_t
 
	mmax_msg_num
;

58 
uöt8_t
 
	mdúe˘_wrôe_to_pmem
;

59 
uöt8_t
 
	mmr_desc_size
;

61 
	mdes¸ùt‹
[
LIBRPMA_FIO_DESCRIPTOR_MAX_SIZE
];

64 
	#LIBRPMA_FIO_PORT_STR_LEN_MAX
 12

	)

66 
libΩma_fio_td_p‹t
(c⁄° *
p‹t_ba£_°r
, 
thªad_d©a
 *
td
,

67 *
p‹t_out
);

69 
	slibΩma_fio_mem
 {

71 *
	mmem_±r
;

74 
size_t
 
	msize_mm≠
;

76 #ifde‡
CONFIG_LIBPMEM2_INSTALLED


78 
pmem2_m≠
 *
	mm≠
;

82 *
libΩma_fio_Æloˇã_døm
(
thªad_d©a
 *
td
, 
size_t
 
size
,

83 
libΩma_fio_mem
 *
mem
);

85 *
libΩma_fio_Æloˇã_pmem
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

86 
size_t
 
size
, 
libΩma_fio_mem
 *
mem
);

88 
libΩma_fio_‰ì
(
libΩma_fio_mem
 *
mem
);

92 (*
	tlibΩma_fio_Êush_t
)(
	tthªad_d©a
 *
	ttd
,

93 
	tio_u
 *
	tfú°_io_u
, io_u *
	tœ°_io_u
,

94 
	tÀn
);

102 (*
	tlibΩma_fio_gë_io_u_ödex_t
)(
	tibv_wc
 *
	twc
,

103 *
	tio_u_ödex
);

105 
	slibΩma_fio_˛õ¡_d©a
 {

106 
Ωma_≥î
 *
≥î
;

107 
Ωma_c⁄n
 *
c⁄n
;

108 
Ωma_cq
 *
cq
;

111 *
‹ig_buf„r_Æig√d
;

114 
Ωma_mr_loˇl
 *
‹ig_mr
;

116 
libΩma_fio_w‹k•a˚
 *
ws
;

119 
Ωma_mr_ªmŸe
 *
£rvî_mr
;

120 
Ωma_Êush_ty≥
 
£rvî_mr_Êush_ty≥
;

123 
size_t
 
ws_size
;

126 
io_u
 **
io_us_queued
;

127 
io_u_queued_ƒ
;

128 
io_u
 **
io_us_Êight
;

129 
io_u_Êight_ƒ
;

130 
io_u
 **
io_us_com∂ëed
;

131 
io_u_com∂ëed_ƒ
;

134 
uöt32_t
 
›_£nd_po°ed
;

135 
uöt32_t
 
›_£nd_com∂ëed
;

136 
uöt32_t
 
›_ªcv_com∂ëed
;

138 
libΩma_fio_Êush_t
 
Êush
;

139 
libΩma_fio_gë_io_u_ödex_t
 
gë_io_u_ödex
;

142 *
˛õ¡_d©a
;

145 
	`libΩma_fio_˛õ¡_öô
(
thªad_d©a
 *
td
,

146 
Ωma_c⁄n_cfg
 *
cfg
);

147 
	`libΩma_fio_˛õ¡_˛ónup
(
thªad_d©a
 *
td
);

149 
	`libΩma_fio_fûe_n›
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
);

150 
	`libΩma_fio_˛õ¡_gë_fûe_size
(
thªad_d©a
 *
td
,

151 
fio_fûe
 *
f
);

153 
	`libΩma_fio_˛õ¡_po°_öô
(
thªad_d©a
 *
td
);

155 
fio_q_°©us
 
	`libΩma_fio_˛õ¡_queue
(
thªad_d©a
 *
td
,

156 
io_u
 *io_u);

158 
	`libΩma_fio_˛õ¡_commô
(
thªad_d©a
 *
td
);

160 
	`libΩma_fio_˛õ¡_gëevíts
(
thªad_d©a
 *
td
, 
mö
,

161 
max
, c⁄° 
time•ec
 *
t
);

163 
io_u
 *
	`libΩma_fio_˛õ¡_evít
(
thªad_d©a
 *
td
, 
evít
);

165 *
	`libΩma_fio_˛õ¡_îrdëaûs
(
io_u
 *io_u);

167 
ölöe
 
	$libΩma_fio_˛õ¡_io_ªad
(
thªad_d©a
 *
td
,

168 
io_u
 *io_u, 
Êags
)

170 
libΩma_fio_˛õ¡_d©a
 *
ccd
 = 
td
->
io_›s_d©a
;

171 
size_t
 
d°_off£t
 = (*)(
io_u
->
x„r_buf
Ë- 
ccd
->
‹ig_buf„r_Æig√d
;

172 
size_t
 
§c_off£t
 = 
io_u
->
off£t
;

173 
ªt
;

175 i‡((
ªt
 = 
	`Ωma_ªad
(
ccd
->
c⁄n
, ccd->
‹ig_mr
, 
d°_off£t
,

176 
ccd
->
£rvî_mr
, 
§c_off£t
, 
io_u
->
x„r_buÊí
,

177 
Êags
, (*)(
uöçå_t
)
io_u
->
ödex
))) {

178 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_read");

183 
	}
}

185 
ölöe
 
	$libΩma_fio_˛õ¡_io_wrôe
(
thªad_d©a
 *
td
,

186 
io_u
 *io_u)

188 
libΩma_fio_˛õ¡_d©a
 *
ccd
 = 
td
->
io_›s_d©a
;

189 
size_t
 
§c_off£t
 = (*)(
io_u
->
x„r_buf
Ë- 
ccd
->
‹ig_buf„r_Æig√d
;

190 
size_t
 
d°_off£t
 = 
io_u
->
off£t
;

191 
ªt
;

193 i‡((
ªt
 = 
	`Ωma_wrôe
(
ccd
->
c⁄n
, ccd->
£rvî_mr
, 
d°_off£t
,

194 
ccd
->
‹ig_mr
, 
§c_off£t
, 
io_u
->
x„r_buÊí
,

195 
RPMA_F_COMPLETION_ON_ERROR
,

196 (*)(
uöçå_t
)
io_u
->
ödex
))) {

197 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_write");

202 
	}
}

204 
ölöe
 
	$libΩma_fio_˛õ¡_io_com∂ëe_Æl_£nds
(

205 
thªad_d©a
 *
td
)

207 
libΩma_fio_˛õ¡_d©a
 *
ccd
 = 
td
->
io_›s_d©a
;

208 
ibv_wc
 
wc
;

209 
ªt
;

211 
ccd
->
›_£nd_po°ed
 !ccd->
›_£nd_com∂ëed
) {

213 
ªt
 = 
	`Ωma_cq_gë_wc
(
ccd
->
cq
, 1, &
wc
, 
NULL
);

214 i‡(
ªt
 =
RPMA_E_NO_COMPLETION
) {

217 } i‡(
ªt
 != 0) {

219 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_cq_get_wc");

223 i‡(
wc
.
°©us
 !
IBV_WC_SUCCESS
)

226 i‡(
wc
.
›code
 =
IBV_WC_SEND
)

227 ++
ccd
->
›_£nd_com∂ëed
;

229 
	`log_îr
(

239 i‡(
ccd
->
›_£nd_po°ed
 =ccd->
›_£nd_com∂ëed
 &&

240 
ccd
->
›_£nd_com∂ëed
 =ccd->
›_ªcv_com∂ëed
) {

241 
ccd
->
›_£nd_po°ed
 = 0;

242 
ccd
->
›_£nd_com∂ëed
 = 0;

243 
ccd
->
›_ªcv_com∂ëed
 = 0;

247 
	}
}

251 (*
	tlibΩma_fio_¥ï¨e_c⁄√˘i⁄_t
)(

252 
	tthªad_d©a
 *
	ttd
,

253 
	tΩma_c⁄n_ªq
 *
	tc⁄n_ªq
);

255 
	slibΩma_fio_£rvî_d©a
 {

256 
Ωma_≥î
 *
≥î
;

259 
Ωma_c⁄n
 *
c⁄n
;

260 
Ωma_cq
 *
cq
;

262 *
ws_±r
;

263 
Ωma_mr_loˇl
 *
ws_mr
;

264 
libΩma_fio_mem
 
mem
;

267 *
£rvî_d©a
;

269 
libΩma_fio_¥ï¨e_c⁄√˘i⁄_t
 
¥ï¨e_c⁄√˘i⁄
;

272 
	`libΩma_fio_£rvî_öô
(
thªad_d©a
 *
td
);

274 
	`libΩma_fio_£rvî_˛ónup
(
thªad_d©a
 *
td
);

276 
	`libΩma_fio_£rvî_›í_fûe
(
thªad_d©a
 *
td
,

277 
fio_fûe
 *
f
, 
Ωma_c⁄n_cfg
 *
cfg
);

279 
	`libΩma_fio_£rvî_˛o£_fûe
(
thªad_d©a
 *
td
,

280 
fio_fûe
 *
f
);

	@engines/librpma_fio_pmem.h

16 
	~<libpmem.h
>

17 
	~"libΩma_fio.h
"

19 
	#RPMA_PMEM_USED
 "libpmem"

	)

21 
	$libΩma_fio_pmem_m≠_fûe
(
fio_fûe
 *
f
, 
size_t
 
size
,

22 
libΩma_fio_mem
 *
mem
, 
size_t
 
ws_off£t
)

24 
is_pmem
 = 0;

25 
size_t
 
size_mm≠
 = 0;

28 
mem
->
mem_±r
 = 
	`pmem_m≠_fûe
(
f
->
fûe_«me
, 0 , 0 ,

29 0 , &
size_mm≠
, &
is_pmem
);

30 i‡(
mem
->
mem_±r
 =
NULL
) {

32 
	`log_îr
("fio:Ömem_map_file(%s) failed: %s (errno %i)\n",

33 
f
->
fûe_«me
, 
	`°ªº‹
(
î∫o
),Érrno);

38 i‡(!
is_pmem
) {

39 
	`log_îr
("fio: %s isÇotÜocated inÖersistent memory\n",

40 
f
->
fûe_«me
);

41 
îr_unm≠
;

45 i‡(
size_mm≠
 < 
ws_off£t
 + 
size
) {

46 
	`log_îr
(

48 
f
->
fûe_«me
, 
size_mm≠
, 
ws_off£t
 + 
size
);

49 
îr_unm≠
;

52 
	`log_öfo
("fio: size of memory mapped fromÅhe file %s: %zu\n",

53 
f
->
fûe_«me
, 
size_mm≠
);

55 
mem
->
size_mm≠
 = size_mmap;

59 
îr_unm≠
:

60 (Ë
	`pmem_unm≠
(
mem
->
mem_±r
, 
size_mm≠
);

62 
	}
}

64 
ölöe
 
	$libΩma_fio_unm≠
(
libΩma_fio_mem
 *
mem
)

66 (Ë
	`pmem_unm≠
(
mem
->
mem_±r
, mem->
size_mm≠
);

67 
	}
}

	@engines/librpma_fio_pmem2.h

16 
	~<libpmem2.h
>

17 
	~"libΩma_fio.h
"

19 
	#RPMA_PMEM_USED
 "libpmem2"

	)

21 
	$libΩma_fio_pmem_m≠_fûe
(
fio_fûe
 *
f
, 
size_t
 
size
,

22 
libΩma_fio_mem
 *
mem
, 
size_t
 
ws_off£t
)

24 
fd
;

25 
pmem2_c⁄fig
 *
cfg
 = 
NULL
;

26 
pmem2_m≠
 *
m≠
 = 
NULL
;

27 
pmem2_sour˚
 *
§c
 = 
NULL
;

29 
size_t
 
size_mm≠
;

31 if((
fd
 = 
	`›í
(
f
->
fûe_«me
, 
O_RDWR
)) < 0) {

32 
	`log_îr
("fio: cannot open fio file\n");

36 i‡(
	`pmem2_sour˚_‰om_fd
(&
§c
, 
fd
) != 0) {

37 
	`log_îr
("fio:Ömem2_source_from_fd() failed\n");

38 
îr_˛o£
;

41 i‡(
	`pmem2_c⁄fig_√w
(&
cfg
) != 0) {

42 
	`log_îr
("fio:Ömem2_config_new() failed\n");

43 
îr_sour˚_dñëe
;

46 i‡(
	`pmem2_c⁄fig_£t_ªquúed_°‹e_gønuœrôy
(
cfg
,

47 
PMEM2_GRANULARITY_CACHE_LINE
) != 0) {

48 
	`log_îr
("fio:Ömem2_c⁄fig_£t_ªquúed_°‹e_gønuœrôy(ËÁûed: %s\n", 
	`pmem2_îr‹msg
());

49 
îr_c⁄fig_dñëe
;

52 i‡(
	`pmem2_m≠_√w
(&
m≠
, 
cfg
, 
§c
) != 0) {

53 
	`log_îr
("fio:Ömem2_m≠_√w(%sËÁûed: %s\n", 
f
->
fûe_«me
, 
	`pmem2_îr‹msg
());

54 
îr_c⁄fig_dñëe
;

57 
size_mm≠
 = 
	`pmem2_m≠_gë_size
(
m≠
);

60 i‡(
size_mm≠
 < 
ws_off£t
 + 
size
) {

61 
	`log_îr
(

63 
f
->
fûe_«me
, 
size_mm≠
, 
ws_off£t
 + 
size
);

64 
îr_m≠_dñëe
;

67 
mem
->
mem_±r
 = 
	`pmem2_m≠_gë_addªss
(
m≠
);

68 
mem
->
size_mm≠
 = size_mmap;

69 
mem
->
m≠
 = map;

70 
	`pmem2_c⁄fig_dñëe
(&
cfg
);

71 
	`pmem2_sour˚_dñëe
(&
§c
);

72 
	`˛o£
(
fd
);

76 
îr_m≠_dñëe
:

77 
	`pmem2_m≠_dñëe
(&
m≠
);

78 
îr_c⁄fig_dñëe
:

79 
	`pmem2_c⁄fig_dñëe
(&
cfg
);

80 
îr_sour˚_dñëe
:

81 
	`pmem2_sour˚_dñëe
(&
§c
);

82 
îr_˛o£
:

83 
	`˛o£
(
fd
);

86 
	}
}

88 
ölöe
 
	$libΩma_fio_unm≠
(
libΩma_fio_mem
 *
mem
)

90 (Ë
	`pmem2_m≠_dñëe
(&
mem
->
m≠
);

91 
	}
}

	@engines/librpma_gpspm.c

17 
	~"libΩma_fio.h
"

19 #ifde‡
CONFIG_LIBPMEM2_INSTALLED


20 
	~<libpmem2.h
>

22 
	~<libpmem.h
>

26 
	~"libΩma_gp•m_Êush.pb-c.h
"

28 
	#MAX_MSG_SIZE
 (512)

	)

29 
	#IO_U_BUF_LEN
 (2 * 
MAX_MSG_SIZE
)

	)

30 
	#SEND_OFFSET
 (0)

	)

31 
	#RECV_OFFSET
 (
SEND_OFFSET
 + 
MAX_MSG_SIZE
)

	)

33 
	#GPSPM_FLUSH_REQUEST__LAST
 \

34 { 
	`PROTOBUF_C_MESSAGE_INIT
(&
gp•m_Êush_ªque°__des¸ùt‹
), 0, 0, 0 }

	)

41 c⁄° 
GPSPMFlushReque°
 
	gFlush_ªq_œ°
 = 
GPSPM_FLUSH_REQUEST__LAST
;

43 
	#IS_NOT_THE_LAST_MESSAGE
(
Êush_ªq
) \

44 (
Êush_ªq
->
Àngth
 !
Flush_ªq_œ°
.length || \

45 
Êush_ªq
->
off£t
 !
Flush_ªq_œ°
.off£t)

	)

50 
	#IO_U_NEXT_BUF_OFF_CLIENT
(
cd
) \

51 (
IO_U_BUF_LEN
 * ((
cd
->
msg_cuº
++Ë% cd->
msg_num
))

	)

53 
	s˛õ¡_d©a
 {

55 *
	mio_us_msgs
;

58 
uöt32_t
 
	mmsg_num
;

59 
uöt32_t
 
	mmsg_cuº
;

60 
Ωma_mr_loˇl
 *
	mmsg_mr
;

63 
ölöe
 
˛õ¡_io_Êush
(
thªad_d©a
 *
td
,

64 
io_u
 *
fú°_io_u
, io_u *
œ°_io_u
,

65 
Àn
);

67 
˛õ¡_gë_io_u_ödex
(
ibv_wc
 *
wc
, *
io_u_ödex
);

69 
	$˛õ¡_öô
(
thªad_d©a
 *
td
)

71 
libΩma_fio_˛õ¡_d©a
 *
ccd
;

72 
˛õ¡_d©a
 *
cd
;

73 
uöt32_t
 
wrôe_num
;

74 
Ωma_c⁄n_cfg
 *
cfg
 = 
NULL
;

75 
ªt
;

82 i‡(
	`td_ªad
(
td
Ë|| 
	`td_åim
(td)) {

83 
	`td_vîr‹
(
td
, 
EINVAL
, "Not supported mode.");

88 
cd
 = 
	`ˇŒoc
(1, (*cd));

89 i‡(
cd
 =
NULL
) {

90 
	`td_vîr‹
(
td
, 
î∫o
, "calloc");

99 i‡(
	`td_øndom
(
td
)) {

100 
wrôe_num
 = 
td
->
o
.
iodïth
;

101 
cd
->
msg_num
 = 
td
->
o
.
iodïth
;

103 i‡(
td
->
o
.
sync_io
) {

104 
wrôe_num
 = 1;

105 
cd
->
msg_num
 = 1;

107 
wrôe_num
 = 
td
->
o
.
iodïth
;

113 
cd
->
msg_num
 = 
	`LIBRPMA_FIO_CEIL
(
td
->
o
.
iodïth
,

114 
td
->
o
.
iodïth_b©ch
);

119 i‡((
ªt
 = 
	`Ωma_c⁄n_cfg_√w
(&
cfg
))) {

120 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_conn_cfg_new");

121 
îr_‰ì_cd
;

133 i‡((
ªt
 = 
	`Ωma_c⁄n_cfg_£t_sq_size
(
cfg
, 
wrôe_num
 + 
cd
->
msg_num
))) {

134 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_conn_cfg_set_sq_size");

135 
îr_cfg_dñëe
;

137 i‡((
ªt
 = 
	`Ωma_c⁄n_cfg_£t_rq_size
(
cfg
, 
cd
->
msg_num
))) {

138 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_conn_cfg_set_rq_size");

139 
îr_cfg_dñëe
;

141 i‡((
ªt
 = 
	`Ωma_c⁄n_cfg_£t_cq_size
(
cfg
, 
wrôe_num
 + 
cd
->
msg_num
 * 2))) {

142 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_conn_cfg_set_cq_size");

143 
îr_cfg_dñëe
;

146 i‡(
	`libΩma_fio_˛õ¡_öô
(
td
, 
cfg
))

147 
îr_cfg_dñëe
;

149 
ccd
 = 
td
->
io_›s_d©a
;

151 i‡(
ccd
->
ws
->
dúe˘_wrôe_to_pmem
 &&

152 
ccd
->
£rvî_mr_Êush_ty≥
 =
RPMA_FLUSH_TYPE_PERSISTENT
 &&

153 
td
->
thªad_numbî
 == 1) {

155 
	`log_îr
(

161 i‡(
cd
->
msg_num
 > 
ccd
->
ws
->
max_msg_num
) {

162 
	`log_îr
(

164 
ccd
->
ws
->
max_msg_num
, 
cd
->
msg_num
);

165 
îr_˛ónup_comm⁄
;

168 i‡((
ªt
 = 
	`Ωma_c⁄n_cfg_dñëe
(&
cfg
))) {

169 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_conn_cfg_delete");

173 
ccd
->
Êush
 = 
˛õ¡_io_Êush
;

174 
ccd
->
gë_io_u_ödex
 = 
˛õ¡_gë_io_u_ödex
;

175 
ccd
->
˛õ¡_d©a
 = 
cd
;

179 
îr_˛ónup_comm⁄
:

180 
	`libΩma_fio_˛õ¡_˛ónup
(
td
);

182 
îr_cfg_dñëe
:

183 (Ë
	`Ωma_c⁄n_cfg_dñëe
(&
cfg
);

185 
îr_‰ì_cd
:

186 
	`‰ì
(
cd
);

189 
	}
}

191 
	$˛õ¡_po°_öô
(
thªad_d©a
 *
td
)

193 
libΩma_fio_˛õ¡_d©a
 *
ccd
 = 
td
->
io_›s_d©a
;

194 
˛õ¡_d©a
 *
cd
 = 
ccd
->client_data;

195 
io_us_msgs_size
;

196 
ªt
;

199 
io_us_msgs_size
 = 
cd
->
msg_num
 * 
IO_U_BUF_LEN
;

200 i‡((
ªt
 = 
	`posix_memÆign
((**)&
cd
->
io_us_msgs
, 
∑ge_size
,

201 
io_us_msgs_size
))) {

202 
	`td_vîr‹
(
td
, 
ªt
, "posix_memalign");

203  
ªt
;

205 i‡((
ªt
 = 
	`Ωma_mr_ªg
(
ccd
->
≥î
, 
cd
->
io_us_msgs
, 
io_us_msgs_size
,

206 
RPMA_MR_USAGE_SEND
 | 
RPMA_MR_USAGE_RECV
,

207 &
cd
->
msg_mr
))) {

208 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_mr_reg");

209  
ªt
;

212  
	`libΩma_fio_˛õ¡_po°_öô
(
td
);

213 
	}
}

215 
	$˛õ¡_˛ónup
(
thªad_d©a
 *
td
)

217 
libΩma_fio_˛õ¡_d©a
 *
ccd
 = 
td
->
io_›s_d©a
;

218 
˛õ¡_d©a
 *
cd
;

219 
size_t
 
Êush_ªq_size
;

220 
size_t
 
io_u_buf_off
;

221 
size_t
 
£nd_off£t
;

222 *
£nd_±r
;

223 
ªt
;

225 i‡(
ccd
 =
NULL
)

228 
cd
 = 
ccd
->
˛õ¡_d©a
;

229 i‡(
cd
 =
NULL
) {

230 
	`libΩma_fio_˛õ¡_˛ónup
(
td
);

241 (Ë
	`libΩma_fio_˛õ¡_io_com∂ëe_Æl_£nds
(
td
);

244 
Êush_ªq_size
 = 
	`gp•m_Êush_ªque°__gë_∑cked_size
(&
Flush_ªq_œ°
);

245 i‡(
Êush_ªq_size
 > 
MAX_MSG_SIZE
) {

246 
	`log_îr
(

248 
Êush_ªq_size
, 
MAX_MSG_SIZE
);

250 
io_u_buf_off
 = 
	`IO_U_NEXT_BUF_OFF_CLIENT
(
cd
);

251 
£nd_off£t
 = 
io_u_buf_off
 + 
SEND_OFFSET
;

252 
£nd_±r
 = 
cd
->
io_us_msgs
 + 
£nd_off£t
;

253 (Ë
	`gp•m_Êush_ªque°__∑ck
(&
Flush_ªq_œ°
, 
£nd_±r
);

256 i‡((
ªt
 = 
	`Ωma_£nd
(
ccd
->
c⁄n
, 
cd
->
msg_mr
, 
£nd_off£t
,

257 
Êush_ªq_size
, 
RPMA_F_COMPLETION_ALWAYS
,

258 
NULL
)))

259 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_send");

261 ++
ccd
->
›_£nd_po°ed
;

264 (Ë
	`libΩma_fio_˛õ¡_io_com∂ëe_Æl_£nds
(
td
);

268 i‡((
ªt
 = 
	`Ωma_mr_dîeg
(&
cd
->
msg_mr
)))

269 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_mr_dereg");

271 
	`‰ì
(
ccd
->
˛õ¡_d©a
);

273 
	`libΩma_fio_˛õ¡_˛ónup
(
td
);

274 
	}
}

276 
ölöe
 
	$˛õ¡_io_Êush
(
thªad_d©a
 *
td
,

277 
io_u
 *
fú°_io_u
, io_u *
œ°_io_u
,

278 
Àn
)

280 
libΩma_fio_˛õ¡_d©a
 *
ccd
 = 
td
->
io_›s_d©a
;

281 
˛õ¡_d©a
 *
cd
 = 
ccd
->client_data;

282 
size_t
 
io_u_buf_off
 = 
	`IO_U_NEXT_BUF_OFF_CLIENT
(
cd
);

283 
size_t
 
£nd_off£t
 = 
io_u_buf_off
 + 
SEND_OFFSET
;

284 
size_t
 
ªcv_off£t
 = 
io_u_buf_off
 + 
RECV_OFFSET
;

285 *
£nd_±r
 = 
cd
->
io_us_msgs
 + 
£nd_off£t
;

286 *
ªcv_±r
 = 
cd
->
io_us_msgs
 + 
ªcv_off£t
;

287 
GPSPMFlushReque°
 
Êush_ªq
 = 
GPSPM_FLUSH_REQUEST__INIT
;

288 
size_t
 
Êush_ªq_size
 = 0;

289 
ªt
;

292 i‡((
ªt
 = 
	`Ωma_ªcv
(
ccd
->
c⁄n
, 
cd
->
msg_mr
, 
ªcv_off£t
, 
MAX_MSG_SIZE
,

293 
ªcv_±r
))) {

294 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_recv");

299 
Êush_ªq
.
off£t
 = 
fú°_io_u
->offset;

300 
Êush_ªq
.
Àngth
 = 
Àn
;

301 
Êush_ªq
.
›_c⁄ãxt
 = 
œ°_io_u
->
ödex
;

302 
Êush_ªq_size
 = 
	`gp•m_Êush_ªque°__gë_∑cked_size
(&
Êush_ªq
);

303 i‡(
Êush_ªq_size
 > 
MAX_MSG_SIZE
) {

304 
	`log_îr
(

306 
PRIu64
 " > %d\n", 
Êush_ªq_size
, 
MAX_MSG_SIZE
);

309 (Ë
	`gp•m_Êush_ªque°__∑ck
(&
Êush_ªq
, 
£nd_±r
);

312 i‡((
ªt
 = 
	`Ωma_£nd
(
ccd
->
c⁄n
, 
cd
->
msg_mr
, 
£nd_off£t
, 
Êush_ªq_size
,

313 
RPMA_F_COMPLETION_ALWAYS
, 
NULL
))) {

314 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_send");

318 ++
ccd
->
›_£nd_po°ed
;

321 
	}
}

323 
	$˛õ¡_gë_io_u_ödex
(
ibv_wc
 *
wc
, *
io_u_ödex
)

325 
GPSPMFlushRe•⁄£
 *
Êush_ª•
;

327 i‡(
wc
->
›code
 !
IBV_WC_RECV
)

331 
Êush_ª•
 = 
	`gp•m_Êush_ª•⁄£__u≈ack
(
NULL
,

332 
wc
->
byã_Àn
, (*)wc->
wr_id
);

333 i‡(
Êush_ª•
 =
NULL
) {

334 
	`log_îr
("Cannot unpackÅhe flushÑesponse buffer\n");

338 
	`mem˝y
(
io_u_ödex
, &
Êush_ª•
->
›_c⁄ãxt
, (*io_u_index));

340 
	`gp•m_Êush_ª•⁄£__‰ì_u≈acked
(
Êush_ª•
, 
NULL
);

343 
	}
}

345 
FIO_STATIC
 
i€ngöe_›s
 
	gi€ngöe_˛õ¡
 = {

346 .
«me
 = "librpma_gpspm_client",

347 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

348 .
	göô
 = 
˛õ¡_öô
,

349 .
	gpo°_öô
 = 
˛õ¡_po°_öô
,

350 .
	ggë_fûe_size
 = 
libΩma_fio_˛õ¡_gë_fûe_size
,

351 .
	g›í_fûe
 = 
libΩma_fio_fûe_n›
,

352 .
	gqueue
 = 
libΩma_fio_˛õ¡_queue
,

353 .
	gcommô
 = 
libΩma_fio_˛õ¡_commô
,

354 .
	ggëevíts
 = 
libΩma_fio_˛õ¡_gëevíts
,

355 .
	gevít
 = 
libΩma_fio_˛õ¡_evít
,

356 .
	gîrdëaûs
 = 
libΩma_fio_˛õ¡_îrdëaûs
,

357 .
	g˛o£_fûe
 = 
libΩma_fio_fûe_n›
,

358 .
	g˛ónup
 = 
˛õ¡_˛ónup
,

359 .
	gÊags
 = 
FIO_DISKLESSIO
 | 
FIO_ASYNCIO_SETS_ISSUE_TIME
,

360 .
	g›ti⁄s
 = 
libΩma_fio_›ti⁄s
,

361 .
	g›ti⁄_°ru˘_size
 = (
libΩma_fio_›ti⁄s_vÆues
),

366 
	#IO_U_BUFF_OFF_SERVER
(
i
Ë(ò* 
IO_U_BUF_LEN
)

	)

368 (*
	tlibΩma_fio_≥rsi°_‚
)(c⁄° *
	t±r
, 
	tsize_t
 
	tsize
);

370 
	s£rvî_d©a
 {

372 *
‹ig_buf„r_Æig√d
;

375 
Ωma_mr_loˇl
 *
msg_mr
;

377 
uöt32_t
 
msg_sqe_avaûabÀ
;

380 
ibv_wc
 *
msgs_queued
;

381 
uöt32_t
 
msg_queued_ƒ
;

383 
libΩma_fio_≥rsi°_‚
 
≥rsi°
;

386 
	$£rvî_öô
(
thªad_d©a
 *
td
)

388 
libΩma_fio_£rvî_d©a
 *
csd
;

389 
£rvî_d©a
 *
sd
;

390 
ªt
 = -1;

392 i‡((
ªt
 = 
	`libΩma_fio_£rvî_öô
(
td
)))

393  
ªt
;

395 
csd
 = 
td
->
io_›s_d©a
;

398 
sd
 = 
	`ˇŒoc
(1, (*sd));

399 i‡(
sd
 =
NULL
) {

400 
	`td_vîr‹
(
td
, 
î∫o
, "calloc");

401 
îr_£rvî_˛ónup
;

405 
sd
->
msgs_queued
 = 
	`ˇŒoc
(
td
->
o
.
iodïth
, (*sd->msgs_queued));

406 i‡(
sd
->
msgs_queued
 =
NULL
) {

407 
	`td_vîr‹
(
td
, 
î∫o
, "calloc");

408 
îr_‰ì_sd
;

411 #ifde‡
CONFIG_LIBPMEM2_INSTALLED


413 
sd
->
≥rsi°
 = 
	`pmem2_gë_≥rsi°_‚
(
csd
->
mem
.
m≠
);

415 
sd
->
≥rsi°
 = 
pmem_≥rsi°
;

423 
td
->
o
.
max_bs
[
DDIR_READ
] = 
IO_U_BUF_LEN
;

424 
td
->
o
.
mem_Æign
 = 
∑ge_size
;

426 
csd
->
£rvî_d©a
 = 
sd
;

430 
îr_‰ì_sd
:

431 
	`‰ì
(
sd
);

433 
îr_£rvî_˛ónup
:

434 
	`libΩma_fio_£rvî_˛ónup
(
td
);

437 
	}
}

439 
	$£rvî_po°_öô
(
thªad_d©a
 *
td
)

441 
libΩma_fio_£rvî_d©a
 *
csd
 = 
td
->
io_›s_d©a
;

442 
£rvî_d©a
 *
sd
 = 
csd
->server_data;

443 
size_t
 
io_us_size
;

444 
size_t
 
io_u_buÊí
;

445 
ªt
;

451 
sd
->
‹ig_buf„r_Æig√d
 = 
	`PTR_ALIGN
(
td
->
‹ig_buf„r
, 
∑ge_mask
) +

452 
td
->
o
.
mem_Æign
;

460 
io_u_buÊí
 = 
	`td_max_bs
(
td
);

463 i‡(
io_u_buÊí
 < 
IO_U_BUF_LEN
) {

464 
	`log_îr
(

465 "blocksizêtoÿsmÆ»tÿaccommod©êassumed maximÆÑeque°/ª•⁄£Öaú sizê(%" 
PRIu64
 " < %d)\n",

466 
io_u_buÊí
, 
IO_U_BUF_LEN
);

474 
io_us_size
 = ()
io_u_buÊí
 *

475 ()
td
->
o
.
iodïth
;

477 i‡((
ªt
 = 
	`Ωma_mr_ªg
(
csd
->
≥î
, 
sd
->
‹ig_buf„r_Æig√d
, 
io_us_size
,

478 
RPMA_MR_USAGE_SEND
 | 
RPMA_MR_USAGE_RECV
,

479 &
sd
->
msg_mr
))) {

480 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_mr_reg");

485 
	}
}

487 
	$£rvî_˛ónup
(
thªad_d©a
 *
td
)

489 
libΩma_fio_£rvî_d©a
 *
csd
 = 
td
->
io_›s_d©a
;

490 
£rvî_d©a
 *
sd
;

491 
ªt
;

493 i‡(
csd
 =
NULL
)

496 
sd
 = 
csd
->
£rvî_d©a
;

498 i‡(
sd
 !
NULL
) {

500 i‡((
ªt
 = 
	`Ωma_mr_dîeg
(&
sd
->
msg_mr
)))

501 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_mr_dereg");

503 
	`‰ì
(
sd
->
msgs_queued
);

504 
	`‰ì
(
sd
);

507 
	`libΩma_fio_£rvî_˛ónup
(
td
);

508 
	}
}

510 
	$¥ï¨e_c⁄√˘i⁄
(
thªad_d©a
 *
td
,

511 
Ωma_c⁄n_ªq
 *
c⁄n_ªq
)

513 
libΩma_fio_£rvî_d©a
 *
csd
 = 
td
->
io_›s_d©a
;

514 
£rvî_d©a
 *
sd
 = 
csd
->server_data;

515 
ªt
;

516 
i
;

519 
sd
->
msg_sqe_avaûabÀ
 = 
td
->
o
.
iodïth
;

520 
i
 = 0; i < 
td
->
o
.
iodïth
; i++) {

521 
size_t
 
off£t_ªcv_msg
 = 
	`IO_U_BUFF_OFF_SERVER
(
i
Ë+ 
RECV_OFFSET
;

522 i‡((
ªt
 = 
	`Ωma_c⁄n_ªq_ªcv
(
c⁄n_ªq
, 
sd
->
msg_mr
,

523 
off£t_ªcv_msg
, 
MAX_MSG_SIZE
,

524 (c⁄° *)(
uöçå_t
)
i
))) {

525 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_conn_req_recv");

526  
ªt
;

531 
	}
}

533 
	$£rvî_›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

535 
libΩma_fio_£rvî_d©a
 *
csd
 = 
td
->
io_›s_d©a
;

536 
Ωma_c⁄n_cfg
 *
cfg
 = 
NULL
;

537 
uöt16_t
 
max_msg_num
 = 
td
->
o
.
iodïth
;

538 
ªt
;

540 
csd
->
¥ï¨e_c⁄√˘i⁄
 =Örepare_connection;

543 i‡((
ªt
 = 
	`Ωma_c⁄n_cfg_√w
(&
cfg
))) {

544 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_conn_cfg_new");

557 i‡((
ªt
 = 
	`Ωma_c⁄n_cfg_£t_sq_size
(
cfg
, 
max_msg_num
))) {

558 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_conn_cfg_set_sq_size");

559 
îr_cfg_dñëe
;

561 i‡((
ªt
 = 
	`Ωma_c⁄n_cfg_£t_rq_size
(
cfg
, 
max_msg_num
))) {

562 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_conn_cfg_set_rq_size");

563 
îr_cfg_dñëe
;

565 i‡((
ªt
 = 
	`Ωma_c⁄n_cfg_£t_cq_size
(
cfg
, 
max_msg_num
 * 2))) {

566 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_conn_cfg_set_cq_size");

567 
îr_cfg_dñëe
;

570 
ªt
 = 
	`libΩma_fio_£rvî_›í_fûe
(
td
, 
f
, 
cfg
);

572 
îr_cfg_dñëe
:

573 (Ë
	`Ωma_c⁄n_cfg_dñëe
(&
cfg
);

575  
ªt
;

576 
	}
}

578 
	$£rvî_qe_¥o˚ss
(
thªad_d©a
 *
td
, 
ibv_wc
 *
wc
)

580 
libΩma_fio_£rvî_d©a
 *
csd
 = 
td
->
io_›s_d©a
;

581 
£rvî_d©a
 *
sd
 = 
csd
->server_data;

582 
GPSPMFlushReque°
 *
Êush_ªq
;

583 
GPSPMFlushRe•⁄£
 
Êush_ª•
 = 
GPSPM_FLUSH_RESPONSE__INIT
;

584 
size_t
 
Êush_ª•_size
 = 0;

585 
size_t
 
£nd_buff_off£t
;

586 
size_t
 
ªcv_buff_off£t
;

587 
size_t
 
io_u_buff_off£t
;

588 *
£nd_buff_±r
;

589 *
ªcv_buff_±r
;

590 *
›_±r
;

591 
msg_ödex
;

592 
ªt
;

595 
msg_ödex
 = ()(
uöçå_t
)
wc
->
wr_id
;

596 
io_u_buff_off£t
 = 
	`IO_U_BUFF_OFF_SERVER
(
msg_ödex
);

597 
£nd_buff_off£t
 = 
io_u_buff_off£t
 + 
SEND_OFFSET
;

598 
ªcv_buff_off£t
 = 
io_u_buff_off£t
 + 
RECV_OFFSET
;

599 
£nd_buff_±r
 = 
sd
->
‹ig_buf„r_Æig√d
 + 
£nd_buff_off£t
;

600 
ªcv_buff_±r
 = 
sd
->
‹ig_buf„r_Æig√d
 + 
ªcv_buff_off£t
;

603 
Êush_ªq
 = 
	`gp•m_Êush_ªque°__u≈ack
(
NULL
, 
wc
->
byã_Àn
,

604 
ªcv_buff_±r
);

605 i‡(
Êush_ªq
 =
NULL
) {

606 
	`log_îr
("cannot unpackÅhe flushÑequest buffer\n");

607 
îr_ãrmö©e
;

610 i‡(
	`IS_NOT_THE_LAST_MESSAGE
(
Êush_ªq
)) {

611 
›_±r
 = 
csd
->
ws_±r
 + 
Êush_ªq
->
off£t
;

612 
sd
->
	`≥rsi°
(
›_±r
, 
Êush_ªq
->
Àngth
);

617 
	`gp•m_Êush_ªque°__‰ì_u≈acked
(
Êush_ªq
, 
NULL
);

618 
td
->
d⁄e
 = 
åue
;

623 i‡((
ªt
 = 
	`Ωma_ªcv
(
csd
->
c⁄n
, 
sd
->
msg_mr
, 
ªcv_buff_off£t
,

624 
MAX_MSG_SIZE
,

625 (c⁄° *)(
uöçå_t
)
msg_ödex
))) {

626 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_recv");

627 
îr_‰ì_u≈acked
;

631 
Êush_ª•
.
›_c⁄ãxt
 = 
Êush_ªq
->op_context;

632 
Êush_ª•_size
 = 
	`gp•m_Êush_ª•⁄£__gë_∑cked_size
(&
Êush_ª•
);

633 i‡(
Êush_ª•_size
 > 
MAX_MSG_SIZE
) {

634 
	`log_îr
(

636 
PRIu64
 " > %i\n", 
Êush_ª•_size
, 
MAX_MSG_SIZE
);

637 
îr_‰ì_u≈acked
;

640 (Ë
	`gp•m_Êush_ª•⁄£__∑ck
(&
Êush_ª•
, 
£nd_buff_±r
);

643 i‡((
ªt
 = 
	`Ωma_£nd
(
csd
->
c⁄n
, 
sd
->
msg_mr
, 
£nd_buff_off£t
,

644 
Êush_ª•_size
, 
RPMA_F_COMPLETION_ALWAYS
, 
NULL
))) {

645 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_send");

646 
îr_‰ì_u≈acked
;

648 --
sd
->
msg_sqe_avaûabÀ
;

650 
	`gp•m_Êush_ªque°__‰ì_u≈acked
(
Êush_ªq
, 
NULL
);

654 
îr_‰ì_u≈acked
:

655 
	`gp•m_Êush_ªque°__‰ì_u≈acked
(
Êush_ªq
, 
NULL
);

657 
îr_ãrmö©e
:

658 
td
->
ãrmö©e
 = 
åue
;

661 
	}
}

663 
ölöe
 
	$£rvî_queue_¥o˚ss
(
thªad_d©a
 *
td
)

665 
libΩma_fio_£rvî_d©a
 *
csd
 = 
td
->
io_›s_d©a
;

666 
£rvî_d©a
 *
sd
 = 
csd
->server_data;

667 
ªt
;

668 
i
;

671 
uöt32_t
 
qes_to_¥o˚ss
 = 
	`mö
(
sd
->
msg_queued_ƒ
, sd->
msg_sqe_avaûabÀ
);

672 i‡(
qes_to_¥o˚ss
 == 0)

676 
i
 = 0; i < 
qes_to_¥o˚ss
; ++i) {

677 i‡((
ªt
 = 
	`£rvî_qe_¥o˚ss
(
td
, &
sd
->
msgs_queued
[
i
])))

678  
ªt
;

682 
i
 = 0; i < 
sd
->
msg_queued_ƒ
 - 
qes_to_¥o˚ss
; ++i) {

683 
	`mem˝y
(&
sd
->
msgs_queued
[
i
],

684 &
sd
->
msgs_queued
[
qes_to_¥o˚ss
 + 
i
],

685 (
sd
->
msgs_queued
[
i
]));

688 
sd
->
msg_queued_ƒ
 -
qes_to_¥o˚ss
;

691 
	}
}

693 
	$£rvî_cm∂_¥o˚ss
(
thªad_d©a
 *
td
)

695 
libΩma_fio_£rvî_d©a
 *
csd
 = 
td
->
io_›s_d©a
;

696 
£rvî_d©a
 *
sd
 = 
csd
->server_data;

697 
ibv_wc
 *
wc
 = &
sd
->
msgs_queued
[sd->
msg_queued_ƒ
];

698 
libΩma_fio_›ti⁄s_vÆues
 *
o
 = 
td
->
eo
;

699 
ªt
;

701 
ªt
 = 
	`Ωma_cq_gë_wc
(
csd
->
cq
, 1, 
wc
, 
NULL
);

702 i‡(
ªt
 =
RPMA_E_NO_COMPLETION
) {

703 i‡(
o
->
busy_waô_pﬁlög
)

706 
ªt
 = 
	`Ωma_cq_waô
(
csd
->
cq
);

707 i‡(
ªt
 =
RPMA_E_NO_COMPLETION
)

709 i‡(
ªt
) {

710 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_cq_wait");

711 
îr_ãrmö©e
;

714 
ªt
 = 
	`Ωma_cq_gë_wc
(
csd
->
cq
, 1, 
wc
, 
NULL
);

715 i‡(
ªt
 =
RPMA_E_NO_COMPLETION
)

717 i‡(
ªt
) {

718 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_cq_get_wc");

719 
îr_ãrmö©e
;

721 } i‡(
ªt
) {

722 
	`libΩma_td_vîr‹
(
td
, 
ªt
, "rpma_cq_get_wc");

723 
îr_ãrmö©e
;

727 i‡(
wc
->
°©us
 !
IBV_WC_SUCCESS
)

728 
îr_ãrmö©e
;

730 i‡(
wc
->
›code
 =
IBV_WC_RECV
)

731 ++
sd
->
msg_queued_ƒ
;

732 i‡(
wc
->
›code
 =
IBV_WC_SEND
)

733 ++
sd
->
msg_sqe_avaûabÀ
;

737 
îr_ãrmö©e
:

738 
td
->
ãrmö©e
 = 
åue
;

741 
	}
}

743 
fio_q_°©us
 
	$£rvî_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

746 i‡(
	`£rvî_cm∂_¥o˚ss
(
td
))

747  
FIO_Q_BUSY
;

749 i‡(
	`£rvî_queue_¥o˚ss
(
td
))

750  
FIO_Q_BUSY
;

752 } !
td
->
d⁄e
);

754  
FIO_Q_COMPLETED
;

755 
	}
}

757 
FIO_STATIC
 
i€ngöe_›s
 
	gi€ngöe_£rvî
 = {

758 .
«me
 = "librpma_gpspm_server",

759 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

760 .
	göô
 = 
£rvî_öô
,

761 .
	gpo°_öô
 = 
£rvî_po°_öô
,

762 .
	g›í_fûe
 = 
£rvî_›í_fûe
,

763 .
	g˛o£_fûe
 = 
libΩma_fio_£rvî_˛o£_fûe
,

764 .
	gqueue
 = 
£rvî_queue
,

765 .
	gövÆid©e
 = 
libΩma_fio_fûe_n›
,

766 .
	g˛ónup
 = 
£rvî_˛ónup
,

767 .
	gÊags
 = 
FIO_SYNCIO
,

768 .
	g›ti⁄s
 = 
libΩma_fio_›ti⁄s
,

769 .
	g›ti⁄_°ru˘_size
 = (
libΩma_fio_›ti⁄s_vÆues
),

774 
fio_öô
 
	$fio_libΩma_gp•m_ªgi°î
()

776 
	`ªgi°î_i€ngöe
(&
i€ngöe_˛õ¡
);

777 
	`ªgi°î_i€ngöe
(&
i€ngöe_£rvî
);

778 
	}
}

780 
fio_exô
 
	$fio_libΩma_gp•m_uƒegi°î
()

782 
	`uƒegi°î_i€ngöe
(&
i€ngöe_˛õ¡
);

783 
	`uƒegi°î_i€ngöe
(&
i€ngöe_£rvî
);

784 
	}
}

	@engines/librpma_gpspm_flush.pb-c.c

18 #i‚de‡
PROTOBUF_C__NO_DEPRECATED


19 
	#PROTOBUF_C__NO_DEPRECATED


	)

22 
	~"libΩma_gp•m_Êush.pb-c.h
"

23 
	ggp•m_Êush_ªque°__öô


24 (
GPSPMFlushReque°
 *
	gmesßge
)

26 c⁄° 
GPSPMFlushReque°
 
	göô_vÆue
 = 
GPSPM_FLUSH_REQUEST__INIT
;

27 *
	gmesßge
 = 
öô_vÆue
;

29 
size_t
 
	ggp•m_Êush_ªque°__gë_∑cked_size


30 (c⁄° 
GPSPMFlushReque°
 *
	gmesßge
)

32 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
gp•m_Êush_ªque°__des¸ùt‹
);

33  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

35 
size_t
 
	ggp•m_Êush_ªque°__∑ck


36 (c⁄° 
GPSPMFlushReque°
 *
	gmesßge
,

37 
uöt8_t
 *
	gout
)

39 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
gp•m_Êush_ªque°__des¸ùt‹
);

40  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

42 
size_t
 
	ggp•m_Êush_ªque°__∑ck_to_buf„r


43 (c⁄° 
GPSPMFlushReque°
 *
	gmesßge
,

44 
PrŸobufCBuf„r
 *
	gbuf„r
)

46 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
gp•m_Êush_ªque°__des¸ùt‹
);

47  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

49 
GPSPMFlushReque°
 *

50 
	ggp•m_Êush_ªque°__u≈ack


51 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

52 
size_t
 
	gÀn
,

53 c⁄° 
uöt8_t
 *
	gd©a
)

55  (
	gGPSPMFlushReque°
 *)

56 
¥Ÿobuf_c_mesßge_u≈ack
 (&
gp•m_Êush_ªque°__des¸ùt‹
,

57 
Æloˇt‹
, 
Àn
, 
d©a
);

59 
	ggp•m_Êush_ªque°__‰ì_u≈acked


60 (
GPSPMFlushReque°
 *
	gmesßge
,

61 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

63 if(!
	gmesßge
)

65 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
gp•m_Êush_ªque°__des¸ùt‹
);

66 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

68 
	ggp•m_Êush_ª•⁄£__öô


69 (
GPSPMFlushRe•⁄£
 *
	gmesßge
)

71 c⁄° 
GPSPMFlushRe•⁄£
 
	göô_vÆue
 = 
GPSPM_FLUSH_RESPONSE__INIT
;

72 *
	gmesßge
 = 
öô_vÆue
;

74 
size_t
 
	ggp•m_Êush_ª•⁄£__gë_∑cked_size


75 (c⁄° 
GPSPMFlushRe•⁄£
 *
	gmesßge
)

77 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
gp•m_Êush_ª•⁄£__des¸ùt‹
);

78  
¥Ÿobuf_c_mesßge_gë_∑cked_size
 ((c⁄° 
PrŸobufCMesßge
*)(
mesßge
));

80 
size_t
 
	ggp•m_Êush_ª•⁄£__∑ck


81 (c⁄° 
GPSPMFlushRe•⁄£
 *
	gmesßge
,

82 
uöt8_t
 *
	gout
)

84 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
gp•m_Êush_ª•⁄£__des¸ùt‹
);

85  
¥Ÿobuf_c_mesßge_∑ck
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
out
);

87 
size_t
 
	ggp•m_Êush_ª•⁄£__∑ck_to_buf„r


88 (c⁄° 
GPSPMFlushRe•⁄£
 *
	gmesßge
,

89 
PrŸobufCBuf„r
 *
	gbuf„r
)

91 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
gp•m_Êush_ª•⁄£__des¸ùt‹
);

92  
¥Ÿobuf_c_mesßge_∑ck_to_buf„r
 ((c⁄° 
PrŸobufCMesßge
*)
mesßge
, 
buf„r
);

94 
GPSPMFlushRe•⁄£
 *

95 
	ggp•m_Êush_ª•⁄£__u≈ack


96 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

97 
size_t
 
	gÀn
,

98 c⁄° 
uöt8_t
 *
	gd©a
)

100  (
	gGPSPMFlushRe•⁄£
 *)

101 
¥Ÿobuf_c_mesßge_u≈ack
 (&
gp•m_Êush_ª•⁄£__des¸ùt‹
,

102 
Æloˇt‹
, 
Àn
, 
d©a
);

104 
	ggp•m_Êush_ª•⁄£__‰ì_u≈acked


105 (
GPSPMFlushRe•⁄£
 *
	gmesßge
,

106 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
)

108 if(!
	gmesßge
)

110 
as£π
(
mesßge
->
ba£
.
des¸ùt‹
 =&
gp•m_Êush_ª•⁄£__des¸ùt‹
);

111 
¥Ÿobuf_c_mesßge_‰ì_u≈acked
 ((
PrŸobufCMesßge
*)
mesßge
, 
Æloˇt‹
);

113 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	ggp•m_Êush_ªque°__fõld_des¸ùt‹s
[3] =

118 
PROTOBUF_C_LABEL_REQUIRED
,

119 
PROTOBUF_C_TYPE_FIXED64
,

121 
off£tof
(
GPSPMFlushReque°
, 
off£t
),

122 
NULL
,

123 
NULL
,

125 0,
NULL
,NULL

130 
PROTOBUF_C_LABEL_REQUIRED
,

131 
PROTOBUF_C_TYPE_FIXED64
,

133 
off£tof
(
GPSPMFlushReque°
, 
Àngth
),

134 
NULL
,

135 
NULL
,

137 0,
NULL
,NULL

142 
PROTOBUF_C_LABEL_REQUIRED
,

143 
PROTOBUF_C_TYPE_FIXED64
,

145 
off£tof
(
GPSPMFlushReque°
, 
›_c⁄ãxt
),

146 
NULL
,

147 
NULL
,

149 0,
NULL
,NULL

152 c⁄° 
	ggp•m_Êush_ªque°__fõld_ödi˚s_by_«me
[] = {

157 c⁄° 
PrŸobufCI¡R™ge
 
	ggp•m_Êush_ªque°__numbî_ønges
[1 + 1] =

162 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	ggp•m_Êush_ªque°__des¸ùt‹
 =

164 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

169 (
GPSPMFlushReque°
),

171 
gp•m_Êush_ªque°__fõld_des¸ùt‹s
,

172 
gp•m_Êush_ªque°__fõld_ödi˚s_by_«me
,

173 1, 
gp•m_Êush_ªque°__numbî_ønges
,

174 (
PrŸobufCMesßgeInô
Ë
gp•m_Êush_ªque°__öô
,

175 
NULL
,NULL,NULL

177 c⁄° 
PrŸobufCFõldDes¸ùt‹
 
	ggp•m_Êush_ª•⁄£__fõld_des¸ùt‹s
[1] =

182 
PROTOBUF_C_LABEL_REQUIRED
,

183 
PROTOBUF_C_TYPE_FIXED64
,

185 
off£tof
(
GPSPMFlushRe•⁄£
, 
›_c⁄ãxt
),

186 
NULL
,

187 
NULL
,

189 0,
NULL
,NULL

192 c⁄° 
	ggp•m_Êush_ª•⁄£__fõld_ödi˚s_by_«me
[] = {

195 c⁄° 
PrŸobufCI¡R™ge
 
	ggp•m_Êush_ª•⁄£__numbî_ønges
[1 + 1] =

200 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
	ggp•m_Êush_ª•⁄£__des¸ùt‹
 =

202 
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC
,

207 (
GPSPMFlushRe•⁄£
),

209 
gp•m_Êush_ª•⁄£__fõld_des¸ùt‹s
,

210 
gp•m_Êush_ª•⁄£__fõld_ödi˚s_by_«me
,

211 1, 
gp•m_Êush_ª•⁄£__numbî_ønges
,

212 (
PrŸobufCMesßgeInô
Ë
gp•m_Êush_ª•⁄£__öô
,

213 
NULL
,NULL,NULL

	@engines/librpma_gpspm_flush.pb-c.h

17 #i‚de‡
PROTOBUF_C_GPSPM_5fÊush_2ïrŸo__INCLUDED


18 
	#PROTOBUF_C_GPSPM_5fÊush_2ïrŸo__INCLUDED


	)

20 
	~<¥Ÿobuf-c/¥Ÿobuf-c.h
>

22 
	gPROTOBUF_C__BEGIN_DECLS


24 #i‡
PROTOBUF_C_VERSION_NUMBER
 < 1000000

25 #îr‹ 
This
 
fûe
 
was
 
gíî©ed
 
by
 
a
 
√wî
 
vîsi⁄
 
of
 
¥Ÿoc
-
c
 
which
 
is
 
öcom∑tibÀ
 
wôh
 
your
 
lib¥Ÿobuf
-¯
hódîs
. 
PÀa£
 
upd©e
 your headers.

26 #ñi‡1003003 < 
PROTOBUF_C_MIN_COMPILER_VERSION


27 #îr‹ 
This
 
fûe
 
was
 
gíî©ed
 
by
 
™
 
ﬁdî
 
vîsi⁄
 
of
 
¥Ÿoc
-
c
 
which
 
is
 
öcom∑tibÀ
 
wôh
 
your
 
lib¥Ÿobuf
-¯
hódîs
. 
PÀa£
 
ªgíî©e
 
this
 fûêwôh 
a
 
√wî
 version ofÖrotoc-c.

31 
_GPSPMFlushReque°
 
	tGPSPMFlushReque°
;

32 
_GPSPMFlushRe•⁄£
 
	tGPSPMFlushRe•⁄£
;

40 
	s_GPSPMFlushReque°


42 
PrŸobufCMesßge
 
	mba£
;

43 
uöt64_t
 
	moff£t
;

44 
uöt64_t
 
	mÀngth
;

45 
uöt64_t
 
	m›_c⁄ãxt
;

47 
	#GPSPM_FLUSH_REQUEST__INIT
 \

48 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
gp•m_Êush_ªque°__des¸ùt‹
) \

49 , 0, 0, 0 }

	)

52 
	s_GPSPMFlushRe•⁄£


54 
PrŸobufCMesßge
 
	mba£
;

55 
uöt64_t
 
	m›_c⁄ãxt
;

57 
	#GPSPM_FLUSH_RESPONSE__INIT
 \

58 { 
	`PROTOBUF_C_MESSAGE_INIT
 (&
gp•m_Êush_ª•⁄£__des¸ùt‹
) \

59 , 0 }

	)

63 
	ggp•m_Êush_ªque°__öô


64 (
GPSPMFlushReque°
 *
	gmesßge
);

65 
size_t
 
	ggp•m_Êush_ªque°__gë_∑cked_size


66 (c⁄° 
GPSPMFlushReque°
 *
	gmesßge
);

67 
size_t
 
	ggp•m_Êush_ªque°__∑ck


68 (c⁄° 
GPSPMFlushReque°
 *
	gmesßge
,

69 
uöt8_t
 *
	gout
);

70 
size_t
 
	ggp•m_Êush_ªque°__∑ck_to_buf„r


71 (c⁄° 
GPSPMFlushReque°
 *
	gmesßge
,

72 
PrŸobufCBuf„r
 *
	gbuf„r
);

73 
GPSPMFlushReque°
 *

74 
	ggp•m_Êush_ªque°__u≈ack


75 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

76 
size_t
 
	gÀn
,

77 c⁄° 
uöt8_t
 *
	gd©a
);

78 
	ggp•m_Êush_ªque°__‰ì_u≈acked


79 (
GPSPMFlushReque°
 *
	gmesßge
,

80 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

82 
	ggp•m_Êush_ª•⁄£__öô


83 (
GPSPMFlushRe•⁄£
 *
	gmesßge
);

84 
size_t
 
	ggp•m_Êush_ª•⁄£__gë_∑cked_size


85 (c⁄° 
GPSPMFlushRe•⁄£
 *
	gmesßge
);

86 
size_t
 
	ggp•m_Êush_ª•⁄£__∑ck


87 (c⁄° 
GPSPMFlushRe•⁄£
 *
	gmesßge
,

88 
uöt8_t
 *
	gout
);

89 
size_t
 
	ggp•m_Êush_ª•⁄£__∑ck_to_buf„r


90 (c⁄° 
GPSPMFlushRe•⁄£
 *
	gmesßge
,

91 
PrŸobufCBuf„r
 *
	gbuf„r
);

92 
GPSPMFlushRe•⁄£
 *

93 
	ggp•m_Êush_ª•⁄£__u≈ack


94 (
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
,

95 
size_t
 
	gÀn
,

96 c⁄° 
uöt8_t
 *
	gd©a
);

97 
	ggp•m_Êush_ª•⁄£__‰ì_u≈acked


98 (
GPSPMFlushRe•⁄£
 *
	gmesßge
,

99 
PrŸobufCAŒoˇt‹
 *
	gÆloˇt‹
);

102 (*
	tGPSPMFlushReque°_Closuª
)

103 (c⁄° 
	tGPSPMFlushReque°
 *
	tmesßge
,

104 *
	t˛osuª_d©a
);

105 (*
	tGPSPMFlushRe•⁄£_Closuª
)

106 (c⁄° 
	tGPSPMFlushRe•⁄£
 *
	tmesßge
,

107 *
	t˛osuª_d©a
);

114 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
gp•m_Êush_ªque°__des¸ùt‹
;

115 c⁄° 
PrŸobufCMesßgeDes¸ùt‹
 
gp•m_Êush_ª•⁄£__des¸ùt‹
;

117 
PROTOBUF_C__END_DECLS


	@engines/libzbc.c

9 
	~<°dlib.h
>

10 
	~<uni°d.h
>

11 
	~<î∫o.h
>

12 
	~<libzbc/zbc.h
>

14 
	~"fio.h
"

15 
	~"îr.h
"

16 
	~"zbd_ty≥s.h
"

17 
	~"zbd.h
"

19 
	slibzbc_d©a
 {

20 
zbc_devi˚
 *
	mzdev
;

21 
zbc_dev_modñ
 
	mmodñ
;

22 
uöt64_t
 
	mƒ_£˘‹s
;

23 
uöt32_t
 
	mmax_›í_£q_ªq
;

26 
	$libzbc_gë_dev_öfo
(
libzbc_d©a
 *
ld
, 
fio_fûe
 *
f
)

28 
zbc_devi˚_öfo
 *
zöfo
;

30 
zöfo
 = 
	`ˇŒoc
(1, (*zinfo));

31 i‡(!
zöfo
)

32  -
ENOMEM
;

34 
	`zbc_gë_devi˚_öfo
(
ld
->
zdev
, 
zöfo
);

35 
ld
->
modñ
 = 
zöfo
->
zbd_modñ
;

36 
ld
->
ƒ_£˘‹s
 = 
zöfo
->
zbd_£˘‹s
;

37 
ld
->
max_›í_£q_ªq
 = 
zöfo
->
zbd_max_ƒ_›í_£q_ªq
;

39 
	`d¥öt
(
FD_ZBD
, "%s: vendor_id:%s,Åype: %s, model: %s\n",

40 
f
->
fûe_«me
, 
zöfo
->
zbd_víd‹_id
,

41 
	`zbc_devi˚_ty≥_°r
(
zöfo
->
zbd_ty≥
),

42 
	`zbc_devi˚_modñ_°r
(
zöfo
->
zbd_modñ
));

44 
	`‰ì
(
zöfo
);

47 
	}
}

49 
	$libzbc_›í_dev
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

50 
libzbc_d©a
 **
p_ld
)

52 
libzbc_d©a
 *
ld
 = 
td
->
io_›s_d©a
;

53 
ªt
, 
Êags
 = 
OS_O_DIRECT
;

55 i‡(
ld
) {

57 
	`as£π
(
ld
->
zdev
);

58 
out
;

61 i‡(
f
->
fûëy≥
 !
FIO_TYPE_BLOCK
 && f->fûëy≥ !
FIO_TYPE_CHAR
) {

62 
	`td_vîr‹
(
td
, 
EINVAL
, "wrong fileÅype");

63 
	`log_îr
("ioengineÜibzbc only works on block or character devices\n");

64  -
EINVAL
;

67 i‡(
	`td_wrôe
(
td
Ë|| 
	`td_åim
(td)) {

68 i‡(!
ªad_⁄ly
)

69 
Êags
 |
O_RDWR
;

70 } i‡(
	`td_ªad
(
td
)) {

71 i‡(
f
->
fûëy≥
 =
FIO_TYPE_CHAR
 && !
ªad_⁄ly
)

72 
Êags
 |
O_RDWR
;

74 
Êags
 |
O_RDONLY
;

77 i‡(
td
->
o
.
ﬂtomic
) {

78 
	`td_vîr‹
(
td
, 
EINVAL
, "libzbc doesÇot support O_ATOMIC");

79 
	`log_îr
("%s:Üibzb¯d€†nŸ suµ‹àO_ATOMIC\n", 
f
->
fûe_«me
);

80  -
EINVAL
;

83 
ld
 = 
	`ˇŒoc
(1, (*ld));

84 i‡(!
ld
)

85  -
ENOMEM
;

87 
ªt
 = 
	`zbc_›í
(
f
->
fûe_«me
,

88 
Êags
 | 
ZBC_O_DRV_SCSI
 | 
ZBC_O_DRV_ATA
,

89 &
ld
->
zdev
);

90 i‡(
ªt
) {

91 
	`log_îr
("%s: zbc_open() failed,Érr=%d\n",

92 
f
->
fûe_«me
, 
ªt
);

93 
îr
;

96 
ªt
 = 
	`libzbc_gë_dev_öfo
(
ld
, 
f
);

97 i‡(
ªt
)

98 
îr_˛o£
;

100 
td
->
io_›s_d©a
 = 
ld
;

101 
out
:

102 i‡(
p_ld
)

103 *
p_ld
 = 
ld
;

107 
îr_˛o£
:

108 
	`zbc_˛o£
(
ld
->
zdev
);

109 
îr
:

110 
	`‰ì
(
ld
);

111  
ªt
;

112 
	}
}

114 
	$libzbc_˛o£_dev
(
thªad_d©a
 *
td
)

116 
libzbc_d©a
 *
ld
 = 
td
->
io_›s_d©a
;

117 
ªt
 = 0;

119 
td
->
io_›s_d©a
 = 
NULL
;

120 i‡(
ld
) {

121 i‡(
ld
->
zdev
)

122 
ªt
 = 
	`zbc_˛o£
(
ld
->
zdev
);

123 
	`‰ì
(
ld
);

126  
ªt
;

127 
	}
}

128 
	$libzbc_›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

130  
	`libzbc_›í_dev
(
td
, 
f
, 
NULL
);

131 
	}
}

133 
	$libzbc_˛o£_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

135 
ªt
;

137 
ªt
 = 
	`libzbc_˛o£_dev
(
td
);

138 i‡(
ªt
)

139 
	`log_îr
("%s: close device failedÉrr %d\n",

140 
f
->
fûe_«me
, 
ªt
);

142  
ªt
;

143 
	}
}

145 
	$libzbc_˛ónup
(
thªad_d©a
 *
td
)

147 
	`libzbc_˛o£_dev
(
td
);

148 
	}
}

150 
	$libzbc_övÆid©e
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

154 
	}
}

156 
	$libzbc_gë_fûe_size
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

158 
libzbc_d©a
 *
ld
;

159 
ªt
;

161 i‡(
	`fio_fûe_size_known
(
f
))

164 
ªt
 = 
	`libzbc_›í_dev
(
td
, 
f
, &
ld
);

165 i‡(
ªt
)

166  
ªt
;

168 
f
->
ªÆ_fûe_size
 = 
ld
->
ƒ_£˘‹s
 << 9;

169 
	`fio_fûe_£t_size_known
(
f
);

172 
	}
}

174 
	$libzbc_gë_z⁄ed_modñ
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

175 
zbd_z⁄ed_modñ
 *
modñ
)

177 
libzbc_d©a
 *
ld
;

178 
ªt
;

180 i‡(
f
->
fûëy≥
 !
FIO_TYPE_BLOCK
 && f->fûëy≥ !
FIO_TYPE_CHAR
)

181  -
EINVAL
;

183 
ªt
 = 
	`libzbc_›í_dev
(
td
, 
f
, &
ld
);

184 i‡(
ªt
)

185  
ªt
;

187 
ld
->
modñ
) {

188 
ZBC_DM_HOST_AWARE
:

189 *
modñ
 = 
ZBD_HOST_AWARE
;

191 
ZBC_DM_HOST_MANAGED
:

192 *
modñ
 = 
ZBD_HOST_MANAGED
;

195 *
modñ
 = 
ZBD_NONE
;

200 
	}
}

202 
	$libzbc_ªp‹t_z⁄es
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

203 
uöt64_t
 
off£t
, 
zbd_z⁄e
 *
zbdz
,

204 
ƒ_z⁄es
)

206 
libzbc_d©a
 *
ld
;

207 
uöt64_t
 
£˘‹
 = 
off£t
 >> 9;

208 
zbc_z⁄e
 *
z⁄es
;

209 
i
;

210 
ªt
;

212 
ªt
 = 
	`libzbc_›í_dev
(
td
, 
f
, &
ld
);

213 i‡(
ªt
)

214  
ªt
;

216 i‡(
£˘‹
 >
ld
->
ƒ_£˘‹s
)

219 
z⁄es
 = 
	`ˇŒoc
(
ƒ_z⁄es
, (
zbc_z⁄e
));

220 i‡(!
z⁄es
) {

221 
ªt
 = -
ENOMEM
;

222 
out
;

225 
ªt
 = 
	`zbc_ªp‹t_z⁄es
(
ld
->
zdev
, 
£˘‹
, 
ZBC_RO_ALL
, 
z⁄es
, &
ƒ_z⁄es
);

226 i‡(
ªt
 < 0) {

227 
	`log_îr
("%s: zbc_report_zones failed,Érr=%d\n",

228 
f
->
fûe_«me
, 
ªt
);

229 
out
;

232 
i
 = 0; i < 
ƒ_z⁄es
; i++, 
zbdz
++) {

233 
zbdz
->
°¨t
 = 
z⁄es
[
i
].
zbz_°¨t
 << 9;

234 
zbdz
->
Àn
 = 
z⁄es
[
i
].
zbz_Àngth
 << 9;

235 
zbdz
->
wp
 = 
z⁄es
[
i
].
zbz_wrôe_poöãr
 << 9;

240 
zbdz
->
ˇ∑côy
 = zbdz->
Àn
;

242 
z⁄es
[
i
].
zbz_ty≥
) {

243 
ZBC_ZT_CONVENTIONAL
:

244 
zbdz
->
ty≥
 = 
ZBD_ZONE_TYPE_CNV
;

246 
ZBC_ZT_SEQUENTIAL_REQ
:

247 
zbdz
->
ty≥
 = 
ZBD_ZONE_TYPE_SWR
;

249 
ZBC_ZT_SEQUENTIAL_PREF
:

250 
zbdz
->
ty≥
 = 
ZBD_ZONE_TYPE_SWP
;

253 
	`td_vîr‹
(
td
, 
î∫o
, "invalid zoneÅype");

254 
	`log_îr
("%s: invalidÅype for zoneát sector %llu.\n",

255 
f
->
fûe_«me
, ()
zbdz
->
°¨t
);

256 
ªt
 = -
EIO
;

257 
out
;

260 
z⁄es
[
i
].
zbz_c⁄dôi⁄
) {

261 
ZBC_ZC_NOT_WP
:

262 
zbdz
->
c⁄d
 = 
ZBD_ZONE_COND_NOT_WP
;

264 
ZBC_ZC_EMPTY
:

265 
zbdz
->
c⁄d
 = 
ZBD_ZONE_COND_EMPTY
;

267 
ZBC_ZC_IMP_OPEN
:

268 
zbdz
->
c⁄d
 = 
ZBD_ZONE_COND_IMP_OPEN
;

270 
ZBC_ZC_EXP_OPEN
:

271 
zbdz
->
c⁄d
 = 
ZBD_ZONE_COND_EXP_OPEN
;

273 
ZBC_ZC_CLOSED
:

274 
zbdz
->
c⁄d
 = 
ZBD_ZONE_COND_CLOSED
;

276 
ZBC_ZC_FULL
:

277 
zbdz
->
c⁄d
 = 
ZBD_ZONE_COND_FULL
;

279 
ZBC_ZC_RDONLY
:

280 
ZBC_ZC_OFFLINE
:

283 
zbdz
->
c⁄d
 = 
ZBD_ZONE_COND_OFFLINE
;

284 
zbdz
->
wp
 = zbdz->
°¨t
;

288 
ªt
 = 
ƒ_z⁄es
;

289 
out
:

290 
	`‰ì
(
z⁄es
);

291  
ªt
;

292 
	}
}

294 
	$libzbc_ª£t_wp
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

295 
uöt64_t
 
off£t
, uöt64_à
Àngth
)

297 
libzbc_d©a
 *
ld
 = 
td
->
io_›s_d©a
;

298 
uöt64_t
 
£˘‹
 = 
off£t
 >> 9;

299 
uöt64_t
 
íd_£˘‹
 = (
off£t
 + 
Àngth
) >> 9;

300 
ƒ_z⁄es
;

301 
zbc_î∫o
 
îr
;

302 
i
, 
ªt
;

304 
	`as£π
(
ld
);

305 
	`as£π
(
ld
->
zdev
);

307 
ƒ_z⁄es
 = (
Àngth
 + 
td
->
o
.
z⁄e_size
 - 1) /Åd->o.zone_size;

308 i‡(!
£˘‹
 && 
íd_£˘‹
 >
ld
->
ƒ_£˘‹s
) {

310 
ªt
 = 
	`zbc_ª£t_z⁄e
(
ld
->
zdev
, 0, 
ZBC_OP_ALL_ZONES
);

311 i‡(
ªt
)

312 
îr
;

317 
i
 = 0; i < 
ƒ_z⁄es
; i++, 
£˘‹
 +
td
->
o
.
z⁄e_size
 >> 9) {

318 
ªt
 = 
	`zbc_ª£t_z⁄e
(
ld
->
zdev
, 
£˘‹
, 0);

319 i‡(
ªt
)

320 
îr
;

325 
îr
:

326 
	`zbc_î∫o
(
ld
->
zdev
, &
îr
);

327 
	`td_vîr‹
(
td
, 
î∫o
, "zbc_reset_zone failed");

328 i‡(
îr
.
sk
)

329 
	`log_îr
("%s:Ñeset wp failed %s:%s\n",

330 
f
->
fûe_«me
,

331 
	`zbc_sk_°r
(
îr
.
sk
), 
	`zbc_asc_ascq_°r
”º.
asc_ascq
));

332  -
ªt
;

333 
	}
}

335 
	$libzbc_gë_max_›í_z⁄es
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

336 *
max_›í_z⁄es
)

338 
libzbc_d©a
 *
ld
;

339 
ªt
;

341 
ªt
 = 
	`libzbc_›í_dev
(
td
, 
f
, &
ld
);

342 i‡(
ªt
)

343  
ªt
;

345 i‡(
ld
->
max_›í_£q_ªq
 =
ZBC_NO_LIMIT
)

346 *
max_›í_z⁄es
 = 0;

348 *
max_›í_z⁄es
 = 
ld
->
max_›í_£q_ªq
;

351 
	}
}

353 
ssize_t
 
	$libzbc_rw
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

355 
libzbc_d©a
 *
ld
 = 
td
->
io_›s_d©a
;

356 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

357 
uöt64_t
 
£˘‹
 = 
io_u
->
off£t
 >> 9;

358 
size_t
 
cou¡
 = 
io_u
->
x„r_buÊí
 >> 9;

359 
zbc_î∫o
 
îr
;

360 
ssize_t
 
ªt
;

362 i‡(
io_u
->
ddú
 =
DDIR_WRITE
)

363 
ªt
 = 
	`zbc_pwrôe
(
ld
->
zdev
, 
io_u
->
x„r_buf
, 
cou¡
, 
£˘‹
);

365 
ªt
 = 
	`zbc_¥ód
(
ld
->
zdev
, 
io_u
->
x„r_buf
, 
cou¡
, 
£˘‹
);

366 i‡(
ªt
 =
cou¡
)

367  
ªt
;

369 i‡(
ªt
 > 0) {

370 
	`log_îr
("Short %s,Üen=%zu,Ñet=%zd\n",

371 
io_u
->
ddú
 =
DDIR_READ
 ? "read" : "write",

372 
cou¡
 << 9, 
ªt
 << 9);

373  -
EIO
;

377 
	`zbc_î∫o
(
ld
->
zdev
, &
îr
);

378 
	`td_vîr‹
(
td
, 
î∫o
, "libzbc i/o failed");

379 i‡(
îr
.
sk
) {

380 
	`log_îr
("%s: op %u offset %llu+%llu failed (%s:%s),Érr %zd\n",

381 
f
->
fûe_«me
, 
io_u
->
ddú
,

382 
io_u
->
off£t
, io_u->
x„r_buÊí
,

383 
	`zbc_sk_°r
(
îr
.
sk
),

384 
	`zbc_asc_ascq_°r
(
îr
.
asc_ascq
), 
ªt
);

386 
	`log_îr
("%s: op %u offset %llu+%llu failed,Érr %zd\n",

387 
f
->
fûe_«me
, 
io_u
->
ddú
,

388 
io_u
->
off£t
, io_u->
x„r_buÊí
, 
ªt
);

391  -
EIO
;

392 
	}
}

394 
fio_q_°©us
 
	$libzbc_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

396 
libzbc_d©a
 *
ld
 = 
td
->
io_›s_d©a
;

397 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

398 
ssize_t
 
ªt
 = 0;

400 
	`fio_ro_check
(
td
, 
io_u
);

402 
	`d¥öt
(
FD_ZBD
, "%p:%s:Üibzbc queue %llu\n",

403 
td
, 
f
->
fûe_«me
, 
io_u
->
off£t
);

405 i‡(
io_u
->
ddú
 =
DDIR_READ
 || io_u->ddú =
DDIR_WRITE
) {

406 
ªt
 = 
	`libzbc_rw
(
td
, 
io_u
);

407 } i‡(
	`ddú_sync
(
io_u
->
ddú
)) {

408 
ªt
 = 
	`zbc_Êush
(
ld
->
zdev
);

409 i‡(
ªt
)

410 
	`log_îr
("zbc_ÊushÉº‹ %zd\n", 
ªt
);

411 } i‡(
io_u
->
ddú
 =
DDIR_TRIM
) {

412 
ªt
 = 
	`zbd_do_io_u_åim
(
td
, 
io_u
);

413 i‡(!
ªt
)

414 
ªt
 = 
EINVAL
;

416 
	`log_îr
("Unsuµ‹ãd o≥øti⁄ %u\n", 
io_u
->
ddú
);

417 
ªt
 = -
EINVAL
;

419 i‡(
ªt
 < 0)

420 
io_u
->
îr‹
 = -
ªt
;

422  
FIO_Q_COMPLETED
;

423 
	}
}

425 
FIO_STATIC
 
i€ngöe_›s
 
	gi€ngöe
 = {

426 .
«me
 = "libzbc",

427 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

428 .
	g›í_fûe
 = 
libzbc_›í_fûe
,

429 .
	g˛o£_fûe
 = 
libzbc_˛o£_fûe
,

430 .
	g˛ónup
 = 
libzbc_˛ónup
,

431 .
	gövÆid©e
 = 
libzbc_övÆid©e
,

432 .
	ggë_fûe_size
 = 
libzbc_gë_fûe_size
,

433 .
	ggë_z⁄ed_modñ
 = 
libzbc_gë_z⁄ed_modñ
,

434 .
	gªp‹t_z⁄es
 = 
libzbc_ªp‹t_z⁄es
,

435 .
	gª£t_wp
 = 
libzbc_ª£t_wp
,

436 .
	ggë_max_›í_z⁄es
 = 
libzbc_gë_max_›í_z⁄es
,

437 .
	gqueue
 = 
libzbc_queue
,

438 .
	gÊags
 = 
FIO_SYNCIO
 | 
FIO_NOEXTEND
 | 
FIO_RAWIO
,

441 
fio_öô
 
	$fio_libzbc_ªgi°î
()

443 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

444 
	}
}

446 
fio_exô
 
	$fio_libzbc_uƒegi°î
()

448 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

449 
	}
}

	@engines/mmap.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<î∫o.h
>

11 
	~<sys/mm™.h
>

13 
	~"../fio.h
"

14 
	~"../›tgroup.h
"

15 
	~"../vîify.h
"

20 
	#MMAP_TOTAL_SZ
 (1 * 1024 * 1024 * 1024UL)

	)

22 
	gmm≠_m≠_size
;

24 
	sfio_mm≠_d©a
 {

25 *
	mmm≠_±r
;

26 
size_t
 
	mmm≠_sz
;

27 
off_t
 
	mmm≠_off
;

30 #ifde‡
CONFIG_HAVE_THP


31 
	smm≠_›ti⁄s
 {

32 *
	m∑d
;

33 
	mthp
;

36 
fio_›ti⁄
 
	g›ti⁄s
[] = {

38 .
«me
 = "thp",

39 .
	g ame
 = "Transparent Huge Pages",

40 .
	gty≥
 = 
FIO_OPT_INT
,

41 .
	goff1
 = 
off£tof
(
mm≠_›ti⁄s
, 
thp
),

42 .
	ghñp
 = "Memory Advise Huge Page",

43 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

44 .
	ggroup
 = 
FIO_OPT_G_MMAP
,

47 .
	g«me
 = 
NULL
,

52 
boﬁ
 
	$fio_madvi£_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

53 
size_t
 
Àngth
)

56 
fio_mm≠_d©a
 *
fmd
 = 
	`FILE_ENG_DATA
(
f
);

57 #ifde‡
CONFIG_HAVE_THP


58 
mm≠_›ti⁄s
 *
o
 = 
td
->
eo
;

61 i‡(
o
->
thp
)

62 
	`madvi£
(
fmd
->
mm≠_±r
, 
Àngth
, 
MADV_HUGEPAGE
);

65 i‡(!
td
->
o
.
Ádvi£_höt
)

66  
åue
;

68 i‡(!
	`td_øndom
(
td
)) {

69 i‡(
	`posix_madvi£
(
fmd
->
mm≠_±r
, 
Àngth
, 
POSIX_MADV_SEQUENTIAL
) < 0) {

70 
	`td_vîr‹
(
td
, 
î∫o
, "madvise");

71  
Ál£
;

74 i‡(
	`posix_madvi£
(
fmd
->
mm≠_±r
, 
Àngth
, 
POSIX_MADV_RANDOM
) < 0) {

75 
	`td_vîr‹
(
td
, 
î∫o
, "madvise");

76  
Ál£
;

80  
åue
;

81 
	}
}

83 #ifde‡
CONFIG_HAVE_THP


84 
	$fio_mm≠_gë_sh¨ed
(
thªad_d©a
 *
td
)

86 
mm≠_›ti⁄s
 *
o
 = 
td
->
eo
;

88 i‡(
o
->
thp
)

89  
MAP_PRIVATE
;

90  
MAP_SHARED
;

91 
	}
}

93 
	$fio_mm≠_gë_sh¨ed
(
thªad_d©a
 *
td
)

95  
MAP_SHARED
;

96 
	}
}

99 
	$fio_mm≠_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

100 
size_t
 
Àngth
, 
off_t
 
off
)

102 
fio_mm≠_d©a
 *
fmd
 = 
	`FILE_ENG_DATA
(
f
);

103 
Êags
 = 0, 
sh¨ed
 = 
	`fio_mm≠_gë_sh¨ed
(
td
);

105 i‡(
	`td_rw
(
td
Ë&& !td->
o
.
vîify_⁄ly
)

106 
Êags
 = 
PROT_READ
 | 
PROT_WRITE
;

107 i‡(
	`td_wrôe
(
td
Ë&& !td->
o
.
vîify_⁄ly
) {

108 
Êags
 = 
PROT_WRITE
;

110 i‡(
td
->
o
.
vîify
 !
VERIFY_NONE
)

111 
Êags
 |
PROT_READ
;

113 
Êags
 = 
PROT_READ
;

115 
fmd
->
mm≠_±r
 = 
	`mm≠
(
NULL
, 
Àngth
, 
Êags
, 
sh¨ed
, 
f
->
fd
, 
off
);

116 i‡(
fmd
->
mm≠_±r
 =
MAP_FAILED
) {

117 
fmd
->
mm≠_±r
 = 
NULL
;

118 
	`td_vîr‹
(
td
, 
î∫o
, "mmap");

119 
îr
;

122 i‡(!
	`fio_madvi£_fûe
(
td
, 
f
, 
Àngth
))

123 
îr
;

125 i‡(
	`posix_madvi£
(
fmd
->
mm≠_±r
, 
Àngth
, 
POSIX_MADV_DONTNEED
) < 0) {

126 
	`td_vîr‹
(
td
, 
î∫o
, "madvise");

127 
îr
;

130 #ifde‡
FIO_MADV_FREE


131 i‡(
f
->
fûëy≥
 =
FIO_TYPE_BLOCK
)

132 (Ë
	`posix_madvi£
(
fmd
->
mm≠_±r
, fmd->
mm≠_sz
, 
FIO_MADV_FREE
);

135 
îr
:

136 i‡(
td
->
îr‹
 && 
fmd
->
mm≠_±r
)

137 
	`munm≠
(
fmd
->
mm≠_±r
, 
Àngth
);

139  
td
->
îr‹
;

140 
	}
}

145 
	$fio_mm≠io_¥ï_limôed
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

147 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

148 
fio_mm≠_d©a
 *
fmd
 = 
	`FILE_ENG_DATA
(
f
);

150 i‡(
io_u
->
buÊí
 > 
mm≠_m≠_size
) {

151 
	`log_îr
("fio: bsÅoo big for mmapÉngine\n");

152  
EIO
;

155 
fmd
->
mm≠_sz
 = 
mm≠_m≠_size
;

156 i‡(
fmd
->
mm≠_sz
 > 
f
->
io_size
)

157 
fmd
->
mm≠_sz
 = 
f
->
io_size
;

159 
fmd
->
mm≠_off
 = 
io_u
->
off£t
;

161  
	`fio_mm≠_fûe
(
td
, 
f
, 
fmd
->
mm≠_sz
, fmd->
mm≠_off
);

162 
	}
}

167 
	$fio_mm≠io_¥ï_fuŒ
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

169 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

170 
fio_mm≠_d©a
 *
fmd
 = 
	`FILE_ENG_DATA
(
f
);

171 
ªt
;

173 i‡(
	`fio_fûe_∑πül_mm≠
(
f
))

174  
EINVAL
;

175 i‡(
io_u
->
off£t
 !(
size_t
) io_u->offset ||

176 
f
->
io_size
 !(
size_t
) f->io_size) {

177 
	`fio_fûe_£t_∑πül_mm≠
(
f
);

178  
EINVAL
;

181 
fmd
->
mm≠_sz
 = 
f
->
io_size
;

182 
fmd
->
mm≠_off
 = 0;

184 
ªt
 = 
	`fio_mm≠_fûe
(
td
, 
f
, 
fmd
->
mm≠_sz
, fmd->
mm≠_off
);

185 i‡(
ªt
)

186 
	`fio_fûe_£t_∑πül_mm≠
(
f
);

188  
ªt
;

189 
	}
}

191 
	$fio_mm≠io_¥ï
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

193 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

194 
fio_mm≠_d©a
 *
fmd
 = 
	`FILE_ENG_DATA
(
f
);

195 
ªt
;

200 i‡(
io_u
->
off£t
 >
fmd
->
mm≠_off
 &&

201 
io_u
->
off£t
 + io_u->
buÊí
 <
fmd
->
mm≠_off
 + fmd->
mm≠_sz
)

202 
d⁄e
;

207 i‡(
fmd
->
mm≠_±r
) {

208 i‡(
	`munm≠
(
fmd
->
mm≠_±r
, fmd->
mm≠_sz
) < 0)

209  
î∫o
;

210 
fmd
->
mm≠_±r
 = 
NULL
;

213 i‡(
	`fio_mm≠io_¥ï_fuŒ
(
td
, 
io_u
)) {

214 
	`td_˛ór_îr‹
(
td
);

215 
ªt
 = 
	`fio_mm≠io_¥ï_limôed
(
td
, 
io_u
);

216 i‡(
ªt
)

217  
ªt
;

220 
d⁄e
:

221 
io_u
->
mm≠_d©a
 = 
fmd
->
mm≠_±r
 + io_u->
off£t
 - fmd->
mm≠_off
 -

222 
f
->
fûe_off£t
;

224 
	}
}

226 
fio_q_°©us
 
	$fio_mm≠io_queue
(
thªad_d©a
 *
td
,

227 
io_u
 *io_u)

229 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

230 
fio_mm≠_d©a
 *
fmd
 = 
	`FILE_ENG_DATA
(
f
);

232 
	`fio_ro_check
(
td
, 
io_u
);

234 i‡(
io_u
->
ddú
 =
DDIR_READ
)

235 
	`mem˝y
(
io_u
->
x„r_buf
, io_u->
mm≠_d©a
, io_u->
x„r_buÊí
);

236 i‡(
io_u
->
ddú
 =
DDIR_WRITE
)

237 
	`mem˝y
(
io_u
->
mm≠_d©a
, io_u->
x„r_buf
, io_u->
x„r_buÊí
);

238 i‡(
	`ddú_sync
(
io_u
->
ddú
)) {

239 i‡(
	`msync
(
fmd
->
mm≠_±r
, fmd->
mm≠_sz
, 
MS_SYNC
)) {

240 
io_u
->
îr‹
 = 
î∫o
;

241 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "msync");

243 } i‡(
io_u
->
ddú
 =
DDIR_TRIM
) {

244 
ªt
 = 
	`do_io_u_åim
(
td
, 
io_u
);

246 i‡(!
ªt
)

247 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "trim");

254 i‡(
td
->
o
.
odúe˘
 && 
	`ddú_rw
(
io_u
->
ddú
)) {

255 i‡(
	`msync
(
io_u
->
mm≠_d©a
, io_u->
x„r_buÊí
, 
MS_SYNC
) < 0) {

256 
io_u
->
îr‹
 = 
î∫o
;

257 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "msync");

259 i‡(
	`posix_madvi£
(
io_u
->
mm≠_d©a
, io_u->
x„r_buÊí
, 
POSIX_MADV_DONTNEED
) < 0) {

260 
io_u
->
îr‹
 = 
î∫o
;

261 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "madvise");

265  
FIO_Q_COMPLETED
;

266 
	}
}

268 
	$fio_mm≠io_öô
(
thªad_d©a
 *
td
)

270 
thªad_›ti⁄s
 *
o
 = &
td
->o;

272 i‡((
o
->
rw_mö_bs
 & 
∑ge_mask
) &&

273 (
o
->
odúe˘
 || o->
fsync_blocks
 || o->
fd©async_blocks
)) {

274 
	`log_îr
("fio: mmap options dictateá minimum block size of "

275 "%Œu byãs\n", (Ë
∑ge_size
);

279 
mm≠_m≠_size
 = 
MMAP_TOTAL_SZ
 / 
o
->
ƒ_fûes
;

281 
	}
}

283 
	$fio_mm≠io_›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

285 
fio_mm≠_d©a
 *
fmd
;

286 
ªt
;

288 
ªt
 = 
	`gíîic_›í_fûe
(
td
, 
f
);

289 i‡(
ªt
)

290  
ªt
;

292 
fmd
 = 
	`ˇŒoc
(1, (*fmd));

293 i‡(!
fmd
) {

294 
fio_unu£d
 
__ªt
;

295 
__ªt
 = 
	`gíîic_˛o£_fûe
(
td
, 
f
);

299 
	`FILE_SET_ENG_DATA
(
f
, 
fmd
);

301 
	}
}

303 
	$fio_mm≠io_˛o£_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

305 
fio_mm≠_d©a
 *
fmd
 = 
	`FILE_ENG_DATA
(
f
);

307 
	`FILE_SET_ENG_DATA
(
f
, 
NULL
);

308 
	`‰ì
(
fmd
);

309 
	`fio_fûe_˛ór_∑πül_mm≠
(
f
);

311  
	`gíîic_˛o£_fûe
(
td
, 
f
);

312 
	}
}

314 
i€ngöe_›s
 
	gi€ngöe
 = {

315 .
«me
 = "mmap",

316 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

317 .
	göô
 = 
fio_mm≠io_öô
,

318 .
	g¥ï
 = 
fio_mm≠io_¥ï
,

319 .
	gqueue
 = 
fio_mm≠io_queue
,

320 .
	g›í_fûe
 = 
fio_mm≠io_›í_fûe
,

321 .
	g˛o£_fûe
 = 
fio_mm≠io_˛o£_fûe
,

322 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

323 .
	gÊags
 = 
FIO_SYNCIO
 | 
FIO_NOEXTEND
,

324 #ifde‡
CONFIG_HAVE_THP


325 .
	g›ti⁄s
 = 
›ti⁄s
,

326 .
	g›ti⁄_°ru˘_size
 = (
mm≠_›ti⁄s
),

330 
fio_öô
 
	$fio_mm≠io_ªgi°î
()

332 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

333 
	}
}

335 
fio_exô
 
	$fio_mm≠io_uƒegi°î
()

337 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

338 
	}
}

	@engines/mtd.c

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<î∫o.h
>

10 
	~<sys/io˘l.h
>

11 
	~<mtd/mtd-u£r.h
>

13 
	~"../fio.h
"

14 
	~"../›tgroup.h
"

15 
	~"../o¶ib/libmtd.h
"

17 
libmtd_t
 
	gdesc
;

19 
	sfio_mtd_d©a
 {

20 
mtd_dev_öfo
 
	möfo
;

23 
	sfio_mtd_›ti⁄s
 {

24 *
	m∑d
;

25 
	mskù_bad
;

28 
fio_›ti⁄
 
	g›ti⁄s
[] = {

30 .
«me
 = "skip_bad",

31 .
	g ame
 = "Skip operationságainst bad blocks",

32 .
	gty≥
 = 
FIO_OPT_BOOL
,

33 .
	goff1
 = 
off£tof
(
fio_mtd_›ti⁄s
, 
skù_bad
),

34 .
	ghñp
 = "Skip operationságainst known bad blocks.",

35 .
	ghide
 = 1,

36 .
	gdef
 = "0",

37 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

38 .
	ggroup
 = 
FIO_OPT_G_MTD
,

41 .
	g«me
 = 
NULL
,

45 
	$fio_mtd_maybe_m¨k_bad
(
thªad_d©a
 *
td
,

46 
fio_mtd_d©a
 *
fmd
,

47 
io_u
 *io_u, 
eb
)

49 
ªt
;

50 i‡(
î∫o
 =
EIO
) {

51 
ªt
 = 
	`mtd_m¨k_bad
(&
fmd
->
öfo
, 
io_u
->
fûe
->
fd
, 
eb
);

52 i‡(
ªt
 != 0) {

53 
io_u
->
îr‹
 = 
î∫o
;

54 
	`td_vîr‹
(
td
, 
î∫o
, "mtd_mark_bad");

59 
	}
}

61 
	$fio_mtd_is_bad
(
thªad_d©a
 *
td
,

62 
fio_mtd_d©a
 *
fmd
,

63 
io_u
 *io_u, 
eb
)

65 
ªt
 = 
	`mtd_is_bad
(&
fmd
->
öfo
, 
io_u
->
fûe
->
fd
, 
eb
);

66 i‡(
ªt
 == -1) {

67 
io_u
->
îr‹
 = 
î∫o
;

68 
	`td_vîr‹
(
td
, 
î∫o
, "mtd_is_bad");

69 } i‡(
ªt
 == 1)

70 
io_u
->
îr‹
 = 
EIO
;

71  
ªt
;

72 
	}
}

74 
fio_q_°©us
 
	$fio_mtd_queue
(
thªad_d©a
 *
td
,

75 
io_u
 *io_u)

77 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

78 
fio_mtd_d©a
 *
fmd
 = 
	`FILE_ENG_DATA
(
f
);

79 
fio_mtd_›ti⁄s
 *
o
 = 
td
->
eo
;

80 
loˇl_offs
 = 0;

81 
ªt
;

83 
	`fio_ro_check
(
td
, 
io_u
);

93 
loˇl_offs
 < 
io_u
->
buÊí
) {

94 
eb
 = (
io_u
->
off£t
 + 
loˇl_offs
Ë/ 
fmd
->
öfo
.
eb_size
;

95 
eb_offs
 = (
io_u
->
off£t
 + 
loˇl_offs
Ë% 
fmd
->
öfo
.
eb_size
;

98 
Àn
 = 
	`mö
(()
io_u
->
buÊí
 - 
loˇl_offs
,

99 ()
fmd
->
öfo
.
eb_size
 - 
eb_offs
);

100 *
buf
 = ((*)
io_u
->bufË+ 
loˇl_offs
;

102 i‡(
o
->
skù_bad
) {

103 
ªt
 = 
	`fio_mtd_is_bad
(
td
, 
fmd
, 
io_u
, 
eb
);

104 i‡(
ªt
 == -1)

106 i‡(
ªt
 == 1)

107 
√xt
;

109 i‡(
io_u
->
ddú
 =
DDIR_READ
) {

110 
ªt
 = 
	`mtd_ªad
(&
fmd
->
öfo
, 
f
->
fd
, 
eb
, 
eb_offs
, 
buf
, 
Àn
);

111 i‡(
ªt
 != 0) {

112 
io_u
->
îr‹
 = 
î∫o
;

113 
	`td_vîr‹
(
td
, 
î∫o
, "mtd_read");

114 i‡(
	`fio_mtd_maybe_m¨k_bad
(
td
, 
fmd
, 
io_u
, 
eb
))

117 } i‡(
io_u
->
ddú
 =
DDIR_WRITE
) {

118 
ªt
 = 
	`mtd_wrôe
(
desc
, &
fmd
->
öfo
, 
f
->
fd
, 
eb
,

119 
eb_offs
, 
buf
, 
Àn
, 
NULL
, 0, 0);

120 i‡(
ªt
 != 0) {

121 
io_u
->
îr‹
 = 
î∫o
;

122 
	`td_vîr‹
(
td
, 
î∫o
, "mtd_write");

123 i‡(
	`fio_mtd_maybe_m¨k_bad
(
td
, 
fmd
, 
io_u
, 
eb
))

126 } i‡(
io_u
->
ddú
 =
DDIR_TRIM
) {

127 i‡(
eb_offs
 !0 || 
Àn
 !
fmd
->
öfo
.
eb_size
) {

128 
io_u
->
îr‹
 = 
EINVAL
;

129 
	`td_vîr‹
(
td
, 
EINVAL
,

132 
ªt
 = 
	`mtd_îa£
(
desc
, &
fmd
->
öfo
, 
f
->
fd
, 
eb
);

133 i‡(
ªt
 != 0) {

134 
io_u
->
îr‹
 = 
î∫o
;

135 
	`td_vîr‹
(
td
, 
î∫o
, "mtd_erase");

136 i‡(
	`fio_mtd_maybe_m¨k_bad
(
td
, 
fmd
, 
io_u
, 
eb
))

140 
io_u
->
îr‹
 = 
ENOTSUP
;

141 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "operationÇot supported on mtd");

144 
√xt
:

145 
loˇl_offs
 +
Àn
;

148  
FIO_Q_COMPLETED
;

149 
	}
}

151 
	$fio_mtd_›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

153 
fio_mtd_d©a
 *
fmd
;

154 
ªt
;

156 
ªt
 = 
	`gíîic_›í_fûe
(
td
, 
f
);

157 i‡(
ªt
)

158  
ªt
;

160 
fmd
 = 
	`ˇŒoc
(1, (*fmd));

161 i‡(!
fmd
)

162 
îr_˛o£
;

164 
ªt
 = 
	`mtd_gë_dev_öfo
(
desc
, 
f
->
fûe_«me
, &
fmd
->
öfo
);

165 i‡(
ªt
 != 0) {

166 
	`td_vîr‹
(
td
, 
î∫o
, "mtd_get_dev_info");

167 
îr_‰ì
;

170 
	`FILE_SET_ENG_DATA
(
f
, 
fmd
);

173 
îr_‰ì
:

174 
	`‰ì
(
fmd
);

175 
îr_˛o£
:

177 
fio_unu£d
 
__ªt
;

178 
__ªt
 = 
	`gíîic_˛o£_fûe
(
td
, 
f
);

181 
	}
}

183 
	$fio_mtd_˛o£_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

185 
fio_mtd_d©a
 *
fmd
 = 
	`FILE_ENG_DATA
(
f
);

187 
	`FILE_SET_ENG_DATA
(
f
, 
NULL
);

188 
	`‰ì
(
fmd
);

190  
	`gíîic_˛o£_fûe
(
td
, 
f
);

191 
	}
}

193 
	$fio_mtd_gë_fûe_size
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

195 
mtd_dev_öfo
 
öfo
;

197 
ªt
 = 
	`mtd_gë_dev_öfo
(
desc
, 
f
->
fûe_«me
, &
öfo
);

198 i‡(
ªt
 != 0) {

199 
	`td_vîr‹
(
td
, 
î∫o
, "mtd_get_dev_info");

200  
î∫o
;

202 
f
->
ªÆ_fûe_size
 = 
öfo
.
size
;

205 
	}
}

207 
i€ngöe_›s
 
	gi€ngöe
 = {

208 .
«me
 = "mtd",

209 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

210 .
	gqueue
 = 
fio_mtd_queue
,

211 .
	g›í_fûe
 = 
fio_mtd_›í_fûe
,

212 .
	g˛o£_fûe
 = 
fio_mtd_˛o£_fûe
,

213 .
	ggë_fûe_size
 = 
fio_mtd_gë_fûe_size
,

214 .
	gÊags
 = 
FIO_SYNCIO
 | 
FIO_NOEXTEND
,

215 .
	g›ti⁄s
 = 
›ti⁄s
,

216 .
	g›ti⁄_°ru˘_size
 = (
fio_mtd_›ti⁄s
),

219 
fio_öô
 
	$fio_mtd_ªgi°î
()

221 
desc
 = 
	`libmtd_›í
();

222 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

223 
	}
}

225 
fio_exô
 
	$fio_mtd_uƒegi°î
()

227 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

228 
	`libmtd_˛o£
(
desc
);

229 
desc
 = 
NULL
;

230 
	}
}

	@engines/nbd.c

11 
	~<°dio.h
>

12 
	~<°dlib.h
>

13 
	~<°döt.h
>

14 
	~<î∫o.h
>

16 
	~<libnbd.h
>

18 
	~"../fio.h
"

19 
	~"../›tgroup.h
"

22 
	#NBD_MAX_REQUEST_SIZE
 (64 * 1024 * 1024)

	)

25 
	snbd_d©a
 {

26 
nbd_h™dÀ
 *
	mnbd
;

27 
	mdebug
;

30 
io_u
 **
	mcom∂ëed
;

31 
size_t
 
	mƒ_com∂ëed
;

35 
	snbd_›ti⁄s
 {

36 *
	m∑ddög
;

37 *
	muri
;

40 
fio_›ti⁄
 
	g›ti⁄s
[] = {

42 .
«me
 = "uri",

43 .
	g ame
 = "NBD URI",

44 .
	ghñp
 = "Name of NBD URI",

45 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

46 .
	ggroup
 = 
FIO_OPT_G_NBD
,

47 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

48 .
	goff1
 = 
off£tof
(
nbd_›ti⁄s
, 
uri
),

51 .
	g«me
 = 
NULL
,

56 
	$nbd_£tup
(
thªad_d©a
 *
td
)

58 
nbd_d©a
 *nbd_data;

59 
nbd_›ti⁄s
 *
o
 = 
td
->
eo
;

60 
fio_fûe
 *
f
;

61 
r
;

62 
öt64_t
 
size
;

64 
nbd_d©a
 = 
	`ˇŒoc
(1, (*nbd_data));

65 i‡(!
nbd_d©a
) {

66 
	`td_vîr‹
(
td
, 
î∫o
, "calloc");

69 
td
->
io_›s_d©a
 = 
nbd_d©a
;

72 i‡(!
td
->
fûes_ödex
) {

73 
	`add_fûe
(
td
, "nbd", 0, 0);

74 
td
->
o
.
ƒ_fûes
 =Åd->o.nr_files ? : 1;

75 
td
->
o
.
›í_fûes
++;

77 
f
 = 
td
->
fûes
[0];

79 
nbd_d©a
->
nbd
 = 
	`nbd_¸óã
();

80 i‡(!
nbd_d©a
->
nbd
) {

81 
	`log_îr
("fio:Çbd_¸óã: %s\n", 
	`nbd_gë_îr‹
());

86 
nbd_d©a
->
debug
 = 
	`nbd_gë_debug
“bd_d©a->
nbd
);

91 i‡(!
o
->
uri
) {

92 
	`log_îr
("fio:Çbd: uriÖarameter wasÇot specified\n");

95 
r
 = 
	`nbd_c⁄√˘_uri
(
nbd_d©a
->
nbd
, 
o
->
uri
);

96 i‡(
r
 == -1) {

97 
	`log_îr
("fio:Çbd_c⁄√˘_uri: %s\n", 
	`nbd_gë_îr‹
());

100 
size
 = 
	`nbd_gë_size
(
nbd_d©a
->
nbd
);

101 i‡(
size
 == -1) {

102 
	`log_îr
("fio:Çbd_gë_size: %s\n", 
	`nbd_gë_îr‹
());

106 
f
->
ªÆ_fûe_size
 = 
size
;

108 
	`nbd_˛o£
 (
nbd_d©a
->
nbd
);

109 
nbd_d©a
->
nbd
 = 
NULL
;

112 
	}
}

115 
	$nbd_˛ónup
(
thªad_d©a
 *
td
)

117 
nbd_d©a
 *nbd_d©®
td
->
io_›s_d©a
;

119 i‡(
nbd_d©a
) {

120 i‡(
nbd_d©a
->
nbd
)

121 
	`nbd_˛o£
(
nbd_d©a
->
nbd
);

122 
	`‰ì
(
nbd_d©a
);

124 
	}
}

127 
	$nbd_öô
(
thªad_d©a
 *
td
)

129 
nbd_›ti⁄s
 *
o
 = 
td
->
eo
;

130 
nbd_d©a
 *nbd_d©®
td
->
io_›s_d©a
;

131 
r
;

133 i‡(!
o
->
uri
) {

134 
	`log_îr
("fio:Çbd: uriÖarameter wasÇot specified\n");

138 
nbd_d©a
->
nbd
 = 
	`nbd_¸óã
();

139 i‡(!
nbd_d©a
->
nbd
) {

140 
	`log_îr
("fio:Çbd_¸óã: %s\n", 
	`nbd_gë_îr‹
());

144 
r
 = 
	`nbd_c⁄√˘_uri
(
nbd_d©a
->
nbd
, 
o
->
uri
);

145 i‡(
r
 == -1) {

146 
	`log_îr
("fio:Çbd_c⁄√˘_uri: %s\n", 
	`nbd_gë_îr‹
());

150 
	`log_öfo
("fio: connectedÅo NBD server\n");

152 
	}
}

155 
	$cmd_com∂ëed
 (*
vp
, *
îr‹
)

157 
io_u
 *io_u;

158 
nbd_d©a
 *nbd_data;

159 
io_u
 **
com∂ëed
;

161 
io_u
 = 
vp
;

162 
nbd_d©a
 = 
io_u
->
ígöe_d©a
;

164 i‡(
nbd_d©a
->
debug
)

165 
	`log_öfo
("fio:Çbd: command completed\n");

167 i‡(*
îr‹
 != 0)

168 
io_u
->
îr‹
 = *error;

170 
io_u
->
îr‹
 = 0;

175 
com∂ëed
 = 
	`ªÆloc
(
nbd_d©a
->completed,

176 (
io_u
 *) *

177 (
nbd_d©a
->
ƒ_com∂ëed
+1));

178 i‡(
com∂ëed
 =
NULL
) {

179 
io_u
->
îr‹
 = 
î∫o
;

183 
nbd_d©a
->
com∂ëed
 = completed;

184 
nbd_d©a
->
com∂ëed
[nbd_d©a->
ƒ_com∂ëed
] = 
io_u
;

185 
nbd_d©a
->
ƒ_com∂ëed
++;

188 
	}
}

191 
fio_q_°©us
 
	$nbd_queue
(
thªad_d©a
 *
td
,

192 
io_u
 *io_u)

194 
nbd_d©a
 *nbd_d©®
td
->
io_›s_d©a
;

195 
nbd_com∂ëi⁄_ˇŒback
 
com∂ëi⁄
 = { .
ˇŒback
 = 
cmd_com∂ëed
,

196 .
u£r_d©a
 = 
io_u
 };

197 
r
;

199 
	`fio_ro_check
(
td
, 
io_u
);

201 
io_u
->
ígöe_d©a
 = 
nbd_d©a
;

203 i‡(
io_u
->
ddú
 =
DDIR_WRITE
 || io_u->ddú =
DDIR_READ
)

204 
	`as£π
(
io_u
->
x„r_buÊí
 <
NBD_MAX_REQUEST_SIZE
);

206 
io_u
->
ddú
) {

207 
DDIR_READ
:

208 
r
 = 
	`nbd_aio_¥ód
(
nbd_d©a
->
nbd
,

209 
io_u
->
x„r_buf
, io_u->
x„r_buÊí
,

210 
io_u
->
off£t
, 
com∂ëi⁄
, 0);

212 
DDIR_WRITE
:

213 
r
 = 
	`nbd_aio_pwrôe
(
nbd_d©a
->
nbd
,

214 
io_u
->
x„r_buf
, io_u->
x„r_buÊí
,

215 
io_u
->
off£t
, 
com∂ëi⁄
, 0);

217 
DDIR_TRIM
:

218 
r
 = 
	`nbd_aio_åim
(
nbd_d©a
->
nbd
, 
io_u
->
x„r_buÊí
,

219 
io_u
->
off£t
, 
com∂ëi⁄
, 0);

221 
DDIR_SYNC
:

225 
r
 = 
	`nbd_aio_Êush
(
nbd_d©a
->
nbd
, 
com∂ëi⁄
, 0);

228 
io_u
->
îr‹
 = 
EINVAL
;

229  
FIO_Q_COMPLETED
;

232 i‡(
r
 == -1) {

236 
io_u
->
îr‹
 = 
	`nbd_gë_î∫o
();

237 i‡(
io_u
->
îr‹
 == 0)

238 
io_u
->
îr‹
 = 
EIO
;

239  
FIO_Q_COMPLETED
;

242 i‡(
nbd_d©a
->
debug
)

243 
	`log_öfo
("fio:Çbd: command issued\n");

244 
io_u
->
îr‹
 = 0;

245  
FIO_Q_QUEUED
;

246 
	}
}

248 
	$ªtúe_comm™ds
(
nbd_h™dÀ
 *
nbd
)

250 
öt64_t
 
cookõ
;

251 
r
 = 0;

253 (
cookõ
 = 
	`nbd_aio_≥ek_comm™d_com∂ëed
(
nbd
)) > 0) {

258 
	`nbd_aio_comm™d_com∂ëed
(
nbd
, 
cookõ
);

259 
r
++;

262 i‡(
	`nbd_gë_debug
(
nbd
))

263 
	`log_öfo
("fio:Çbd: %u comm™d†ªtúed\n", 
r
);

264  
r
;

265 
	}
}

267 
	$nbd_gëevíts
(
thªad_d©a
 *
td
, 
mö
,

268 
max
, c⁄° 
time•ec
 *
t
)

270 
nbd_d©a
 *nbd_d©®
td
->
io_›s_d©a
;

271 
r
;

272 
evíts
 = 0;

273 
timeout
;

278 
timeout
 = !
t
 ? -1 :Å->
tv_£c
 * 1000 +Å->
tv_n£c
 / 1000000;

280 
evíts
 < 
mö
) {

281 
r
 = 
	`nbd_pﬁl
(
nbd_d©a
->
nbd
, 
timeout
);

282 i‡(
r
 == -1) {

284 
	`log_îr
("fio:Çbd_pﬁl: %s\n", 
	`nbd_gë_îr‹
());

289 
evíts
 +
	`ªtúe_comm™ds
(
nbd_d©a
->
nbd
);

293  
evíts
;

294 
	}
}

296 
io_u
 *
	$nbd_evít
(
thªad_d©a
 *
td
, 
evít
)

298 
nbd_d©a
 *nbd_d©®
td
->
io_›s_d©a
;

300 i‡(
nbd_d©a
->
ƒ_com∂ëed
 == 0)

301  
NULL
;

306 
nbd_d©a
->
ƒ_com∂ëed
--;

307  
nbd_d©a
->
com∂ëed
[nbd_d©a->
ƒ_com∂ëed
];

308 
	}
}

310 
	$nbd_io_u_öô
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

312 
io_u
->
ígöe_d©a
 = 
NULL
;

314 
	}
}

316 
	$nbd_io_u_‰ì
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

319 
	}
}

321 
	$nbd_›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

324 
	}
}

326 
	$nbd_övÆid©e
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

329 
	}
}

331 
FIO_STATIC
 
i€ngöe_›s
 
	gi€ngöe
 = {

332 .
«me
 = "nbd",

333 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

334 .
	g›ti⁄s
 = 
›ti⁄s
,

335 .
	g›ti⁄_°ru˘_size
 = (
nbd_›ti⁄s
),

336 .
	gÊags
 = 
FIO_DISKLESSIO
 | 
FIO_NOEXTEND
,

338 .
	g£tup
 = 
nbd_£tup
,

339 .
	göô
 = 
nbd_öô
,

340 .
	g˛ónup
 = 
nbd_˛ónup
,

341 .
	gqueue
 = 
nbd_queue
,

342 .
	ggëevíts
 = 
nbd_gëevíts
,

343 .
	gevít
 = 
nbd_evít
,

344 .
	gio_u_öô
 = 
nbd_io_u_öô
,

345 .
	gio_u_‰ì
 = 
nbd_io_u_‰ì
,

347 .
	g›í_fûe
 = 
nbd_›í_fûe
,

348 .
	gövÆid©e
 = 
nbd_övÆid©e
,

351 
fio_öô
 
	$fio_nbd_ªgi°î
()

353 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

354 
	}
}

356 
fio_exô
 
	$fio_nbd_uƒegi°î
()

358 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

359 
	}
}

	@engines/net.c

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<uni°d.h
>

10 
	~<sig«l.h
>

11 
	~<î∫o.h
>

12 
	~<√töë/ö.h
>

13 
	~<√töë/t˝.h
>

14 
	~<¨∑/öë.h
>

15 
	~<√tdb.h
>

16 
	~<pﬁl.h
>

17 
	~<sys/°©.h
>

18 
	~<sys/sockë.h
>

19 
	~<sys/un.h
>

21 
	~"../fio.h
"

22 
	~"../vîify.h
"

23 
	~"../›tgroup.h
"

25 
	s√tio_d©a
 {

26 
	mli°ífd
;

27 
	mu£_•li˚
;

28 
	m£q_off
;

29 
	mpùes
[2];

30 
sockaddr_ö
 
	maddr
;

31 
sockaddr_ö6
 
	maddr6
;

32 
sockaddr_un
 
	maddr_un
;

33 
uöt64_t
 
	mudp_£nd_£q
;

34 
uöt64_t
 
	mudp_ªcv_£q
;

37 
	s√tio_›ti⁄s
 {

38 
thªad_d©a
 *
	mtd
;

39 
	mp‹t
;

40 
	m¥Ÿo
;

41 
	mli°í
;

42 
	mpögp⁄g
;

43 
	mnodñay
;

44 
	mâl
;

45 
	mwödow_size
;

46 
	mmss
;

47 *
	mötfc
;

50 
	sudp_˛o£_msg
 {

51 
uöt32_t
 
	mmagic
;

52 
uöt32_t
 
	mcmd
;

55 
	sudp_£q
 {

56 
uöt64_t
 
	mmagic
;

57 
uöt64_t
 
	m£q
;

58 
uöt64_t
 
	mbs
;

62 
	mFIO_LINK_CLOSE
 = 0x89,

63 
	mFIO_LINK_OPEN_CLOSE_MAGIC
 = 0x6c696e6b,

64 
	mFIO_LINK_OPEN
 = 0x98,

65 
	mFIO_UDP_SEQ_MAGIC
 = 0x657375716e556563ULL,

67 
	mFIO_TYPE_TCP
 = 1,

68 
	mFIO_TYPE_UDP
 = 2,

69 
	mFIO_TYPE_UNIX
 = 3,

70 
	mFIO_TYPE_TCP_V6
 = 4,

71 
	mFIO_TYPE_UDP_V6
 = 5,

74 
°r_ho°«me_cb
(*
d©a
, c⁄° *
öput
);

75 
fio_›ti⁄
 
	g›ti⁄s
[] = {

77 .
«me
 = "hostname",

78 .
	g ame
 = "netÉngine hostname",

79 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

80 .
	gcb
 = 
°r_ho°«me_cb
,

81 .
	ghñp
 = "Hostname forÇet IOÉngine",

82 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

83 .
	ggroup
 = 
FIO_OPT_G_NETIO
,

86 .
	g«me
 = "port",

87 .
	g ame
 = "netÉngineÖort",

88 .
	gty≥
 = 
FIO_OPT_INT
,

89 .
	goff1
 = 
off£tof
(
√tio_›ti⁄s
, 
p‹t
),

90 .
	gmövÆ
 = 1,

91 .
	gmaxvÆ
 = 65535,

92 .
	ghñp
 = "PortÅo use for TCP or UDPÇet connections",

93 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

94 .
	ggroup
 = 
FIO_OPT_G_NETIO
,

97 .
	g«me
 = "protocol",

98 .
	g ame
 = "netÉngineÖrotocol",

99 .
	gÆüs
 = "proto",

100 .
	gty≥
 = 
FIO_OPT_STR
,

101 .
	goff1
 = 
off£tof
(
√tio_›ti⁄s
, 
¥Ÿo
),

102 .
	ghñp
 = "NetworkÖrotocolÅo use",

103 .
	gdef
 = "tcp",

104 .
	gposvÆ
 = {

105 { .
ivÆ
 = "tcp",

106 .
	govÆ
 = 
FIO_TYPE_TCP
,

107 .
	ghñp
 = "Transmission Control Protocol",

109 #ifde‡
CONFIG_IPV6


110 { .
	givÆ
 = "tcpv6",

111 .
	govÆ
 = 
FIO_TYPE_TCP_V6
,

112 .
	ghñp
 = "Transmission Control Protocol V6",

115 { .
	givÆ
 = "udp",

116 .
	govÆ
 = 
FIO_TYPE_UDP
,

117 .
	ghñp
 = "User Datagram Protocol",

119 #ifde‡
CONFIG_IPV6


120 { .
	givÆ
 = "udpv6",

121 .
	govÆ
 = 
FIO_TYPE_UDP_V6
,

122 .
	ghñp
 = "User Datagram Protocol V6",

125 { .
	givÆ
 = "unix",

126 .
	govÆ
 = 
FIO_TYPE_UNIX
,

127 .
	ghñp
 = "UNIX domain socket",

130 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

131 .
	ggroup
 = 
FIO_OPT_G_NETIO
,

133 #ifde‡
CONFIG_TCP_NODELAY


135 .
	g«me
 = "nodelay",

136 .
	g ame
 = "No Delay",

137 .
	gty≥
 = 
FIO_OPT_BOOL
,

138 .
	goff1
 = 
off£tof
(
√tio_›ti⁄s
, 
nodñay
),

139 .
	ghñp
 = "Use TCP_NODELAY on TCP connections",

140 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

141 .
	ggroup
 = 
FIO_OPT_G_NETIO
,

145 .
	g«me
 = "listen",

146 .
	g ame
 = "netÉngineÜisten",

147 .
	gty≥
 = 
FIO_OPT_STR_SET
,

148 .
	goff1
 = 
off£tof
(
√tio_›ti⁄s
, 
li°í
),

149 .
	ghñp
 = "Listen for incoming TCP connections",

150 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

151 .
	ggroup
 = 
FIO_OPT_G_NETIO
,

154 .
	g«me
 = "pingpong",

155 .
	g ame
 = "Ping Pong",

156 .
	gty≥
 = 
FIO_OPT_STR_SET
,

157 .
	goff1
 = 
off£tof
(
√tio_›ti⁄s
, 
pögp⁄g
),

158 .
	ghñp
 = "Ping-pong IOÑequests",

159 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

160 .
	ggroup
 = 
FIO_OPT_G_NETIO
,

163 .
	g«me
 = "interface",

164 .
	g ame
 = "netÉngine interface",

165 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

166 .
	goff1
 = 
off£tof
(
√tio_›ti⁄s
, 
ötfc
),

167 .
	ghñp
 = "Network interfaceÅo use",

168 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

169 .
	ggroup
 = 
FIO_OPT_G_NETIO
,

172 .
	g«me
 = "ttl",

173 .
	g ame
 = "netÉngine multicastÅtl",

174 .
	gty≥
 = 
FIO_OPT_INT
,

175 .
	goff1
 = 
off£tof
(
√tio_›ti⁄s
, 
âl
),

176 .
	gdef
 = "1",

177 .
	gmövÆ
 = 0,

178 .
	ghñp
 = "Time-to-live value for outgoing UDP multicastÖackets",

179 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

180 .
	ggroup
 = 
FIO_OPT_G_NETIO
,

182 #ifde‡
CONFIG_NET_WINDOWSIZE


184 .
	g«me
 = "window_size",

185 .
	g ame
 = "Window Size",

186 .
	gty≥
 = 
FIO_OPT_INT
,

187 .
	goff1
 = 
off£tof
(
√tio_›ti⁄s
, 
wödow_size
),

188 .
	gmövÆ
 = 0,

189 .
	ghñp
 = "Set socket buffer window size",

190 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

191 .
	ggroup
 = 
FIO_OPT_G_NETIO
,

194 #ifde‡
CONFIG_NET_MSS


196 .
	g«me
 = "mss",

197 .
	g ame
 = "Maximum segment size",

198 .
	gty≥
 = 
FIO_OPT_INT
,

199 .
	goff1
 = 
off£tof
(
√tio_›ti⁄s
, 
mss
),

200 .
	gmövÆ
 = 0,

201 .
	ghñp
 = "Set TCP maximum segment size",

202 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

203 .
	ggroup
 = 
FIO_OPT_G_NETIO
,

207 .
	g«me
 = 
NULL
,

211 
ölöe
 
	$is_udp
(
√tio_›ti⁄s
 *
o
)

213  
o
->
¥Ÿo
 =
FIO_TYPE_UDP
 || o->¥Ÿÿ=
FIO_TYPE_UDP_V6
;

214 
	}
}

216 
ölöe
 
	$is_t˝
(
√tio_›ti⁄s
 *
o
)

218  
o
->
¥Ÿo
 =
FIO_TYPE_TCP
 || o->¥Ÿÿ=
FIO_TYPE_TCP_V6
;

219 
	}
}

221 
ölöe
 
	$is_ùv6
(
√tio_›ti⁄s
 *
o
)

223  
o
->
¥Ÿo
 =
FIO_TYPE_UDP_V6
 || o->¥Ÿÿ=
FIO_TYPE_TCP_V6
;

224 
	}
}

226 
	$£t_wödow_size
(
thªad_d©a
 *
td
, 
fd
)

228 #ifde‡
CONFIG_NET_WINDOWSIZE


229 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

230 
wss
;

231 
¢d
, 
rcv
, 
ªt
;

233 i‡(!
o
->
wödow_size
)

236 
rcv
 = 
o
->
li°í
 || o->
pögp⁄g
;

237 
¢d
 = !
o
->
li°í
 || o->
pögp⁄g
;

238 
wss
 = 
o
->
wödow_size
;

239 
ªt
 = 0;

241 i‡(
rcv
) {

242 
ªt
 = 
	`£tsock›t
(
fd
, 
SOL_SOCKET
, 
SO_RCVBUF
, (*Ë&
wss
,

243 (
wss
));

244 i‡(
ªt
 < 0)

245 
	`td_vîr‹
(
td
, 
î∫o
, "rcvbuf window size");

247 i‡(
¢d
 && !
ªt
) {

248 
ªt
 = 
	`£tsock›t
(
fd
, 
SOL_SOCKET
, 
SO_SNDBUF
, (*Ë&
wss
,

249 (
wss
));

250 i‡(
ªt
 < 0)

251 
	`td_vîr‹
(
td
, 
î∫o
, "sndbuf window size");

254  
ªt
;

256 
	`td_vîr‹
(
td
, -
EINVAL
, "setsockopt window size");

259 
	}
}

261 
	$£t_mss
(
thªad_d©a
 *
td
, 
fd
)

263 #ifde‡
CONFIG_NET_MSS


264 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

265 
mss
;

266 
ªt
;

268 i‡(!
o
->
mss
 || !
	`is_t˝
(o))

271 
mss
 = 
o
->mss;

272 
ªt
 = 
	`£tsock›t
(
fd
, 
IPPROTO_TCP
, 
TCP_MAXSEG
, (*Ë&
mss
,

273 (
mss
));

274 i‡(
ªt
 < 0)

275 
	`td_vîr‹
(
td
, 
î∫o
, "setsockopt TCP_MAXSEG");

277  
ªt
;

279 
	`td_vîr‹
(
td
, -
EINVAL
, "setsockopt TCP_MAXSEG");

282 
	}
}

289 
	$pﬁl_waô
(
thªad_d©a
 *
td
, 
fd
, 
evíts
)

291 
pﬁlfd
 
pfd
;

292 
ªt
;

294 !
td
->
ãrmö©e
) {

295 
pfd
.
fd
 = fd;

296 
pfd
.
evíts
 =Évents;

297 
ªt
 = 
	`pﬁl
(&
pfd
, 1, -1);

298 i‡(
ªt
 < 0) {

299 i‡(
î∫o
 =
EINTR
)

302 
	`td_vîr‹
(
td
, 
î∫o
, "poll");

304 } i‡(!
ªt
)

310 i‡(
pfd
.
ªvíts
 & 
evíts
)

314 
	}
}

316 
	$fio_√tio_is_mu…iˇ°
(c⁄° *
mˇddr
)

318 
ö_addr_t
 
addr
 = 
	`öë_√tw‹k
(
mˇddr
);

319 i‡(
addr
 == -1)

322 i‡(
	`öë_√tw‹k
("224.0.0.0"Ë<
addr
 &&

323 
	`öë_√tw‹k
("239.255.255.255"Ë>
addr
)

327 
	}
}

330 
	$fio_√tio_¥ï
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

332 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

337 i‡(
	`is_t˝
(
o
))

340 i‡((
o
->
li°í
 && 
io_u
->
ddú
 =
DDIR_WRITE
) ||

341 (!
o
->
li°í
 && 
io_u
->
ddú
 =
DDIR_READ
)) {

342 
	`td_vîr‹
(
td
, 
EINVAL
, "bad direction");

347 
	}
}

349 #ifde‡
CONFIG_LINUX_SPLICE


350 
	$•li˚_io_u
(
fdö
, 
fdout
, 
Àn
)

352 
byãs
 = 0;

354 
Àn
) {

355 
ªt
 = 
	`•li˚
(
fdö
, 
NULL
, 
fdout
, NULL, 
Àn
, 0);

357 i‡(
ªt
 < 0) {

358 i‡(!
byãs
)

359 
byãs
 = 
ªt
;

362 } i‡(!
ªt
)

365 
byãs
 +
ªt
;

366 
Àn
 -
ªt
;

369  
byãs
;

370 
	}
}

375 
	$•li˚_ö
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

377 
√tio_d©a
 *
nd
 = 
td
->
io_›s_d©a
;

379  
	`•li˚_io_u
(
io_u
->
fûe
->
fd
, 
nd
->
pùes
[1], io_u->
x„r_buÊí
);

380 
	}
}

385 
	$•li˚_out
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

386 
Àn
)

388 
√tio_d©a
 *
nd
 = 
td
->
io_›s_d©a
;

390  
	`•li˚_io_u
(
nd
->
pùes
[0], 
io_u
->
fûe
->
fd
, 
Àn
);

391 
	}
}

393 
	$vm•li˚_io_u
(
io_u
 *io_u, 
fd
, 
Àn
)

395 
iovec
 
iov
 = {

396 .
iov_ba£
 = 
io_u
->
x„r_buf
,

397 .
iov_Àn
 = 
Àn
,

399 
byãs
 = 0;

401 
iov
.
iov_Àn
) {

402 
ªt
 = 
	`vm•li˚
(
fd
, &
iov
, 1, 
SPLICE_F_MOVE
);

404 i‡(
ªt
 < 0) {

405 i‡(!
byãs
)

406 
byãs
 = 
ªt
;

408 } i‡(!
ªt
)

411 
iov
.
iov_Àn
 -
ªt
;

412 
iov
.
iov_ba£
 +
ªt
;

413 
byãs
 +
ªt
;

416  
byãs
;

418 
	}
}

423 
	$vm•li˚_io_u_out
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

424 
Àn
)

426 
√tio_d©a
 *
nd
 = 
td
->
io_›s_d©a
;

428  
	`vm•li˚_io_u
(
io_u
, 
nd
->
pùes
[0], 
Àn
);

429 
	}
}

434 
	$vm•li˚_io_u_ö
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

436 
√tio_d©a
 *
nd
 = 
td
->
io_›s_d©a
;

438  
	`vm•li˚_io_u
(
io_u
, 
nd
->
pùes
[1], io_u->
x„r_buÊí
);

439 
	}
}

445 
	$fio_√tio_•li˚_ö
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

447 
ªt
;

449 
ªt
 = 
	`•li˚_ö
(
td
, 
io_u
);

450 i‡(
ªt
 > 0)

451  
	`vm•li˚_io_u_out
(
td
, 
io_u
, 
ªt
);

453  
ªt
;

454 
	}
}

460 
	$fio_√tio_•li˚_out
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

462 
ªt
;

464 
ªt
 = 
	`vm•li˚_io_u_ö
(
td
, 
io_u
);

465 i‡(
ªt
 > 0)

466  
	`•li˚_out
(
td
, 
io_u
, 
ªt
);

468  
ªt
;

469 
	}
}

471 
	$fio_√tio_•li˚_ö
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

473 
î∫o
 = 
EOPNOTSUPP
;

475 
	}
}

477 
	$fio_√tio_•li˚_out
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

479 
î∫o
 = 
EOPNOTSUPP
;

481 
	}
}

484 
	$°‹e_udp_£q
(
√tio_d©a
 *
nd
, 
io_u
 *io_u)

486 
udp_£q
 *
us
;

488 i‡(
io_u
->
x„r_buÊí
 < (*
us
))

491 
us
 = 
io_u
->
x„r_buf
 + io_u->
x„r_buÊí
 - (*us);

492 
us
->
magic
 = 
	`˝u_to_À64
((
uöt64_t
Ë
FIO_UDP_SEQ_MAGIC
);

493 
us
->
bs
 = 
	`˝u_to_À64
((
uöt64_t
Ë
io_u
->
x„r_buÊí
);

494 
us
->
£q
 = 
	`˝u_to_À64
(
nd
->
udp_£nd_£q
++);

495 
	}
}

497 
	$vîify_udp_£q
(
thªad_d©a
 *
td
, 
√tio_d©a
 *
nd
,

498 
io_u
 *io_u)

500 
udp_£q
 *
us
;

501 
uöt64_t
 
£q
;

503 i‡(
io_u
->
x„r_buÊí
 < (*
us
))

506 i‡(
nd
->
£q_off
)

509 
us
 = 
io_u
->
x„r_buf
 + io_u->
x„r_buÊí
 - (*us);

510 i‡(
	`À64_to_˝u
(
us
->
magic
Ë!
FIO_UDP_SEQ_MAGIC
)

512 i‡(
	`À64_to_˝u
(
us
->
bs
Ë!
io_u
->
x„r_buÊí
) {

513 
nd
->
£q_off
 = 1;

517 
£q
 = 
	`À64_to_˝u
(
us
->seq);

519 i‡(
£q
 !
nd
->
udp_ªcv_£q
)

520 
td
->
ts
.
dr›_io_u
[
io_u
->
ddú
] +
£q
 - 
nd
->
udp_ªcv_£q
;

522 
nd
->
udp_ªcv_£q
 = 
£q
 + 1;

523 
	}
}

525 
	$fio_√tio_£nd
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

527 
√tio_d©a
 *
nd
 = 
td
->
io_›s_d©a
;

528 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

529 
ªt
, 
Êags
 = 0;

532 i‡(
	`is_udp
(
o
)) {

533 c⁄° 
sockaddr
 *
to
;

534 
sockÀn_t
 
Àn
;

536 i‡(
	`is_ùv6
(
o
)) {

537 
to
 = (
sockaddr
 *Ë&
nd
->
addr6
;

538 
Àn
 = (
nd
->
addr6
);

540 
to
 = (
sockaddr
 *Ë&
nd
->
addr
;

541 
Àn
 = (
nd
->
addr
);

544 i‡(
td
->
o
.
vîify
 =
VERIFY_NONE
)

545 
	`°‹e_udp_£q
(
nd
, 
io_u
);

547 
ªt
 = 
	`£ndto
(
io_u
->
fûe
->
fd
, io_u->
x„r_buf
,

548 
io_u
->
x„r_buÊí
, 
Êags
, 
to
, 
Àn
);

553 #ifde‡
MSG_MORE


554 i‡((
td
->
this_io_byãs
[
DDIR_WRITE
] + 
io_u
->
x„r_buÊí
 <

555 
td
->
o
.
size
Ë&& !o->
pögp⁄g
)

556 
Êags
 |
MSG_MORE
;

558 
ªt
 = 
	`£nd
(
io_u
->
fûe
->
fd
, io_u->
x„r_buf
,

559 
io_u
->
x„r_buÊí
, 
Êags
);

561 i‡(
ªt
 > 0)

564 
ªt
 = 
	`pﬁl_waô
(
td
, 
io_u
->
fûe
->
fd
, 
POLLOUT
);

565 i‡(
ªt
 <= 0)

569  
ªt
;

570 
	}
}

572 
	$is_˛o£_msg
(
io_u
 *io_u, 
Àn
)

574 
udp_˛o£_msg
 *
msg
;

576 i‡(
Àn
 !(
udp_˛o£_msg
))

579 
msg
 = 
io_u
->
x„r_buf
;

580 i‡(
	`À32_to_˝u
(
msg
->
magic
Ë!
FIO_LINK_OPEN_CLOSE_MAGIC
)

582 i‡(
	`À32_to_˝u
(
msg
->
cmd
Ë!
FIO_LINK_CLOSE
)

586 
	}
}

588 
	$fio_√tio_ªcv
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

590 
√tio_d©a
 *
nd
 = 
td
->
io_›s_d©a
;

591 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

592 
ªt
, 
Êags
 = 0;

595 i‡(
	`is_udp
(
o
)) {

596 
sockaddr
 *
‰om
;

597 
sockÀn_t
 
l
, *
Àn
 = &l;

599 i‡(
o
->
li°í
) {

600 i‡(!
	`is_ùv6
(
o
)) {

601 
‰om
 = (
sockaddr
 *Ë&
nd
->
addr
;

602 *
Àn
 = (
nd
->
addr
);

604 
‰om
 = (
sockaddr
 *Ë&
nd
->
addr6
;

605 *
Àn
 = (
nd
->
addr6
);

608 
‰om
 = 
NULL
;

609 
Àn
 = 
NULL
;

612 
ªt
 = 
	`ªcv‰om
(
io_u
->
fûe
->
fd
, io_u->
x„r_buf
,

613 
io_u
->
x„r_buÊí
, 
Êags
, 
‰om
, 
Àn
);

615 i‡(
	`is_˛o£_msg
(
io_u
, 
ªt
)) {

616 
td
->
d⁄e
 = 1;

620 
ªt
 = 
	`ªcv
(
io_u
->
fûe
->
fd
, io_u->
x„r_buf
,

621 
io_u
->
x„r_buÊí
, 
Êags
);

623 i‡(
	`is_˛o£_msg
(
io_u
, 
ªt
)) {

624 
td
->
d⁄e
 = 1;

628 i‡(
ªt
 > 0)

630 i‡(!
ªt
 && (
Êags
 & 
MSG_WAITALL
))

633 
ªt
 = 
	`pﬁl_waô
(
td
, 
io_u
->
fûe
->
fd
, 
POLLIN
);

634 i‡(
ªt
 <= 0)

636 
Êags
 |
MSG_WAITALL
;

639 i‡(
	`is_udp
(
o
Ë&& 
td
->o.
vîify
 =
VERIFY_NONE
)

640 
	`vîify_udp_£q
(
td
, 
nd
, 
io_u
);

642  
ªt
;

643 
	}
}

645 
fio_q_°©us
 
	$__fio_√tio_queue
(
thªad_d©a
 *
td
,

646 
io_u
 *io_u,

647 
fio_ddú
 
ddú
)

649 
√tio_d©a
 *
nd
 = 
td
->
io_›s_d©a
;

650 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

651 
ªt
;

653 i‡(
ddú
 =
DDIR_WRITE
) {

654 i‡(!
nd
->
u£_•li˚
 || 
	`is_udp
(
o
) ||

655 
o
->
¥Ÿo
 =
FIO_TYPE_UNIX
)

656 
ªt
 = 
	`fio_√tio_£nd
(
td
, 
io_u
);

658 
ªt
 = 
	`fio_√tio_•li˚_out
(
td
, 
io_u
);

659 } i‡(
ddú
 =
DDIR_READ
) {

660 i‡(!
nd
->
u£_•li˚
 || 
	`is_udp
(
o
) ||

661 
o
->
¥Ÿo
 =
FIO_TYPE_UNIX
)

662 
ªt
 = 
	`fio_√tio_ªcv
(
td
, 
io_u
);

664 
ªt
 = 
	`fio_√tio_•li˚_ö
(
td
, 
io_u
);

666 
ªt
 = 0;

668 i‡(
ªt
 !(Ë
io_u
->
x„r_buÊí
) {

669 i‡(
ªt
 > 0) {

670 
io_u
->
ªsid
 = io_u->
x„r_buÊí
 - 
ªt
;

671 
io_u
->
îr‹
 = 0;

672  
FIO_Q_COMPLETED
;

673 } i‡(!
ªt
)

674  
FIO_Q_BUSY
;

676 
îr
 = 
î∫o
;

678 i‡(
ddú
 =
DDIR_WRITE
 && 
îr
 =
EMSGSIZE
)

679  
FIO_Q_BUSY
;

681 
io_u
->
îr‹
 = 
îr
;

685 i‡(
io_u
->
îr‹
)

686 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "xfer");

688  
FIO_Q_COMPLETED
;

689 
	}
}

691 
fio_q_°©us
 
	$fio_√tio_queue
(
thªad_d©a
 *
td
,

692 
io_u
 *io_u)

694 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

695 
ªt
;

697 
	`fio_ro_check
(
td
, 
io_u
);

699 
ªt
 = 
	`__fio_√tio_queue
(
td
, 
io_u
, io_u->
ddú
);

700 i‡(!
o
->
pögp⁄g
 || 
ªt
 !
FIO_Q_COMPLETED
)

701  
ªt
;

706 i‡(
	`td_ªad
(
td
Ë&& 
io_u
->
ddú
 =
DDIR_READ
)

707 
ªt
 = 
	`__fio_√tio_queue
(
td
, 
io_u
, 
DDIR_WRITE
);

708 i‡(
	`td_wrôe
(
td
Ë&& 
io_u
->
ddú
 =
DDIR_WRITE
)

709 
ªt
 = 
	`__fio_√tio_queue
(
td
, 
io_u
, 
DDIR_READ
);

711  
ªt
;

712 
	}
}

714 
	$fio_√tio_c⁄√˘
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

716 
√tio_d©a
 *
nd
 = 
td
->
io_›s_d©a
;

717 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

718 
ty≥
, 
domaö
;

720 i‡(
o
->
¥Ÿo
 =
FIO_TYPE_TCP
) {

721 
domaö
 = 
AF_INET
;

722 
ty≥
 = 
SOCK_STREAM
;

723 } i‡(
o
->
¥Ÿo
 =
FIO_TYPE_TCP_V6
) {

724 
domaö
 = 
AF_INET6
;

725 
ty≥
 = 
SOCK_STREAM
;

726 } i‡(
o
->
¥Ÿo
 =
FIO_TYPE_UDP
) {

727 
domaö
 = 
AF_INET
;

728 
ty≥
 = 
SOCK_DGRAM
;

729 } i‡(
o
->
¥Ÿo
 =
FIO_TYPE_UDP_V6
) {

730 
domaö
 = 
AF_INET6
;

731 
ty≥
 = 
SOCK_DGRAM
;

732 } i‡(
o
->
¥Ÿo
 =
FIO_TYPE_UNIX
) {

733 
domaö
 = 
AF_UNIX
;

734 
ty≥
 = 
SOCK_STREAM
;

736 
	`log_îr
("fio: badÇëw‹kÅy≥ %d\n", 
o
->
¥Ÿo
);

737 
f
->
fd
 = -1;

741 
f
->
fd
 = 
	`sockë
(
domaö
, 
ty≥
, 0);

742 i‡(
f
->
fd
 < 0) {

743 
	`td_vîr‹
(
td
, 
î∫o
, "socket");

747 #ifde‡
CONFIG_TCP_NODELAY


748 i‡(
o
->
nodñay
 && 
	`is_t˝
(o)) {

749 
›tvÆ
 = 1;

751 i‡(
	`£tsock›t
(
f
->
fd
, 
IPPROTO_TCP
, 
TCP_NODELAY
, (*Ë&
›tvÆ
, ()) < 0) {

752 
	`log_îr
("fio: c™nŸ së TCP_NODELAY o±i⁄ o¿sockë (%s), dißbÀ wôh 'nodñay=0'\n", 
	`°ªº‹
(
î∫o
));

758 i‡(
	`£t_wödow_size
(
td
, 
f
->
fd
)) {

759 
	`˛o£
(
f
->
fd
);

762 i‡(
	`£t_mss
(
td
, 
f
->
fd
)) {

763 
	`˛o£
(
f
->
fd
);

767 i‡(
	`is_udp
(
o
)) {

768 i‡(!
	`fio_√tio_is_mu…iˇ°
(
td
->
o
.
fûíame
))

770 i‡(
	`is_ùv6
(
o
)) {

771 
	`log_îr
("fio: multicastÇot supported on IPv6\n");

772 
	`˛o£
(
f
->
fd
);

776 i‡(
o
->
ötfc
) {

777 
ö_addr
 
öãrÁ˚_addr
;

779 i‡(
	`öë_©⁄
(
o
->
ötfc
, &
öãrÁ˚_addr
) == 0) {

780 
	`log_îr
("fio: interfaceÇot valid interface IP\n");

781 
	`˛o£
(
f
->
fd
);

784 i‡(
	`£tsock›t
(
f
->
fd
, 
IPPROTO_IP
, 
IP_MULTICAST_IF
, (c⁄° *)&
öãrÁ˚_addr
, (interface_addr)) < 0) {

785 
	`td_vîr‹
(
td
, 
î∫o
, "setsockopt IP_MULTICAST_IF");

786 
	`˛o£
(
f
->
fd
);

790 i‡(
	`£tsock›t
(
f
->
fd
, 
IPPROTO_IP
, 
IP_MULTICAST_TTL
, (c⁄° *)&
o
->
âl
, (o->ttl)) < 0) {

791 
	`td_vîr‹
(
td
, 
î∫o
, "setsockopt IP_MULTICAST_TTL");

792 
	`˛o£
(
f
->
fd
);

796 } i‡(
o
->
¥Ÿo
 =
FIO_TYPE_TCP
) {

797 
sockÀn_t
 
Àn
 = (
nd
->
addr
);

799 i‡(
	`c⁄√˘
(
f
->
fd
, (
sockaddr
 *Ë&
nd
->
addr
, 
Àn
) < 0) {

800 
	`td_vîr‹
(
td
, 
î∫o
, "connect");

801 
	`˛o£
(
f
->
fd
);

804 } i‡(
o
->
¥Ÿo
 =
FIO_TYPE_TCP_V6
) {

805 
sockÀn_t
 
Àn
 = (
nd
->
addr6
);

807 i‡(
	`c⁄√˘
(
f
->
fd
, (
sockaddr
 *Ë&
nd
->
addr6
, 
Àn
) < 0) {

808 
	`td_vîr‹
(
td
, 
î∫o
, "connect");

809 
	`˛o£
(
f
->
fd
);

814 
sockaddr_un
 *
addr
 = &
nd
->
addr_un
;

815 
sockÀn_t
 
Àn
;

817 
Àn
 = (
addr
->
sun_Ámûy
Ë+ 
	`°æí
◊ddr->
sun_∑th
) + 1;

819 i‡(
	`c⁄√˘
(
f
->
fd
, (
sockaddr
 *Ë
addr
, 
Àn
) < 0) {

820 
	`td_vîr‹
(
td
, 
î∫o
, "connect");

821 
	`˛o£
(
f
->
fd
);

827 
	}
}

829 
	$fio_√tio_ac˚±
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

831 
√tio_d©a
 *
nd
 = 
td
->
io_›s_d©a
;

832 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

833 
sockÀn_t
 
sockÀn
;

834 
°©e
;

836 i‡(
	`is_udp
(
o
)) {

837 
f
->
fd
 = 
nd
->
li°ífd
;

841 
°©e
 = 
td
->
run°©e
;

842 
	`td_£t_run°©e
(
td
, 
TD_SETTING_UP
);

844 
	`log_öfo
("fio: waiting for connection\n");

846 i‡(
	`pﬁl_waô
(
td
, 
nd
->
li°ífd
, 
POLLIN
) < 0)

847 
îr
;

849 i‡(
o
->
¥Ÿo
 =
FIO_TYPE_TCP
) {

850 
sockÀn
 = (
nd
->
addr
);

851 
f
->
fd
 = 
	`ac˚±
(
nd
->
li°ífd
, (
sockaddr
 *Ë&nd->
addr
, &
sockÀn
);

853 
sockÀn
 = (
nd
->
addr6
);

854 
f
->
fd
 = 
	`ac˚±
(
nd
->
li°ífd
, (
sockaddr
 *Ë&nd->
addr6
, &
sockÀn
);

857 i‡(
f
->
fd
 < 0) {

858 
	`td_vîr‹
(
td
, 
î∫o
, "accept");

859 
îr
;

862 #ifde‡
CONFIG_TCP_NODELAY


863 i‡(
o
->
nodñay
 && 
	`is_t˝
(o)) {

864 
›tvÆ
 = 1;

866 i‡(
	`£tsock›t
(
f
->
fd
, 
IPPROTO_TCP
, 
TCP_NODELAY
, (*Ë&
›tvÆ
, ()) < 0) {

867 
	`log_îr
("fio: c™nŸ së TCP_NODELAY o±i⁄ o¿sockë (%s), dißbÀ wôh 'nodñay=0'\n", 
	`°ªº‹
(
î∫o
));

873 
	`ª£t_Æl_°©s
(
td
);

874 
	`td_£t_run°©e
(
td
, 
°©e
);

876 
îr
:

877 
	`td_£t_run°©e
(
td
, 
°©e
);

879 
	}
}

881 
	$fio_√tio_£nd_˛o£
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

883 
√tio_d©a
 *
nd
 = 
td
->
io_›s_d©a
;

884 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

885 
udp_˛o£_msg
 
msg
;

886 
sockaddr
 *
to
;

887 
sockÀn_t
 
Àn
;

888 
ªt
;

890 i‡(
	`is_ùv6
(
o
)) {

891 
to
 = (
sockaddr
 *Ë&
nd
->
addr6
;

892 
Àn
 = (
nd
->
addr6
);

894 
to
 = (
sockaddr
 *Ë&
nd
->
addr
;

895 
Àn
 = (
nd
->
addr
);

898 
msg
.
magic
 = 
	`˝u_to_À32
((
uöt32_t
Ë
FIO_LINK_OPEN_CLOSE_MAGIC
);

899 
msg
.
cmd
 = 
	`˝u_to_À32
((
uöt32_t
Ë
FIO_LINK_CLOSE
);

901 
ªt
 = 
	`£ndto
(
f
->
fd
, (*Ë&
msg
, (msg), 
MSG_WAITALL
, 
to
, 
Àn
);

902 i‡(
ªt
 < 0)

903 
	`td_vîr‹
(
td
, 
î∫o
, "sendto udpÜink close");

904 
	}
}

906 
	$fio_√tio_˛o£_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

911 
	`fio_√tio_£nd_˛o£
(
td
, 
f
);

913  
	`gíîic_˛o£_fûe
(
td
, 
f
);

914 
	}
}

916 
	$fio_√tio_udp_ªcv_›í
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

918 
√tio_d©a
 *
nd
 = 
td
->
io_›s_d©a
;

919 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

920 
udp_˛o£_msg
 
msg
;

921 
sockaddr
 *
to
;

922 
sockÀn_t
 
Àn
;

923 
ªt
;

925 i‡(
	`is_ùv6
(
o
)) {

926 
Àn
 = (
nd
->
addr6
);

927 
to
 = (
sockaddr
 *Ë&
nd
->
addr6
;

929 
Àn
 = (
nd
->
addr
);

930 
to
 = (
sockaddr
 *Ë&
nd
->
addr
;

933 
ªt
 = 
	`ªcv‰om
(
f
->
fd
, (*Ë&
msg
, (msg), 
MSG_WAITALL
, 
to
, &
Àn
);

934 i‡(
ªt
 < 0) {

935 
	`td_vîr‹
(
td
, 
î∫o
, "recvfrom udpÜink open");

936  
ªt
;

939 i‡(
	`¡ohl
(
msg
.
magic
Ë!
FIO_LINK_OPEN_CLOSE_MAGIC
 ||

940 
	`¡ohl
(
msg
.
cmd
Ë!
FIO_LINK_OPEN
) {

941 
	`log_îr
("fio: bad udp open magic %x/%x\n",

942 (Ë
	`¡ohl
(
msg
.
magic
),

943 (Ë
	`¡ohl
(
msg
.
cmd
));

947 
	`fio_gëtime
(&
td
->
°¨t
, 
NULL
);

949 
	}
}

951 
	$fio_√tio_£nd_›í
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

953 
√tio_d©a
 *
nd
 = 
td
->
io_›s_d©a
;

954 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

955 
udp_˛o£_msg
 
msg
;

956 
sockaddr
 *
to
;

957 
sockÀn_t
 
Àn
;

958 
ªt
;

960 i‡(
	`is_ùv6
(
o
)) {

961 
Àn
 = (
nd
->
addr6
);

962 
to
 = (
sockaddr
 *Ë&
nd
->
addr6
;

964 
Àn
 = (
nd
->
addr
);

965 
to
 = (
sockaddr
 *Ë&
nd
->
addr
;

968 
msg
.
magic
 = 
	`ht⁄l
(
FIO_LINK_OPEN_CLOSE_MAGIC
);

969 
msg
.
cmd
 = 
	`ht⁄l
(
FIO_LINK_OPEN
);

971 
ªt
 = 
	`£ndto
(
f
->
fd
, (*Ë&
msg
, (msg), 
MSG_WAITALL
, 
to
, 
Àn
);

972 i‡(
ªt
 < 0) {

973 
	`td_vîr‹
(
td
, 
î∫o
, "sendto udpÜink open");

974  
ªt
;

978 
	}
}

980 
	$fio_√tio_›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

982 
ªt
;

983 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

985 i‡(
o
->
li°í
)

986 
ªt
 = 
	`fio_√tio_ac˚±
(
td
, 
f
);

988 
ªt
 = 
	`fio_√tio_c⁄√˘
(
td
, 
f
);

990 i‡(
ªt
) {

991 
f
->
fd
 = -1;

992  
ªt
;

995 i‡(
	`is_udp
(
o
)) {

996 i‡(
	`td_wrôe
(
td
))

997 
ªt
 = 
	`fio_√tio_£nd_›í
(
td
, 
f
);

999 
°©e
;

1001 
°©e
 = 
td
->
run°©e
;

1002 
	`td_£t_run°©e
(
td
, 
TD_SETTING_UP
);

1003 
ªt
 = 
	`fio_√tio_udp_ªcv_›í
(
td
, 
f
);

1004 
	`td_£t_run°©e
(
td
, 
°©e
);

1008 i‡(
ªt
)

1009 
	`fio_√tio_˛o£_fûe
(
td
, 
f
);

1011  
ªt
;

1012 
	}
}

1014 
	$fio_fûl_addr
(
thªad_d©a
 *
td
, c⁄° *
ho°
, 
af
,

1015 *
d°
, 
addröfo
 **
ªs
)

1017 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

1018 
addröfo
 
höts
;

1019 
ªt
;

1021 i‡(
	`öë_±⁄
(
af
, 
ho°
, 
d°
))

1024 
	`mem£t
(&
höts
, 0, (hints));

1026 i‡(
	`is_t˝
(
o
))

1027 
höts
.
ai_sockty≥
 = 
SOCK_STREAM
;

1029 
höts
.
ai_sockty≥
 = 
SOCK_DGRAM
;

1031 i‡(
	`is_ùv6
(
o
))

1032 
höts
.
ai_Ámûy
 = 
AF_INET6
;

1034 
höts
.
ai_Ámûy
 = 
AF_INET
;

1036 
ªt
 = 
	`gëaddröfo
(
ho°
, 
NULL
, &
höts
, 
ªs
);

1037 i‡(
ªt
) {

1038 
e
 = 
EINVAL
;

1039 
°r
[128];

1041 i‡(
ªt
 =
EAI_SYSTEM
)

1042 
e
 = 
î∫o
;

1044 
	`¢¥ötf
(
°r
, (°r), "gëaddröfo: %s", 
	`gai_°ªº‹
(
ªt
));

1045 
	`td_vîr‹
(
td
, 
e
, 
°r
);

1050 
	}
}

1052 
	$fio_√tio_£tup_c⁄√˘_öë
(
thªad_d©a
 *
td
,

1053 c⁄° *
ho°
, 
p‹t
)

1055 
√tio_d©a
 *
nd
 = 
td
->
io_›s_d©a
;

1056 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

1057 
addröfo
 *
ªs
 = 
NULL
;

1058 *
d°
, *
§c
;

1059 
af
, 
Àn
;

1061 i‡(!
ho°
) {

1062 
	`log_îr
("fio: connect withÇo hostÅo connectÅo.\n");

1063 i‡(
	`td_ªad
(
td
))

1064 
	`log_îr
("fio: did you forgetÅo set 'listen'?\n");

1066 
	`td_vîr‹
(
td
, 
EINVAL
, "no hostname= set");

1070 
nd
->
addr
.
sö_Ámûy
 = 
AF_INET
;

1071 
nd
->
addr
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

1072 
nd
->
addr6
.
sö6_Ámûy
 = 
AF_INET6
;

1073 
nd
->
addr6
.
sö6_p‹t
 = 
	`ht⁄s
(
p‹t
);

1075 i‡(
	`is_ùv6
(
o
)) {

1076 
af
 = 
AF_INET6
;

1077 
d°
 = &
nd
->
addr6
.
sö6_addr
;

1079 
af
 = 
AF_INET
;

1080 
d°
 = &
nd
->
addr
.
sö_addr
;

1083 i‡(
	`fio_fûl_addr
(
td
, 
ho°
, 
af
, 
d°
, &
ªs
))

1086 i‡(!
ªs
)

1089 i‡(
	`is_ùv6
(
o
)) {

1090 
Àn
 = (
nd
->
addr6
.
sö6_addr
);

1091 
§c
 = &((
sockaddr_ö6
 *Ë
ªs
->
ai_addr
)->
sö6_addr
;

1093 
Àn
 = (
nd
->
addr
.
sö_addr
);

1094 
§c
 = &((
sockaddr_ö
 *Ë
ªs
->
ai_addr
)->
sö_addr
;

1097 
	`mem˝y
(
d°
, 
§c
, 
Àn
);

1098 
	`‰ìaddröfo
(
ªs
);

1100 
	}
}

1102 
	$fio_√tio_£tup_c⁄√˘_unix
(
thªad_d©a
 *
td
,

1103 c⁄° *
∑th
)

1105 
√tio_d©a
 *
nd
 = 
td
->
io_›s_d©a
;

1106 
sockaddr_un
 *
soun
 = &
nd
->
addr_un
;

1108 
soun
->
sun_Ámûy
 = 
AF_UNIX
;

1109 
	`¢¥ötf
(
soun
->
sun_∑th
, (soun->sun_∑th), "%s", 
∑th
);

1111 
	}
}

1113 
	$fio_√tio_£tup_c⁄√˘
(
thªad_d©a
 *
td
)

1115 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

1117 i‡(
	`is_udp
(
o
Ë|| 
	`is_t˝
(o))

1118  
	`fio_√tio_£tup_c⁄√˘_öë
(
td
,Åd->
o
.
fûíame
,o->
p‹t
);

1120  
	`fio_√tio_£tup_c⁄√˘_unix
(
td
,Åd->
o
.
fûíame
);

1121 
	}
}

1123 
	$fio_√tio_£tup_li°í_unix
(
thªad_d©a
 *
td
, c⁄° *
∑th
)

1125 
√tio_d©a
 *
nd
 = 
td
->
io_›s_d©a
;

1126 
sockaddr_un
 *
addr
 = &
nd
->
addr_un
;

1127 
mode_t
 
mode
;

1128 
Àn
, 
fd
;

1130 
fd
 = 
	`sockë
(
AF_UNIX
, 
SOCK_STREAM
, 0);

1131 i‡(
fd
 < 0) {

1132 
	`log_îr
("fio: sockë: %s\n", 
	`°ªº‹
(
î∫o
));

1136 
mode
 = 
	`umask
(000);

1138 
addr
->
sun_Ámûy
 = 
AF_UNIX
;

1139 
	`¢¥ötf
(
addr
->
sun_∑th
, ◊ddr->sun_∑th), "%s", 
∑th
);

1140 
	`u∆ök
(
∑th
);

1142 
Àn
 = (
addr
->
sun_Ámûy
Ë+ 
	`°æí
(
∑th
) + 1;

1144 i‡(
	`böd
(
fd
, (
sockaddr
 *Ë
addr
, 
Àn
) < 0) {

1145 
	`log_îr
("fio: böd: %s\n", 
	`°ªº‹
(
î∫o
));

1146 
	`˛o£
(
fd
);

1150 
	`umask
(
mode
);

1151 
nd
->
li°ífd
 = 
fd
;

1153 
	}
}

1155 
	$fio_√tio_£tup_li°í_öë
(
thªad_d©a
 *
td
, 
p‹t
)

1157 
√tio_d©a
 *
nd
 = 
td
->
io_›s_d©a
;

1158 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

1159 
ù_mªq
 
mr
;

1160 
sockaddr_ö
 
sö
;

1161 
sockaddr
 *
ßddr
;

1162 
fd
, 
›t
, 
ty≥
, 
domaö
;

1163 
sockÀn_t
 
Àn
;

1165 
	`mem£t
(&
sö
, 0, (sin));

1167 i‡(
o
->
¥Ÿo
 =
FIO_TYPE_TCP
) {

1168 
ty≥
 = 
SOCK_STREAM
;

1169 
domaö
 = 
AF_INET
;

1170 } i‡(
o
->
¥Ÿo
 =
FIO_TYPE_TCP_V6
) {

1171 
ty≥
 = 
SOCK_STREAM
;

1172 
domaö
 = 
AF_INET6
;

1173 } i‡(
o
->
¥Ÿo
 =
FIO_TYPE_UDP
) {

1174 
ty≥
 = 
SOCK_DGRAM
;

1175 
domaö
 = 
AF_INET
;

1176 } i‡(
o
->
¥Ÿo
 =
FIO_TYPE_UDP_V6
) {

1177 
ty≥
 = 
SOCK_DGRAM
;

1178 
domaö
 = 
AF_INET6
;

1180 
	`log_îr
("fio: unknow¿¥Ÿÿ%d\n", 
o
->
¥Ÿo
);

1184 
fd
 = 
	`sockë
(
domaö
, 
ty≥
, 0);

1185 i‡(
fd
 < 0) {

1186 
	`td_vîr‹
(
td
, 
î∫o
, "socket");

1190 
›t
 = 1;

1191 i‡(
	`£tsock›t
(
fd
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*Ë&
›t
, (opt)) < 0) {

1192 
	`td_vîr‹
(
td
, 
î∫o
, "setsockopt");

1193 
	`˛o£
(
fd
);

1196 #ifde‡
SO_REUSEPORT


1197 i‡(
	`£tsock›t
(
fd
, 
SOL_SOCKET
, 
SO_REUSEPORT
, (*Ë&
›t
, (opt)) < 0) {

1198 
	`td_vîr‹
(
td
, 
î∫o
, "setsockopt");

1199 
	`˛o£
(
fd
);

1204 i‡(
	`£t_wödow_size
(
td
, 
fd
)) {

1205 
	`˛o£
(
fd
);

1208 i‡(
	`£t_mss
(
td
, 
fd
)) {

1209 
	`˛o£
(
fd
);

1213 i‡(
td
->
o
.
fûíame
) {

1214 i‡(!
	`is_udp
(
o
Ë|| !
	`fio_√tio_is_mu…iˇ°
(
td
->o.
fûíame
)) {

1215 
	`log_îr
("fio: hostnameÇot valid forÇon-multicast inboundÇetwork IO\n");

1216 
	`˛o£
(
fd
);

1219 i‡(
	`is_ùv6
(
o
)) {

1220 
	`log_îr
("fio: IPv6Çot supported for multicastÇetwork IO\n");

1221 
	`˛o£
(
fd
);

1225 
	`öë_©⁄
(
td
->
o
.
fûíame
, &
sö
.
sö_addr
);

1227 
mr
.
imr_mu…üddr
 = 
sö
.
sö_addr
;

1228 i‡(
o
->
ötfc
) {

1229 i‡(
	`öë_©⁄
(
o
->
ötfc
, &
mr
.
imr_öãrÁ˚
) == 0) {

1230 
	`log_îr
("fio: interfaceÇot valid interface IP\n");

1231 
	`˛o£
(
fd
);

1235 
mr
.
imr_öãrÁ˚
.
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
);

1238 i‡(
	`£tsock›t
(
fd
, 
IPPROTO_IP
, 
IP_ADD_MEMBERSHIP
, (c⁄° *)&
mr
, (mr)) < 0) {

1239 
	`td_vîr‹
(
td
, 
î∫o
, "setsockopt IP_ADD_MEMBERSHIP");

1240 
	`˛o£
(
fd
);

1245 i‡(!
	`is_ùv6
(
o
)) {

1246 
ßddr
 = (
sockaddr
 *Ë&
nd
->
addr
;

1247 
Àn
 = (
nd
->
addr
);

1249 
nd
->
addr
.
sö_Ámûy
 = 
AF_INET
;

1250 
nd
->
addr
.
sö_addr
.
s_addr
 = 
sö
.sö_addr.s_add∏? sö.sö_addr.s_add∏: 
	`ht⁄l
(
INADDR_ANY
);

1251 
nd
->
addr
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

1253 
ßddr
 = (
sockaddr
 *Ë&
nd
->
addr6
;

1254 
Àn
 = (
nd
->
addr6
);

1256 
nd
->
addr6
.
sö6_Ámûy
 = 
AF_INET6
;

1257 
nd
->
addr6
.
sö6_addr
 = 
ö6addr_™y
;

1258 
nd
->
addr6
.
sö6_p‹t
 = 
	`ht⁄s
(
p‹t
);

1261 i‡(
	`böd
(
fd
, 
ßddr
, 
Àn
) < 0) {

1262 
	`˛o£
(
fd
);

1263 
	`td_vîr‹
(
td
, 
î∫o
, "bind");

1267 
nd
->
li°ífd
 = 
fd
;

1269 
	}
}

1271 
	$fio_√tio_£tup_li°í
(
thªad_d©a
 *
td
)

1273 
√tio_d©a
 *
nd
 = 
td
->
io_›s_d©a
;

1274 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

1275 
ªt
;

1277 i‡(
	`is_udp
(
o
Ë|| 
	`is_t˝
(o))

1278 
ªt
 = 
	`fio_√tio_£tup_li°í_öë
(
td
, 
o
->
p‹t
);

1280 
ªt
 = 
	`fio_√tio_£tup_li°í_unix
(
td
,Åd->
o
.
fûíame
);

1282 i‡(
ªt
)

1283  
ªt
;

1284 i‡(
	`is_udp
(
o
))

1287 i‡(
	`li°í
(
nd
->
li°ífd
, 10) < 0) {

1288 
	`td_vîr‹
(
td
, 
î∫o
, "listen");

1289 
nd
->
li°ífd
 = -1;

1294 
	}
}

1296 
	$fio_√tio_öô
(
thªad_d©a
 *
td
)

1298 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

1299 
ªt
;

1301 #ifde‡
WIN32


1302 
WSADATA
 
wsd
;

1303 
	`WSASèπup
(
	`MAKEWORD
(2,2), &
wsd
);

1306 i‡(
	`td_øndom
(
td
)) {

1307 
	`log_îr
("fio:Çetwork IO can't beÑandom\n");

1311 i‡(
o
->
¥Ÿo
 =
FIO_TYPE_UNIX
 && o->
p‹t
) {

1312 
	`log_îr
("fio:Çetwork IOÖortÇot valid with unix socket\n");

1314 } i‡(
o
->
¥Ÿo
 !
FIO_TYPE_UNIX
 && !o->
p‹t
) {

1315 
	`log_îr
("fio:Çetwork IOÑequiresÖort forÅcp or udp\n");

1319 
o
->
p‹t
 +
td
->
subjob_numbî
;

1321 i‡(!
	`is_t˝
(
o
)) {

1322 i‡(
o
->
li°í
) {

1323 
	`log_îr
("fio:Üisten only valid for TCPÖroto IO\n");

1326 i‡(
	`td_rw
(
td
)) {

1327 
	`log_îr
("fio: datagramÇetwork connections must be"

1331 i‡(
o
->
¥Ÿo
 =
FIO_TYPE_UNIX
 && !
td
->o.
fûíame
) {

1332 
	`log_îr
("fio: UNIX socketsÇeed host/filename\n");

1335 
o
->
li°í
 = 
	`td_ªad
(
td
);

1338 i‡(
o
->
li°í
)

1339 
ªt
 = 
	`fio_√tio_£tup_li°í
(
td
);

1341 
ªt
 = 
	`fio_√tio_£tup_c⁄√˘
(
td
);

1343  
ªt
;

1344 
	}
}

1346 
	$fio_√tio_˛ónup
(
thªad_d©a
 *
td
)

1348 
√tio_d©a
 *
nd
 = 
td
->
io_›s_d©a
;

1350 i‡(
nd
) {

1351 i‡(
nd
->
li°ífd
 != -1)

1352 
	`˛o£
(
nd
->
li°ífd
);

1353 i‡(
nd
->
pùes
[0] != -1)

1354 
	`˛o£
(
nd
->
pùes
[0]);

1355 i‡(
nd
->
pùes
[1] != -1)

1356 
	`˛o£
(
nd
->
pùes
[1]);

1358 
	`‰ì
(
nd
);

1360 
	}
}

1362 
	$fio_√tio_£tup
(
thªad_d©a
 *
td
)

1364 
√tio_d©a
 *
nd
;

1366 i‡(!
td
->
fûes_ödex
) {

1367 
	`add_fûe
(
td
,Åd->
o
.
fûíame
 ?: "net", 0, 0);

1368 
td
->
o
.
ƒ_fûes
 =Åd->o.nr_files ?: 1;

1369 
td
->
o
.
›í_fûes
++;

1372 i‡(!
td
->
io_›s_d©a
) {

1373 
nd
 = 
	`mÆloc
((*nd));

1375 
	`mem£t
(
nd
, 0, (*nd));

1376 
nd
->
li°ífd
 = -1;

1377 
nd
->
pùes
[0] =Çd->pipes[1] = -1;

1378 
td
->
io_›s_d©a
 = 
nd
;

1382 
	}
}

1384 
	$fio_√tio_ãrmö©e
(
thªad_d©a
 *
td
)

1386 
	`kûl
(
td
->
pid
, 
SIGTERM
);

1387 
	}
}

1389 #ifde‡
CONFIG_LINUX_SPLICE


1390 
	$fio_√tio_£tup_•li˚
(
thªad_d©a
 *
td
)

1392 
√tio_d©a
 *
nd
;

1394 
	`fio_√tio_£tup
(
td
);

1396 
nd
 = 
td
->
io_›s_d©a
;

1397 i‡(
nd
) {

1398 i‡(
	`pùe
(
nd
->
pùes
) < 0)

1401 
nd
->
u£_•li˚
 = 1;

1406 
	}
}

1408 
i€ngöe_›s
 
	gi€ngöe_•li˚
 = {

1409 .
«me
 = "netsplice",

1410 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

1411 .
	g¥ï
 = 
fio_√tio_¥ï
,

1412 .
	gqueue
 = 
fio_√tio_queue
,

1413 .
	g£tup
 = 
fio_√tio_£tup_•li˚
,

1414 .
	göô
 = 
fio_√tio_öô
,

1415 .
	g˛ónup
 = 
fio_√tio_˛ónup
,

1416 .
	g›í_fûe
 = 
fio_√tio_›í_fûe
,

1417 .
	g˛o£_fûe
 = 
fio_√tio_˛o£_fûe
,

1418 .
	gãrmö©e
 = 
fio_√tio_ãrmö©e
,

1419 .
	g›ti⁄s
 = 
›ti⁄s
,

1420 .
	g›ti⁄_°ru˘_size
 = (
√tio_›ti⁄s
),

1421 .
	gÊags
 = 
FIO_SYNCIO
 | 
FIO_DISKLESSIO
 | 
FIO_UNIDIR
 |

1422 
FIO_PIPEIO
,

1426 
i€ngöe_›s
 
	gi€ngöe_rw
 = {

1427 .
«me
 = "net",

1428 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

1429 .
	g¥ï
 = 
fio_√tio_¥ï
,

1430 .
	gqueue
 = 
fio_√tio_queue
,

1431 .
	g£tup
 = 
fio_√tio_£tup
,

1432 .
	göô
 = 
fio_√tio_öô
,

1433 .
	g˛ónup
 = 
fio_√tio_˛ónup
,

1434 .
	g›í_fûe
 = 
fio_√tio_›í_fûe
,

1435 .
	g˛o£_fûe
 = 
fio_√tio_˛o£_fûe
,

1436 .
	gãrmö©e
 = 
fio_√tio_ãrmö©e
,

1437 .
	g›ti⁄s
 = 
›ti⁄s
,

1438 .
	g›ti⁄_°ru˘_size
 = (
√tio_›ti⁄s
),

1439 .
	gÊags
 = 
FIO_SYNCIO
 | 
FIO_DISKLESSIO
 | 
FIO_UNIDIR
 |

1440 
FIO_PIPEIO
 | 
FIO_BIT_BASED
,

1443 
	$°r_ho°«me_cb
(*
d©a
, c⁄° *
öput
)

1445 
√tio_›ti⁄s
 *
o
 = 
d©a
;

1447 i‡(
o
->
td
->o.
fûíame
)

1448 
	`‰ì
(
o
->
td
->o.
fûíame
);

1449 
o
->
td
->o.
fûíame
 = 
	`°rdup
(
öput
);

1451 
	}
}

1453 
fio_öô
 
	$fio_√tio_ªgi°î
()

1455 
	`ªgi°î_i€ngöe
(&
i€ngöe_rw
);

1456 #ifde‡
CONFIG_LINUX_SPLICE


1457 
	`ªgi°î_i€ngöe
(&
i€ngöe_•li˚
);

1459 
	}
}

1461 
fio_exô
 
	$fio_√tio_uƒegi°î
()

1463 
	`uƒegi°î_i€ngöe
(&
i€ngöe_rw
);

1464 #ifde‡
CONFIG_LINUX_SPLICE


1465 
	`uƒegi°î_i€ngöe
(&
i€ngöe_•li˚
);

1467 
	}
}

	@engines/nfs.c

1 
	~<°dlib.h
>

2 
	~<pﬁl.h
>

3 
	~<nfsc/libnfs.h
>

4 
	~<nfsc/libnfs-øw.h
>

5 
	~<nfsc/libnfs-øw-mou¡.h
>

7 
	~"../fio.h
"

8 
	~"../›tgroup.h
"

10 
	enfs_›_ty≥
 {

11 
	mNFS_READ_WRITE
 = 0,

12 
	mNFS_STAT_MKDIR_RMDIR
,

13 
	mNFS_STAT_TOUCH_RM
,

16 
	sfio_libnfs_›ti⁄s
 {

17 
nfs_c⁄ãxt
 *
	mc⁄ãxt
;

18 *
	mnfs_uæ
;

19 
	mqueue_dïth
;

21 
	mout°™dög_evíts
;

22 
	m¥ev_ªque°ed_evít_ödex
;

23 
	m√xt_buf„ªd_evít
;

24 
	mbuf„ªd_evít_cou¡
;

25 
	m‰ì_evít_buf„r_ödex
;

26 
io_u
**
	mevíts
;

29 
	snfs_d©a
 {

30 
nfsfh
 *
	mnfsfh
;

31 
fio_libnfs_›ti⁄s
 *
	m›ti⁄s
;

34 
fio_›ti⁄
 
	g›ti⁄s
[] = {

36 .
«me
 = "nfs_url",

37 .
	g ame
 = "nfs_url",

38 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

39 .
	ghñp
 = "URL inÜibnfs format,ÉgÇfs://<server|ipv4|ipv6>/path[?arg=val[&arg=val]*]",

40 .
	goff1
 = 
off£tof
(
fio_libnfs_›ti⁄s
, 
nfs_uæ
),

41 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

42 .
	ggroup
 = 
__FIO_OPT_G_NFS
,

45 .
	g«me
 = 
NULL
,

49 
io_u
 *
	$fio_libnfs_evít
(
thªad_d©a
 *
td
, 
evít
)

51 
fio_libnfs_›ti⁄s
 *
o
 = 
td
->
eo
;

52 
io_u
 *io_u = 
o
->
evíts
[o->
√xt_buf„ªd_evít
];

53 
	`as£π
(
o
->
evíts
[o->
√xt_buf„ªd_evít
]);

54 
o
->
evíts
[o->
√xt_buf„ªd_evít
] = 
NULL
;

55 
o
->
√xt_buf„ªd_evít
 = (o->√xt_buf„ªd_evíà+ 1Ë% 
td
->o.
iodïth
;

57 
	`as£π
(
o
->
buf„ªd_evít_cou¡
);

58 
o
->
buf„ªd_evít_cou¡
--;

59 
	`as£π
(
io_u
);

61 
	`as£π
(
evít
 =0 || 
o
->
¥ev_ªque°ed_evít_ödex
 + 1 ==Évent);

62 i‡(
o
->
buf„ªd_evít_cou¡
 == 0) {

63 
o
->
¥ev_ªque°ed_evít_ödex
 = -1;

65 
o
->
¥ev_ªque°ed_evít_ödex
 = 
evít
;

67  
io_u
;

68 
	}
}

70 
	$nfs_evít_lo›
(
thªad_d©a
 *
td
, 
boﬁ
 
Êush
) {

71 
fio_libnfs_›ti⁄s
 *
o
 = 
td
->
eo
;

72 
pﬁlfd
 
pfds
[1];

74 i‡(
o
->
buf„ªd_evít_cou¡
)

75  
o
->
buf„ªd_evít_cou¡
;

77 
	#SHOULD_WAIT
(Ë(
o
->
out°™dög_evíts
 =
td
->o.
iodïth
 || (
Êush
 && o->out°™dög_evíts))

	)

80 
timeout
 = 
	`SHOULD_WAIT
() ? -1 : 0;

81 
ªt
 = 0;

82 
pfds
[0].
fd
 = 
	`nfs_gë_fd
(
o
->
c⁄ãxt
);

83 
pfds
[0].
evíts
 = 
	`nfs_which_evíts
(
o
->
c⁄ãxt
);

84 
ªt
 = 
	`pﬁl
(&
pfds
[0], 1, 
timeout
);

85 i‡(
ªt
 < 0) {

86 i‡(
î∫o
 =
EINTR
 ||Éºnÿ=
EAGAIN
) {

89 
	`log_îr
("nfs: failedÅoÖollÉvents: %s.\n",

90 
	`°ªº‹
(
î∫o
));

94 
ªt
 = 
	`nfs_£rvi˚
(
o
->
c⁄ãxt
, 
pfds
[0].
ªvíts
);

95 i‡(
ªt
 < 0) {

96 
	`log_îr
("nfs: socket is inán unrecoverableÉrror state.\n");

99 } 
	`SHOULD_WAIT
());

100  
o
->
buf„ªd_evít_cou¡
;

101 #unde‡
SHOULD_WAIT


102 
	}
}

104 
	$fio_libnfs_gëevíts
(
thªad_d©a
 *
td
, 
mö
,

105 
max
, c⁄° 
time•ec
 *
t
)

107  
	`nfs_evít_lo›
(
td
, 
Ál£
);

108 
	}
}

110 
	$nfs_ˇŒback
(
ªs
, 
nfs_c⁄ãxt
 *
nfs
, *
d©a
,

111 *
¥iv©e_d©a
)

113 
io_u
 *io_u = 
¥iv©e_d©a
;

114 
nfs_d©a
 *nfs_d©®
io_u
->
fûe
->
ígöe_d©a
;

115 
fio_libnfs_›ti⁄s
 *
o
 = 
nfs_d©a
->
›ti⁄s
;

116 i‡(
ªs
 < 0) {

117 
	`log_îr
("Faûed NFS o≥øti⁄(code:%d): %s\n", 
ªs
, 
	`nfs_gë_îr‹
(
o
->
c⁄ãxt
));

118 
io_u
->
îr‹
 = -
ªs
;

120 
ªs
 = 0;

121 } i‡(
io_u
->
ddú
 =
DDIR_READ
) {

122 
	`mem˝y
(
io_u
->
buf
, 
d©a
, 
ªs
);

123 i‡(
ªs
 == 0)

124 
	`log_îr
("Got NFS EOF,Åhis isÖrobablyÇotÉxpected\n");

127 
io_u
->
ªsid
 = io_u->
x„r_buÊí
 - 
ªs
;

129 
	`as£π
(!
o
->
evíts
[o->
‰ì_evít_buf„r_ödex
]);

130 
o
->
evíts
[o->
‰ì_evít_buf„r_ödex
] = 
io_u
;

131 
o
->
‰ì_evít_buf„r_ödex
 = (o->‰ì_evít_buf„r_ödex + 1Ë% o->
queue_dïth
;

132 
o
->
out°™dög_evíts
--;

133 
o
->
buf„ªd_evít_cou¡
++;

134 
	}
}

136 
	$queue_wrôe
(
fio_libnfs_›ti⁄s
 *
o
, 
io_u
 *io_u) {

137 
nfs_d©a
 *nfs_d©®
io_u
->
ígöe_d©a
;

138  
	`nfs_pwrôe_async
(
o
->
c⁄ãxt
, 
nfs_d©a
->
nfsfh
,

139 
io_u
->
off£t
, io_u->
buÊí
, io_u->
buf
, 
nfs_ˇŒback
,

140 
io_u
);

141 
	}
}

143 
	$queue_ªad
(
fio_libnfs_›ti⁄s
 *
o
, 
io_u
 *io_u) {

144 
nfs_d©a
 *nfs_d©®
io_u
->
ígöe_d©a
;

145  
	`nfs_¥ód_async
(
o
->
c⁄ãxt
, 
nfs_d©a
->
nfsfh
, 
io_u
->
off£t
, io_u->
buÊí
, 
nfs_ˇŒback
, io_u);

146 
	}
}

148 
fio_q_°©us
 
	$fio_libnfs_queue
(
thªad_d©a
 *
td
,

149 
io_u
 *io_u)

151 
nfs_d©a
 *nfs_d©®
io_u
->
fûe
->
ígöe_d©a
;

152 
fio_libnfs_›ti⁄s
 *
o
 = 
nfs_d©a
->
›ti⁄s
;

153 
nfs_c⁄ãxt
 *
nfs
 = 
o
->
c⁄ãxt
;

154 
îr
;

155 
fio_q_°©us
 
ªt
 = 
FIO_Q_QUEUED
;

157 
io_u
->
ígöe_d©a
 = 
nfs_d©a
;

158 
io_u
->
ddú
) {

159 
DDIR_WRITE
:

160 
îr
 = 
	`queue_wrôe
(
o
, 
io_u
);

162 
DDIR_READ
:

163 
îr
 = 
	`queue_ªad
(
o
, 
io_u
);

165 
DDIR_TRIM
:

166 
	`log_îr
("nfs:Årim isÇot supported");

167 
îr
 = -1;

170 
	`log_îr
("nfs: unh™dÀd iÿ%d\n", 
io_u
->
ddú
);

171 
îr
 = -1;

173 i‡(
îr
) {

174 
	`log_îr
("nfs: FaûedÅÿqueuênf†›: %s\n", 
	`nfs_gë_îr‹
(
nfs
));

175 
td
->
îr‹
 = 1;

176  
FIO_Q_COMPLETED
;

178 
o
->
out°™dög_evíts
++;

179  
ªt
;

180 
	}
}

185 
	$do_mou¡
(
thªad_d©a
 *
td
, c⁄° *
uæ
)

187 
size_t
 
evít_size
 = (
io_u
 **Ë* 
td
->
o
.
iodïth
;

188 
fio_libnfs_›ti⁄s
 *
›ti⁄s
 = 
td
->
eo
;

189 
nfs_uæ
 *nfs_uæ = 
NULL
;

190 
ªt
 = 0;

191 
∑th_Àn
 = 0;

192 *
m¡_dú
 = 
NULL
;

194 i‡(
›ti⁄s
->
c⁄ãxt
)

197 
›ti⁄s
->
c⁄ãxt
 = 
	`nfs_öô_c⁄ãxt
();

198 i‡(
›ti⁄s
->
c⁄ãxt
 =
NULL
) {

199 
	`log_îr
("nfs: failedÅo initÇfs context\n");

203 
›ti⁄s
->
evíts
 = 
	`mÆloc
(
evít_size
);

204 
	`mem£t
(
›ti⁄s
->
evíts
, 0, 
evít_size
);

206 
›ti⁄s
->
¥ev_ªque°ed_evít_ödex
 = -1;

207 
›ti⁄s
->
queue_dïth
 = 
td
->
o
.
iodïth
;

209 
nfs_uæ
 = 
	`nfs_∑r£_uæ_fuŒ
(
›ti⁄s
->
c⁄ãxt
, 
uæ
);

210 
∑th_Àn
 = 
	`°æí
(
nfs_uæ
->
∑th
);

211 
m¡_dú
 = 
	`mÆloc
(
∑th_Àn
 + 
	`°æí
(
nfs_uæ
->
fûe
) + 1);

212 
	`°r˝y
(
m¡_dú
, 
nfs_uæ
->
∑th
);

213 
	`°r˝y
(
m¡_dú
 + 
	`°æí
(
nfs_uæ
->
∑th
),Çfs_uæ->
fûe
);

214 
ªt
 = 
	`nfs_mou¡
(
›ti⁄s
->
c⁄ãxt
, 
nfs_uæ
->
£rvî
, 
m¡_dú
);

215 
	`‰ì
(
m¡_dú
);

216 
	`nfs_de°roy_uæ
(
nfs_uæ
);

217  
ªt
;

218 
	}
}

220 
	$fio_libnfs_£tup
(
thªad_d©a
 *
td
)

223 
td
->
o
.
u£_thªad
 = 0;

225 
	}
}

227 
	$fio_libnfs_˛ónup
(
thªad_d©a
 *
td
)

229 
fio_libnfs_›ti⁄s
 *
o
 = 
td
->
eo
;

230 
	`nfs_umou¡
(
o
->
c⁄ãxt
);

231 
	`nfs_de°roy_c⁄ãxt
(
o
->
c⁄ãxt
);

232 
	`‰ì
(
o
->
evíts
);

233 
	}
}

235 
	$fio_libnfs_›í
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

237 
ªt
;

238 
fio_libnfs_›ti⁄s
 *
›ti⁄s
 = 
td
->
eo
;

239 
nfs_d©a
 *nfs_d©®
NULL
;

240 
Êags
 = 0;

242 i‡(!
›ti⁄s
->
nfs_uæ
) {

243 
	`log_îr
("nfs:Çfs_url isáÑequiredÖarameter\n");

247 
ªt
 = 
	`do_mou¡
(
td
, 
›ti⁄s
->
nfs_uæ
);

249 i‡(
ªt
 != 0) {

250 
	`log_îr
("nfs: FaûedÅÿmou¡ %†wôh codê%d: %s\n", 
›ti⁄s
->
nfs_uæ
, 
ªt
, 
	`nfs_gë_îr‹
(›ti⁄s->
c⁄ãxt
));

251  
ªt
;

253 
nfs_d©a
 = 
	`mÆloc
((nfs_data));

254 
	`mem£t
(
nfs_d©a
, 0, (nfs_data));

255 
nfs_d©a
->
›ti⁄s
 = options;

257 i‡(
td
->
o
.
td_ddú
 =
TD_DDIR_WRITE
) {

258 
Êags
 |
O_CREAT
 | 
O_RDWR
;

260 
Êags
 |
O_RDWR
;

262 
ªt
 = 
	`nfs_›í
(
›ti⁄s
->
c⁄ãxt
, 
f
->
fûe_«me
, 
Êags
, &
nfs_d©a
->
nfsfh
);

264 i‡(
ªt
 != 0)

265 
	`log_îr
("FaûedÅÿ›í %s: %s\n", 
f
->
fûe_«me
, 
	`nfs_gë_îr‹
(
›ti⁄s
->
c⁄ãxt
));

266 
f
->
ígöe_d©a
 = 
nfs_d©a
;

267  
ªt
;

268 
	}
}

270 
	$fio_libnfs_˛o£
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

272 
nfs_d©a
 *nfs_d©®
f
->
ígöe_d©a
;

273 
fio_libnfs_›ti⁄s
 *
o
 = 
nfs_d©a
->
›ti⁄s
;

274 
ªt
 = 0;

275 i‡(
nfs_d©a
->
nfsfh
)

276 
ªt
 = 
	`nfs_˛o£
(
o
->
c⁄ãxt
, 
nfs_d©a
->
nfsfh
);

277 
	`‰ì
(
nfs_d©a
);

278 
f
->
ígöe_d©a
 = 
NULL
;

279  
ªt
;

280 
	}
}

282 
i€ngöe_›s
 
	gi€ngöe
 = {

283 .
«me
 = "nfs",

284 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

285 .
	g£tup
 = 
fio_libnfs_£tup
,

286 .
	gqueue
 = 
fio_libnfs_queue
,

287 .
	ggëevíts
 = 
fio_libnfs_gëevíts
,

288 .
	gevít
 = 
fio_libnfs_evít
,

289 .
	g˛ónup
 = 
fio_libnfs_˛ónup
,

290 .
	g›í_fûe
 = 
fio_libnfs_›í
,

291 .
	g˛o£_fûe
 = 
fio_libnfs_˛o£
,

292 .
	gÊags
 = 
FIO_DISKLESSIO
 | 
FIO_NOEXTEND
 | 
FIO_NODISKUTIL
,

293 .
	g›ti⁄s
 = 
›ti⁄s
,

294 .
	g›ti⁄_°ru˘_size
 = (
fio_libnfs_›ti⁄s
),

297 
fio_öô
 
	$fio_nfs_ªgi°î
()

299 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

300 
	}
}

302 
fio_exô
 
	$fio_nfs_uƒegi°î
()

304 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

305 
	}
}

	@engines/null.c

17 
	~<°dlib.h
>

18 
	~<as£π.h
>

20 
	~"../fio.h
"

22 
	snuŒ_d©a
 {

23 
io_u
 **
	mio_us
;

24 
	mqueued
;

25 
	mevíts
;

28 
io_u
 *
	$nuŒ_evít
(
nuŒ_d©a
 *
nd
, 
evít
)

30  
nd
->
io_us
[
evít
];

31 
	}
}

33 
	$nuŒ_gëevíts
(
nuŒ_d©a
 *
nd
, 
mö_evíts
,

34 
fio_unu£d
 
max
,

35 c⁄° 
time•ec
 
fio_unu£d
 *
t
)

37 
ªt
 = 0;

39 i‡(
mö_evíts
) {

40 
ªt
 = 
nd
->
evíts
;

41 
nd
->
evíts
 = 0;

44  
ªt
;

45 
	}
}

47 
	$nuŒ_queued
(
thªad_d©a
 *
td
, 
nuŒ_d©a
 *
nd
)

49 
time•ec
 
now
;

51 i‡(!
	`fio_fûl_issue_time
(
td
))

54 
	`fio_gëtime
(&
now
, 
NULL
);

56 
i
 = 0; i < 
nd
->
queued
; i++) {

57 
io_u
 *io_u = 
nd
->
io_us
[
i
];

59 
	`mem˝y
(&
io_u
->
issue_time
, &
now
, (now));

60 
	`io_u_queued
(
td
, 
io_u
);

62 
	}
}

64 
	$nuŒ_commô
(
thªad_d©a
 *
td
, 
nuŒ_d©a
 *
nd
)

66 i‡(!
nd
->
evíts
) {

67 
	`nuŒ_queued
(
td
, 
nd
);

69 #i‚de‡
FIO_EXTERNAL_ENGINE


70 
	`io_u_m¨k_submô
(
td
, 
nd
->
queued
);

72 
nd
->
evíts
 =Çd->
queued
;

73 
nd
->
queued
 = 0;

77 
	}
}

79 
fio_q_°©us
 
	$nuŒ_queue
(
thªad_d©a
 *
td
,

80 
nuŒ_d©a
 *
nd
, 
io_u
 *io_u)

82 
	`fio_ro_check
(
td
, 
io_u
);

84 i‡(
td
->
io_›s
->
Êags
 & 
FIO_SYNCIO
)

85  
FIO_Q_COMPLETED
;

86 i‡(
nd
->
evíts
)

87  
FIO_Q_BUSY
;

89 
nd
->
io_us
[nd->
queued
++] = 
io_u
;

90  
FIO_Q_QUEUED
;

91 
	}
}

93 
	$nuŒ_›í
(
nuŒ_d©a
 
fio_unu£d
 *
nd
,

94 
fio_fûe
 
fio_unu£d
 *
f
)

97 
	}
}

99 
	$nuŒ_˛ónup
(
nuŒ_d©a
 *
nd
)

101 i‡(
nd
) {

102 
	`‰ì
(
nd
->
io_us
);

103 
	`‰ì
(
nd
);

105 
	}
}

107 
nuŒ_d©a
 *
	$nuŒ_öô
(
thªad_d©a
 *
td
)

109 
nuŒ_d©a
 *
nd
 = (nuŒ_d©®*Ë
	`mÆloc
((*nd));

111 
	`mem£t
(
nd
, 0, (*nd));

113 i‡(
td
->
o
.
iodïth
 != 1) {

114 
nd
->
io_us
 = (
io_u
 **Ë
	`mÆloc
(
td
->
o
.
iodïth
 * (io_u *));

115 
	`mem£t
(
nd
->
io_us
, 0, 
td
->
o
.
iodïth
 * (
io_u
 *));

116 
td
->
io_›s
->
Êags
 |
FIO_ASYNCIO_SETS_ISSUE_TIME
;

118 
td
->
io_›s
->
Êags
 |
FIO_SYNCIO
;

120 
	`td_£t_i€ngöe_Êags
(
td
);

121  
nd
;

122 
	}
}

124 #i‚de‡
__˝lu•lus


126 
io_u
 *
	$fio_nuŒ_evít
(
thªad_d©a
 *
td
, 
evít
)

128  
	`nuŒ_evít
(
td
->
io_›s_d©a
, 
evít
);

129 
	}
}

131 
	$fio_nuŒ_gëevíts
(
thªad_d©a
 *
td
, 
mö_evíts
,

132 
max
, c⁄° 
time•ec
 *
t
)

134 
nuŒ_d©a
 *
nd
 = 
td
->
io_›s_d©a
;

135  
	`nuŒ_gëevíts
(
nd
, 
mö_evíts
, 
max
, 
t
);

136 
	}
}

138 
	$fio_nuŒ_commô
(
thªad_d©a
 *
td
)

140  
	`nuŒ_commô
(
td
,Åd->
io_›s_d©a
);

141 
	}
}

143 
fio_q_°©us
 
	$fio_nuŒ_queue
(
thªad_d©a
 *
td
,

144 
io_u
 *io_u)

146  
	`nuŒ_queue
(
td
,Åd->
io_›s_d©a
, 
io_u
);

147 
	}
}

149 
	$fio_nuŒ_›í
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

151  
	`nuŒ_›í
(
td
->
io_›s_d©a
, 
f
);

152 
	}
}

154 
	$fio_nuŒ_˛ónup
(
thªad_d©a
 *
td
)

156 
	`nuŒ_˛ónup
(
td
->
io_›s_d©a
);

157 
	}
}

159 
	$fio_nuŒ_öô
(
thªad_d©a
 *
td
)

161 
td
->
io_›s_d©a
 = 
	`nuŒ_öô
(td);

162 
	`as£π
(
td
->
io_›s_d©a
);

164 
	}
}

166 
i€ngöe_›s
 
	gi€ngöe
 = {

167 .
«me
 = "null",

168 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

169 .
	gqueue
 = 
fio_nuŒ_queue
,

170 .
	gcommô
 = 
fio_nuŒ_commô
,

171 .
	ggëevíts
 = 
fio_nuŒ_gëevíts
,

172 .
	gevít
 = 
fio_nuŒ_evít
,

173 .
	göô
 = 
fio_nuŒ_öô
,

174 .
	g˛ónup
 = 
fio_nuŒ_˛ónup
,

175 .
	g›í_fûe
 = 
fio_nuŒ_›í
,

176 .
	gÊags
 = 
FIO_DISKLESSIO
 | 
FIO_FAKEIO
,

179 
fio_öô
 
	$fio_nuŒ_ªgi°î
()

181 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

182 
	}
}

184 
fio_exô
 
	$fio_nuŒ_uƒegi°î
()

186 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

187 
	}
}

191 #ifde‡
FIO_EXTERNAL_ENGINE


193 
	sNuŒD©a
 {

194 
NuŒD©a
(
thªad_d©a
 *
td
)

196 
	mim∂_
 = 
nuŒ_öô
(
td
);

197 
as£π
(
im∂_
);

200 ~
NuŒD©a
()

202 
nuŒ_˛ónup
(
im∂_
);

205 
NuŒD©a
 *
gë
(
thªad_d©a
 *
td
)

207  
	mªöãΩªt_ˇ°
<
	mNuŒD©a
 *>(
	mtd
->
	mio_›s_d©a
);

210 
io_u
 *
fio_nuŒ_evít
(
thªad_d©a
 *, 
evít
)

212  
nuŒ_evít
(
im∂_
, 
evít
);

215 
fio_nuŒ_gëevíts
(
thªad_d©a
 *, 
mö_evíts
,

216 
max
, c⁄° 
time•ec
 *
t
)

218  
nuŒ_gëevíts
(
im∂_
, 
mö_evíts
, 
max
, 
t
);

221 
fio_nuŒ_commô
(
thªad_d©a
 *
td
)

223  
nuŒ_commô
(
td
, 
im∂_
);

226 
fio_q_°©us
 
fio_nuŒ_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

228  
nuŒ_queue
(
td
, 
im∂_
, 
io_u
);

231 
fio_nuŒ_›í
(
thªad_d©a
 *, 
fio_fûe
 *
f
)

233  
nuŒ_›í
(
im∂_
, 
f
);

236 
	m¥iv©e
:

237 
nuŒ_d©a
 *
im∂_
;

242 
io_u
 *
fio_nuŒ_evít
(
thªad_d©a
 *
td
, 
evít
)

244  
NuŒD©a
::
gë
(
td
)->
fio_nuŒ_evít
—d, 
evít
);

247 
fio_nuŒ_gëevíts
(
thªad_d©a
 *
td
, 
mö_evíts
,

248 
max
, c⁄° 
time•ec
 *
t
)

250  
NuŒD©a
::
gë
(
td
)->
fio_nuŒ_gëevíts
—d, 
mö_evíts
, 
max
, 
t
);

253 
fio_nuŒ_commô
(
thªad_d©a
 *
td
)

255  
NuŒD©a
::
gë
(
td
)->
fio_nuŒ_commô
(td);

258 
fio_q_°©us
 
fio_nuŒ_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

260  
NuŒD©a
::
gë
(
td
)->
fio_nuŒ_queue
—d, 
io_u
);

263 
fio_nuŒ_›í
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

265  
NuŒD©a
::
gë
(
td
)->
fio_nuŒ_›í
—d, 
f
);

268 
fio_nuŒ_öô
(
thªad_d©a
 *
td
)

270 
td
->
io_›s_d©a
 = 
√w
 
NuŒD©a
(td);

274 
fio_nuŒ_˛ónup
(
thªad_d©a
 *
td
)

276 
dñëe
 
NuŒD©a
::
gë
(
td
);

279 
i€ngöe_›s
 
i€ngöe
;

280 
gë_i€ngöe
(
i€ngöe_›s
 **
i€ngöe_±r
)

282 *
i€ngöe_±r
 = &
i€ngöe
;

284 
i€ngöe
.
«me
 = "cpp_null";

285 
i€ngöe
.
vîsi⁄
 = 
FIO_IOOPS_VERSION
;

286 
i€ngöe
.
queue
 = 
fio_nuŒ_queue
;

287 
i€ngöe
.
commô
 = 
fio_nuŒ_commô
;

288 
i€ngöe
.
gëevíts
 = 
fio_nuŒ_gëevíts
;

289 
i€ngöe
.
evít
 = 
fio_nuŒ_evít
;

290 
i€ngöe
.
öô
 = 
fio_nuŒ_öô
;

291 
i€ngöe
.
˛ónup
 = 
fio_nuŒ_˛ónup
;

292 
i€ngöe
.
›í_fûe
 = 
fio_nuŒ_›í
;

293 
i€ngöe
.
Êags
 = 
FIO_DISKLESSIO
 | 
FIO_FAKEIO
;

	@engines/nvme.c

6 
	~"nvme.h
"

8 
	$fio_nvme_urög_cmd_¥ï
(
nvme_urög_cmd
 *
cmd
, 
io_u
 *io_u,

9 
iovec
 *
iov
)

11 
nvme_d©a
 *
d©a
 = 
	`FILE_ENG_DATA
(
io_u
->
fûe
);

12 
__u64
 
¶ba
;

13 
__u32
 
∆b
;

15 
	`mem£t
(
cmd
, 0, (
nvme_urög_cmd
));

17 i‡(
io_u
->
ddú
 =
DDIR_READ
)

18 
cmd
->
›code
 = 
nvme_cmd_ªad
;

19 i‡(
io_u
->
ddú
 =
DDIR_WRITE
)

20 
cmd
->
›code
 = 
nvme_cmd_wrôe
;

22  -
ENOTSUP
;

24 
¶ba
 = 
io_u
->
off£t
 >> 
d©a
->
lba_shi·
;

25 
∆b
 = (
io_u
->
x„r_buÊí
 >> 
d©a
->
lba_shi·
) - 1;

28 
cmd
->
cdw10
 = 
¶ba
 & 0xffffffff;

29 
cmd
->
cdw11
 = 
¶ba
 >> 32;

31 
cmd
->
cdw12
 = 
∆b
;

32 i‡(
iov
) {

33 
iov
->
iov_ba£
 = 
io_u
->
x„r_buf
;

34 
iov
->
iov_Àn
 = 
io_u
->
x„r_buÊí
;

35 
cmd
->
addr
 = (
__u64
)(
uöçå_t
)
iov
;

36 
cmd
->
d©a_Àn
 = 1;

38 
cmd
->
addr
 = (
__u64
)(
uöçå_t
)
io_u
->
x„r_buf
;

39 
cmd
->
d©a_Àn
 = 
io_u
->
x„r_buÊí
;

41 
cmd
->
nsid
 = 
d©a
->nsid;

43 
	}
}

45 
	$nvme_idítify
(
fd
, 
__u32
 
nsid
, 
nvme_idítify_˙s
 
˙s
,

46 
nvme_csi
 
csi
, *
d©a
)

48 
nvme_∑s°hru_cmd
 
cmd
 = {

49 .
›code
 = 
nvme_admö_idítify
,

50 .
nsid
 =Çsid,

51 .
addr
 = (
__u64
)(
uöçå_t
)
d©a
,

52 .
d©a_Àn
 = 
NVME_IDENTIFY_DATA_SIZE
,

53 .
cdw10
 = 
˙s
,

54 .
cdw11
 = 
csi
 << 
NVME_IDENTIFY_CSI_SHIFT
,

55 .
timeout_ms
 = 
NVME_DEFAULT_IOCTL_TIMEOUT
,

58  
	`io˘l
(
fd
, 
NVME_IOCTL_ADMIN_CMD
, &
cmd
);

59 
	}
}

61 
	$fio_nvme_gë_öfo
(
fio_fûe
 *
f
, 
__u32
 *
nsid
, __u32 *
lba_sz
,

62 
__u64
 *
∆ba
)

64 
nvme_id_ns
 
ns
;

65 
«me•a˚_id
;

66 
fd
, 
îr
;

68 i‡(
f
->
fûëy≥
 !
FIO_TYPE_CHAR
) {

69 
	`log_îr
("ioengine io_uring_cmd only works withÇvmeÇs "

74 
fd
 = 
	`›í
(
f
->
fûe_«me
, 
O_RDONLY
);

75 i‡(
fd
 < 0)

76  -
î∫o
;

78 
«me•a˚_id
 = 
	`io˘l
(
fd
, 
NVME_IOCTL_ID
);

79 i‡(
«me•a˚_id
 < 0) {

80 
	`log_îr
("failedÅo fetchÇamespace-id");

81 
	`˛o£
(
fd
);

82  -
î∫o
;

89 
îr
 = 
	`nvme_idítify
(
fd
, 
«me•a˚_id
, 
NVME_IDENTIFY_CNS_NS
,

90 
NVME_CSI_NVM
, &
ns
);

91 i‡(
îr
) {

92 
	`log_îr
("failedÅo fetch identifyÇamespace\n");

93 
	`˛o£
(
fd
);

94  
îr
;

97 *
nsid
 = 
«me•a˚_id
;

98 *
lba_sz
 = 1 << 
ns
.
lbaf
[“s.
Êbas
 & 0x0f)].
ds
;

99 *
∆ba
 = 
ns
.
nsze
;

101 
	`˛o£
(
fd
);

103 
	}
}

105 
	$fio_nvme_gë_z⁄ed_modñ
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

106 
zbd_z⁄ed_modñ
 *
modñ
)

108 
nvme_d©a
 *
d©a
 = 
	`FILE_ENG_DATA
(
f
);

109 
nvme_id_ns
 
ns
;

110 
nvme_∑s°hru_cmd
 
cmd
;

111 
fd
, 
ªt
 = 0;

113 i‡(
f
->
fûëy≥
 !
FIO_TYPE_CHAR
)

114  -
EINVAL
;

117 
fd
 = 
	`›í
(
f
->
fûe_«me
, 
O_RDONLY
 | 
O_LARGEFILE
);

118 i‡(
fd
 < 0)

119  -
î∫o
;

122 
ªt
 = 
	`nvme_idítify
(
fd
, 
d©a
->
nsid
, 
NVME_IDENTIFY_CNS_CSI_CTRL
,

123 
NVME_CSI_ZNS
, &
ns
);

124 i‡(
ªt
) {

125 *
modñ
 = 
ZBD_NONE
;

126 
out
;

129 
	`mem£t
(&
cmd
, 0, (
nvme_∑s°hru_cmd
));

132 
ªt
 = 
	`nvme_idítify
(
fd
, 
d©a
->
nsid
, 
NVME_IDENTIFY_CNS_CSI_NS
,

133 
NVME_CSI_ZNS
, &
ns
);

134 i‡(
ªt
) {

135 *
modñ
 = 
ZBD_NONE
;

136 
out
;

139 *
modñ
 = 
ZBD_HOST_MANAGED
;

140 
out
:

141 
	`˛o£
(
fd
);

143 
	}
}

145 
	$nvme_ªp‹t_z⁄es
(
fd
, 
__u32
 
nsid
, 
__u64
 
¶ba
, __u32 
zøs_„©
,

146 
__u32
 
d©a_Àn
, *
d©a
)

148 
nvme_∑s°hru_cmd
 
cmd
 = {

149 .
›code
 = 
nvme_zns_cmd_mgmt_ªcv
,

150 .
nsid
 =Çsid,

151 .
addr
 = (
__u64
)(
uöçå_t
)
d©a
,

152 .
d©a_Àn
 = data_len,

153 .
cdw10
 = 
¶ba
 & 0xffffffff,

154 .
cdw11
 = 
¶ba
 >> 32,

155 .
cdw12
 = (
d©a_Àn
 >> 2) - 1,

156 .
cdw13
 = 
NVME_ZNS_ZRA_REPORT_ZONES
 | 
zøs_„©
,

157 .
timeout_ms
 = 
NVME_DEFAULT_IOCTL_TIMEOUT
,

160  
	`io˘l
(
fd
, 
NVME_IOCTL_IO_CMD
, &
cmd
);

161 
	}
}

163 
	$fio_nvme_ªp‹t_z⁄es
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

164 
uöt64_t
 
off£t
, 
zbd_z⁄e
 *
zbdz
,

165 
ƒ_z⁄es
)

167 
nvme_d©a
 *
d©a
 = 
	`FILE_ENG_DATA
(
f
);

168 
nvme_z⁄e_ªp‹t
 *
zr
;

169 
nvme_zns_id_ns
 
zns_ns
;

170 
nvme_id_ns
 
ns
;

171 
i
 = 0, 
j
, 
z⁄es_„tched
 = 0;

172 
max_z⁄es
, 
z⁄es_chunks
 = 1024;

173 
fd
, 
ªt
 = 0;

174 
__u32
 
zr_Àn
;

175 
__u64
 
zÀn
;

178 
fd
 = 
	`›í
(
f
->
fûe_«me
, 
O_RDONLY
 | 
O_LARGEFILE
);

179 i‡(
fd
 < 0)

180  -
î∫o
;

182 
z⁄es_„tched
 = 0;

183 
zr_Àn
 = (*
zr
Ë+ (
z⁄es_chunks
 * (
nvme_zns_desc
));

184 
zr
 = 
	`ˇŒoc
(1, 
zr_Àn
);

185 i‡(!
zr
) {

186 
	`˛o£
(
fd
);

187  -
ENOMEM
;

190 
ªt
 = 
	`nvme_idítify
(
fd
, 
d©a
->
nsid
, 
NVME_IDENTIFY_CNS_NS
,

191 
NVME_CSI_NVM
, &
ns
);

192 i‡(
ªt
) {

193 
	`log_îr
("%s:Çvme_idítify_n†Áûed,Éº=%d\n", 
f
->
fûe_«me
,

194 
ªt
);

195 
out
;

198 
ªt
 = 
	`nvme_idítify
(
fd
, 
d©a
->
nsid
, 
NVME_IDENTIFY_CNS_CSI_NS
,

199 
NVME_CSI_ZNS
, &
zns_ns
);

200 i‡(
ªt
) {

201 
	`log_îr
("%s:Çvme_zns_identify_ns failed,Érr=%d\n",

202 
f
->
fûe_«me
, 
ªt
);

203 
out
;

205 
zÀn
 = 
zns_ns
.
lba„
[
ns
.
Êbas
 & 0x0f].
zsze
 << 
d©a
->
lba_shi·
;

207 
max_z⁄es
 = (
f
->
ªÆ_fûe_size
 - 
off£t
Ë/ 
zÀn
;

208 i‡(
max_z⁄es
 < 
ƒ_z⁄es
)

209 
ƒ_z⁄es
 = 
max_z⁄es
;

211 i‡(
ƒ_z⁄es
 < 
z⁄es_chunks
)

212 
z⁄es_chunks
 = 
ƒ_z⁄es
;

214 
z⁄es_„tched
 < 
ƒ_z⁄es
) {

215 i‡(
z⁄es_„tched
 + 
z⁄es_chunks
 >
ƒ_z⁄es
) {

216 
z⁄es_chunks
 = 
ƒ_z⁄es
 - 
z⁄es_„tched
;

217 
zr_Àn
 = (*
zr
Ë+ (
z⁄es_chunks
 * (
nvme_zns_desc
));

219 
ªt
 = 
	`nvme_ªp‹t_z⁄es
(
fd
, 
d©a
->
nsid
, 
off£t
 >> d©a->
lba_shi·
,

220 
NVME_ZNS_ZRAS_FEAT_ERZ
, 
zr_Àn
, (*)
zr
);

221 i‡(
ªt
) {

222 
	`log_îr
("%s:Çvme_zns_report_zones failed,Érr=%d\n",

223 
f
->
fûe_«me
, 
ªt
);

224 
out
;

228 
j
 = 0; j < 
zr
->
ƒ_z⁄es
; j++, 
i
++) {

229 
nvme_zns_desc
 *
desc
 = (nvme_zns_des¯*)&(
zr
->
íåõs
[
j
]);

231 
zbdz
[
i
].
°¨t
 = 
desc
->
z¶ba
 << 
d©a
->
lba_shi·
;

232 
zbdz
[
i
].
Àn
 = 
zÀn
;

233 
zbdz
[
i
].
wp
 = 
desc
->w∞<< 
d©a
->
lba_shi·
;

234 
zbdz
[
i
].
ˇ∑côy
 = 
desc
->
zˇp
 << 
d©a
->
lba_shi·
;

237 
desc
->
zt
 & 0x0f) {

238 
NVME_ZONE_TYPE_SEQWRITE_REQ
:

239 
zbdz
[
i
].
ty≥
 = 
ZBD_ZONE_TYPE_SWR
;

242 
	`log_îr
("%s: invalidÅype for zoneát offset %llu.\n",

243 
f
->
fûe_«me
, 
desc
->
z¶ba
);

244 
ªt
 = -
EIO
;

245 
out
;

249 
desc
->
zs
 >> 4) {

250 
NVME_ZNS_ZS_EMPTY
:

251 
zbdz
[
i
].
c⁄d
 = 
ZBD_ZONE_COND_EMPTY
;

253 
NVME_ZNS_ZS_IMPL_OPEN
:

254 
zbdz
[
i
].
c⁄d
 = 
ZBD_ZONE_COND_IMP_OPEN
;

256 
NVME_ZNS_ZS_EXPL_OPEN
:

257 
zbdz
[
i
].
c⁄d
 = 
ZBD_ZONE_COND_EXP_OPEN
;

259 
NVME_ZNS_ZS_CLOSED
:

260 
zbdz
[
i
].
c⁄d
 = 
ZBD_ZONE_COND_CLOSED
;

262 
NVME_ZNS_ZS_FULL
:

263 
zbdz
[
i
].
c⁄d
 = 
ZBD_ZONE_COND_FULL
;

265 
NVME_ZNS_ZS_READ_ONLY
:

266 
NVME_ZNS_ZS_OFFLINE
:

269 
zbdz
[
i
].
c⁄d
 = 
ZBD_ZONE_COND_OFFLINE
;

270 
zbdz
[
i
].
wp
 = zbdz[i].
°¨t
;

273 
z⁄es_„tched
 +
zr
->
ƒ_z⁄es
;

274 
off£t
 +
zr
->
ƒ_z⁄es
 * 
zÀn
;

277 
ªt
 = 
z⁄es_„tched
;

278 
out
:

279 
	`‰ì
(
zr
);

280 
	`˛o£
(
fd
);

282  
ªt
;

283 
	}
}

285 
	$fio_nvme_ª£t_wp
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

286 
uöt64_t
 
off£t
, uöt64_à
Àngth
)

288 
nvme_d©a
 *
d©a
 = 
	`FILE_ENG_DATA
(
f
);

289 
ƒ_z⁄es
;

290 
z¶ba
;

291 
i
, 
fd
, 
ªt
 = 0;

294 
fd
 = 
f
->fd;

295 i‡(
fd
 < 0) {

296 
fd
 = 
	`›í
(
f
->
fûe_«me
, 
O_RDWR
 | 
O_LARGEFILE
);

297 i‡(
fd
 < 0)

298  -
î∫o
;

301 
z¶ba
 = 
off£t
 >> 
d©a
->
lba_shi·
;

302 
ƒ_z⁄es
 = (
Àngth
 + 
td
->
o
.
z⁄e_size
 - 1) /Åd->o.zone_size;

304 
i
 = 0; i < 
ƒ_z⁄es
; i++, 
z¶ba
 +(
td
->
o
.
z⁄e_size
 >> 
d©a
->
lba_shi·
)) {

305 
nvme_∑s°hru_cmd
 
cmd
 = {

306 .
›code
 = 
nvme_zns_cmd_mgmt_£nd
,

307 .
nsid
 = 
d©a
->nsid,

308 .
cdw10
 = 
z¶ba
 & 0xffffffff,

309 .
cdw11
 = 
z¶ba
 >> 32,

310 .
cdw13
 = 
NVME_ZNS_ZSA_RESET
,

311 .
addr
 = (
__u64
)(
uöçå_t
)
NULL
,

312 .
d©a_Àn
 = 0,

313 .
timeout_ms
 = 
NVME_DEFAULT_IOCTL_TIMEOUT
,

316 
ªt
 = 
	`io˘l
(
fd
, 
NVME_IOCTL_IO_CMD
, &
cmd
);

319 i‡(
f
->
fd
 < 0)

320 
	`˛o£
(
fd
);

321  -
ªt
;

322 
	}
}

324 
	$fio_nvme_gë_max_›í_z⁄es
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

325 *
max_›í_z⁄es
)

327 
nvme_d©a
 *
d©a
 = 
	`FILE_ENG_DATA
(
f
);

328 
nvme_zns_id_ns
 
zns_ns
;

329 
fd
, 
ªt
 = 0;

331 
fd
 = 
	`›í
(
f
->
fûe_«me
, 
O_RDONLY
 | 
O_LARGEFILE
);

332 i‡(
fd
 < 0)

333  -
î∫o
;

335 
ªt
 = 
	`nvme_idítify
(
fd
, 
d©a
->
nsid
, 
NVME_IDENTIFY_CNS_CSI_NS
,

336 
NVME_CSI_ZNS
, &
zns_ns
);

337 i‡(
ªt
) {

338 
	`log_îr
("%s:Çvme_zns_identify_ns failed,Érr=%d\n",

339 
f
->
fûe_«me
, 
ªt
);

340 
out
;

343 *
max_›í_z⁄es
 = 
zns_ns
.
m‹
 + 1;

344 
out
:

345 
	`˛o£
(
fd
);

346  
ªt
;

347 
	}
}

	@engines/nvme.h

6 #i‚de‡
FIO_NVME_H


7 
	#FIO_NVME_H


	)

9 
	~<löux/nvme_io˘l.h
>

10 
	~"../fio.h
"

16 #i‚de‡
CONFIG_NVME_URING_CMD


17 
	snvme_urög_cmd
 {

18 
__u8
 
	m›code
;

19 
__u8
 
	mÊags
;

20 
__u16
 
	mrsvd1
;

21 
__u32
 
	mnsid
;

22 
__u32
 
	mcdw2
;

23 
__u32
 
	mcdw3
;

24 
__u64
 
	mmëad©a
;

25 
__u64
 
	maddr
;

26 
__u32
 
	mmëad©a_Àn
;

27 
__u32
 
	md©a_Àn
;

28 
__u32
 
	mcdw10
;

29 
__u32
 
	mcdw11
;

30 
__u32
 
	mcdw12
;

31 
__u32
 
	mcdw13
;

32 
__u32
 
	mcdw14
;

33 
__u32
 
	mcdw15
;

34 
__u32
 
	mtimeout_ms
;

35 
__u32
 
	mrsvd2
;

38 
	#NVME_URING_CMD_IO
 
	`_IOWR
('N', 0x80, 
nvme_urög_cmd
)

	)

39 
	#NVME_URING_CMD_IO_VEC
 
	`_IOWR
('N', 0x81, 
nvme_urög_cmd
)

	)

42 
	#NVME_DEFAULT_IOCTL_TIMEOUT
 0

	)

43 
	#NVME_IDENTIFY_DATA_SIZE
 4096

	)

44 
	#NVME_IDENTIFY_CSI_SHIFT
 24

	)

46 
	#NVME_ZNS_ZRA_REPORT_ZONES
 0

	)

47 
	#NVME_ZNS_ZRAS_FEAT_ERZ
 (1 << 16)

	)

48 
	#NVME_ZNS_ZSA_RESET
 0x4

	)

49 
	#NVME_ZONE_TYPE_SEQWRITE_REQ
 0x2

	)

51 
	envme_idítify_˙s
 {

52 
	mNVME_IDENTIFY_CNS_NS
 = 0x00,

53 
	mNVME_IDENTIFY_CNS_CSI_NS
 = 0x05,

54 
	mNVME_IDENTIFY_CNS_CSI_CTRL
 = 0x06,

57 
	envme_csi
 {

58 
	mNVME_CSI_NVM
 = 0,

59 
	mNVME_CSI_KV
 = 1,

60 
	mNVME_CSI_ZNS
 = 2,

63 
	envme_admö_›code
 {

64 
	mnvme_admö_idítify
 = 0x06,

67 
	envme_io_›code
 {

68 
	mnvme_cmd_wrôe
 = 0x01,

69 
	mnvme_cmd_ªad
 = 0x02,

70 
	mnvme_zns_cmd_mgmt_£nd
 = 0x79,

71 
	mnvme_zns_cmd_mgmt_ªcv
 = 0x7a,

74 
	envme_zns_zs
 {

75 
	mNVME_ZNS_ZS_EMPTY
 = 0x1,

76 
	mNVME_ZNS_ZS_IMPL_OPEN
 = 0x2,

77 
	mNVME_ZNS_ZS_EXPL_OPEN
 = 0x3,

78 
	mNVME_ZNS_ZS_CLOSED
 = 0x4,

79 
	mNVME_ZNS_ZS_READ_ONLY
 = 0xd,

80 
	mNVME_ZNS_ZS_FULL
 = 0xe,

81 
	mNVME_ZNS_ZS_OFFLINE
 = 0xf,

84 
	snvme_d©a
 {

85 
__u32
 
	mnsid
;

86 
__u32
 
	mlba_shi·
;

89 
	snvme_lbaf
 {

90 
__À16
 
	mms
;

91 
__u8
 
	mds
;

92 
__u8
 
	mΩ
;

95 
	snvme_id_ns
 {

96 
__À64
 
	mnsze
;

97 
__À64
 
	mnˇp
;

98 
__À64
 
	mnu£
;

99 
__u8
 
	mns„©
;

100 
__u8
 
	m∆baf
;

101 
__u8
 
	mÊbas
;

102 
__u8
 
	mmc
;

103 
__u8
 
	mdpc
;

104 
__u8
 
	mdps
;

105 
__u8
 
	mnmic
;

106 
__u8
 
	mªsˇp
;

107 
__u8
 
	mÂi
;

108 
__u8
 
	mdl„©
;

109 
__À16
 
	m«wun
;

110 
__À16
 
	m«wupf
;

111 
__À16
 
	m«cwu
;

112 
__À16
 
	m«b¢
;

113 
__À16
 
	m«bo
;

114 
__À16
 
	m«b•f
;

115 
__À16
 
	mnoiob
;

116 
__u8
 
	mnvmˇp
[16];

117 
__À16
 
	m≈wg
;

118 
__À16
 
	m≈wa
;

119 
__À16
 
	m≈dg
;

120 
__À16
 
	m≈da
;

121 
__À16
 
	mnows
;

122 
__À16
 
	mms§l
;

123 
__À32
 
	mm˛
;

124 
__u8
 
	mm§c
;

125 
__u8
 
	mrsvd81
[11];

126 
__À32
 
	m™agΩid
;

127 
__u8
 
	mrsvd96
[3];

128 
__u8
 
	mnßâr
;

129 
__À16
 
	mnvm£tid
;

130 
__À16
 
	mídgid
;

131 
__u8
 
	mnguid
[16];

132 
__u8
 
	meui64
[8];

133 
nvme_lbaf
 
	mlbaf
[16];

134 
__u8
 
	mrsvd192
[192];

135 
__u8
 
	mvs
[3712];

138 
ölöe
 
	$ûog2
(
uöt32_t
 
i
)

140 
log
 = -1;

142 
i
) {

143 
i
 >>= 1;

144 
log
++;

146  
log
;

147 
	}
}

149 
	snvme_zns_lba„
 {

150 
__À64
 
	mzsze
;

151 
__u8
 
	mzdes
;

152 
__u8
 
	mrsvd9
[7];

155 
	snvme_zns_id_ns
 {

156 
__À16
 
	mzoc
;

157 
__À16
 
	mozcs
;

158 
__À32
 
	mm¨
;

159 
__À32
 
	mm‹
;

160 
__À32
 
	mºl
;

161 
__À32
 
	m‰l
;

162 
__À32
 
	mºl1
;

163 
__À32
 
	mºl2
;

164 
__À32
 
	mºl3
;

165 
__À32
 
	m‰l1
;

166 
__À32
 
	m‰l2
;

167 
__À32
 
	m‰l3
;

168 
__À32
 
	mnumzrwa
;

169 
__À16
 
	mzrwafg
;

170 
__À16
 
	mzrwasz
;

171 
__u8
 
	mzrwaˇp
;

172 
__u8
 
	mrsvd53
[2763];

173 
nvme_zns_lba„
 
	mlba„
[64];

174 
__u8
 
	mvs
[256];

177 
	snvme_zns_desc
 {

178 
__u8
 
	mzt
;

179 
__u8
 
	mzs
;

180 
__u8
 
	mza
;

181 
__u8
 
	mzai
;

182 
__u8
 
	mrsvd4
[4];

183 
__À64
 
	mzˇp
;

184 
__À64
 
	mz¶ba
;

185 
__À64
 
	mwp
;

186 
__u8
 
	mrsvd32
[32];

189 
	snvme_z⁄e_ªp‹t
 {

190 
__À64
 
	mƒ_z⁄es
;

191 
__u8
 
	mrsvd8
[56];

192 
nvme_zns_desc
 
	míåõs
[];

195 
fio_nvme_gë_öfo
(
fio_fûe
 *
f
, 
__u32
 *
nsid
, __u32 *
lba_sz
,

196 
__u64
 *
∆ba
);

198 
fio_nvme_urög_cmd_¥ï
(
nvme_urög_cmd
 *
cmd
, 
io_u
 *io_u,

199 
iovec
 *
iov
);

201 
fio_nvme_gë_z⁄ed_modñ
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

202 
zbd_z⁄ed_modñ
 *
modñ
);

204 
fio_nvme_ªp‹t_z⁄es
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

205 
uöt64_t
 
off£t
, 
zbd_z⁄e
 *
zbdz
,

206 
ƒ_z⁄es
);

208 
fio_nvme_ª£t_wp
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

209 
uöt64_t
 
off£t
, uöt64_à
Àngth
);

211 
fio_nvme_gë_max_›í_z⁄es
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

212 *
max_›í_z⁄es
);

	@engines/pmemblk.c

64 
	~<°dio.h
>

65 
	~<°dlib.h
>

66 
	~<uni°d.h
>

67 
	~<sys/uio.h
>

68 
	~<î∫o.h
>

69 
	~<as£π.h
>

70 
	~<°rög.h
>

71 
	~<libpmem.h
>

72 
	~<libpmemblk.h
>

74 
	~"../fio.h
"

79 
fio_pmemblk_fûe
 *
	tfio_pmemblk_fûe_t
;

81 
	sfio_pmemblk_fûe
 {

82 
fio_pmemblk_fûe_t
 
	mpmb_√xt
;

83 *
	mpmb_fûíame
;

84 
uöt64_t
 
	mpmb_ªf˙t
;

85 
PMEMblkpoﬁ
 *
	mpmb_poﬁ
;

86 
size_t
 
	mpmb_bsize
;

87 
size_t
 
	mpmb_nblocks
;

90 
fio_pmemblk_fûe_t
 
	gCache
;

92 
±hªad_muãx_t
 
	gCacheLock
 = 
PTHREAD_MUTEX_INITIALIZER
;

94 
	#PMB_CREATE
 (0x0001Ë

	)

96 
fio_pmemblk_fûe_t
 
	$fio_pmemblk_ˇche_lookup
(c⁄° *
fûíame
)

98 
fio_pmemblk_fûe_t
 
i
;

100 
i
 = 
Cache
; i !
NULL
; i = i->
pmb_√xt
)

101 i‡(!
	`°rcmp
(
fûíame
, 
i
->
pmb_fûíame
))

102  
i
;

104  
NULL
;

105 
	}
}

107 
	$fio_pmemblk_ˇche_ö£π
(
fio_pmemblk_fûe_t
 
pmb
)

109 
pmb
->
pmb_√xt
 = 
Cache
;

110 
Cache
 = 
pmb
;

111 
	}
}

113 
	$fio_pmemblk_ˇche_ªmove
(
fio_pmemblk_fûe_t
 
pmb
)

115 
fio_pmemblk_fûe_t
 
i
;

117 i‡(
pmb
 =
Cache
) {

118 
Cache
 = Cache->
pmb_√xt
;

119 
pmb
->
pmb_√xt
 = 
NULL
;

123 
i
 = 
Cache
; i !
NULL
; i = i->
pmb_√xt
)

124 i‡(
pmb
 =
i
->
pmb_√xt
) {

125 
i
->
pmb_√xt
 = i->pmb_next->pmb_next;

126 
pmb
->
pmb_√xt
 = 
NULL
;

129 
	}
}

149 
	$pmb_∑r£_∑th
(c⁄° *
∑th•ec
, **
µ©h
, 
uöt64_t
 *
pbsize
,

150 
uöt64_t
 *
pfsize
)

152 *
∑th
;

153 *
s
;

154 
uöt64_t
 
bsize
;

155 
uöt64_t
 
fsizemib
;

157 
∑th
 = 
	`°rdup
(
∑th•ec
);

158 i‡(!
∑th
) {

159 *
µ©h
 = 
NULL
;

164 
s
 = 
	`°ºchr
(
∑th
, ',');

165 i‡(
s
 && (
fsizemib
 = 
	`°πouŒ
(†+ 1, 
NULL
, 10))) {

166 *
s
 = 0;

167 
s
 = 
	`°ºchr
(
∑th
, ',');

168 i‡(
s
 && (
bsize
 = 
	`°πouŒ
(†+ 1, 
NULL
, 10))) {

169 *
s
 = 0;

170 *
µ©h
 = 
∑th
;

171 *
pbsize
 = 
bsize
;

172 *
pfsize
 = 
fsizemib
 << 20;

178 
	`°r˝y
(
∑th
, 
∑th•ec
);

179 *
µ©h
 = 
∑th
;

180 *
pbsize
 = 0;

181 *
pfsize
 = 0;

182 
	}
}

184 
fio_pmemblk_fûe_t
 
	$pmb_›í
(c⁄° *
∑th•ec
, 
Êags
)

186 
fio_pmemblk_fûe_t
 
pmb
;

187 *
∑th
 = 
NULL
;

188 
uöt64_t
 
bsize
 = 0;

189 
uöt64_t
 
fsize
 = 0;

191 
	`pmb_∑r£_∑th
(
∑th•ec
, &
∑th
, &
bsize
, &
fsize
);

192 i‡(!
∑th
)

193  
NULL
;

195 
	`±hªad_muãx_lock
(&
CacheLock
);

197 
pmb
 = 
	`fio_pmemblk_ˇche_lookup
(
∑th
);

198 i‡(!
pmb
) {

199 
pmb
 = 
	`mÆloc
((*pmb));

200 i‡(!
pmb
)

201 
îr‹
;

204 
pmb
->
pmb_poﬁ
 = 
	`pmemblk_›í
(
∑th
, 
bsize
);

205 i‡(!
pmb
->
pmb_poﬁ
 && (
î∫o
 =
ENOENT
) &&

206 (
Êags
 & 
PMB_CREATE
Ë&& (0 < 
fsize
Ë&& (0 < 
bsize
)) {

207 
pmb
->
pmb_poﬁ
 =

208 
	`pmemblk_¸óã
(
∑th
, 
bsize
, 
fsize
, 0644);

210 i‡(!
pmb
->
pmb_poﬁ
) {

211 
	`log_îr
("pmemblk: unableÅo openÖmemblkÖool file %s (%s)\n",

212 
∑th
, 
	`°ªº‹
(
î∫o
));

213 
îr‹
;

216 
pmb
->
pmb_fûíame
 = 
∑th
;

217 
pmb
->
pmb_√xt
 = 
NULL
;

218 
pmb
->
pmb_ªf˙t
 = 0;

219 
pmb
->
pmb_bsize
 = 
	`pmemblk_bsize
’mb->
pmb_poﬁ
);

220 
pmb
->
pmb_nblocks
 = 
	`pmemblk_nblock
’mb->
pmb_poﬁ
);

222 
	`fio_pmemblk_ˇche_ö£π
(
pmb
);

224 
	`‰ì
(
∑th
);

227 
pmb
->
pmb_ªf˙t
 += 1;

229 
	`±hªad_muãx_u∆ock
(&
CacheLock
);

231  
pmb
;

233 
îr‹
:

234 i‡(
pmb
) {

235 i‡(
pmb
->
pmb_poﬁ
)

236 
	`pmemblk_˛o£
(
pmb
->
pmb_poﬁ
);

237 
pmb
->
pmb_poﬁ
 = 
NULL
;

238 
pmb
->
pmb_fûíame
 = 
NULL
;

239 
	`‰ì
(
pmb
);

241 i‡(
∑th
)

242 
	`‰ì
(
∑th
);

244 
	`±hªad_muãx_u∆ock
(&
CacheLock
);

245  
NULL
;

246 
	}
}

248 
	$pmb_˛o£
(
fio_pmemblk_fûe_t
 
pmb
, c⁄° 
boﬁ
 
kìp
)

250 
	`±hªad_muãx_lock
(&
CacheLock
);

252 
pmb
->
pmb_ªf˙t
--;

254 i‡(!
kìp
 && !
pmb
->
pmb_ªf˙t
) {

255 
	`pmemblk_˛o£
(
pmb
->
pmb_poﬁ
);

256 
pmb
->
pmb_poﬁ
 = 
NULL
;

257 
	`‰ì
(
pmb
->
pmb_fûíame
);

258 
pmb
->
pmb_fûíame
 = 
NULL
;

259 
	`fio_pmemblk_ˇche_ªmove
(
pmb
);

260 
	`‰ì
(
pmb
);

263 
	`±hªad_muãx_u∆ock
(&
CacheLock
);

264 
	}
}

266 
	$pmb_gë_Êags
(
thªad_d©a
 *
td
, 
uöt64_t
 *
pÊags
)

268 
thªad_w¨√d
 = 0;

269 
odúe˘_w¨√d
 = 0;

271 
uöt64_t
 
Êags
 = 0;

273 i‡(!
td
->
o
.
u£_thªad
) {

274 i‡(!
thªad_w¨√d
) {

275 
thªad_w¨√d
 = 1;

276 
	`log_îr
("pmemblk: must setÅhread=1 forÖmemblkÉngine\n");

281 i‡(!
td
->
o
.
odúe˘
 && !
odúe˘_w¨√d
) {

282 
odúe˘_w¨√d
 = 1;

283 
	`log_öfo
("pmemblk: direct == 0, butÖmemblk isálways direct\n");

286 i‡(
td
->
o
.
Ælow_¸óã
)

287 
Êags
 |
PMB_CREATE
;

289 (*
pÊags
Ë
Êags
;

291 
	}
}

293 
	$fio_pmemblk_›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

295 
uöt64_t
 
Êags
 = 0;

296 
fio_pmemblk_fûe_t
 
pmb
;

298 i‡(
	`pmb_gë_Êags
(
td
, &
Êags
))

301 
pmb
 = 
	`pmb_›í
(
f
->
fûe_«me
, 
Êags
);

302 i‡(!
pmb
)

305 
	`FILE_SET_ENG_DATA
(
f
, 
pmb
);

307 
	}
}

309 
	$fio_pmemblk_˛o£_fûe
(
thªad_d©a
 
fio_unu£d
 *
td
,

310 
fio_fûe
 *
f
)

312 
fio_pmemblk_fûe_t
 
pmb
 = 
	`FILE_ENG_DATA
(
f
);

314 i‡(
pmb
)

315 
	`pmb_˛o£
(
pmb
, 
Ál£
);

317 
	`FILE_SET_ENG_DATA
(
f
, 
NULL
);

319 
	}
}

321 
	$fio_pmemblk_gë_fûe_size
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

323 
uöt64_t
 
Êags
 = 0;

324 
fio_pmemblk_fûe_t
 
pmb
 = 
	`FILE_ENG_DATA
(
f
);

326 i‡(
	`fio_fûe_size_known
(
f
))

329 i‡(!
pmb
) {

330 i‡(
	`pmb_gë_Êags
(
td
, &
Êags
))

332 
pmb
 = 
	`pmb_›í
(
f
->
fûe_«me
, 
Êags
);

333 i‡(!
pmb
)

337 
f
->
ªÆ_fûe_size
 = 
pmb
->
pmb_bsize
 *Ömb->
pmb_nblocks
;

339 
	`fio_fûe_£t_size_known
(
f
);

341 i‡(!
	`FILE_ENG_DATA
(
f
))

342 
	`pmb_˛o£
(
pmb
, 
åue
);

345 
	}
}

347 
fio_q_°©us
 
	$fio_pmemblk_queue
(
thªad_d©a
 *
td
,

348 
io_u
 *io_u)

350 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

351 
fio_pmemblk_fûe_t
 
pmb
 = 
	`FILE_ENG_DATA
(
f
);

353 
off
;

354 
Àn
;

355 *
buf
;

357 
	`fio_ro_check
(
td
, 
io_u
);

359 
io_u
->
ddú
) {

360 
DDIR_READ
:

361 
DDIR_WRITE
:

362 
off
 = 
io_u
->
off£t
;

363 
Àn
 = 
io_u
->
x„r_buÊí
;

365 
io_u
->
îr‹
 = 
EINVAL
;

366 i‡(
off
 % 
pmb
->
pmb_bsize
)

368 i‡(
Àn
 % 
pmb
->
pmb_bsize
)

370 i‡((
off
 + 
Àn
Ë/ 
pmb
->
pmb_bsize
 >Ömb->
pmb_nblocks
)

373 
io_u
->
îr‹
 = 0;

374 
buf
 = 
io_u
->
x„r_buf
;

375 
off
 /
pmb
->
pmb_bsize
;

376 
Àn
 /
pmb
->
pmb_bsize
;

377 0 < 
Àn
) {

378 i‡(
io_u
->
ddú
 =
DDIR_READ
) {

379 i‡(0 !
	`pmemblk_ªad
(
pmb
->
pmb_poﬁ
, 
buf
, 
off
)) {

380 
io_u
->
îr‹
 = 
î∫o
;

383 } i‡(0 !
	`pmemblk_wrôe
(
pmb
->
pmb_poﬁ
, 
buf
, 
off
)) {

384 
io_u
->
îr‹
 = 
î∫o
;

387 
buf
 +
pmb
->
pmb_bsize
;

388 
off
++;

389 
Àn
--;

391 
off
 *
pmb
->
pmb_bsize
;

392 
Àn
 *
pmb
->
pmb_bsize
;

393 
io_u
->
ªsid
 = io_u->
x„r_buÊí
 - (
off
 - io_u->
off£t
);

395 
DDIR_SYNC
:

396 
DDIR_DATASYNC
:

397 
DDIR_SYNC_FILE_RANGE
:

399 
io_u
->
îr‹
 = 0;

402 
io_u
->
îr‹
 = 
EINVAL
;

406  
FIO_Q_COMPLETED
;

407 
	}
}

409 
	$fio_pmemblk_u∆ök_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

411 *
∑th
 = 
NULL
;

412 
uöt64_t
 
bsize
 = 0;

413 
uöt64_t
 
fsize
 = 0;

421 
	`pmb_∑r£_∑th
(
f
->
fûe_«me
, &
∑th
, &
bsize
, &
fsize
);

422 i‡(!
∑th
)

423  
ENOENT
;

425 
	`u∆ök
(
∑th
);

426 
	`‰ì
(
∑th
);

428 
	}
}

430 
FIO_STATIC
 
i€ngöe_›s
 
	gi€ngöe
 = {

431 .
«me
 = "pmemblk",

432 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

433 .
	gqueue
 = 
fio_pmemblk_queue
,

434 .
	g›í_fûe
 = 
fio_pmemblk_›í_fûe
,

435 .
	g˛o£_fûe
 = 
fio_pmemblk_˛o£_fûe
,

436 .
	ggë_fûe_size
 = 
fio_pmemblk_gë_fûe_size
,

437 .
	gu∆ök_fûe
 = 
fio_pmemblk_u∆ök_fûe
,

438 .
	gÊags
 = 
FIO_SYNCIO
 | 
FIO_DISKLESSIO
 | 
FIO_NOEXTEND
 | 
FIO_NODISKUTIL
,

441 
fio_öô
 
	$fio_pmemblk_ªgi°î
()

443 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

444 
	}
}

446 
fio_exô
 
	$fio_pmemblk_uƒegi°î
()

448 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

449 
	}
}

	@engines/posixaio.c

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<uni°d.h
>

10 
	~<î∫o.h
>

11 
	~<f˙é.h
>

13 
	~"../fio.h
"

15 
	sposixaio_d©a
 {

16 
io_u
 **
	maio_evíts
;

17 
	mqueued
;

20 
	$ts_utime_sö˚_now
(c⁄° 
time•ec
 *
°¨t
)

22 
time•ec
 
now
;

24 i‡(
	`fio_gë_m⁄o_time
(&
now
) < 0)

27  
	`utime_sö˚
(
°¨t
, &
now
);

28 
	}
}

30 
	$fio_posixaio_ˇn˚l
(
thªad_d©a
 
fio_unu£d
 *
td
,

31 
io_u
 *io_u)

33 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

34 
r
 = 
	`aio_ˇn˚l
(
f
->
fd
, &
io_u
->
aiocb
);

36 i‡(
r
 =
AIO_ALLDONE
 ||Ñ =
AIO_CANCELED
)

40 
	}
}

42 
	$fio_posixaio_¥ï
(
thªad_d©a
 
fio_unu£d
 *
td
,

43 
io_u
 *io_u)

45 
os_aiocb_t
 *
aiocb
 = &
io_u
->aiocb;

46 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

48 
aiocb
->
aio_fûdes
 = 
f
->
fd
;

49 
aiocb
->
aio_buf
 = 
io_u
->
x„r_buf
;

50 
aiocb
->
aio_nbyãs
 = 
io_u
->
x„r_buÊí
;

51 
aiocb
->
aio_off£t
 = 
io_u
->
off£t
;

52 
aiocb
->
aio_sigevít
.
sigev_nŸify
 = 
SIGEV_NONE
;

54 
io_u
->
£í
 = 0;

56 
	}
}

58 
	#SUSPEND_ENTRIES
 8

	)

60 
	$fio_posixaio_gëevíts
(
thªad_d©a
 *
td
, 
mö
,

61 
max
, c⁄° 
time•ec
 *
t
)

63 
posixaio_d©a
 *
pd
 = 
td
->
io_›s_d©a
;

64 
os_aiocb_t
 *
su•íd_li°
[
SUSPEND_ENTRIES
];

65 
time•ec
 
°¨t
;

66 
have_timeout
 = 0;

67 
su•íd_íåõs
;

68 
io_u
 *io_u;

69 
r
;

70 
i
;

72 i‡(
t
 && 
	`fio_gë_m⁄o_time
(&
°¨t
) == 0)

73 
have_timeout
 = 1;

75 
	`mem£t
(&
°¨t
, 0, (start));

77 
r
 = 0;

78 
ª°¨t
:

79 
	`mem£t
(
su•íd_li°
, 0, (suspend_list));

80 
su•íd_íåõs
 = 0;

81 
	`io_u_qôî
(&
td
->
io_u_Æl
, 
io_u
, 
i
) {

82 
îr
;

84 i‡(
io_u
->
£í
 || !(io_u->
Êags
 & 
IO_U_F_FLIGHT
))

87 
îr
 = 
	`aio_îr‹
(&
io_u
->
aiocb
);

88 i‡(
îr
 =
EINPROGRESS
) {

89 i‡(
su•íd_íåõs
 < 
SUSPEND_ENTRIES
) {

90 
su•íd_li°
[
su•íd_íåõs
] = &
io_u
->
aiocb
;

91 
su•íd_íåõs
++;

96 
io_u
->
£í
 = 1;

97 
pd
->
queued
--;

98 
pd
->
aio_evíts
[
r
++] = 
io_u
;

100 i‡(
îr
 =
ECANCELED
)

101 
io_u
->
ªsid
 = io_u->
x„r_buÊí
;

102 i‡(!
îr
) {

103 
ssize_t
 
ªtvÆ
 = 
	`aio_ªtu∫
(&
io_u
->
aiocb
);

105 
io_u
->
ªsid
 = io_u->
x„r_buÊí
 - 
ªtvÆ
;

107 
io_u
->
îr‹
 = 
îr
;

110 i‡(
r
 >
mö
)

111  
r
;

113 i‡(
have_timeout
) {

114 
u£c
;

116 
u£c
 = (
t
->
tv_£c
 * 1000000Ë+ (t->
tv_n£c
 / 1000);

117 i‡(
	`ts_utime_sö˚_now
(&
°¨t
Ë> 
u£c
)

118  
r
;

124 
	`aio_su•íd
((c⁄° 
os_aiocb_t
 * c⁄° *)
su•íd_li°
,

125 
su•íd_íåõs
, 
t
);

126 
ª°¨t
;

127 
	}
}

129 
io_u
 *
	$fio_posixaio_evít
(
thªad_d©a
 *
td
, 
evít
)

131 
posixaio_d©a
 *
pd
 = 
td
->
io_›s_d©a
;

133  
pd
->
aio_evíts
[
evít
];

134 
	}
}

136 
fio_q_°©us
 
	$fio_posixaio_queue
(
thªad_d©a
 *
td
,

137 
io_u
 *io_u)

139 
posixaio_d©a
 *
pd
 = 
td
->
io_›s_d©a
;

140 
os_aiocb_t
 *
aiocb
 = &
io_u
->aiocb;

141 
ªt
;

143 
	`fio_ro_check
(
td
, 
io_u
);

145 i‡(
io_u
->
ddú
 =
DDIR_READ
)

146 
ªt
 = 
	`aio_ªad
(
aiocb
);

147 i‡(
io_u
->
ddú
 =
DDIR_WRITE
)

148 
ªt
 = 
	`aio_wrôe
(
aiocb
);

149 i‡(
io_u
->
ddú
 =
DDIR_TRIM
) {

150 i‡(
pd
->
queued
)

151  
FIO_Q_BUSY
;

153 
	`do_io_u_åim
(
td
, 
io_u
);

154  
FIO_Q_COMPLETED
;

156 #ifde‡
CONFIG_POSIXAIO_FSYNC


157 
ªt
 = 
	`aio_fsync
(
O_SYNC
, 
aiocb
);

159 i‡(
pd
->
queued
)

160  
FIO_Q_BUSY
;

162 
	`do_io_u_sync
(
td
, 
io_u
);

163  
FIO_Q_COMPLETED
;

167 i‡(
ªt
) {

168 
aio_îr
 = 
î∫o
;

176 i‡(
aio_îr
 =
EAGAIN
)

177  
FIO_Q_BUSY
;

179 
io_u
->
îr‹
 = 
aio_îr
;

180 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "xfer");

181  
FIO_Q_COMPLETED
;

184 
pd
->
queued
++;

185  
FIO_Q_QUEUED
;

186 
	}
}

188 
	$fio_posixaio_˛ónup
(
thªad_d©a
 *
td
)

190 
posixaio_d©a
 *
pd
 = 
td
->
io_›s_d©a
;

192 i‡(
pd
) {

193 
	`‰ì
(
pd
->
aio_evíts
);

194 
	`‰ì
(
pd
);

196 
	}
}

198 
	$fio_posixaio_öô
(
thªad_d©a
 *
td
)

200 
posixaio_d©a
 *
pd
 = 
	`mÆloc
((*pd));

202 
	`mem£t
(
pd
, 0, (*pd));

203 
pd
->
aio_evíts
 = 
	`mÆloc
(
td
->
o
.
iodïth
 * (
io_u
 *));

204 
	`mem£t
(
pd
->
aio_evíts
, 0, 
td
->
o
.
iodïth
 * (
io_u
 *));

206 
td
->
io_›s_d©a
 = 
pd
;

208 
	}
}

210 
i€ngöe_›s
 
	gi€ngöe
 = {

211 .
«me
 = "posixaio",

212 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

213 .
	gÊags
 = 
FIO_ASYNCIO_SYNC_TRIM
,

214 .
	göô
 = 
fio_posixaio_öô
,

215 .
	g¥ï
 = 
fio_posixaio_¥ï
,

216 .
	gqueue
 = 
fio_posixaio_queue
,

217 .
	gˇn˚l
 = 
fio_posixaio_ˇn˚l
,

218 .
	ggëevíts
 = 
fio_posixaio_gëevíts
,

219 .
	gevít
 = 
fio_posixaio_evít
,

220 .
	g˛ónup
 = 
fio_posixaio_˛ónup
,

221 .
	g›í_fûe
 = 
gíîic_›í_fûe
,

222 .
	g˛o£_fûe
 = 
gíîic_˛o£_fûe
,

223 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

226 
fio_öô
 
	$fio_posixaio_ªgi°î
()

228 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

229 
	}
}

231 
fio_exô
 
	$fio_posixaio_uƒegi°î
()

233 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

234 
	}
}

	@engines/rados.c

9 
	~<ødos/libødos.h
>

10 
	~<±hªad.h
>

11 
	~"fio.h
"

12 
	~"../›tgroup.h
"

14 
	sødos_d©a
 {

15 
ødos_t
 
	m˛u°î
;

16 
ødos_io˘x_t
 
	mio_˘x
;

17 
io_u
 **
	maio_evíts
;

18 
boﬁ
 
	mc⁄√˘ed
;

19 
±hªad_muãx_t
 
	mcom∂ëed_lock
;

20 
±hªad_c⁄d_t
 
	mcom∂ëed_m‹e_io
;

21 
Êi°_hód
 
	mcom∂ëed_›î©i⁄s
;

22 
uöt64_t
 
	m›s_scheduÀd
;

23 
uöt64_t
 
	m›s_com∂ëed
;

26 
	sfio_ødos_iou
 {

27 
Êi°_hód
 
	mli°
;

28 
thªad_d©a
 *
	mtd
;

29 
io_u
 *
	mio_u
;

30 
ødos_com∂ëi⁄_t
 
	mcom∂ëi⁄
;

31 
ødos_wrôe_›_t
 
	mwrôe_›
;

35 
	sødos_›ti⁄s
 {

36 *
	m∑d
;

37 *
	m˛u°î_«me
;

38 *
	mpoﬁ_«me
;

39 *
	m˛õ¡_«me
;

40 *
	mc⁄f
;

41 
	mbusy_pﬁl
;

42 
	mtouch_obje˘s
;

45 
fio_›ti⁄
 
	g›ti⁄s
[] = {

47 .
«me
 = "clustername",

48 .
	g ame
 = "ceph clusterÇame",

49 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

50 .
	ghñp
 = "ClusterÇame for ceph",

51 .
	goff1
 = 
off£tof
(
ødos_›ti⁄s
, 
˛u°î_«me
),

52 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

53 .
	ggroup
 = 
FIO_OPT_G_RBD
,

56 .
	g«me
 = "pool",

57 .
	g ame
 = "poolÇameÅo use",

58 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

59 .
	ghñp
 = "CephÖoolÇameÅo benchmarkágainst",

60 .
	goff1
 = 
off£tof
(
ødos_›ti⁄s
, 
poﬁ_«me
),

61 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

62 .
	ggroup
 = 
FIO_OPT_G_RBD
,

65 .
	g«me
 = "clientname",

66 .
	g ame
 = "radosÉngine clientname",

67 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

68 .
	ghñp
 = "Name ofÅhe ceph clientÅoáccess RADOSÉngine",

69 .
	goff1
 = 
off£tof
(
ødos_›ti⁄s
, 
˛õ¡_«me
),

70 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

71 .
	ggroup
 = 
FIO_OPT_G_RBD
,

74 .
	g«me
 = "conf",

75 .
	g ame
 = "ceph configuration fileÖath",

76 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

77 .
	ghñp
 = "Path ofÅhe ceph configuration file",

78 .
	goff1
 = 
off£tof
(
ødos_›ti⁄s
, 
c⁄f
),

79 .
	gdef
 = "/etc/ceph/ceph.conf",

80 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

81 .
	ggroup
 = 
FIO_OPT_G_RBD
,

84 .
	g«me
 = "busy_poll",

85 .
	g ame
 = "busyÖoll mode",

86 .
	gty≥
 = 
FIO_OPT_BOOL
,

87 .
	ghñp
 = "BusyÖoll for completions instead of sleeping",

88 .
	goff1
 = 
off£tof
(
ødos_›ti⁄s
, 
busy_pﬁl
),

89 .
	gdef
 = "0",

90 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

91 .
	ggroup
 = 
FIO_OPT_G_RBD
,

94 .
	g«me
 = "touch_objects",

95 .
	g ame
 = "touch objects on start",

96 .
	gty≥
 = 
FIO_OPT_BOOL
,

97 .
	ghñp
 = "Touch (create) objects on start",

98 .
	goff1
 = 
off£tof
(
ødos_›ti⁄s
, 
touch_obje˘s
),

99 .
	gdef
 = "1",

100 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

101 .
	ggroup
 = 
FIO_OPT_G_RBD
,

104 .
	g«me
 = 
NULL
,

108 
	$_fio_£tup_ødos_d©a
(
thªad_d©a
 *
td
,

109 
ødos_d©a
 **
ødos_d©a_±r
)

111 
ødos_d©a
 *
ødos
;

113 i‡(
td
->
io_›s_d©a
)

116 
ødos
 = 
	`ˇŒoc
(1, (
ødos_d©a
));

117 i‡(!
ødos
)

118 
Áûed
;

120 
ødos
->
c⁄√˘ed
 = 
Ál£
;

122 
ødos
->
aio_evíts
 = 
	`ˇŒoc
(
td
->
o
.
iodïth
, (
io_u
 *));

123 i‡(!
ødos
->
aio_evíts
)

124 
Áûed
;

125 
	`±hªad_muãx_öô
(&
ødos
->
com∂ëed_lock
, 
NULL
);

126 
	`±hªad_c⁄d_öô
(&
ødos
->
com∂ëed_m‹e_io
, 
NULL
);

127 
	`INIT_FLIST_HEAD
(&
ødos
->
com∂ëed_›î©i⁄s
);

128 
ødos
->
›s_scheduÀd
 = 0;

129 
ødos
->
›s_com∂ëed
 = 0;

130 *
ødos_d©a_±r
 = 
ødos
;

133 
Áûed
:

134 i‡(
ødos
) {

135 i‡(
ødos
->
aio_evíts
)

136 
	`‰ì
(
ødos
->
aio_evíts
);

137 
	`‰ì
(
ødos
);

140 
	}
}

142 
	$_fio_ødos_rm_obje˘s
(
thªad_d©a
 *
td
, 
ødos_d©a
 *
ødos
)

144 
size_t
 
i
;

145 
i
 = 0; i < 
td
->
o
.
ƒ_fûes
; i++) {

146 
fio_fûe
 *
f
 = 
td
->
fûes
[
i
];

147 
	`ødos_ªmove
(
ødos
->
io_˘x
, 
f
->
fûe_«me
);

149 
	}
}

151 
	$_fio_ødos_c⁄√˘
(
thªad_d©a
 *
td
)

153 
ødos_d©a
 *
ødos
 = 
td
->
io_›s_d©a
;

154 
ødos_›ti⁄s
 *
o
 = 
td
->
eo
;

155 
r
;

156 c⁄° 
uöt64_t
 
fûe_size
 =

157 
td
->
o
.
size
 / (td->o.
ƒ_fûes
 ?Åd->o.nr_files : 1u);

158 
fio_fûe
 *
f
;

159 
uöt32_t
 
i
;

161 i‡(
o
->
˛u°î_«me
) {

162 *
˛õ¡_«me
 = 
NULL
;

169 i‡(
o
->
˛õ¡_«me
) {

170 i‡(!
	`ödex
(
o
->
˛õ¡_«me
, '.')) {

171 
˛õ¡_«me
 = 
	`ˇŒoc
(1, 
	`°æí
("client.") +

172 
	`°æí
(
o
->
˛õ¡_«me
) + 1);

173 
	`°rˇt
(
˛õ¡_«me
, "client.");

174 
	`°rˇt
(
˛õ¡_«me
, 
o
->client_name);

176 
˛õ¡_«me
 = 
o
->client_name;

180 
r
 = 
	`ødos_¸óã2
(&
ødos
->
˛u°î
, 
o
->
˛u°î_«me
,

181 
˛õ¡_«me
, 0);

183 i‡(
˛õ¡_«me
 && !
	`ödex
(
o
->client_name, '.'))

184 
	`‰ì
(
˛õ¡_«me
);

186 
r
 = 
	`ødos_¸óã
(&
ødos
->
˛u°î
, 
o
->
˛õ¡_«me
);

188 i‡(
o
->
poﬁ_«me
 =
NULL
) {

189 
	`log_îr
("radosÖoolÇame must beÖrovided.\n");

190 
Áûed_óæy
;

193 i‡(
r
 < 0) {

194 
	`log_îr
("rados_create failed.\n");

195 
Áûed_óæy
;

198 
r
 = 
	`ødos_c⁄f_ªad_fûe
(
ødos
->
˛u°î
, 
o
->
c⁄f
);

199 i‡(
r
 < 0) {

200 
	`log_îr
("rados_conf_read_file failed.\n");

201 
Áûed_óæy
;

204 
r
 = 
	`ødos_c⁄√˘
(
ødos
->
˛u°î
);

205 i‡(
r
 < 0) {

206 
	`log_îr
("rados_connect failed.\n");

207 
Áûed_óæy
;

210 
r
 = 
	`ødos_io˘x_¸óã
(
ødos
->
˛u°î
, 
o
->
poﬁ_«me
, &ødos->
io_˘x
);

211 i‡(
r
 < 0) {

212 
	`log_îr
("rados_ioctx_create failed.\n");

213 
Áûed_shutdown
;

216 
i
 = 0; i < 
td
->
o
.
ƒ_fûes
; i++) {

217 
f
 = 
td
->
fûes
[
i
];

218 
f
->
ªÆ_fûe_size
 = 
fûe_size
;

219 i‡(
o
->
touch_obje˘s
) {

220 
r
 = 
	`ødos_wrôe
(
ødos
->
io_˘x
, 
f
->
fûe_«me
, "", 0, 0);

221 i‡(
r
 < 0) {

222 
Áûed_obj_¸óã
;

228 
Áûed_obj_¸óã
:

229 
	`_fio_ødos_rm_obje˘s
(
td
, 
ødos
);

230 
	`ødos_io˘x_de°roy
(
ødos
->
io_˘x
);

231 
ødos
->
io_˘x
 = 
NULL
;

232 
Áûed_shutdown
:

233 
	`ødos_shutdown
(
ødos
->
˛u°î
);

234 
ødos
->
˛u°î
 = 
NULL
;

235 
Áûed_óæy
:

237 
	}
}

239 
	$_fio_ødos_disc⁄√˘
(
ødos_d©a
 *
ødos
)

241 i‡(!
ødos
)

244 i‡(
ødos
->
io_˘x
) {

245 
	`ødos_io˘x_de°roy
(
ødos
->
io_˘x
);

246 
ødos
->
io_˘x
 = 
NULL
;

249 i‡(
ødos
->
˛u°î
) {

250 
	`ødos_shutdown
(
ødos
->
˛u°î
);

251 
ødos
->
˛u°î
 = 
NULL
;

253 
	}
}

255 
	$fio_ødos_˛ónup
(
thªad_d©a
 *
td
)

257 
ødos_d©a
 *
ødos
 = 
td
->
io_›s_d©a
;

258 i‡(
ødos
) {

259 
	`±hªad_muãx_lock
(&
ødos
->
com∂ëed_lock
);

260 
ødos
->
›s_scheduÀd
 !ødos->
›s_com∂ëed
)

261 
	`±hªad_c⁄d_waô
(&
ødos
->
com∂ëed_m‹e_io
, &ødos->
com∂ëed_lock
);

262 
	`±hªad_muãx_u∆ock
(&
ødos
->
com∂ëed_lock
);

263 
	`_fio_ødos_rm_obje˘s
(
td
, 
ødos
);

264 
	`_fio_ødos_disc⁄√˘
(
ødos
);

265 
	`‰ì
(
ødos
->
aio_evíts
);

266 
	`‰ì
(
ødos
);

268 
	}
}

270 
	$com∂ëe_ˇŒback
(
ødos_com∂ëi⁄_t
 
cb
, *
¨g
)

272 
fio_ødos_iou
 *
‰i
 = (fio_ødos_iou *)
¨g
;

273 
ødos_d©a
 *
ødos
 = 
‰i
->
td
->
io_›s_d©a
;

274 
	`as£π
(
‰i
->
com∂ëi⁄
);

275 
	`as£π
(
	`ødos_aio_is_com∂ëe
(
‰i
->
com∂ëi⁄
));

276 
	`±hªad_muãx_lock
(&
ødos
->
com∂ëed_lock
);

277 
	`Êi°_add_èû
(&
‰i
->
li°
, &
ødos
->
com∂ëed_›î©i⁄s
);

278 
ødos
->
›s_com∂ëed
++;

279 
	`±hªad_muãx_u∆ock
(&
ødos
->
com∂ëed_lock
);

280 
	`±hªad_c⁄d_sig«l
(&
ødos
->
com∂ëed_m‹e_io
);

281 
	}
}

283 
fio_q_°©us
 
	$fio_ødos_queue
(
thªad_d©a
 *
td
,

284 
io_u
 *io_u)

286 
ødos_d©a
 *
ødos
 = 
td
->
io_›s_d©a
;

287 
fio_ødos_iou
 *
‰i
 = 
io_u
->
ígöe_d©a
;

288 *
obje˘
 = 
io_u
->
fûe
->
fûe_«me
;

289 
r
 = -1;

291 
	`fio_ro_check
(
td
, 
io_u
);

293 i‡(
io_u
->
ddú
 =
DDIR_WRITE
) {

294 
r
 = 
	`ødos_aio_¸óã_com∂ëi⁄
(
‰i
, 
com∂ëe_ˇŒback
,

295 
NULL
, &
‰i
->
com∂ëi⁄
);

296 i‡(
r
 < 0) {

297 
	`log_îr
("rados_aio_create_completion failed.\n");

298 
Áûed
;

301 
r
 = 
	`ødos_aio_wrôe
(
ødos
->
io_˘x
, 
obje˘
, 
‰i
->
com∂ëi⁄
,

302 
io_u
->
x„r_buf
, io_u->
x„r_buÊí
, io_u->
off£t
);

303 i‡(
r
 < 0) {

304 
	`log_îr
("rados_write failed.\n");

305 
Áûed_comp
;

307 
ødos
->
›s_scheduÀd
++;

308  
FIO_Q_QUEUED
;

309 } i‡(
io_u
->
ddú
 =
DDIR_READ
) {

310 
r
 = 
	`ødos_aio_¸óã_com∂ëi⁄
(
‰i
, 
com∂ëe_ˇŒback
,

311 
NULL
, &
‰i
->
com∂ëi⁄
);

312 i‡(
r
 < 0) {

313 
	`log_îr
("rados_aio_create_completion failed.\n");

314 
Áûed
;

316 
r
 = 
	`ødos_aio_ªad
(
ødos
->
io_˘x
, 
obje˘
, 
‰i
->
com∂ëi⁄
,

317 
io_u
->
x„r_buf
, io_u->
x„r_buÊí
, io_u->
off£t
);

318 i‡(
r
 < 0) {

319 
	`log_îr
("rados_aio_read failed.\n");

320 
Áûed_comp
;

322 
ødos
->
›s_scheduÀd
++;

323  
FIO_Q_QUEUED
;

324 } i‡(
io_u
->
ddú
 =
DDIR_TRIM
) {

325 
r
 = 
	`ødos_aio_¸óã_com∂ëi⁄
(
‰i
, 
com∂ëe_ˇŒback
,

326 
NULL
 , &
‰i
->
com∂ëi⁄
);

327 i‡(
r
 < 0) {

328 
	`log_îr
("rados_aio_create_completion failed.\n");

329 
Áûed
;

331 
‰i
->
wrôe_›
 = 
	`ødos_¸óã_wrôe_›
();

332 i‡(
‰i
->
wrôe_›
 =
NULL
) {

333 
	`log_îr
("rados_create_write_op failed.\n");

334 
Áûed_comp
;

336 
	`ødos_wrôe_›_zîo
(
‰i
->
wrôe_›
, 
io_u
->
off£t
,

337 
io_u
->
x„r_buÊí
);

338 
r
 = 
	`ødos_aio_wrôe_›_›î©e
(
‰i
->
wrôe_›
, 
ødos
->
io_˘x
,

339 
‰i
->
com∂ëi⁄
, 
obje˘
, 
NULL
, 0);

340 i‡(
r
 < 0) {

341 
	`log_îr
("rados_aio_write_op_operate failed.\n");

342 
Áûed_wrôe_›
;

344 
ødos
->
›s_scheduÀd
++;

345  
FIO_Q_QUEUED
;

348 
	`log_îr
("WARNING: Only DDIR_READ, DDIR_WRITEánd DDIR_TRIMáre supported!");

350 
Áûed_wrôe_›
:

351 
	`ødos_ªÀa£_wrôe_›
(
‰i
->
wrôe_›
);

352 
Áûed_comp
:

353 
	`ødos_aio_ªÀa£
(
‰i
->
com∂ëi⁄
);

354 
Áûed
:

355 
io_u
->
îr‹
 = -
r
;

356 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "xfer");

357  
FIO_Q_COMPLETED
;

358 
	}
}

360 
io_u
 *
	$fio_ødos_evít
(
thªad_d©a
 *
td
, 
evít
)

362 
ødos_d©a
 *
ødos
 = 
td
->
io_›s_d©a
;

363  
ødos
->
aio_evíts
[
evít
];

364 
	}
}

366 
	$fio_ødos_gëevíts
(
thªad_d©a
 *
td
, 
mö
,

367 
max
, c⁄° 
time•ec
 *
t
)

369 
ødos_d©a
 *
ødos
 = 
td
->
io_›s_d©a
;

370 
evíts
 = 0;

371 
fio_ødos_iou
 *
‰i
;

373 
	`±hªad_muãx_lock
(&
ødos
->
com∂ëed_lock
);

374 
evíts
 < 
mö
) {

375 
	`Êi°_em±y
(&
ødos
->
com∂ëed_›î©i⁄s
)) {

376 
	`±hªad_c⁄d_waô
(&
ødos
->
com∂ëed_m‹e_io
, &ødos->
com∂ëed_lock
);

378 
	`as£π
(!
	`Êi°_em±y
(&
ødos
->
com∂ëed_›î©i⁄s
));

380 
‰i
 = 
	`Êi°_fú°_íåy
(&
ødos
->
com∂ëed_›î©i⁄s
, 
fio_ødos_iou
, 
li°
);

381 
	`as£π
(
‰i
->
com∂ëi⁄
);

382 
	`as£π
(
	`ødos_aio_is_com∂ëe
(
‰i
->
com∂ëi⁄
));

383 i‡(
‰i
->
wrôe_›
 !
NULL
) {

384 
	`ødos_ªÀa£_wrôe_›
(
‰i
->
wrôe_›
);

385 
‰i
->
wrôe_›
 = 
NULL
;

387 
	`ødos_aio_ªÀa£
(
‰i
->
com∂ëi⁄
);

388 
‰i
->
com∂ëi⁄
 = 
NULL
;

390 
ødos
->
aio_evíts
[
evíts
] = 
‰i
->
io_u
;

391 
evíts
 ++;

392 
	`Êi°_dñ
(&
‰i
->
li°
);

393 i‡(
evíts
 >
max
) ;

395 
	`±hªad_muãx_u∆ock
(&
ødos
->
com∂ëed_lock
);

396  
evíts
;

397 
	}
}

399 
	$fio_ødos_£tup
(
thªad_d©a
 *
td
)

401 
ødos_d©a
 *
ødos
 = 
NULL
;

402 
r
;

404 
r
 = 
	`_fio_£tup_ødos_d©a
(
td
, &
ødos
);

405 i‡(
r
) {

406 
	`log_îr
("fio_setup_rados_data failed.\n");

407 
˛ónup
;

409 
td
->
io_›s_d©a
 = 
ødos
;

413 
td
->
o
.
u£_thªad
 = 1;

419 
r
 = 
	`_fio_ødos_c⁄√˘
(
td
);

420 i‡(
r
) {

421 
	`log_îr
("fio_rados_connect failed.\n");

422 
˛ónup
;

424 
ødos
->
c⁄√˘ed
 = 
åue
;

427 
˛ónup
:

428 
	`fio_ødos_˛ónup
(
td
);

429  
r
;

430 
	}
}

435 
	$fio_ødos_›í
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

438 
	}
}

439 
	$fio_ødos_övÆid©e
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

442 
	}
}

444 
	$fio_ødos_io_u_‰ì
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

446 
fio_ødos_iou
 *
‰i
 = 
io_u
->
ígöe_d©a
;

448 i‡(
‰i
) {

449 
io_u
->
ígöe_d©a
 = 
NULL
;

450 
‰i
->
td
 = 
NULL
;

451 i‡(
‰i
->
com∂ëi⁄
)

452 
	`ødos_aio_ªÀa£
(
‰i
->
com∂ëi⁄
);

453 i‡(
‰i
->
wrôe_›
)

454 
	`ødos_ªÀa£_wrôe_›
(
‰i
->
wrôe_›
);

455 
	`‰ì
(
‰i
);

457 
	}
}

459 
	$fio_ødos_io_u_öô
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

461 
fio_ødos_iou
 *
‰i
;

462 
‰i
 = 
	`ˇŒoc
(1, (*fri));

463 
‰i
->
io_u
 = io_u;

464 
‰i
->
td
 =Åd;

465 
	`INIT_FLIST_HEAD
(&
‰i
->
li°
);

466 
io_u
->
ígöe_d©a
 = 
‰i
;

468 
	}
}

471 
FIO_STATIC
 
i€ngöe_›s
 
	gi€ngöe
 = {

472 .
«me
 = "rados",

473 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

474 .
	gÊags
 = 
FIO_DISKLESSIO
,

475 .
	g£tup
 = 
fio_ødos_£tup
,

476 .
	gqueue
 = 
fio_ødos_queue
,

477 .
	ggëevíts
 = 
fio_ødos_gëevíts
,

478 .
	gevít
 = 
fio_ødos_evít
,

479 .
	g˛ónup
 = 
fio_ødos_˛ónup
,

480 .
	g›í_fûe
 = 
fio_ødos_›í
,

481 .
	gövÆid©e
 = 
fio_ødos_övÆid©e
,

482 .
	g›ti⁄s
 = 
›ti⁄s
,

483 .
	gio_u_öô
 = 
fio_ødos_io_u_öô
,

484 .
	gio_u_‰ì
 = 
fio_ødos_io_u_‰ì
,

485 .
	g›ti⁄_°ru˘_size
 = (
ødos_›ti⁄s
),

488 
fio_öô
 
	$fio_ødos_ªgi°î
()

490 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

491 
	}
}

493 
fio_exô
 
	$fio_ødos_uƒegi°î
()

495 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

496 
	}
}

	@engines/rbd.c

8 
	~<rbd/librbd.h
>

10 
	~"../fio.h
"

11 
	~"../›tgroup.h
"

13 #ifde‡
CONFIG_RBD_POLL


15 
	~<pﬁl.h
>

16 
	~<sys/evítfd.h
>

19 
	sfio_rbd_iou
 {

20 
io_u
 *
	mio_u
;

21 
rbd_com∂ëi⁄_t
 
	mcom∂ëi⁄
;

22 
	mio_£í
;

23 
	mio_com∂ëe
;

26 
	srbd_d©a
 {

27 
ødos_t
 
	m˛u°î
;

28 
ødos_io˘x_t
 
	mio_˘x
;

29 
rbd_image_t
 
	mimage
;

30 
io_u
 **
	maio_evíts
;

31 
io_u
 **
	ms‹t_evíts
;

32 
	mfd
;

33 
boﬁ
 
	mc⁄√˘ed
;

36 
	srbd_›ti⁄s
 {

37 *
	m∑d
;

38 *
	m˛u°î_«me
;

39 *
	mrbd_«me
;

40 *
	mpoﬁ_«me
;

41 *
	m˛õ¡_«me
;

42 
	mbusy_pﬁl
;

45 
fio_›ti⁄
 
	g›ti⁄s
[] = {

47 .
«me
 = "clustername",

48 .
	g ame
 = "ceph clusterÇame",

49 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

50 .
	ghñp
 = "ClusterÇame for ceph",

51 .
	goff1
 = 
off£tof
(
rbd_›ti⁄s
, 
˛u°î_«me
),

52 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

53 .
	ggroup
 = 
FIO_OPT_G_RBD
,

56 .
	g«me
 = "rbdname",

57 .
	g ame
 = "rbdÉngineÑbdname",

58 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

59 .
	ghñp
 = "RBDÇame for RBDÉngine",

60 .
	goff1
 = 
off£tof
(
rbd_›ti⁄s
, 
rbd_«me
),

61 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

62 .
	ggroup
 = 
FIO_OPT_G_RBD
,

65 .
	g«me
 = "pool",

66 .
	g ame
 = "rbdÉngineÖool",

67 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

68 .
	ghñp
 = "Name ofÅheÖool hostingÅhe RBD forÅhe RBDÉngine",

69 .
	goff1
 = 
off£tof
(
rbd_›ti⁄s
, 
poﬁ_«me
),

70 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

71 .
	ggroup
 = 
FIO_OPT_G_RBD
,

74 .
	g«me
 = "clientname",

75 .
	g ame
 = "rbdÉngine clientname",

76 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

77 .
	ghñp
 = "Name ofÅhe ceph clientÅoáccessÅhe RBD forÅhe RBDÉngine",

78 .
	goff1
 = 
off£tof
(
rbd_›ti⁄s
, 
˛õ¡_«me
),

79 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

80 .
	ggroup
 = 
FIO_OPT_G_RBD
,

83 .
	g«me
 = "busy_poll",

84 .
	g ame
 = "BusyÖoll",

85 .
	gty≥
 = 
FIO_OPT_BOOL
,

86 .
	ghñp
 = "BusyÖoll for completions instead of sleeping",

87 .
	goff1
 = 
off£tof
(
rbd_›ti⁄s
, 
busy_pﬁl
),

88 .
	gdef
 = "0",

89 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

90 .
	ggroup
 = 
FIO_OPT_G_RBD
,

93 .
	g«me
 = 
NULL
,

97 
	$_fio_£tup_rbd_d©a
(
thªad_d©a
 *
td
,

98 
rbd_d©a
 **
rbd_d©a_±r
)

100 
rbd_d©a
 *
rbd
;

102 i‡(
td
->
io_›s_d©a
)

105 
rbd
 = 
	`ˇŒoc
(1, (
rbd_d©a
));

106 i‡(!
rbd
)

107 
Áûed
;

109 
rbd
->
c⁄√˘ed
 = 
Ál£
;

112 
rbd
->
fd
 = -1;

114 
rbd
->
aio_evíts
 = 
	`ˇŒoc
(
td
->
o
.
iodïth
, (
io_u
 *));

115 i‡(!
rbd
->
aio_evíts
)

116 
Áûed
;

118 
rbd
->
s‹t_evíts
 = 
	`ˇŒoc
(
td
->
o
.
iodïth
, (
io_u
 *));

119 i‡(!
rbd
->
s‹t_evíts
)

120 
Áûed
;

122 *
rbd_d©a_±r
 = 
rbd
;

125 
Áûed
:

126 i‡(
rbd
) {

127 i‡(
rbd
->
aio_evíts
)

128 
	`‰ì
(
rbd
->
aio_evíts
);

129 i‡(
rbd
->
s‹t_evíts
)

130 
	`‰ì
(
rbd
->
s‹t_evíts
);

131 
	`‰ì
(
rbd
);

135 
	}
}

137 #ifde‡
CONFIG_RBD_POLL


138 
boﬁ
 
	$_fio_rbd_£tup_pﬁl
(
rbd_d©a
 *
rbd
)

140 
r
;

143 
rbd
->
fd
 = 
	`evítfd
(0, 
EFD_SEMAPHORE
);

144 i‡(
rbd
->
fd
 < 0) {

145 
	`log_îr
("eventfd failed.\n");

146  
Ál£
;

149 
r
 = 
	`rbd_£t_image_nŸifiˇti⁄
(
rbd
->
image
,Ñbd->
fd
, 
EVENT_TYPE_EVENTFD
);

150 i‡(
r
 < 0) {

151 
	`log_îr
("rbd_set_image_notification failed.\n");

152 
	`˛o£
(
rbd
->
fd
);

153 
rbd
->
fd
 = -1;

154  
Ál£
;

157  
åue
;

158 
	}
}

160 
boﬁ
 
	$_fio_rbd_£tup_pﬁl
(
rbd_d©a
 *
rbd
)

162  
åue
;

163 
	}
}

166 
	$_fio_rbd_c⁄√˘
(
thªad_d©a
 *
td
)

168 
rbd_d©a
 *
rbd
 = 
td
->
io_›s_d©a
;

169 
rbd_›ti⁄s
 *
o
 = 
td
->
eo
;

170 
r
;

172 i‡(
o
->
˛u°î_«me
) {

173 *
˛õ¡_«me
 = 
NULL
;

180 i‡(
o
->
˛õ¡_«me
) {

181 i‡(!
	`ödex
(
o
->
˛õ¡_«me
, '.')) {

182 
˛õ¡_«me
 = 
	`ˇŒoc
(1, 
	`°æí
("client.") +

183 
	`°æí
(
o
->
˛õ¡_«me
) + 1);

184 
	`°rˇt
(
˛õ¡_«me
, "client.");

185 
	`°rˇt
(
˛õ¡_«me
, 
o
->client_name);

187 
˛õ¡_«me
 = 
o
->client_name;

191 
r
 = 
	`ødos_¸óã2
(&
rbd
->
˛u°î
, 
o
->
˛u°î_«me
,

192 
˛õ¡_«me
, 0);

194 i‡(
˛õ¡_«me
 && !
	`ödex
(
o
->client_name, '.'))

195 
	`‰ì
(
˛õ¡_«me
);

197 
r
 = 
	`ødos_¸óã
(&
rbd
->
˛u°î
, 
o
->
˛õ¡_«me
);

199 i‡(
r
 < 0) {

200 
	`log_îr
("rados_create failed.\n");

201 
Áûed_óæy
;

203 i‡(
o
->
poﬁ_«me
 =
NULL
) {

204 
	`log_îr
("rbdÖoolÇame must beÖrovided.\n");

205 
Áûed_óæy
;

207 i‡(!
o
->
rbd_«me
) {

208 
	`log_îr
("rbdname must beÖrovided.\n");

209 
Áûed_óæy
;

212 
r
 = 
	`ødos_c⁄f_ªad_fûe
(
rbd
->
˛u°î
, 
NULL
);

213 i‡(
r
 < 0) {

214 
	`log_îr
("rados_conf_read_file failed.\n");

215 
Áûed_óæy
;

218 
r
 = 
	`ødos_c⁄√˘
(
rbd
->
˛u°î
);

219 i‡(
r
 < 0) {

220 
	`log_îr
("rados_connect failed.\n");

221 
Áûed_shutdown
;

224 
r
 = 
	`ødos_io˘x_¸óã
(
rbd
->
˛u°î
, 
o
->
poﬁ_«me
, &rbd->
io_˘x
);

225 i‡(
r
 < 0) {

226 
	`log_îr
("rados_ioctx_create failed.\n");

227 
Áûed_shutdown
;

230 i‡(
td
->
o
.
odúe˘
) {

231 
r
 = 
	`ødos_c⁄f_£t
(
rbd
->
˛u°î
, "rbd_cache", "false");

232 i‡(
r
 < 0) {

233 
	`log_öfo
("failedÅo disable RBD in-memory cache\n");

237 
r
 = 
	`rbd_›í
(
rbd
->
io_˘x
, 
o
->
rbd_«me
, &rbd->
image
, 
NULL
 );

238 i‡(
r
 < 0) {

239 
	`log_îr
("rbd_open failed.\n");

240 
Áûed_›í
;

243 i‡(!
td
->
o
.
odúe˘
) {

248 
r
 = 
	`rbd_Êush
(
rbd
->
image
);

249 i‡(
r
 < 0) {

250 
	`log_öfo
("rbd: failedÅo issue initial flush\n");

254 i‡(!
	`_fio_rbd_£tup_pﬁl
(
rbd
))

255 
Áûed_pﬁl
;

259 
Áûed_pﬁl
:

260 
	`rbd_˛o£
(
rbd
->
image
);

261 
rbd
->
image
 = 
NULL
;

262 
Áûed_›í
:

263 
	`ødos_io˘x_de°roy
(
rbd
->
io_˘x
);

264 
rbd
->
io_˘x
 = 
NULL
;

265 
Áûed_shutdown
:

266 
	`ødos_shutdown
(
rbd
->
˛u°î
);

267 
rbd
->
˛u°î
 = 
NULL
;

268 
Áûed_óæy
:

270 
	}
}

272 
	$_fio_rbd_disc⁄√˘
(
rbd_d©a
 *
rbd
)

274 i‡(!
rbd
)

278 i‡(
rbd
->
fd
 != -1) {

279 
	`˛o£
(
rbd
->
fd
);

280 
rbd
->
fd
 = -1;

284 i‡(
rbd
->
image
) {

285 
	`rbd_˛o£
(
rbd
->
image
);

286 
rbd
->
image
 = 
NULL
;

289 i‡(
rbd
->
io_˘x
) {

290 
	`ødos_io˘x_de°roy
(
rbd
->
io_˘x
);

291 
rbd
->
io_˘x
 = 
NULL
;

294 i‡(
rbd
->
˛u°î
) {

295 
	`ødos_shutdown
(
rbd
->
˛u°î
);

296 
rbd
->
˛u°î
 = 
NULL
;

298 
	}
}

300 
	$_fio_rbd_föish_aiocb
(
rbd_com∂ëi⁄_t
 
comp
, *
d©a
)

302 
fio_rbd_iou
 *
‰i
 = 
d©a
;

303 
io_u
 *io_u = 
‰i
->io_u;

304 
ssize_t
 
ªt
;

311 
ªt
 = 
	`rbd_aio_gë_ªtu∫_vÆue
(
‰i
->
com∂ëi⁄
);

312 i‡(
ªt
 < 0) {

313 
io_u
->
îr‹
 = -
ªt
;

314 
io_u
->
ªsid
 = io_u->
x„r_buÊí
;

316 
io_u
->
îr‹
 = 0;

318 
‰i
->
io_com∂ëe
 = 1;

319 
	}
}

321 
io_u
 *
	$fio_rbd_evít
(
thªad_d©a
 *
td
, 
evít
)

323 
rbd_d©a
 *
rbd
 = 
td
->
io_›s_d©a
;

325  
rbd
->
aio_evíts
[
evít
];

326 
	}
}

328 
ölöe
 
	$‰i_check_com∂ëe
(
rbd_d©a
 *
rbd
, 
io_u
 *io_u,

329 *
evíts
)

331 
fio_rbd_iou
 *
‰i
 = 
io_u
->
ígöe_d©a
;

333 i‡(
‰i
->
io_com∂ëe
) {

334 
‰i
->
io_£í
 = 1;

335 
rbd
->
aio_evíts
[*
evíts
] = 
io_u
;

336 (*
evíts
)++;

338 
	`rbd_aio_ªÀa£
(
‰i
->
com∂ëi⁄
);

343 
	}
}

345 #i‚de‡
CONFIG_RBD_POLL


346 
ölöe
 
	$rbd_io_u_£í
(
io_u
 *io_u)

348 
fio_rbd_iou
 *
‰i
 = 
io_u
->
ígöe_d©a
;

350  
‰i
->
io_£í
;

351 
	}
}

354 
	$rbd_io_u_waô_com∂ëe
(
io_u
 *io_u)

356 
fio_rbd_iou
 *
‰i
 = 
io_u
->
ígöe_d©a
;

358 
	`rbd_aio_waô_f‹_com∂ëe
(
‰i
->
com∂ëi⁄
);

359 
	}
}

361 
	$rbd_io_u_cmp
(c⁄° *
p1
, c⁄° *
p2
)

363 c⁄° 
io_u
 **
a
 = (c⁄° io_u **Ë
p1
;

364 c⁄° 
io_u
 **
b
 = (c⁄° io_u **Ë
p2
;

365 
uöt64_t
 
©
, 
bt
;

367 
©
 = 
	`utime_sö˚_now
(&(*
a
)->
°¨t_time
);

368 
bt
 = 
	`utime_sö˚_now
(&(*
b
)->
°¨t_time
);

370 i‡(
©
 < 
bt
)

372 i‡(
©
 =
bt
)

376 
	}
}

378 
	$rbd_ôî_evíts
(
thªad_d©a
 *
td
, *
evíts
,

379 
mö_evts
, 
waô
)

381 
rbd_d©a
 *
rbd
 = 
td
->
io_›s_d©a
;

382 
this_evíts
 = 0;

383 
io_u
 *io_u;

384 
i
, 
sidx
 = 0;

386 #ifde‡
CONFIG_RBD_POLL


387 
ªt
 = 0;

388 
evít_num
 = 0;

389 
fio_rbd_iou
 *
‰i
 = 
NULL
;

390 
rbd_com∂ëi⁄_t
 
comps
[
mö_evts
];

391 
uöt64_t
 
cou¡î
;

392 
boﬁ
 
com∂ëed
;

394 
pﬁlfd
 
pfd
;

395 
pfd
.
fd
 = 
rbd
->fd;

396 
pfd
.
evíts
 = 
POLLIN
;

398 
ªt
 = 
	`pﬁl
(&
pfd
, 1, 
waô
 ? -1 : 0);

399 i‡(
ªt
 <= 0)

401 i‡(!(
pfd
.
ªvíts
 & 
POLLIN
))

404 
evít_num
 = 
	`rbd_pﬁl_io_evíts
(
rbd
->
image
, 
comps
, 
mö_evts
);

406 
i
 = 0; i < 
evít_num
; i++) {

407 
‰i
 = 
	`rbd_aio_gë_¨g
(
comps
[
i
]);

408 
io_u
 = 
‰i
->io_u;

411 
ªt
 = 
	`ªad
(
rbd
->
fd
, &
cou¡î
, (counter));

412 i‡(
ªt
 <= 0)

413 
	`log_îr
("rbd_iter_events failedÅo decrement semaphore.\n");

415 
com∂ëed
 = 
	`‰i_check_com∂ëe
(
rbd
, 
io_u
, 
evíts
);

416 
	`as£π
(
com∂ëed
);

418 
this_evíts
++;

421 
	`io_u_qôî
(&
td
->
io_u_Æl
, 
io_u
, 
i
) {

422 i‡(!(
io_u
->
Êags
 & 
IO_U_F_FLIGHT
))

424 i‡(
	`rbd_io_u_£í
(
io_u
))

427 i‡(
	`‰i_check_com∂ëe
(
rbd
, 
io_u
, 
evíts
))

428 
this_evíts
++;

429 i‡(
waô
)

430 
rbd
->
s‹t_evíts
[
sidx
++] = 
io_u
;

434 i‡(!
waô
 || !
sidx
)

435  
this_evíts
;

442 i‡(
sidx
 > 1)

443 
	`qs‹t
(
rbd
->
s‹t_evíts
, 
sidx
, (
io_u
 *), 
rbd_io_u_cmp
);

445 
i
 = 0; i < 
sidx
; i++) {

446 
io_u
 = 
rbd
->
s‹t_evíts
[
i
];

448 i‡(
	`‰i_check_com∂ëe
(
rbd
, 
io_u
, 
evíts
)) {

449 
this_evíts
++;

457 i‡(*
evíts
 >
mö_evts
)

460 
	`rbd_io_u_waô_com∂ëe
(
io_u
);

462 i‡(
	`‰i_check_com∂ëe
(
rbd
, 
io_u
, 
evíts
))

463 
this_evíts
++;

466  
this_evíts
;

467 
	}
}

469 
	$fio_rbd_gëevíts
(
thªad_d©a
 *
td
, 
mö
,

470 
max
, c⁄° 
time•ec
 *
t
)

472 
this_evíts
, 
evíts
 = 0;

473 
rbd_›ti⁄s
 *
o
 = 
td
->
eo
;

474 
waô
 = 0;

477 
this_evíts
 = 
	`rbd_ôî_evíts
(
td
, &
evíts
, 
mö
, 
waô
);

479 i‡(
evíts
 >
mö
)

481 i‡(
this_evíts
)

484 i‡(!
o
->
busy_pﬁl
)

485 
waô
 = 1;

487 
n›
;

490  
evíts
;

491 
	}
}

493 
fio_q_°©us
 
	$fio_rbd_queue
(
thªad_d©a
 *
td
,

494 
io_u
 *io_u)

496 
rbd_d©a
 *
rbd
 = 
td
->
io_›s_d©a
;

497 
fio_rbd_iou
 *
‰i
 = 
io_u
->
ígöe_d©a
;

498 
r
 = -1;

500 
	`fio_ro_check
(
td
, 
io_u
);

502 
‰i
->
io_£í
 = 0;

503 
‰i
->
io_com∂ëe
 = 0;

505 
r
 = 
	`rbd_aio_¸óã_com∂ëi⁄
(
‰i
, 
_fio_rbd_föish_aiocb
,

506 &
‰i
->
com∂ëi⁄
);

507 i‡(
r
 < 0) {

508 
	`log_îr
("rbd_aio_create_completion failed.\n");

509 
Áûed
;

512 i‡(
io_u
->
ddú
 =
DDIR_WRITE
) {

513 
r
 = 
	`rbd_aio_wrôe
(
rbd
->
image
, 
io_u
->
off£t
, io_u->
x„r_buÊí
,

514 
io_u
->
x„r_buf
, 
‰i
->
com∂ëi⁄
);

515 i‡(
r
 < 0) {

516 
	`log_îr
("rbd_aio_write failed.\n");

517 
Áûed_comp
;

520 } i‡(
io_u
->
ddú
 =
DDIR_READ
) {

521 
r
 = 
	`rbd_aio_ªad
(
rbd
->
image
, 
io_u
->
off£t
, io_u->
x„r_buÊí
,

522 
io_u
->
x„r_buf
, 
‰i
->
com∂ëi⁄
);

524 i‡(
r
 < 0) {

525 
	`log_îr
("rbd_aio_read failed.\n");

526 
Áûed_comp
;

528 } i‡(
io_u
->
ddú
 =
DDIR_TRIM
) {

529 
r
 = 
	`rbd_aio_disˇrd
(
rbd
->
image
, 
io_u
->
off£t
,

530 
io_u
->
x„r_buÊí
, 
‰i
->
com∂ëi⁄
);

531 i‡(
r
 < 0) {

532 
	`log_îr
("rbd_aio_discard failed.\n");

533 
Áûed_comp
;

535 } i‡(
io_u
->
ddú
 =
DDIR_SYNC
) {

536 
r
 = 
	`rbd_aio_Êush
(
rbd
->
image
, 
‰i
->
com∂ëi⁄
);

537 i‡(
r
 < 0) {

538 
	`log_îr
("rbd_flush failed.\n");

539 
Áûed_comp
;

542 
	`d¥öt
(
FD_IO
, "%s: W¨nög: unh™dÀd ddú: %d\n", 
__func__
,

543 
io_u
->
ddú
);

544 
r
 = -
EINVAL
;

545 
Áûed_comp
;

548  
FIO_Q_QUEUED
;

549 
Áûed_comp
:

550 
	`rbd_aio_ªÀa£
(
‰i
->
com∂ëi⁄
);

551 
Áûed
:

552 
io_u
->
îr‹
 = -
r
;

553 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "xfer");

554  
FIO_Q_COMPLETED
;

555 
	}
}

557 
	$fio_rbd_öô
(
thªad_d©a
 *
td
)

559 
r
;

560 
rbd_d©a
 *
rbd
 = 
td
->
io_›s_d©a
;

562 i‡(
rbd
->
c⁄√˘ed
)

565 
r
 = 
	`_fio_rbd_c⁄√˘
(
td
);

566 i‡(
r
) {

567 
	`log_îr
("fio_rbd_c⁄√˘ faûed,Ñëu∫ code: %d .\n", 
r
);

568 
Áûed
;

573 
Áûed
:

575 
	}
}

577 
	$fio_rbd_˛ónup
(
thªad_d©a
 *
td
)

579 
rbd_d©a
 *
rbd
 = 
td
->
io_›s_d©a
;

581 i‡(
rbd
) {

582 
	`_fio_rbd_disc⁄√˘
(
rbd
);

583 
	`‰ì
(
rbd
->
aio_evíts
);

584 
	`‰ì
(
rbd
->
s‹t_evíts
);

585 
	`‰ì
(
rbd
);

587 
	}
}

589 
	$fio_rbd_£tup
(
thªad_d©a
 *
td
)

591 
rbd_image_öfo_t
 
öfo
;

592 
fio_fûe
 *
f
;

593 
rbd_d©a
 *
rbd
 = 
NULL
;

594 
r
;

597 
r
 = 
	`_fio_£tup_rbd_d©a
(
td
, &
rbd
);

598 i‡(
r
) {

599 
	`log_îr
("fio_setup_rbd_data failed.\n");

600 
˛ónup
;

602 
td
->
io_›s_d©a
 = 
rbd
;

608 
td
->
o
.
u£_thªad
 = 1;

614 
r
 = 
	`_fio_rbd_c⁄√˘
(
td
);

615 i‡(
r
) {

616 
	`log_îr
("fio_rbd_connect failed.\n");

617 
˛ónup
;

619 
rbd
->
c⁄√˘ed
 = 
åue
;

622 
r
 = 
	`rbd_°©
(
rbd
->
image
, &
öfo
, (info));

623 i‡(
r
 < 0) {

624 
	`log_îr
("rbd_status failed.\n");

625 
˛ónup
;

626 } i‡(
öfo
.
size
 == 0) {

627 
	`log_îr
("image size should beÜargerÅhan zero.\n");

628 
r
 = -
EINVAL
;

629 
˛ónup
;

632 
	`d¥öt
(
FD_IO
, "rbd-ígöe: imagêsize: %" 
PRIu64
 "\n", 
öfo
.
size
);

638 i‡(!
td
->
fûes_ödex
) {

639 
	`add_fûe
(
td
,Åd->
o
.
fûíame
 ? : "rbd", 0, 0);

640 
td
->
o
.
ƒ_fûes
 =Åd->o.nr_files ? : 1;

641 
td
->
o
.
›í_fûes
++;

643 
f
 = 
td
->
fûes
[0];

644 
f
->
ªÆ_fûe_size
 = 
öfo
.
size
;

648 
˛ónup
:

649 
	`fio_rbd_˛ónup
(
td
);

650  
r
;

651 
	}
}

653 
	$fio_rbd_›í
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

656 
	}
}

658 
	$fio_rbd_övÆid©e
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

660 #i‡
	`deföed
(
CONFIG_RBD_INVAL
)

661 
rbd_d©a
 *
rbd
 = 
td
->
io_›s_d©a
;

663  
	`rbd_övÆid©e_ˇche
(
rbd
->
image
);

667 
	}
}

669 
	$fio_rbd_io_u_‰ì
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

671 
fio_rbd_iou
 *
‰i
 = 
io_u
->
ígöe_d©a
;

673 i‡(
‰i
) {

674 
io_u
->
ígöe_d©a
 = 
NULL
;

675 
	`‰ì
(
‰i
);

677 
	}
}

679 
	$fio_rbd_io_u_öô
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

681 
fio_rbd_iou
 *
‰i
;

683 
‰i
 = 
	`ˇŒoc
(1, (*fri));

684 
‰i
->
io_u
 = io_u;

685 
io_u
->
ígöe_d©a
 = 
‰i
;

687 
	}
}

689 
FIO_STATIC
 
i€ngöe_›s
 
	gi€ngöe
 = {

690 .
«me
 = "rbd",

691 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

692 .
	g£tup
 = 
fio_rbd_£tup
,

693 .
	göô
 = 
fio_rbd_öô
,

694 .
	gqueue
 = 
fio_rbd_queue
,

695 .
	ggëevíts
 = 
fio_rbd_gëevíts
,

696 .
	gevít
 = 
fio_rbd_evít
,

697 .
	g˛ónup
 = 
fio_rbd_˛ónup
,

698 .
	g›í_fûe
 = 
fio_rbd_›í
,

699 .
	gövÆid©e
 = 
fio_rbd_övÆid©e
,

700 .
	g›ti⁄s
 = 
›ti⁄s
,

701 .
	gio_u_öô
 = 
fio_rbd_io_u_öô
,

702 .
	gio_u_‰ì
 = 
fio_rbd_io_u_‰ì
,

703 .
	g›ti⁄_°ru˘_size
 = (
rbd_›ti⁄s
),

706 
fio_öô
 
	$fio_rbd_ªgi°î
()

708 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

709 
	}
}

711 
fio_exô
 
	$fio_rbd_uƒegi°î
()

713 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

714 
	}
}

	@engines/rdma.c

25 
	~<°dio.h
>

26 
	~<°dlib.h
>

27 
	~<uni°d.h
>

28 
	~<î∫o.h
>

29 
	~<as£π.h
>

30 
	~<√töë/ö.h
>

31 
	~<¨∑/öë.h
>

32 
	~<√tdb.h
>

33 
	~<pﬁl.h
>

34 
	~<sys/ty≥s.h
>

35 
	~<sys/sockë.h
>

36 
	~<sys/time.h
>

37 
	~<sys/ªsour˚.h
>

39 
	~<±hªad.h
>

40 
	~<öây≥s.h
>

42 
	~"../fio.h
"

43 
	~"../hash.h
"

44 
	~"../›tgroup.h
"

46 
	~<rdma/rdma_cma.h
>

48 
	#FIO_RDMA_MAX_IO_DEPTH
 512

	)

50 
	erdma_io_mode
 {

51 
	mFIO_RDMA_UNKNOWN
 = 0,

52 
	mFIO_RDMA_MEM_WRITE
,

53 
	mFIO_RDMA_MEM_READ
,

54 
	mFIO_RDMA_CHA_SEND
,

55 
	mFIO_RDMA_CHA_RECV


58 
	srdmaio_›ti⁄s
 {

59 
thªad_d©a
 *
	mtd
;

60 
	mp‹t
;

61 
rdma_io_mode
 
	mvîb
;

62 *
	mböd«me
;

65 
	$°r_ho°«me_cb
(*
d©a
, c⁄° *
öput
)

67 
rdmaio_›ti⁄s
 *
o
 = 
d©a
;

69 i‡(
o
->
td
->o.
fûíame
)

70 
	`‰ì
(
o
->
td
->o.
fûíame
);

71 
o
->
td
->o.
fûíame
 = 
	`°rdup
(
öput
);

73 
	}
}

75 
fio_›ti⁄
 
	g›ti⁄s
[] = {

77 .
«me
 = "hostname",

78 .
	g ame
 = "rdmaÉngine hostname",

79 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

80 .
	gcb
 = 
°r_ho°«me_cb
,

81 .
	ghñp
 = "Hostname for RDMA IOÉngine",

82 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

83 .
	ggroup
 = 
FIO_OPT_G_RDMA
,

86 .
	g«me
 = "bindname",

87 .
	g ame
 = "rdmaÉngine bindname",

88 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

89 .
	goff1
 = 
off£tof
(
rdmaio_›ti⁄s
, 
böd«me
),

90 .
	ghñp
 = "Bind for RDMA IOÉngine",

91 .
	gdef
 = "",

92 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

93 .
	ggroup
 = 
FIO_OPT_G_RDMA
,

96 .
	g«me
 = "port",

97 .
	g ame
 = "rdmaÉngineÖort",

98 .
	gty≥
 = 
FIO_OPT_INT
,

99 .
	goff1
 = 
off£tof
(
rdmaio_›ti⁄s
, 
p‹t
),

100 .
	gmövÆ
 = 1,

101 .
	gmaxvÆ
 = 65535,

102 .
	ghñp
 = "PortÅo use for RDMA connections",

103 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

104 .
	ggroup
 = 
FIO_OPT_G_RDMA
,

107 .
	g«me
 = "verb",

108 .
	g ame
 = "RDMAÉngine verb",

109 .
	gÆüs
 = "proto",

110 .
	gty≥
 = 
FIO_OPT_STR
,

111 .
	goff1
 = 
off£tof
(
rdmaio_›ti⁄s
, 
vîb
),

112 .
	ghñp
 = "RDMAÉngine verb",

113 .
	gdef
 = "write",

114 .
	gposvÆ
 = {

115 { .
ivÆ
 = "write",

116 .
	govÆ
 = 
FIO_RDMA_MEM_WRITE
,

117 .
	ghñp
 = "Memory Write",

119 { .
	givÆ
 = "read",

120 .
	govÆ
 = 
FIO_RDMA_MEM_READ
,

121 .
	ghñp
 = "Memory Read",

123 { .
	givÆ
 = "send",

124 .
	govÆ
 = 
FIO_RDMA_CHA_SEND
,

125 .
	ghñp
 = "Posted Send",

127 { .
	givÆ
 = "recv",

128 .
	govÆ
 = 
FIO_RDMA_CHA_RECV
,

129 .
	ghñp
 = "Posted Receive",

132 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

133 .
	ggroup
 = 
FIO_OPT_G_RDMA
,

136 .
	g«me
 = 
NULL
,

140 
	sªmŸe_u
 {

141 
uöt64_t
 
	mbuf
;

142 
uöt32_t
 
	mrkey
;

143 
uöt32_t
 
	msize
;

146 
	srdma_öfo_blk
 {

147 
uöt32_t
 
	mmode
;

148 
uöt32_t
 
	mƒ
;

151 
uöt32_t
 
	mmax_bs
;

152 
ªmŸe_u
 
	mrmt_us
[
FIO_RDMA_MAX_IO_DEPTH
];

155 
	srdma_io_u_d©a
 {

156 
uöt64_t
 
	mwr_id
;

157 
ibv_£nd_wr
 
	msq_wr
;

158 
ibv_ªcv_wr
 
	mrq_wr
;

159 
ibv_sge
 
	mrdma_sgl
;

162 
	srdmaio_d©a
 {

163 
	mis_˛õ¡
;

164 
rdma_io_mode
 
	mrdma_¥Ÿocﬁ
;

165 
	mho°
[64];

166 
sockaddr_ö
 
	maddr
;

168 
ibv_ªcv_wr
 
	mrq_wr
;

169 
ibv_sge
 
	mªcv_sgl
;

170 
rdma_öfo_blk
 
	mªcv_buf
;

171 
ibv_mr
 *
	mªcv_mr
;

173 
ibv_£nd_wr
 
	msq_wr
;

174 
ibv_sge
 
	m£nd_sgl
;

175 
rdma_öfo_blk
 
	m£nd_buf
;

176 
ibv_mr
 *
	m£nd_mr
;

178 
ibv_comp_ch™√l
 *
	mch™√l
;

179 
ibv_cq
 *
	mcq
;

180 
ibv_pd
 *
	mpd
;

181 
ibv_qp
 *
	mqp
;

183 
±hªad_t
 
	mcmthªad
;

184 
rdma_evít_ch™√l
 *
	mcm_ch™√l
;

185 
rdma_cm_id
 *
	mcm_id
;

186 
rdma_cm_id
 *
	mchûd_cm_id
;

188 
	mcq_evít_num
;

190 
ªmŸe_u
 *
	mrmt_us
;

191 
	mrmt_ƒ
;

192 
io_u
 **
	mio_us_queued
;

193 
	mio_u_queued_ƒ
;

194 
io_u
 **
	mio_us_Êight
;

195 
	mio_u_Êight_ƒ
;

196 
io_u
 **
	mio_us_com∂ëed
;

197 
	mio_u_com∂ëed_ƒ
;

199 
‰™d_°©e
 
	mønd_°©e
;

202 
	$˛õ¡_ªcv
(
thªad_d©a
 *
td
, 
ibv_wc
 *
wc
)

204 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s_d©a
;

205 
max_bs
;

207 i‡(
wc
->
byã_Àn
 !(
rd
->
ªcv_buf
)) {

208 
	`log_îr
("Re˚ived bogu†d©a, sizê%d\n", 
wc
->
byã_Àn
);

212 
max_bs
 = 
	`max
(
td
->
o
.max_bs[
DDIR_READ
],Åd->o.max_bs[
DDIR_WRITE
]);

213 i‡(
max_bs
 > 
	`¡ohl
(
rd
->
ªcv_buf
.max_bs)) {

214 
	`log_îr
("fio: Server's block size (%d) must be greaterÅhan or "

216 
	`¡ohl
(
rd
->
ªcv_buf
.
max_bs
), max_bs);

221 i‡((
rd
->
rdma_¥Ÿocﬁ
 =
FIO_RDMA_MEM_WRITE
) ||

222 (
rd
->
rdma_¥Ÿocﬁ
 =
FIO_RDMA_MEM_READ
)) {

224 
i
 = 0;

226 
rd
->
rmt_ƒ
 = 
	`¡ohl
‘d->
ªcv_buf
.
ƒ
);

228 
i
 = 0; i < 
rd
->
rmt_ƒ
; i++) {

229 
rd
->
rmt_us
[
i
].
buf
 = 
	`__be64_to_˝u
(

230 
rd
->
ªcv_buf
.
rmt_us
[
i
].
buf
);

231 
rd
->
rmt_us
[
i
].
rkey
 = 
	`¡ohl
‘d->
ªcv_buf
.rmt_us[i].rkey);

232 
rd
->
rmt_us
[
i
].
size
 = 
	`¡ohl
‘d->
ªcv_buf
.rmt_us[i].size);

234 
	`d¥öt
(
FD_IO
,

235 "fio: Re˚ivedÑkey %xádd∏%" 
PRIx64


236 "Üí %d fromÖìr\n", 
rd
->
rmt_us
[
i
].
rkey
,

237 
rd
->
rmt_us
[
i
].
buf
,Ñd->rmt_us[i].
size
);

242 
	}
}

244 
	$£rvî_ªcv
(
thªad_d©a
 *
td
, 
ibv_wc
 *
wc
)

246 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s_d©a
;

247 
max_bs
;

249 i‡(
wc
->
wr_id
 =
FIO_RDMA_MAX_IO_DEPTH
) {

250 
rd
->
rdma_¥Ÿocﬁ
 = 
	`¡ohl
‘d->
ªcv_buf
.
mode
);

253 i‡(
rd
->
rdma_¥Ÿocﬁ
 =
FIO_RDMA_CHA_SEND
)

254 
rd
->
rdma_¥Ÿocﬁ
 = 
FIO_RDMA_CHA_RECV
;

256 
max_bs
 = 
	`max
(
td
->
o
.max_bs[
DDIR_READ
],Åd->o.max_bs[
DDIR_WRITE
]);

257 i‡(
max_bs
 < 
	`¡ohl
(
rd
->
ªcv_buf
.max_bs)) {

258 
	`log_îr
("fio: Server's block size (%d) must be greaterÅhan or "

260 
	`¡ohl
(
rd
->
ªcv_buf
.
max_bs
), max_bs);

267 
	}
}

269 
	$cq_evít_h™dÀr
(
thªad_d©a
 *
td
, 
ibv_wc_›code
 
›code
)

271 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s_d©a
;

272 
ibv_wc
 
wc
;

273 
rdma_io_u_d©a
 *
r_io_u_d
;

274 
ªt
;

275 
com≥vnum
 = 0;

276 
i
;

278 (
ªt
 = 
	`ibv_pﬁl_cq
(
rd
->
cq
, 1, &
wc
)) == 1) {

279 
ªt
 = 0;

280 
com≥vnum
++;

282 i‡(
wc
.
°©us
) {

283 
	`log_îr
("fio: cq completion status %d(%s)\n",

284 
wc
.
°©us
, 
	`ibv_wc_°©us_°r
(wc.status));

288 
wc
.
›code
) {

290 
IBV_WC_RECV
:

291 i‡(
rd
->
is_˛õ¡
 == 1)

292 
ªt
 = 
	`˛õ¡_ªcv
(
td
, &
wc
);

294 
ªt
 = 
	`£rvî_ªcv
(
td
, &
wc
);

296 i‡(
ªt
)

299 i‡(
wc
.
wr_id
 =
FIO_RDMA_MAX_IO_DEPTH
)

302 
i
 = 0; i < 
rd
->
io_u_Êight_ƒ
; i++) {

303 
r_io_u_d
 = 
rd
->
io_us_Êight
[
i
]->
ígöe_d©a
;

305 i‡(
wc
.
wr_id
 =
r_io_u_d
->
rq_wr
.wr_id) {

306 
rd
->
io_us_Êight
[
i
]->
ªsid
 =

307 
rd
->
io_us_Êight
[
i
]->
buÊí


308 - 
wc
.
byã_Àn
;

310 
rd
->
io_us_Êight
[
i
]->
îr‹
 = 0;

312 
rd
->
io_us_com∂ëed
[rd->

313 
io_u_com∂ëed_ƒ
]

314 
rd
->
io_us_Êight
[
i
];

315 
rd
->
io_u_com∂ëed_ƒ
++;

319 i‡(
i
 =
rd
->
io_u_Êight_ƒ
)

320 
	`log_îr
("fio:Ñecv w∏%" 
PRId64
 "Çot found\n",

321 
wc
.
wr_id
);

324 
rd
->
io_us_Êight
[
i
] =

325 
rd
->
io_us_Êight
[rd->
io_u_Êight_ƒ
 - 1];

326 
rd
->
io_u_Êight_ƒ
--;

331 
IBV_WC_SEND
:

332 
IBV_WC_RDMA_WRITE
:

333 
IBV_WC_RDMA_READ
:

334 i‡(
wc
.
wr_id
 =
FIO_RDMA_MAX_IO_DEPTH
)

337 
i
 = 0; i < 
rd
->
io_u_Êight_ƒ
; i++) {

338 
r_io_u_d
 = 
rd
->
io_us_Êight
[
i
]->
ígöe_d©a
;

340 i‡(
wc
.
wr_id
 =
r_io_u_d
->
sq_wr
.wr_id) {

341 
rd
->
io_us_com∂ëed
[rd->

342 
io_u_com∂ëed_ƒ
]

343 
rd
->
io_us_Êight
[
i
];

344 
rd
->
io_u_com∂ëed_ƒ
++;

348 i‡(
i
 =
rd
->
io_u_Êight_ƒ
)

349 
	`log_îr
("fio: síd w∏%" 
PRId64
 "Çot found\n",

350 
wc
.
wr_id
);

353 
rd
->
io_us_Êight
[
i
] =

354 
rd
->
io_us_Êight
[rd->
io_u_Êight_ƒ
 - 1];

355 
rd
->
io_u_Êight_ƒ
--;

361 
	`log_öfo
("fio: unknown completionÉvent %d\n",

362 
wc
.
›code
);

365 
rd
->
cq_evít_num
++;

368 i‡(
ªt
) {

369 
	`log_îr
("fio:Öﬁ»îr‹ %d\n", 
ªt
);

373  
com≥vnum
;

374 
	}
}

380 
	$rdma_pﬁl_waô
(
thªad_d©a
 *
td
, 
ibv_wc_›code
 
›code
)

382 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s_d©a
;

383 
ibv_cq
 *
ev_cq
;

384 *
ev_˘x
;

385 
ªt
;

387 i‡(
rd
->
cq_evít_num
 > 0) {

388 
rd
->
cq_evít_num
--;

392 
agaö
:

393 i‡(
	`ibv_gë_cq_evít
(
rd
->
ch™√l
, &
ev_cq
, &
ev_˘x
) != 0) {

394 
	`log_îr
("fio: FailedÅo get cqÉvent!\n");

397 i‡(
ev_cq
 !
rd
->
cq
) {

398 
	`log_îr
("fio: Unknown CQ!\n");

401 i‡(
	`ibv_ªq_nŸify_cq
(
rd
->
cq
, 0) != 0) {

402 
	`log_îr
("fio: FailedÅo setÇotify!\n");

406 
ªt
 = 
	`cq_evít_h™dÀr
(
td
, 
›code
);

407 i‡(
ªt
 == 0)

408 
agaö
;

410 
	`ibv_ack_cq_evíts
(
rd
->
cq
, 
ªt
);

412 
rd
->
cq_evít_num
--;

414  
ªt
;

415 
	}
}

417 
	$fio_rdmaio_£tup_qp
(
thªad_d©a
 *
td
)

419 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s_d©a
;

420 
ibv_qp_öô_©å
 
öô_©å
;

421 
qp_dïth
 = 
td
->
o
.
iodïth
 * 2;

423 i‡(
rd
->
is_˛õ¡
 == 0)

424 
rd
->
pd
 = 
	`ibv_Æloc_pd
‘d->
chûd_cm_id
->
vîbs
);

426 
rd
->
pd
 = 
	`ibv_Æloc_pd
‘d->
cm_id
->
vîbs
);

428 i‡(
rd
->
pd
 =
NULL
) {

429 
	`log_îr
("fio: ibv_alloc_pd fail: %m\n");

433 i‡(
rd
->
is_˛õ¡
 == 0)

434 
rd
->
ch™√l
 = 
	`ibv_¸óã_comp_ch™√l
‘d->
chûd_cm_id
->
vîbs
);

436 
rd
->
ch™√l
 = 
	`ibv_¸óã_comp_ch™√l
‘d->
cm_id
->
vîbs
);

437 i‡(
rd
->
ch™√l
 =
NULL
) {

438 
	`log_îr
("fio: ibv_create_comp_channel fail: %m\n");

439 
îr1
;

442 i‡(
qp_dïth
 < 16)

443 
qp_dïth
 = 16;

445 i‡(
rd
->
is_˛õ¡
 == 0)

446 
rd
->
cq
 = 
	`ibv_¸óã_cq
‘d->
chûd_cm_id
->
vîbs
,

447 
qp_dïth
, 
rd
,Ñd->
ch™√l
, 0);

449 
rd
->
cq
 = 
	`ibv_¸óã_cq
‘d->
cm_id
->
vîbs
,

450 
qp_dïth
, 
rd
,Ñd->
ch™√l
, 0);

451 i‡(
rd
->
cq
 =
NULL
) {

452 
	`log_îr
("fio: ibv_create_cq failed: %m\n");

453 
îr2
;

456 i‡(
	`ibv_ªq_nŸify_cq
(
rd
->
cq
, 0) != 0) {

457 
	`log_îr
("fio: ibv_req_notify_cq failed: %m\n");

458 
îr3
;

462 
	`mem£t
(&
öô_©å
, 0, (init_attr));

463 
öô_©å
.
ˇp
.
max_£nd_wr
 = 
qp_dïth
;

464 
öô_©å
.
ˇp
.
max_ªcv_wr
 = 
qp_dïth
;

465 
öô_©å
.
ˇp
.
max_ªcv_sge
 = 1;

466 
öô_©å
.
ˇp
.
max_£nd_sge
 = 1;

467 
öô_©å
.
qp_ty≥
 = 
IBV_QPT_RC
;

468 
öô_©å
.
£nd_cq
 = 
rd
->
cq
;

469 
öô_©å
.
ªcv_cq
 = 
rd
->
cq
;

471 i‡(
rd
->
is_˛õ¡
 == 0) {

472 i‡(
	`rdma_¸óã_qp
(
rd
->
chûd_cm_id
,Ñd->
pd
, &
öô_©å
) != 0) {

473 
	`log_îr
("fio:Ñdma_create_qp failed: %m\n");

474 
îr3
;

476 
rd
->
qp
 =Ñd->
chûd_cm_id
->qp;

478 i‡(
	`rdma_¸óã_qp
(
rd
->
cm_id
,Ñd->
pd
, &
öô_©å
) != 0) {

479 
	`log_îr
("fio:Ñdma_create_qp failed: %m\n");

480 
îr3
;

482 
rd
->
qp
 =Ñd->
cm_id
->qp;

487 
îr3
:

488 
	`ibv_de°roy_cq
(
rd
->
cq
);

489 
îr2
:

490 
	`ibv_de°roy_comp_ch™√l
(
rd
->
ch™√l
);

491 
îr1
:

492 
	`ibv_dóŒoc_pd
(
rd
->
pd
);

495 
	}
}

497 
	$fio_rdmaio_£tup_c⁄åﬁ_msg_buf„rs
(
thªad_d©a
 *
td
)

499 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s_d©a
;

501 
rd
->
ªcv_mr
 = 
	`ibv_ªg_mr
‘d->
pd
, &rd->
ªcv_buf
, (rd->recv_buf),

502 
IBV_ACCESS_LOCAL_WRITE
);

503 i‡(
rd
->
ªcv_mr
 =
NULL
) {

504 
	`log_îr
("fio:Ñecv_bufÑeg_mr failed: %m\n");

508 
rd
->
£nd_mr
 = 
	`ibv_ªg_mr
‘d->
pd
, &rd->
£nd_buf
, (rd->send_buf),

510 i‡(
rd
->
£nd_mr
 =
NULL
) {

511 
	`log_îr
("fio: send_bufÑeg_mr failed: %m\n");

512 
	`ibv_dîeg_mr
(
rd
->
ªcv_mr
);

518 
rd
->
ªcv_sgl
.
addr
 = (
uöt64_t
Ë()&rd->
ªcv_buf
;

519 
rd
->
ªcv_sgl
.
Àngth
 = ‘d->
ªcv_buf
);

520 
rd
->
ªcv_sgl
.
lkey
 =Ñd->
ªcv_mr
->lkey;

521 
rd
->
rq_wr
.
sg_li°
 = &rd->
ªcv_sgl
;

522 
rd
->
rq_wr
.
num_sge
 = 1;

523 
rd
->
rq_wr
.
wr_id
 = 
FIO_RDMA_MAX_IO_DEPTH
;

526 
rd
->
£nd_sgl
.
addr
 = (
uöt64_t
Ë()&rd->
£nd_buf
;

527 
rd
->
£nd_sgl
.
Àngth
 = ‘d->
£nd_buf
);

528 
rd
->
£nd_sgl
.
lkey
 =Ñd->
£nd_mr
->lkey;

530 
rd
->
sq_wr
.
›code
 = 
IBV_WR_SEND
;

531 
rd
->
sq_wr
.
£nd_Êags
 = 
IBV_SEND_SIGNALED
;

532 
rd
->
sq_wr
.
sg_li°
 = &rd->
£nd_sgl
;

533 
rd
->
sq_wr
.
num_sge
 = 1;

534 
rd
->
sq_wr
.
wr_id
 = 
FIO_RDMA_MAX_IO_DEPTH
;

537 
	}
}

539 
	$gë_√xt_ch™√l_evít
(
thªad_d©a
 *
td
,

540 
rdma_evít_ch™√l
 *
ch™√l
,

541 
rdma_cm_evít_ty≥
 
waô_evít
)

543 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s_d©a
;

544 
rdma_cm_evít
 *
evít
;

545 
ªt
;

547 
ªt
 = 
	`rdma_gë_cm_evít
(
ch™√l
, &
evít
);

548 i‡(
ªt
) {

549 
	`log_îr
("fio:Ñdma_gë_cm_evít: %d\n", 
ªt
);

553 i‡(
evít
->evíà!
waô_evít
) {

554 
	`log_îr
("fio:Évent is %s instead of %s\n",

555 
	`rdma_evít_°r
(
evít
->event),

556 
	`rdma_evít_°r
(
waô_evít
));

560 
evít
->event) {

561 
RDMA_CM_EVENT_CONNECT_REQUEST
:

562 
rd
->
chûd_cm_id
 = 
evít
->
id
;

568 
	`rdma_ack_cm_evít
(
evít
);

571 
	}
}

573 
	$fio_rdmaio_¥ï
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

575 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s_d©a
;

576 
rdma_io_u_d©a
 *
r_io_u_d
;

578 
r_io_u_d
 = 
io_u
->
ígöe_d©a
;

580 
rd
->
rdma_¥Ÿocﬁ
) {

581 
FIO_RDMA_MEM_WRITE
:

582 
FIO_RDMA_MEM_READ
:

583 
r_io_u_d
->
rdma_sgl
.
addr
 = (
uöt64_t
Ë()
io_u
->
buf
;

584 
r_io_u_d
->
rdma_sgl
.
lkey
 = 
io_u
->
mr
->lkey;

585 
r_io_u_d
->
sq_wr
.
wr_id
 =Ñ_io_u_d->wr_id;

586 
r_io_u_d
->
sq_wr
.
£nd_Êags
 = 
IBV_SEND_SIGNALED
;

587 
r_io_u_d
->
sq_wr
.
sg_li°
 = &r_io_u_d->
rdma_sgl
;

588 
r_io_u_d
->
sq_wr
.
num_sge
 = 1;

590 
FIO_RDMA_CHA_SEND
:

591 
r_io_u_d
->
rdma_sgl
.
addr
 = (
uöt64_t
Ë()
io_u
->
buf
;

592 
r_io_u_d
->
rdma_sgl
.
lkey
 = 
io_u
->
mr
->lkey;

593 
r_io_u_d
->
rdma_sgl
.
Àngth
 = 
io_u
->
buÊí
;

594 
r_io_u_d
->
sq_wr
.
wr_id
 =Ñ_io_u_d->wr_id;

595 
r_io_u_d
->
sq_wr
.
›code
 = 
IBV_WR_SEND
;

596 
r_io_u_d
->
sq_wr
.
£nd_Êags
 = 
IBV_SEND_SIGNALED
;

597 
r_io_u_d
->
sq_wr
.
sg_li°
 = &r_io_u_d->
rdma_sgl
;

598 
r_io_u_d
->
sq_wr
.
num_sge
 = 1;

600 
FIO_RDMA_CHA_RECV
:

601 
r_io_u_d
->
rdma_sgl
.
addr
 = (
uöt64_t
Ë()
io_u
->
buf
;

602 
r_io_u_d
->
rdma_sgl
.
lkey
 = 
io_u
->
mr
->lkey;

603 
r_io_u_d
->
rdma_sgl
.
Àngth
 = 
io_u
->
buÊí
;

604 
r_io_u_d
->
rq_wr
.
wr_id
 =Ñ_io_u_d->wr_id;

605 
r_io_u_d
->
rq_wr
.
sg_li°
 = &r_io_u_d->
rdma_sgl
;

606 
r_io_u_d
->
rq_wr
.
num_sge
 = 1;

609 
	`log_îr
("fio: unknow¿rdm®¥Ÿocﬁ - %d\n", 
rd
->
rdma_¥Ÿocﬁ
);

614 
	}
}

616 
io_u
 *
	$fio_rdmaio_evít
(
thªad_d©a
 *
td
, 
evít
)

618 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s_d©a
;

619 
io_u
 *io_u;

620 
i
;

622 
io_u
 = 
rd
->
io_us_com∂ëed
[0];

623 
i
 = 0; i < 
rd
->
io_u_com∂ëed_ƒ
 - 1; i++)

624 
rd
->
io_us_com∂ëed
[
i
] =Ñd->io_us_completed[i + 1];

626 
rd
->
io_u_com∂ëed_ƒ
--;

628 
	`d¥öt_io_u
(
io_u
, "fio_rdmaio_event");

630  
io_u
;

631 
	}
}

633 
	$fio_rdmaio_gëevíts
(
thªad_d©a
 *
td
, 
mö
,

634 
max
, c⁄° 
time•ec
 *
t
)

636 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s_d©a
;

637 
ibv_wc_›code
 
comp_›code
;

638 
ibv_cq
 *
ev_cq
;

639 *
ev_˘x
;

640 
ªt
, 
r
 = 0;

641 
comp_›code
 = 
IBV_WC_RDMA_WRITE
;

643 
rd
->
rdma_¥Ÿocﬁ
) {

644 
FIO_RDMA_MEM_WRITE
:

645 
comp_›code
 = 
IBV_WC_RDMA_WRITE
;

647 
FIO_RDMA_MEM_READ
:

648 
comp_›code
 = 
IBV_WC_RDMA_READ
;

650 
FIO_RDMA_CHA_SEND
:

651 
comp_›code
 = 
IBV_WC_SEND
;

653 
FIO_RDMA_CHA_RECV
:

654 
comp_›code
 = 
IBV_WC_RECV
;

657 
	`log_îr
("fio: unknow¿rdm®¥Ÿocﬁ - %d\n", 
rd
->
rdma_¥Ÿocﬁ
);

661 i‡(
rd
->
cq_evít_num
 > 0) {

662 
rd
->
cq_evít_num
--;

666 
agaö
:

667 i‡(
	`ibv_gë_cq_evít
(
rd
->
ch™√l
, &
ev_cq
, &
ev_˘x
) != 0) {

668 
	`log_îr
("fio: FailedÅo get cqÉvent!\n");

671 i‡(
ev_cq
 !
rd
->
cq
) {

672 
	`log_îr
("fio: Unknown CQ!\n");

675 i‡(
	`ibv_ªq_nŸify_cq
(
rd
->
cq
, 0) != 0) {

676 
	`log_îr
("fio: FailedÅo setÇotify!\n");

680 
ªt
 = 
	`cq_evít_h™dÀr
(
td
, 
comp_›code
);

681 i‡(
ªt
 < 1)

682 
agaö
;

684 
	`ibv_ack_cq_evíts
(
rd
->
cq
, 
ªt
);

686 
r
 +
ªt
;

687 i‡(
r
 < 
mö
)

688 
agaö
;

690 
rd
->
cq_evít_num
 -
r
;

692  
r
;

693 
	}
}

695 
	$fio_rdmaio_£nd
(
thªad_d©a
 *
td
, 
io_u
 **
io_us
,

696 
ƒ
)

698 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s_d©a
;

699 
ibv_£nd_wr
 *
bad_wr
;

701 
ibv_wc_›code
 
comp_›code
;

702 
comp_›code
 = 
IBV_WC_RDMA_WRITE
;

704 
i
;

705 
ödex
;

706 
rdma_io_u_d©a
 *
r_io_u_d
;

708 
r_io_u_d
 = 
NULL
;

710 
i
 = 0; i < 
ƒ
; i++) {

712 
rd
->
rdma_¥Ÿocﬁ
) {

713 
FIO_RDMA_MEM_WRITE
:

715 
r_io_u_d
 = 
io_us
[
i
]->
ígöe_d©a
;

716 
ödex
 = 
	`__ønd
(&
rd
->
ønd_°©e
Ë%Ñd->
rmt_ƒ
;

717 
r_io_u_d
->
sq_wr
.
›code
 = 
IBV_WR_RDMA_WRITE
;

718 
r_io_u_d
->
sq_wr
.
wr
.
rdma
.
rkey
 = 
rd
->
rmt_us
[
ödex
].rkey;

719 
r_io_u_d
->
sq_wr
.
wr
.
rdma
.
ªmŸe_addr
 = \

720 
rd
->
rmt_us
[
ödex
].
buf
;

721 
r_io_u_d
->
sq_wr
.
sg_li°
->
Àngth
 = 
io_us
[
i
]->
buÊí
;

723 
FIO_RDMA_MEM_READ
:

725 
r_io_u_d
 = 
io_us
[
i
]->
ígöe_d©a
;

726 
ödex
 = 
	`__ønd
(&
rd
->
ønd_°©e
Ë%Ñd->
rmt_ƒ
;

727 
r_io_u_d
->
sq_wr
.
›code
 = 
IBV_WR_RDMA_READ
;

728 
r_io_u_d
->
sq_wr
.
wr
.
rdma
.
rkey
 = 
rd
->
rmt_us
[
ödex
].rkey;

729 
r_io_u_d
->
sq_wr
.
wr
.
rdma
.
ªmŸe_addr
 = \

730 
rd
->
rmt_us
[
ödex
].
buf
;

731 
r_io_u_d
->
sq_wr
.
sg_li°
->
Àngth
 = 
io_us
[
i
]->
buÊí
;

733 
FIO_RDMA_CHA_SEND
:

734 
r_io_u_d
 = 
io_us
[
i
]->
ígöe_d©a
;

735 
r_io_u_d
->
sq_wr
.
›code
 = 
IBV_WR_SEND
;

736 
r_io_u_d
->
sq_wr
.
£nd_Êags
 = 
IBV_SEND_SIGNALED
;

739 
	`log_îr
("fio: unknownÑdmaÖrotocol - %d\n",

740 
rd
->
rdma_¥Ÿocﬁ
);

744 i‡(
	`ibv_po°_£nd
(
rd
->
qp
, &
r_io_u_d
->
sq_wr
, &
bad_wr
) != 0) {

745 
	`log_îr
("fio: ibv_post_send fail: %m\n");

749 
	`d¥öt_io_u
(
io_us
[
i
], "fio_rdmaio_send");

755  
i
;

756 
	}
}

758 
	$fio_rdmaio_ªcv
(
thªad_d©a
 *
td
, 
io_u
 **
io_us
,

759 
ƒ
)

761 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s_d©a
;

762 
ibv_ªcv_wr
 *
bad_wr
;

763 
rdma_io_u_d©a
 *
r_io_u_d
;

764 
i
;

766 
i
 = 0;

767 i‡(
rd
->
rdma_¥Ÿocﬁ
 =
FIO_RDMA_CHA_RECV
) {

769 
i
 = 0; i < 
ƒ
; i++) {

770 
r_io_u_d
 = 
io_us
[
i
]->
ígöe_d©a
;

771 i‡(
	`ibv_po°_ªcv
(
rd
->
qp
, &
r_io_u_d
->
rq_wr
, &
bad_wr
) !=

773 
	`log_îr
("fio: ibv_post_recv fail: %m\n");

777 } i‡((
rd
->
rdma_¥Ÿocﬁ
 =
FIO_RDMA_MEM_READ
)

778 || (
rd
->
rdma_¥Ÿocﬁ
 =
FIO_RDMA_MEM_WRITE
)) {

780 i‡(
	`ibv_po°_ªcv
(
rd
->
qp
, &rd->
rq_wr
, &
bad_wr
) != 0) {

781 
	`log_îr
("fio: ibv_post_recv fail: %m\n");

785 
	`rdma_pﬁl_waô
(
td
, 
IBV_WC_RECV
);

787 
	`d¥öt
(
FD_IO
, "fio:Ñecv FINISH message\n");

788 
td
->
d⁄e
 = 1;

792  
i
;

793 
	}
}

795 
fio_q_°©us
 
	$fio_rdmaio_queue
(
thªad_d©a
 *
td
,

796 
io_u
 *io_u)

798 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s_d©a
;

800 
	`fio_ro_check
(
td
, 
io_u
);

802 i‡(
rd
->
io_u_queued_ƒ
 =()
td
->
o
.
iodïth
)

803  
FIO_Q_BUSY
;

805 
rd
->
io_us_queued
[rd->
io_u_queued_ƒ
] = 
io_u
;

806 
rd
->
io_u_queued_ƒ
++;

808 
	`d¥öt_io_u
(
io_u
, "fio_rdmaio_queue");

810  
FIO_Q_QUEUED
;

811 
	}
}

813 
	$fio_rdmaio_queued
(
thªad_d©a
 *
td
, 
io_u
 **
io_us
,

814 
ƒ
)

816 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s_d©a
;

817 
time•ec
 
now
;

818 
i
;

820 i‡(!
	`fio_fûl_issue_time
(
td
))

823 
	`fio_gëtime
(&
now
, 
NULL
);

825 
i
 = 0; i < 
ƒ
; i++) {

826 
io_u
 *io_u = 
io_us
[
i
];

829 
rd
->
io_us_Êight
[rd->
io_u_Êight_ƒ
] = 
io_u
;

830 
rd
->
io_u_Êight_ƒ
++;

832 
	`mem˝y
(&
io_u
->
issue_time
, &
now
, (now));

833 
	`io_u_queued
(
td
, 
io_u
);

839 i‡(
td
->
o
.
ªad_iﬁog_fûe
)

840 
	`mem˝y
(&
td
->
œ°_issue
, &
now
, (now));

841 
	}
}

843 
	$fio_rdmaio_commô
(
thªad_d©a
 *
td
)

845 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s_d©a
;

846 
io_u
 **
io_us
;

847 
ªt
;

849 i‡(!
rd
->
io_us_queued
)

852 
io_us
 = 
rd
->
io_us_queued
;

855 i‡(
rd
->
is_˛õ¡
)

856 
ªt
 = 
	`fio_rdmaio_£nd
(
td
, 
io_us
, 
rd
->
io_u_queued_ƒ
);

857 i‡(!
rd
->
is_˛õ¡
)

858 
ªt
 = 
	`fio_rdmaio_ªcv
(
td
, 
io_us
, 
rd
->
io_u_queued_ƒ
);

860 
ªt
 = 0;

862 i‡(
ªt
 > 0) {

863 
	`fio_rdmaio_queued
(
td
, 
io_us
, 
ªt
);

864 
	`io_u_m¨k_submô
(
td
, 
ªt
);

865 
rd
->
io_u_queued_ƒ
 -
ªt
;

866 
io_us
 +
ªt
;

867 
ªt
 = 0;

870 } 
rd
->
io_u_queued_ƒ
);

872  
ªt
;

873 
	}
}

875 
	$fio_rdmaio_c⁄√˘
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

877 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s_d©a
;

878 
rdma_c⁄n_∑øm
 
c⁄n_∑øm
;

879 
ibv_£nd_wr
 *
bad_wr
;

881 
	`mem£t
(&
c⁄n_∑øm
, 0, (conn_param));

882 
c⁄n_∑øm
.
ª•⁄dî_ªsour˚s
 = 1;

883 
c⁄n_∑øm
.
öôüt‹_dïth
 = 1;

884 
c⁄n_∑øm
.
ªåy_cou¡
 = 10;

886 i‡(
	`rdma_c⁄√˘
(
rd
->
cm_id
, &
c⁄n_∑øm
) != 0) {

887 
	`log_îr
("fio:Ñdma_connect fail: %m\n");

891 i‡(
gë_√xt_ch™√l_evít


892 (
td
, 
rd
->
cm_ch™√l
, 
RDMA_CM_EVENT_ESTABLISHED
) != 0) {

893 
	`log_îr
("fio: wait for RDMA_CM_EVENT_ESTABLISHED\n");

898 
rd
->
£nd_buf
.
mode
 = 
	`ht⁄l
‘d->
rdma_¥Ÿocﬁ
);

899 
rd
->
£nd_buf
.
ƒ
 = 
	`ht⁄l
(
td
->
o
.
iodïth
);

901 i‡(
	`ibv_po°_£nd
(
rd
->
qp
, &rd->
sq_wr
, &
bad_wr
) != 0) {

902 
	`log_îr
("fio: ibv_post_send fail: %m\n");

906 i‡(
	`rdma_pﬁl_waô
(
td
, 
IBV_WC_SEND
) < 0)

910 i‡(
	`rdma_pﬁl_waô
(
td
, 
IBV_WC_RECV
) < 0)

921 
	`u¶ìp
(500000);

924 
	}
}

926 
	$fio_rdmaio_ac˚±
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

928 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s_d©a
;

929 
rdma_c⁄n_∑øm
 
c⁄n_∑øm
;

930 
ibv_£nd_wr
 *
bad_wr
;

931 
ªt
 = 0;

934 
	`mem£t
(&
c⁄n_∑øm
, 0, (conn_param));

935 
c⁄n_∑øm
.
ª•⁄dî_ªsour˚s
 = 1;

936 
c⁄n_∑øm
.
öôüt‹_dïth
 = 1;

938 i‡(
	`rdma_ac˚±
(
rd
->
chûd_cm_id
, &
c⁄n_∑øm
) != 0) {

939 
	`log_îr
("fio:Ñdma_accept: %m\n");

943 i‡(
gë_√xt_ch™√l_evít


944 (
td
, 
rd
->
cm_ch™√l
, 
RDMA_CM_EVENT_ESTABLISHED
) != 0) {

945 
	`log_îr
("fio: wait for RDMA_CM_EVENT_ESTABLISHED\n");

950 
ªt
 = 
	`rdma_pﬁl_waô
(
td
, 
IBV_WC_RECV
) < 0;

952 i‡(
	`ibv_po°_£nd
(
rd
->
qp
, &rd->
sq_wr
, &
bad_wr
) != 0) {

953 
	`log_îr
("fio: ibv_post_send fail: %m\n");

957 i‡(
	`rdma_pﬁl_waô
(
td
, 
IBV_WC_SEND
) < 0)

960  
ªt
;

961 
	}
}

963 
	$fio_rdmaio_›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

965 i‡(
	`td_ªad
(
td
))

966  
	`fio_rdmaio_ac˚±
(
td
, 
f
);

968  
	`fio_rdmaio_c⁄√˘
(
td
, 
f
);

969 
	}
}

971 
	$fio_rdmaio_˛o£_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

973 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s_d©a
;

974 
ibv_£nd_wr
 *
bad_wr
;

982 i‡((
rd
->
is_˛õ¡
 =1Ë&& (‘d->
rdma_¥Ÿocﬁ
 =
FIO_RDMA_MEM_WRITE
)

983 || (
rd
->
rdma_¥Ÿocﬁ
 ==

984 
FIO_RDMA_MEM_READ
))) {

985 i‡(
	`ibv_po°_£nd
(
rd
->
qp
, &rd->
sq_wr
, &
bad_wr
) != 0) {

986 
	`log_îr
("fio: ibv_post_send fail: %m\n");

990 
	`d¥öt
(
FD_IO
, "fio: close information sent success\n");

991 
	`rdma_pﬁl_waô
(
td
, 
IBV_WC_SEND
);

994 i‡(
rd
->
is_˛õ¡
 == 1)

995 
	`rdma_disc⁄√˘
(
rd
->
cm_id
);

997 
	`rdma_disc⁄√˘
(
rd
->
chûd_cm_id
);

999 
	`rdma_disc⁄√˘
(
rd
->
cm_id
);

1004 i‡(
	`gë_√xt_ch™√l_evít
(
td
, 
rd
->
cm_ch™√l
, 
RDMA_CM_EVENT_DISCONNECTED
) != 0) {

1005 
	`log_îr
("fio: wait for RDMA_CM_EVENT_DISCONNECTED\n");

1010 
	`ibv_de°roy_cq
(
rd
->
cq
);

1011 
	`ibv_de°roy_qp
(
rd
->
qp
);

1013 i‡(
rd
->
is_˛õ¡
 == 1)

1014 
	`rdma_de°roy_id
(
rd
->
cm_id
);

1016 
	`rdma_de°roy_id
(
rd
->
chûd_cm_id
);

1017 
	`rdma_de°roy_id
(
rd
->
cm_id
);

1020 
	`ibv_de°roy_comp_ch™√l
(
rd
->
ch™√l
);

1021 
	`ibv_dóŒoc_pd
(
rd
->
pd
);

1024 
	}
}

1026 
	$©⁄
(
thªad_d©a
 *
td
, c⁄° *
ho°
,

1027 
sockaddr_ö
 *
addr
)

1029 i‡(
	`öë_©⁄
(
ho°
, &
addr
->
sö_addr
) != 1) {

1030 
ho°ít
 *
hít
;

1032 
hít
 = 
	`gëho°by«me
(
ho°
);

1033 i‡(!
hít
) {

1034 
	`td_vîr‹
(
td
, 
î∫o
, "gethostbyname");

1038 
	`mem˝y
(&
addr
->
sö_addr
, 
hít
->
h_addr
, 4);

1041 
	}
}

1043 
	$fio_rdmaio_£tup_c⁄√˘
(
thªad_d©a
 *
td
, c⁄° *
ho°
,

1044 
p‹t
)

1046 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s_d©a
;

1047 
rdmaio_›ti⁄s
 *
o
 = 
td
->
eo
;

1048 
sockaddr_°‹age
 
addrb
;

1049 
ibv_ªcv_wr
 *
bad_wr
;

1050 
îr
;

1052 
rd
->
addr
.
sö_Ámûy
 = 
AF_INET
;

1053 
rd
->
addr
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

1055 
îr
 = 
	`©⁄
(
td
, 
ho°
, &
rd
->
addr
);

1056 i‡(
îr
)

1057  
îr
;

1060 i‡(
o
->
böd«me
 && 
	`°æí
(o->bindname)) {

1061 
addrb
.
ss_Ámûy
 = 
AF_INET
;

1062 
îr
 = 
	`©⁄
(
td
, 
o
->
böd«me
, (
sockaddr_ö
 *)&
addrb
);

1063 i‡(
îr
)

1064  
îr
;

1065 
îr
 = 
	`rdma_ªsﬁve_addr
(
rd
->
cm_id
, (
sockaddr
 *)&
addrb
,

1066 (
sockaddr
 *)&
rd
->
addr
, 2000);

1069 
îr
 = 
	`rdma_ªsﬁve_addr
(
rd
->
cm_id
, 
NULL
,

1070 (
sockaddr
 *)&
rd
->
addr
, 2000);

1073 i‡(
îr
 != 0) {

1074 
	`log_îr
("fio:Ñdma_ªsﬁve_addr: %d\n", 
îr
);

1078 
îr
 = 
	`gë_√xt_ch™√l_evít
(
td
, 
rd
->
cm_ch™√l
, 
RDMA_CM_EVENT_ADDR_RESOLVED
);

1079 i‡(
îr
 != 0) {

1080 
	`log_îr
("fio: gë_√xt_ch™√l_evít: %d\n", 
îr
);

1085 
îr
 = 
	`rdma_ªsﬁve_rouã
(
rd
->
cm_id
, 2000);

1086 i‡(
îr
 != 0) {

1087 
	`log_îr
("fio:Ñdma_ªsﬁve_rouã: %d\n", 
îr
);

1091 
îr
 = 
	`gë_√xt_ch™√l_evít
(
td
, 
rd
->
cm_ch™√l
, 
RDMA_CM_EVENT_ROUTE_RESOLVED
);

1092 i‡(
îr
 != 0) {

1093 
	`log_îr
("fio: gë_√xt_ch™√l_evít: %d\n", 
îr
);

1098 i‡(
	`fio_rdmaio_£tup_qp
(
td
) != 0)

1101 i‡(
	`fio_rdmaio_£tup_c⁄åﬁ_msg_buf„rs
(
td
) != 0)

1105 
îr
 = 
	`ibv_po°_ªcv
(
rd
->
qp
, &rd->
rq_wr
, &
bad_wr
);

1106 i‡(
îr
 != 0) {

1107 
	`log_îr
("fio: ibv_po°_ªcv faû: %d\n", 
îr
);

1112 
	}
}

1114 
	$fio_rdmaio_£tup_li°í
(
thªad_d©a
 *
td
, 
p‹t
)

1116 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s_d©a
;

1117 
rdmaio_›ti⁄s
 *
o
 = 
td
->
eo
;

1118 
ibv_ªcv_wr
 *
bad_wr
;

1119 
°©e
 = 
td
->
run°©e
;

1121 
	`td_£t_run°©e
(
td
, 
TD_SETTING_UP
);

1123 
rd
->
addr
.
sö_Ámûy
 = 
AF_INET
;

1124 
rd
->
addr
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

1126 i‡(!
o
->
böd«me
 || !
	`°æí
(o->bindname))

1127 
rd
->
addr
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
);

1129 
rd
->
addr
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(*
o
->
böd«me
);

1132 i‡(
	`rdma_böd_addr
(
rd
->
cm_id
, (
sockaddr
 *)&rd->
addr
) != 0) {

1133 
	`log_îr
("fio:Ñdma_bind_addr fail: %m\n");

1137 i‡(
	`rdma_li°í
(
rd
->
cm_id
, 3) != 0) {

1138 
	`log_îr
("fio:Ñdma_listen fail: %m\n");

1142 
	`log_öfo
("fio: waiting for connection\n");

1145 i‡(
gë_√xt_ch™√l_evít


1146 (
td
, 
rd
->
cm_ch™√l
, 
RDMA_CM_EVENT_CONNECT_REQUEST
) != 0) {

1147 
	`log_îr
("fio: wait for RDMA_CM_EVENT_CONNECT_REQUEST\n");

1151 i‡(
	`fio_rdmaio_£tup_qp
(
td
) != 0)

1154 i‡(
	`fio_rdmaio_£tup_c⁄åﬁ_msg_buf„rs
(
td
) != 0)

1158 i‡(
	`ibv_po°_ªcv
(
rd
->
qp
, &rd->
rq_wr
, &
bad_wr
) != 0) {

1159 
	`log_îr
("fio: ibv_post_recv fail: %m\n");

1163 
	`td_£t_run°©e
(
td
, 
°©e
);

1165 
	}
}

1167 
	$check_£t_æimôs
(
thªad_d©a
 *
td
)

1169 #ifde‡
CONFIG_RLIMIT_MEMLOCK


1170 
æimô
 
æ
;

1173 i‡(
	`gëæimô
(
RLIMIT_MEMLOCK
, &
æ
) != 0) {

1174 
	`log_îr
("fio: getrlimit fail: %d(%s)\n",

1175 
î∫o
, 
	`°ªº‹
(errno));

1180 i‡((
æ
.
æim_cur
 !
RLIM_INFINITY
)

1181 && (
æ
.
æim_cur
 < 
td
->
‹ig_buf„r_size
)) {

1182 
	`log_îr
("fio: so· RLIMIT_MEMLOCK is: %" 
PRId64
 "\n",

1183 
æ
.
æim_cur
);

1184 
	`log_îr
("fio:Åotal block size is: %zd\n",

1185 
td
->
‹ig_buf„r_size
);

1187 
æ
.
æim_cur
 =Ñl.
æim_max
;

1188 i‡(
	`£ålimô
(
RLIMIT_MEMLOCK
, &
æ
) != 0) {

1189 
	`log_îr
("fio: setrlimit fail: %d(%s)\n",

1190 
î∫o
, 
	`°ªº‹
(errno));

1191 
	`log_îr
("fio: you mayÅryÉnlarge MEMLOCK byÑoot\n");

1192 
	`log_îr
("# ulimit -l unlimited\n");

1199 
	}
}

1201 
	$com∑t_›ti⁄s
(
thªad_d©a
 *
td
)

1208 
rdmaio_›ti⁄s
 *
o
 = 
td
->
eo
;

1209 *
modï
, *
p‹ç
;

1210 *
fûíame
 = 
td
->
o
.filename;

1212 i‡(!
fûíame
)

1215 
p‹ç
 = 
	`°rchr
(
fûíame
, '/');

1216 i‡(
p‹ç
 =
NULL
)

1219 *
p‹ç
 = '\0';

1220 
p‹ç
++;

1222 
o
->
p‹t
 = 
	`°πﬁ
(
p‹ç
, 
NULL
, 10);

1223 i‡(!
o
->
p‹t
 || o->port > 65535)

1224 
bad_ho°
;

1226 
modï
 = 
	`°rchr
(
p‹ç
, '/');

1227 i‡(
modï
 !
NULL
) {

1228 *
modï
 = '\0';

1229 
modï
++;

1232 i‡(
modï
) {

1233 i‡(!
	`°∫cmp
("rdma_wrôe", 
modï
, 
	`°æí
(modep)) ||

1234 !
	`°∫cmp
("RDMA_WRITE", 
modï
, 
	`°æí
(modep)))

1235 
o
->
vîb
 = 
FIO_RDMA_MEM_WRITE
;

1236 i‡(!
	`°∫cmp
("rdma_ªad", 
modï
, 
	`°æí
(modep)) ||

1237 !
	`°∫cmp
("RDMA_READ", 
modï
, 
	`°æí
(modep)))

1238 
o
->
vîb
 = 
FIO_RDMA_MEM_READ
;

1239 i‡(!
	`°∫cmp
("£nd", 
modï
, 
	`°æí
(modep)) ||

1240 !
	`°∫cmp
("SEND", 
modï
, 
	`°æí
(modep)))

1241 
o
->
vîb
 = 
FIO_RDMA_CHA_SEND
;

1243 
bad_ho°
;

1245 
o
->
vîb
 = 
FIO_RDMA_MEM_WRITE
;

1250 
bad_ho°
:

1251 
	`log_îr
("fio: badÑdm®ho°/p‹t/¥Ÿocﬁ: %s\n", 
td
->
o
.
fûíame
);

1253 
	}
}

1255 
	$fio_rdmaio_öô
(
thªad_d©a
 *
td
)

1257 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s_d©a
;

1258 
rdmaio_›ti⁄s
 *
o
 = 
td
->
eo
;

1259 
ªt
;

1261 i‡(
	`td_rw
(
td
)) {

1262 
	`log_îr
("fio:Ñdma connections must beÑead OR write\n");

1265 i‡(
	`td_øndom
(
td
)) {

1266 
	`log_îr
("fio: RDMAÇetwork IO can't beÑandom\n");

1270 i‡(
	`com∑t_›ti⁄s
(
td
))

1273 i‡(!
o
->
p‹t
) {

1274 
	`log_îr
("fio:ÇoÖort has been specified which isÑequired "

1279 i‡(
	`check_£t_æimôs
(
td
))

1282 
rd
->
rdma_¥Ÿocﬁ
 = 
o
->
vîb
;

1283 
rd
->
cq_evít_num
 = 0;

1285 
rd
->
cm_ch™√l
 = 
	`rdma_¸óã_evít_ch™√l
();

1286 i‡(!
rd
->
cm_ch™√l
) {

1287 
	`log_îr
("fio:Ñdma_create_event_channel fail: %m\n");

1291 
ªt
 = 
	`rdma_¸óã_id
(
rd
->
cm_ch™√l
, &rd->
cm_id
,Ñd, 
RDMA_PS_TCP
);

1292 i‡(
ªt
) {

1293 
	`log_îr
("fio:Ñdma_create_id fail: %m\n");

1297 i‡((
rd
->
rdma_¥Ÿocﬁ
 =
FIO_RDMA_MEM_WRITE
) ||

1298 (
rd
->
rdma_¥Ÿocﬁ
 =
FIO_RDMA_MEM_READ
)) {

1299 
rd
->
rmt_us
 =

1300 
	`mÆloc
(
FIO_RDMA_MAX_IO_DEPTH
 * (
ªmŸe_u
));

1301 
	`mem£t
(
rd
->
rmt_us
, 0,

1302 
FIO_RDMA_MAX_IO_DEPTH
 * (
ªmŸe_u
));

1303 
rd
->
rmt_ƒ
 = 0;

1306 
rd
->
io_us_queued
 = 
	`mÆloc
(
td
->
o
.
iodïth
 * (
io_u
 *));

1307 
	`mem£t
(
rd
->
io_us_queued
, 0, 
td
->
o
.
iodïth
 * (
io_u
 *));

1308 
rd
->
io_u_queued_ƒ
 = 0;

1310 
rd
->
io_us_Êight
 = 
	`mÆloc
(
td
->
o
.
iodïth
 * (
io_u
 *));

1311 
	`mem£t
(
rd
->
io_us_Êight
, 0, 
td
->
o
.
iodïth
 * (
io_u
 *));

1312 
rd
->
io_u_Êight_ƒ
 = 0;

1314 
rd
->
io_us_com∂ëed
 = 
	`mÆloc
(
td
->
o
.
iodïth
 * (
io_u
 *));

1315 
	`mem£t
(
rd
->
io_us_com∂ëed
, 0, 
td
->
o
.
iodïth
 * (
io_u
 *));

1316 
rd
->
io_u_com∂ëed_ƒ
 = 0;

1318 i‡(
	`td_ªad
(
td
)) {

1319 
rd
->
is_˛õ¡
 = 0;

1320 
td
->
Êags
 |
TD_F_NO_PROGRESS
;

1322 
ªt
 = 
	`fio_rdmaio_£tup_li°í
(
td
, 
o
->
p‹t
);

1324 
rd
->
is_˛õ¡
 = 1;

1325 
ªt
 = 
	`fio_rdmaio_£tup_c⁄√˘
(
td
,Åd->
o
.
fûíame
, o->
p‹t
);

1327  
ªt
;

1328 
	}
}

1329 
	$fio_rdmaio_po°_öô
(
thªad_d©a
 *
td
)

1331 
max_bs
;

1332 
i
;

1333 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s_d©a
;

1335 
max_bs
 = 
	`max
(
td
->
o
.max_bs[
DDIR_READ
],Åd->o.max_bs[
DDIR_WRITE
]);

1336 
rd
->
£nd_buf
.
max_bs
 = 
	`ht⁄l
(max_bs);

1339 
i
 = 0; i < 
td
->
io_u_‰ìli°
.
ƒ
; i++) {

1340 
io_u
 *io_u = 
td
->
io_u_‰ìli°
.
io_us
[
i
];

1342 
io_u
->
ígöe_d©a
 = 
	`mÆloc
((
rdma_io_u_d©a
));

1343 
	`mem£t
(
io_u
->
ígöe_d©a
, 0, (
rdma_io_u_d©a
));

1344 ((
rdma_io_u_d©a
 *)
io_u
->
ígöe_d©a
)->
wr_id
 = 
i
;

1346 
io_u
->
mr
 = 
	`ibv_ªg_mr
(
rd
->
pd
, io_u->
buf
, 
max_bs
,

1347 
IBV_ACCESS_LOCAL_WRITE
 |

1348 
IBV_ACCESS_REMOTE_READ
 |

1349 
IBV_ACCESS_REMOTE_WRITE
);

1350 i‡(
io_u
->
mr
 =
NULL
) {

1351 
	`log_îr
("fio: ibv_reg_mr io_u failed: %m\n");

1355 
rd
->
£nd_buf
.
rmt_us
[
i
].
buf
 =

1356 
	`˝u_to_be64
((
uöt64_t
Ë()
io_u
->
buf
);

1357 
rd
->
£nd_buf
.
rmt_us
[
i
].
rkey
 = 
	`ht⁄l
(
io_u
->
mr
->rkey);

1358 
rd
->
£nd_buf
.
rmt_us
[
i
].
size
 = 
	`ht⁄l
(
max_bs
);

1361 
	`log_öfo
("fio: SídÑkey %xádd∏%" 
PRIx64
 "Üí %dÅÿ˛õ¡\n", 
io_u
->
mr
->
rkey
, io_u->
buf
, 
max_bs
); */

1365 
rd
->
£nd_buf
.
ƒ
 = 
	`ht⁄l
(
i
);

1368 
	}
}

1370 
	$fio_rdmaio_˛ónup
(
thªad_d©a
 *
td
)

1372 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s_d©a
;

1374 i‡(
rd
)

1375 
	`‰ì
(
rd
);

1376 
	}
}

1378 
	$fio_rdmaio_£tup
(
thªad_d©a
 *
td
)

1380 
rdmaio_d©a
 *
rd
;

1382 i‡(!
td
->
fûes_ödex
) {

1383 
	`add_fûe
(
td
,Åd->
o
.
fûíame
 ?: "rdma", 0, 0);

1384 
td
->
o
.
ƒ_fûes
 =Åd->o.nr_files ?: 1;

1385 
td
->
o
.
›í_fûes
++;

1388 i‡(!
td
->
io_›s_d©a
) {

1389 
rd
 = 
	`mÆloc
((*rd));

1391 
	`mem£t
(
rd
, 0, (*rd));

1392 
	`öô_ønd_£ed
(&
rd
->
ønd_°©e
, (Ë
GOLDEN_RATIO_64
, 0);

1393 
td
->
io_›s_d©a
 = 
rd
;

1397 
	}
}

1399 
FIO_STATIC
 
i€ngöe_›s
 
	gi€ngöe
 = {

1400 .
«me
 = "rdma",

1401 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

1402 .
	g£tup
 = 
fio_rdmaio_£tup
,

1403 .
	göô
 = 
fio_rdmaio_öô
,

1404 .
	gpo°_öô
 = 
fio_rdmaio_po°_öô
,

1405 .
	g¥ï
 = 
fio_rdmaio_¥ï
,

1406 .
	gqueue
 = 
fio_rdmaio_queue
,

1407 .
	gcommô
 = 
fio_rdmaio_commô
,

1408 .
	ggëevíts
 = 
fio_rdmaio_gëevíts
,

1409 .
	gevít
 = 
fio_rdmaio_evít
,

1410 .
	g˛ónup
 = 
fio_rdmaio_˛ónup
,

1411 .
	g›í_fûe
 = 
fio_rdmaio_›í_fûe
,

1412 .
	g˛o£_fûe
 = 
fio_rdmaio_˛o£_fûe
,

1413 .
	gÊags
 = 
FIO_DISKLESSIO
 | 
FIO_UNIDIR
 | 
FIO_PIPEIO
 |

1414 
FIO_ASYNCIO_SETS_ISSUE_TIME
,

1415 .
	g›ti⁄s
 = 
›ti⁄s
,

1416 .
	g›ti⁄_°ru˘_size
 = (
rdmaio_›ti⁄s
),

1419 
fio_öô
 
	$fio_rdmaio_ªgi°î
()

1421 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

1422 
	}
}

1424 
fio_exô
 
	$fio_rdmaio_uƒegi°î
()

1426 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

1427 
	}
}

	@engines/sg.c

52 
	~<°dio.h
>

53 
	~<°dlib.h
>

54 
	~<uni°d.h
>

55 
	~<î∫o.h
>

56 
	~<pﬁl.h
>

58 
	~"../fio.h
"

59 
	~"../›tgroup.h
"

61 #ifde‡
FIO_HAVE_SGIO


63 #i‚de‡
SGV4_FLAG_HIPRI


64 
	#SGV4_FLAG_HIPRI
 0x800

	)

68 
	mFIO_SG_WRITE
 = 1,

69 
	mFIO_SG_WRITE_VERIFY
,

70 
	mFIO_SG_WRITE_SAME
,

71 
	mFIO_SG_WRITE_SAME_NDOB
,

72 
	mFIO_SG_WRITE_STREAM
,

73 
	mFIO_SG_VERIFY_BYTCHK_00
,

74 
	mFIO_SG_VERIFY_BYTCHK_01
,

75 
	mFIO_SG_VERIFY_BYTCHK_11
,

78 
	ssg_›ti⁄s
 {

79 *
	m∑d
;

80 
	mhùri
;

81 
	mªadfua
;

82 
	mwrôefua
;

83 
	mwrôe_mode
;

84 
uöt16_t
 
	m°ªam_id
;

87 
fio_›ti⁄
 
	g›ti⁄s
[] = {

89 .
«me
 = "hipri",

90 .
	g ame
 = "High Priority",

91 .
	gty≥
 = 
FIO_OPT_STR_SET
,

92 .
	goff1
 = 
off£tof
(
sg_›ti⁄s
, 
hùri
),

93 .
	ghñp
 = "UseÖolled IO completions",

94 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

95 .
	ggroup
 = 
FIO_OPT_G_SG
,

98 .
	g«me
 = "readfua",

99 .
	g ame
 = "sgÉngineÑead fua flag support",

100 .
	gty≥
 = 
FIO_OPT_BOOL
,

101 .
	goff1
 = 
off£tof
(
sg_›ti⁄s
, 
ªadfua
),

102 .
	ghñp
 = "Set FUA flag (force unitáccess) foráll Read operations",

103 .
	gdef
 = "0",

104 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

105 .
	ggroup
 = 
FIO_OPT_G_SG
,

108 .
	g«me
 = "writefua",

109 .
	g ame
 = "sgÉngine write fua flag support",

110 .
	gty≥
 = 
FIO_OPT_BOOL
,

111 .
	goff1
 = 
off£tof
(
sg_›ti⁄s
, 
wrôefua
),

112 .
	ghñp
 = "Set FUA flag (force unitáccess) foráll Write operations",

113 .
	gdef
 = "0",

114 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

115 .
	ggroup
 = 
FIO_OPT_G_SG
,

118 .
	g«me
 = "sg_write_mode",

119 .
	g ame
 = "specify sg write mode",

120 .
	gty≥
 = 
FIO_OPT_STR
,

121 .
	goff1
 = 
off£tof
(
sg_›ti⁄s
, 
wrôe_mode
),

122 .
	ghñp
 = "Specify SCSI WRITE mode",

123 .
	gdef
 = "write",

124 .
	gposvÆ
 = {

125 { .
ivÆ
 = "write",

126 .
	govÆ
 = 
FIO_SG_WRITE
,

127 .
	ghñp
 = "Issue standard SCSI WRITE commands",

129 { .
	givÆ
 = "write_and_verify",

130 .
	govÆ
 = 
FIO_SG_WRITE_VERIFY
,

131 .
	ghñp
 = "Issue SCSI WRITE AND VERIFY commands",

133 { .
	givÆ
 = "verify",

134 .
	govÆ
 = 
FIO_SG_WRITE_VERIFY
,

135 .
	ghñp
 = "Issue SCSI WRITE AND VERIFY commands. This "

138 { .
	givÆ
 = "write_same",

139 .
	govÆ
 = 
FIO_SG_WRITE_SAME
,

140 .
	ghñp
 = "Issue SCSI WRITE SAME commands",

142 { .
	givÆ
 = "same",

143 .
	govÆ
 = 
FIO_SG_WRITE_SAME
,

144 .
	ghñp
 = "Issue SCSI WRITE SAME commands. This "

147 { .
	givÆ
 = "write_same_ndob",

148 .
	govÆ
 = 
FIO_SG_WRITE_SAME_NDOB
,

149 .
	ghñp
 = "Issue SCSI WRITE SAME(16) commands with NDOB flag set",

151 { .
	givÆ
 = "verify_bytchk_00",

152 .
	govÆ
 = 
FIO_SG_VERIFY_BYTCHK_00
,

153 .
	ghñp
 = "Issue SCSI VERIFY commands with BYTCHK setÅo 00",

155 { .
	givÆ
 = "verify_bytchk_01",

156 .
	govÆ
 = 
FIO_SG_VERIFY_BYTCHK_01
,

157 .
	ghñp
 = "Issue SCSI VERIFY commands with BYTCHK setÅo 01",

159 { .
	givÆ
 = "verify_bytchk_11",

160 .
	govÆ
 = 
FIO_SG_VERIFY_BYTCHK_11
,

161 .
	ghñp
 = "Issue SCSI VERIFY commands with BYTCHK setÅo 11",

163 { .
	givÆ
 = "write_stream",

164 .
	govÆ
 = 
FIO_SG_WRITE_STREAM
,

165 .
	ghñp
 = "Issue SCSI WRITE STREAM(16) commands",

168 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

169 .
	ggroup
 = 
FIO_OPT_G_SG
,

172 .
	g«me
 = "stream_id",

173 .
	g ame
 = "stream id for WRITE STREAM(16) commands",

174 .
	gty≥
 = 
FIO_OPT_INT
,

175 .
	goff1
 = 
off£tof
(
sg_›ti⁄s
, 
°ªam_id
),

176 .
	ghñp
 = "Stream ID for WRITE STREAM(16) commands",

177 .
	gdef
 = "0",

178 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

179 .
	ggroup
 = 
FIO_OPT_G_SG
,

182 .
	g«me
 = 
NULL
,

186 
	#MAX_10B_LBA
 0xFFFFFFFFULL

	)

187 
	#SCSI_TIMEOUT_MS
 30000

188 
	#MAX_SB
 64

189 

	)

193 
	ssgio_cmd
 {

194 
	mcdb
[16];

195 
	msb
[
MAX_SB
];

196 
	mƒ
;

199 
	ssgio_åim
 {

200 
uöt8_t
 *
	munm≠_∑øm
;

201 
	munm≠_ønge_cou¡
;

202 
io_u
 **
	måim_io_us
;

205 
	ssgio_d©a
 {

206 
sgio_cmd
 *
	mcmds
;

207 
io_u
 **
	mevíts
;

208 
pﬁlfd
 *
	mpfds
;

209 *
	mfd_Êags
;

210 *
	msgbuf
;

211 
	mbs
;

212 
	mty≥_checked
;

213 
sgio_åim
 **
	måim_queues
;

214 
	mcuºít_queue
;

215 #ifde‡
FIO_SGIO_DEBUG


216 *
	måim_queue_m≠
;

220 
ölöe
 
uöt16_t
 
	$sgio_gë_be16
(
uöt8_t
 *
buf
)

222  
	`be16_to_˝u
(*((
uöt16_t
 *Ë
buf
));

223 
	}
}

225 
ölöe
 
uöt32_t
 
	$sgio_gë_be32
(
uöt8_t
 *
buf
)

227  
	`be32_to_˝u
(*((
uöt32_t
 *Ë
buf
));

228 
	}
}

230 
ölöe
 
uöt64_t
 
	$sgio_gë_be64
(
uöt8_t
 *
buf
)

232  
	`be64_to_˝u
(*((
uöt64_t
 *Ë
buf
));

233 
	}
}

235 
ölöe
 
	$sgio_£t_be16
(
uöt16_t
 
vÆ
, 
uöt8_t
 *
buf
)

237 
uöt16_t
 
t
 = 
	`˝u_to_be16
(
vÆ
);

239 
	`mem˝y
(
buf
, &
t
, (
uöt16_t
));

240 
	}
}

242 
ölöe
 
	$sgio_£t_be32
(
uöt32_t
 
vÆ
, 
uöt8_t
 *
buf
)

244 
uöt32_t
 
t
 = 
	`˝u_to_be32
(
vÆ
);

246 
	`mem˝y
(
buf
, &
t
, (
uöt32_t
));

247 
	}
}

249 
ölöe
 
	$sgio_£t_be64
(
uöt64_t
 
vÆ
, 
uöt8_t
 *
buf
)

251 
uöt64_t
 
t
 = 
	`˝u_to_be64
(
vÆ
);

253 
	`mem˝y
(
buf
, &
t
, (
uöt64_t
));

254 
	}
}

256 
ölöe
 
boﬁ
 
	$sgio_unbuf„ªd
(
thªad_d©a
 *
td
)

258  (
td
->
o
.
odúe˘
 ||Åd->o.
sync_io
);

259 
	}
}

261 
	$sgio_hdr_öô
(
sgio_d©a
 *
sd
, 
sg_io_hdr
 *
hdr
,

262 
io_u
 *io_u, 
fs
)

264 
sgio_cmd
 *
sc
 = &
sd
->
cmds
[
io_u
->
ödex
];

266 
	`mem£t
(
hdr
, 0, (*hdr));

267 
	`mem£t
(
sc
->
cdb
, 0, (sc->cdb));

269 
hdr
->
öãrÁ˚_id
 = 'S';

270 
hdr
->
cmdp
 = 
sc
->
cdb
;

271 
hdr
->
cmd_Àn
 = (
sc
->
cdb
);

272 
hdr
->
sbp
 = 
sc
->
sb
;

273 
hdr
->
mx_sb_Àn
 = (
sc
->
sb
);

274 
hdr
->
∑ck_id
 = 
io_u
->
ödex
;

275 
hdr
->
u§_±r
 = 
io_u
;

276 
hdr
->
timeout
 = 
SCSI_TIMEOUT_MS
;

278 i‡(
fs
) {

279 
hdr
->
dx„Ω
 = 
io_u
->
x„r_buf
;

280 
hdr
->
dx„r_Àn
 = 
io_u
->
x„r_buÊí
;

282 
	}
}

284 
	$pﬁlö_evíts
(
pﬁlfd
 *
pfds
, 
fds
)

286 
i
;

288 
i
 = 0; i < 
fds
; i++)

289 i‡(
pfds
[
i
].
ªvíts
 & 
POLLIN
)

293 
	}
}

295 
	$sg_fd_ªad
(
fd
, *
d©a
, 
size_t
 
size
)

297 
îr
 = 0;

299 
size
) {

300 
ssize_t
 
ªt
;

302 
ªt
 = 
	`ªad
(
fd
, 
d©a
, 
size
);

303 i‡(
ªt
 < 0) {

304 i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EINTR
)

306 
îr
 = 
î∫o
;

308 } i‡(!
ªt
)

311 
d©a
 +
ªt
;

312 
size
 -
ªt
;

316 i‡(
îr
)

317  
îr
;

318 i‡(
size
)

319  
EAGAIN
;

322 
	}
}

324 
	$fio_sgio_gëevíts
(
thªad_d©a
 *
td
, 
mö
,

325 
max
,

326 c⁄° 
time•ec
 
fio_unu£d
 *
t
)

328 
sgio_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

329 
À·
 = 
max
, 
evítNum
, 
ªt
, 
r
 = 0, 
åims
 = 0;

330 *
buf
 = 
sd
->
sgbuf
;

331 
i
, 
j
, 
evíts
;

332 
fio_fûe
 *
f
;

333 
io_u
 *io_u;

338 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

342 i‡(!
mö
)

343 
sd
->
fd_Êags
[
i
] = 
	`fio_£t_fd_n⁄blockög
(
f
->
fd
, "sg");

345 
sd
->
fd_Êags
[
i
] = -1;

347 
sd
->
pfds
[
i
].
fd
 = 
f
->fd;

348 
sd
->
pfds
[
i
].
evíts
 = 
POLLIN
;

361 
À·
 > 0) {

362 *
p
;

364 
	`d¥öt
(
FD_IO
, "sgio_gëevíts: sd %p: mö=%d, max=%d,Üe·=%d\n", 
sd
, 
mö
, 
max
, 
À·
);

367 i‡(!
mö
)

370 
ªt
 = 
	`pﬁl
(
sd
->
pfds
, 
td
->
o
.
ƒ_fûes
, -1);

371 i‡(
ªt
 < 0) {

372 i‡(!
r
)

373 
r
 = -
î∫o
;

374 
	`td_vîr‹
(
td
, 
î∫o
, "poll");

376 } i‡(!
ªt
)

379 i‡(
	`pﬁlö_evíts
(
sd
->
pfds
, 
td
->
o
.
ƒ_fûes
))

383 i‡(
r
 < 0)

386 
ª_ªad
:

387 
p
 = 
buf
;

388 
evíts
 = 0;

389 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

390 
evítNum
 = 0;ÉvítNum < 
À·
;ÉventNum++) {

391 
ªt
 = 
	`sg_fd_ªad
(
f
->
fd
, 
p
, (
sg_io_hdr
));

392 
	`d¥öt
(
FD_IO
, "sgio_gëevíts: sg_fd_ªadÑë: %d\n", 
ªt
);

393 i‡(
ªt
) {

394 
r
 = -
ªt
;

395 
	`td_vîr‹
(
td
, 
r
, "sg_read");

398 
io_u
 = ((
sg_io_hdr
 *)
p
)->
u§_±r
;

399 i‡(
io_u
->
ddú
 =
DDIR_TRIM
) {

400 
evíts
 +
sd
->
åim_queues
[
io_u
->
ödex
]->
unm≠_ønge_cou¡
;

401 
evítNum
 +
sd
->
åim_queues
[
io_u
->
ödex
]->
unm≠_ønge_cou¡
 - 1;

403 
evíts
++;

405 
p
 +(
sg_io_hdr
);

406 
	`d¥öt
(
FD_IO
, "sgio_gëevíts:Évíts: %d,ÉvítNum: %d,Üe·: %d\n", 
evíts
, 
evítNum
, 
À·
);

410 i‡(
r
 < 0 && !
evíts
)

412 i‡(!
evíts
) {

413 
	`u¶ìp
(1000);

414 
ª_ªad
;

417 
À·
 -
evíts
;

418 
r
 +
evíts
;

420 
i
 = 0; i < 
evíts
; i++) {

421 
sg_io_hdr
 *
hdr
 = (sg_io_hd∏*Ë
buf
 + 
i
;

422 
sd
->
evíts
[
i
 + 
åims
] = 
hdr
->
u§_±r
;

423 
io_u
 = (io_u *)(
hdr
->
u§_±r
);

425 i‡(
hdr
->
öfo
 & 
SG_INFO_CHECK
) {

427 
	`mem˝y
(&
io_u
->
hdr
, hdr, (
sg_io_hdr
));

428 
sd
->
evíts
[
i
 + 
åims
]->
îr‹
 = 
EIO
;

431 i‡(
io_u
->
ddú
 =
DDIR_TRIM
) {

432 
sgio_åim
 *
°
 = 
sd
->
åim_queues
[
io_u
->
ödex
];

433 #ifde‡
FIO_SGIO_DEBUG


434 
	`as£π
(
°
->
åim_io_us
[0] =
io_u
);

435 
	`as£π
(
sd
->
åim_queue_m≠
[
io_u
->
ödex
] == io_u->index);

436 
	`d¥öt
(
FD_IO
, "sgio_gëevíts:Ñópög %d io_u†‰omÅrim queuê%d\n", 
°
->
unm≠_ønge_cou¡
, 
io_u
->
ödex
);

437 
	`d¥öt
(
FD_IO
, "sgio_gëevíts:Ñó≥d io_u %dánd st‹ed i¿evíts[%d]\n", 
io_u
->
ödex
, 
i
+
åims
);

439 
j
 = 1; j < 
°
->
unm≠_ønge_cou¡
; j++) {

440 ++
åims
;

441 
sd
->
evíts
[
i
 + 
åims
] = 
°
->
åim_io_us
[
j
];

442 #ifde‡
FIO_SGIO_DEBUG


443 
	`d¥öt
(
FD_IO
, "sgio_gëevíts:Ñó≥d io_u %dánd st‹ed i¿evíts[%d]\n", 
°
->
åim_io_us
[
j
]->
ödex
, 
i
+
åims
);

444 
	`as£π
(
sd
->
åim_queue_m≠
[
°
->
åim_io_us
[
j
]->
ödex
] =
io_u
->index);

446 i‡(
hdr
->
öfo
 & 
SG_INFO_CHECK
) {

448 
	`mem˝y
(&
°
->
åim_io_us
[
j
]->
hdr
, hdr, (
sg_io_hdr
));

449 
sd
->
evíts
[
i
 + 
åims
]->
îr‹
 = 
EIO
;

452 
evíts
 -
°
->
unm≠_ønge_cou¡
 - 1;

453 
°
->
unm≠_ønge_cou¡
 = 0;

458 i‡(!
mö
) {

459 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

460 i‡(
sd
->
fd_Êags
[
i
] == -1)

463 i‡(
	`f˙é
(
f
->
fd
, 
F_SETFL
, 
sd
->
fd_Êags
[
i
]) < 0)

464 
	`log_îr
("fio: sg faûedÅÿª°‹êf˙é fœgs: %s\n", 
	`°ªº‹
(
î∫o
));

468  
r
;

469 
	}
}

471 
fio_q_°©us
 
	$fio_sgio_io˘l_doio
(
thªad_d©a
 *
td
,

472 
fio_fûe
 *
f
,

473 
io_u
 *io_u)

475 
sgio_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

476 
sg_io_hdr
 *
hdr
 = &
io_u
->hdr;

477 
ªt
;

479 
sd
->
evíts
[0] = 
io_u
;

481 
ªt
 = 
	`io˘l
(
f
->
fd
, 
SG_IO
, 
hdr
);

482 i‡(
ªt
 < 0)

483  
ªt
;

486 i‡(
hdr
->
öfo
 & 
SG_INFO_CHECK
)

487 
io_u
->
îr‹
 = 
EIO
;

489  
FIO_Q_COMPLETED
;

490 
	}
}

492 
fio_q_°©us
 
	$fio_sgio_rw_doio
(
thªad_d©a
 *
td
,

493 
fio_fûe
 *
f
,

494 
io_u
 *io_u, 
do_sync
)

496 
sg_io_hdr
 *
hdr
 = &
io_u
->hdr;

497 
ªt
;

499 
ªt
 = 
	`wrôe
(
f
->
fd
, 
hdr
, (*hdr));

500 i‡(
ªt
 < 0)

501  
ªt
;

503 i‡(
do_sync
) {

510 
io_u
 *
__io_u
;

512 
ªt
 = 
	`ªad
(
f
->
fd
, 
hdr
, (*hdr));

513 i‡(
ªt
 < 0)

514  
ªt
;

516 
__io_u
 = 
hdr
->
u§_±r
;

519 i‡(
hdr
->
öfo
 & 
SG_INFO_CHECK
)

520 
__io_u
->
îr‹
 = 
EIO
;

522 i‡(
__io_u
 =
io_u
)

525 i‡(
	`io_u_sync_com∂ëe
(
td
, 
__io_u
))

530  
FIO_Q_COMPLETED
;

533  
FIO_Q_QUEUED
;

534 
	}
}

536 
fio_q_°©us
 
	$fio_sgio_doio
(
thªad_d©a
 *
td
,

537 
io_u
 *io_u, 
do_sync
)

539 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

540 
fio_q_°©us
 
ªt
;

542 i‡(
f
->
fûëy≥
 =
FIO_TYPE_BLOCK
) {

543 
ªt
 = 
	`fio_sgio_io˘l_doio
(
td
, 
f
, 
io_u
);

544 i‡(
io_u
->
îr‹
)

545 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, 
__func__
);

547 
ªt
 = 
	`fio_sgio_rw_doio
(
td
, 
f
, 
io_u
, 
do_sync
);

548 i‡(
io_u
->
îr‹
 && 
do_sync
)

549 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, 
__func__
);

552  
ªt
;

553 
	}
}

555 
	$fio_sgio_rw_lba
(
sg_io_hdr
 *
hdr
, 
lba
,

556 
ƒ_blocks
, 
boﬁ
 
ovîride16
)

558 i‡(
lba
 < 
MAX_10B_LBA
 && !
ovîride16
) {

559 
	`sgio_£t_be32
((
uöt32_t
Ë
lba
, &
hdr
->
cmdp
[2]);

560 
	`sgio_£t_be16
((
uöt16_t
Ë
ƒ_blocks
, &
hdr
->
cmdp
[7]);

562 
	`sgio_£t_be64
(
lba
, &
hdr
->
cmdp
[2]);

563 
	`sgio_£t_be32
((
uöt32_t
Ë
ƒ_blocks
, &
hdr
->
cmdp
[10]);

567 
	}
}

569 
	$fio_sgio_¥ï
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

571 
sg_io_hdr
 *
hdr
 = &
io_u
->hdr;

572 
sg_›ti⁄s
 *
o
 = 
td
->
eo
;

573 
sgio_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

574 
ƒ_blocks
, 
lba
;

575 
off£t
;

577 i‡(
io_u
->
x„r_buÊí
 & (
sd
->
bs
 - 1)) {

578 
	`log_îr
("read/writeÇot sectoráligned\n");

579  
EINVAL
;

582 
ƒ_blocks
 = 
io_u
->
x„r_buÊí
 / 
sd
->
bs
;

583 
lba
 = 
io_u
->
off£t
 / 
sd
->
bs
;

585 i‡(
io_u
->
ddú
 =
DDIR_READ
) {

586 
	`sgio_hdr_öô
(
sd
, 
hdr
, 
io_u
, 1);

588 
hdr
->
dx„r_dúe˘i⁄
 = 
SG_DXFER_FROM_DEV
;

589 i‡(
lba
 < 
MAX_10B_LBA
)

590 
hdr
->
cmdp
[0] = 0x28;

592 
hdr
->
cmdp
[0] = 0x88;

594 i‡(
o
->
hùri
)

595 
hdr
->
Êags
 |
SGV4_FLAG_HIPRI
;

596 i‡(
o
->
ªadfua
)

597 
hdr
->
cmdp
[1] |= 0x08;

599 
	`fio_sgio_rw_lba
(
hdr
, 
lba
, 
ƒ_blocks
, 
Ál£
);

601 } i‡(
io_u
->
ddú
 =
DDIR_WRITE
) {

602 
	`sgio_hdr_öô
(
sd
, 
hdr
, 
io_u
, 1);

604 
hdr
->
dx„r_dúe˘i⁄
 = 
SG_DXFER_TO_DEV
;

605 
o
->
wrôe_mode
) {

606 
FIO_SG_WRITE
:

607 i‡(
lba
 < 
MAX_10B_LBA
)

608 
hdr
->
cmdp
[0] = 0x2a;

610 
hdr
->
cmdp
[0] = 0x8a;

611 i‡(
o
->
hùri
)

612 
hdr
->
Êags
 |
SGV4_FLAG_HIPRI
;

613 i‡(
o
->
wrôefua
)

614 
hdr
->
cmdp
[1] |= 0x08;

616 
FIO_SG_WRITE_VERIFY
:

617 i‡(
lba
 < 
MAX_10B_LBA
)

618 
hdr
->
cmdp
[0] = 0x2e;

620 
hdr
->
cmdp
[0] = 0x8e;

623 
FIO_SG_WRITE_SAME
:

624 
hdr
->
dx„r_Àn
 = 
sd
->
bs
;

625 i‡(
lba
 < 
MAX_10B_LBA
)

626 
hdr
->
cmdp
[0] = 0x41;

628 
hdr
->
cmdp
[0] = 0x93;

630 
FIO_SG_WRITE_SAME_NDOB
:

631 
hdr
->
cmdp
[0] = 0x93;

632 
hdr
->
cmdp
[1] |= 0x1;

633 
hdr
->
dx„r_Àn
 = 0;

635 
FIO_SG_WRITE_STREAM
:

636 
hdr
->
cmdp
[0] = 0x9a;

637 i‡(
o
->
wrôefua
)

638 
hdr
->
cmdp
[1] |= 0x08;

639 
	`sgio_£t_be64
(
lba
, &
hdr
->
cmdp
[2]);

640 
	`sgio_£t_be16
((
uöt16_t
Ë
io_u
->
fûe
->
ígöe_pos
, &
hdr
->
cmdp
[10]);

641 
	`sgio_£t_be16
((
uöt16_t
Ë
ƒ_blocks
, &
hdr
->
cmdp
[12]);

643 
FIO_SG_VERIFY_BYTCHK_00
:

644 i‡(
lba
 < 
MAX_10B_LBA
)

645 
hdr
->
cmdp
[0] = 0x2f;

647 
hdr
->
cmdp
[0] = 0x8f;

648 
hdr
->
dx„r_Àn
 = 0;

650 
FIO_SG_VERIFY_BYTCHK_01
:

651 i‡(
lba
 < 
MAX_10B_LBA
)

652 
hdr
->
cmdp
[0] = 0x2f;

654 
hdr
->
cmdp
[0] = 0x8f;

655 
hdr
->
cmdp
[1] |= 0x02;

657 
FIO_SG_VERIFY_BYTCHK_11
:

658 i‡(
lba
 < 
MAX_10B_LBA
)

659 
hdr
->
cmdp
[0] = 0x2f;

661 
hdr
->
cmdp
[0] = 0x8f;

662 
hdr
->
cmdp
[1] |= 0x06;

663 
hdr
->
dx„r_Àn
 = 
sd
->
bs
;

667 i‡(
o
->
wrôe_mode
 !
FIO_SG_WRITE_STREAM
)

668 
	`fio_sgio_rw_lba
(
hdr
, 
lba
, 
ƒ_blocks
,

669 
o
->
wrôe_mode
 =
FIO_SG_WRITE_SAME_NDOB
);

671 } i‡(
io_u
->
ddú
 =
DDIR_TRIM
) {

672 
sgio_åim
 *
°
;

674 i‡(
sd
->
cuºít_queue
 == -1) {

675 
	`sgio_hdr_öô
(
sd
, 
hdr
, 
io_u
, 0);

677 
hdr
->
cmd_Àn
 = 10;

678 
hdr
->
dx„r_dúe˘i⁄
 = 
SG_DXFER_TO_DEV
;

679 
hdr
->
cmdp
[0] = 0x42;

680 
sd
->
cuºít_queue
 = 
io_u
->
ödex
;

681 
°
 = 
sd
->
åim_queues
[sd->
cuºít_queue
];

682 
hdr
->
dx„Ω
 = 
°
->
unm≠_∑øm
;

683 #ifde‡
FIO_SGIO_DEBUG


684 
	`as£π
(
sd
->
åim_queues
[
io_u
->
ödex
]->
unm≠_ønge_cou¡
 == 0);

685 
	`d¥öt
(
FD_IO
, "sg: cª©ögÇew queuêba£d o¿io_u %d\n", 
io_u
->
ödex
);

689 
°
 = 
sd
->
åim_queues
[sd->
cuºít_queue
];

691 
	`d¥öt
(
FD_IO
, "sg:áddög io_u %dÅÿåim queuê%d\n", 
io_u
->
ödex
, 
sd
->
cuºít_queue
);

692 
°
->
åim_io_us
[°->
unm≠_ønge_cou¡
] = 
io_u
;

693 #ifde‡
FIO_SGIO_DEBUG


694 
sd
->
åim_queue_m≠
[
io_u
->
ödex
] = sd->
cuºít_queue
;

697 
off£t
 = 8 + 16 * 
°
->
unm≠_ønge_cou¡
;

698 
	`sgio_£t_be64
(
lba
, &
°
->
unm≠_∑øm
[
off£t
]);

699 
	`sgio_£t_be32
((
uöt32_t
Ë
ƒ_blocks
, &
°
->
unm≠_∑øm
[
off£t
 + 8]);

701 
°
->
unm≠_ønge_cou¡
++;

703 } i‡(
	`ddú_sync
(
io_u
->
ddú
)) {

704 
	`sgio_hdr_öô
(
sd
, 
hdr
, 
io_u
, 0);

705 
hdr
->
dx„r_dúe˘i⁄
 = 
SG_DXFER_NONE
;

706 i‡(
lba
 < 
MAX_10B_LBA
)

707 
hdr
->
cmdp
[0] = 0x35;

709 
hdr
->
cmdp
[0] = 0x91;

711 
	`as£π
(0);

714 
	}
}

716 
	$fio_sgio_unm≠_£tup
(
sg_io_hdr
 *
hdr
, 
sgio_åim
 *
°
)

718 
uöt16_t
 
˙t
 = 
°
->
unm≠_ønge_cou¡
 * 16;

720 
hdr
->
dx„r_Àn
 = 
˙t
 + 8;

721 
	`sgio_£t_be16
(
˙t
 + 8, &
hdr
->
cmdp
[7]);

722 
	`sgio_£t_be16
(
˙t
 + 6, 
°
->
unm≠_∑øm
);

723 
	`sgio_£t_be16
(
˙t
, &
°
->
unm≠_∑øm
[2]);

726 
	}
}

728 
fio_q_°©us
 
	$fio_sgio_queue
(
thªad_d©a
 *
td
,

729 
io_u
 *io_u)

731 
sg_io_hdr
 *
hdr
 = &
io_u
->hdr;

732 
sgio_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

733 
ªt
, 
do_sync
 = 0;

735 
	`fio_ro_check
(
td
, 
io_u
);

737 i‡(
	`sgio_unbuf„ªd
(
td
Ë|| 
	`ddú_sync
(
io_u
->
ddú
))

738 
do_sync
 = 1;

740 i‡(
io_u
->
ddú
 =
DDIR_TRIM
) {

741 i‡(
do_sync
 || 
io_u
->
fûe
->
fûëy≥
 =
FIO_TYPE_BLOCK
) {

742 
sgio_åim
 *
°
 = 
sd
->
åim_queues
[sd->
cuºít_queue
];

746 #ifde‡
FIO_SGIO_DEBUG


747 
	`as£π
(
°
->
unm≠_ønge_cou¡
 == 1);

748 
	`as£π
(
io_u
 =
°
->
åim_io_us
[0]);

750 
hdr
 = &
io_u
->hdr;

752 
	`fio_sgio_unm≠_£tup
(
hdr
, 
°
);

754 
°
->
unm≠_ønge_cou¡
 = 0;

755 
sd
->
cuºít_queue
 = -1;

758  
FIO_Q_QUEUED
;

761 
ªt
 = 
	`fio_sgio_doio
(
td
, 
io_u
, 
do_sync
);

763 i‡(
ªt
 < 0)

764 
io_u
->
îr‹
 = 
î∫o
;

765 i‡(
hdr
->
°©us
) {

766 
io_u
->
ªsid
 = 
hdr
->resid;

767 
io_u
->
îr‹
 = 
EIO
;

768 } i‡(
td
->
io_›s
->
commô
 !
NULL
) {

769 i‡(
do_sync
 && !
	`ddú_sync
(
io_u
->
ddú
)) {

770 
	`io_u_m¨k_submô
(
td
, 1);

771 
	`io_u_m¨k_com∂ëe
(
td
, 1);

772 } i‡(
io_u
->
ddú
 =
DDIR_READ
 || io_u->ddú =
DDIR_WRITE
) {

773 
	`io_u_m¨k_submô
(
td
, 1);

774 
	`io_u_queued
(
td
, 
io_u
);

778 i‡(
io_u
->
îr‹
) {

779 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "xfer");

780  
FIO_Q_COMPLETED
;

783  
ªt
;

784 
	}
}

786 
	$fio_sgio_commô
(
thªad_d©a
 *
td
)

788 
sgio_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

789 
sgio_åim
 *
°
;

790 
io_u
 *io_u;

791 
sg_io_hdr
 *
hdr
;

792 
time•ec
 
now
;

793 
i
;

794 
ªt
;

796 i‡(
sd
->
cuºít_queue
 == -1)

799 
°
 = 
sd
->
åim_queues
[sd->
cuºít_queue
];

800 
io_u
 = 
°
->
åim_io_us
[0];

801 
hdr
 = &
io_u
->hdr;

803 
	`fio_sgio_unm≠_£tup
(
hdr
, 
°
);

805 
sd
->
cuºít_queue
 = -1;

807 
ªt
 = 
	`fio_sgio_rw_doio
(
td
, 
io_u
->
fûe
, io_u, 0);

809 i‡(
ªt
 < 0 || 
hdr
->
°©us
) {

810 
îr‹
;

812 i‡(
ªt
 < 0)

813 
îr‹
 = 
î∫o
;

815 
îr‹
 = 
EIO
;

816 
ªt
 = -
EIO
;

819 
i
 = 0; i < 
°
->
unm≠_ønge_cou¡
; i++) {

820 
°
->
åim_io_us
[
i
]->
îr‹
 =Érror;

821 
	`˛ór_io_u
(
td
, 
°
->
åim_io_us
[
i
]);

822 i‡(
hdr
->
°©us
)

823 
°
->
åim_io_us
[
i
]->
ªsid
 = 
hdr
->resid;

826 
	`td_vîr‹
(
td
, 
îr‹
, "xfer");

827  
ªt
;

830 i‡(
	`fio_fûl_issue_time
(
td
)) {

831 
	`fio_gëtime
(&
now
, 
NULL
);

832 
i
 = 0; i < 
°
->
unm≠_ønge_cou¡
; i++) {

833 
	`mem˝y
(&
°
->
åim_io_us
[
i
]->
issue_time
, &
now
, (now));

834 
	`io_u_queued
(
td
, 
io_u
);

837 
	`io_u_m¨k_submô
(
td
, 
°
->
unm≠_ønge_cou¡
);

840 
	}
}

842 
io_u
 *
	$fio_sgio_evít
(
thªad_d©a
 *
td
, 
evít
)

844 
sgio_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

846  
sd
->
evíts
[
evít
];

847 
	}
}

849 
	$fio_sgio_ªad_ˇ∑côy
(
thªad_d©a
 *
td
, *
bs
,

850 *
max_lba
)

856 
sg_io_hdr
 
hdr
;

857 
hlba
;

858 
blksz
 = 0;

859 
cmd
[16];

860 
sb
[64];

861 
buf
[32];

862 
ªt
;

863 
fd
 = -1;

865 
fio_fûe
 *
f
 = 
td
->
fûes
[0];

868 
fd
 = 
	`›í
(
f
->
fûe_«me
, 
O_RDONLY
);

869 i‡(
fd
 < 0)

870  -
î∫o
;

872 
	`mem£t
(&
hdr
, 0, (hdr));

873 
	`mem£t
(
cmd
, 0, (cmd));

874 
	`mem£t
(
sb
, 0, (sb));

875 
	`mem£t
(
buf
, 0, (buf));

878 
hdr
.
öãrÁ˚_id
 = 'S';

879 
hdr
.
cmdp
 = 
cmd
;

880 
hdr
.
cmd_Àn
 = 10;

881 
hdr
.
sbp
 = 
sb
;

882 
hdr
.
mx_sb_Àn
 = (
sb
);

883 
hdr
.
timeout
 = 
SCSI_TIMEOUT_MS
;

884 
hdr
.
cmdp
[0] = 0x25;

885 
hdr
.
dx„r_dúe˘i⁄
 = 
SG_DXFER_FROM_DEV
;

886 
hdr
.
dx„Ω
 = 
buf
;

887 
hdr
.
dx„r_Àn
 = (
buf
);

889 
ªt
 = 
	`io˘l
(
fd
, 
SG_IO
, &
hdr
);

890 i‡(
ªt
 < 0) {

891 
	`˛o£
(
fd
);

892  
ªt
;

895 i‡(
hdr
.
öfo
 & 
SG_INFO_CHECK
) {

897 
hlba
 = 
MAX_10B_LBA
;

899 
blksz
 = 
	`sgio_gë_be32
(&
buf
[4]);

900 
hlba
 = 
	`sgio_gë_be32
(
buf
);

907 i‡(
hlba
 =
MAX_10B_LBA
) {

908 
hdr
.
cmd_Àn
 = 16;

909 
hdr
.
cmdp
[0] = 0x9e;

910 
hdr
.
cmdp
[1] = 0x10;

911 
	`sgio_£t_be32
((
buf
), &
hdr
.
cmdp
[10]);

913 
hdr
.
dx„r_dúe˘i⁄
 = 
SG_DXFER_FROM_DEV
;

914 
hdr
.
dx„Ω
 = 
buf
;

915 
hdr
.
dx„r_Àn
 = (
buf
);

917 
ªt
 = 
	`io˘l
(
fd
, 
SG_IO
, &
hdr
);

918 i‡(
ªt
 < 0) {

919 
	`˛o£
(
fd
);

920  
ªt
;

924 i‡(
hdr
.
öfo
 & 
SG_INFO_CHECK
)

925 
	`td_vîr‹
(
td
, 
EIO
, "fio_sgio_read_capacity");

927 
blksz
 = 
	`sgio_gë_be32
(&
buf
[8]);

928 
hlba
 = 
	`sgio_gë_be64
(
buf
);

931 i‡(
blksz
) {

932 *
bs
 = 
blksz
;

933 *
max_lba
 = 
hlba
;

934 
ªt
 = 0;

936 
ªt
 = 
EIO
;

939 
	`˛o£
(
fd
);

940  
ªt
;

941 
	}
}

943 
	$fio_sgio_˛ónup
(
thªad_d©a
 *
td
)

945 
sgio_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

946 
i
;

948 i‡(
sd
) {

949 
	`‰ì
(
sd
->
evíts
);

950 
	`‰ì
(
sd
->
cmds
);

951 
	`‰ì
(
sd
->
fd_Êags
);

952 
	`‰ì
(
sd
->
pfds
);

953 
	`‰ì
(
sd
->
sgbuf
);

954 #ifde‡
FIO_SGIO_DEBUG


955 
	`‰ì
(
sd
->
åim_queue_m≠
);

958 
i
 = 0; i < 
td
->
o
.
iodïth
; i++) {

959 
	`‰ì
(
sd
->
åim_queues
[
i
]->
unm≠_∑øm
);

960 
	`‰ì
(
sd
->
åim_queues
[
i
]->
åim_io_us
);

961 
	`‰ì
(
sd
->
åim_queues
[
i
]);

964 
	`‰ì
(
sd
->
åim_queues
);

965 
	`‰ì
(
sd
);

967 
	}
}

969 
	$fio_sgio_öô
(
thªad_d©a
 *
td
)

971 
sgio_d©a
 *
sd
;

972 
sgio_åim
 *
°
;

973 
sg_io_hdr
 *
h3p
;

974 
i
;

976 
sd
 = 
	`ˇŒoc
(1, (*sd));

977 
sd
->
cmds
 = 
	`ˇŒoc
(
td
->
o
.
iodïth
, (
sgio_cmd
));

978 
sd
->
sgbuf
 = 
	`ˇŒoc
(
td
->
o
.
iodïth
, (
sg_io_hdr
));

979 
sd
->
evíts
 = 
	`ˇŒoc
(
td
->
o
.
iodïth
, (
io_u
 *));

980 
sd
->
pfds
 = 
	`ˇŒoc
(
td
->
o
.
ƒ_fûes
, (
pﬁlfd
));

981 
sd
->
fd_Êags
 = 
	`ˇŒoc
(
td
->
o
.
ƒ_fûes
, ());

982 
sd
->
ty≥_checked
 = 0;

984 
sd
->
åim_queues
 = 
	`ˇŒoc
(
td
->
o
.
iodïth
, (
sgio_åim
 *));

985 
sd
->
cuºít_queue
 = -1;

986 #ifde‡
FIO_SGIO_DEBUG


987 
sd
->
åim_queue_m≠
 = 
	`ˇŒoc
(
td
->
o
.
iodïth
, ());

989 
i
 = 0, 
h3p
 = 
sd
->
sgbuf
; i < 
td
->
o
.
iodïth
; i++, ++h3p) {

990 
sd
->
åim_queues
[
i
] = 
	`ˇŒoc
(1, (
sgio_åim
));

991 
°
 = 
sd
->
åim_queues
[
i
];

992 
°
->
unm≠_∑øm
 = 
	`ˇŒoc
(
td
->
o
.
iodïth
 + 1, ([16]));

993 
°
->
unm≠_ønge_cou¡
 = 0;

994 
°
->
åim_io_us
 = 
	`ˇŒoc
(
td
->
o
.
iodïth
, (
io_u
 *));

995 
h3p
->
öãrÁ˚_id
 = 'S';

998 
td
->
io_›s_d©a
 = 
sd
;

1003 
td
->
o
.
ovîride_sync
 = 1;

1005 
	}
}

1007 
	$fio_sgio_ty≥_check
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

1009 
sgio_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

1010 
bs
 = 0;

1011 
max_lba
 = 0;

1013 i‡(
f
->
fûëy≥
 =
FIO_TYPE_BLOCK
) {

1014 i‡(
	`io˘l
(
f
->
fd
, 
BLKSSZGET
, &
bs
) < 0) {

1015 
	`td_vîr‹
(
td
, 
î∫o
, "ioctl");

1018 } i‡(
f
->
fûëy≥
 =
FIO_TYPE_CHAR
) {

1019 
vîsi⁄
, 
ªt
;

1021 i‡(
	`io˘l
(
f
->
fd
, 
SG_GET_VERSION_NUM
, &
vîsi⁄
) < 0) {

1022 
	`td_vîr‹
(
td
, 
î∫o
, "ioctl");

1026 
ªt
 = 
	`fio_sgio_ªad_ˇ∑côy
(
td
, &
bs
, &
max_lba
);

1027 i‡(
ªt
) {

1028 
	`td_vîr‹
(
td
,Åd->
îr‹
, "fio_sgio_read_capacity");

1029 
	`log_îr
("ioengine sg unableÅoÑead capacity successfully\n");

1033 
	`td_vîr‹
(
td
, 
EINVAL
, "wrong fileÅype");

1034 
	`log_îr
("ioengine sg only works on block or character devices\n");

1038 
sd
->
bs
 = bs;

1040 i‡(
max_lba
 >
MAX_10B_LBA
) {

1041 
	`d¥öt
(
FD_IO
, "sgio_type_check: using 16 byteÑead/write "

1043 
MAX_10B_LBA
, 
max_lba
);

1046 i‡(
f
->
fûëy≥
 =
FIO_TYPE_BLOCK
) {

1047 
td
->
io_›s
->
gëevíts
 = 
NULL
;

1048 
td
->
io_›s
->
evít
 = 
NULL
;

1049 
td
->
io_›s
->
commô
 = 
NULL
;

1056 
sd
->
ty≥_checked
 = 1;

1059 
	}
}

1061 
	$fio_sgio_°ªam_c⁄åﬁ
(
fio_fûe
 *
f
, 
boﬁ
 
›í_°ªam
, 
uöt16_t
 *
°ªam_id
)

1063 
sg_io_hdr
 
hdr
;

1064 
cmd
[16];

1065 
sb
[64];

1066 
buf
[8];

1067 
ªt
;

1069 
	`mem£t
(&
hdr
, 0, (hdr));

1070 
	`mem£t
(
cmd
, 0, (cmd));

1071 
	`mem£t
(
sb
, 0, (sb));

1072 
	`mem£t
(
buf
, 0, (buf));

1074 
hdr
.
öãrÁ˚_id
 = 'S';

1075 
hdr
.
cmdp
 = 
cmd
;

1076 
hdr
.
cmd_Àn
 = 16;

1077 
hdr
.
sbp
 = 
sb
;

1078 
hdr
.
mx_sb_Àn
 = (
sb
);

1079 
hdr
.
timeout
 = 
SCSI_TIMEOUT_MS
;

1080 
hdr
.
cmdp
[0] = 0x9e;

1081 
hdr
.
dx„r_dúe˘i⁄
 = 
SG_DXFER_FROM_DEV
;

1082 
hdr
.
dx„Ω
 = 
buf
;

1083 
hdr
.
dx„r_Àn
 = (
buf
);

1084 
	`sgio_£t_be32
((
buf
), &
hdr
.
cmdp
[10]);

1086 i‡(
›í_°ªam
)

1087 
hdr
.
cmdp
[1] = 0x34;

1089 
hdr
.
cmdp
[1] = 0x54;

1090 
	`sgio_£t_be16
(*
°ªam_id
, &
hdr
.
cmdp
[4]);

1093 
ªt
 = 
	`io˘l
(
f
->
fd
, 
SG_IO
, &
hdr
);

1095 i‡(
ªt
 < 0)

1096  
ªt
;

1098 i‡(
hdr
.
öfo
 & 
SG_INFO_CHECK
)

1101 i‡(
›í_°ªam
) {

1102 *
°ªam_id
 = 
	`sgio_gë_be16
(&
buf
[4]);

1103 
	`d¥öt
(
FD_FILE
, "sgio_°ªam_c⁄åﬁ: o≥√d såóm %u\n", (Ë*
°ªam_id
);

1104 
	`as£π
(*
°ªam_id
 != 0);

1106 
	`d¥öt
(
FD_FILE
, "sgio_°ªam_c⁄åﬁ: clo£d såóm %u\n", (Ë*
°ªam_id
);

1109 
	}
}

1111 
	$fio_sgio_›í
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

1113 
sgio_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

1114 
sg_›ti⁄s
 *
o
 = 
td
->
eo
;

1115 
ªt
;

1117 
ªt
 = 
	`gíîic_›í_fûe
(
td
, 
f
);

1118 i‡(
ªt
)

1119  
ªt
;

1121 i‡(
sd
 && !sd->
ty≥_checked
 && 
	`fio_sgio_ty≥_check
(
td
, 
f
)) {

1122 
ªt
 = 
	`gíîic_˛o£_fûe
(
td
, 
f
);

1123  
ªt
;

1126 i‡(
o
->
wrôe_mode
 =
FIO_SG_WRITE_STREAM
) {

1127 i‡(
o
->
°ªam_id
)

1128 
f
->
ígöe_pos
 = 
o
->
°ªam_id
;

1130 
ªt
 = 
	`fio_sgio_°ªam_c⁄åﬁ
(
f
, 
åue
, (
uöt16_t
 *Ë&f->
ígöe_pos
);

1131 i‡(
ªt
)

1132  
ªt
;

1137 
	}
}

1139 
	$fio_sgio_˛o£
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

1141 
sg_›ti⁄s
 *
o
 = 
td
->
eo
;

1142 
ªt
;

1144 i‡(!
o
->
°ªam_id
 && o->
wrôe_mode
 =
FIO_SG_WRITE_STREAM
) {

1145 
ªt
 = 
	`fio_sgio_°ªam_c⁄åﬁ
(
f
, 
Ál£
, (
uöt16_t
 *Ë&f->
ígöe_pos
);

1146 i‡(
ªt
)

1147  
ªt
;

1150  
	`gíîic_˛o£_fûe
(
td
, 
f
);

1151 
	}
}

1157 *
	$fio_sgio_îrdëaûs
(
io_u
 *io_u)

1159 
sg_io_hdr
 *
hdr
 = &
io_u
->hdr;

1160 
	#MAXERRDETAIL
 1024

	)

1161 
	#MAXMSGCHUNK
 128

	)

1162 *
msg
, 
msgchunk
[
MAXMSGCHUNK
];

1163 
i
;

1165 
msg
 = 
	`ˇŒoc
(1, 
MAXERRDETAIL
);

1166 
	`°r˝y
(
msg
, "");

1172 i‡(
hdr
->
öfo
 & 
SG_INFO_CHECK
) {

1173 i‡(
hdr
->
ho°_°©us
) {

1174 
	`¢¥ötf
(
msgchunk
, 
MAXMSGCHUNK
, "SG Ho° Sètus: 0x%02x; ", 
hdr
->
ho°_°©us
);

1175 
	`°æˇt
(
msg
, 
msgchunk
, 
MAXERRDETAIL
);

1176 
hdr
->
ho°_°©us
) {

1178 
	`°æˇt
(
msg
, "SG_ERR_DID_NO_CONNECT", 
MAXERRDETAIL
);

1181 
	`°æˇt
(
msg
, "SG_ERR_DID_BUS_BUSY", 
MAXERRDETAIL
);

1184 
	`°æˇt
(
msg
, "SG_ERR_DID_TIME_OUT", 
MAXERRDETAIL
);

1187 
	`°æˇt
(
msg
, "SG_ERR_DID_BAD_TARGET", 
MAXERRDETAIL
);

1190 
	`°æˇt
(
msg
, "SG_ERR_DID_ABORT", 
MAXERRDETAIL
);

1193 
	`°æˇt
(
msg
, "SG_ERR_DID_PARITY", 
MAXERRDETAIL
);

1196 
	`°æˇt
(
msg
, "SG_ERR_DID_ERROR (öã∫ÆÉº‹)", 
MAXERRDETAIL
);

1199 
	`°æˇt
(
msg
, "SG_ERR_DID_RESET", 
MAXERRDETAIL
);

1202 
	`°æˇt
(
msg
, "SG_ERR_DID_BAD_INTR (u√x≥˘ed)", 
MAXERRDETAIL
);

1205 
	`°æˇt
(
msg
, "SG_ERR_DID_PASSTHROUGH", 
MAXERRDETAIL
);

1208 
	`°æˇt
(
msg
, "SG_ERR_DID_SOFT_ERROR (drivîÑëry?)", 
MAXERRDETAIL
);

1211 
	`°æˇt
(
msg
, "SG_ERR_DID_IMM_RETRY", 
MAXERRDETAIL
);

1214 
	`°æˇt
(
msg
, "SG_ERR_DID_REQUEUE", 
MAXERRDETAIL
);

1217 
	`°æˇt
(
msg
, "SG_ERR_DID_TRANSPORT_DISRUPTED", 
MAXERRDETAIL
);

1220 
	`°æˇt
(
msg
, "SG_ERR_DID_TRANSPORT_FAILFAST", 
MAXERRDETAIL
);

1223 
	`°æˇt
(
msg
, "SG_ERR_DID_TARGET_FAILURE", 
MAXERRDETAIL
);

1226 
	`°æˇt
(
msg
, "SG_ERR_DID_NEXUS_FAILURE", 
MAXERRDETAIL
);

1229 
	`°æˇt
(
msg
, "SG_ERR_DID_ALLOC_FAILURE", 
MAXERRDETAIL
);

1232 
	`°æˇt
(
msg
, "SG_ERR_DID_MEDIUM_ERROR", 
MAXERRDETAIL
);

1235 
	`°æˇt
(
msg
, "Unknown", 
MAXERRDETAIL
);

1238 
	`°æˇt
(
msg
, ". ", 
MAXERRDETAIL
);

1240 i‡(
hdr
->
drivî_°©us
) {

1241 
	`¢¥ötf
(
msgchunk
, 
MAXMSGCHUNK
, "SG Drivî Sètus: 0x%02x; ", 
hdr
->
drivî_°©us
);

1242 
	`°æˇt
(
msg
, 
msgchunk
, 
MAXERRDETAIL
);

1243 
hdr
->
drivî_°©us
 & 0x0F) {

1245 
	`°æˇt
(
msg
, "SG_ERR_DRIVER_BUSY", 
MAXERRDETAIL
);

1248 
	`°æˇt
(
msg
, "SG_ERR_DRIVER_SOFT", 
MAXERRDETAIL
);

1251 
	`°æˇt
(
msg
, "SG_ERR_DRIVER_MEDIA", 
MAXERRDETAIL
);

1254 
	`°æˇt
(
msg
, "SG_ERR_DRIVER_ERROR", 
MAXERRDETAIL
);

1257 
	`°æˇt
(
msg
, "SG_ERR_DRIVER_INVALID", 
MAXERRDETAIL
);

1260 
	`°æˇt
(
msg
, "SG_ERR_DRIVER_TIMEOUT", 
MAXERRDETAIL
);

1263 
	`°æˇt
(
msg
, "SG_ERR_DRIVER_HARD", 
MAXERRDETAIL
);

1266 
	`°æˇt
(
msg
, "SG_ERR_DRIVER_SENSE", 
MAXERRDETAIL
);

1269 
	`°æˇt
(
msg
, "Unknown", 
MAXERRDETAIL
);

1272 
	`°æˇt
(
msg
, "; ", 
MAXERRDETAIL
);

1273 
hdr
->
drivî_°©us
 & 0xF0) {

1275 
	`°æˇt
(
msg
, "SG_ERR_SUGGEST_RETRY", 
MAXERRDETAIL
);

1278 
	`°æˇt
(
msg
, "SG_ERR_SUGGEST_ABORT", 
MAXERRDETAIL
);

1281 
	`°æˇt
(
msg
, "SG_ERR_SUGGEST_REMAP", 
MAXERRDETAIL
);

1284 
	`°æˇt
(
msg
, "SG_ERR_SUGGEST_DIE", 
MAXERRDETAIL
);

1287 
	`°æˇt
(
msg
, "SG_ERR_SUGGEST_SENSE", 
MAXERRDETAIL
);

1290 
	`°æˇt
(
msg
, ". ", 
MAXERRDETAIL
);

1292 i‡(
hdr
->
°©us
) {

1293 
	`¢¥ötf
(
msgchunk
, 
MAXMSGCHUNK
, "SG SCSI Sètus: 0x%02x; ", 
hdr
->
°©us
);

1294 
	`°æˇt
(
msg
, 
msgchunk
, 
MAXERRDETAIL
);

1296 
hdr
->
°©us
) {

1298 
	`°æˇt
(
msg
, "CHECK_CONDITION", 
MAXERRDETAIL
);

1301 
	`°æˇt
(
msg
, "CONDITION_MET", 
MAXERRDETAIL
);

1304 
	`°æˇt
(
msg
, "BUSY", 
MAXERRDETAIL
);

1307 
	`°æˇt
(
msg
, "INTERMEDIATE", 
MAXERRDETAIL
);

1310 
	`°æˇt
(
msg
, "INTERMEDIATE_CONDITION_MET", 
MAXERRDETAIL
);

1313 
	`°æˇt
(
msg
, "RESERVATION_CONFLICT", 
MAXERRDETAIL
);

1316 
	`°æˇt
(
msg
, "COMMAND_TERMINATED", 
MAXERRDETAIL
);

1319 
	`°æˇt
(
msg
, "TASK_SET_FULL", 
MAXERRDETAIL
);

1322 
	`°æˇt
(
msg
, "ACA_ACTIVE", 
MAXERRDETAIL
);

1325 
	`°æˇt
(
msg
, "TASK_ABORTED", 
MAXERRDETAIL
);

1328 
	`°æˇt
(
msg
, "Unknown", 
MAXERRDETAIL
);

1331 
	`°æˇt
(
msg
, ". ", 
MAXERRDETAIL
);

1333 i‡(
hdr
->
sb_Àn_wr
) {

1334 c⁄° 
uöt8_t
 *c⁄° 
sbp
 = 
hdr
->sbp;

1336 
	`¢¥ötf
(
msgchunk
, 
MAXMSGCHUNK
, "Sí£ D©®(%d byãs):", 
hdr
->
sb_Àn_wr
);

1337 
	`°æˇt
(
msg
, 
msgchunk
, 
MAXERRDETAIL
);

1338 
i
 = 0; i < 
hdr
->
sb_Àn_wr
; i++) {

1339 
	`¢¥ötf
(
msgchunk
, 
MAXMSGCHUNK
, " %02x", 
sbp
[
i
]);

1340 
	`°æˇt
(
msg
, 
msgchunk
, 
MAXERRDETAIL
);

1342 
	`°æˇt
(
msg
, ". ", 
MAXERRDETAIL
);

1344 i‡(
hdr
->
ªsid
 != 0) {

1345 
	`¢¥ötf
(
msgchunk
, 
MAXMSGCHUNK
, "SG Drivî: %d byã†ouào‡%dÇŸÅøns„ºed. ", 
hdr
->
ªsid
, hdr->
dx„r_Àn
);

1346 
	`°æˇt
(
msg
, 
msgchunk
, 
MAXERRDETAIL
);

1348 i‡(
hdr
->
cmdp
) {

1349 
	`°æˇt
(
msg
, "cdb:", 
MAXERRDETAIL
);

1350 
i
 = 0; i < 
hdr
->
cmd_Àn
; i++) {

1351 
	`¢¥ötf
(
msgchunk
, 
MAXMSGCHUNK
, " %02x", 
hdr
->
cmdp
[
i
]);

1352 
	`°æˇt
(
msg
, 
msgchunk
, 
MAXERRDETAIL
);

1354 
	`°æˇt
(
msg
, ". ", 
MAXERRDETAIL
);

1355 i‡(
io_u
->
ddú
 =
DDIR_TRIM
) {

1356 *
∑øm_li°
 = 
hdr
->
dx„Ω
;

1357 
	`°æˇt
(
msg
, "dx„Ω:", 
MAXERRDETAIL
);

1358 
i
 = 0; i < 
hdr
->
dx„r_Àn
; i++) {

1359 
	`¢¥ötf
(
msgchunk
, 
MAXMSGCHUNK
, " %02x", 
∑øm_li°
[
i
]);

1360 
	`°æˇt
(
msg
, 
msgchunk
, 
MAXERRDETAIL
);

1362 
	`°æˇt
(
msg
, ". ", 
MAXERRDETAIL
);

1367 i‡(!(
hdr
->
öfo
 & 
SG_INFO_CHECK
Ë&& !
	`°æí
(
msg
))

1368 
	`¢¥ötf
(
msg
, 
MAXERRDETAIL
, "%s",

1371  
msg
;

1372 
	}
}

1377 
	$fio_sgio_gë_fûe_size
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

1391 
bs
 = 0;

1392 
max_lba
 = 0;

1393 
ªt
;

1395 i‡(
	`fio_fûe_size_known
(
f
))

1398 i‡(
f
->
fûëy≥
 !
FIO_TYPE_BLOCK
 && f->fûëy≥ !
FIO_TYPE_CHAR
) {

1399 
	`td_vîr‹
(
td
, 
EINVAL
, "wrong fileÅype");

1400 
	`log_îr
("ioengine sg only works on block or character devices\n");

1404 
ªt
 = 
	`fio_sgio_ªad_ˇ∑côy
(
td
, &
bs
, &
max_lba
);

1405 i‡(
ªt
 ) {

1406 
	`td_vîr‹
(
td
,Åd->
îr‹
, "fio_sgio_read_capacity");

1407 
	`log_îr
("ioengine sg unableÅo successfullyÉxecuteÑead capacityÅo get block sizeánd maximumÜba\n");

1411 
f
->
ªÆ_fûe_size
 = (
max_lba
 + 1Ë* 
bs
;

1412 
	`fio_fûe_£t_size_known
(
f
);

1414 
	}
}

1417 
i€ngöe_›s
 
	gi€ngöe
 = {

1418 .
«me
 = "sg",

1419 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

1420 .
	göô
 = 
fio_sgio_öô
,

1421 .
	g¥ï
 = 
fio_sgio_¥ï
,

1422 .
	gqueue
 = 
fio_sgio_queue
,

1423 .
	gcommô
 = 
fio_sgio_commô
,

1424 .
	ggëevíts
 = 
fio_sgio_gëevíts
,

1425 .
	gîrdëaûs
 = 
fio_sgio_îrdëaûs
,

1426 .
	gevít
 = 
fio_sgio_evít
,

1427 .
	g˛ónup
 = 
fio_sgio_˛ónup
,

1428 .
	g›í_fûe
 = 
fio_sgio_›í
,

1429 .
	g˛o£_fûe
 = 
fio_sgio_˛o£
,

1430 .
	ggë_fûe_size
 = 
fio_sgio_gë_fûe_size
,

1431 .
	gÊags
 = 
FIO_SYNCIO
 | 
FIO_RAWIO
,

1432 .
	g›ti⁄s
 = 
›ti⁄s
,

1433 .
	g›ti⁄_°ru˘_size
 = (
sg_›ti⁄s
)

1443 
	$fio_sgio_öô
(
thªad_d©a
 
fio_unu£d
 *
td
)

1445 
	`log_îr
("fio: ioengine sgÇotávailable\n");

1447 
	}
}

1449 
i€ngöe_›s
 
	gi€ngöe
 = {

1450 .
«me
 = "sg",

1451 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

1452 .
	göô
 = 
fio_sgio_öô
,

1457 
fio_öô
 
	$fio_sgio_ªgi°î
()

1459 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

1460 
	}
}

1462 
fio_exô
 
	$fio_sgio_uƒegi°î
()

1464 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

1465 
	}
}

	@engines/skeleton_external.c

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<uni°d.h
>

13 
	~<î∫o.h
>

14 
	~<as£π.h
>

16 
	~"../fio.h
"

17 
	~"../›tgroup.h
"

31 
	sfio_skñë⁄_›ti⁄s
 {

32 *
	m∑d
;

33 
	mdummy
;

36 
fio_›ti⁄
 
	g›ti⁄s
[] = {

38 .
«me
 = "dummy",

39 .
	g ame
 = "ldummy",

40 .
	gty≥
 = 
FIO_OPT_STR_SET
,

41 .
	goff1
 = 
off£tof
(
fio_skñë⁄_›ti⁄s
, 
dummy
),

42 .
	ghñp
 = "Set dummy",

43 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

44 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

47 .
	g«me
 = 
NULL
,

57 
io_u
 *
	$fio_skñë⁄_evít
(
thªad_d©a
 *
td
, 
evít
)

59  
NULL
;

60 
	}
}

68 
	$fio_skñë⁄_gëevíts
(
thªad_d©a
 *
td
, 
mö
,

69 
max
, c⁄° 
time•ec
 *
t
)

72 
	}
}

78 
	$fio_skñë⁄_ˇn˚l
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

81 
	}
}

93 
fio_q_°©us
 
	$fio_skñë⁄_queue
(
thªad_d©a
 *
td
,

94 
io_u
 *io_u)

99 
	`fio_ro_check
(
td
, 
io_u
);

107  
FIO_Q_COMPLETED
;

108 
	}
}

115 
	$fio_skñë⁄_¥ï
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

118 
	}
}

125 
	$fio_skñë⁄_öô
(
thªad_d©a
 *
td
)

128 
	}
}

135 
	$fio_skñë⁄_˛ónup
(
thªad_d©a
 *
td
)

137 
	}
}

143 
	$fio_skñë⁄_›í
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

145  
	`gíîic_›í_fûe
(
td
, 
f
);

146 
	}
}

151 
	$fio_skñë⁄_˛o£
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

153  
	`gíîic_˛o£_fûe
(
td
, 
f
);

154 
	}
}

163 
	$fio_skñë⁄_gë_z⁄ed_modñ
(
thªad_d©a
 *
td
,

164 
fio_fûe
 *
f
, 
zbd_z⁄ed_modñ
 *
modñ
)

166 *
modñ
 = 
ZBD_NONE
;

168 
	}
}

177 
	$fio_skñë⁄_ªp‹t_z⁄es
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

178 
uöt64_t
 
off£t
, 
zbd_z⁄e
 *
z⁄es
,

179 
ƒ_z⁄es
)

182 
	}
}

189 
	$fio_skñë⁄_ª£t_wp
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

190 
uöt64_t
 
off£t
, uöt64_à
Àngth
)

193 
	}
}

200 
	$fio_skñë⁄_gë_max_›í_z⁄es
(
thªad_d©a
 *
td
,

201 
fio_fûe
 *
f
,

202 *
max_›í_z⁄es
)

205 
	}
}

211 
i€ngöe_›s
 
	gi€ngöe
 = {

212 .
«me
 = "engine_name",

213 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

214 .
	göô
 = 
fio_skñë⁄_öô
,

215 .
	g¥ï
 = 
fio_skñë⁄_¥ï
,

216 .
	gqueue
 = 
fio_skñë⁄_queue
,

217 .
	gˇn˚l
 = 
fio_skñë⁄_ˇn˚l
,

218 .
	ggëevíts
 = 
fio_skñë⁄_gëevíts
,

219 .
	gevít
 = 
fio_skñë⁄_evít
,

220 .
	g˛ónup
 = 
fio_skñë⁄_˛ónup
,

221 .
	g›í_fûe
 = 
fio_skñë⁄_›í
,

222 .
	g˛o£_fûe
 = 
fio_skñë⁄_˛o£
,

223 .
	ggë_z⁄ed_modñ
 = 
fio_skñë⁄_gë_z⁄ed_modñ
,

224 .
	gªp‹t_z⁄es
 = 
fio_skñë⁄_ªp‹t_z⁄es
,

225 .
	gª£t_wp
 = 
fio_skñë⁄_ª£t_wp
,

226 .
	ggë_max_›í_z⁄es
 = 
fio_skñë⁄_gë_max_›í_z⁄es
,

227 .
	g›ti⁄s
 = 
›ti⁄s
,

228 .
	g›ti⁄_°ru˘_size
 = (
fio_skñë⁄_›ti⁄s
),

	@engines/solarisaio.c

5 
	~<°dio.h
>

6 
	~<°dlib.h
>

7 
	~<uni°d.h
>

8 
	~<sig«l.h
>

9 
	~<î∫o.h
>

11 
	~"../fio.h
"

13 
	~<sys/asynch.h
>

15 
	ssﬁ¨ißio_d©a
 {

16 
io_u
 **
	maio_evíts
;

17 
	maio_≥ndög
;

18 
	mƒ
;

19 
	mmax_dïth
;

22 
	$fio_sﬁ¨ißio_ˇn˚l
(
thªad_d©a
 
fio_unu£d
 *
td
,

23 
io_u
 *io_u)

25  
	`aioˇn˚l
(&
io_u
->
ªsu…p
);

26 
	}
}

28 
	$fio_sﬁ¨ißio_¥ï
(
thªad_d©a
 
fio_unu£d
 *
td
,

29 
io_u
 *io_u)

31 
sﬁ¨ißio_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

33 
io_u
->
ªsu…p
.
aio_ªtu∫
 = 
AIO_INPROGRESS
;

34 
io_u
->
ígöe_d©a
 = 
sd
;

36 
	}
}

38 
	$waô_f‹_evít
(
timevÆ
 *
tv
)

40 
sﬁ¨ißio_d©a
 *
sd
;

41 
io_u
 *io_u;

42 
aio_ªsu…_t
 *
ªs
;

44 
ªs
 = 
	`aiowaô
(
tv
);

45 i‡(
ªs
 =(
aio_ªsu…_t
 *) -1) {

46 
îr
 = 
î∫o
;

48 i‡(
îr
 !
EINVAL
) {

49 
	`log_îr
("fio: sﬁ¨ißiÿgŸ %d i¿aiowaô\n", 
îr
);

50 
	`exô
(
îr
);

53 } i‡(!
ªs
)

56 
io_u
 = 
	`c⁄èöî_of
(
ªs
, io_u, 
ªsu…p
);

57 
sd
 = 
io_u
->
ígöe_d©a
;

59 i‡(
io_u
->
ªsu…p
.
aio_ªtu∫
 >= 0) {

60 
io_u
->
ªsid
 = io_u->
x„r_buÊí
 - io_u->
ªsu…p
.
aio_ªtu∫
;

61 
io_u
->
îr‹
 = 0;

63 
io_u
->
îr‹
 = io_u->
ªsu…p
.
aio_î∫o
;

69 
sd
->
aio_evíts
[sd->
aio_≥ndög
] = 
io_u
;

70 
	`wrôe_b¨rõr
();

71 
sd
->
aio_≥ndög
++;

72 
sd
->
ƒ
--;

73 
	}
}

75 
	$fio_sﬁ¨ißio_gëevíts
(
thªad_d©a
 *
td
, 
mö
,

76 
max
, c⁄° 
time•ec
 *
t
)

78 
sﬁ¨ißio_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

79 
timevÆ
 
tv
;

80 
ªt
;

82 i‡(!
mö
 || !
t
) {

83 
tv
.
tv_£c
 = 0;

84 
tv
.
tv_u£c
 = 0;

86 
tv
.
tv_£c
 = 
t
->tv_sec;

87 
tv
.
tv_u£c
 = 
t
->
tv_n£c
 / 1000;

90 
sd
->
aio_≥ndög
 < 
mö
)

91 
	`waô_f‹_evít
(&
tv
);

96 
ªt
 = 
sd
->
aio_≥ndög
;

97 
sd
->
aio_≥ndög
 -
ªt
;

98  
ªt
;

99 
	}
}

101 
io_u
 *
	$fio_sﬁ¨ißio_evít
(
thªad_d©a
 *
td
, 
evít
)

103 
sﬁ¨ißio_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

105  
sd
->
aio_evíts
[
evít
];

106 
	}
}

108 
fio_q_°©us
 
	$fio_sﬁ¨ißio_queue
(
thªad_d©a
 
fio_unu£d
 *
td
,

109 
io_u
 *io_u)

111 
sﬁ¨ißio_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

112 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

113 
off_t
 
off
;

114 
ªt
;

116 
	`fio_ro_check
(
td
, 
io_u
);

118 i‡(
io_u
->
ddú
 =
DDIR_SYNC
) {

119 i‡(
sd
->
ƒ
)

120  
FIO_Q_BUSY
;

121 i‡(
	`fsync
(
f
->
fd
) < 0)

122 
io_u
->
îr‹
 = 
î∫o
;

124  
FIO_Q_COMPLETED
;

127 i‡(
io_u
->
ddú
 =
DDIR_DATASYNC
) {

128 i‡(
sd
->
ƒ
)

129  
FIO_Q_BUSY
;

130 i‡(
	`fd©async
(
f
->
fd
) < 0)

131 
io_u
->
îr‹
 = 
î∫o
;

133  
FIO_Q_COMPLETED
;

136 i‡(
sd
->
ƒ
 =sd->
max_dïth
)

137  
FIO_Q_BUSY
;

139 
off
 = 
io_u
->
off£t
;

140 i‡(
io_u
->
ddú
 =
DDIR_READ
)

141 
ªt
 = 
	`ai‹ód
(
f
->
fd
, 
io_u
->
x„r_buf
, io_u->
x„r_buÊí
, 
off
,

142 
SEEK_SET
, &
io_u
->
ªsu…p
);

144 
ªt
 = 
	`aiowrôe
(
f
->
fd
, 
io_u
->
x„r_buf
, io_u->
x„r_buÊí
, 
off
,

145 
SEEK_SET
, &
io_u
->
ªsu…p
);

146 i‡(
ªt
) {

147 
io_u
->
îr‹
 = 
î∫o
;

148 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "xfer");

149  
FIO_Q_COMPLETED
;

152 
sd
->
ƒ
++;

153  
FIO_Q_QUEUED
;

154 
	}
}

156 
	$fio_sﬁ¨ißio_˛ónup
(
thªad_d©a
 *
td
)

158 
sﬁ¨ißio_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

160 i‡(
sd
) {

161 
	`‰ì
(
sd
->
aio_evíts
);

162 
	`‰ì
(
sd
);

164 
	}
}

169 #ifde‡
USE_SIGNAL_COMPLETIONS


170 
	$fio_sﬁ¨ißio_sigio
(
sig
)

172 
	`waô_f‹_evít
(
NULL
);

173 
	}
}

175 
	$fio_sﬁ¨ißio_öô_sigio
()

177 
siga˘i⁄
 
a˘
;

179 
	`mem£t
(&
a˘
, 0, (act));

180 
a˘
.
ß_h™dÀr
 = 
fio_sﬁ¨ißio_sigio
;

181 
a˘
.
ß_Êags
 = 
SA_RESTART
;

182 
	`siga˘i⁄
(
SIGIO
, &
a˘
, 
NULL
);

183 
	}
}

186 
	$fio_sﬁ¨ißio_öô
(
thªad_d©a
 *
td
)

188 
sﬁ¨ißio_d©a
 *
sd
 = 
	`mÆloc
((*sd));

189 
max_dïth
;

191 
max_dïth
 = 
td
->
o
.
iodïth
;

192 i‡(
max_dïth
 > 
MAXASYNCHIO
) {

193 
max_dïth
 = 
MAXASYNCHIO
;

194 
	`log_öfo
("fio:Üower depthÅo %d dueÅo OS constraints\n",

195 
max_dïth
);

198 
	`mem£t
(
sd
, 0, (*sd));

199 
sd
->
aio_evíts
 = 
	`mÆloc
(
max_dïth
 * (
io_u
 *));

200 
	`mem£t
(
sd
->
aio_evíts
, 0, 
max_dïth
 * (
io_u
 *));

201 
sd
->
max_dïth
 = max_depth;

203 #ifde‡
USE_SIGNAL_COMPLETIONS


204 
	`fio_sﬁ¨ißio_öô_sigio
();

207 
td
->
io_›s_d©a
 = 
sd
;

209 
	}
}

211 
i€ngöe_›s
 
	gi€ngöe
 = {

212 .
«me
 = "solarisaio",

213 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

214 .
	göô
 = 
fio_sﬁ¨ißio_öô
,

215 .
	g¥ï
 = 
fio_sﬁ¨ißio_¥ï
,

216 .
	gqueue
 = 
fio_sﬁ¨ißio_queue
,

217 .
	gˇn˚l
 = 
fio_sﬁ¨ißio_ˇn˚l
,

218 .
	ggëevíts
 = 
fio_sﬁ¨ißio_gëevíts
,

219 .
	gevít
 = 
fio_sﬁ¨ißio_evít
,

220 .
	g˛ónup
 = 
fio_sﬁ¨ißio_˛ónup
,

221 .
	g›í_fûe
 = 
gíîic_›í_fûe
,

222 .
	g˛o£_fûe
 = 
gíîic_˛o£_fûe
,

223 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

226 
fio_öô
 
	$fio_sﬁ¨ißio_ªgi°î
()

228 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

229 
	}
}

231 
fio_exô
 
	$fio_sﬁ¨ißio_uƒegi°î
()

233 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

234 
	}
}

	@engines/splice.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<uni°d.h
>

11 
	~<î∫o.h
>

12 
	~<pﬁl.h
>

13 
	~<sys/mm™.h
>

15 
	~"../fio.h
"

17 
	s•li˚io_d©a
 {

18 
	mpùe
[2];

19 
	mvm•li˚_to_u£r
;

20 
	mvm•li˚_to_u£r_m≠
;

28 
	$fio_•li˚_ªad_ﬁd
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

30 
•li˚io_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

31 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

32 
ªt
, 
ªt2
, 
buÊí
;

33 
off_t
 
off£t
;

34 *
p
;

36 
off£t
 = 
io_u
->offset;

37 
buÊí
 = 
io_u
->
x„r_buÊí
;

38 
p
 = 
io_u
->
x„r_buf
;

39 
buÊí
) {

40 
this_Àn
 = 
buÊí
;

42 i‡(
this_Àn
 > 
SPLICE_DEF_SIZE
)

43 
this_Àn
 = 
SPLICE_DEF_SIZE
;

45 
ªt
 = 
	`•li˚
(
f
->
fd
, &
off£t
, 
sd
->
pùe
[1], 
NULL
, 
this_Àn
, 
SPLICE_F_MORE
);

46 i‡(
ªt
 < 0) {

47 i‡(
î∫o
 =
ENODATA
 ||Éºnÿ=
EAGAIN
)

50  -
î∫o
;

53 
buÊí
 -
ªt
;

55 
ªt
) {

56 
ªt2
 = 
	`ªad
(
sd
->
pùe
[0], 
p
, 
ªt
);

57 i‡(
ªt2
 < 0)

58  -
î∫o
;

60 
ªt
 -
ªt2
;

61 
p
 +
ªt2
;

65  
io_u
->
x„r_buÊí
;

66 
	}
}

72 
	$fio_•li˚_ªad
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

74 
•li˚io_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

75 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

76 
iovec
 
iov
;

77 
ªt
 , 
buÊí
, 
mm≠_Àn
;

78 
off_t
 
off£t
;

79 *
m≠
;

80 *
p
;

82 
ªt
 = 0;

83 
off£t
 = 
io_u
->offset;

84 
mm≠_Àn
 = 
buÊí
 = 
io_u
->
x„r_buÊí
;

86 i‡(
sd
->
vm•li˚_to_u£r_m≠
) {

87 
m≠
 = 
	`mm≠
(
io_u
->
x„r_buf
, 
buÊí
, 
PROT_READ
, 
MAP_PRIVATE
|
OS_MAP_ANON
, 0, 0);

88 i‡(
m≠
 =
MAP_FAILED
) {

89 
	`td_vîr‹
(
td
, 
î∫o
, "mmap io_u");

93 
p
 = 
m≠
;

95 
m≠
 = 
NULL
;

96 
p
 = 
io_u
->
x„r_buf
;

99 
buÊí
) {

100 
this_Àn
 = 
buÊí
;

101 
Êags
 = 0;

103 i‡(
this_Àn
 > 
SPLICE_DEF_SIZE
) {

104 
this_Àn
 = 
SPLICE_DEF_SIZE
;

105 
Êags
 = 
SPLICE_F_MORE
;

108 
ªt
 = 
	`•li˚
(
f
->
fd
, &
off£t
, 
sd
->
pùe
[1], 
NULL
, 
this_Àn
,
Êags
);

109 i‡(
ªt
 < 0) {

110 i‡(
î∫o
 =
ENODATA
 ||Éºnÿ=
EAGAIN
)

113 
	`td_vîr‹
(
td
, 
î∫o
, "splice-from-fd");

117 
buÊí
 -
ªt
;

118 
iov
.
iov_ba£
 = 
p
;

119 
iov
.
iov_Àn
 = 
ªt
;

121 
iov
.
iov_Àn
) {

122 
ªt
 = 
	`vm•li˚
(
sd
->
pùe
[0], &
iov
, 1, 
SPLICE_F_MOVE
);

123 i‡(
ªt
 < 0) {

124 i‡(
î∫o
 =
EFAULT
 &&

125 
sd
->
vm•li˚_to_u£r_m≠
) {

126 
sd
->
vm•li˚_to_u£r_m≠
 = 0;

127 
	`munm≠
(
m≠
, 
mm≠_Àn
);

128 
m≠
 = 
NULL
;

129 
p
 = 
io_u
->
x„r_buf
;

130 
iov
.
iov_ba£
 = 
p
;

133 i‡(
î∫o
 =
EBADF
) {

134 
ªt
 = -
EBADF
;

137 
	`td_vîr‹
(
td
, 
î∫o
, "vmsplice");

139 } i‡(!
ªt
) {

140 
	`td_vîr‹
(
td
, 
ENODATA
, "vmsplice");

141 
ªt
 = -1;

145 
iov
.
iov_Àn
 -
ªt
;

146 
iov
.
iov_ba£
 +
ªt
;

147 
p
 +
ªt
;

149 i‡(
ªt
 < 0)

153 i‡(
sd
->
vm•li˚_to_u£r_m≠
 && 
	`munm≠
(
m≠
, 
mm≠_Àn
) < 0) {

154 
	`td_vîr‹
(
td
, 
î∫o
, "munnap io_u");

157 i‡(
ªt
 < 0)

158  
ªt
;

160  
io_u
->
x„r_buÊí
;

161 
	}
}

167 
	$fio_•li˚_wrôe
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

169 
•li˚io_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

170 
iovec
 
iov
 = {

171 .
iov_ba£
 = 
io_u
->
x„r_buf
,

172 .
iov_Àn
 = 
io_u
->
x„r_buÊí
,

174 
pﬁlfd
 
pfd
 = { .
fd
 = 
sd
->
pùe
[1], .
evíts
 = 
POLLOUT
, };

175 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

176 
off_t
 
off
 = 
io_u
->
off£t
;

177 
ªt
, 
ªt2
;

179 
iov
.
iov_Àn
) {

180 i‡(
	`pﬁl
(&
pfd
, 1, -1) < 0)

181  
î∫o
;

183 
ªt
 = 
	`vm•li˚
(
sd
->
pùe
[1], &
iov
, 1, 
SPLICE_F_NONBLOCK
);

184 i‡(
ªt
 < 0)

185  -
î∫o
;

187 
iov
.
iov_Àn
 -
ªt
;

188 
iov
.
iov_ba£
 +
ªt
;

190 
ªt
) {

191 
ªt2
 = 
	`•li˚
(
sd
->
pùe
[0], 
NULL
, 
f
->
fd
, &
off
, 
ªt
, 0);

192 i‡(
ªt2
 < 0)

193  -
î∫o
;

195 
ªt
 -
ªt2
;

199  
io_u
->
x„r_buÊí
;

200 
	}
}

202 
fio_q_°©us
 
	$fio_•li˚io_queue
(
thªad_d©a
 *
td
,

203 
io_u
 *io_u)

205 
•li˚io_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

206 
ªt
 = 0;

208 
	`fio_ro_check
(
td
, 
io_u
);

210 i‡(
io_u
->
ddú
 =
DDIR_READ
) {

211 i‡(
sd
->
vm•li˚_to_u£r
) {

212 
ªt
 = 
	`fio_•li˚_ªad
(
td
, 
io_u
);

218 i‡(
ªt
 =-
EBADF
)

219 
sd
->
vm•li˚_to_u£r
 = 0;

221 i‡(!
sd
->
vm•li˚_to_u£r
)

222 
ªt
 = 
	`fio_•li˚_ªad_ﬁd
(
td
, 
io_u
);

223 } i‡(
io_u
->
ddú
 =
DDIR_WRITE
)

224 
ªt
 = 
	`fio_•li˚_wrôe
(
td
, 
io_u
);

225 i‡(
io_u
->
ddú
 =
DDIR_TRIM
)

226 
ªt
 = 
	`do_io_u_åim
(
td
, 
io_u
);

228 
ªt
 = 
	`do_io_u_sync
(
td
, 
io_u
);

230 i‡(
ªt
 !(Ë
io_u
->
x„r_buÊí
) {

231 i‡(
ªt
 >= 0) {

232 
io_u
->
ªsid
 = io_u->
x„r_buÊí
 - 
ªt
;

233 
io_u
->
îr‹
 = 0;

234  
FIO_Q_COMPLETED
;

236 
io_u
->
îr‹
 = 
î∫o
;

239 i‡(
io_u
->
îr‹
) {

240 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "xfer");

241 i‡(
io_u
->
îr‹
 =
EINVAL
)

242 
	`log_îr
("fio:ÜooksÜike splice doesn't work onÅhis"

246  
FIO_Q_COMPLETED
;

247 
	}
}

249 
	$fio_•li˚io_˛ónup
(
thªad_d©a
 *
td
)

251 
•li˚io_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

253 i‡(
sd
) {

254 
	`˛o£
(
sd
->
pùe
[0]);

255 
	`˛o£
(
sd
->
pùe
[1]);

256 
	`‰ì
(
sd
);

258 
	}
}

260 
	$fio_•li˚io_öô
(
thªad_d©a
 *
td
)

262 
•li˚io_d©a
 *
sd
 = 
	`mÆloc
((*sd));

264 i‡(
	`pùe
(
sd
->
pùe
) < 0) {

265 
	`td_vîr‹
(
td
, 
î∫o
, "pipe");

266 
	`‰ì
(
sd
);

273 
sd
->
vm•li˚_to_u£r
 = 1;

279 
sd
->
vm•li˚_to_u£r_m≠
 = 1;

281 
td
->
io_›s_d©a
 = 
sd
;

283 
	}
}

285 
i€ngöe_›s
 
	gi€ngöe
 = {

286 .
«me
 = "splice",

287 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

288 .
	göô
 = 
fio_•li˚io_öô
,

289 .
	gqueue
 = 
fio_•li˚io_queue
,

290 .
	g˛ónup
 = 
fio_•li˚io_˛ónup
,

291 .
	g›í_fûe
 = 
gíîic_›í_fûe
,

292 .
	g˛o£_fûe
 = 
gíîic_˛o£_fûe
,

293 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

294 .
	gÊags
 = 
FIO_SYNCIO
 | 
FIO_PIPEIO
,

297 
fio_öô
 
	$fio_•li˚io_ªgi°î
()

299 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

300 
	}
}

302 
fio_exô
 
	$fio_•li˚io_uƒegi°î
()

304 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

305 
	}
}

	@engines/sync.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<uni°d.h
>

11 
	~<sys/uio.h
>

12 
	~<î∫o.h
>

14 
	~"../fio.h
"

15 
	~"../›tgroup.h
"

16 
	~"../lib/ønd.h
"

21 
	#LAST_POS
(
f
Ë((f)->
ígöe_pos
)

	)

23 
	ssyncio_d©a
 {

24 
iovec
 *
	miovecs
;

25 
io_u
 **
	mio_us
;

26 
	mqueued
;

27 
	mevíts
;

28 
	mqueued_byãs
;

30 
	mœ°_off£t
;

31 
fio_fûe
 *
	mœ°_fûe
;

32 
fio_ddú
 
	mœ°_ddú
;

34 
‰™d_°©e
 
	mønd_°©e
;

37 #ifde‡
FIO_HAVE_PWRITEV2


38 
	spsyncv2_›ti⁄s
 {

39 *
	m∑d
;

40 
	mhùri
;

41 
	mhùri_≥r˚¡age
;

42 
	munˇched
;

43 
	mnowaô
;

46 
fio_›ti⁄
 
	g›ti⁄s
[] = {

48 .
«me
 = "hipri",

49 .
	g ame
 = "RWF_HIPRI",

50 .
	gty≥
 = 
FIO_OPT_STR_SET
,

51 .
	goff1
 = 
off£tof
(
psyncv2_›ti⁄s
, 
hùri
),

52 .
	ghñp
 = "Set RWF_HIPRI forÖwritev2/preadv2",

53 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

54 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

57 .
	g«me
 = "hipri_percentage",

58 .
	g ame
 = "RWF_HIPRI_PERCENTAGE",

59 .
	gty≥
 = 
FIO_OPT_INT
,

60 .
	goff1
 = 
off£tof
(
psyncv2_›ti⁄s
, 
hùri_≥r˚¡age
),

61 .
	gmövÆ
 = 0,

62 .
	gmaxvÆ
 = 100,

63 .
	gdef
 = "100",

64 .
	ghñp
 = "Probabilistically set RWF_HIPRI forÖwritev2/preadv2",

65 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

66 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

69 .
	g«me
 = "uncached",

70 .
	g ame
 = "Uncached",

71 .
	gty≥
 = 
FIO_OPT_INT
,

72 .
	goff1
 = 
off£tof
(
psyncv2_›ti⁄s
, 
unˇched
),

73 .
	ghñp
 = "Use RWF_UNCACHED for bufferedÑead/writes",

74 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

75 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

78 .
	g«me
 = "nowait",

79 .
	g ame
 = "RWF_NOWAIT",

80 .
	gty≥
 = 
FIO_OPT_BOOL
,

81 .
	goff1
 = 
off£tof
(
psyncv2_›ti⁄s
, 
nowaô
),

82 .
	ghñp
 = "Set RWF_NOWAIT forÖwritev2/preadv2",

83 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

84 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

87 .
	g«me
 = 
NULL
,

92 
	$fio_syncio_¥ï
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

94 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

96 i‡(!
	`ddú_rw
(
io_u
->
ddú
))

99 i‡(
	`LAST_POS
(
f
Ë!-1ULL && LAST_POS(fË=
io_u
->
off£t
)

102 i‡(
	`l£ek
(
f
->
fd
, 
io_u
->
off£t
, 
SEEK_SET
) == -1) {

103 
	`td_vîr‹
(
td
, 
î∫o
, "lseek");

108 
	}
}

110 
	$fio_io_íd
(
thªad_d©a
 *
td
, 
io_u
 *io_u, 
ªt
)

112 i‡(
io_u
->
fûe
 && 
ªt
 >0 && 
	`ddú_rw
(io_u->
ddú
))

113 
	`LAST_POS
(
io_u
->
fûe
Ëio_u->
off£t
 + 
ªt
;

115 i‡(
ªt
 !(Ë
io_u
->
x„r_buÊí
) {

116 i‡(
ªt
 >= 0) {

117 
io_u
->
ªsid
 = io_u->
x„r_buÊí
 - 
ªt
;

118 
io_u
->
îr‹
 = 0;

119  
FIO_Q_COMPLETED
;

121 
io_u
->
îr‹
 = 
î∫o
;

124 i‡(
io_u
->
îr‹
) {

125 
	`io_u_log_îr‹
(
td
, 
io_u
);

126 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "xfer");

129  
FIO_Q_COMPLETED
;

130 
	}
}

132 #ifde‡
CONFIG_PWRITEV


133 
fio_q_°©us
 
	$fio_pvsyncio_queue
(
thªad_d©a
 *
td
,

134 
io_u
 *io_u)

136 
syncio_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

137 
iovec
 *
iov
 = &
sd
->
iovecs
[0];

138 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

139 
ªt
;

141 
	`fio_ro_check
(
td
, 
io_u
);

143 
iov
->
iov_ba£
 = 
io_u
->
x„r_buf
;

144 
iov
->
iov_Àn
 = 
io_u
->
x„r_buÊí
;

146 i‡(
io_u
->
ddú
 =
DDIR_READ
)

147 
ªt
 = 
	`¥ódv
(
f
->
fd
, 
iov
, 1, 
io_u
->
off£t
);

148 i‡(
io_u
->
ddú
 =
DDIR_WRITE
)

149 
ªt
 = 
	`pwrôev
(
f
->
fd
, 
iov
, 1, 
io_u
->
off£t
);

150 i‡(
io_u
->
ddú
 =
DDIR_TRIM
) {

151 
	`do_io_u_åim
(
td
, 
io_u
);

152  
FIO_Q_COMPLETED
;

154 
ªt
 = 
	`do_io_u_sync
(
td
, 
io_u
);

156  
	`fio_io_íd
(
td
, 
io_u
, 
ªt
);

157 
	}
}

160 #ifde‡
FIO_HAVE_PWRITEV2


161 
fio_q_°©us
 
	$fio_pvsyncio2_queue
(
thªad_d©a
 *
td
,

162 
io_u
 *io_u)

164 
syncio_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

165 
psyncv2_›ti⁄s
 *
o
 = 
td
->
eo
;

166 
iovec
 *
iov
 = &
sd
->
iovecs
[0];

167 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

168 
ªt
, 
Êags
 = 0;

170 
	`fio_ro_check
(
td
, 
io_u
);

172 i‡(
o
->
hùri
 &&

173 (
	`ønd_bëwìn
(&
sd
->
ønd_°©e
, 1, 100Ë<
o
->
hùri_≥r˚¡age
))

174 
Êags
 |
RWF_HIPRI
;

175 i‡(!
td
->
o
.
odúe˘
 && o->
unˇched
)

176 
Êags
 |
RWF_UNCACHED
;

177 i‡(
o
->
nowaô
)

178 
Êags
 |
RWF_NOWAIT
;

180 
iov
->
iov_ba£
 = 
io_u
->
x„r_buf
;

181 
iov
->
iov_Àn
 = 
io_u
->
x„r_buÊí
;

183 i‡(
io_u
->
ddú
 =
DDIR_READ
)

184 
ªt
 = 
	`¥ódv2
(
f
->
fd
, 
iov
, 1, 
io_u
->
off£t
, 
Êags
);

185 i‡(
io_u
->
ddú
 =
DDIR_WRITE
)

186 
ªt
 = 
	`pwrôev2
(
f
->
fd
, 
iov
, 1, 
io_u
->
off£t
, 
Êags
);

187 i‡(
io_u
->
ddú
 =
DDIR_TRIM
) {

188 
	`do_io_u_åim
(
td
, 
io_u
);

189  
FIO_Q_COMPLETED
;

191 
ªt
 = 
	`do_io_u_sync
(
td
, 
io_u
);

193  
	`fio_io_íd
(
td
, 
io_u
, 
ªt
);

194 
	}
}

197 
fio_q_°©us
 
	$fio_psyncio_queue
(
thªad_d©a
 *
td
,

198 
io_u
 *io_u)

200 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

201 
ªt
;

203 
	`fio_ro_check
(
td
, 
io_u
);

205 i‡(
io_u
->
ddú
 =
DDIR_READ
)

206 
ªt
 = 
	`¥ód
(
f
->
fd
, 
io_u
->
x„r_buf
, io_u->
x„r_buÊí
, io_u->
off£t
);

207 i‡(
io_u
->
ddú
 =
DDIR_WRITE
)

208 
ªt
 = 
	`pwrôe
(
f
->
fd
, 
io_u
->
x„r_buf
, io_u->
x„r_buÊí
, io_u->
off£t
);

209 i‡(
io_u
->
ddú
 =
DDIR_TRIM
) {

210 
	`do_io_u_åim
(
td
, 
io_u
);

211  
FIO_Q_COMPLETED
;

213 
ªt
 = 
	`do_io_u_sync
(
td
, 
io_u
);

215  
	`fio_io_íd
(
td
, 
io_u
, 
ªt
);

216 
	}
}

218 
fio_q_°©us
 
	$fio_syncio_queue
(
thªad_d©a
 *
td
,

219 
io_u
 *io_u)

221 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

222 
ªt
;

224 
	`fio_ro_check
(
td
, 
io_u
);

226 i‡(
io_u
->
ddú
 =
DDIR_READ
)

227 
ªt
 = 
	`ªad
(
f
->
fd
, 
io_u
->
x„r_buf
, io_u->
x„r_buÊí
);

228 i‡(
io_u
->
ddú
 =
DDIR_WRITE
)

229 
ªt
 = 
	`wrôe
(
f
->
fd
, 
io_u
->
x„r_buf
, io_u->
x„r_buÊí
);

230 i‡(
io_u
->
ddú
 =
DDIR_TRIM
) {

231 
	`do_io_u_åim
(
td
, 
io_u
);

232  
FIO_Q_COMPLETED
;

234 
ªt
 = 
	`do_io_u_sync
(
td
, 
io_u
);

236  
	`fio_io_íd
(
td
, 
io_u
, 
ªt
);

237 
	}
}

239 
	$fio_vsyncio_gëevíts
(
thªad_d©a
 *
td
, 
mö
,

240 
max
,

241 c⁄° 
time•ec
 
fio_unu£d
 *
t
)

243 
syncio_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

244 
ªt
;

246 i‡(
mö
) {

247 
ªt
 = 
sd
->
evíts
;

248 
sd
->
evíts
 = 0;

250 
ªt
 = 0;

252 
	`d¥öt
(
FD_IO
, "vsyncio_gëevíts: mö=%d,max=%d: %d\n", 
mö
, 
max
, 
ªt
);

253  
ªt
;

254 
	}
}

256 
io_u
 *
	$fio_vsyncio_evít
(
thªad_d©a
 *
td
, 
evít
)

258 
syncio_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

260  
sd
->
io_us
[
evít
];

261 
	}
}

263 
	$fio_vsyncio_≠≥nd
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

265 
syncio_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

267 i‡(
	`ddú_sync
(
io_u
->
ddú
))

270 i‡(
io_u
->
off£t
 =
sd
->
œ°_off£t
 && io_u->
fûe
 =sd->
œ°_fûe
 &&

271 
io_u
->
ddú
 =
sd
->
œ°_ddú
)

275 
	}
}

277 
	$fio_vsyncio_£t_iov
(
syncio_d©a
 *
sd
, 
io_u
 *io_u,

278 
idx
)

280 
sd
->
io_us
[
idx
] = 
io_u
;

281 
sd
->
iovecs
[
idx
].
iov_ba£
 = 
io_u
->
x„r_buf
;

282 
sd
->
iovecs
[
idx
].
iov_Àn
 = 
io_u
->
x„r_buÊí
;

283 
sd
->
œ°_off£t
 = 
io_u
->
off£t
 + io_u->
x„r_buÊí
;

284 
sd
->
œ°_fûe
 = 
io_u
->
fûe
;

285 
sd
->
œ°_ddú
 = 
io_u
->
ddú
;

286 
sd
->
queued_byãs
 +
io_u
->
x„r_buÊí
;

287 
sd
->
queued
++;

288 
	}
}

290 
fio_q_°©us
 
	$fio_vsyncio_queue
(
thªad_d©a
 *
td
,

291 
io_u
 *io_u)

293 
syncio_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

295 
	`fio_ro_check
(
td
, 
io_u
);

297 i‡(!
	`fio_vsyncio_≠≥nd
(
td
, 
io_u
)) {

298 
	`d¥öt
(
FD_IO
, "vsyncio_queue:Çÿ≠≥nd (%d)\n", 
sd
->
queued
);

303 i‡(
sd
->
queued
)

304  
FIO_Q_BUSY
;

305 i‡(
	`ddú_sync
(
io_u
->
ddú
)) {

306 
ªt
 = 
	`do_io_u_sync
(
td
, 
io_u
);

308  
	`fio_io_íd
(
td
, 
io_u
, 
ªt
);

311 
sd
->
queued
 = 0;

312 
sd
->
queued_byãs
 = 0;

313 
	`fio_vsyncio_£t_iov
(
sd
, 
io_u
, 0);

315 i‡(
sd
->
queued
 =
td
->
o
.
iodïth
) {

316 
	`d¥öt
(
FD_IO
, "vsyncio_queue: max dïth %d\n", 
sd
->
queued
);

317  
FIO_Q_BUSY
;

320 
	`d¥öt
(
FD_IO
, "vsyncio_queue:áppend\n");

321 
	`fio_vsyncio_£t_iov
(
sd
, 
io_u
, sd->
queued
);

324 
	`d¥öt
(
FD_IO
, "vsyncio_queue: dïthÇow %d\n", 
sd
->
queued
);

325  
FIO_Q_QUEUED
;

326 
	}
}

331 
	$fio_vsyncio_íd
(
thªad_d©a
 *
td
, 
ssize_t
 
byãs
)

333 
syncio_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

334 
io_u
 *io_u;

335 
i
;

336 
îr
;

341 i‡(
byãs
 =
sd
->
queued_byãs
)

344 
îr
 = 
î∫o
;

345 
i
 = 0; i < 
sd
->
queued
; i++) {

346 
io_u
 = 
sd
->
io_us
[
i
];

348 i‡(
byãs
 == -1) {

349 
io_u
->
îr‹
 = 
îr
;

351 
this_io
;

353 
this_io
 = 
byãs
;

354 i‡(
this_io
 > 
io_u
->
x„r_buÊí
)

355 
this_io
 = 
io_u
->
x„r_buÊí
;

357 
io_u
->
ªsid
 = io_u->
x„r_buÊí
 - 
this_io
;

358 
io_u
->
îr‹
 = 0;

359 
byãs
 -
this_io
;

363 i‡(
byãs
 == -1) {

364 
	`td_vîr‹
(
td
, 
îr
, "xfer vsync");

365  -
îr
;

369 
	}
}

371 
	$fio_vsyncio_commô
(
thªad_d©a
 *
td
)

373 
syncio_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

374 
fio_fûe
 *
f
;

375 
ssize_t
 
ªt
;

377 i‡(!
sd
->
queued
)

380 
	`io_u_m¨k_submô
(
td
, 
sd
->
queued
);

381 
f
 = 
sd
->
œ°_fûe
;

383 i‡(
	`l£ek
(
f
->
fd
, 
sd
->
io_us
[0]->
off£t
, 
SEEK_SET
) == -1) {

384 
îr
 = -
î∫o
;

386 
	`td_vîr‹
(
td
, 
î∫o
, "lseek");

387  
îr
;

390 i‡(
sd
->
œ°_ddú
 =
DDIR_READ
)

391 
ªt
 = 
	`ªadv
(
f
->
fd
, 
sd
->
iovecs
, sd->
queued
);

393 
ªt
 = 
	`wrôev
(
f
->
fd
, 
sd
->
iovecs
, sd->
queued
);

395 
	`d¥öt
(
FD_IO
, "vsyncio_commô: %d\n", (Ë
ªt
);

396 
sd
->
evíts
 = sd->
queued
;

397 
sd
->
queued
 = 0;

398  
	`fio_vsyncio_íd
(
td
, 
ªt
);

399 
	}
}

401 
	$fio_vsyncio_öô
(
thªad_d©a
 *
td
)

403 
syncio_d©a
 *
sd
;

405 
sd
 = 
	`mÆloc
((*sd));

406 
	`mem£t
(
sd
, 0, (*sd));

407 
sd
->
œ°_off£t
 = -1ULL;

408 
sd
->
iovecs
 = 
	`mÆloc
(
td
->
o
.
iodïth
 * (
iovec
));

409 
sd
->
io_us
 = 
	`mÆloc
(
td
->
o
.
iodïth
 * (
io_u
 *));

410 
	`öô_ønd
(&
sd
->
ønd_°©e
, 0);

412 
td
->
io_›s_d©a
 = 
sd
;

414 
	}
}

416 
	$fio_vsyncio_˛ónup
(
thªad_d©a
 *
td
)

418 
syncio_d©a
 *
sd
 = 
td
->
io_›s_d©a
;

420 i‡(
sd
) {

421 
	`‰ì
(
sd
->
iovecs
);

422 
	`‰ì
(
sd
->
io_us
);

423 
	`‰ì
(
sd
);

425 
	}
}

427 
i€ngöe_›s
 
	gi€ngöe_rw
 = {

428 .
«me
 = "sync",

429 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

430 .
	g¥ï
 = 
fio_syncio_¥ï
,

431 .
	gqueue
 = 
fio_syncio_queue
,

432 .
	g›í_fûe
 = 
gíîic_›í_fûe
,

433 .
	g˛o£_fûe
 = 
gíîic_˛o£_fûe
,

434 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

435 .
	gÊags
 = 
FIO_SYNCIO
,

438 
i€ngöe_›s
 
	gi€ngöe_¥w
 = {

439 .
«me
 = "psync",

440 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

441 .
	gqueue
 = 
fio_psyncio_queue
,

442 .
	g›í_fûe
 = 
gíîic_›í_fûe
,

443 .
	g˛o£_fûe
 = 
gíîic_˛o£_fûe
,

444 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

445 .
	gÊags
 = 
FIO_SYNCIO
,

448 
i€ngöe_›s
 
	gi€ngöe_vrw
 = {

449 .
«me
 = "vsync",

450 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

451 .
	göô
 = 
fio_vsyncio_öô
,

452 .
	g˛ónup
 = 
fio_vsyncio_˛ónup
,

453 .
	gqueue
 = 
fio_vsyncio_queue
,

454 .
	gcommô
 = 
fio_vsyncio_commô
,

455 .
	gevít
 = 
fio_vsyncio_evít
,

456 .
	ggëevíts
 = 
fio_vsyncio_gëevíts
,

457 .
	g›í_fûe
 = 
gíîic_›í_fûe
,

458 .
	g˛o£_fûe
 = 
gíîic_˛o£_fûe
,

459 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

460 .
	gÊags
 = 
FIO_SYNCIO
,

463 #ifde‡
CONFIG_PWRITEV


464 
i€ngöe_›s
 
	gi€ngöe_pvrw
 = {

465 .
«me
 = "pvsync",

466 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

467 .
	göô
 = 
fio_vsyncio_öô
,

468 .
	g˛ónup
 = 
fio_vsyncio_˛ónup
,

469 .
	gqueue
 = 
fio_pvsyncio_queue
,

470 .
	g›í_fûe
 = 
gíîic_›í_fûe
,

471 .
	g˛o£_fûe
 = 
gíîic_˛o£_fûe
,

472 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

473 .
	gÊags
 = 
FIO_SYNCIO
,

477 #ifde‡
FIO_HAVE_PWRITEV2


478 
i€ngöe_›s
 
	gi€ngöe_pvrw2
 = {

479 .
«me
 = "pvsync2",

480 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

481 .
	göô
 = 
fio_vsyncio_öô
,

482 .
	g˛ónup
 = 
fio_vsyncio_˛ónup
,

483 .
	gqueue
 = 
fio_pvsyncio2_queue
,

484 .
	g›í_fûe
 = 
gíîic_›í_fûe
,

485 .
	g˛o£_fûe
 = 
gíîic_˛o£_fûe
,

486 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

487 .
	gÊags
 = 
FIO_SYNCIO
,

488 .
	g›ti⁄s
 = 
›ti⁄s
,

489 .
	g›ti⁄_°ru˘_size
 = (
psyncv2_›ti⁄s
),

493 
fio_öô
 
	$fio_syncio_ªgi°î
()

495 
	`ªgi°î_i€ngöe
(&
i€ngöe_rw
);

496 
	`ªgi°î_i€ngöe
(&
i€ngöe_¥w
);

497 
	`ªgi°î_i€ngöe
(&
i€ngöe_vrw
);

498 #ifde‡
CONFIG_PWRITEV


499 
	`ªgi°î_i€ngöe
(&
i€ngöe_pvrw
);

501 #ifde‡
FIO_HAVE_PWRITEV2


502 
	`ªgi°î_i€ngöe
(&
i€ngöe_pvrw2
);

504 
	}
}

506 
fio_exô
 
	$fio_syncio_uƒegi°î
()

508 
	`uƒegi°î_i€ngöe
(&
i€ngöe_rw
);

509 
	`uƒegi°î_i€ngöe
(&
i€ngöe_¥w
);

510 
	`uƒegi°î_i€ngöe
(&
i€ngöe_vrw
);

511 #ifde‡
CONFIG_PWRITEV


512 
	`uƒegi°î_i€ngöe
(&
i€ngöe_pvrw
);

514 #ifde‡
FIO_HAVE_PWRITEV2


515 
	`uƒegi°î_i€ngöe
(&
i€ngöe_pvrw2
);

517 
	}
}

	@engines/windowsaio.c

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<uni°d.h
>

10 
	~<sig«l.h
>

11 
	~<î∫o.h
>

13 
	~"../fio.h
"

14 
	~"../›tgroup.h
"

16 
	$BOOL
 (
	tWINAPI
 *
	tCANCELIOEX
)(
	tHANDLE
 
	thFûe
, 
	tLPOVERLAPPED
 
	tÕOvîœµed
);

18 
	`gëî∫o_‰om_wö_îr‹
 (
DWORD
 
code
, 
de„ºno
);

20 
	sfio_ovîœµed
 {

21 
OVERLAPPED
 
o
;

22 
io_u
 *io_u;

23 
BOOL
 
io_com∂ëe
;

26 
	swödowßio_d©a
 {

27 
io_u
 **
aio_evíts
;

28 
HANDLE
 
io˝
;

29 
HANDLE
 
iŸhªad
;

30 
HANDLE
 
iocom∂ëe_evít
;

31 
BOOL
 
iŸhªad_ru¬ög
;

34 
	sthªad_˘x
 {

35 
HANDLE
 
io˝
;

36 
wödowßio_d©a
 *
wd
;

39 
	swödowßio_›ti⁄s
 {

40 
thªad_d©a
 *
td
;

41 
no_com∂ëi⁄_thªad
;

44 
fio_›ti⁄
 
›ti⁄s
[] = {

46 .
«me
 = "no_completion_thread",

47 .
 ame
 = "No completionÖollingÅhread",

48 .
ty≥
 = 
FIO_OPT_STR_SET
,

49 .
off1
 = 
	`off£tof
(
wödowßio_›ti⁄s
, 
no_com∂ëi⁄_thªad
),

50 .
hñp
 = "UseÅoávoid separate completionÖollingÅhread",

51 .
ˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

52 .
group
 = 
FIO_OPT_G_WINDOWSAIO
,

55 .
«me
 = 
NULL
,

57 
	}
};

59 
DWORD
 
WINAPI
 
IoCom∂ëi⁄Routöe
(
LPVOID
 
ÕP¨amëî
);

61 
	$fio_wödowßio_öô
(
thªad_d©a
 *
td
)

63 
wödowßio_d©a
 *
wd
;

64 
rc
 = 0;

66 
wd
 = 
	`ˇŒoc
(1, (
wödowßio_d©a
));

67 i‡(
wd
 =
NULL
) {

68 
	`log_îr
("windowsaio: failedÅoállocate memory forÉngine data\n");

69 
rc
 = 1;

72 i‡(!
rc
) {

73 
wd
->
aio_evíts
 = 
	`mÆloc
(
td
->
o
.
iodïth
 * (
io_u
*));

74 i‡(
wd
->
aio_evíts
 =
NULL
) {

75 
	`log_îr
("windowsaio: failedÅoállocate memory foráioÉventsÜist\n");

76 
rc
 = 1;

80 i‡(!
rc
) {

82 
wd
->
iocom∂ëe_evít
 = 
	`Cª©eEvít
(
NULL
, 
FALSE
, FALSE, NULL);

83 i‡(
wd
->
iocom∂ëe_evít
 =
NULL
) {

84 
	`log_îr
("windowsaio: failedÅo create io completeÉvent handle\n");

85 
rc
 = 1;

89 i‡(
rc
) {

90 i‡(
wd
 !
NULL
) {

91 i‡(
wd
->
aio_evíts
 !
NULL
)

92 
	`‰ì
(
wd
->
aio_evíts
);

94 
	`‰ì
(
wd
);

98 
td
->
io_›s_d©a
 = 
wd
;

100 i‡(!
rc
) {

101 
thªad_˘x
 *
˘x
;

102 
wödowßio_d©a
 *
wd
;

103 
HANDLE
 
hFûe
;

104 
wödowßio_›ti⁄s
 *
o
 = 
td
->
eo
;

106 
hFûe
 = 
	`Cª©eIoCom∂ëi⁄P‹t
(
INVALID_HANDLE_VALUE
, 
NULL
, 0, 0);

107 i‡(
hFûe
 =
INVALID_HANDLE_VALUE
) {

108 
	`log_îr
("windowsaio: failedÅo create io completionÖort\n");

109 
rc
 = 1;

112 
wd
 = 
td
->
io_›s_d©a
;

113 
wd
->
iŸhªad_ru¬ög
 = 
TRUE
;

114 
wd
->
io˝
 = 
hFûe
;

116 i‡(
o
->
no_com∂ëi⁄_thªad
 == 0) {

117 i‡(!
rc
)

118 
˘x
 = 
	`mÆloc
((
thªad_˘x
));

120 i‡(!
rc
 && 
˘x
 =
NULL
) {

121 
	`log_îr
("windowsaio: failedÅoállocate memory forÅhread context structure\n");

122 
	`Clo£H™dÀ
(
hFûe
);

123 
rc
 = 1;

126 i‡(!
rc
) {

127 
DWORD
 
thªadid
;

129 
˘x
->
io˝
 = 
hFûe
;

130 
˘x
->
wd
 = wd;

131 
wd
->
iŸhªad
 = 
	`Cª©eThªad
(
NULL
, 0, 
IoCom∂ëi⁄Routöe
, 
˘x
, 0, &
thªadid
);

132 i‡(!
wd
->
iŸhªad
)

133 
	`log_îr
("windowsaio: failedÅo create io completionÅhread\n");

134 i‡(
	`fio_›ti⁄_is_£t
(&
td
->
o
, 
˝umask
))

135 
	`fio_£èfföôy
(
thªadid
, 
td
->
o
.
˝umask
);

137 i‡(
rc
 || 
wd
->
iŸhªad
 =
NULL
)

138 
rc
 = 1;

142  
rc
;

143 
	}
}

145 
	$fio_wödowßio_˛ónup
(
thªad_d©a
 *
td
)

147 
wödowßio_d©a
 *
wd
;

149 
wd
 = 
td
->
io_›s_d©a
;

151 i‡(
wd
 !
NULL
) {

152 
wd
->
iŸhªad_ru¬ög
 = 
FALSE
;

153 
	`WaôF‹SögÀObje˘
(
wd
->
iŸhªad
, 
INFINITE
);

155 
	`Clo£H™dÀ
(
wd
->
iŸhªad
);

156 
	`Clo£H™dÀ
(
wd
->
iocom∂ëe_evít
);

158 
	`‰ì
(
wd
->
aio_evíts
);

159 
	`‰ì
(
wd
);

161 
td
->
io_›s_d©a
 = 
NULL
;

163 
	}
}

165 
	$wödowßio_övÆid©e_ˇche
(
fio_fûe
 *
f
)

167 
DWORD
 
îr‹
;

168 
DWORD
 
ish¨emode
 = (
FILE_SHARE_DELETE
 | 
FILE_SHARE_READ
 |

169 
FILE_SHARE_WRITE
);

170 
HANDLE
 
ihFûe
;

171 
rc
 = 0;

179 
	`d¥öt
(
FD_IO
, "windowaio:áttempt invalidate cache for %s\n",

180 
f
->
fûe_«me
);

181 
ihFûe
 = 
	`Cª©eFûe
(
f
->
fûe_«me
, 0, 
ish¨emode
, 
NULL
, 
OPEN_EXISTING
,

182 
FILE_FLAG_NO_BUFFERING
, 
NULL
);

184 i‡(
ihFûe
 !
INVALID_HANDLE_VALUE
) {

185 i‡(!
	`Clo£H™dÀ
(
ihFûe
)) {

186 
îr‹
 = 
	`GëLa°Eº‹
();

187 
	`log_öfo
("windowsaio: invalidation fd close %s failed:Érror %lu\n",

188 
f
->
fûe_«me
, 
îr‹
);

189 
rc
 = 1;

192 
îr‹
 = 
	`GëLa°Eº‹
();

193 i‡(
îr‹
 !
ERROR_FILE_NOT_FOUND
) {

194 
	`log_öfo
("windowsaio: cache invalidation of %s failed:Érror %lu\n",

195 
f
->
fûe_«me
, 
îr‹
);

196 
rc
 = 1;

200  
rc
;

201 
	}
}

203 
	$fio_wödowßio_›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

205 
rc
 = 0;

206 
DWORD
 
Êags
 = 
FILE_FLAG_POSIX_SEMANTICS
 | 
FILE_FLAG_OVERLAPPED
;

207 
DWORD
 
sh¨emode
 = 
FILE_SHARE_READ
 | 
FILE_SHARE_WRITE
;

208 
DWORD
 
›ímode
 = 
OPEN_ALWAYS
;

209 
DWORD
 
ac˚ss
;

211 
	`d¥öt
(
FD_FILE
, "fd o≥¿%s\n", 
f
->
fûe_«me
);

213 i‡(
f
->
fûëy≥
 =
FIO_TYPE_PIPE
) {

214 
	`log_îr
("windowsaio:ÖipesáreÇot supported\n");

218 i‡(!
	`°rcmp
(
f
->
fûe_«me
, "-")) {

219 
	`log_îr
("windowsaio: can'tÑead/writeÅo stdin/out\n");

223 i‡(
td
->
o
.
odúe˘
)

224 
Êags
 |
FILE_FLAG_NO_BUFFERING
;

225 i‡(
td
->
o
.
sync_io
)

226 
Êags
 |
FILE_FLAG_WRITE_THROUGH
;

232 
td
->
o
.
Ádvi£_höt
) {

233 
F_ADV_TYPE
:

234 i‡(
	`td_øndom
(
td
))

235 
Êags
 |
FILE_FLAG_RANDOM_ACCESS
;

237 
Êags
 |
FILE_FLAG_SEQUENTIAL_SCAN
;

239 
F_ADV_RANDOM
:

240 
Êags
 |
FILE_FLAG_RANDOM_ACCESS
;

242 
F_ADV_SEQUENTIAL
:

243 
Êags
 |
FILE_FLAG_SEQUENTIAL_SCAN
;

245 
F_ADV_NONE
:

248 
	`log_îr
("fio: unknow¿Ádvi£Åy≥ %d\n", 
td
->
o
.
Ádvi£_höt
);

251 i‡((!
	`td_wrôe
(
td
Ë&& !—d->
Êags
 & 
TD_F_SYNCS
)Ë|| 
ªad_⁄ly
)

252 
ac˚ss
 = 
GENERIC_READ
;

254 
ac˚ss
 = (
GENERIC_READ
 | 
GENERIC_WRITE
);

256 i‡(
td
->
o
.
¸óã_⁄_›í
)

257 
›ímode
 = 
OPEN_ALWAYS
;

259 
›ímode
 = 
OPEN_EXISTING
;

263 i‡(
td
->
o
.
övÆid©e_ˇche
 && !td->o.
odúe˘
)

264 
	`wödowßio_övÆid©e_ˇche
(
f
);

266 
f
->
hFûe
 = 
	`Cª©eFûe
(f->
fûe_«me
, 
ac˚ss
, 
sh¨emode
,

267 
NULL
, 
›ímode
, 
Êags
, NULL);

269 i‡(
f
->
hFûe
 =
INVALID_HANDLE_VALUE
) {

270 
	`log_îr
("wödowßio: faûedÅÿ›í fûê\"%s\"\n", 
f
->
fûe_«me
);

271 
rc
 = 1;

276 i‡(!
rc
 && 
td
->
io_›s_d©a
 !
NULL
) {

277 
wödowßio_d©a
 *
wd
;

279 
wd
 = 
td
->
io_›s_d©a
;

281 i‡(
	`Cª©eIoCom∂ëi⁄P‹t
(
f
->
hFûe
, 
wd
->
io˝
, 0, 0Ë=
NULL
) {

282 
	`log_îr
("windowsaio: failedÅo create io completionÖort\n");

283 
rc
 = 1;

287  
rc
;

288 
	}
}

290 
	$fio_wödowßio_˛o£_fûe
(
thªad_d©a
 
fio_unu£d
 *
td
, 
fio_fûe
 *
f
)

292 
rc
 = 0;

294 
	`d¥öt
(
FD_FILE
, "fd clo£ %s\n", 
f
->
fûe_«me
);

296 i‡(
f
->
hFûe
 !
INVALID_HANDLE_VALUE
) {

297 i‡(!
	`Clo£H™dÀ
(
f
->
hFûe
)) {

298 
	`log_öfo
("wödowßio: faûedÅÿ˛o£ fûêh™dÀ f‹ \"%s\"\n", 
f
->
fûe_«me
);

299 
rc
 = 1;

303 
f
->
hFûe
 = 
INVALID_HANDLE_VALUE
;

304  
rc
;

305 
	}
}

307 
BOOL
 
	$timeout_expúed
(
DWORD
 
°¨t_cou¡
, DWORD 
íd_cou¡
)

309 
BOOL
 
expúed
 = 
FALSE
;

310 
DWORD
 
cuºít_time
;

312 
cuºít_time
 = 
	`GëTickCou¡
();

314 i‡((
íd_cou¡
 > 
°¨t_cou¡
Ë&& 
cuºít_time
 >=Énd_count)

315 
expúed
 = 
TRUE
;

316 i‡(
cuºít_time
 < 
°¨t_cou¡
 && cuºít_timê> 
íd_cou¡
)

317 
expúed
 = 
TRUE
;

319  
expúed
;

320 
	}
}

322 
io_u
* 
	$fio_wödowßio_evít
(
thªad_d©a
 *
td
, 
evít
)

324 
wödowßio_d©a
 *
wd
 = 
td
->
io_›s_d©a
;

325  
wd
->
aio_evíts
[
evít
];

326 
	}
}

329 
	$fio_wödowßio_gëevíts_nŸhªad
(
thªad_d©a
 *
td
, 
mö
,

330 
max
, c⁄° 
time•ec
 *
t
)

332 
wödowßio_d©a
 *
wd
 = 
td
->
io_›s_d©a
;

333 
dequeued
 = 0;

334 
io_u
 *io_u;

335 
DWORD
 
°¨t_cou¡
 = 0;

336 
DWORD
 
íd_cou¡
 = 0;

337 
DWORD
 
mswaô
 = 250;

338 
fio_ovîœµed
 *
fov
;

340 i‡(
t
 !
NULL
) {

341 
mswaô
 = (
t
->
tv_£c
 * 1000Ë+ (t->
tv_n£c
 / 1000000);

342 
°¨t_cou¡
 = 
	`GëTickCou¡
();

343 
íd_cou¡
 = 
°¨t_cou¡
 + (
t
->
tv_£c
 * 1000Ë+ (t->
tv_n£c
 / 1000000);

347 
BOOL
 
ªt
;

348 
OVERLAPPED
 *
ovl
;

350 
ULONG
 
íåõs
 = 
	`mö
(16, 
max
-
dequeued
);

351 
OVERLAPPED_ENTRY
 
€
[16];

352 
ªt
 = 
	`GëQueuedCom∂ëi⁄SètusEx
(
wd
->
io˝
, 
€
, 16, &
íåõs
, 
mswaô
, 0);

353 i‡(
ªt
 && 
íåõs
) {

354 
íåy_num
;

356 
íåy_num
=0;É¡ry_num<
íåõs
;Éntry_num++) {

357 
ovl
 = 
€
[
íåy_num
].
ÕOvîœµed
;

358 
fov
 = 
	`CONTAINING_RECORD
(
ovl
, 
fio_ovîœµed
, 
o
);

359 
io_u
 = 
fov
->io_u;

361 i‡(
ovl
->
I¡î«l
 =
ERROR_SUCCESS
) {

362 
io_u
->
ªsid
 = io_u->
x„r_buÊí
 - 
ovl
->
I¡î«lHigh
;

363 
io_u
->
îr‹
 = 0;

365 
io_u
->
ªsid
 = io_u->
x„r_buÊí
;

366 
io_u
->
îr‹
 = 
	`wö_to_posix_îr‹
(
	`GëLa°Eº‹
());

369 
fov
->
io_com∂ëe
 = 
FALSE
;

370 
wd
->
aio_evíts
[
dequeued
] = 
io_u
;

371 
dequeued
++;

375 i‡(
dequeued
 >
mö
 ||

376 (
t
 !
NULL
 && 
	`timeout_expúed
(
°¨t_cou¡
, 
íd_cou¡
)))

379  
dequeued
;

380 
	}
}

383 
	$fio_wödowaio_gëevíts_thªad
(
thªad_d©a
 *
td
, 
mö
,

384 
max
, c⁄° 
time•ec
 *
t
)

386 
wödowßio_d©a
 *
wd
 = 
td
->
io_›s_d©a
;

387 
dequeued
 = 0;

388 
io_u
 *io_u;

389 
i
;

390 
fio_ovîœµed
 *
fov
;

391 
DWORD
 
°¨t_cou¡
 = 0;

392 
DWORD
 
íd_cou¡
 = 0;

393 
DWORD
 
°©us
;

394 
DWORD
 
mswaô
 = 250;

396 i‡(
t
 !
NULL
) {

397 
mswaô
 = (
t
->
tv_£c
 * 1000Ë+ (t->
tv_n£c
 / 1000000);

398 
°¨t_cou¡
 = 
	`GëTickCou¡
();

399 
íd_cou¡
 = 
°¨t_cou¡
 + (
t
->
tv_£c
 * 1000Ë+ (t->
tv_n£c
 / 1000000);

403 
	`io_u_qôî
(&
td
->
io_u_Æl
, 
io_u
, 
i
) {

404 i‡(!(
io_u
->
Êags
 & 
IO_U_F_FLIGHT
))

407 
fov
 = (
fio_ovîœµed
*)
io_u
->
ígöe_d©a
;

409 i‡(
fov
->
io_com∂ëe
) {

410 
fov
->
io_com∂ëe
 = 
FALSE
;

411 
wd
->
aio_evíts
[
dequeued
] = 
io_u
;

412 
dequeued
++;

415 i‡(
dequeued
 >
mö
)

418 i‡(
dequeued
 < 
mö
) {

419 
°©us
 = 
	`WaôF‹SögÀObje˘
(
wd
->
iocom∂ëe_evít
, 
mswaô
);

420 i‡(
°©us
 !
WAIT_OBJECT_0
 && 
dequeued
 >
mö
)

424 i‡(
dequeued
 >
mö
 ||

425 (
t
 !
NULL
 && 
	`timeout_expúed
(
°¨t_cou¡
, 
íd_cou¡
)))

429  
dequeued
;

430 
	}
}

432 
	$fio_wödowßio_gëevíts
(
thªad_d©a
 *
td
, 
mö
,

433 
max
, c⁄° 
time•ec
 *
t
)

435 
wödowßio_›ti⁄s
 *
o
 = 
td
->
eo
;

437 i‡(
o
->
no_com∂ëi⁄_thªad
)

438  
	`fio_wödowßio_gëevíts_nŸhªad
(
td
, 
mö
, 
max
, 
t
);

439  
	`fio_wödowaio_gëevíts_thªad
(
td
, 
mö
, 
max
, 
t
);

440 
	}
}

442 
fio_q_°©us
 
	$fio_wödowßio_queue
(
thªad_d©a
 *
td
,

443 
io_u
 *io_u)

445 
fio_ovîœµed
 *
o
 = 
io_u
->
ígöe_d©a
;

446 
LPOVERLAPPED
 
ÕOvl
 = &
o
->o;

447 
BOOL
 
suc˚ss
 = 
FALSE
;

448 
rc
 = 
FIO_Q_COMPLETED
;

450 
	`fio_ro_check
(
td
, 
io_u
);

452 
ÕOvl
->
I¡î«l
 = 0;

453 
ÕOvl
->
I¡î«lHigh
 = 0;

454 
ÕOvl
->
Off£t
 = 
io_u
->
off£t
 & 0xFFFFFFFF;

455 
ÕOvl
->
Off£tHigh
 = 
io_u
->
off£t
 >> 32;

457 
io_u
->
ddú
) {

458 
DDIR_WRITE
:

459 
suc˚ss
 = 
	`WrôeFûe
(
io_u
->
fûe
->
hFûe
, io_u->
x„r_buf
,

460 
io_u
->
x„r_buÊí
, 
NULL
, 
ÕOvl
);

462 
DDIR_READ
:

463 
suc˚ss
 = 
	`RódFûe
(
io_u
->
fûe
->
hFûe
, io_u->
x„r_buf
,

464 
io_u
->
x„r_buÊí
, 
NULL
, 
ÕOvl
);

466 
DDIR_SYNC
:

467 
DDIR_DATASYNC
:

468 
DDIR_SYNC_FILE_RANGE
:

469 
suc˚ss
 = 
	`FlushFûeBuf„rs
(
io_u
->
fûe
->
hFûe
);

470 i‡(!
suc˚ss
) {

471 
	`log_îr
("windowsaio: failedÅo flush file buffers\n");

472 
io_u
->
îr‹
 = 
	`wö_to_posix_îr‹
(
	`GëLa°Eº‹
());

475  
FIO_Q_COMPLETED
;

476 
DDIR_TRIM
:

477 
	`log_îr
("windowsaio: manual TRIM isn't supported on Windows\n");

478 
io_u
->
îr‹
 = 1;

479 
io_u
->
ªsid
 = io_u->
x„r_buÊí
;

480  
FIO_Q_COMPLETED
;

482 
	`as£π
(0);

486 i‡(
suc˚ss
 || 
	`GëLa°Eº‹
(Ë=
ERROR_IO_PENDING
)

487 
rc
 = 
FIO_Q_QUEUED
;

489 
io_u
->
îr‹
 = 
	`wö_to_posix_îr‹
(
	`GëLa°Eº‹
());

490 
io_u
->
ªsid
 = io_u->
x„r_buÊí
;

493  
rc
;

494 
	}
}

497 
DWORD
 
WINAPI
 
	$IoCom∂ëi⁄Routöe
(
LPVOID
 
ÕP¨amëî
)

499 
OVERLAPPED
 *
ovl
;

500 
fio_ovîœµed
 *
fov
;

501 
io_u
 *io_u;

502 
wödowßio_d©a
 *
wd
;

503 
thªad_˘x
 *
˘x
;

504 
ULONG_PTR
 
ulKey
 = 0;

505 
DWORD
 
byãs
;

507 
˘x
 = (
thªad_˘x
*)
ÕP¨amëî
;

508 
wd
 = 
˘x
->wd;

511 
BOOL
 
ªt
;

513 
ªt
 = 
	`GëQueuedCom∂ëi⁄Sètus
(
˘x
->
io˝
, &
byãs
, &
ulKey
,

514 &
ovl
, 250);

515 i‡(!
ªt
 && 
ovl
 =
NULL
)

518 
fov
 = 
	`CONTAINING_RECORD
(
ovl
, 
fio_ovîœµed
, 
o
);

519 
io_u
 = 
fov
->io_u;

521 i‡(
ovl
->
I¡î«l
 =
ERROR_SUCCESS
) {

522 
io_u
->
ªsid
 = io_u->
x„r_buÊí
 - 
ovl
->
I¡î«lHigh
;

523 
io_u
->
îr‹
 = 0;

525 
io_u
->
ªsid
 = io_u->
x„r_buÊí
;

526 
io_u
->
îr‹
 = 
	`wö_to_posix_îr‹
(
	`GëLa°Eº‹
());

529 
fov
->
io_com∂ëe
 = 
TRUE
;

530 
	`SëEvít
(
wd
->
iocom∂ëe_evít
);

531 } 
˘x
->
wd
->
iŸhªad_ru¬ög
);

533 
	`Clo£H™dÀ
(
˘x
->
io˝
);

534 
	`‰ì
(
˘x
);

536 
	}
}

538 
	$fio_wödowßio_io_u_‰ì
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

540 
fio_ovîœµed
 *
o
 = 
io_u
->
ígöe_d©a
;

542 i‡(
o
) {

543 
io_u
->
ígöe_d©a
 = 
NULL
;

544 
	`‰ì
(
o
);

546 
	}
}

548 
	$fio_wödowßio_io_u_öô
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

550 
fio_ovîœµed
 *
o
;

552 
o
 = 
	`mÆloc
((*o));

553 
o
->
io_com∂ëe
 = 
FALSE
;

554 
o
->
io_u
 = io_u;

555 
o
->o.
hEvít
 = 
NULL
;

556 
io_u
->
ígöe_d©a
 = 
o
;

558 
	}
}

560 
i€ngöe_›s
 
	gi€ngöe
 = {

561 .
«me
 = "windowsaio",

562 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

563 .
	göô
 = 
fio_wödowßio_öô
,

564 .
	gqueue
 = 
fio_wödowßio_queue
,

565 .
	ggëevíts
 = 
fio_wödowßio_gëevíts
,

566 .
	gevít
 = 
fio_wödowßio_evít
,

567 .
	g˛ónup
 = 
fio_wödowßio_˛ónup
,

568 .
	g›í_fûe
 = 
fio_wödowßio_›í_fûe
,

569 .
	g˛o£_fûe
 = 
fio_wödowßio_˛o£_fûe
,

570 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

571 .
	gio_u_öô
 = 
fio_wödowßio_io_u_öô
,

572 .
	gio_u_‰ì
 = 
fio_wödowßio_io_u_‰ì
,

573 .
	g›ti⁄s
 = 
›ti⁄s
,

574 .
	g›ti⁄_°ru˘_size
 = (
wödowßio_›ti⁄s
),

577 
fio_öô
 
	$fio_wödowßio_ªgi°î
()

579 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

580 
	}
}

582 
fio_exô
 
	$fio_wödowßio_uƒegi°î
()

584 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

585 
	}
}

	@engines/xnvme.c

10 
	~<°dlib.h
>

11 
	~<as£π.h
>

12 
	~<libxnvme.h
>

13 
	~<libxnvme_libc⁄f.h
>

14 
	~<libxnvme_nvm.h
>

15 
	~<libxnvme_znd.h
>

16 
	~<libxnvme_•ec_fs.h
>

17 
	~"fio.h
"

18 
	~"zbd_ty≥s.h
"

19 
	~"›tgroup.h
"

21 
±hªad_muãx_t
 
	gg_£rülize
 = 
PTHREAD_MUTEX_INITIALIZER
;

23 
	sxnvme_fi€_fwøp
 {

25 
fio_fûe
 *
	mfio_fûe
;

28 
xnvme_dev
 *
	mdev
;

30 c⁄° 
xnvme_geo
 *
	mgeo
;

32 
xnvme_queue
 *
	mqueue
;

34 
uöt32_t
 
	mssw
;

35 
uöt32_t
 
	mlba_nbyãs
;

37 
uöt8_t
 
	m_∑d
[24];

39 
XNVME_STATIC_ASSERT
((
xnvme_fi€_fwøp
) == 64, "Incorrect size")

41 
	sxnvme_fi€_d©a
 {

43 
io_u
 **
	miocq
;

46 
uöt64_t
 
	mcom∂ëed
;

52 
uöt64_t
 
	mecou¡
;

55 
öt32_t
 
	m¥ev
;

56 
öt32_t
 
	mcur
;

59 
öt64_t
 
	mn›í
;

61 
uöt64_t
 
	m«Œoˇãd
;

63 
iovec
 *
	miovec
;

65 
uöt8_t
 
	m_∑d
[8];

67 
xnvme_fi€_fwøp
 
	mfûes
[];

69 
XNVME_STATIC_ASSERT
((
xnvme_fi€_d©a
) == 64, "Incorrect size")

71 
	sxnvme_fi€_›ti⁄s
 {

72 *
	m∑ddög
;

73 
	mhùri
;

74 
	msqpﬁl_thªad
;

75 
	mxnvme_dev_nsid
;

76 
	mxnvme_iovec
;

77 *
	mxnvme_be
;

78 *
	mxnvme_async
;

79 *
	mxnvme_sync
;

80 *
	mxnvme_admö
;

83 
fio_›ti⁄
 
	g›ti⁄s
[] = {

85 .
«me
 = "hipri",

86 .
	g ame
 = "High Priority",

87 .
	gty≥
 = 
FIO_OPT_STR_SET
,

88 .
	goff1
 = 
off£tof
(
xnvme_fi€_›ti⁄s
, 
hùri
),

89 .
	ghñp
 = "UseÖolled IO completions",

90 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

91 .
	ggroup
 = 
FIO_OPT_G_XNVME
,

94 .
	g«me
 = "sqthread_poll",

95 .
	g ame
 = "Kernel SQÅhreadÖolling",

96 .
	gty≥
 = 
FIO_OPT_STR_SET
,

97 .
	goff1
 = 
off£tof
(
xnvme_fi€_›ti⁄s
, 
sqpﬁl_thªad
),

98 .
	ghñp
 = "Offload submission/completionÅo kernelÅhread",

99 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

100 .
	ggroup
 = 
FIO_OPT_G_XNVME
,

103 .
	g«me
 = "xnvme_be",

104 .
	g ame
 = "xNVMe Backend",

105 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

106 .
	goff1
 = 
off£tof
(
xnvme_fi€_›ti⁄s
, 
xnvme_be
),

107 .
	ghñp
 = "Select xNVMe backend [spdk,linux,fbsd]",

108 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

109 .
	ggroup
 = 
FIO_OPT_G_XNVME
,

112 .
	g«me
 = "xnvme_async",

113 .
	g ame
 = "xNVMe Asynchronous command-interface",

114 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

115 .
	goff1
 = 
off£tof
(
xnvme_fi€_›ti⁄s
, 
xnvme_async
),

116 .
	ghñp
 = "Select xNVMeásync. interface: [emu,thrpool,io_uring,libaio,posix,nil]",

117 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

118 .
	ggroup
 = 
FIO_OPT_G_XNVME
,

121 .
	g«me
 = "xnvme_sync",

122 .
	g ame
 = "xNVMe Synchronous. command-interface",

123 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

124 .
	goff1
 = 
off£tof
(
xnvme_fi€_›ti⁄s
, 
xnvme_sync
),

125 .
	ghñp
 = "Select xNVMe sync. interface: [nvme,psync]",

126 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

127 .
	ggroup
 = 
FIO_OPT_G_XNVME
,

130 .
	g«me
 = "xnvme_admin",

131 .
	g ame
 = "xNVMe Admin command-interface",

132 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

133 .
	goff1
 = 
off£tof
(
xnvme_fi€_›ti⁄s
, 
xnvme_admö
),

134 .
	ghñp
 = "Select xNVMeádmin. cmd-interface: [nvme,block,file_as_ns]",

135 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

136 .
	ggroup
 = 
FIO_OPT_G_XNVME
,

139 .
	g«me
 = "xnvme_dev_nsid",

140 .
	g ame
 = "xNVMe Namespace-Identifier, for user-space NVMe driver",

141 .
	gty≥
 = 
FIO_OPT_INT
,

142 .
	goff1
 = 
off£tof
(
xnvme_fi€_›ti⁄s
, 
xnvme_dev_nsid
),

143 .
	ghñp
 = "xNVMe Namespace-Identifier, for user-space NVMe driver",

144 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

145 .
	ggroup
 = 
FIO_OPT_G_XNVME
,

148 .
	g«me
 = "xnvme_iovec",

149 .
	g ame
 = "Vectored IOs",

150 .
	gty≥
 = 
FIO_OPT_STR_SET
,

151 .
	goff1
 = 
off£tof
(
xnvme_fi€_›ti⁄s
, 
xnvme_iovec
),

152 .
	ghñp
 = "Send vectored IOs",

153 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

154 .
	ggroup
 = 
FIO_OPT_G_XNVME
,

158 .
	g«me
 = 
NULL
,

162 
	$cb_poﬁ
(
xnvme_cmd_˘x
 *
˘x
, *
cb_¨g
)

164 
io_u
 *io_u = 
cb_¨g
;

165 
xnvme_fi€_d©a
 *
xd
 = 
io_u
->
mm≠_d©a
;

167 i‡(
	`xnvme_cmd_˘x_˝l_°©us
(
˘x
)) {

168 
	`xnvme_cmd_˘x_¥
(
˘x
, 
XNVME_PR_DEF
);

169 
xd
->
ecou¡
 += 1;

170 
io_u
->
îr‹
 = 
EIO
;

173 
xd
->
iocq
[xd->
com∂ëed
++] = 
io_u
;

174 
	`xnvme_queue_put_cmd_˘x
(
˘x
->
async
.
queue
, ctx);

175 
	}
}

177 
xnvme_›ts
 
	$xnvme_›ts_‰om_fi€
(
thªad_d©a
 *
td
)

179 
xnvme_fi€_›ti⁄s
 *
o
 = 
td
->
eo
;

180 
xnvme_›ts
 
›ts
 = 
	`xnvme_›ts_deÁu…
();

182 
›ts
.
nsid
 = 
o
->
xnvme_dev_nsid
;

183 
›ts
.
be
 = 
o
->
xnvme_be
;

184 
›ts
.
async
 = 
o
->
xnvme_async
;

185 
›ts
.
sync
 = 
o
->
xnvme_sync
;

186 
›ts
.
admö
 = 
o
->
xnvme_admö
;

188 
›ts
.
pﬁl_io
 = 
o
->
hùri
;

189 
›ts
.
pﬁl_sq
 = 
o
->
sqpﬁl_thªad
;

191 
›ts
.
dúe˘
 = 
td
->
o
.
odúe˘
;

193  
›ts
;

194 
	}
}

196 
	$_dev_˛o£
(
thªad_d©a
 *
td
, 
xnvme_fi€_fwøp
 *
fwøp
)

198 i‡(
fwøp
->
dev
)

199 
	`xnvme_queue_ãrm
(
fwøp
->
queue
);

201 
	`xnvme_dev_˛o£
(
fwøp
->
dev
);

203 
	`mem£t
(
fwøp
, 0, (*fwrap));

204 
	}
}

206 
	$xnvme_fi€_˛ónup
(
thªad_d©a
 *
td
)

208 
xnvme_fi€_d©a
 *
xd
 = 
NULL
;

209 
îr
;

211 i‡(!
td
->
io_›s_d©a
)

214 
xd
 = 
td
->
io_›s_d©a
;

216 
îr
 = 
	`±hªad_muãx_lock
(&
g_£rülize
);

217 i‡(
îr
)

218 
	`log_îr
("i€ng->˛ónup():Öthªad_muãx_lock(),Éº(%d)\n", 
îr
);

221 
uöt64_t
 
i
 = 0; i < 
xd
->
«Œoˇãd
; ++i)

222 
	`_dev_˛o£
(
td
, &
xd
->
fûes
[
i
]);

224 i‡(!
îr
) {

225 
îr
 = 
	`±hªad_muãx_u∆ock
(&
g_£rülize
);

226 i‡(
îr
)

227 
	`log_îr
("i€ng->˛ónup():Öthªad_muãx_u∆ock(),Éº(%d)\n", 
îr
);

230 
	`‰ì
(
xd
->
iocq
);

231 
	`‰ì
(
xd
->
iovec
);

232 
	`‰ì
(
xd
);

233 
td
->
io_›s_d©a
 = 
NULL
;

234 
	}
}

243 
	$_dev_›í
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

245 
xnvme_›ts
 
›ts
 = 
	`xnvme_›ts_‰om_fi€
(
td
);

246 
xnvme_fi€_d©a
 *
xd
 = 
td
->
io_›s_d©a
;

247 
xnvme_fi€_fwøp
 *
fwøp
;

248 
Êags
 = 0;

249 
îr
;

251 i‡(
f
->
fûío
 > ()
xd
->
«Œoˇãd
) {

252 
	`log_îr
("i€ng->_dev_›í(%s): invÆidássum±i⁄\n", 
f
->
fûe_«me
);

256 
fwøp
 = &
xd
->
fûes
[
f
->
fûío
];

258 
îr
 = 
	`±hªad_muãx_lock
(&
g_£rülize
);

259 i‡(
îr
) {

260 
	`log_îr
("i€ng->_dev_›í(%s):Öthªad_muãx_lock(),Éº(%d)\n", 
f
->
fûe_«me
,

261 
îr
);

262  -
îr
;

265 
fwøp
->
dev
 = 
	`xnvme_dev_›í
(
f
->
fûe_«me
, &
›ts
);

266 i‡(!
fwøp
->
dev
) {

267 
	`log_îr
("i€ng->_dev_›í(%s): xnvme_dev_›í(),Éº(%d)\n", 
f
->
fûe_«me
, 
î∫o
);

268 
Áûuª
;

270 
fwøp
->
geo
 = 
	`xnvme_dev_gë_geo
(fwøp->
dev
);

272 i‡(
	`xnvme_queue_öô
(
fwøp
->
dev
, 
td
->
o
.
iodïth
, 
Êags
, &(fwøp->
queue
))) {

273 
	`log_îr
("i€ng->_dev_›í(%s): xnvme_queue_öô(),Éº(?)\n", 
f
->
fûe_«me
);

274 
Áûuª
;

276 
	`xnvme_queue_£t_cb
(
fwøp
->
queue
, 
cb_poﬁ
, 
NULL
);

278 
fwøp
->
ssw
 = 
	`xnvme_dev_gë_ssw
(fwøp->
dev
);

279 
fwøp
->
lba_nbyãs
 = fwøp->
geo
->lba_nbytes;

281 
fwøp
->
fio_fûe
 = 
f
;

282 
fwøp
->
fio_fûe
->
fûëy≥
 = 
FIO_TYPE_BLOCK
;

283 
fwøp
->
fio_fûe
->
ªÆ_fûe_size
 = fwøp->
geo
->
tbyãs
;

284 
	`fio_fûe_£t_size_known
(
fwøp
->
fio_fûe
);

286 
îr
 = 
	`±hªad_muãx_u∆ock
(&
g_£rülize
);

287 i‡(
îr
)

288 
	`log_îr
("i€ng->_dev_›í(%s):Öthªad_muãx_u∆ock(),Éº(%d)\n", 
f
->
fûe_«me
,

289 
îr
);

293 
Áûuª
:

294 
	`xnvme_queue_ãrm
(
fwøp
->
queue
);

295 
	`xnvme_dev_˛o£
(
fwøp
->
dev
);

297 
îr
 = 
	`±hªad_muãx_u∆ock
(&
g_£rülize
);

298 i‡(
îr
)

299 
	`log_îr
("i€ng->_dev_›í(%s):Öthªad_muãx_u∆ock(),Éº(%d)\n", 
f
->
fûe_«me
,

300 
îr
);

303 
	}
}

305 
	$xnvme_fi€_öô
(
thªad_d©a
 *
td
)

307 
xnvme_fi€_d©a
 *
xd
 = 
NULL
;

308 
fio_fûe
 *
f
;

309 
i
;

311 i‡(!
td
->
o
.
u£_thªad
) {

312 
	`log_îr
("ioeng->init(): --thread=1 isÑequired\n");

317 
xd
 = 
	`ˇŒoc
(1, (*xdË+ (*xd->
fûes
Ë* 
td
->
o
.
ƒ_fûes
);

318 i‡(!
xd
) {

319 
	`log_îr
("i€ng->öô(): !ˇŒoc(),Éº(%d)\n", 
î∫o
);

323 
xd
->
iocq
 = 
	`ˇŒoc
(
td
->
o
.
iodïth
, (
io_u
 *));

324 i‡(!
xd
->
iocq
) {

325 
	`log_îr
("i€ng->öô(): !ˇŒoc(),Éº(%d)\n", 
î∫o
);

329 
xd
->
iovec
 = 
	`ˇŒoc
(
td
->
o
.
iodïth
, (*xd->iovec));

330 i‡(!
xd
->
iovec
) {

331 
	`log_îr
("i€ng->öô(): !ˇŒoc(xd->iovec),Éº(%d)\n", 
î∫o
);

335 
xd
->
¥ev
 = -1;

336 
td
->
io_›s_d©a
 = 
xd
;

338 
	`f‹_óch_fûe
(
td
, 
f
, 
i
)

340 i‡(
	`_dev_›í
(
td
, 
f
)) {

341 
	`log_îr
("i€ng->öô(): faûed; _dev_›í(%s)\n", 
f
->
fûe_«me
);

345 ++(
xd
->
«Œoˇãd
);

348 i‡(
xd
->
«Œoˇãd
 !
td
->
o
.
ƒ_fûes
) {

349 
	`log_îr
("ioeng->init(): failed;Çallocated !=Åd->o.nr_files\n");

354 
	}
}

357 
	$xnvme_fi€_iomem_Æloc
(
thªad_d©a
 *
td
, 
size_t
 
tŸÆ_mem
)

359 
xnvme_fi€_d©a
 *
xd
 = 
td
->
io_›s_d©a
;

360 
xnvme_fi€_fwøp
 *
fwøp
 = &
xd
->
fûes
[0];

362 i‡(!
fwøp
->
dev
) {

363 
	`log_îr
("ioeng->iomem_alloc(): failed;Ço dev-handle\n");

367 
td
->
‹ig_buf„r
 = 
	`xnvme_buf_Æloc
(
fwøp
->
dev
, 
tŸÆ_mem
);

369  
td
->
‹ig_buf„r
 =
NULL
;

370 
	}
}

373 
	$xnvme_fi€_iomem_‰ì
(
thªad_d©a
 *
td
)

375 
xnvme_fi€_d©a
 *
xd
 = 
NULL
;

376 
xnvme_fi€_fwøp
 *
fwøp
 = 
NULL
;

378 i‡(!
td
->
io_›s_d©a
)

381 
xd
 = 
td
->
io_›s_d©a
;

382 
fwøp
 = &
xd
->
fûes
[0];

384 i‡(!
fwøp
->
dev
) {

385 
	`log_îr
("ioeng->iomem_free(): failedÇo dev-handle\n");

389 
	`xnvme_buf_‰ì
(
fwøp
->
dev
, 
td
->
‹ig_buf„r
);

390 
	}
}

392 
	$xnvme_fi€_io_u_öô
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

394 
io_u
->
mm≠_d©a
 = 
td
->
io_›s_d©a
;

397 
	}
}

399 
	$xnvme_fi€_io_u_‰ì
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

401 
io_u
->
mm≠_d©a
 = 
NULL
;

402 
	}
}

404 
io_u
 *
	$xnvme_fi€_evít
(
thªad_d©a
 *
td
, 
evít
)

406 
xnvme_fi€_d©a
 *
xd
 = 
td
->
io_›s_d©a
;

408 
	`as£π
(
evít
 >= 0);

409 
	`as£π
(()
evít
 < 
xd
->
com∂ëed
);

411  
xd
->
iocq
[
evít
];

412 
	}
}

414 
	$xnvme_fi€_gëevíts
(
thªad_d©a
 *
td
, 
mö
, 
max
,

415 c⁄° 
time•ec
 *
t
)

417 
xnvme_fi€_d©a
 *
xd
 = 
td
->
io_›s_d©a
;

418 
xnvme_fi€_fwøp
 *
fwøp
 = 
NULL
;

419 
nfûes
 = 
xd
->
«Œoˇãd
;

420 
îr
 = 0;

422 i‡(
xd
->
¥ev
 !-1 && ++xd->¥ev < 
nfûes
) {

423 
fwøp
 = &
xd
->
fûes
[xd->
¥ev
];

424 
xd
->
cur
 = xd->
¥ev
;

427 
xd
->
com∂ëed
 = 0;

429 i‡(
fwøp
 =
NULL
 || 
xd
->
cur
 =
nfûes
) {

430 
fwøp
 = &
xd
->
fûes
[0];

431 
xd
->
cur
 = 0;

434 
fwøp
 !
NULL
 && 
xd
->
cur
 < 
nfûes
 && 
îr
 >= 0) {

435 
îr
 = 
	`xnvme_queue_poke
(
fwøp
->
queue
, 
max
 - 
xd
->
com∂ëed
);

436 i‡(
îr
 < 0) {

437 
îr
) {

438 -
EBUSY
:

439 -
EAGAIN
:

440 
	`u¶ìp
(1);

444 
	`log_îr
("ioeng->getevents(): unhandled IOÉrror\n");

445 
	`as£π
(
Ál£
);

449 i‡(
xd
->
com∂ëed
 >
mö
) {

450 
xd
->
¥ev
 = xd->
cur
;

451  
xd
->
com∂ëed
;

453 
xd
->
cur
++;

454 
fwøp
 = &
xd
->
fûes
[xd->
cur
];

456 i‡(
îr
 < 0) {

457 
îr
) {

458 -
EBUSY
:

459 -
EAGAIN
:

460 
	`u¶ìp
(1);

467 
xd
->
cur
 = 0;

469  
xd
->
com∂ëed
;

470 
	}
}

472 
fio_q_°©us
 
	$xnvme_fi€_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

474 
xnvme_fi€_d©a
 *
xd
 = 
td
->
io_›s_d©a
;

475 
xnvme_fi€_fwøp
 *
fwøp
;

476 
xnvme_cmd_˘x
 *
˘x
;

477 
uöt32_t
 
nsid
;

478 
uöt64_t
 
¶ba
;

479 
uöt16_t
 
∆b
;

480 
îr
;

481 
boﬁ
 
ve˘‹ed_io
 = ((
xnvme_fi€_›ti⁄s
 *)
td
->
eo
)->
xnvme_iovec
;

483 
	`fio_ro_check
(
td
, 
io_u
);

485 
fwøp
 = &
xd
->
fûes
[
io_u
->
fûe
->
fûío
];

486 
nsid
 = 
	`xnvme_dev_gë_nsid
(
fwøp
->
dev
);

488 
¶ba
 = 
io_u
->
off£t
 >> 
fwøp
->
ssw
;

489 
∆b
 = (
io_u
->
x„r_buÊí
 >> 
fwøp
->
ssw
) - 1;

491 
˘x
 = 
	`xnvme_queue_gë_cmd_˘x
(
fwøp
->
queue
);

492 
˘x
->
async
.
cb_¨g
 = 
io_u
;

494 
˘x
->
cmd
.
comm⁄
.
nsid
 =Çsid;

495 
˘x
->
cmd
.
nvm
.
¶ba
 = slba;

496 
˘x
->
cmd
.
nvm
.
∆b
 =Çlb;

498 
io_u
->
ddú
) {

499 
DDIR_READ
:

500 
˘x
->
cmd
.
comm⁄
.
›code
 = 
XNVME_SPEC_NVM_OPC_READ
;

503 
DDIR_WRITE
:

504 
˘x
->
cmd
.
comm⁄
.
›code
 = 
XNVME_SPEC_NVM_OPC_WRITE
;

508 
	`log_îr
("i€ng->queue(): ENOSYS: %u\n", 
io_u
->
ddú
);

509 
îr
 = -1;

510 
	`as£π
(
Ál£
);

514 i‡(
ve˘‹ed_io
) {

515 
xd
->
iovec
[
io_u
->
ödex
].
iov_ba£
 = io_u->
x„r_buf
;

516 
xd
->
iovec
[
io_u
->
ödex
].
iov_Àn
 = io_u->
x„r_buÊí
;

518 
îr
 = 
	`xnvme_cmd_∑ssv
(
˘x
, &
xd
->
iovec
[
io_u
->
ödex
], 1, io_u->
x„r_buÊí
, 
NULL
, 0,

521 
îr
 = 
	`xnvme_cmd_∑ss
(
˘x
, 
io_u
->
x„r_buf
, io_u->
x„r_buÊí
, 
NULL
, 0);

523 
îr
) {

525  
FIO_Q_QUEUED
;

527 -
EBUSY
:

528 -
EAGAIN
:

529 
	`xnvme_queue_put_cmd_˘x
(
˘x
->
async
.
queue
, ctx);

530  
FIO_Q_BUSY
;

533 
	`log_îr
("i€ng->queue():Éº: '%d'\n", 
îr
);

535 
	`xnvme_queue_put_cmd_˘x
(
˘x
->
async
.
queue
, ctx);

537 
io_u
->
îr‹
 = 
	`abs
(
îr
);

538 
	`as£π
(
Ál£
);

539  
FIO_Q_COMPLETED
;

541 
	}
}

543 
	$xnvme_fi€_˛o£
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

545 
xnvme_fi€_d©a
 *
xd
 = 
td
->
io_›s_d©a
;

547 
	`d¥öt
(
FD_FILE
, "xnvmê˛o£ %†--Ç›í: %ld\n", 
f
->
fûe_«me
, 
xd
->
n›í
);

549 --(
xd
->
n›í
);

552 
	}
}

554 
	$xnvme_fi€_›í
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

556 
xnvme_fi€_d©a
 *
xd
 = 
td
->
io_›s_d©a
;

558 
	`d¥öt
(
FD_FILE
, "xnvmê›í %†--Ç›í: %ld\n", 
f
->
fûe_«me
, 
xd
->
n›í
);

560 i‡(
f
->
fûío
 > ()
xd
->
«Œoˇãd
) {

561 
	`log_îr
("ioeng->open(): f->fileno > xd->nallocated; invalidássumption\n");

564 i‡(
xd
->
fûes
[
f
->
fûío
].
fio_fûe
 != f) {

565 
	`log_îr
("ioeng->open(): fio_file != f; invalidássumption\n");

569 ++(
xd
->
n›í
);

572 
	}
}

574 
	$xnvme_fi€_övÆid©e
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

578 
	}
}

580 
	$xnvme_fi€_gë_max_›í_z⁄es
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

581 *
max_›í_z⁄es
)

583 
xnvme_›ts
 
›ts
 = 
	`xnvme_›ts_‰om_fi€
(
td
);

584 
xnvme_dev
 *
dev
;

585 c⁄° 
xnvme_•ec_znd_idfy_ns
 *
zns
;

586 
îr
 = 0, 
îr_lock
;

588 i‡(
f
->
fûëy≥
 !
FIO_TYPE_FILE
 && f->fûëy≥ !
FIO_TYPE_BLOCK
 &&

589 
f
->
fûëy≥
 !
FIO_TYPE_CHAR
) {

590 
	`log_öfo
("i€ng->gë_max_›í_z⁄ed(): ign‹ög fûëy≥: %d\n", 
f
->
fûëy≥
);

593 
îr_lock
 = 
	`±hªad_muãx_lock
(&
g_£rülize
);

594 i‡(
îr_lock
) {

595 
	`log_îr
("i€ng->gë_max_›í_z⁄es():Öthªad_muãx_lock(),Éº(%d)\n", 
îr_lock
);

596  -
îr_lock
;

599 
dev
 = 
	`xnvme_dev_›í
(
f
->
fûe_«me
, &
›ts
);

600 i‡(!
dev
) {

601 
	`log_îr
("i€ng->gë_max_›í_z⁄es(): xnvme_dev_›í(),Éº(%d)\n", 
îr_lock
);

602 
îr
 = -
î∫o
;

603 
exô
;

605 i‡(
	`xnvme_dev_gë_geo
(
dev
)->
ty≥
 !
XNVME_GEO_ZONED
) {

606 
î∫o
 = 
EINVAL
;

607 
îr
 = -
î∫o
;

608 
exô
;

611 
zns
 = (*)
	`xnvme_dev_gë_ns_css
(
dev
);

612 i‡(!
zns
) {

613 
	`log_îr
("i€ng->gë_max_›í_z⁄es(): xnvme_dev_gë_ns_css(),Éº(%d)\n", 
î∫o
);

614 
îr
 = -
î∫o
;

615 
exô
;

624 *
max_›í_z⁄es
 = 
zns
->
m‹
 + 1;

626 
exô
:

627 
	`xnvme_dev_˛o£
(
dev
);

628 
îr_lock
 = 
	`±hªad_muãx_u∆ock
(&
g_£rülize
);

629 i‡(
îr_lock
)

630 
	`log_îr
("ioeng->get_max_open_zones():Öthread_mutex_unlock(),Érr(%d)\n",

631 
îr_lock
);

633  
îr
;

634 
	}
}

644 
	$xnvme_fi€_gë_z⁄ed_modñ
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

645 
zbd_z⁄ed_modñ
 *
modñ
)

647 
xnvme_›ts
 
›ts
 = 
	`xnvme_›ts_‰om_fi€
(
td
);

648 
xnvme_dev
 *
dev
;

649 
îr
 = 0, 
îr_lock
;

651 i‡(
f
->
fûëy≥
 !
FIO_TYPE_FILE
 && f->fûëy≥ !
FIO_TYPE_BLOCK
 &&

652 
f
->
fûëy≥
 !
FIO_TYPE_CHAR
) {

653 
	`log_öfo
("i€ng->gë_z⁄ed_modñ(): ign‹ög fûëy≥: %d\n", 
f
->
fûëy≥
);

654  -
EINVAL
;

657 
îr
 = 
	`±hªad_muãx_lock
(&
g_£rülize
);

658 i‡(
îr
) {

659 
	`log_îr
("i€ng->gë_z⁄ed_modñ():Öthªad_muãx_lock(),Éº(%d)\n", 
îr
);

660  -
îr
;

663 
dev
 = 
	`xnvme_dev_›í
(
f
->
fûe_«me
, &
›ts
);

664 i‡(!
dev
) {

665 
	`log_îr
("ioeng->get_zoned_model(): xnvme_dev_open(%s) failed,Érrno: %d\n",

666 
f
->
fûe_«me
, 
î∫o
);

667 
îr
 = -
î∫o
;

668 
exô
;

671 
	`xnvme_dev_gë_geo
(
dev
)->
ty≥
) {

672 
XNVME_GEO_UNKNOWN
:

673 
	`d¥öt
(
FD_ZBD
, "%s: gŸ 'unknown',ássignög ZBD_NONE\n", 
f
->
fûe_«me
);

674 *
modñ
 = 
ZBD_NONE
;

677 
XNVME_GEO_CONVENTIONAL
:

678 
	`d¥öt
(
FD_ZBD
, "%s: gŸ 'c⁄víti⁄Æ',ássignög ZBD_NONE\n", 
f
->
fûe_«me
);

679 *
modñ
 = 
ZBD_NONE
;

682 
XNVME_GEO_ZONED
:

683 
	`d¥öt
(
FD_ZBD
, "%s: gŸ 'z⁄ed',ássignög ZBD_HOST_MANAGED\n", 
f
->
fûe_«me
);

684 *
modñ
 = 
ZBD_HOST_MANAGED
;

688 
	`d¥öt
(
FD_ZBD
, "%s: hô-deÁu…,ássignög ZBD_NONE\n", 
f
->
fûe_«me
);

689 *
modñ
 = 
ZBD_NONE
;

690 
î∫o
 = 
EINVAL
;

691 
îr
 = -
î∫o
;

695 
exô
:

696 
	`xnvme_dev_˛o£
(
dev
);

698 
îr_lock
 = 
	`±hªad_muãx_u∆ock
(&
g_£rülize
);

699 i‡(
îr_lock
)

700 
	`log_îr
("i€ng->gë_z⁄ed_modñ():Öthªad_muãx_u∆ock(),Éº(%d)\n", 
îr_lock
);

702  
îr
;

703 
	}
}

719 
	$xnvme_fi€_ªp‹t_z⁄es
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
, 
uöt64_t
 
off£t
,

720 
zbd_z⁄e
 *
zbdz
, 
ƒ_z⁄es
)

722 
xnvme_›ts
 
›ts
 = 
	`xnvme_›ts_‰om_fi€
(
td
);

723 c⁄° 
xnvme_•ec_znd_idfy_lba„
 *
lba„
 = 
NULL
;

724 
xnvme_dev
 *
dev
 = 
NULL
;

725 c⁄° 
xnvme_geo
 *
geo
 = 
NULL
;

726 
xnvme_znd_ªp‹t
 *
Ωπ
 = 
NULL
;

727 
uöt32_t
 
ssw
;

728 
uöt64_t
 
¶ba
;

729 
limô
 = 0;

730 
îr
 = 0, 
îr_lock
;

732 
	`d¥öt
(
FD_ZBD
, "%s:Ñï‹t_z⁄es(Ëoff£t: %zu,Çr_z⁄es: %u\n", 
f
->
fûe_«me
, 
off£t
,

733 
ƒ_z⁄es
);

735 
îr
 = 
	`±hªad_muãx_lock
(&
g_£rülize
);

736 i‡(
îr
) {

737 
	`log_îr
("i€ng->ªp‹t_z⁄es(%s):Öthªad_muãx_lock(),Éº(%d)\n", 
f
->
fûe_«me
,

738 
îr
);

739  -
îr
;

742 
dev
 = 
	`xnvme_dev_›í
(
f
->
fûe_«me
, &
›ts
);

743 i‡(!
dev
) {

744 
	`log_îr
("i€ng->ªp‹t_z⁄es(%s): xnvme_dev_›í(),Éº(%d)\n", 
f
->
fûe_«me
,

745 
î∫o
);

746 
exô
;

749 
geo
 = 
	`xnvme_dev_gë_geo
(
dev
);

750 
ssw
 = 
	`xnvme_dev_gë_ssw
(
dev
);

751 
lba„
 = 
	`xnvme_znd_dev_gë_lba„
(
dev
);

753 
limô
 = 
ƒ_z⁄es
 > 
geo
->
nz⁄e
 ? geo->nzone :Çr_zones;

755 
	`d¥öt
(
FD_ZBD
, "%s:Üimô: %u\n", 
f
->
fûe_«me
, 
limô
);

757 
¶ba
 = ((
off£t
 >> 
ssw
Ë/ 
geo
->
n£˘
) * geo->nsect;

759 
Ωπ
 = 
	`xnvme_znd_ªp‹t_‰om_dev
(
dev
, 
¶ba
, 
limô
, 0);

760 i‡(!
Ωπ
) {

761 
	`log_îr
("ioeng->report_zones(%s): xnvme_znd_report_from_dev(),Érr(%d)\n",

762 
f
->
fûe_«me
, 
î∫o
);

763 
îr
 = -
î∫o
;

764 
exô
;

766 i‡(
Ωπ
->
√¡rõs
 !
limô
) {

767 
	`log_îr
("i€ng->ªp‹t_z⁄es(%s):Çíåõ†!ƒ_z⁄es\n", 
f
->
fûe_«me
);

768 
îr
 = 1;

769 
exô
;

771 i‡(
off£t
 > 
geo
->
tbyãs
) {

772 
	`log_îr
("i€ng->ªp‹t_z⁄es(%s): out-of-bounds\n", 
f
->
fûe_«me
);

773 
exô
;

777 
uöt32_t
 
idx
 = 0; idx < 
Ωπ
->
√¡rõs
; ++idx) {

778 
xnvme_•ec_znd_des¸
 *
des¸
 = 
	`XNVME_ZND_REPORT_DESCR
(
Ωπ
, 
idx
);

780 
zbdz
[
idx
].
°¨t
 = 
des¸
->
z¶ba
 << 
ssw
;

781 
zbdz
[
idx
].
Àn
 = 
lba„
->
zsze
 << 
ssw
;

782 
zbdz
[
idx
].
ˇ∑côy
 = 
des¸
->
zˇp
 << 
ssw
;

783 
zbdz
[
idx
].
wp
 = 
des¸
->w∞<< 
ssw
;

785 
des¸
->
zt
) {

786 
XNVME_SPEC_ZND_TYPE_SEQWR
:

787 
zbdz
[
idx
].
ty≥
 = 
ZBD_ZONE_TYPE_SWR
;

791 
	`log_îr
("ioeng->report_zones(%s): invalidÅype for zoneát offset(%zu)\n",

792 
f
->
fûe_«me
, 
zbdz
[
idx
].
°¨t
);

793 
îr
 = -
EIO
;

794 
exô
;

797 
des¸
->
zs
) {

798 
XNVME_SPEC_ZND_STATE_EMPTY
:

799 
zbdz
[
idx
].
c⁄d
 = 
ZBD_ZONE_COND_EMPTY
;

801 
XNVME_SPEC_ZND_STATE_IOPEN
:

802 
zbdz
[
idx
].
c⁄d
 = 
ZBD_ZONE_COND_IMP_OPEN
;

804 
XNVME_SPEC_ZND_STATE_EOPEN
:

805 
zbdz
[
idx
].
c⁄d
 = 
ZBD_ZONE_COND_EXP_OPEN
;

807 
XNVME_SPEC_ZND_STATE_CLOSED
:

808 
zbdz
[
idx
].
c⁄d
 = 
ZBD_ZONE_COND_CLOSED
;

810 
XNVME_SPEC_ZND_STATE_FULL
:

811 
zbdz
[
idx
].
c⁄d
 = 
ZBD_ZONE_COND_FULL
;

814 
XNVME_SPEC_ZND_STATE_RONLY
:

815 
XNVME_SPEC_ZND_STATE_OFFLINE
:

817 
zbdz
[
idx
].
c⁄d
 = 
ZBD_ZONE_COND_OFFLINE
;

822 
exô
:

823 
	`xnvme_buf_vút_‰ì
(
Ωπ
);

825 
	`xnvme_dev_˛o£
(
dev
);

827 
îr_lock
 = 
	`±hªad_muãx_u∆ock
(&
g_£rülize
);

828 i‡(
îr_lock
)

829 
	`log_îr
("i€ng->ªp‹t_z⁄es():Öthªad_muãx_u∆ock(),Éº: %d\n", 
îr_lock
);

831 
	`d¥öt
(
FD_ZBD
, "îr: %d,Çr_z⁄es: %d\n", 
îr
, ()
ƒ_z⁄es
);

833  
îr
 ?Éº : ()
limô
;

834 
	}
}

842 
	$xnvme_fi€_ª£t_wp
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
, 
uöt64_t
 
off£t
,

843 
uöt64_t
 
Àngth
)

845 
xnvme_›ts
 
›ts
 = 
	`xnvme_›ts_‰om_fi€
(
td
);

846 
xnvme_fi€_d©a
 *
xd
 = 
NULL
;

847 
xnvme_fi€_fwøp
 *
fwøp
 = 
NULL
;

848 
xnvme_dev
 *
dev
 = 
NULL
;

849 c⁄° 
xnvme_geo
 *
geo
 = 
NULL
;

850 
uöt64_t
 
fú°
, 
œ°
;

851 
uöt32_t
 
ssw
;

852 
uöt32_t
 
nsid
;

853 
îr
 = 0, 
îr_lock
;

855 i‡(
td
->
io_›s_d©a
) {

856 
xd
 = 
td
->
io_›s_d©a
;

857 
fwøp
 = &
xd
->
fûes
[
f
->
fûío
];

859 
	`as£π
(
fwøp
->
dev
);

860 
	`as£π
(
fwøp
->
geo
);

862 
dev
 = 
fwøp
->dev;

863 
geo
 = 
fwøp
->geo;

864 
ssw
 = 
fwøp
->ssw;

866 
îr
 = 
	`±hªad_muãx_lock
(&
g_£rülize
);

867 i‡(
îr
) {

868 
	`log_îr
("i€ng->ª£t_wp():Öthªad_muãx_lock(),Éº(%d)\n", 
îr
);

869  -
îr
;

872 
dev
 = 
	`xnvme_dev_›í
(
f
->
fûe_«me
, &
›ts
);

873 i‡(!
dev
) {

874 
	`log_îr
("ioeng->reset_wp(): xnvme_dev_open(%s) failed,Érrno(%d)\n",

875 
f
->
fûe_«me
, 
î∫o
);

876 
exô
;

878 
geo
 = 
	`xnvme_dev_gë_geo
(
dev
);

879 
ssw
 = 
	`xnvme_dev_gë_ssw
(
dev
);

882 
nsid
 = 
	`xnvme_dev_gë_nsid
(
dev
);

884 
fú°
 = ((
off£t
 >> 
ssw
Ë/ 
geo
->
n£˘
) * geo->nsect;

885 
œ°
 = (((
off£t
 + 
Àngth
Ë>> 
ssw
Ë/ 
geo
->
n£˘
) * geo->nsect;

886 
	`d¥öt
(
FD_ZBD
, "fú°: 0x%lx,Üa°: 0x%lx\n", 
fú°
, 
œ°
);

888 
uöt64_t
 
z¶ba
 = 
fú°
; z¶b®< 
œ°
; z¶b®+
geo
->
n£˘
) {

889 
xnvme_cmd_˘x
 
˘x
 = 
	`xnvme_cmd_˘x_‰om_dev
(
dev
);

891 i‡(
z¶ba
 >(
geo
->
n£˘
 * geo->
nz⁄e
)) {

892 
	`log_îr
("ioeng->reset_wp(): out-of-bounds\n");

893 
îr
 = 0;

897 
îr
 = 
	`xnvme_znd_mgmt_£nd
(&
˘x
, 
nsid
, 
z¶ba
, 
Ál£
,

898 
XNVME_SPEC_ZND_CMD_MGMT_SEND_RESET
, 0x0, 
NULL
);

899 i‡(
îr
 || 
	`xnvme_cmd_˘x_˝l_°©us
(&
˘x
)) {

900 
îr
 =Éº ?Éº : -
EIO
;

901 
	`log_îr
("i€ng->ª£t_wp():Éº(%d), sc(%d)", 
îr
, 
˘x
.
˝l
.
°©us
.
sc
);

902 
exô
;

906 
exô
:

907 i‡(!
td
->
io_›s_d©a
) {

908 
	`xnvme_dev_˛o£
(
dev
);

910 
îr_lock
 = 
	`±hªad_muãx_u∆ock
(&
g_£rülize
);

911 i‡(
îr_lock
)

912 
	`log_îr
("i€ng->ª£t_wp():Öthªad_muãx_u∆ock(),Éº(%d)\n", 
îr_lock
);

915  
îr
;

916 
	}
}

918 
	$xnvme_fi€_gë_fûe_size
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

920 
xnvme_›ts
 
›ts
 = 
	`xnvme_›ts_‰om_fi€
(
td
);

921 
xnvme_dev
 *
dev
;

922 
ªt
 = 0, 
îr
;

924 i‡(
	`fio_fûe_size_known
(
f
))

927 
ªt
 = 
	`±hªad_muãx_lock
(&
g_£rülize
);

928 i‡(
ªt
) {

929 
	`log_îr
("i€ng->ª£t_wp():Öthªad_muãx_lock(),Éº(%d)\n", 
ªt
);

930  -
ªt
;

933 
dev
 = 
	`xnvme_dev_›í
(
f
->
fûe_«me
, &
›ts
);

934 i‡(!
dev
) {

935 
	`log_îr
("%s: faûedÑërõvög devi˚ h™dÀ,Éºno: %d\n", 
f
->
fûe_«me
, 
î∫o
);

936 
ªt
 = -
î∫o
;

937 
exô
;

940 
f
->
ªÆ_fûe_size
 = 
	`xnvme_dev_gë_geo
(
dev
)->
tbyãs
;

941 
	`fio_fûe_£t_size_known
(
f
);

942 
f
->
fûëy≥
 = 
FIO_TYPE_BLOCK
;

944 
exô
:

945 
	`xnvme_dev_˛o£
(
dev
);

946 
îr
 = 
	`±hªad_muãx_u∆ock
(&
g_£rülize
);

947 i‡(
îr
)

948 
	`log_îr
("i€ng->ª£t_wp():Öthªad_muãx_u∆ock(),Éº(%d)\n", 
îr
);

950  
ªt
;

951 
	}
}

953 
FIO_STATIC
 
i€ngöe_›s
 
	gi€ngöe
 = {

954 .
«me
 = "xnvme",

955 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

956 .
	g›ti⁄s
 = 
›ti⁄s
,

957 .
	g›ti⁄_°ru˘_size
 = (
xnvme_fi€_›ti⁄s
),

958 .
	gÊags
 = 
FIO_DISKLESSIO
 | 
FIO_NODISKUTIL
 | 
FIO_NOEXTEND
 | 
FIO_MEMALIGN
 | 
FIO_RAWIO
,

960 .
	g˛ónup
 = 
xnvme_fi€_˛ónup
,

961 .
	göô
 = 
xnvme_fi€_öô
,

963 .
	giomem_‰ì
 = 
xnvme_fi€_iomem_‰ì
,

964 .
	giomem_Æloc
 = 
xnvme_fi€_iomem_Æloc
,

966 .
	gio_u_‰ì
 = 
xnvme_fi€_io_u_‰ì
,

967 .
	gio_u_öô
 = 
xnvme_fi€_io_u_öô
,

969 .
	gevít
 = 
xnvme_fi€_evít
,

970 .
	ggëevíts
 = 
xnvme_fi€_gëevíts
,

971 .
	gqueue
 = 
xnvme_fi€_queue
,

973 .
	g˛o£_fûe
 = 
xnvme_fi€_˛o£
,

974 .
	g›í_fûe
 = 
xnvme_fi€_›í
,

975 .
	ggë_fûe_size
 = 
xnvme_fi€_gë_fûe_size
,

977 .
	gövÆid©e
 = 
xnvme_fi€_övÆid©e
,

978 .
	ggë_max_›í_z⁄es
 = 
xnvme_fi€_gë_max_›í_z⁄es
,

979 .
	ggë_z⁄ed_modñ
 = 
xnvme_fi€_gë_z⁄ed_modñ
,

980 .
	gªp‹t_z⁄es
 = 
xnvme_fi€_ªp‹t_z⁄es
,

981 .
	gª£t_wp
 = 
xnvme_fi€_ª£t_wp
,

984 
fio_öô
 
	$fio_xnvme_ªgi°î
()

986 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

987 
	}
}

989 
fio_exô
 
	$fio_xnvme_uƒegi°î
()

991 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

992 
	}
}

	@err.h

1 #i‚de‡
FIO_ERR_H


2 
	#FIO_ERR_H


	)

12 
	#MAX_ERRNO
 4095

	)

14 
	#IS_ERR_VALUE
(
x
Ë((xË>(
uöçå_t
)-
MAX_ERRNO
)

	)

16 
ölöe
 *
	$ERR_PTR
(
uöçå_t
 
îr‹
)

18  (*Ë
îr‹
;

19 
	}
}

21 
ölöe
 
uöçå_t
 
	$PTR_ERR
(c⁄° *
±r
)

23  (
uöçå_t
Ë
±r
;

24 
	}
}

26 
ölöe
 
uöçå_t
 
	$IS_ERR
(c⁄° *
±r
)

28  
	`IS_ERR_VALUE
((
uöçå_t
)
±r
);

29 
	}
}

31 
ölöe
 
uöçå_t
 
	$IS_ERR_OR_NULL
(c⁄° *
±r
)

33  !
±r
 || 
	`IS_ERR_VALUE
((
uöçå_t
)ptr);

34 
	}
}

36 
ölöe
 
	$PTR_ERR_OR_ZERO
(c⁄° *
±r
)

38 i‡(
	`IS_ERR
(
±r
))

39  
	`PTR_ERR
(
±r
);

42 
	}
}

	@eta.c

4 
	~<uni°d.h
>

5 
	~<°rög.h
>

6 
	~<°dlib.h
>

7 #ifde‡
CONFIG_VALGRIND_DEV


8 
	~<vÆgröd/drd.h
>

10 
	#DRD_IGNORE_VAR
(
x
Ëdÿ{ } 0)

	)

13 
	~"fio.h
"

14 
	~"lib/pow2.h
"

16 
	g__run_°r
[
REAL_MAX_JOBS
 + 1];

17 
	grun_°r
[
__THREAD_RUNSTR_SZ
(
REAL_MAX_JOBS
) + 1];

19 
	$upd©e_c⁄dí£d_°r
(*
r°r
, *
run_°r_c⁄dí£d
)

21 i‡(*
r°r
) {

22 *
r°r
) {

23 
ƒ
 = 1;

25 *
run_°r_c⁄dí£d
++ = *
r°r
++;

26 *(
r°r
 - 1) == *rstr) {

27 
r°r
++;

28 
ƒ
++;

30 
run_°r_c⁄dí£d
 +
	`•rötf
‘un_°r_c⁄dí£d, "(%u),", 
ƒ
);

32 
run_°r_c⁄dí£d
--;

34 *
run_°r_c⁄dí£d
 = '\0';

35 
	}
}

40 
	$check_°r_upd©e
(
thªad_d©a
 *
td
)

42 
c
 = 
__run_°r
[
td
->
thªad_numbî
 - 1];

44 
td
->
run°©e
) {

45 
TD_REAPED
:

46 i‡(
td
->
îr‹
)

47 
c
 = 'X';

48 i‡(
td
->
sig
)

49 
c
 = 'K';

51 
c
 = '_';

53 
TD_EXITED
:

54 
c
 = 'E';

56 
TD_RAMP
:

57 
c
 = '/';

59 
TD_RUNNING
:

60 i‡(
	`td_rw
(
td
)) {

61 i‡(
	`td_øndom
(
td
)) {

62 i‡(
td
->
o
.
rwmix
[
DDIR_READ
] == 100)

63 
c
 = 'r';

64 i‡(
td
->
o
.
rwmix
[
DDIR_WRITE
] == 100)

65 
c
 = 'w';

67 
c
 = 'm';

69 i‡(
td
->
o
.
rwmix
[
DDIR_READ
] == 100)

70 
c
 = 'R';

71 i‡(
td
->
o
.
rwmix
[
DDIR_WRITE
] == 100)

72 
c
 = 'W';

74 
c
 = 'M';

76 } i‡(
	`td_ªad
(
td
)) {

77 i‡(
	`td_øndom
(
td
))

78 
c
 = 'r';

80 
c
 = 'R';

81 } i‡(
	`td_wrôe
(
td
)) {

82 i‡(
	`td_øndom
(
td
))

83 
c
 = 'w';

85 
c
 = 'W';

87 i‡(
	`td_øndom
(
td
))

88 
c
 = 'd';

90 
c
 = 'D';

93 
TD_PRE_READING
:

94 
c
 = 'p';

96 
TD_VERIFYING
:

97 
c
 = 'V';

99 
TD_FSYNCING
:

100 
c
 = 'F';

102 
TD_FINISHING
:

103 
c
 = 'f';

105 
TD_CREATED
:

106 
c
 = 'C';

108 
TD_INITIALIZED
:

109 
TD_SETTING_UP
:

110 
c
 = 'I';

112 
TD_NOT_CREATED
:

113 
c
 = 'P';

116 
	`log_îr
("°©ê%d\n", 
td
->
run°©e
);

119 
__run_°r
[
td
->
thªad_numbî
 - 1] = 
c
;

120 
	`upd©e_c⁄dí£d_°r
(
__run_°r
, 
run_°r
);

121 
	}
}

126 
	$ëa_to_°r
(*
°r
, 
ëa_£c
)

128 
d
, 
h
, 
m
, 
s
;

129 
di•_hour
 = 0;

131 i‡(
ëa_£c
 == -1) {

132 
	`•rötf
(
°r
, "--");

136 
s
 = 
ëa_£c
 % 60;

137 
ëa_£c
 /= 60;

138 
m
 = 
ëa_£c
 % 60;

139 
ëa_£c
 /= 60;

140 
h
 = 
ëa_£c
 % 24;

141 
ëa_£c
 /= 24;

142 
d
 = 
ëa_£c
;

144 i‡(
d
) {

145 
di•_hour
 = 1;

146 
°r
 +
	`•rötf
(°r, "%02ud:", 
d
);

149 i‡(
h
 || 
di•_hour
)

150 
°r
 +
	`•rötf
(°r, "%02uh:", 
h
);

152 
°r
 +
	`•rötf
(°r, "%02um:", 
m
);

153 
	`•rötf
(
°r
, "%02us", 
s
);

154 
	}
}

159 
	$thªad_ëa
(
thªad_d©a
 *
td
)

161 
byãs_tŸÆ
, 
byãs_d⁄e
;

162 
ëa_£c
 = 0;

163 
ñ≠£d
;

164 
uöt64_t
 
timeout
;

166 
ñ≠£d
 = (
	`mtime_sö˚_now
(&
td
->
ïoch
) + 999) / 1000;

167 
timeout
 = 
td
->
o
.timeout / 1000000UL;

169 
byãs_tŸÆ
 = 
td
->
tŸÆ_io_size
;

171 i‡(
td
->
Êags
 & 
TD_F_NO_PROGRESS
)

174 i‡(
td
->
o
.
fûl_devi˚
 &&Åd->o.
size
 == -1ULL) {

175 i‡(!
td
->
fûl_devi˚_size
 ||Åd->fill_device_size == -1ULL)

178 
byãs_tŸÆ
 = 
td
->
fûl_devi˚_size
;

185 i‡(
td
->
o
.
z⁄e_size
 &&Åd->o.
z⁄e_skù
 && 
byãs_tŸÆ
 &&

186 !
	`fio_›ti⁄_is_£t
(&
td
->
o
, 
io_size
)) {

187 
ƒ_z⁄es
;

188 
uöt64_t
 
z⁄e_byãs
;

198 
z⁄e_byãs
 = 
td
->
o
.
z⁄e_size
 +Åd->o.
z⁄e_skù
;

199 
ƒ_z⁄es
 = (
byãs_tŸÆ
 + 
z⁄e_byãs
 - 1) / zone_bytes;

200 i‡(
byãs_tŸÆ
 < 
ƒ_z⁄es
 * 
td
->
o
.
z⁄e_skù
)

201 
ƒ_z⁄es
 = 
byãs_tŸÆ
 / 
z⁄e_byãs
;

202 
byãs_tŸÆ
 -
ƒ_z⁄es
 * 
td
->
o
.
z⁄e_skù
;

210 i‡(
td
->
o
.
do_vîify
 &&Åd->o.
vîify
 && 
	`td_wrôe
(td)) {

211 i‡(
	`td_rw
(
td
)) {

212 
≥rc
 = 50;

214 i‡(
td
->
o
.
rwmix
[
DDIR_WRITE
])

215 
≥rc
 = 
td
->
o
.
rwmix
[
DDIR_WRITE
];

217 
byãs_tŸÆ
 +(byãs_tŸÆ * 
≥rc
) / 100;

219 
byãs_tŸÆ
 <<= 1;

222 i‡(
td
->
run°©e
 =
TD_RUNNING
 ||Åd->run°©ê=
TD_VERIFYING
) {

223 
≥rc
, 
≥rc_t
;

225 
byãs_d⁄e
 = 
	`ddú_rw_sum
(
td
->
io_byãs
);

227 i‡(
byãs_tŸÆ
) {

228 
≥rc
 = (Ë
byãs_d⁄e
 / (Ë
byãs_tŸÆ
;

229 i‡(
≥rc
 > 1.0)

230 
≥rc
 = 1.0;

232 
≥rc
 = 0.0;

234 i‡(
td
->
o
.
time_ba£d
) {

235 i‡(
timeout
) {

236 
≥rc_t
 = (Ë
ñ≠£d
 / (Ë
timeout
;

237 i‡(
≥rc_t
 < 
≥rc
)

238 
≥rc
 = 
≥rc_t
;

244 
≥rc
 = 0.0;

248 i‡(
≥rc
 == 0.0) {

249 
ëa_£c
 = 
timeout
;

251 
ëa_£c
 = (Ë(
ñ≠£d
 * (1.0 / 
≥rc
)) -Élapsed;

254 i‡(
td
->
o
.
timeout
 &&

255 
ëa_£c
 > (
timeout
 + 
d⁄e_£cs
 - 
ñ≠£d
))

256 
ëa_£c
 = 
timeout
 + 
d⁄e_£cs
 - 
ñ≠£d
;

257 } i‡(
td
->
run°©e
 =
TD_NOT_CREATED
 ||Åd->run°©ê=
TD_CREATED


258 || 
td
->
run°©e
 =
TD_INITIALIZED


259 || 
td
->
run°©e
 =
TD_SETTING_UP


260 || 
td
->
run°©e
 =
TD_RAMP


261 || 
td
->
run°©e
 =
TD_PRE_READING
) {

262 
öt64_t
 
t_ëa
 = 0, 
r_ëa
 = 0;

263 
øã_byãs
;

269 i‡(
td
->
o
.
timeout
) {

270 
uöt64_t
 
__timeout
 = 
td
->
o
.
timeout
;

271 
uöt64_t
 
°¨t_dñay
 = 
td
->
o
.start_delay;

272 
uöt64_t
 
ømp_time
 = 
td
->
o
.ramp_time;

274 
t_ëa
 = 
__timeout
 + 
°¨t_dñay
;

275 i‡(!
td
->
ømp_time_ovî
) {

276 
t_ëa
 +
ømp_time
;

278 
t_ëa
 /= 1000000ULL;

280 i‡((
td
->
run°©e
 =
TD_RAMP
Ë&& 
	`ö_ømp_time
(td)) {

281 
ømp_À·
;

283 
ømp_À·
 = 
	`mtime_sö˚_now
(&
td
->
ïoch
);

284 
ømp_À·
 = (ramp_left + 999) / 1000;

285 i‡(
ømp_À·
 <
t_ëa
)

286 
t_ëa
 -
ømp_À·
;

289 
øã_byãs
 = 0;

290 i‡(
	`td_ªad
(
td
))

291 
øã_byãs
 = 
td
->
o
.
øã
[
DDIR_READ
];

292 i‡(
	`td_wrôe
(
td
))

293 
øã_byãs
 +
td
->
o
.
øã
[
DDIR_WRITE
];

294 i‡(
	`td_åim
(
td
))

295 
øã_byãs
 +
td
->
o
.
øã
[
DDIR_TRIM
];

297 i‡(
øã_byãs
) {

298 
r_ëa
 = 
byãs_tŸÆ
 / 
øã_byãs
;

299 
r_ëa
 +(
td
->
o
.
°¨t_dñay
 / 1000000ULL);

302 i‡(
r_ëa
 && 
t_ëa
)

303 
ëa_£c
 = 
	`mö
(
r_ëa
, 
t_ëa
);

304 i‡(
r_ëa
)

305 
ëa_£c
 = 
r_ëa
;

306 i‡(
t_ëa
)

307 
ëa_£c
 = 
t_ëa
;

309 
ëa_£c
 = 0;

314 
ëa_£c
 = 0;

317  
ëa_£c
;

318 
	}
}

320 
	$ˇlc_øã
(
unifõd_rw_ªp
, 
mtime
,

321 *
io_byãs
,

322 *
¥ev_io_byãs
, 
uöt64_t
 *
øã
)

324 
i
;

326 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

327 
diff
, 
this_øã
;

329 
diff
 = 
io_byãs
[
i
] - 
¥ev_io_byãs
[i];

330 i‡(
mtime
)

331 
this_øã
 = ((1000 * 
diff
Ë/ 
mtime
) / 1024;

333 
this_øã
 = 0;

335 i‡(
unifõd_rw_ªp
 =
UNIFIED_MIXED
) {

336 
øã
[
i
] = 0;

337 
øã
[0] +
this_øã
;

339 
øã
[
i
] = 
this_øã
;

341 
¥ev_io_byãs
[
i
] = 
io_byãs
[i];

343 
	}
}

345 
	$ˇlc_i›s
(
unifõd_rw_ªp
, 
mtime
,

346 *
io_i›s
,

347 *
¥ev_io_i›s
, *
i›s
)

349 
i
;

351 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

352 
diff
, 
this_i›s
;

354 
diff
 = 
io_i›s
[
i
] - 
¥ev_io_i›s
[i];

355 i‡(
mtime
)

356 
this_i›s
 = (
diff
 * 1000Ë/ 
mtime
;

358 
this_i›s
 = 0;

360 i‡(
unifõd_rw_ªp
 =
UNIFIED_MIXED
) {

361 
i›s
[
i
] = 0;

362 
i›s
[0] +
this_i›s
;

364 
i›s
[
i
] = 
this_i›s
;

366 
¥ev_io_i›s
[
i
] = 
io_i›s
[i];

368 
	}
}

373 
boﬁ
 
	$ëa_time_wôhö_¶ack
(
time
)

375  
time
 > ((
ëa_öãrvÆ_m£c
 * 95) / 100);

376 
	}
}

382 
boﬁ
 
	$ˇlc_thªad_°©us
(
jobs_ëa
 *
je
, 
f‹˚
)

384 
thªad_d©a
 *
td
;

385 
i
, 
unifõd_rw_ªp
;

386 
uöt64_t
 
øã_time
, 
di•_time
, 
bw_avg_time
, *
ëa_£cs
;

387 
io_byãs
[
DDIR_RWDIR_CNT
] = {};

388 
io_i›s
[
DDIR_RWDIR_CNT
] = {};

389 
time•ec
 
now
;

391 
øã_io_byãs
[
DDIR_RWDIR_CNT
];

392 
di•_io_byãs
[
DDIR_RWDIR_CNT
];

393 
di•_io_i›s
[
DDIR_RWDIR_CNT
];

394 
time•ec
 
øã_¥ev_time
, 
di•_¥ev_time
;

396 i‡(!
f‹˚
) {

397 i‡(!(
ouçut_f‹m©
 & 
FIO_OUTPUT_NORMAL
) &&

398 
f_out
 =
°dout
)

399  
Ál£
;

400 i‡(
ãmp_°Æl_ts
 || 
ëa_¥öt
 =
FIO_ETA_NEVER
)

401  
Ál£
;

403 i‡(!
	`ißây
(
STDOUT_FILENO
Ë&& (
ëa_¥öt
 !
FIO_ETA_ALWAYS
))

404  
Ál£
;

407 i‡(!
	`ddú_rw_sum
(
øã_io_byãs
))

408 
	`fûl_°¨t_time
(&
øã_¥ev_time
);

409 i‡(!
	`ddú_rw_sum
(
di•_io_byãs
))

410 
	`fûl_°¨t_time
(&
di•_¥ev_time
);

412 
ëa_£cs
 = 
	`mÆloc
(
thªad_numbî
 * (
uöt64_t
));

413 
	`mem£t
(
ëa_£cs
, 0, 
thªad_numbî
 * (
uöt64_t
));

415 
je
->
ñ≠£d_£c
 = (
	`mtime_sö˚_gíesis
() + 999) / 1000;

417 
bw_avg_time
 = 
ULONG_MAX
;

418 
unifõd_rw_ªp
 = 0;

419 
	`f‹_óch_td
(
td
, 
i
) {

420 
unifõd_rw_ªp
 +
td
->
o
.unified_rw_rep;

421 i‡(
	`is_powî_of_2
(
td
->
o
.
kb_ba£
))

422 
je
->
is_pow2
 = 1;

423 
je
->
unô_ba£
 = 
td
->
o
.unit_base;

424 
je
->
sig_figs
 = 
td
->
o
.sig_figs;

425 i‡(
td
->
o
.
bw_avg_time
 < bw_avg_time)

426 
bw_avg_time
 = 
td
->
o
.bw_avg_time;

427 i‡(
td
->
run°©e
 =
TD_RUNNING
 ||Åd->run°©ê=
TD_VERIFYING


428 || 
td
->
run°©e
 =
TD_FSYNCING


429 || 
td
->
run°©e
 =
TD_PRE_READING


430 || 
td
->
run°©e
 =
TD_FINISHING
) {

431 
je
->
ƒ_ru¬ög
++;

432 i‡(
	`td_ªad
(
td
)) {

433 
je
->
t_øã
[0] +
td
->
o
.
øã
[
DDIR_READ
];

434 
je
->
t_i›s
[0] +
td
->
o
.
øã_i›s
[
DDIR_READ
];

435 
je
->
m_øã
[0] +
td
->
o
.
øãmö
[
DDIR_READ
];

436 
je
->
m_i›s
[0] +
td
->
o
.
øã_i›s_mö
[
DDIR_READ
];

438 i‡(
	`td_wrôe
(
td
)) {

439 
je
->
t_øã
[1] +
td
->
o
.
øã
[
DDIR_WRITE
];

440 
je
->
t_i›s
[1] +
td
->
o
.
øã_i›s
[
DDIR_WRITE
];

441 
je
->
m_øã
[1] +
td
->
o
.
øãmö
[
DDIR_WRITE
];

442 
je
->
m_i›s
[1] +
td
->
o
.
øã_i›s_mö
[
DDIR_WRITE
];

444 i‡(
	`td_åim
(
td
)) {

445 
je
->
t_øã
[2] +
td
->
o
.
øã
[
DDIR_TRIM
];

446 
je
->
t_i›s
[2] +
td
->
o
.
øã_i›s
[
DDIR_TRIM
];

447 
je
->
m_øã
[2] +
td
->
o
.
øãmö
[
DDIR_TRIM
];

448 
je
->
m_i›s
[2] +
td
->
o
.
øã_i›s_mö
[
DDIR_TRIM
];

451 
je
->
fûes_›í
 +
td
->
ƒ_›í_fûes
;

452 } i‡(
td
->
run°©e
 =
TD_RAMP
) {

453 
je
->
ƒ_ru¬ög
++;

454 
je
->
ƒ_ømp
++;

455 } i‡(
td
->
run°©e
 =
TD_SETTING_UP
)

456 
je
->
ƒ_£âög_up
++;

457 i‡(
td
->
run°©e
 < 
TD_RUNNING
)

458 
je
->
ƒ_≥ndög
++;

460 i‡(
je
->
ñ≠£d_£c
 >= 3)

461 
ëa_£cs
[
i
] = 
	`thªad_ëa
(
td
);

463 
ëa_£cs
[
i
] = 
INT_MAX
;

465 
	`check_°r_upd©e
(
td
);

467 i‡(
td
->
run°©e
 > 
TD_SETTING_UP
) {

468 
ddú
;

470 
ddú
 = 0; ddú < 
DDIR_RWDIR_CNT
; ddir++) {

471 i‡(
unifõd_rw_ªp
) {

472 
io_byãs
[0] +
td
->io_byãs[
ddú
];

473 
io_i›s
[0] +
td
->
io_blocks
[
ddú
];

475 
io_byãs
[
ddú
] +
td
->io_bytes[ddir];

476 
io_i›s
[
ddú
] +
td
->
io_blocks
[ddir];

482 i‡(
exôÆl_⁄_ãrmö©e
) {

483 
je
->
ëa_£c
 = 
INT_MAX
;

484 
	`f‹_óch_td
(
td
, 
i
) {

485 i‡(
ëa_£cs
[
i
] < 
je
->
ëa_£c
)

486 
je
->
ëa_£c
 = 
ëa_£cs
[
i
];

489 
ëa_°⁄e
 = 0;

491 
je
->
ëa_£c
 = 0;

492 
	`f‹_óch_td
(
td
, 
i
) {

493 i‡((
td
->
run°©e
 =
TD_NOT_CREATED
Ë&&Åd->
o
.
°⁄ewÆl
)

494 
ëa_°⁄e
 +
ëa_£cs
[
i
];

496 i‡(
ëa_£cs
[
i
] > 
je
->
ëa_£c
)

497 
je
->
ëa_£c
 = 
ëa_£cs
[
i
];

500 
je
->
ëa_£c
 +
ëa_°⁄e
;

503 
	`‰ì
(
ëa_£cs
);

505 
	`fio_gëtime
(&
now
, 
NULL
);

506 
øã_time
 = 
	`mtime_sö˚
(&
øã_¥ev_time
, &
now
);

508 i‡(
wrôe_bw_log
 && 
øã_time
 > 
bw_avg_time
 && !
	`ö_ømp_time
(
td
)) {

509 
	`ˇlc_øã
(
unifõd_rw_ªp
, 
øã_time
, 
io_byãs
, 
øã_io_byãs
,

510 
je
->
øã
);

511 
	`mem˝y
(&
øã_¥ev_time
, &
now
, (now));

512 
	`ªgrow_agg_logs
();

513 
	`f‹_óch_rw_ddú
(
ddú
) {

514 
	`add_agg_ßm∂e
(
	`ßm∂e_vÆ
(
je
->
øã
[
ddú
]), ddir, 0);

518 
di•_time
 = 
	`mtime_sö˚
(&
di•_¥ev_time
, &
now
);

520 i‡(!
f‹˚
 && !
	`ëa_time_wôhö_¶ack
(
di•_time
))

521  
Ál£
;

523 
	`ˇlc_øã
(
unifõd_rw_ªp
, 
di•_time
, 
io_byãs
, 
di•_io_byãs
, 
je
->
øã
);

524 
	`ˇlc_i›s
(
unifõd_rw_ªp
, 
di•_time
, 
io_i›s
, 
di•_io_i›s
, 
je
->
i›s
);

526 
	`mem˝y
(&
di•_¥ev_time
, &
now
, (now));

528 i‡(!
f‹˚
 && !
je
->
ƒ_ru¬ög
 && !je->
ƒ_≥ndög
)

529  
Ál£
;

531 
je
->
ƒ_thªads
 = 
thªad_numbî
;

532 
	`upd©e_c⁄dí£d_°r
(
__run_°r
, 
run_°r
);

533 
	`mem˝y
(
je
->
run_°r
,Ñun_°r, 
	`°æí
(run_str));

534  
åue
;

535 
	}
}

537 
	$gí_ëa_°r
(
jobs_ëa
 *
je
, *
p
, 
size_t
 
À·
,

538 **
øã_°r
, **
i›s_°r
)

540 c⁄° 
c
[
DDIR_RWDIR_CNT
] = {'r', 'w', 't'};

541 
boﬁ
 
has
[
DDIR_RWDIR_CNT
];

542 
boﬁ
 
has_™y
 = 
Ál£
;

543 c⁄° *
£p
;

544 
l
 = 0;

546 
	`f‹_óch_rw_ddú
(
ddú
) {

547 
has
[
ddú
] = (
je
->
øã
[ddú] || je->
i›s
[ddir]);

548 
has_™y
 |
has
[
ddú
];

550 i‡(!
has_™y
)

553 
l
 +
	`¢¥ötf
(
p
 +Ü, 
À·
 -Ü, "[");

554 
£p
 = "";

555 
	`f‹_óch_rw_ddú
(
ddú
) {

556 i‡(
has
[
ddú
]) {

557 
l
 +
	`¢¥ötf
(
p
 +Ü, 
À·
 -Ü, "%s%c=%s",

558 
£p
, 
c
[
ddú
], 
øã_°r
[ddir]);

559 
£p
 = ",";

562 
l
 +
	`¢¥ötf
(
p
 +Ü, 
À·
 -Ü, "][");

563 
£p
 = "";

564 
	`f‹_óch_rw_ddú
(
ddú
) {

565 i‡(
has
[
ddú
]) {

566 
l
 +
	`¢¥ötf
(
p
 +Ü, 
À·
 -Ü, "%s%c=%s",

567 
£p
, 
c
[
ddú
], 
i›s_°r
[ddir]);

568 
£p
 = ",";

571 
l
 +
	`¢¥ötf
(
p
 +Ü, 
À·
 -Ü, " IOPS]");

573  
l
;

574 
	}
}

576 
	$di•œy_thªad_°©us
(
jobs_ëa
 *
je
)

578 
time•ec
 
di•_ëa_√w_löe
;

579 
ëa_√w_löe_öô
, 
ëa_√w_löe_≥ndög
;

580 
löñí_œ°
;

581 
ëa_good
;

582 
ouçut
[
	`__THREAD_RUNSTR_SZ
(
REAL_MAX_JOBS
Ë+ 512], *
p
 = output;

583 
ëa_°r
[128];

584 
≥rc
 = 0.0;

586 i‡(
je
->
ëa_£c
 !
INT_MAX
 && je->
ñ≠£d_£c
) {

587 
≥rc
 = (Ë
je
->
ñ≠£d_£c
 / (Ë(je->ñ≠£d_£¯+ je->
ëa_£c
);

588 
	`ëa_to_°r
(
ëa_°r
, 
je
->
ëa_£c
);

591 i‡(
ëa_√w_löe_≥ndög
) {

592 
ëa_√w_löe_≥ndög
 = 0;

593 
löñí_œ°
 = 0;

594 
p
 +
	`•rötf
(p, "\n");

597 
p
 +
	`•rötf
’, "Jobs: %d (f=%d)", 
je
->
ƒ_ru¬ög
, je->
fûes_›í
);

600 i‡(
je
->
m_øã
[0] || je->m_rate[1] || je->m_rate[2] ||

601 
je
->
t_øã
[0] || je->t_rate[1] || je->t_rate[2]) {

602 *
å
, *
mr
;

604 
mr
 = 
	`num2°r
(
je
->
m_øã
[0] + je->m_rate[1] + je->m_rate[2],

605 
je
->
sig_figs
, 1, je->
is_pow2
, 
N2S_BYTEPERSEC
);

606 
å
 = 
	`num2°r
(
je
->
t_øã
[0] + je->t_rate[1] + je->t_rate[2],

607 
je
->
sig_figs
, 1, je->
is_pow2
, 
N2S_BYTEPERSEC
);

609 
p
 +
	`•rötf
’, ", %s-%s", 
mr
, 
å
);

610 
	`‰ì
(
å
);

611 
	`‰ì
(
mr
);

612 } i‡(
je
->
m_i›s
[0] || je->m_iops[1] || je->m_iops[2] ||

613 
je
->
t_i›s
[0] || je->t_iops[1] || je->t_iops[2]) {

614 
p
 +
	`•rötf
(p, ", %d-%d IOPS",

615 
je
->
m_i›s
[0] + je->m_iops[1] + je->m_iops[2],

616 
je
->
t_i›s
[0] + je->t_iops[1] + je->t_iops[2]);

620 i‡(
je
->
ëa_£c
 !
INT_MAX
 && je->
ƒ_ru¬ög
) {

621 
≥rc_°r
[32];

622 *
i›s_°r
[
DDIR_RWDIR_CNT
];

623 *
øã_°r
[
DDIR_RWDIR_CNT
];

624 
size_t
 
À·
;

625 
l
;

626 
ddú
;

627 
löñí
;

629 i‡((!
je
->
ëa_£c
 && !
ëa_good
Ë|| je->
ƒ_ømp
 =je->
ƒ_ru¬ög
 ||

630 
je
->
ëa_£c
 == -1)

631 
	`°r˝y
(
≥rc_°r
, "-.-%");

633 
mu…
 = 100.0;

635 i‡(
je
->
ƒ_£âög_up
 && je->
ƒ_ru¬ög
)

636 
mu…
 *(1.0 - (Ë
je
->
ƒ_£âög_up
 / (Ëje->
ƒ_ru¬ög
);

638 
ëa_good
 = 1;

639 
≥rc
 *
mu…
;

640 
	`•rötf
(
≥rc_°r
, "%3.1f%%", 
≥rc
);

643 
ddú
 = 0; ddú < 
DDIR_RWDIR_CNT
; ddir++) {

644 
øã_°r
[
ddú
] = 
	`num2°r
(
je
->
øã
[ddir], 4,

645 1024, 
je
->
is_pow2
, je->
unô_ba£
);

646 
i›s_°r
[
ddú
] = 
	`num2°r
(
je
->
i›s
[ddú], 4, 1, 0, 
N2S_NONE
);

649 
À·
 = (
ouçut
Ë- (
p
 - output) - 1;

650 
l
 = 
	`¢¥ötf
(
p
, 
À·
, ": [%s][%s]", 
je
->
run_°r
, 
≥rc_°r
);

651 
l
 +
	`gí_ëa_°r
(
je
, 
p
 +Ü, 
À·
 -Ü, 
øã_°r
, 
i›s_°r
);

652 
l
 +
	`¢¥ötf
(
p
 +Ü, 
À·
 -Ü, "[ë®%s]", 
ëa_°r
);

655 i‡(
l
 >
À·
)

656 
l
 = 
À·
 - 1;

657 
p
 +
l
;

658 
löñí
 = 
p
 - 
ouçut
;

659 i‡(
l
 >0 && 
löñí
 < 
löñí_œ°
)

660 
p
 +
	`•rötf
’, "%*s", 
löñí_œ°
 - 
löñí
, "");

661 
löñí_œ°
 = 
löñí
;

663 
ddú
 = 0; ddú < 
DDIR_RWDIR_CNT
; ddir++) {

664 
	`‰ì
(
øã_°r
[
ddú
]);

665 
	`‰ì
(
i›s_°r
[
ddú
]);

668 
	`•rötf
(
p
, "\r");

670 
	`¥ötf
("%s", 
ouçut
);

672 i‡(!
ëa_√w_löe_öô
) {

673 
	`fio_gëtime
(&
di•_ëa_√w_löe
, 
NULL
);

674 
ëa_√w_löe_öô
 = 1;

675 } i‡(
ëa_√w_löe
 && 
	`mtime_sö˚_now
(&
di•_ëa_√w_löe
) >Éta_new_line) {

676 
	`fio_gëtime
(&
di•_ëa_√w_löe
, 
NULL
);

677 
ëa_√w_löe_≥ndög
 = 1;

680 
	`fÊush
(
°dout
);

681 
	}
}

683 
jobs_ëa
 *
	$gë_jobs_ëa
(
boﬁ
 
f‹˚
, 
size_t
 *
size
)

685 
jobs_ëa
 *
je
;

687 i‡(!
thªad_numbî
)

688  
NULL
;

690 *
size
 = (*
je
Ë+ 
THREAD_RUNSTR_SZ
 + 8;

691 
je
 = 
	`mÆloc
(*
size
);

692 i‡(!
je
)

693  
NULL
;

694 
	`mem£t
(
je
, 0, *
size
);

696 i‡(!
	`ˇlc_thªad_°©us
(
je
, 
f‹˚
)) {

697 
	`‰ì
(
je
);

698  
NULL
;

701 *
size
 = (*
je
Ë+ 
	`°æí
((*Ëje->
run_°r
) + 1;

702  
je
;

703 
	}
}

705 
	$¥öt_thªad_°©us
()

707 
jobs_ëa
 *
je
;

708 
size_t
 
size
;

710 
je
 = 
	`gë_jobs_ëa
(
Ál£
, &
size
);

711 i‡(
je
) {

712 
	`di•œy_thªad_°©us
(
je
);

713 
	`‰ì
(
je
);

715 
	}
}

717 
	$¥öt_°©us_öô
(
thr_numbî
)

719 
jobs_ëa_∑cked
 
jï
;

721 
	`compûëime_as£π
((
jobs_ëa
Ë=(
jï
), "jobs_eta");

723 
	`DRD_IGNORE_VAR
(
__run_°r
);

724 
__run_°r
[
thr_numbî
] = 'P';

725 
	`upd©e_c⁄dí£d_°r
(
__run_°r
, 
run_°r
);

726 
	}
}

	@exp/test-expression-parser.c

22 
	~<°dio.h
>

23 
	~<°rög.h
>

25 
	~"../y.èb.h
"

27 
evÆu©e_¨ôhmëic_ex¥essi⁄
(c⁄° *
buf„r
, *
ivÆ
,

28 *
dvÆ
, 
im∂õd_unôs
, 
is_time
);

30 
	$maö
(
¨gc
, *
¨gv
[])

32 
rc
, 
bye
 = 0;

33 
ªsu…
;

34 
dªsu…
;

35 
buf„r
[100];

38 i‡(
	`fgës
(
buf„r
, 90, 
°dö
Ë=
NULL
)

40 
rc
 = 
	`°æí
(
buf„r
);

41 i‡(
rc
 > 0 && 
buf„r
[rc - 1] == '\n')

42 
buf„r
[
rc
 - 1] = '\0';

43 
rc
 = 
	`evÆu©e_¨ôhmëic_ex¥essi⁄
(
buf„r
, &
ªsu…
, &
dªsu…
, 1.0, 0);

44 i‡(!
rc
) {

45 
	`¥ötf
("%Œd (%20.20lf)\n", 
ªsu…
, 
dªsu…
);

47 
	`Ârötf
(
°dîr
, "SyntaxÉrror\n");

48 
ªsu…
 = 0;

49 
dªsu…
 = 0;

51 } !
bye
);

53 
	}
}

	@fifo.c

22 
	~<°dio.h
>

23 
	~<°dlib.h
>

24 
	~<°rög.h
>

26 
	~"fifo.h
"

27 
	~"mömax.h
"

29 
fifo
 *
	$fifo_Æloc
(
size
)

31 
fifo
 *fifo;

33 
fifo
 = 
	`mÆloc
((fifo));

34 i‡(!
fifo
)

35  
NULL
;

37 
fifo
->
buf„r
 = 
	`mÆloc
(
size
);

38 
fifo
->
size
 = size;

39 
fifo
->
ö
 = fifo->
out
 = 0;

41  
fifo
;

42 
	}
}

44 
	$fifo_‰ì
(
fifo
 *fifo)

46 
	`‰ì
(
fifo
->
buf„r
);

47 
	`‰ì
(
fifo
);

48 
	}
}

50 
	$fifo_put
(
fifo
 *fifo, *
buf„r
, 
Àn
)

52 
l
;

54 
Àn
 = 
	`mö
÷í, 
	`fifo_room
(
fifo
));

57 
l
 = 
	`mö
(
Àn
, 
fifo
->
size
 - (fifo->
ö
 & (fifo->size - 1)));

58 
	`mem˝y
(
fifo
->
buf„r
 + (fifo->
ö
 & (fifo->
size
 - 1)), buf„r, 
l
);

61 
	`mem˝y
(
fifo
->
buf„r
, buf„∏+ 
l
, 
Àn
 -Ü);

68 
fifo
->
ö
 +
Àn
;

70  
Àn
;

71 
	}
}

73 
	$fifo_gë
(
fifo
 *fifo, *
buf
, 
Àn
)

75 
Àn
 = 
	`mö
÷í, 
fifo
->
ö
 - fifo->
out
);

77 i‡(
buf
) {

78 
l
;

83 
l
 = 
	`mö
(
Àn
, 
fifo
->
size
 - (fifo->
out
 & (fifo->size - 1)));

84 
	`mem˝y
(
buf
, 
fifo
->
buf„r
 + (fifo->
out
 & (fifo->
size
 - 1)), 
l
);

89 
	`mem˝y
(
buf
 + 
l
, 
fifo
->
buf„r
, 
Àn
 -Ü);

92 
fifo
->
out
 +
Àn
;

94 i‡(
fifo
->
ö
 =fifo->
out
)

95 
fifo
->
ö
 = fifo->
out
 = 0;

97  
Àn
;

98 
	}
}

	@fifo.h

1 #i‚de‡
FIO_FIFO_H


2 
	#FIO_FIFO_H


	)

24 
	sfifo
 {

25 *
	mbuf„r
;

26 
	msize
;

27 
	mö
;

28 
	mout
;

31 
fifo
 *
fifo_Æloc
();

32 
fifo_put
(
fifo
 *, *, );

33 
fifo_gë
(
fifo
 *, *, );

34 
fifo_‰ì
(
fifo
 *);

36 
ölöe
 
	$fifo_Àn
(
fifo
 *fifo)

38  
fifo
->
ö
 - fifo->
out
;

39 
	}
}

41 
ölöe
 
	$fifo_room
(
fifo
 *fifo)

43  
fifo
->
size
 - fifo->
ö
 + fifo->
out
;

44 
	}
}

	@file.h

1 #i‚de‡
FIO_FILE_H


2 
	#FIO_FILE_H


	)

4 
	~<°rög.h
>

5 
	~"compûî/compûî.h
"

6 
	~"io_ddú.h
"

7 
	~"Êi°.h
"

8 
	~"lib/zùf.h
"

9 
	~"lib/axm≠.h
"

10 
	~"lib/lf§.h
"

11 
	~"lib/gauss.h
"

14 
	gz⁄ed_block_devi˚_öfo
;

19 
	efio_fûëy≥
 {

20 
	mFIO_TYPE_FILE
 = 1,

21 
	mFIO_TYPE_BLOCK
,

22 
	mFIO_TYPE_CHAR
,

23 
	mFIO_TYPE_PIPE
,

26 
	efio_fûe_Êags
 {

27 
	mFIO_FILE_›í
 = 1 << 0,

28 
	mFIO_FILE_˛osög
 = 1 << 1,

29 
	mFIO_FILE_exãnd
 = 1 << 2,

30 
	mFIO_FILE_d⁄e
 = 1 << 3,

31 
	mFIO_FILE_size_known
 = 1 << 4,

32 
	mFIO_FILE_hashed
 = 1 << 5,

33 
	mFIO_FILE_∑πül_mm≠
 = 1 << 6,

34 
	mFIO_FILE_axm≠
 = 1 << 7,

35 
	mFIO_FILE_lf§
 = 1 << 8,

36 
	mFIO_FILE_smÆloc
 = 1 << 9,

39 
	efûe_lock_mode
 {

40 
	mFILE_LOCK_NONE
,

41 
	mFILE_LOCK_EXCLUSIVE
,

42 
	mFILE_LOCK_READWRITE
,

51 
	mFIO_FSERVICE_RANDOM
 = 1,

52 
	mFIO_FSERVICE_RR
 = 2,

53 
	mFIO_FSERVICE_SEQ
 = 3,

54 
	m__FIO_FSERVICE_NONUNIFORM
 = 0x100,

55 
	mFIO_FSERVICE_ZIPF
 = 
__FIO_FSERVICE_NONUNIFORM
 | 4,

56 
	mFIO_FSERVICE_PARETO
 = 
__FIO_FSERVICE_NONUNIFORM
 | 5,

57 
	mFIO_FSERVICE_GAUSS
 = 
__FIO_FSERVICE_NONUNIFORM
 | 6,

59 
	mFIO_FSERVICE_SHIFT
 = 10,

66 
	efio_ÁŒoˇã_mode
 {

67 
	mFIO_FALLOCATE_NONE
 = 1,

68 
	mFIO_FALLOCATE_POSIX
 = 2,

69 
	mFIO_FALLOCATE_KEEP_SIZE
 = 3,

70 
	mFIO_FALLOCATE_NATIVE
 = 4,

71 
	mFIO_FALLOCATE_TRUNCATE
 = 5,

78 
	sfio_fûe
 {

79 
Êi°_hód
 
	mhash_li°
;

80 
fio_fûëy≥
 
	mfûëy≥
;

82 
	mfd
;

83 
	mshadow_fd
;

84 #ifde‡
WIN32


85 
HANDLE
 
	mhFûe
;

86 
HANDLE
 
	mioCP
;

92 
	mmaj‹
, 
	mmö‹
;

93 
	mfûío
;

94 *
	mfûe_«me
;

100 
uöt64_t
 
	mªÆ_fûe_size
;

101 
uöt64_t
 
	mfûe_off£t
;

102 
uöt64_t
 
	mio_size
;

107 
z⁄ed_block_devi˚_öfo
 *
	mzbd_öfo
;

109 
uöt32_t
 
	mmö_z⁄e
;

110 
uöt32_t
 
	mmax_z⁄e
;

115 
uöt64_t
 
	mœ°_pos
[
DDIR_RWDIR_CNT
];

116 
uöt64_t
 
	mœ°_°¨t
[
DDIR_RWDIR_CNT
];

118 
uöt64_t
 
	mfú°_wrôe
;

119 
uöt64_t
 
	mœ°_wrôe
;

125 
uöt64_t
 *
	mœ°_wrôe_comp
;

126 
	mœ°_wrôe_idx
;

131 
uöt64_t
 
	mígöe_pos
;

136 *
	mígöe_d©a
;

142 
fio_£m
 *
	mlock
;

143 
fio_rwlock
 *
	mrwlock
;

150 
axm≠
 *
	mio_axm≠
;

151 
fio_lf§
 
	mlf§
;

158 
zùf_°©e
 
	mzùf
;

159 
gauss_°©e
 
	mgauss
;

162 
	mª„ªn˚s
;

163 
fio_fûe_Êags
 
	mÊags
;

165 
disk_utû
 *
	mdu
;

168 
	#FILE_ENG_DATA
(
f
Ë((f)->
ígöe_d©a
)

	)

169 
	#FILE_SET_ENG_DATA
(
f
, 
d©a
Ë((f)->
ígöe_d©a
 = (d©a))

	)

171 
	#FILE_FLAG_FNS
(
«me
) \

172 
ölöe
 
fio_fûe_£t_
##
	`«me
(
fio_fûe
 *
f
) \

174 (
f
)->
Êags
 = (
fio_fûe_Êags
Ë((f)->Êag†| 
FIO_FILE_
##
«me
); \

176 
ölöe
 
fio_fûe_˛ór_
##
	`«me
(
fio_fûe
 *
f
) \

178 (
f
)->
Êags
 = (
fio_fûe_Êags
Ë((f)->Êag†& ~
FIO_FILE_
##
«me
); \

180 
ölöe
 
fio_fûe_
##
	`«me
(
fio_fûe
 *
f
) \

182  ((
f
)->
Êags
 & 
FIO_FILE_
##
«me
) != 0; \

183 }

	)

185 
FILE_FLAG_FNS
(
›í
);

186 
FILE_FLAG_FNS
(
˛osög
);

187 
FILE_FLAG_FNS
(
exãnd
);

188 
FILE_FLAG_FNS
(
d⁄e
);

189 
FILE_FLAG_FNS
(
size_known
);

190 
FILE_FLAG_FNS
(
hashed
);

191 
FILE_FLAG_FNS
(
∑πül_mm≠
);

192 
FILE_FLAG_FNS
(
axm≠
);

193 
FILE_FLAG_FNS
(
lf§
);

194 
FILE_FLAG_FNS
(
smÆloc
);

195 #unde‡
FILE_FLAG_FNS


200 
	gthªad_d©a
;

201 
˛o£_fûes
(
thªad_d©a
 *);

202 
˛o£_™d_‰ì_fûes
(
thªad_d©a
 *);

203 
uöt64_t
 
gë_°¨t_off£t
(
thªad_d©a
 *, 
fio_fûe
 *);

204 
__mu°_check
 
£tup_fûes
(
thªad_d©a
 *);

205 
__mu°_check
 
fûe_övÆid©e_ˇche
(
thªad_d©a
 *, 
fio_fûe
 *);

206 #ifde‡
__˝lu•lus


209 
__mu°_check
 
gíîic_›í_fûe
(
thªad_d©a
 *, 
fio_fûe
 *);

210 
__mu°_check
 
gíîic_˛o£_fûe
(
thªad_d©a
 *, 
fio_fûe
 *);

211 
__mu°_check
 
gíîic_gë_fûe_size
(
thªad_d©a
 *, 
fio_fûe
 *);

212 
__mu°_check
 
gíîic_¥ï›uœã_fûe
(
thªad_d©a
 *, 
fio_fûe
 *);

213 #ifde‡
__˝lu•lus


216 
__mu°_check
 
fûe_lookup_›í
(
fio_fûe
 *
f
, 
Êags
);

217 
boﬁ
 
__mu°_check
 
¥e_ªad_fûes
(
thªad_d©a
 *);

218 
gë_ønd_fûe_size
(
thªad_d©a
 *
td
);

219 
add_fûe
(
thªad_d©a
 *, const *, , );

220 
add_fûe_ex˛usive
(
thªad_d©a
 *, const *);

221 
gë_fûe
(
fio_fûe
 *);

222 
__mu°_check
 
put_fûe
(
thªad_d©a
 *, 
fio_fûe
 *);

223 
put_fûe_log
(
thªad_d©a
 *, 
fio_fûe
 *);

224 
lock_fûe
(
thªad_d©a
 *, 
fio_fûe
 *, 
fio_ddú
);

225 
u∆ock_fûe
(
thªad_d©a
 *, 
fio_fûe
 *);

226 
u∆ock_fûe_Æl
(
thªad_d©a
 *, 
fio_fûe
 *);

227 
add_dú_fûes
(
thªad_d©a
 *, const *);

228 
boﬁ
 
öô_øndom_m≠
(
thªad_d©a
 *);

229 
dup_fûes
(
thªad_d©a
 *, thread_data *);

230 
gë_fûío
(
thªad_d©a
 *, const *);

231 
‰ì_ªÀa£_fûes
(
thªad_d©a
 *);

232 
fûe£tup_mem_‰ì
();

233 
fio_fûe_ª£t
(
thªad_d©a
 *, 
fio_fûe
 *);

234 
boﬁ
 
fio_fûes_d⁄e
(
thªad_d©a
 *);

235 
boﬁ
 
exi°s_™d_nŸ_ªgfûe
(const *);

236 
fio_£t_dúe˘io
(
thªad_d©a
 *, 
fio_fûe
 *);

237 
fio_fûe_‰ì
(
fio_fûe
 *);

	@filehash.c

1 
	~<°dlib.h
>

2 
	~<as£π.h
>

4 
	~"fio.h
"

5 
	~"Êi°.h
"

6 
	~"hash.h
"

7 
	~"fûehash.h
"

8 
	~"smÆloc.h
"

9 
	~"lib/bloom.h
"

11 
	#HASH_BUCKETS
 512

	)

12 
	#HASH_MASK
 (
HASH_BUCKETS
 - 1)

	)

14 
	#BLOOM_SIZE
 16*1024*1024

	)

16 
	gfûe_hash_size
 = 
HASH_BUCKETS
 * (
Êi°_hód
);

18 
Êi°_hód
 *
	gfûe_hash
;

19 
fio_£m
 *
	ghash_lock
;

20 
bloom
 *
	gfûe_bloom
;

22 
	$hash
(c⁄° *
«me
)

24  
	`jhash
(
«me
, 
	`°æí
“ame), 0Ë& 
HASH_MASK
;

25 
	}
}

27 
	$fio_fûe_hash_lock
()

29 i‡(
hash_lock
)

30 
	`fio_£m_down
(
hash_lock
);

31 
	}
}

33 
	$fio_fûe_hash_u∆ock
()

35 i‡(
hash_lock
)

36 
	`fio_£m_up
(
hash_lock
);

37 
	}
}

39 
	$ªmove_fûe_hash
(
fio_fûe
 *
f
)

41 
	`fio_£m_down
(
hash_lock
);

43 i‡(
	`fio_fûe_hashed
(
f
)) {

44 
	`as£π
(!
	`Êi°_em±y
(&
f
->
hash_li°
));

45 
	`Êi°_dñ_öô
(&
f
->
hash_li°
);

46 
	`fio_fûe_˛ór_hashed
(
f
);

49 
	`fio_£m_up
(
hash_lock
);

50 
	}
}

52 
fio_fûe
 *
	$__lookup_fûe_hash
(c⁄° *
«me
)

54 
Êi°_hód
 *
buckë
 = &
fûe_hash
[
	`hash
(
«me
)];

55 
Êi°_hód
 *
n
;

57 
	`Êi°_f‹_óch
(
n
, 
buckë
) {

58 
fio_fûe
 *
f
 = 
	`Êi°_íåy
(
n
, fio_fûe, 
hash_li°
);

60 i‡(!
f
->
fûe_«me
)

63 i‡(!
	`°rcmp
(
f
->
fûe_«me
, 
«me
))

64  
f
;

67  
NULL
;

68 
	}
}

70 
fio_fûe
 *
	$lookup_fûe_hash
(c⁄° *
«me
)

72 
fio_fûe
 *
f
;

74 
	`fio_£m_down
(
hash_lock
);

75 
f
 = 
	`__lookup_fûe_hash
(
«me
);

76 
	`fio_£m_up
(
hash_lock
);

77  
f
;

78 
	}
}

80 
fio_fûe
 *
	$add_fûe_hash
(
fio_fûe
 *
f
)

82 
fio_fûe
 *
Æüs
;

84 i‡(
	`fio_fûe_hashed
(
f
))

85  
NULL
;

87 
	`INIT_FLIST_HEAD
(&
f
->
hash_li°
);

89 
	`fio_£m_down
(
hash_lock
);

91 
Æüs
 = 
	`__lookup_fûe_hash
(
f
->
fûe_«me
);

92 i‡(!
Æüs
) {

93 
	`fio_fûe_£t_hashed
(
f
);

94 
	`Êi°_add_èû
(&
f
->
hash_li°
, &
fûe_hash
[
	`hash
(f->
fûe_«me
)]);

97 
	`fio_£m_up
(
hash_lock
);

98  
Æüs
;

99 
	}
}

101 
boﬁ
 
	$fûe_bloom_exi°s
(c⁄° *
‚ame
, 
boﬁ
 
£t
)

103  
	`bloom_°rög
(
fûe_bloom
, 
‚ame
, 
	`°æí
(‚ame), 
£t
);

104 
	}
}

106 
	$fûe_hash_exô
()

108 
i
, 
has_íåõs
 = 0;

110 
	`fio_£m_down
(
hash_lock
);

111 
i
 = 0; i < 
HASH_BUCKETS
; i++)

112 
has_íåõs
 +!
	`Êi°_em±y
(&
fûe_hash
[
i
]);

113 
	`fio_£m_up
(
hash_lock
);

115 i‡(
has_íåõs
)

116 
	`log_îr
("fio: file hashÇotÉmpty onÉxit\n");

118 
	`s‰ì
(
fûe_hash
);

119 
fûe_hash
 = 
NULL
;

120 
	`fio_£m_ªmove
(
hash_lock
);

121 
hash_lock
 = 
NULL
;

122 
	`bloom_‰ì
(
fûe_bloom
);

123 
fûe_bloom
 = 
NULL
;

124 
	}
}

126 
	$fûe_hash_öô
()

128 
i
;

130 
fûe_hash
 = 
	`smÆloc
(
fûe_hash_size
);

132 
i
 = 0; i < 
HASH_BUCKETS
; i++)

133 
	`INIT_FLIST_HEAD
(&
fûe_hash
[
i
]);

135 
hash_lock
 = 
	`fio_£m_öô
(
FIO_SEM_UNLOCKED
);

136 
fûe_bloom
 = 
	`bloom_√w
(
BLOOM_SIZE
);

137 
	}
}

	@filehash.h

1 #i‚de‡
FIO_FILE_HASH_H


2 
	#FIO_FILE_HASH_H


	)

4 
	~"lib/ty≥s.h
"

6 
fûe_hash_öô
();

7 
fûe_hash_exô
();

8 
fio_fûe
 *
lookup_fûe_hash
(const *);

9 
fio_fûe
 *
add_fûe_hash
(fio_file *);

10 
ªmove_fûe_hash
(
fio_fûe
 *);

11 
fio_fûe_hash_lock
();

12 
fio_fûe_hash_u∆ock
();

13 
boﬁ
 
fûe_bloom_exi°s
(const *, bool);

	@filelock.c

6 
	~<öây≥s.h
>

7 
	~<°rög.h
>

8 
	~<uni°d.h
>

9 
	~<as£π.h
>

11 
	~"Êi°.h
"

12 
	~"fûñock.h
"

13 
	~"smÆloc.h
"

14 
	~"fio_£m.h
"

15 
	~"hash.h
"

16 
	~"log.h
"

18 
	sfio_fûñock
 {

19 
uöt32_t
 
	mhash
;

20 
fio_£m
 
	mlock
;

21 
Êi°_hód
 
	mli°
;

22 
	mª„ªn˚s
;

25 
	#MAX_FILELOCKS
 1024

	)

27 
	sfûñock_d©a
 {

28 
Êi°_hód
 
	mli°
;

29 
fio_£m
 
	mlock
;

31 
Êi°_hód
 
	m‰ì_li°
;

32 
fio_fûñock
 
	mffs
[
MAX_FILELOCKS
];

33 } *
	gÊd
;

35 
	$put_fûñock
(
fio_fûñock
 *
ff
)

37 
	`Êi°_add
(&
ff
->
li°
, &
Êd
->
‰ì_li°
);

38 
	}
}

40 
fio_fûñock
 *
	$__gë_fûñock
()

42 
fio_fûñock
 *
ff
;

44 i‡(
	`Êi°_em±y
(&
Êd
->
‰ì_li°
))

45  
NULL
;

47 
ff
 = 
	`Êi°_fú°_íåy
(&
Êd
->
‰ì_li°
, 
fio_fûñock
, 
li°
);

48 
	`Êi°_dñ_öô
(&
ff
->
li°
);

49  
ff
;

50 
	}
}

52 
fio_fûñock
 *
	$gë_fûñock
(
åylock
, *
ªåy
)

54 
fio_fûñock
 *
ff
;

57 
ff
 = 
	`__gë_fûñock
();

58 i‡(
ff
 || 
åylock
)

61 
	`fio_£m_up
(&
Êd
->
lock
);

62 
	`u¶ìp
(1000);

63 
	`fio_£m_down
(&
Êd
->
lock
);

64 *
ªåy
 = 1;

67  
ff
;

68 
	}
}

70 
	$fio_fûñock_öô
()

72 
i
;

74 
Êd
 = 
	`smÆloc
((*fld));

75 i‡(!
Êd
)

78 
	`INIT_FLIST_HEAD
(&
Êd
->
li°
);

79 
	`INIT_FLIST_HEAD
(&
Êd
->
‰ì_li°
);

81 i‡(
	`__fio_£m_öô
(&
Êd
->
lock
, 
FIO_SEM_UNLOCKED
))

82 
îr
;

84 
i
 = 0; i < 
MAX_FILELOCKS
; i++) {

85 
fio_fûñock
 *
ff
 = &
Êd
->
ffs
[
i
];

87 i‡(
	`__fio_£m_öô
(&
ff
->
lock
, 
FIO_SEM_UNLOCKED
))

88 
îr
;

89 
	`Êi°_add_èû
(&
ff
->
li°
, &
Êd
->
‰ì_li°
);

93 
îr
:

94 
	`fio_fûñock_exô
();

96 
	}
}

98 
	$fio_fûñock_exô
()

100 i‡(!
Êd
)

103 
	`as£π
(
	`Êi°_em±y
(&
Êd
->
li°
));

104 
	`__fio_£m_ªmove
(&
Êd
->
lock
);

106 !
	`Êi°_em±y
(&
Êd
->
‰ì_li°
)) {

107 
fio_fûñock
 *
ff
;

109 
ff
 = 
	`Êi°_fú°_íåy
(&
Êd
->
‰ì_li°
, 
fio_fûñock
, 
li°
);

111 
	`Êi°_dñ_öô
(&
ff
->
li°
);

112 
	`__fio_£m_ªmove
(&
ff
->
lock
);

115 
	`s‰ì
(
Êd
);

116 
Êd
 = 
NULL
;

117 
	}
}

119 
fio_fûñock
 *
	$fio_hash_föd
(
uöt32_t
 
hash
)

121 
Êi°_hód
 *
íåy
;

122 
fio_fûñock
 *
ff
;

124 
	`Êi°_f‹_óch
(
íåy
, &
Êd
->
li°
) {

125 
ff
 = 
	`Êi°_íåy
(
íåy
, 
fio_fûñock
, 
li°
);

126 i‡(
ff
->
hash
 == hash)

127  
ff
;

130  
NULL
;

131 
	}
}

133 
fio_fûñock
 *
	$fio_hash_gë
(
uöt32_t
 
hash
, 
åylock
)

135 
fio_fûñock
 *
ff
;

137 
ff
 = 
	`fio_hash_föd
(
hash
);

138 i‡(!
ff
) {

139 
ªåy
 = 0;

141 
ff
 = 
	`gë_fûñock
(
åylock
, &
ªåy
);

142 i‡(!
ff
)

143  
NULL
;

150 i‡(
ªåy
) {

151 
fio_fûñock
 *
__ff
;

153 
__ff
 = 
	`fio_hash_föd
(
hash
);

154 i‡(
__ff
) {

155 
	`put_fûñock
(
ff
);

156  
__ff
;

160 
ff
->
hash
 = hash;

161 
ff
->
ª„ªn˚s
 = 0;

162 
	`Êi°_add
(&
ff
->
li°
, &
Êd
->list);

165  
ff
;

166 
	}
}

168 
boﬁ
 
	$__fio_lock_fûe
(c⁄° *
‚ame
, 
åylock
)

170 
fio_fûñock
 *
ff
;

171 
uöt32_t
 
hash
;

173 
hash
 = 
	`jhash
(
‚ame
, 
	`°æí
(fname), 0);

175 
	`fio_£m_down
(&
Êd
->
lock
);

176 
ff
 = 
	`fio_hash_gë
(
hash
, 
åylock
);

177 i‡(
ff
)

178 
ff
->
ª„ªn˚s
++;

179 
	`fio_£m_up
(&
Êd
->
lock
);

181 i‡(!
ff
) {

182 
	`as£π
(
åylock
);

183  
åue
;

186 i‡(!
åylock
) {

187 
	`fio_£m_down
(&
ff
->
lock
);

188  
Ál£
;

191 i‡(!
	`fio_£m_down_åylock
(&
ff
->
lock
))

192  
Ál£
;

194 
	`fio_£m_down
(&
Êd
->
lock
);

200 i‡(
ff
->
ª„ªn˚s
 != 1) {

201 
ff
->
ª„ªn˚s
--;

202 
ff
 = 
NULL
;

205 
	`fio_£m_up
(&
Êd
->
lock
);

207 i‡(
ff
) {

208 
	`fio_£m_down
(&
ff
->
lock
);

209  
Ál£
;

212  
åue
;

213 
	}
}

215 
boﬁ
 
	$fio_åylock_fûe
(c⁄° *
‚ame
)

217  
	`__fio_lock_fûe
(
‚ame
, 1);

218 
	}
}

220 
	$fio_lock_fûe
(c⁄° *
‚ame
)

222 
	`__fio_lock_fûe
(
‚ame
, 0);

223 
	}
}

225 
	$fio_u∆ock_fûe
(c⁄° *
‚ame
)

227 
fio_fûñock
 *
ff
;

228 
uöt32_t
 
hash
;

230 
hash
 = 
	`jhash
(
‚ame
, 
	`°æí
(fname), 0);

232 
	`fio_£m_down
(&
Êd
->
lock
);

234 
ff
 = 
	`fio_hash_föd
(
hash
);

235 i‡(
ff
) {

236 
ªfs
 = --
ff
->
ª„ªn˚s
;

237 
	`fio_£m_up
(&
ff
->
lock
);

238 i‡(!
ªfs
) {

239 
	`Êi°_dñ_öô
(&
ff
->
li°
);

240 
	`put_fûñock
(
ff
);

243 
	`log_îr
("fio: fileÇot found for unlocking\n");

245 
	`fio_£m_up
(&
Êd
->
lock
);

246 
	}
}

	@filelock.h

1 #i‚de‡
FIO_LOCK_FILE_H


2 
	#FIO_LOCK_FILE_H


	)

4 
	~"lib/ty≥s.h
"

6 
fio_lock_fûe
(const *);

7 
boﬁ
 
fio_åylock_fûe
(const *);

8 
fio_u∆ock_fûe
(const *);

10 
fio_fûñock_öô
();

11 
fio_fûñock_exô
();

	@filesetup.c

1 
	~<uni°d.h
>

2 
	~<f˙é.h
>

3 
	~<°rög.h
>

4 
	~<as£π.h
>

5 
	~<dúít.h
>

6 
	~<libgí.h
>

7 
	~<sys/°©.h
>

9 
	~"fio.h
"

10 
	~"smÆloc.h
"

11 
	~"fûehash.h
"

12 
	~"›ti⁄s.h
"

13 
	~"os/os.h
"

14 
	~"hash.h
"

15 
	~"lib/axm≠.h
"

16 
	~"rwlock.h
"

17 
	~"zbd.h
"

19 #ifde‡
CONFIG_LINUX_FALLOCATE


20 
	~<löux/ÁŒoc.h
>

23 
FLIST_HEAD
(
fûíame_li°
);

28 
	sfûe_«me
 {

29 
Êi°_hód
 
	mli°
;

30 *
	mfûíame
;

33 
ölöe
 
	$˛ór_îr‹
(
thªad_d©a
 *
td
)

35 
td
->
îr‹
 = 0;

36 
td
->
vîr‹
[0] = '\0';

37 
	}
}

39 
	$«tive_ÁŒoˇã
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

41 
boﬁ
 
suc˚ss
;

43 
suc˚ss
 = 
	`fio_ÁŒoˇã
(
f
, 0, f->
ªÆ_fûe_size
);

44 
	`d¥öt
(
FD_FILE
, "native fallocate of file %s size %llu was "

45 "%ssuc˚ssful\n", 
f
->
fûe_«me
,

46 (Ë
f
->
ªÆ_fûe_size
,

47 !
suc˚ss
 ? "un": "");

49 i‡(
suc˚ss
)

50  
Ál£
;

52 i‡(
î∫o
 =
ENOSYS
)

53 
	`d¥öt
(
FD_FILE
, "native fallocate isÇot implemented\n");

55  
åue
;

56 
	}
}

58 
	$ÁŒoˇã_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

60 i‡(
td
->
o
.
fûl_devi˚
)

63 
td
->
o
.
ÁŒoˇã_mode
) {

64 
FIO_FALLOCATE_NATIVE
:

65 
	`«tive_ÁŒoˇã
(
td
, 
f
);

67 
FIO_FALLOCATE_NONE
:

69 #ifde‡
CONFIG_POSIX_FALLOCATE


70 
FIO_FALLOCATE_POSIX
: {

71 
r
;

73 
	`d¥öt
(
FD_FILE
, "posix_fallocate file %s size %llu\n",

74 
f
->
fûe_«me
,

75 (Ë
f
->
ªÆ_fûe_size
);

77 
r
 = 
	`posix_ÁŒoˇã
(
f
->
fd
, 0, f->
ªÆ_fûe_size
);

78 i‡(
r
 > 0)

79 
	`log_îr
("fio:Öosix_ÁŒoˇã faûs: %s\n", 
	`°ªº‹
(
r
));

83 #ifde‡
CONFIG_LINUX_FALLOCATE


84 
FIO_FALLOCATE_KEEP_SIZE
: {

85 
r
;

87 
	`d¥öt
(
FD_FILE
, "fallocate(FALLOC_FL_KEEP_SIZE) "

88 "fûê%†sizê%Œu\n", 
f
->
fûe_«me
,

89 (Ë
f
->
ªÆ_fûe_size
);

91 
r
 = 
	`ÁŒoˇã
(
f
->
fd
, 
FALLOC_FL_KEEP_SIZE
, 0, f->
ªÆ_fûe_size
);

92 i‡(
r
 != 0)

93 
	`td_vîr‹
(
td
, 
î∫o
, "fallocate");

98 
FIO_FALLOCATE_TRUNCATE
: {

99 
r
;

101 
	`d¥öt
(
FD_FILE
, "ftruncate file %s size %llu\n",

102 
f
->
fûe_«me
,

103 (Ë
f
->
ªÆ_fûe_size
);

104 
r
 = 
	`·runˇã
(
f
->
fd
, f->
ªÆ_fûe_size
);

105 i‡(
r
 != 0)

106 
	`td_vîr‹
(
td
, 
î∫o
, "ftruncate");

111 
	`log_îr
("fio: unknow¿ÁŒoˇã mode: %d\n", 
td
->
o
.
ÁŒoˇã_mode
);

112 
	`as£π
(0);

114 
	}
}

119 
	$exãnd_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

121 
√w_œyout
 = 0, 
u∆ök_fûe
 = 0, 
Êags
;

122 
À·
;

123 
bs
;

124 *
b
 = 
NULL
;

126 i‡(
ªad_⁄ly
) {

127 
	`log_îr
("fio:ÑefusingÉxtend of file dueÅoÑead-only\n");

136 i‡(
	`td_ªad
(
td
) ||

137 (
	`td_wrôe
(
td
Ë&&Åd->
o
.
ovîwrôe
 && !td->o.
fûe_≠≥nd
) ||

138 (
	`td_wrôe
(
td
Ë&& 
	`td_i€ngöe_Êagged
—d, 
FIO_NOEXTEND
)))

139 
√w_œyout
 = 1;

140 i‡(
	`td_wrôe
(
td
Ë&& !td->
o
.
ovîwrôe
 && !td->o.
fûe_≠≥nd
)

141 
u∆ök_fûe
 = 1;

143 i‡(
u∆ök_fûe
 || 
√w_œyout
) {

144 
ªt
;

146 
	`d¥öt
(
FD_FILE
, "œyouàu∆ök %s\n", 
f
->
fûe_«me
);

148 
ªt
 = 
	`td_io_u∆ök_fûe
(
td
, 
f
);

149 i‡(
ªt
 !0 &&Ñë !
ENOENT
) {

150 
	`td_vîr‹
(
td
, 
î∫o
, "unlink");

155 
Êags
 = 
O_WRONLY
;

156 i‡(
td
->
o
.
Ælow_¸óã
)

157 
Êags
 |
O_CREAT
;

158 i‡(
√w_œyout
)

159 
Êags
 |
O_TRUNC
;

161 #ifde‡
WIN32


162 
Êags
 |
_O_BINARY
;

165 
	`d¥öt
(
FD_FILE
, "›í fûê%s, fœg†%x\n", 
f
->
fûe_«me
, 
Êags
);

166 
f
->
fd
 = 
	`›í
(f->
fûe_«me
, 
Êags
, 0644);

167 i‡(
f
->
fd
 < 0) {

168 
îr
 = 
î∫o
;

170 i‡(
îr
 =
ENOENT
 && !
td
->
o
.
Ælow_¸óã
)

171 
	`log_îr
("fio: file creation disallowed by "

174 
	`td_vîr‹
(
td
, 
îr
, "open");

178 
	`ÁŒoˇã_fûe
(
td
, 
f
);

183 i‡(!
√w_œyout
)

184 
d⁄e
;

190 i‡(!
td
->
o
.
fûl_devi˚
) {

191 
	`d¥öt
(
FD_FILE
, "åunˇã fûê%s, sizê%Œu\n", 
f
->
fûe_«me
,

192 (Ë
f
->
ªÆ_fûe_size
);

193 i‡(
	`·runˇã
(
f
->
fd
, f->
ªÆ_fûe_size
) == -1) {

194 i‡(
î∫o
 !
EFBIG
) {

195 
	`td_vîr‹
(
td
, 
î∫o
, "ftruncate");

196 
îr
;

201 
À·
 = 
f
->
ªÆ_fûe_size
;

202 
bs
 = 
td
->
o
.
max_bs
[
DDIR_WRITE
];

203 i‡(
bs
 > 
À·
)

204 
bs
 = 
À·
;

206 
b
 = 
	`mÆloc
(
bs
);

207 i‡(!
b
) {

208 
	`td_vîr‹
(
td
, 
î∫o
, "malloc");

209 
îr
;

212 
À·
 && !
td
->
ãrmö©e
) {

213 
ssize_t
 
r
;

215 i‡(
bs
 > 
À·
)

216 
bs
 = 
À·
;

218 
	`fûl_io_buf„r
(
td
, 
b
, 
bs
, bs);

220 
r
 = 
	`wrôe
(
f
->
fd
, 
b
, 
bs
);

222 i‡(
r
 > 0) {

223 
À·
 -
r
;

226 i‡(
r
 < 0) {

227 
__e
 = 
î∫o
;

229 i‡(
__e
 =
ENOSPC
 || __ê=
EDQUOT
) {

230 c⁄° *
__e_«me
;

231 i‡(
td
->
o
.
fûl_devi˚
)

233 i‡(
__e
 =
ENOSPC
)

234 
__e_«me
 = "ENOSPC";

236 
__e_«me
 = "EDQUOT";

237 
	`log_öfo
("fio: %s onÜaying out "

238 "fûe, st›pög\n", 
__e_«me
);

240 
	`td_vîr‹
(
td
, 
î∫o
, "write");

242 
	`td_vîr‹
(
td
, 
EIO
, "write");

244 
îr
;

248 i‡(
td
->
ãrmö©e
) {

249 
	`d¥öt
(
FD_FILE
, "ãrmö©êu∆ök %s\n", 
f
->
fûe_«me
);

250 
	`td_io_u∆ök_fûe
(
td
, 
f
);

251 } i‡(
td
->
o
.
¸óã_fsync
) {

252 i‡(
	`fsync
(
f
->
fd
) < 0) {

253 
	`td_vîr‹
(
td
, 
î∫o
, "fsync");

254 
îr
;

257 i‡(
td
->
o
.
fûl_devi˚
 && !
	`td_wrôe
(td)) {

258 
	`fio_fûe_˛ór_size_known
(
f
);

259 i‡(
	`td_io_gë_fûe_size
(
td
, 
f
))

260 
îr
;

261 i‡(
f
->
io_size
 > f->
ªÆ_fûe_size
)

262 
f
->
io_size
 = f->
ªÆ_fûe_size
;

265 
	`‰ì
(
b
);

266 
d⁄e
:

268 
îr
:

269 
	`˛o£
(
f
->
fd
);

270 
f
->
fd
 = -1;

271 i‡(
b
)

272 
	`‰ì
(
b
);

274 
	}
}

276 
boﬁ
 
	$¥e_ªad_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

278 
r
, 
did_›í
 = 0, 
ﬁd_run°©e
;

279 
À·
;

280 
bs
;

281 
boﬁ
 
ªt
 = 
åue
;

282 *
b
;

284 i‡(
	`td_i€ngöe_Êagged
(
td
, 
FIO_PIPEIO
) ||

285 
	`td_i€ngöe_Êagged
(
td
, 
FIO_NOIO
))

286  
åue
;

288 i‡(
f
->
fûëy≥
 =
FIO_TYPE_CHAR
)

289  
åue
;

291 i‡(!
	`fio_fûe_›í
(
f
)) {

292 i‡(
td
->
io_›s
->
	`›í_fûe
—d, 
f
)) {

293 
	`log_îr
("fio: cannotÖre-read, failedÅo open file\n");

294  
Ál£
;

296 
did_›í
 = 1;

299 
ﬁd_run°©e
 = 
	`td_bump_run°©e
(
td
, 
TD_PRE_READING
);

301 
À·
 = 
f
->
io_size
;

302 
bs
 = 
td
->
o
.
max_bs
[
DDIR_READ
];

303 i‡(
bs
 > 
À·
)

304 
bs
 = 
À·
;

306 
b
 = 
	`mÆloc
(
bs
);

307 i‡(!
b
) {

308 
	`td_vîr‹
(
td
, 
î∫o
, "malloc");

309 
ªt
 = 
Ál£
;

310 
îr‹
;

312 
	`mem£t
(
b
, 0, 
bs
);

314 i‡(
	`l£ek
(
f
->
fd
, f->
fûe_off£t
, 
SEEK_SET
) < 0) {

315 
	`td_vîr‹
(
td
, 
î∫o
, "lseek");

316 
	`log_îr
("fio: failedÅoÜseekÖre-read file\n");

317 
ªt
 = 
Ál£
;

318 
îr‹
;

321 
À·
 && !
td
->
ãrmö©e
) {

322 i‡(
bs
 > 
À·
)

323 
bs
 = 
À·
;

325 
r
 = 
	`ªad
(
f
->
fd
, 
b
, 
bs
);

327 i‡(
r
 =(Ë
bs
) {

328 
À·
 -
bs
;

331 
	`td_vîr‹
(
td
, 
EIO
, "pre_read");

336 
îr‹
:

337 
	`td_ª°‹e_run°©e
(
td
, 
ﬁd_run°©e
);

339 i‡(
did_›í
)

340 
td
->
io_›s
->
	`˛o£_fûe
—d, 
f
);

342 
	`‰ì
(
b
);

343  
ªt
;

344 
	}
}

351 
	$gíîic_¥ï›uœã_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

353 
Êags
;

354 
À·
, 
bs
;

355 *
b
 = 
NULL
;

358 
	`as£π
(
f
->
fûëy≥
 =
FIO_TYPE_FILE
);

360 i‡(
ªad_⁄ly
) {

361 
	`log_îr
("fio:ÑefusingÅo writeá file dueÅoÑead-only\n");

365 
Êags
 = 
O_WRONLY
;

366 i‡(
td
->
o
.
Ælow_¸óã
)

367 
Êags
 |
O_CREAT
;

369 #ifde‡
WIN32


370 
Êags
 |
_O_BINARY
;

373 
	`d¥öt
(
FD_FILE
, "›í fûê%s, fœg†%x\n", 
f
->
fûe_«me
, 
Êags
);

374 
f
->
fd
 = 
	`›í
(f->
fûe_«me
, 
Êags
, 0644);

375 i‡(
f
->
fd
 < 0) {

376 
îr
 = 
î∫o
;

378 i‡(
îr
 =
ENOENT
 && !
td
->
o
.
Ælow_¸óã
)

379 
	`log_îr
("fio: file creation disallowed by "

382 
	`td_vîr‹
(
td
, 
îr
, "open");

386 
À·
 = 
f
->
ªÆ_fûe_size
;

387 
bs
 = 
td
->
o
.
max_bs
[
DDIR_WRITE
];

388 i‡(
bs
 > 
À·
)

389 
bs
 = 
À·
;

391 
b
 = 
	`mÆloc
(
bs
);

392 i‡(!
b
) {

393 
	`td_vîr‹
(
td
, 
î∫o
, "malloc");

394 
îr
;

397 
À·
 && !
td
->
ãrmö©e
) {

398 
ssize_t
 
r
;

400 i‡(
bs
 > 
À·
)

401 
bs
 = 
À·
;

403 
	`fûl_io_buf„r
(
td
, 
b
, 
bs
, bs);

405 
r
 = 
	`wrôe
(
f
->
fd
, 
b
, 
bs
);

407 i‡(
r
 > 0) {

408 
À·
 -
r
;

410 
	`td_vîr‹
(
td
, 
î∫o
, "write");

411 
îr
;

415 i‡(
td
->
ãrmö©e
) {

416 
	`d¥öt
(
FD_FILE
, "ãrmö©êu∆ök %s\n", 
f
->
fûe_«me
);

417 
	`td_io_u∆ök_fûe
(
td
, 
f
);

418 } i‡(
td
->
o
.
¸óã_fsync
) {

419 i‡(
	`fsync
(
f
->
fd
) < 0) {

420 
	`td_vîr‹
(
td
, 
î∫o
, "fsync");

421 
îr
;

425 
	`‰ì
(
b
);

427 
îr
:

428 
	`˛o£
(
f
->
fd
);

429 
f
->
fd
 = -1;

430 i‡(
b
)

431 
	`‰ì
(
b
);

433 
	}
}

435 
	$gë_ønd_fûe_size
(
thªad_d©a
 *
td
)

437 
ªt
, 
sized
;

438 
uöt64_t
 
‰™d_max
;

439 
uöt64_t
 
r
;

441 
‰™d_max
 = 
	`ønd_max
(&
td
->
fûe_size_°©e
);

442 
r
 = 
	`__ønd
(&
td
->
fûe_size_°©e
);

443 
sized
 = 
td
->
o
.
fûe_size_high
 -Åd->o.
fûe_size_low
;

444 
ªt
 = (Ë((Ë
sized
 * (
r
 / (
‰™d_max
 + 1.0)));

445 
ªt
 +
td
->
o
.
fûe_size_low
;

446 
ªt
 -‘ë % 
td
->
o
.
rw_mö_bs
);

447  
ªt
;

448 
	}
}

450 
	$fûe_size
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

452 
°©
 
°
;

454 i‡(
	`°©
(
f
->
fûe_«me
, &
°
) == -1) {

455 
	`td_vîr‹
(
td
, 
î∫o
, "fstat");

459 
f
->
ªÆ_fûe_size
 = 
°
.
°_size
;

461 
	}
}

463 
	$bdev_size
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

465 
byãs
 = 0;

466 
r
;

468 i‡(
td
->
io_›s
->
	`›í_fûe
—d, 
f
)) {

469 
	`log_îr
("fio: failed opening blockdev %s for size check\n",

470 
f
->
fûe_«me
);

474 
r
 = 
	`blockdev_size
(
f
, &
byãs
);

475 i‡(
r
) {

476 
	`td_vîr‹
(
td
, 
r
, "blockdev_size");

477 
îr
;

480 i‡(!
byãs
) {

481 
	`log_îr
("%s: zîÿsized block devi˚?\n", 
f
->
fûe_«me
);

482 
îr
;

485 
f
->
ªÆ_fûe_size
 = 
byãs
;

486 
td
->
io_›s
->
	`˛o£_fûe
—d, 
f
);

488 
îr
:

489 
td
->
io_›s
->
	`˛o£_fûe
—d, 
f
);

491 
	}
}

493 
	$ch¨_size
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

495 #ifde‡
FIO_HAVE_CHARDEV_SIZE


496 
byãs
 = 0;

497 
r
;

499 i‡(
td
->
io_›s
->
	`›í_fûe
—d, 
f
)) {

500 
	`log_îr
("fio: failed opening chardev %s for size check\n",

501 
f
->
fûe_«me
);

505 
r
 = 
	`ch¨dev_size
(
f
, &
byãs
);

506 i‡(
r
) {

507 
	`td_vîr‹
(
td
, 
r
, "chardev_size");

508 
îr
;

511 i‡(!
byãs
) {

512 
	`log_îr
("%s: zîÿsized ch¨ devi˚?\n", 
f
->
fûe_«me
);

513 
îr
;

516 
f
->
ªÆ_fûe_size
 = 
byãs
;

517 
td
->
io_›s
->
	`˛o£_fûe
—d, 
f
);

519 
îr
:

520 
td
->
io_›s
->
	`˛o£_fûe
—d, 
f
);

523 
f
->
ªÆ_fûe_size
 = -1ULL;

526 
	}
}

528 
	$gë_fûe_size
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

530 
ªt
 = 0;

532 i‡(
	`fio_fûe_size_known
(
f
))

535 i‡(
f
->
fûëy≥
 =
FIO_TYPE_FILE
)

536 
ªt
 = 
	`fûe_size
(
td
, 
f
);

537 i‡(
f
->
fûëy≥
 =
FIO_TYPE_BLOCK
)

538 
ªt
 = 
	`bdev_size
(
td
, 
f
);

539 i‡(
f
->
fûëy≥
 =
FIO_TYPE_CHAR
)

540 
ªt
 = 
	`ch¨_size
(
td
, 
f
);

542 
f
->
ªÆ_fûe_size
 = -1;

543 
	`log_öfo
("%s: faûedÅÿgë fûêsizêo‡%s\n", 
td
->
o
.
«me
,

544 
f
->
fûe_«me
);

552 i‡(
ªt
)

553  
ªt
;

561 i‡(
f
->
fûe_off£t
 > f->
ªÆ_fûe_size
) {

562 
	`log_îr
("%s: off£àexãnd†íd (%Œu > %Œu)\n", 
td
->
o
.
«me
,

563 (Ë
f
->
fûe_off£t
,

564 (Ë
f
->
ªÆ_fûe_size
);

568 
	`fio_fûe_£t_size_known
(
f
);

570 
	}
}

572 
	$__fûe_övÆid©e_ˇche
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

573 
off
,

574 
Àn
)

576 
îrvÆ
 = 0, 
ªt
 = 0;

578 #ifde‡
CONFIG_ESX


582 i‡(
Àn
 == -1ULL)

583 
Àn
 = 
f
->
io_size
;

584 i‡(
off
 == -1ULL)

585 
off
 = 
f
->
fûe_off£t
;

587 i‡(
Àn
 =-1ULL || 
off
 == -1ULL)

590 i‡(
td
->
io_›s
->
övÆid©e
) {

591 
	`d¥öt
(
FD_IO
, "övÆid©ê%†ˇchê%s\n", 
td
->
io_›s
->
«me
,

592 
f
->
fûe_«me
);

593 
ªt
 = 
td
->
io_›s
->
	`övÆid©e
—d, 
f
);

594 i‡(
ªt
 < 0)

595 
îrvÆ
 = -
ªt
;

596 } i‡(
	`td_i€ngöe_Êagged
(
td
, 
FIO_DISKLESSIO
)) {

597 
	`d¥öt
(
FD_IO
, "invalidateÇot supported by ioengine %s\n",

598 
td
->
io_›s
->
«me
);

599 } i‡(
f
->
fûëy≥
 =
FIO_TYPE_FILE
) {

600 
	`d¥öt
(
FD_IO
, "declare unneeded cache %s: %llu/%llu\n",

601 
f
->
fûe_«me
, 
off
, 
Àn
);

602 
ªt
 = 
	`posix_Ádvi£
(
f
->
fd
, 
off
, 
Àn
, 
POSIX_FADV_DONTNEED
);

603 i‡(
ªt
)

604 
îrvÆ
 = 
ªt
;

605 } i‡(
f
->
fûëy≥
 =
FIO_TYPE_BLOCK
) {

606 
ªåy_cou¡
 = 0;

608 
	`d¥öt
(
FD_IO
, "dr›Öagêˇchê%s\n", 
f
->
fûe_«me
);

609 
ªt
 = 
	`blockdev_övÆid©e_ˇche
(
f
);

610 
ªt
 < 0 && 
î∫o
 =
EAGAIN
 && 
ªåy_cou¡
++ < 25) {

617 
	`u¶ìp
(10000);

618 
ªt
 = 
	`blockdev_övÆid©e_ˇche
(
f
);

620 i‡(
ªt
 < 0 && 
î∫o
 =
EACCES
 && 
	`gëeuid
()) {

621 i‡(!
	`fio_did_w¨n
(
FIO_WARN_ROOT_FLUSH
)) {

622 
	`log_îr
("fio: onlyÑoot may flush block "

626 i‡(
ªt
 < 0)

627 
îrvÆ
 = 
î∫o
;

628 } i‡(
f
->
fûëy≥
 =
FIO_TYPE_CHAR
 ||

629 
f
->
fûëy≥
 =
FIO_TYPE_PIPE
) {

630 
	`d¥öt
(
FD_IO
, "övÆid©ênŸ suµ‹ãd %s\n", 
f
->
fûe_«me
);

639 i‡(
îrvÆ
)

640 
	`log_öfo
("fio: cache invalidation of %s failed: %s\n",

641 
f
->
fûe_«me
, 
	`°ªº‹
(
îrvÆ
));

645 
	}
}

647 
	$fûe_övÆid©e_ˇche
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

649 i‡(!
	`fio_fûe_›í
(
f
))

652  
	`__fûe_övÆid©e_ˇche
(
td
, 
f
, -1ULL, -1ULL);

653 
	}
}

655 
	$gíîic_˛o£_fûe
(
thªad_d©a
 
fio_unu£d
 *
td
, 
fio_fûe
 *
f
)

657 
ªt
 = 0;

659 
	`d¥öt
(
FD_FILE
, "fd clo£ %s\n", 
f
->
fûe_«me
);

661 
	`ªmove_fûe_hash
(
f
);

663 i‡(
	`˛o£
(
f
->
fd
) < 0)

664 
ªt
 = 
î∫o
;

666 
f
->
fd
 = -1;

668 i‡(
f
->
shadow_fd
 != -1) {

669 
	`˛o£
(
f
->
shadow_fd
);

670 
f
->
shadow_fd
 = -1;

673 
f
->
ígöe_pos
 = 0;

674  
ªt
;

675 
	}
}

677 
	$fûe_lookup_›í
(
fio_fûe
 *
f
, 
Êags
)

679 
fio_fûe
 *
__f
;

680 
‰om_hash
;

682 
__f
 = 
	`lookup_fûe_hash
(
f
->
fûe_«me
);

683 i‡(
__f
) {

684 
	`d¥öt
(
FD_FILE
, "found fûêö hash %s\n", 
f
->
fûe_«me
);

685 
f
->
lock
 = 
__f
->lock;

686 
‰om_hash
 = 1;

688 
	`d¥öt
(
FD_FILE
, "fûênŸ found i¿hash %s\n", 
f
->
fûe_«me
);

689 
‰om_hash
 = 0;

692 #ifde‡
WIN32


693 
Êags
 |
_O_BINARY
;

696 
f
->
fd
 = 
	`›í
(f->
fûe_«me
, 
Êags
, 0600);

697  
‰om_hash
;

698 
	}
}

700 
	$fûe_˛o£_shadow_fds
(
thªad_d©a
 *
td
)

702 
fio_fûe
 *
f
;

703 
num_˛o£d
 = 0;

704 
i
;

706 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

707 i‡(
f
->
shadow_fd
 == -1)

710 
	`˛o£
(
f
->
shadow_fd
);

711 
f
->
shadow_fd
 = -1;

712 
num_˛o£d
++;

715  
num_˛o£d
;

716 
	}
}

718 
	$gíîic_›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

720 
is_°d
 = 0;

721 
Êags
 = 0;

722 
‰om_hash
 = 0;

724 
	`d¥öt
(
FD_FILE
, "fd o≥¿%s\n", 
f
->
fûe_«me
);

726 i‡(!
	`°rcmp
(
f
->
fûe_«me
, "-")) {

727 i‡(
	`td_rw
(
td
)) {

728 
	`log_îr
("fio: can'tÑead/writeÅo stdin/out\n");

731 
is_°d
 = 1;

736 i‡(
	`td_wrôe
(
td
))

737 
f_out
 = 
°dîr
;

740 i‡(
	`td_åim
(
td
))

741 
skù_Êags
;

742 i‡(
td
->
o
.
odúe˘
)

743 
Êags
 |
OS_O_DIRECT
;

744 i‡(
td
->
o
.
ﬂtomic
) {

745 i‡(!
FIO_O_ATOMIC
) {

746 
	`td_vîr‹
(
td
, 
EINVAL
, "OS doesÇot supportátomic IO");

749 
Êags
 |
OS_O_DIRECT
 | 
FIO_O_ATOMIC
;

751 
Êags
 |
td
->
o
.
sync_io
;

752 i‡(
td
->
o
.
¸óã_⁄_›í
 &&Åd->o.
Ælow_¸óã
)

753 
Êags
 |
O_CREAT
;

754 
skù_Êags
:

755 i‡(
f
->
fûëy≥
 !
FIO_TYPE_FILE
)

756 
Êags
 |
FIO_O_NOATIME
;

758 
›í_agaö
:

759 i‡(
	`td_wrôe
(
td
)) {

760 i‡(!
ªad_⁄ly
)

761 
Êags
 |
O_RDWR
;

763 i‡(
f
->
fûëy≥
 =
FIO_TYPE_FILE
 && 
td
->
o
.
Ælow_¸óã
)

764 
Êags
 |
O_CREAT
;

766 i‡(
is_°d
)

767 
f
->
fd
 = 
	`dup
(
STDOUT_FILENO
);

769 
‰om_hash
 = 
	`fûe_lookup_›í
(
f
, 
Êags
);

770 } i‡(
	`td_ªad
(
td
)) {

771 i‡(
f
->
fûëy≥
 =
FIO_TYPE_CHAR
 && !
ªad_⁄ly
)

772 
Êags
 |
O_RDWR
;

774 
Êags
 |
O_RDONLY
;

776 i‡(
is_°d
)

777 
f
->
fd
 = 
	`dup
(
STDIN_FILENO
);

779 
‰om_hash
 = 
	`fûe_lookup_›í
(
f
, 
Êags
);

780 } i‡(
	`td_åim
(
td
)) {

781 
	`as£π
(!
	`td_rw
(
td
));

782 i‡(!
ªad_⁄ly
)

783 
Êags
 |
O_RDWR
;

784 
‰om_hash
 = 
	`fûe_lookup_›í
(
f
, 
Êags
);

787 i‡(
f
->
fd
 == -1) {

788 
buf
[
FIO_VERROR_SIZE
];

789 
__e
 = 
î∫o
;

791 i‡(
__e
 =
EPERM
 && (
Êags
 & 
FIO_O_NOATIME
)) {

792 
Êags
 &~
FIO_O_NOATIME
;

793 
›í_agaö
;

795 i‡(
__e
 =
EMFILE
 && 
	`fûe_˛o£_shadow_fds
(
td
))

796 
›í_agaö
;

798 
	`¢¥ötf
(
buf
, (buf), "›í(%s)", 
f
->
fûe_«me
);

800 i‡(
__e
 =
EINVAL
 && (
Êags
 & 
OS_O_DIRECT
)) {

801 
	`log_îr
("fio:ÜooksÜike your file system doesÇot " \

805 
	`td_vîr‹
(
td
, 
__e
, 
buf
);

809 i‡(!
‰om_hash
 && 
f
->
fd
 != -1) {

810 i‡(
	`add_fûe_hash
(
f
)) {

811 
fio_unu£d
 
ªt
;

821 i‡(
f
->
shadow_fd
 == -1)

822 
f
->
shadow_fd
 = f->
fd
;

828 
ªt
 = 
	`gíîic_˛o£_fûe
(
td
, 
f
);

830 
›í_agaö
;

835 
	}
}

841 
	$gíîic_gë_fûe_size
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

843  
	`gë_fûe_size
(
td
, 
f
);

844 
	}
}

849 
	$gë_fûe_sizes
(
thªad_d©a
 *
td
)

851 
fio_fûe
 *
f
;

852 
i
;

853 
îr
 = 0;

855 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

856 
	`d¥öt
(
FD_FILE
, "gë fûêsizêf‹ %p/%d/%s\n", 
f
, 
i
,

857 
f
->
fûe_«me
);

859 i‡(
	`td_io_gë_fûe_size
(
td
, 
f
)) {

860 i‡(
td
->
îr‹
 !
ENOENT
) {

861 
	`log_îr
("%s\n", 
td
->
vîr‹
);

862 
îr
 = 1;

865 
	`˛ór_îr‹
(
td
);

875 i‡(
f
->
ªÆ_fûe_size
 =-1ULL && 
td
->
o
.
size
)

876 
f
->
ªÆ_fûe_size
 = 
td
->
o
.
size
 /Åd->o.
ƒ_fûes
;

879  
îr
;

880 
	}
}

882 
	sfio_mou¡
 {

883 
Êi°_hód
 
	mli°
;

884 c⁄° *
	mba£
;

885 
	m__ba£
[256];

886 
	mkey
;

892 
	$gë_fs_‰ì_cou¡s
(
thªad_d©a
 *
td
)

894 
Êi°_hód
 *
n
, *
tmp
;

895 
ªt
 = 0;

896 
fio_mou¡
 *
fm
;

897 
	`FLIST_HEAD
(
li°
);

898 
fio_fûe
 *
f
;

899 
i
;

901 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

902 
°©
 
sb
;

903 
buf
[256];

905 i‡(
f
->
fûëy≥
 =
FIO_TYPE_BLOCK
 || f->fûëy≥ =
FIO_TYPE_CHAR
) {

906 i‡(
f
->
ªÆ_fûe_size
 != -1ULL)

907 
ªt
 +
f
->
ªÆ_fûe_size
;

909 } i‡(
f
->
fûëy≥
 !
FIO_TYPE_FILE
)

912 
	`¢¥ötf
(
buf
, 
	`FIO_ARRAY_SIZE
(buf), "%s", 
f
->
fûe_«me
);

914 i‡(
	`°©
(
buf
, &
sb
) < 0) {

915 i‡(
î∫o
 !
ENOENT
)

917 
	`°r˝y
(
buf
, ".");

918 i‡(
	`°©
(
buf
, &
sb
) < 0)

922 
fm
 = 
NULL
;

923 
	`Êi°_f‹_óch
(
n
, &
li°
) {

924 
fm
 = 
	`Êi°_íåy
(
n
, 
fio_mou¡
, 
li°
);

925 i‡(
fm
->
key
 =
sb
.
°_dev
)

928 
fm
 = 
NULL
;

931 i‡(
fm
)

934 
fm
 = 
	`ˇŒoc
(1, (*fm));

935 
	`¢¥ötf
(
fm
->
__ba£
, 
	`FIO_ARRAY_SIZE
(fm->__ba£), "%s", 
buf
);

936 
fm
->
ba£
 = 
	`ba£«me
(fm->
__ba£
);

937 
fm
->
key
 = 
sb
.
°_dev
;

938 
	`Êi°_add
(&
fm
->
li°
, &list);

941 
	`Êi°_f‹_óch_ß„
(
n
, 
tmp
, &
li°
) {

942 
sz
;

944 
fm
 = 
	`Êi°_íåy
(
n
, 
fio_mou¡
, 
li°
);

945 
	`Êi°_dñ
(&
fm
->
li°
);

947 
sz
 = 
	`gë_fs_‰ì_size
(
fm
->
ba£
);

948 i‡(
sz
 && sz != -1ULL)

949 
ªt
 +
sz
;

951 
	`‰ì
(
fm
);

954  
ªt
;

955 
	}
}

957 
uöt64_t
 
	$gë_°¨t_off£t
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

959 
boﬁ
 
Æign
 = 
Ál£
;

960 
thªad_›ti⁄s
 *
o
 = &
td
->o;

961 
Æign_bs
;

962 
off£t
;

963 
ö¸emít
;

965 i‡(
o
->
fûe_≠≥nd
 && 
f
->
fûëy≥
 =
FIO_TYPE_FILE
)

966  
f
->
ªÆ_fûe_size
;

968 i‡(
o
->
off£t_ö¸emít_≥r˚¡
) {

969 
	`as£π
(!
o
->
off£t_ö¸emít
);

970 
ö¸emít
 = 
o
->
off£t_ö¸emít_≥r˚¡
 * 
f
->
ªÆ_fûe_size
 / 100;

971 
Æign
 = 
åue
;

973 
ö¸emít
 = 
o
->
off£t_ö¸emít
;

975 i‡(
o
->
°¨t_off£t_≥r˚¡
 > 0) {

977 
off£t
 = (
f
->
ªÆ_fûe_size
 * 
o
->
°¨t_off£t_≥r˚¡
 / 100) +

978 (
td
->
subjob_numbî
 * 
ö¸emít
);

980 
Æign
 = 
åue
;

983 
off£t
 = 
o
->
°¨t_off£t
 +

984 
td
->
subjob_numbî
 * 
ö¸emít
;

987 i‡(
Æign
) {

991 i‡(
	`fio_›ti⁄_is_£t
(
o
, 
°¨t_off£t_Æign
)) {

992 
Æign_bs
 = 
o
->
°¨t_off£t_Æign
;

995 
Æign_bs
 = 
	`td_mö_bs
(
td
);

1002 
off£t
 = (off£à/ 
Æign_bs
 + (offset %álign_bs != 0)) *álign_bs;

1005  
off£t
;

1006 
	}
}

1011 
	$l⁄ge°_exi°ög_∑th
(*
∑th
) {

1012 
buf
[
PATH_MAX
];

1013 
boﬁ
 
d⁄e
;

1014 *
buf_pos
;

1015 
off£t
;

1016 #ifde‡
WIN32


1017 
DWORD
 
dwAâr
;

1019 
°©
 
sb
;

1022 
	`•rötf
(
buf
, "%s", 
∑th
);

1023 
d⁄e
 = 
Ál£
;

1024 !
d⁄e
) {

1025 
buf_pos
 = 
	`°ºchr
(
buf
, 
FIO_OS_PATH_SEPARATOR
);

1026 i‡(!
buf_pos
) {

1027 
off£t
 = 0;

1031 *(
buf_pos
 + 1) = '\0';

1033 #ifde‡
WIN32


1034 
dwAâr
 = 
	`GëFûeAâribuãsA
(
buf
);

1035 i‡(
dwAâr
 !
INVALID_FILE_ATTRIBUTES
) {

1036 
d⁄e
 = 
åue
;

1039 i‡(
	`°©
(
buf
, &
sb
) == 0)

1040 
d⁄e
 = 
åue
;

1042 i‡(
d⁄e
)

1043 
off£t
 = 
buf_pos
 - 
buf
;

1045 *
buf_pos
 = '\0';

1048  
off£t
;

1049 
	}
}

1051 
boﬁ
 
	$¸óã_w‹k_dús
(
thªad_d©a
 *
td
, c⁄° *
‚ame
)

1053 
∑th
[
PATH_MAX
];

1054 *
°¨t
, *
íd
;

1055 
off£t
;

1057 
	`¢¥ötf
(
∑th
, 
PATH_MAX
, "%s", 
‚ame
);

1058 
°¨t
 = 
∑th
;

1060 
off£t
 = 
	`l⁄ge°_exi°ög_∑th
(
∑th
);

1061 
íd
 = 
°¨t
 + 
off£t
;

1062 (
íd
 = 
	`°rchr
”nd, 
FIO_OS_PATH_SEPARATOR
)Ë!
NULL
) {

1063 i‡(
íd
 =
°¨t
) {

1064 
íd
++;

1067 *
íd
 = '\0';

1068 
î∫o
 = 0;

1069 i‡(
	`fio_mkdú
(
∑th
, 0700Ë&& 
î∫o
 !
EEXIST
) {

1070 
	`log_îr
("fio: failedÅo create dir (%s): %s\n",

1071 
°¨t
, 
	`°ªº‹
(
î∫o
));

1072  
Ál£
;

1074 *
íd
 = 
FIO_OS_PATH_SEPARATOR
;

1075 
íd
++;

1077 
td
->
Êags
 |
TD_F_DIRS_CREATED
;

1078  
åue
;

1079 
	}
}

1084 
	$£tup_fûes
(
thªad_d©a
 *
td
)

1086 
tŸÆ_size
, 
exãnd_size
;

1087 
thªad_›ti⁄s
 *
o
 = &
td
->o;

1088 
fio_fûe
 *
f
;

1089 
i
, 
ƒ_fs_exåa
 = 0;

1090 
îr
 = 0, 
√ed_exãnd
;

1091 
ﬁd_°©e
;

1092 c⁄° 
bs
 = 
	`td_mö_bs
(
td
);

1093 
uöt64_t
 
fs
 = 0;

1095 
	`d¥öt
(
FD_FILE
, "setup files\n");

1097 
ﬁd_°©e
 = 
	`td_bump_run°©e
(
td
, 
TD_SETTING_UP
);

1099 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

1100 i‡(!
	`td_i€ngöe_Êagged
(
td
, 
FIO_DISKLESSIO
) &&

1101 
	`°rchr
(
f
->
fûe_«me
, 
FIO_OS_PATH_SEPARATOR
) &&

1102 !(
td
->
Êags
 & 
TD_F_DIRS_CREATED
) &&

1103 !
	`¸óã_w‹k_dús
(
td
, 
f
->
fûe_«me
))

1104 
îr_out
;

1114 i‡(
td
->
io_›s
->
£tup
)

1115 
îr
 = 
td
->
io_›s
->
	`£tup
(td);

1117 
îr
 = 
	`gë_fûe_sizes
(
td
);

1119 i‡(
îr
)

1120 
îr_out
;

1122 i‡(
td
->
o
.
z⁄e_mode
 =
ZONE_MODE_ZBD
) {

1123 
îr
 = 
	`zbd_öô_fûes
(
td
);

1124 i‡(
îr
)

1125 
îr_out
;

1127 
	`zbd_ªˇlc_›ti⁄s_wôh_z⁄e_gønuœrôy
(
td
);

1129 i‡(
o
->
ªad_iﬁog_fûe
)

1130 
d⁄e
;

1136 
tŸÆ_size
 = 0;

1137 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

1138 
f
->
fûío
 = 
i
;

1139 i‡(
f
->
ªÆ_fûe_size
 == -1ULL)

1140 
tŸÆ_size
 = -1ULL;

1142 
tŸÆ_size
 +
f
->
ªÆ_fûe_size
;

1145 i‡(
o
->
fûl_devi˚
)

1146 
td
->
fûl_devi˚_size
 = 
	`gë_fs_‰ì_cou¡s
(td);

1151 i‡((!
tŸÆ_size
 ||ÅŸÆ_sizê=-1ULLË&& !
o
->
size
 &&

1152 !
	`td_i€ngöe_Êagged
(
td
, 
FIO_NOIO
Ë&& !
o
->
fûl_devi˚
 &&

1153 !(
o
->
ƒ_fûes
 && (o->
fûe_size_low
 || o->
fûe_size_high
))) {

1154 
	`log_îr
("%s: youÇìdÅÿ•ecify size=\n", 
o
->
«me
);

1155 
	`td_vîr‹
(
td
, 
EINVAL
, "total_file_size");

1156 
îr_out
;

1163 i‡(!
o
->
fûe_size_low
 && o->
ƒ_fûes
) {

1164 
uöt64_t
 
Æl_fs
;

1166 
fs
 = 
o
->
size
 / o->
ƒ_fûes
;

1167 
Æl_fs
 = 
fs
 * 
o
->
ƒ_fûes
;

1169 i‡(
Æl_fs
 < 
o
->
size
)

1170 
ƒ_fs_exåa
 = (
o
->
size
 - 
Æl_fs
Ë/ 
bs
;

1178 
exãnd_size
 = 
tŸÆ_size
 = 0;

1179 
√ed_exãnd
 = 0;

1180 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

1181 
f
->
fûe_off£t
 = 
	`gë_°¨t_off£t
(
td
, f);

1191 i‡(!
o
->
fûe_size_low
) {

1198 
f
->
io_size
 = 
fs
;

1199 i‡(
ƒ_fs_exåa
) {

1200 
ƒ_fs_exåa
--;

1201 
f
->
io_size
 +
bs
;

1212 i‡(!
f
->
io_size
) {

1213 i‡(
f
->
fûe_off£t
 > f->
ªÆ_fûe_size
)

1214 
îr_off£t
;

1215 
f
->
io_size
 = f->
ªÆ_fûe_size
 - f->
fûe_off£t
;

1216 i‡(!
f
->
io_size
)

1217 
	`log_öfo
("fio: file %s may be ignored\n",

1218 
f
->
fûe_«me
);

1220 } i‡(
f
->
ªÆ_fûe_size
 < 
o
->
fûe_size_low
 ||

1221 
f
->
ªÆ_fûe_size
 > 
o
->
fûe_size_high
) {

1222 i‡(
f
->
fûe_off£t
 > 
o
->
fûe_size_low
)

1223 
îr_off£t
;

1228 i‡(
o
->
fûe_size_low
 =o->
fûe_size_high
)

1229 
f
->
io_size
 = 
o
->
fûe_size_low
 - f->
fûe_off£t
;

1231 
f
->
io_size
 = 
	`gë_ønd_fûe_size
(
td
)

1232 - 
f
->
fûe_off£t
;

1235 
f
->
io_size
 = f->
ªÆ_fûe_size
 - f->
fûe_off£t
;

1237 i‡(
f
->
io_size
 == -1ULL)

1238 
tŸÆ_size
 = -1ULL;

1240 
uöt64_t
 
io_size
;

1242 i‡(
o
->
size_≥r˚¡
 && o->size_percent != 100) {

1243 
uöt64_t
 
fûe_size
;

1245 
fûe_size
 = 
f
->
io_size
 + f->
fûe_off£t
;

1246 
f
->
io_size
 = (
fûe_size
 *

1247 
o
->
size_≥r˚¡
) / 100;

1248 i‡(
f
->
io_size
 > (
fûe_size
 - f->
fûe_off£t
))

1249 
f
->
io_size
 = 
fûe_size
 - f->
fûe_off£t
;

1251 
f
->
io_size
 -(f->io_sizê% 
	`td_mö_bs
(
td
));

1254 
io_size
 = 
f
->io_size;

1255 i‡(
o
->
io_size_≥r˚¡
 && o->io_size_percent != 100) {

1256 
io_size
 *
o
->
io_size_≥r˚¡
;

1257 
io_size
 /= 100;

1260 
tŸÆ_size
 +
io_size
;

1263 i‡(
f
->
fûëy≥
 =
FIO_TYPE_FILE
 &&

1264 (
f
->
io_size
 + f->
fûe_off£t
Ë> f->
ªÆ_fûe_size
) {

1265 i‡(!
	`td_i€ngöe_Êagged
(
td
, 
FIO_DISKLESSIO
) &&

1266 !
o
->
¸óã_⁄_›í
) {

1267 
√ed_exãnd
++;

1268 
exãnd_size
 +(
f
->
io_size
 + f->
fûe_off£t
);

1269 
	`fio_fûe_£t_exãnd
(
f
);

1270 } i‡(!
	`td_i€ngöe_Êagged
(
td
, 
FIO_DISKLESSIO
) ||

1271 (
	`td_i€ngöe_Êagged
(
td
, 
FIO_DISKLESSIO
) &&

1272 
	`td_i€ngöe_Êagged
(
td
, 
FIO_FAKEIO
)))

1273 
f
->
ªÆ_fûe_size
 = f->
io_size
 + f->
fûe_off£t
;

1277 i‡(
td
->
o
.
block_îr‹_hi°
) {

1278 
Àn
;

1280 
	`as£π
(
td
->
o
.
ƒ_fûes
 == 1);

1281 
f
 = 
td
->
fûes
[0];

1282 
Àn
 = 
f
->
io_size
 / 
td
->
o
.
bs
[
DDIR_TRIM
];

1283 i‡(
Àn
 > 
MAX_NR_BLOCK_INFOS
 ||Üen <= 0) {

1284 
	`log_îr
("fio: cannot calculate block histogram with "

1286 
Àn
, 
MAX_NR_BLOCK_INFOS
);

1287 
	`td_vîr‹
(
td
, 
EINVAL
, "block_error_hist");

1288 
îr_out
;

1291 
td
->
ts
.
ƒ_block_öfos
 = 
Àn
;

1292 
i
 = 0; i < 
Àn
; i++)

1293 
td
->
ts
.
block_öfos
[
i
] =

1294 
	`BLOCK_INFO
(0, 
BLOCK_STATE_UNINIT
);

1296 
td
->
ts
.
ƒ_block_öfos
 = 0;

1298 i‡(!
o
->
size
 || (
tŸÆ_size
 && o->size >Åotal_size))

1299 
o
->
size
 = 
tŸÆ_size
;

1301 i‡(
o
->
size
 < 
	`td_mö_bs
(
td
)) {

1302 
	`log_îr
("fio: blocksize isÜargerÅhan data setÑange\n");

1303 
îr_out
;

1311 i‡(
√ed_exãnd
) {

1312 
ãmp_°Æl_ts
 = 1;

1313 i‡(
ouçut_f‹m©
 & 
FIO_OUTPUT_NORMAL
) {

1314 
	`log_öfo
("%s: Laying out IO file%s (%u file%s / %s%lluMiB)\n",

1315 
o
->
«me
,

1316 
√ed_exãnd
 > 1 ? "s" : "",

1317 
√ed_exãnd
,

1318 
√ed_exãnd
 > 1 ? "s" : "",

1319 
√ed_exãnd
 > 1 ? "total " : "",

1320 
exãnd_size
 >> 20);

1323 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

1324 
ﬁd_Àn
 = -1ULL, 
exãnd_Àn
 = -1ULL;

1326 i‡(!
	`fio_fûe_exãnd
(
f
))

1329 
	`as£π
(
f
->
fûëy≥
 =
FIO_TYPE_FILE
);

1330 
	`fio_fûe_˛ór_exãnd
(
f
);

1331 i‡(!
o
->
fûl_devi˚
) {

1332 
ﬁd_Àn
 = 
f
->
ªÆ_fûe_size
;

1333 
exãnd_Àn
 = 
f
->
io_size
 + f->
fûe_off£t
 -

1334 
ﬁd_Àn
;

1336 
f
->
ªÆ_fûe_size
 = (f->
io_size
 + f->
fûe_off£t
);

1337 
îr
 = 
	`exãnd_fûe
(
td
, 
f
);

1338 i‡(
îr
)

1341 
îr
 = 
	`__fûe_övÆid©e_ˇche
(
td
, 
f
, 
ﬁd_Àn
,

1342 
exãnd_Àn
);

1347 i‡(
f
->
fd
 != -1)

1348 
	`˛o£
(
f
->
fd
);

1350 
f
->
fd
 = -1;

1351 i‡(
îr
)

1354 
ãmp_°Æl_ts
 = 0;

1357 i‡(
îr
)

1358 
îr_out
;

1365 i‡(
td
->
io_›s
->
¥ï›uœã_fûe
) {

1366 
ãmp_°Æl_ts
 = 1;

1368 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

1369 i‡(
ouçut_f‹m©
 & 
FIO_OUTPUT_NORMAL
) {

1370 
	`log_öfo
("%s: Prepopulating IO file (%s)\n",

1371 
o
->
«me
, 
f
->
fûe_«me
);

1374 
îr
 = 
td
->
io_›s
->
	`¥ï›uœã_fûe
—d, 
f
);

1375 i‡(
îr
)

1378 
îr
 = 
	`__fûe_övÆid©e_ˇche
(
td
, 
f
, f->
fûe_off£t
,

1379 
f
->
io_size
);

1384 i‡(
f
->
fd
 != -1)

1385 
	`˛o£
(
f
->
fd
);

1387 
f
->
fd
 = -1;

1388 i‡(
îr
)

1391 
ãmp_°Æl_ts
 = 0;

1394 i‡(
îr
)

1395 
îr_out
;

1401 i‡(!
o
->
ªad_iﬁog_fûe
) {

1402 i‡(
o
->
io_size
)

1403 
td
->
tŸÆ_io_size
 = 
o
->
io_size
 * o->
lo›s
;

1405 
td
->
tŸÆ_io_size
 = 
o
->
size
 * o->
lo›s
;

1408 
d⁄e
:

1409 i‡(
td
->
o
.
z⁄e_mode
 =
ZONE_MODE_ZBD
) {

1410 
îr
 = 
	`zbd_£tup_fûes
(
td
);

1411 i‡(
îr
)

1412 
îr_out
;

1415 i‡(
o
->
¸óã_⁄ly
)

1416 
td
->
d⁄e
 = 1;

1418 
	`td_ª°‹e_run°©e
(
td
, 
ﬁd_°©e
);

1422 
îr_off£t
:

1423 
	`log_îr
("%s: youÇìdÅÿ•ecify vÆid off£t=\n", 
o
->
«me
);

1424 
îr_out
:

1425 
	`td_ª°‹e_run°©e
(
td
, 
ﬁd_°©e
);

1427 
	}
}

1429 
boﬁ
 
	$¥e_ªad_fûes
(
thªad_d©a
 *
td
)

1431 
fio_fûe
 *
f
;

1432 
i
;

1434 
	`d¥öt
(
FD_FILE
, "pre_read files\n");

1436 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

1437 i‡(!
	`¥e_ªad_fûe
(
td
, 
f
))

1438  
Ál£
;

1441  
åue
;

1442 
	}
}

1444 
	$__öô_ønd_di°ributi⁄
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

1446 
ønge_size
, 
£ed
;

1447 
uöt64_t
 
ƒ™ges
;

1448 
uöt64_t
 
fsize
;

1450 
ønge_size
 = 
	`mö
(
td
->
o
.
mö_bs
[
DDIR_READ
],Åd->o.mö_bs[
DDIR_WRITE
]);

1451 
fsize
 = 
	`mö
(
f
->
ªÆ_fûe_size
, f->
io_size
);

1453 
ƒ™ges
 = (
fsize
 + 
ønge_size
 - 1ULL) /Ñange_size;

1455 
£ed
 = 
	`jhash
(
f
->
fûe_«me
, 
	`°æí
(f->fûe_«me), 0Ë* 
td
->
thªad_numbî
;

1456 i‡(!
td
->
o
.
ønd_ª≥©abÀ
)

1457 
£ed
 = 
td
->
ønd_£eds
[
FIO_RAND_BLOCK_OFF
];

1459 i‡(
td
->
o
.
øndom_di°ributi⁄
 =
FIO_RAND_DIST_ZIPF
)

1460 
	`zùf_öô
(&
f
->
zùf
, 
ƒ™ges
, 
td
->
o
.
zùf_thëa
.
u
.f,Åd->o.
øndom_˚¡î
.u.f, 
£ed
);

1461 i‡(
td
->
o
.
øndom_di°ributi⁄
 =
FIO_RAND_DIST_PARETO
)

1462 
	`∑ªto_öô
(&
f
->
zùf
, 
ƒ™ges
, 
td
->
o
.
∑ªto_h
.
u
.f,Åd->o.
øndom_˚¡î
.u.f, 
£ed
);

1463 i‡(
td
->
o
.
øndom_di°ributi⁄
 =
FIO_RAND_DIST_GAUSS
)

1464 
	`gauss_öô
(&
f
->
gauss
, 
ƒ™ges
, 
td
->
o
.
gauss_dev
.
u
.f,Åd->o.
øndom_˚¡î
.u.f, 
£ed
);

1465 
	}
}

1467 
boﬁ
 
	$öô_ønd_di°ributi⁄
(
thªad_d©a
 *
td
)

1469 
fio_fûe
 *
f
;

1470 
i
;

1471 
°©e
;

1473 i‡(
td
->
o
.
øndom_di°ributi⁄
 =
FIO_RAND_DIST_RANDOM
 ||

1474 
td
->
o
.
øndom_di°ributi⁄
 =
FIO_RAND_DIST_ZONED
 ||

1475 
td
->
o
.
øndom_di°ributi⁄
 =
FIO_RAND_DIST_ZONED_ABS
)

1476  
Ál£
;

1478 
°©e
 = 
	`td_bump_run°©e
(
td
, 
TD_SETTING_UP
);

1480 
	`f‹_óch_fûe
(
td
, 
f
, 
i
)

1481 
	`__öô_ønd_di°ributi⁄
(
td
, 
f
);

1483 
	`td_ª°‹e_run°©e
(
td
, 
°©e
);

1484  
åue
;

1485 
	}
}

1492 
	$check_ønd_gí_limôs
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

1493 
uöt64_t
 
blocks
)

1495 i‡(
blocks
 <
FRAND32_MAX
)

1497 i‡(
td
->
o
.
øndom_gíî©‹
 !
FIO_RAND_GEN_TAUSWORTHE
)

1505 
	`log_öfo
("fio: file %sÉxceeds 32-bitÅauswortheÑandom generator.\n",

1506 
f
->
fûe_«me
);

1508 i‡(!
	`fio_›ti⁄_is_£t
(&
td
->
o
, 
øndom_gíî©‹
)) {

1509 
	`log_öfo
("fio: SwitchingÅoÅausworthe64. UseÅhe "

1512 
td
->
o
.
øndom_gíî©‹
 = 
FIO_RAND_GEN_TAUSWORTHE64
;

1519 
	`log_öfo
("fio: UseÅheÑandom_generator= optionÅo switchÅoÜfsr or "

1522 
	}
}

1524 
boﬁ
 
	$öô_øndom_m≠
(
thªad_d©a
 *
td
)

1526 
blocks
;

1527 
fio_fûe
 *
f
;

1528 
i
;

1530 i‡(
	`öô_ønd_di°ributi⁄
(
td
))

1531  
åue
;

1532 i‡(!
	`td_øndom
(
td
))

1533  
åue
;

1535 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

1536 
uöt64_t
 
fsize
 = 
	`mö
(
f
->
ªÆ_fûe_size
, f->
io_size
);

1538 i‡(
td
->
o
.
z⁄e_mode
 =
ZONE_MODE_STRIDED
)

1539 
fsize
 = 
td
->
o
.
z⁄e_ønge
;

1541 
blocks
 = 
fsize
 / (Ë
td
->
o
.
rw_mö_bs
;

1543 i‡(
	`check_ønd_gí_limôs
(
td
, 
f
, 
blocks
))

1544  
Ál£
;

1546 i‡(
td
->
o
.
øndom_gíî©‹
 =
FIO_RAND_GEN_LFSR
) {

1547 
uöt64_t
 
£ed
;

1549 
£ed
 = 
td
->
ønd_£eds
[
FIO_RAND_BLOCK_OFF
];

1551 i‡(!
	`lf§_öô
(&
f
->
lf§
, 
blocks
, 
£ed
, 0)) {

1552 
	`fio_fûe_£t_lf§
(
f
);

1555 
	`log_îr
("fio: failed initializing LFSR\n");

1556  
Ál£
;

1558 } i‡(!
td
->
o
.
n‹™domm≠
) {

1559 
f
->
io_axm≠
 = 
	`axm≠_√w
(
blocks
);

1560 i‡(
f
->
io_axm≠
) {

1561 
	`fio_fûe_£t_axm≠
(
f
);

1564 } i‡(
td
->
o
.
n‹™domm≠
)

1567 i‡(!
td
->
o
.
so·øndomm≠
) {

1568 
	`log_îr
("fio: failedállocatingÑandom map. IfÑunning"

1572  
Ál£
;

1575 
	`log_öfo
("fio: file %s failedállocatingÑandom map. Running "

1576 "job wôhout.\n", 
f
->
fûe_«me
);

1579  
åue
;

1580 
	}
}

1582 
	$˛o£_fûes
(
thªad_d©a
 *
td
)

1584 
fio_fûe
 *
f
;

1585 
i
;

1587 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

1588 i‡(
	`fio_fûe_›í
(
f
))

1589 
	`td_io_˛o£_fûe
(
td
, 
f
);

1591 
	}
}

1593 
	$fio_fûe_‰ì
(
fio_fûe
 *
f
)

1595 i‡(
	`fio_fûe_axm≠
(
f
))

1596 
	`axm≠_‰ì
(
f
->
io_axm≠
);

1597 i‡(!
	`fio_fûe_smÆloc
(
f
)) {

1598 
	`‰ì
(
f
->
fûe_«me
);

1599 
	`‰ì
(
f
);

1601 
	`s‰ì
(
f
->
fûe_«me
);

1602 
	`s‰ì
(
f
);

1604 
	}
}

1606 
	$˛o£_™d_‰ì_fûes
(
thªad_d©a
 *
td
)

1608 
fio_fûe
 *
f
;

1609 
i
;

1611 
	`d¥öt
(
FD_FILE
, "close files\n");

1613 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

1614 i‡(
td
->
o
.
u∆ök
 && 
f
->
fûëy≥
 =
FIO_TYPE_FILE
) {

1615 
	`d¥öt
(
FD_FILE
, "‰ì u∆ök %s\n", 
f
->
fûe_«me
);

1616 
	`td_io_u∆ök_fûe
(
td
, 
f
);

1619 i‡(
	`fio_fûe_›í
(
f
))

1620 
	`td_io_˛o£_fûe
(
td
, 
f
);

1622 
	`ªmove_fûe_hash
(
f
);

1624 i‡(
td
->
o
.
u∆ök
 && 
f
->
fûëy≥
 =
FIO_TYPE_FILE
) {

1625 
	`d¥öt
(
FD_FILE
, "‰ì u∆ök %s\n", 
f
->
fûe_«me
);

1626 
	`td_io_u∆ök_fûe
(
td
, 
f
);

1629 
	`zbd_˛o£_fûe
(
f
);

1630 
	`fio_fûe_‰ì
(
f
);

1633 
td
->
o
.
fûíame
 = 
NULL
;

1634 
	`‰ì
(
td
->
fûes
);

1635 
	`‰ì
(
td
->
fûe_locks
);

1636 
td
->
fûes_ödex
 = 0;

1637 
td
->
fûes
 = 
NULL
;

1638 
td
->
fûe_locks
 = 
NULL
;

1639 
td
->
o
.
fûe_lock_mode
 = 
FILE_LOCK_NONE
;

1640 
td
->
o
.
ƒ_fûes
 = 0;

1641 
	}
}

1643 
	$gë_fûe_ty≥
(
fio_fûe
 *
f
)

1645 
°©
 
sb
;

1647 i‡(!
	`°rcmp
(
f
->
fûe_«me
, "-"))

1648 
f
->
fûëy≥
 = 
FIO_TYPE_PIPE
;

1650 
f
->
fûëy≥
 = 
FIO_TYPE_FILE
;

1652 #ifde‡
WIN32


1655 i‡(
	`°∫cmp
(
f
->
fûe_«me
, "\\\\.\\", 4) == 0)

1656 
f
->
fûëy≥
 = 
FIO_TYPE_BLOCK
;

1659 i‡(!
	`°©
(
f
->
fûe_«me
, &
sb
)) {

1660 i‡(
	`S_ISBLK
(
sb
.
°_mode
))

1661 
f
->
fûëy≥
 = 
FIO_TYPE_BLOCK
;

1662 i‡(
	`S_ISCHR
(
sb
.
°_mode
))

1663 
f
->
fûëy≥
 = 
FIO_TYPE_CHAR
;

1664 i‡(
	`S_ISFIFO
(
sb
.
°_mode
))

1665 
f
->
fûëy≥
 = 
FIO_TYPE_PIPE
;

1667 
	}
}

1669 
boﬁ
 
	$__is_Æªady_Æloˇãd
(c⁄° *
‚ame
, 
boﬁ
 
£t
)

1671 
Êi°_hód
 *
íåy
;

1672 
boﬁ
 
ªt
;

1674 
ªt
 = 
	`fûe_bloom_exi°s
(
‚ame
, 
£t
);

1675 i‡(!
ªt
)

1676  
ªt
;

1678 
	`Êi°_f‹_óch
(
íåy
, &
fûíame_li°
) {

1679 
fûe_«me
 *
‚
;

1681 
‚
 = 
	`Êi°_íåy
(
íåy
, 
fûe_«me
, 
li°
);

1683 i‡(!
	`°rcmp
(
‚
->
fûíame
, 
‚ame
))

1684  
åue
;

1687  
Ál£
;

1688 
	}
}

1690 
boﬁ
 
	$is_Æªady_Æloˇãd
(c⁄° *
‚ame
)

1692 
boﬁ
 
ªt
;

1694 
	`fio_fûe_hash_lock
();

1695 
ªt
 = 
	`__is_Æªady_Æloˇãd
(
‚ame
, 
Ál£
);

1696 
	`fio_fûe_hash_u∆ock
();

1698  
ªt
;

1699 
	}
}

1701 
	$£t_Æªady_Æloˇãd
(c⁄° *
‚ame
)

1703 
fûe_«me
 *
‚
;

1705 
‚
 = 
	`mÆloc
((
fûe_«me
));

1706 
‚
->
fûíame
 = 
	`°rdup
(
‚ame
);

1708 
	`fio_fûe_hash_lock
();

1709 i‡(!
	`__is_Æªady_Æloˇãd
(
‚ame
, 
åue
)) {

1710 
	`Êi°_add_èû
(&
‚
->
li°
, &
fûíame_li°
);

1711 
‚
 = 
NULL
;

1713 
	`fio_fûe_hash_u∆ock
();

1715 i‡(
‚
) {

1716 
	`‰ì
(
‚
->
fûíame
);

1717 
	`‰ì
(
‚
);

1719 
	}
}

1721 
	$‰ì_Æªady_Æloˇãd
()

1723 
Êi°_hód
 *
íåy
, *
tmp
;

1724 
fûe_«me
 *
‚
;

1726 i‡(
	`Êi°_em±y
(&
fûíame_li°
))

1729 
	`fio_fûe_hash_lock
();

1730 
	`Êi°_f‹_óch_ß„
(
íåy
, 
tmp
, &
fûíame_li°
) {

1731 
‚
 = 
	`Êi°_íåy
(
íåy
, 
fûe_«me
, 
li°
);

1732 
	`‰ì
(
‚
->
fûíame
);

1733 
	`Êi°_dñ
(&
‚
->
li°
);

1734 
	`‰ì
(
‚
);

1737 
	`fio_fûe_hash_u∆ock
();

1738 
	}
}

1740 
fio_fûe
 *
	$Æloc_√w_fûe
(
thªad_d©a
 *
td
)

1742 
fio_fûe
 *
f
;

1744 i‡(
	`td_i€ngöe_Êagged
(
td
, 
FIO_NOFILEHASH
))

1745 
f
 = 
	`ˇŒoc
(1, (*f));

1747 
f
 = 
	`sˇŒoc
(1, (*f));

1748 i‡(!
f
) {

1749 
	`as£π
(0);

1750  
NULL
;

1753 
f
->
fd
 = -1;

1754 
f
->
shadow_fd
 = -1;

1755 
	`fio_fûe_ª£t
(
td
, 
f
);

1756 i‡(!
	`td_i€ngöe_Êagged
(
td
, 
FIO_NOFILEHASH
))

1757 
	`fio_fûe_£t_smÆloc
(
f
);

1758  
f
;

1759 
	}
}

1761 
boﬁ
 
	$exi°s_™d_nŸ_ªgfûe
(c⁄° *
fûíame
)

1763 
°©
 
sb
;

1765 i‡(
	`l°©
(
fûíame
, &
sb
) == -1)

1766  
Ál£
;

1768 #i‚de‡
WIN32


1769 i‡(
	`S_ISREG
(
sb
.
°_mode
))

1770  
Ál£
;

1774 i‡(
	`S_ISREG
(
sb
.
°_mode
Ë&& 
	`°∫cmp
(
fûíame
, "\\\\.\\", 4) != 0)

1775  
Ál£
;

1778  
åue
;

1779 
	}
}

1781 
	$add_fûe
(
thªad_d©a
 *
td
, c⁄° *
‚ame
, 
numjob
, 
öc
)

1783 
cur_fûes
 = 
td
->
fûes_ödex
;

1784 
fûe_«me
[
PATH_MAX
];

1785 
fio_fûe
 *
f
;

1786 
Àn
 = 0;

1788 
	`d¥öt
(
FD_FILE
, "add fûê%s\n", 
‚ame
);

1790 i‡(
td
->
o
.
dúe˘‹y
)

1791 
Àn
 = 
	`£t_«me_idx
(
fûe_«me
, 
PATH_MAX
, 
td
->
o
.
dúe˘‹y
, 
numjob
,

1792 
td
->
o
.
unique_fûíame
);

1794 
	`•rötf
(
fûe_«me
 + 
Àn
, "%s", 
‚ame
);

1797 i‡(
numjob
 && 
	`is_Æªady_Æloˇãd
(
fûe_«me
) &&

1798 !
	`exi°s_™d_nŸ_ªgfûe
(
‚ame
))

1801 
f
 = 
	`Æloc_√w_fûe
(
td
);

1803 i‡(
td
->
fûes_size
 <td->
fûes_ödex
) {

1804 
√w_size
 = 
td
->
o
.
ƒ_fûes
 + 1;

1806 
	`d¥öt
(
FD_FILE
, "ªsizêfûê¨øyÅÿ%d fûes\n", 
√w_size
);

1808 
td
->
fûes
 = 
	`ªÆloc
—d->fûes, 
√w_size
 * (
f
));

1809 i‡(
td
->
fûes
 =
NULL
) {

1810 
	`log_îr
("fio:Ñealloc OOM\n");

1811 
	`as£π
(0);

1813 i‡(
td
->
o
.
fûe_lock_mode
 !
FILE_LOCK_NONE
) {

1814 
td
->
fûe_locks
 = 
	`ªÆloc
—d->fûe_locks, 
√w_size
);

1815 i‡(!
td
->
fûe_locks
) {

1816 
	`log_îr
("fio:Ñealloc OOM\n");

1817 
	`as£π
(0);

1819 
td
->
fûe_locks
[
cur_fûes
] = 
FILE_LOCK_NONE
;

1821 
td
->
fûes_size
 = 
√w_size
;

1823 
td
->
fûes
[
cur_fûes
] = 
f
;

1824 
f
->
fûío
 = 
cur_fûes
;

1829 i‡(
td
->
io_›s
 && 
	`td_i€ngöe_Êagged
—d, 
FIO_DISKLESSIO
))

1830 
f
->
ªÆ_fûe_size
 = -1ULL;

1832 i‡(
	`td_i€ngöe_Êagged
(
td
, 
FIO_NOFILEHASH
))

1833 
f
->
fûe_«me
 = 
	`°rdup
(file_name);

1835 
f
->
fûe_«me
 = 
	`smÆloc_°rdup
(file_name);

1838 
	`as£π
(
f
->
fûe_«me
);

1840 
	`gë_fûe_ty≥
(
f
);

1842 
td
->
o
.
fûe_lock_mode
) {

1843 
FILE_LOCK_NONE
:

1845 
FILE_LOCK_READWRITE
:

1846 
f
->
rwlock
 = 
	`fio_rwlock_öô
();

1848 
FILE_LOCK_EXCLUSIVE
:

1849 
f
->
lock
 = 
	`fio_£m_öô
(
FIO_SEM_UNLOCKED
);

1852 
	`log_îr
("fio: unknow¿lock mode: %d\n", 
td
->
o
.
fûe_lock_mode
);

1853 
	`as£π
(0);

1856 
td
->
fûes_ödex
++;

1858 i‡(
td
->
o
.
numjobs
 > 1)

1859 
	`£t_Æªady_Æloˇãd
(
fûe_«me
);

1861 i‡(
öc
)

1862 
td
->
o
.
ƒ_fûes
++;

1864 
	`d¥öt
(
FD_FILE
, "fûê%∞\"%s\"áddedáà%d\n", 
f
, f->
fûe_«me
,

1865 
cur_fûes
);

1867  
cur_fûes
;

1868 
	}
}

1870 
	$add_fûe_ex˛usive
(
thªad_d©a
 *
td
, c⁄° *
‚ame
)

1872 
fio_fûe
 *
f
;

1873 
i
;

1875 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

1876 i‡(!
	`°rcmp
(
f
->
fûe_«me
, 
‚ame
))

1877  
i
;

1880  
	`add_fûe
(
td
, 
‚ame
, 0, 1);

1881 
	}
}

1883 
	$gë_fûe
(
fio_fûe
 *
f
)

1885 
	`d¥öt
(
FD_FILE
, "gë fûê%s,Ñef=%d\n", 
f
->
fûe_«me
, f->
ª„ªn˚s
);

1886 
	`as£π
(
	`fio_fûe_›í
(
f
));

1887 
f
->
ª„ªn˚s
++;

1888 
	}
}

1890 
	$put_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

1892 
f_ªt
 = 0, 
ªt
 = 0;

1894 
	`d¥öt
(
FD_FILE
, "puàfûê%s,Ñef=%d\n", 
f
->
fûe_«me
, f->
ª„ªn˚s
);

1896 i‡(!
	`fio_fûe_›í
(
f
)) {

1897 
	`as£π
(
f
->
fd
 == -1);

1901 
	`as£π
(
f
->
ª„ªn˚s
);

1902 i‡(--
f
->
ª„ªn˚s
)

1905 
	`disk_utû_dec
(
f
->
du
);

1907 i‡(
td
->
o
.
fûe_lock_mode
 !
FILE_LOCK_NONE
)

1908 
	`u∆ock_fûe_Æl
(
td
, 
f
);

1910 i‡(
	`should_fsync
(
td
Ë&&Åd->
o
.
fsync_⁄_˛o£
) {

1911 
f_ªt
 = 
	`fsync
(
f
->
fd
);

1912 i‡(
f_ªt
 < 0)

1913 
f_ªt
 = 
î∫o
;

1916 i‡(
td
->
io_›s
->
˛o£_fûe
)

1917 
ªt
 = 
td
->
io_›s
->
	`˛o£_fûe
—d, 
f
);

1919 i‡(!
ªt
)

1920 
ªt
 = 
f_ªt
;

1922 
td
->
ƒ_›í_fûes
--;

1923 
	`fio_fûe_˛ór_˛osög
(
f
);

1924 
	`fio_fûe_˛ór_›í
(
f
);

1925 
	`as£π
(
f
->
fd
 == -1);

1926  
ªt
;

1927 
	}
}

1929 
	$lock_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
, 
fio_ddú
 
ddú
)

1931 i‡(!
f
->
lock
 || 
td
->
o
.
fûe_lock_mode
 =
FILE_LOCK_NONE
)

1934 i‡(
td
->
o
.
fûe_lock_mode
 =
FILE_LOCK_READWRITE
) {

1935 i‡(
ddú
 =
DDIR_READ
)

1936 
	`fio_rwlock_ªad
(
f
->
rwlock
);

1938 
	`fio_rwlock_wrôe
(
f
->
rwlock
);

1939 } i‡(
td
->
o
.
fûe_lock_mode
 =
FILE_LOCK_EXCLUSIVE
)

1940 
	`fio_£m_down
(
f
->
lock
);

1942 
td
->
fûe_locks
[
f
->
fûío
] =Åd->
o
.
fûe_lock_mode
;

1943 
	}
}

1945 
	$u∆ock_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

1947 i‡(!
f
->
lock
 || 
td
->
o
.
fûe_lock_mode
 =
FILE_LOCK_NONE
)

1950 i‡(
td
->
o
.
fûe_lock_mode
 =
FILE_LOCK_READWRITE
)

1951 
	`fio_rwlock_u∆ock
(
f
->
rwlock
);

1952 i‡(
td
->
o
.
fûe_lock_mode
 =
FILE_LOCK_EXCLUSIVE
)

1953 
	`fio_£m_up
(
f
->
lock
);

1955 
td
->
fûe_locks
[
f
->
fûío
] = 
FILE_LOCK_NONE
;

1956 
	}
}

1958 
	$u∆ock_fûe_Æl
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

1960 i‡(
td
->
o
.
fûe_lock_mode
 =
FILE_LOCK_NONE
 || !td->
fûe_locks
)

1962 i‡(
td
->
fûe_locks
[
f
->
fûío
] !
FILE_LOCK_NONE
)

1963 
	`u∆ock_fûe
(
td
, 
f
);

1964 
	}
}

1966 
boﬁ
 
	$ªcur£_dú
(
thªad_d©a
 *
td
, c⁄° *
dú«me
)

1968 
dúít
 *
dú
;

1969 
boﬁ
 
ªt
 = 
Ál£
;

1970 
DIR
 *
D
;

1972 
D
 = 
	`›ídú
(
dú«me
);

1973 i‡(!
D
) {

1974 
buf
[
FIO_VERROR_SIZE
];

1976 
	`¢¥ötf
(
buf
, 
FIO_VERROR_SIZE
, "›ídú(%s)", 
dú«me
);

1977 
	`td_vîr‹
(
td
, 
î∫o
, 
buf
);

1978  
åue
;

1981 (
dú
 = 
	`ªaddú
(
D
)Ë!
NULL
) {

1982 
fuŒ_∑th
[
PATH_MAX
];

1983 
°©
 
sb
;

1985 i‡(!
	`°rcmp
(
dú
->
d_«me
, ".") || !strcmp(dir->d_name, ".."))

1988 
	`•rötf
(
fuŒ_∑th
, "%s%c%s", 
dú«me
, 
FIO_OS_PATH_SEPARATOR
, 
dú
->
d_«me
);

1990 i‡(
	`l°©
(
fuŒ_∑th
, &
sb
) == -1) {

1991 i‡(
î∫o
 !
ENOENT
) {

1992 
	`td_vîr‹
(
td
, 
î∫o
, "stat");

1993 
ªt
 = 
åue
;

1998 i‡(
	`S_ISREG
(
sb
.
°_mode
)) {

1999 
	`add_fûe
(
td
, 
fuŒ_∑th
, 0, 1);

2002 i‡(!
	`S_ISDIR
(
sb
.
°_mode
))

2005 
ªt
 = 
	`ªcur£_dú
(
td
, 
fuŒ_∑th
);

2006 i‡(
ªt
)

2010 
	`˛o£dú
(
D
);

2011  
ªt
;

2012 
	}
}

2014 
	$add_dú_fûes
(
thªad_d©a
 *
td
, c⁄° *
∑th
)

2016 
ªt
 = 
	`ªcur£_dú
(
td
, 
∑th
);

2018 i‡(!
ªt
)

2019 
	`log_öfo
("fio: o≥ndúádded %d fûes\n", 
td
->
o
.
ƒ_fûes
);

2021  
ªt
;

2022 
	}
}

2024 
	$dup_fûes
(
thªad_d©a
 *
td
, thªad_d©®*
‹g
)

2026 
fio_fûe
 *
f
;

2027 
i
;

2029 
	`d¥öt
(
FD_FILE
, "du∞fûes: %d\n", 
‹g
->
fûes_ödex
);

2031 i‡(!
‹g
->
fûes
)

2034 
td
->
fûes
 = 
	`ˇŒoc
(
‹g
->
fûes_ödex
, (
f
));

2036 i‡(
td
->
o
.
fûe_lock_mode
 !
FILE_LOCK_NONE
)

2037 
td
->
fûe_locks
 = 
	`mÆloc
(
‹g
->
fûes_ödex
);

2039 
	`as£π
(
‹g
->
fûes_ödex
 >‹g->
o
.
ƒ_fûes
);

2040 
	`f‹_óch_fûe
(
‹g
, 
f
, 
i
) {

2041 
fio_fûe
 *
__f
;

2043 
__f
 = 
	`Æloc_√w_fûe
(
td
);

2045 i‡(
f
->
fûe_«me
) {

2046 i‡(
	`td_i€ngöe_Êagged
(
td
, 
FIO_NOFILEHASH
))

2047 
__f
->
fûe_«me
 = 
	`°rdup
(
f
->file_name);

2049 
__f
->
fûe_«me
 = 
	`smÆloc_°rdup
(
f
->file_name);

2052 
	`as£π
(
__f
->
fûe_«me
);

2053 
__f
->
fûëy≥
 = 
f
->filetype;

2056 i‡(
td
->
o
.
fûe_lock_mode
 =
FILE_LOCK_EXCLUSIVE
)

2057 
__f
->
lock
 = 
f
->lock;

2058 i‡(
td
->
o
.
fûe_lock_mode
 =
FILE_LOCK_READWRITE
)

2059 
__f
->
rwlock
 = 
f
->rwlock;

2061 
td
->
fûes
[
i
] = 
__f
;

2063 
	}
}

2068 
	$gë_fûío
(
thªad_d©a
 *
td
, c⁄° *
‚ame
)

2070 
fio_fûe
 *
f
;

2071 
i
;

2073 
	`f‹_óch_fûe
(
td
, 
f
, 
i
)

2074 i‡(!
	`°rcmp
(
f
->
fûe_«me
, 
‚ame
))

2075  
i
;

2078 
	}
}

2083 
	$‰ì_ªÀa£_fûes
(
thªad_d©a
 *
td
)

2085 
	`˛o£_fûes
(
td
);

2086 
td
->
o
.
ƒ_fûes
 = 0;

2087 
td
->
o
.
›í_fûes
 = 0;

2088 
td
->
fûes_ödex
 = 0;

2089 
	}
}

2091 
	$fio_fûe_ª£t
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

2093 
i
;

2095 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

2096 
f
->
œ°_pos
[
i
] = f->
fûe_off£t
;

2097 
f
->
œ°_°¨t
[
i
] = -1ULL;

2100 i‡(
	`fio_fûe_axm≠
(
f
))

2101 
	`axm≠_ª£t
(
f
->
io_axm≠
);

2102 i‡(
	`fio_fûe_lf§
(
f
))

2103 
	`lf§_ª£t
(&
f
->
lf§
, 
td
->
ønd_£eds
[
FIO_RAND_BLOCK_OFF
]);

2105 
	`zbd_fûe_ª£t
(
td
, 
f
);

2106 
	}
}

2108 
boﬁ
 
	$fio_fûes_d⁄e
(
thªad_d©a
 *
td
)

2110 
fio_fûe
 *
f
;

2111 
i
;

2113 
	`f‹_óch_fûe
(
td
, 
f
, 
i
)

2114 i‡(!
	`fio_fûe_d⁄e
(
f
))

2115  
Ál£
;

2117  
åue
;

2118 
	}
}

2121 
	$fûe£tup_mem_‰ì
()

2123 
	`‰ì_Æªady_Æloˇãd
();

2124 
	}
}

2129 
	$fio_£t_dúe˘io
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

2131 #ifde‡
FIO_OS_DIRECTIO


2132 
ªt
 = 
	`fio_£t_odúe˘
(
f
);

2134 i‡(
ªt
) {

2135 
	`td_vîr‹
(
td
, 
ªt
, "fio_set_directio");

2136 #i‡
	`deföed
(
__sun__
)

2137 i‡(
ªt
 =
ENOTTY
) {

2138 
	`log_îr
("fio: doing directIOÅo RAW devices or ZFSÇot supported\n");

2140 
	`log_îr
("fio:Åhe file system doesÇot seemÅo support direct IO\n");

2143 
	`log_îr
("fio:Åhe file system doesÇot seemÅo support direct IO\n");

2150 
	`log_îr
("fio: direct IO isÇot supported onÅhis host operating system\n");

2153 
	}
}

	@fio.c

24 
	~"fio.h
"

26 
	$maö
(
¨gc
, *
¨gv
[], *
ívp
[])

28 
ªt
 = 1;

30 
	`compûëime_as£π
(
TD_NR
 <
TD_ENG_FLAG_SHIFT
, "TD_ENG_FLAG_SHIFT");

32 i‡(
	`öôülize_fio
(
ívp
))

35 #i‡!
	`deföed
(
CONFIG_GETTIMEOFDAY
Ë&& !deföed(
CONFIG_CLOCK_GETTIME
)

39 i‡(
	`fio_£rvî_¸óã_sk_key
())

40 
d⁄e
;

42 i‡(
	`∑r£_›ti⁄s
(
¨gc
, 
¨gv
))

43 
d⁄e_key
;

49 
	`£tvbuf
(
°dout
, 
NULL
, 
_IOLBF
, 0);

51 
	`fio_time_öô
();

53 i‡(
ƒ_˛õ¡s
) {

54 
	`£t_gíesis_time
();

56 i‡(
	`fio_°¨t_Æl_˛õ¡s
())

57 
d⁄e_key
;

58 
ªt
 = 
	`fio_h™dÀ_˛õ¡s
(&
fio_˛õ¡_›s
);

60 
ªt
 = 
	`fio_backíd
(
NULL
);

62 
d⁄e_key
:

63 
	`fio_£rvî_de°roy_sk_key
();

64 
d⁄e
:

65 
	`deöôülize_fio
();

66  
ªt
;

67 
	}
}

	@fio.h

1 #i‚de‡
FIO_H


2 
	#FIO_H


	)

4 
	~<sched.h
>

5 
	~<limôs.h
>

6 
	~<±hªad.h
>

7 
	~<sys/time.h
>

8 
	~<sys/ªsour˚.h
>

9 
	~<î∫o.h
>

10 
	~<°dlib.h
>

11 
	~<°dio.h
>

12 
	~<uni°d.h
>

13 
	~<°rög.h
>

14 
	~<öây≥s.h
>

15 
	~<as£π.h
>

17 
	~"compûî/compûî.h
"

18 
	~"thªad_›ti⁄s.h
"

19 
	~"Êi°.h
"

20 
	~"fifo.h
"

21 
	~"¨ch/¨ch.h
"

22 
	~"os/os.h
"

23 
	~"log.h
"

24 
	~"debug.h
"

25 
	~"fûe.h
"

26 
	~"io_ddú.h
"

27 
	~"i€ngöes.h
"

28 
	~"iﬁog.h
"

29 
	~"hñ≥rs.h
"

30 
	~"mömax.h
"

31 
	~"›ti⁄s.h
"

32 
	~"¥ofûe.h
"

33 
	~"fio_time.h
"

34 
	~"gëtime.h
"

35 
	~"o¶ib/gë›t.h
"

36 
	~"lib/ønd.h
"

37 
	~"lib/rbåì.h
"

38 
	~"lib/num2°r.h
"

39 
	~"lib/memÆign.h
"

40 
	~"smÆloc.h
"

41 
	~"˛õ¡.h
"

42 
	~"£rvî.h
"

43 
	~"°©.h
"

44 
	~"Êow.h
"

45 
	~"io_u.h
"

46 
	~"io_u_queue.h
"

47 
	~"w‹kqueue.h
"

48 
	~"°ódy°©e.h
"

49 
	~"lib/now¨n_¢¥ötf.h
"

50 
	~"dedu≥.h
"

52 #ifde‡
CONFIG_SOLARISAIO


53 
	~<sys/asynch.h
>

56 #ifde‡
CONFIG_LIBNUMA


57 
	~<löux/mempﬁicy.h
>

58 
	~<numa.h
>

63 #i‚de‡
MPOL_LOCAL


64 
	#MPOL_LOCAL
 4

	)

68 #ifde‡
CONFIG_CUDA


69 
	~<cuda.h
>

72 
	gfio_£m
;

78 
	mRW_SEQ_SEQ
 = 0,

79 
	mRW_SEQ_IDENT
,

83 
	m__TD_F_VER_BACKLOG
 = 0,

84 
	m__TD_F_TRIM_BACKLOG
,

85 
	m__TD_F_READ_IOLOG
,

86 
	m__TD_F_REFILL_BUFFERS
,

87 
	m__TD_F_SCRAMBLE_BUFFERS
,

88 
	m__TD_F_DO_VERIFY
,

89 
	m__TD_F_PROFILE_OPS
,

90 
	m__TD_F_COMPRESS
,

91 
	m__TD_F_COMPRESS_LOG
,

92 
	m__TD_F_VSTATE_SAVED
,

93 
	m__TD_F_NEED_LOCK
,

94 
	m__TD_F_CHILD
,

95 
	m__TD_F_NO_PROGRESS
,

96 
	m__TD_F_REGROW_LOGS
,

97 
	m__TD_F_MMAP_KEEP
,

98 
	m__TD_F_DIRS_CREATED
,

99 
	m__TD_F_CHECK_RATE
,

100 
	m__TD_F_SYNCS
,

101 
	m__TD_F_LAST
,

105 
	mTD_F_VER_BACKLOG
 = 1U << 
__TD_F_VER_BACKLOG
,

106 
	mTD_F_TRIM_BACKLOG
 = 1U << 
__TD_F_TRIM_BACKLOG
,

107 
	mTD_F_READ_IOLOG
 = 1U << 
__TD_F_READ_IOLOG
,

108 
	mTD_F_REFILL_BUFFERS
 = 1U << 
__TD_F_REFILL_BUFFERS
,

109 
	mTD_F_SCRAMBLE_BUFFERS
 = 1U << 
__TD_F_SCRAMBLE_BUFFERS
,

110 
	mTD_F_DO_VERIFY
 = 1U << 
__TD_F_DO_VERIFY
,

111 
	mTD_F_PROFILE_OPS
 = 1U << 
__TD_F_PROFILE_OPS
,

112 
	mTD_F_COMPRESS
 = 1U << 
__TD_F_COMPRESS
,

113 
	mTD_F_COMPRESS_LOG
 = 1U << 
__TD_F_COMPRESS_LOG
,

114 
	mTD_F_VSTATE_SAVED
 = 1U << 
__TD_F_VSTATE_SAVED
,

115 
	mTD_F_NEED_LOCK
 = 1U << 
__TD_F_NEED_LOCK
,

116 
	mTD_F_CHILD
 = 1U << 
__TD_F_CHILD
,

117 
	mTD_F_NO_PROGRESS
 = 1U << 
__TD_F_NO_PROGRESS
,

118 
	mTD_F_REGROW_LOGS
 = 1U << 
__TD_F_REGROW_LOGS
,

119 
	mTD_F_MMAP_KEEP
 = 1U << 
__TD_F_MMAP_KEEP
,

120 
	mTD_F_DIRS_CREATED
 = 1U << 
__TD_F_DIRS_CREATED
,

121 
	mTD_F_CHECK_RATE
 = 1U << 
__TD_F_CHECK_RATE
,

122 
	mTD_F_SYNCS
 = 1U << 
__TD_F_SYNCS
,

126 
	mFIO_RAND_BS_OFF
 = 0,

127 
	mFIO_RAND_BS1_OFF
,

128 
	mFIO_RAND_BS2_OFF
,

129 
	mFIO_RAND_VER_OFF
,

130 
	mFIO_RAND_MIX_OFF
,

131 
	mFIO_RAND_FILE_OFF
,

132 
	mFIO_RAND_BLOCK_OFF
,

133 
	mFIO_RAND_FILE_SIZE_OFF
,

134 
	mFIO_RAND_TRIM_OFF
,

135 
	mFIO_RAND_BUF_OFF
,

136 
	mFIO_RAND_SEQ_RAND_READ_OFF
,

137 
	mFIO_RAND_SEQ_RAND_WRITE_OFF
,

138 
	mFIO_RAND_SEQ_RAND_TRIM_OFF
,

139 
	mFIO_RAND_START_DELAY
,

140 
	mFIO_DEDUPE_OFF
,

141 
	mFIO_RAND_POISSON_OFF
,

142 
	mFIO_RAND_ZONE_OFF
,

143 
	mFIO_RAND_POISSON2_OFF
,

144 
	mFIO_RAND_POISSON3_OFF
,

145 
	mFIO_RAND_PRIO_CMDS
,

146 
	mFIO_RAND_DEDUPE_WORKING_SET_IX
,

147 
	mFIO_RAND_NR_OFFS
,

151 
	mIO_MODE_INLINE
 = 0,

152 
	mIO_MODE_OFFLOAD
 = 1,

154 
	mRATE_PROCESS_LINEAR
 = 0,

155 
	mRATE_PROCESS_POISSON
 = 1,

157 
	mTHINKTIME_BLOCKS_TYPE_COMPLETE
 = 0,

158 
	mTHINKTIME_BLOCKS_TYPE_ISSUE
 = 1,

162 
	mF_ADV_NONE
 = 0,

163 
	mF_ADV_TYPE
,

164 
	mF_ADV_RANDOM
,

165 
	mF_ADV_SEQUENTIAL
,

172 
sk_out_assign
(
sk_out
 *);

173 
sk_out_dr›
();

175 
	sz⁄e_•lô_ödex
 {

176 
uöt8_t
 
	msize_≥rc
;

177 
uöt8_t
 
	msize_≥rc_¥ev
;

178 
uöt64_t
 
	msize
;

179 
uöt64_t
 
	msize_¥ev
;

185 
	sthªad_d©a
 {

186 
Êi°_hód
 
	m›t_li°
;

187 
	mÊags
;

188 
thªad_›ti⁄s
 
	mo
;

189 *
	meo
;

190 
±hªad_t
 
	mthªad
;

191 
	mthªad_numbî
;

192 
	msubjob_numbî
;

193 
	mgroupid
;

194 
thªad_°©
 
ts
 
__©åibuã__
 ((
Æig√d
(8)));

196 
	m˛õ¡_ty≥
;

198 
io_log
 *
	m¶©_log
;

199 
io_log
 *
	m˛©_log
;

200 
io_log
 *
	m˛©_hi°_log
;

201 
io_log
 *
	mœt_log
;

202 
io_log
 *
	mbw_log
;

203 
io_log
 *
	mi›s_log
;

205 
w‹kqueue
 
	mlog_com¥ess_wq
;

207 
thªad_d©a
 *
	m∑ª¡
;

209 
uöt64_t
 
	m°©_io_byãs
[
DDIR_RWDIR_CNT
];

210 
time•ec
 
	mbw_ßm∂e_time
;

212 
uöt64_t
 
	m°©_io_blocks
[
DDIR_RWDIR_CNT
];

213 
time•ec
 
	mi›s_ßm∂e_time
;

215 vﬁ©ûê
	mupd©e_rußge
;

216 
fio_£m
 *
	mrußge_£m
;

217 
rußge
 
	mru_°¨t
;

218 
rußge
 
	mru_íd
;

220 
fio_fûe
 **
	mfûes
;

221 *
	mfûe_locks
;

222 
	mfûes_size
;

223 
	mfûes_ödex
;

224 
	mƒ_›í_fûes
;

225 
	mƒ_d⁄e_fûes
;

227 
	m√xt_fûe
;

228 
‰™d_°©e
 
	m√xt_fûe_°©e
;

231 
zùf_°©e
 
	m√xt_fûe_zùf
;

232 
gauss_°©e
 
	m√xt_fûe_gauss
;

235 
	mzùf_thëa
;

236 
	m∑ªto_h
;

237 
	mgauss_dev
;

239 
	møndom_˚¡î
;

240 
	mîr‹
;

241 
	msig
;

242 
	md⁄e
;

243 
	m°›_io
;

244 
pid_t
 
	mpid
;

245 *
	m‹ig_buf„r
;

246 
size_t
 
	m‹ig_buf„r_size
;

247 vﬁ©ûê
	mrun°©e
;

248 vﬁ©ûê
boﬁ
 
	mãrmö©e
;

249 
boﬁ
 
	mœ°_was_sync
;

250 
fio_ddú
 
	mœ°_ddú
;

252 
	mmm≠fd
;

254 *
	miﬁog_buf
;

255 
FILE
 *
	miﬁog_f
;

257 
uöt64_t
 
	mønd_£eds
[
FIO_RAND_NR_OFFS
];

259 
‰™d_°©e
 
	mb§™ge_°©e
[
DDIR_RWDIR_CNT
];

260 
‰™d_°©e
 
	mvîify_°©e
;

261 
‰™d_°©e
 
	måim_°©e
;

262 
‰™d_°©e
 
	mdñay_°©e
;

264 
‰™d_°©e
 
	mbuf_°©e
;

265 
‰™d_°©e
 
	mbuf_°©e_¥ev
;

266 
‰™d_°©e
 
	mbuf_°©e_ªt
;

267 
‰™d_°©e
 
	mdedu≥_°©e
;

268 
‰™d_°©e
 
	mz⁄e_°©e
;

269 
‰™d_°©e
 
	m¥io_°©e
;

270 
‰™d_°©e
 
	mdedu≥_w‹kög_£t_ödex_°©e
;

271 
‰™d_°©e
 *
	mdedu≥_w‹kög_£t_°©es
;

273 
	mnum_unique_∑ges
;

275 
z⁄e_•lô_ödex
 **
	mz⁄e_°©e_ödex
;

276 
	mnum_›í_z⁄es
;

278 
	mvîify_b©ch
;

279 
	måim_b©ch
;

281 
thªad_io_li°
 *
	mv°©e
;

283 
	mshm_id
;

288 
	mi›rio
;

294 
i€ngöe_›s
 *
	mio_›s
;

295 
	mio_›s_öô
;

300 *
	mio_›s_d©a
;

305 
	mcur_dïth
;

310 
	mio_u_queued
;

315 
	mio_u_ö_Êight
;

320 
io_u_rög
 
	mio_u_ªqueues
;

321 
io_u_queue
 
	mio_u_‰ìli°
;

322 
io_u_queue
 
	mio_u_Æl
;

323 
±hªad_muãx_t
 
	mio_u_lock
;

324 
±hªad_c⁄d_t
 
	m‰ì_c⁄d
;

329 
Êi°_hód
 
	mvîify_li°
;

330 
±hªad_t
 *
	mvîify_thªads
;

331 
	mƒ_vîify_thªads
;

332 
±hªad_c⁄d_t
 
	mvîify_c⁄d
;

333 
	mvîify_thªad_exô
;

338 
uöt64_t
 
	møã_bps
[
DDIR_RWDIR_CNT
];

339 
uöt64_t
 
	møã_√xt_io_time
[
DDIR_RWDIR_CNT
];

340 
	mœ°_øã_check_byãs
[
DDIR_RWDIR_CNT
];

341 
	mœ°_øã_check_blocks
[
DDIR_RWDIR_CNT
];

342 
	møã_io_issue_byãs
[
DDIR_RWDIR_CNT
];

343 
time•ec
 
	mœ°_øã_check_time
[
DDIR_RWDIR_CNT
];

344 
öt64_t
 
	mœ°_u£c
[
DDIR_RWDIR_CNT
];

345 
‰™d_°©e
 
	mpoiss⁄_°©e
[
DDIR_RWDIR_CNT
];

350 
w‹kqueue
 
	mio_wq
;

352 
uöt64_t
 
	mtŸÆ_io_size
;

353 
uöt64_t
 
	mfûl_devi˚_size
;

358 
uöt64_t
 
	mio_issues
[
DDIR_RWDIR_CNT
];

359 
uöt64_t
 
	mio_issue_byãs
[
DDIR_RWDIR_CNT
];

360 
uöt64_t
 
	mlo›s
;

365 
uöt64_t
 
	mio_blocks
[
DDIR_RWDIR_CNT
];

366 
uöt64_t
 
	mthis_io_blocks
[
DDIR_RWDIR_CNT
];

367 
uöt64_t
 
	mio_byãs
[
DDIR_RWDIR_CNT
];

368 
uöt64_t
 
	mthis_io_byãs
[
DDIR_RWDIR_CNT
];

369 
uöt64_t
 
	mio_skù_byãs
;

370 
uöt64_t
 
	mz⁄e_byãs
;

371 
fio_£m
 *
	m£m
;

372 
uöt64_t
 
	mbyãs_d⁄e
[
DDIR_RWDIR_CNT
];

374 
uöt64_t
 *
	mthöktime_blocks_cou¡î
;

375 
time•ec
 
	mœ°_thöktime
;

376 
uöt64_t
 
	mœ°_thöktime_blocks
;

381 
‰™d_°©e
 
	møndom_°©e
;

383 
time•ec
 
	m°¨t
;

384 
time•ec
 
	mïoch
;

385 
	mÆã∫©e_ïoch
;

386 
time•ec
 
	mœ°_issue
;

387 
	mtime_off£t
;

388 
time•ec
 
	mts_ˇche
;

389 
time•ec
 
	mãrmö©e_time
;

390 
	mts_ˇche_ƒ
;

391 
	mts_ˇche_mask
;

392 
boﬁ
 
	mømp_time_ovî
;

397 
time•ec
 
	mœãncy_ts
;

398 
	mœãncy_qd
;

399 
	mœãncy_qd_high
;

400 
	mœãncy_qd_low
;

401 
	mœãncy_Áûed
;

402 
	mœãncy_°abÀ_cou¡
;

403 
uöt64_t
 
	mœãncy_ios
;

404 
	mœãncy_íd_run
;

409 
‰™d_°©e
 
	mrwmix_°©e
;

410 
	mrwmix_issues
;

411 
fio_ddú
 
	mrwmix_ddú
;

412 
	mddú_£q_ƒ
;

417 
‰™d_°©e
 
	m£q_ønd_°©e
[
DDIR_RWDIR_CNT
];

423 
rb_roŸ
 
	mio_hi°_åì
;

424 
Êi°_hód
 
	mio_hi°_li°
;

425 
	mio_hi°_Àn
;

430 
Êi°_hód
 
	mio_log_li°
;

431 
FILE
 *
	mio_log_rfûe
;

432 
	mio_log_blkåa˚
;

433 
	mio_log_blkåa˚_sw≠
;

434 
	mio_log_œ°_âime
;

435 
time•ec
 
	mio_log_°¨t_time
;

436 
	mio_log_cuºít
;

437 
	mio_log_checkm¨k
;

438 
	mio_log_highm¨k
;

439 
	mio_log_vîsi⁄
;

440 
time•ec
 
	mio_log_highm¨k_time
;

445 
Êi°_hód
 
	måim_li°
;

446 
	måim_íåõs
;

451 
	mfûe_£rvi˚_ƒ
;

452 
	mfûe_£rvi˚_À·
;

453 
fio_fûe
 *
	mfûe_£rvi˚_fûe
;

455 
	msync_fûe_ønge_ƒ
;

460 
‰™d_°©e
 
	mfûe_size_°©e
;

465 
	mtŸÆ_îr_cou¡
;

466 
	mfú°_îr‹
;

468 
fio_Êow
 *
	mÊow
;

469 
	mÊow_cou¡î
;

474 
¥of_io_›s
 
	m¥of_io_›s
;

475 *
	m¥of_d©a
;

477 *
	mpö√d_mem
;

479 
°ódy°©e_d©a
 
	mss
;

481 
	mvîr‹
[
FIO_VERROR_SIZE
];

483 #ifde‡
CONFIG_CUDA


487 
	mgpu_dev_˙t
;

488 
	mgpu_dev_id
;

489 
CUdevi˚
 
	mcu_dev
;

490 
CUc⁄ãxt
 
	mcu_˘x
;

491 
CUdevi˚±r
 
	mdev_mem_±r
;

496 
	sthªad_£gmít
 {

497 
thªad_d©a
 *
	mthªads
;

498 
	mshm_id
;

499 
	mƒ_thªads
;

506 
	mFIO_ETA_AUTO
,

507 
	mFIO_ETA_ALWAYS
,

508 
	mFIO_ETA_NEVER
,

511 
	#__td_vîr‹
(
td
, 
îr
, 
msg
, 
func
) \

513 
____e
 = (
îr
); \

514 i‡((
td
)->
îr‹
) \

516 (
td
)->
îr‹
 = 
____e
; \

517 i‡(!(
td
)->
fú°_îr‹
) \

518 
	`now¨n_¢¥ötf
(
td
->
vîr‹
, (td->verror), \

520 
__FILE__
, 
__LINE__
, (
func
), (
msg
)); \

521 } 0)

	)

524 
	#td_˛ór_îr‹
(
td
) do { \

525 (
td
)->
îr‹
 = 0; \

526 i‡((
td
)->
∑ª¡
) \

527 (
td
)->
∑ª¡
->
îr‹
 = 0; \

528 } 0)

	)

530 
	#td_vîr‹
(
td
, 
îr
, 
func
) do { \

531 
	`__td_vîr‹
((
td
), (
îr
), 
	`°ªº‹
(”º)), (
func
)); \

532 i‡((
td
)->
∑ª¡
) \

533 
	`__td_vîr‹
((
td
)->
∑ª¡
, (
îr
), 
	`°ªº‹
(”º)), (
func
)); \

534 } 0)

	)

536 
	#td_vmsg
(
td
, 
îr
, 
msg
, 
func
) do { \

537 
	`__td_vîr‹
((
td
), (
îr
), (
msg
), (
func
)); \

538 i‡((
td
)->
∑ª¡
) \

539 
	`__td_vîr‹
((
td
)->
∑ª¡
, (
îr
), (
msg
), (
func
)); \

540 } 0)

	)

542 
	#__fio_°rögify_1
(
x
Ë#x

	)

543 
	#__fio_°rögify
(
x
Ë
	`__fio_°rögify_1
(x)

	)

545 
	#REAL_MAX_JOBS
 4096

	)

546 
	#JOBS_PER_SEG
 8

	)

547 
	#REAL_MAX_SEG
 (
REAL_MAX_JOBS
 / 
JOBS_PER_SEG
)

	)

549 
boﬁ
 
exôÆl_⁄_ãrmö©e
;

550 
thªad_numbî
;

551 
°©_numbî
;

552 
ƒ_£gmíts
;

553 
cur_£gmít
;

554 
groupid
;

555 
ouçut_f‹m©
;

556 
≠≥nd_ãr£_ouçut
;

557 
ãmp_°Æl_ts
;

558 
uöçå_t
 
∑ge_mask
, 
∑ge_size
;

559 
boﬁ
 
ªad_⁄ly
;

560 
ëa_¥öt
;

561 
ëa_√w_löe
;

562 
ëa_öãrvÆ_m£c
;

563 
d⁄e_£cs
;

564 
fio_gtod_ofÊﬂd
;

565 
fio_gtod_˝u
;

566 
fio_cs
 
fio_˛ock_sour˚
;

567 
fio_˛ock_sour˚_£t
;

568 
w¨nögs_Áèl
;

569 
ãr£_vîsi⁄
;

570 
boﬁ
 
is_backíd
;

571 
boﬁ
 
is_loˇl_backíd
;

572 
ƒ_˛õ¡s
;

573 
boﬁ
 
log_sy¶og
;

574 
°©us_öãrvÆ
;

575 c⁄° 
fio_vîsi⁄_°rög
[];

576 *
åiggî_fûe
;

577 *
åiggî_cmd
;

578 *
åiggî_ªmŸe_cmd
;

579 
åiggî_timeout
;

580 *
aux_∑th
;

582 
thªad_£gmít
 
£gmíts
[
REAL_MAX_SEG
];

584 
ölöe
 
thªad_d©a
 *
	$äumbî_to_td
(
äumbî
)

586 
thªad_£gmít
 *
£g
;

588 
£g
 = &
£gmíts
[
äumbî
 / 
JOBS_PER_SEG
];

589  &
£g
->
thªads
[
äumbî
 & (
JOBS_PER_SEG
 - 1)];

590 
	}
}

592 
ölöe
 
boﬁ
 
	$is_ru¬ög_backíd
()

594  
is_backíd
 || 
is_loˇl_backíd
;

595 
	}
}

597 
boﬁ
 
ëa_time_wôhö_¶ack
(
time
);

599 
ölöe
 
	$fio_ro_check
(c⁄° 
thªad_d©a
 *
td
, 
io_u
 *io_u)

601 
	`as£π
(!(
io_u
->
ddú
 =
DDIR_WRITE
 && !
	`td_wrôe
(
td
)) &&

602 !(
io_u
->
ddú
 =
DDIR_TRIM
 && !
	`td_åim
(
td
)));

603 
	}
}

605 
ölöe
 
boﬁ
 
	$should_fsync
(
thªad_d©a
 *
td
)

607 i‡(
td
->
œ°_was_sync
)

608  
Ál£
;

609 i‡(
	`td_wrôe
(
td
Ë||Åd->
o
.
ovîride_sync
)

610  
åue
;

612  
Ál£
;

613 
	}
}

618 
__mu°_check
 
fio_öô_›ti⁄s
();

619 
__mu°_check
 
∑r£_›ti⁄s
(, **);

620 
∑r£_jobs_öi
(*, , , );

621 
∑r£_cmd_löe
(, **, );

622 
fio_backíd
(
sk_out
 *);

623 
ª£t_fio_°©e
();

624 
˛ór_io_°©e
(
thªad_d©a
 *, );

625 
fio_›ti⁄s_∑r£
(
thªad_d©a
 *, **, );

626 
fio_keyw‹ds_öô
();

627 
fio_keyw‹ds_exô
();

628 
fio_cmd_›ti⁄_∑r£
(
thªad_d©a
 *, const *, *);

629 
fio_cmd_i€ngöe_›ti⁄_∑r£
(
thªad_d©a
 *, const *, *);

630 
fio_fûl_deÁu…_›ti⁄s
(
thªad_d©a
 *);

631 
fio_show_›ti⁄_hñp
(const *);

632 
fio_›ti⁄s_£t_i€ngöe_›ts
(
›ti⁄
 *
l⁄g_›ti⁄s
, 
thªad_d©a
 *
td
);

633 
fio_›ti⁄s_dup_™d_öô
(
›ti⁄
 *);

634 *
fio_›ti⁄_dup_subs
(const *);

635 
fio_›ti⁄s_mem_du≥
(
thªad_d©a
 *);

636 
td_fûl_ønd_£eds
(
thªad_d©a
 *);

637 
td_fûl_vîify_°©e_£ed
(
thªad_d©a
 *);

638 
add_job_›ts
(const **, );

639 
i€ngöe_lﬂd
(
thªad_d©a
 *);

640 
boﬁ
 
∑r£_dryrun
();

641 
fio_ru¬ög_‹_≥ndög_io_thªads
();

642 
fio_£t_fd_n⁄blockög
(, const *);

643 
sig_show_°©us
(
sig
);

644 
thªad_d©a
 *
gë_globÆ_›ti⁄s
();

646 
uöçå_t
 
∑ge_mask
;

647 
uöçå_t
 
∑ge_size
;

648 
öôülize_fio
(*
ívp
[]);

649 
deöôülize_fio
();

651 
	#FIO_GETOPT_JOB
 0x89000000

	)

652 
	#FIO_GETOPT_IOENGINE
 0x98000000

	)

653 
	#FIO_NR_OPTIONS
 (
FIO_MAX_OPTS
 + 128)

	)

658 
¥öt_thªad_°©us
();

659 
¥öt_°©us_öô
();

660 *
fio_uöt_to_kmg
(
vÆ
);

669 
	mTD_NOT_CREATED
 = 0,

670 
	mTD_CREATED
,

671 
	mTD_INITIALIZED
,

672 
	mTD_RAMP
,

673 
	mTD_SETTING_UP
,

674 
	mTD_RUNNING
,

675 
	mTD_PRE_READING
,

676 
	mTD_VERIFYING
,

677 
	mTD_FSYNCING
,

678 
	mTD_FINISHING
,

679 
	mTD_EXITED
,

680 
	mTD_REAPED
,

681 
	mTD_LAST
,

682 
	mTD_NR
,

685 
	#TD_ENG_FLAG_SHIFT
 18

	)

686 
	#TD_ENG_FLAG_MASK
 ((1ULL << 18Ë- 1)

	)

688 
ölöe
 
	$td_£t_i€ngöe_Êags
(
thªad_d©a
 *
td
)

690 
td
->
Êags
 = (~(
TD_ENG_FLAG_MASK
 << 
TD_ENG_FLAG_SHIFT
) &Åd->flags) |

691 (()
td
->
io_›s
->
Êags
 << 
TD_ENG_FLAG_SHIFT
);

692 
	}
}

694 
ölöe
 
boﬁ
 
	$td_i€ngöe_Êagged
(
thªad_d©a
 *
td
,

695 
fio_i€ngöe_Êags
 
Êags
)

697  ((
td
->
Êags
 >> 
TD_ENG_FLAG_SHIFT
) & flags) != 0;

698 
	}
}

700 
td_£t_run°©e
(
thªad_d©a
 *, );

701 
td_bump_run°©e
(
thªad_d©a
 *, );

702 
td_ª°‹e_run°©e
(
thªad_d©a
 *, );

703 c⁄° *
run°©e_to_«me
(
run°©e
);

709 
	#FIO_REAP_TIMEOUT
 300

	)

712 
	mTERMINATE_NONE
 = 0,

713 
	mTERMINATE_GROUP
 = 1,

714 
	mTERMINATE_STONEWALL
 = 2,

715 
	mTERMINATE_ALL
 = -1,

718 
fio_ãrmö©e_thªads
(, );

719 
fio_m¨k_td_ãrmö©e
(
thªad_d©a
 *);

724 
__mu°_check
 
fio_pö_mem‹y
(
thªad_d©a
 *);

725 
fio_u≈ö_mem‹y
(
thªad_d©a
 *);

726 
__mu°_check
 
Æloˇã_io_mem
(
thªad_d©a
 *);

727 
‰ì_io_mem
(
thªad_d©a
 *);

728 
‰ì_thªads_shm
();

730 #ifde‡
FIO_INTERNAL


731 
	#PTR_ALIGN
(
±r
, 
mask
) \

732 (*Ë(((
uöçå_t
Ë(
±r
Ë+ (
mask
)Ë& ~(mask))

	)

738 
ª£t_Æl_°©s
(
thªad_d©a
 *);

740 
io_queue_evít
(
thªad_d©a
 *
td
, 
io_u
 *io_u, *
ªt
,

741 
fio_ddú
 
ddú
, 
uöt64_t
 *
byãs_issued
, 
‰om_vîify
,

742 
time•ec
 *
comp_time
);

747 
œt_èrgë_check
(
thªad_d©a
 *);

748 
œt_èrgë_öô
(
thªad_d©a
 *);

749 
œt_èrgë_ª£t
(
thªad_d©a
 *);

754 
	#f‹_óch_td
(
td
, 
i
) \

755 (
i
Ë0, (
td
Ë&
£gmíts
[0].
thªads
[0]; (iË< (Ë
thªad_numbî
; (i)++, (tdË
	`äumbî_to_td
((i)))

	)

756 
	#f‹_óch_fûe
(
td
, 
f
, 
i
) \

757 i‡((
td
)->
fûes_ödex
) \

758 (
i
Ë0, (
f
Ë(
td
)->
fûes
[0]; \

759 (
i
Ë< (
td
)->
o
.
ƒ_fûes
 && ((
f
Ë—d)->
fûes
[i]Ë!
NULL
; \

760 (
i
)++)

	)

762 
ölöe
 
boﬁ
 
	$fio_fûl_issue_time
(
thªad_d©a
 *
td
)

764 i‡(
td
->
o
.
ªad_iﬁog_fûe
 ||

765 !
td
->
o
.
dißbÀ_˛©
 || !td->o.
dißbÀ_¶©
 || !td->o.
dißbÀ_bw
)

766  
åue
;

768  
Ál£
;

769 
	}
}

771 
ölöe
 
boﬁ
 
	$›ti⁄_check_øã
(
thªad_d©a
 *
td
, 
fio_ddú
 
ddú
)

773 
thªad_›ti⁄s
 *
o
 = &
td
->o;

778 i‡(
o
->
øã
[
ddú
] || o->
øãmö
[ddú] || o->
øã_i›s
[ddir] ||

779 
o
->
øã_i›s_mö
[
ddú
])

780  
åue
;

782  
Ál£
;

783 
	}
}

785 
ölöe
 
boﬁ
 
	$should_check_øã
(
thªad_d©a
 *
td
)

787  (
td
->
Êags
 & 
TD_F_CHECK_RATE
) != 0;

788 
	}
}

790 
ölöe
 
	$td_max_bs
(
thªad_d©a
 *
td
)

792 
max_bs
;

794 
max_bs
 = 
	`max
(
td
->
o
.max_bs[
DDIR_READ
],Åd->o.max_bs[
DDIR_WRITE
]);

795  
	`max
(
td
->
o
.
max_bs
[
DDIR_TRIM
], max_bs);

796 
	}
}

798 
ölöe
 
	$td_mö_bs
(
thªad_d©a
 *
td
)

800 
mö_bs
;

802 
mö_bs
 = 
	`mö
(
td
->
o
.mö_bs[
DDIR_READ
],Åd->o.mö_bs[
DDIR_WRITE
]);

803  
	`mö
(
td
->
o
.
mö_bs
[
DDIR_TRIM
], min_bs);

804 
	}
}

806 
ölöe
 
boﬁ
 
	$td_async_¥o˚ssög
(
thªad_d©a
 *
td
)

808  (
td
->
Êags
 & 
TD_F_NEED_LOCK
) != 0;

809 
	}
}

811 
ölöe
 
boﬁ
 
	$td_ofÊﬂd_ovîœp
(
thªad_d©a
 *
td
)

813  
td
->
o
.
£rülize_ovîœp
 &&Åd->o.
io_submô_mode
 =
IO_MODE_OFFLOAD
;

814 
	}
}

820 
ölöe
 
	$__td_io_u_lock
(
thªad_d©a
 *
td
)

822 
	`±hªad_muãx_lock
(&
td
->
io_u_lock
);

823 
	}
}

825 
ölöe
 
	$__td_io_u_u∆ock
(
thªad_d©a
 *
td
)

827 
	`±hªad_muãx_u∆ock
(&
td
->
io_u_lock
);

828 
	}
}

830 
ölöe
 
	$td_io_u_‰ì_nŸify
(
thªad_d©a
 *
td
)

832 i‡(
	`td_async_¥o˚ssög
(
td
))

833 
	`±hªad_c⁄d_sig«l
(&
td
->
‰ì_c⁄d
);

834 
	}
}

836 
ölöe
 
	$td_Êags_˛ór
(
thªad_d©a
 *
td
, *
Êags
,

837 
vÆue
)

839 i‡(!
	`td_async_¥o˚ssög
(
td
))

840 *
Êags
 &~
vÆue
;

842 
	`__sync_„tch_™d_™d
(
Êags
, ~
vÆue
);

843 
	}
}

845 
ölöe
 
	$td_Êags_£t
(
thªad_d©a
 *
td
, *
Êags
,

846 
vÆue
)

848 i‡(!
	`td_async_¥o˚ssög
(
td
))

849 *
Êags
 |
vÆue
;

851 
	`__sync_„tch_™d_‹
(
Êags
, 
vÆue
);

852 
	}
}

854 c⁄° *
fio_gë_¨ch_°rög
();

855 c⁄° *
fio_gë_os_°rög
();

858 
	m__FIO_OUTPUT_TERSE
 = 0,

859 
	m__FIO_OUTPUT_JSON
 = 1,

860 
	m__FIO_OUTPUT_NORMAL
 = 2,

861 
	m__FIO_OUTPUT_JSON_PLUS
 = 3,

862 
	mFIO_OUTPUT_NR
 = 4,

864 
	mFIO_OUTPUT_TERSE
 = 1U << 
__FIO_OUTPUT_TERSE
,

865 
	mFIO_OUTPUT_JSON
 = 1U << 
__FIO_OUTPUT_JSON
,

866 
	mFIO_OUTPUT_NORMAL
 = 1U << 
__FIO_OUTPUT_NORMAL
,

867 
	mFIO_OUTPUT_JSON_PLUS
 = 1U << 
__FIO_OUTPUT_JSON_PLUS
,

871 
	mFIO_RAND_DIST_RANDOM
 = 0,

872 
	mFIO_RAND_DIST_ZIPF
,

873 
	mFIO_RAND_DIST_PARETO
,

874 
	mFIO_RAND_DIST_GAUSS
,

875 
	mFIO_RAND_DIST_ZONED
,

876 
	mFIO_RAND_DIST_ZONED_ABS
,

879 
	#FIO_DEF_ZIPF
 1.1

	)

880 
	#FIO_DEF_PARETO
 0.2

	)

883 
	mFIO_RAND_GEN_TAUSWORTHE
 = 0,

884 
	mFIO_RAND_GEN_LFSR
,

885 
	mFIO_RAND_GEN_TAUSWORTHE64
,

889 
	mFIO_CPUS_SHARED
 = 0,

890 
	mFIO_CPUS_SPLIT
,

893 
exec_åiggî
(const *);

894 
check_åiggî_fûe
();

896 
boﬁ
 
ö_Êight_ovîœp
(
io_u_queue
 *
q
, 
io_u
 *io_u);

897 
±hªad_muãx_t
 
ovîœp_check
;

899 
ölöe
 *
	$fio_memÆign
(
size_t
 
Æignmít
, size_à
size
, 
boﬁ
 
sh¨ed
)

901  
	`__fio_memÆign
(
Æignmít
, 
size
, 
sh¨ed
 ? 
smÆloc
 : 
mÆloc
);

902 
	}
}

904 
ölöe
 
	$fio_mem‰ì
(*
±r
, 
size_t
 
size
, 
boﬁ
 
sh¨ed
)

906  
	`__fio_mem‰ì
(
±r
, 
size
, 
sh¨ed
 ? 
s‰ì
 : 
‰ì
);

907 
	}
}

	@fio_sem.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<sys/mm™.h
>

4 
	~<as£π.h
>

5 #ifde‡
CONFIG_VALGRIND_DEV


6 
	~<vÆgröd/vÆgröd.h
>

8 
	#RUNNING_ON_VALGRIND
 0

	)

11 
	~"fio_£m.h
"

12 
	~"psh¨ed.h
"

13 
	~"os/os.h
"

14 
	~"fio_time.h
"

15 
	~"gëtime.h
"

17 
	$__fio_£m_ªmove
(
fio_£m
 *
£m
)

19 
	`as£π
(
£m
->
magic
 =
FIO_SEM_MAGIC
);

20 
	`±hªad_muãx_de°roy
(&
£m
->
lock
);

21 
	`±hªad_c⁄d_de°roy
(&
£m
->
c⁄d
);

29 i‡(!
RUNNING_ON_VALGRIND
)

30 
	`mem£t
(
£m
, 0, (*sem));

31 
	}
}

33 
	$fio_£m_ªmove
(
fio_£m
 *
£m
)

35 
	`__fio_£m_ªmove
(
£m
);

36 
	`munm≠
((*Ë
£m
, (*sem));

37 
	}
}

39 
	$__fio_£m_öô
(
fio_£m
 *
£m
, 
vÆue
)

41 
ªt
;

43 
£m
->
vÆue
 = value;

45 
£m
->
waôîs
 = 0;

46 
£m
->
magic
 = 
FIO_SEM_MAGIC
;

48 
ªt
 = 
	`muãx_c⁄d_öô_psh¨ed
(&
£m
->
lock
, &£m->
c⁄d
);

49 i‡(
ªt
)

50  
ªt
;

53 
	}
}

55 
fio_£m
 *
	$fio_£m_öô
(
vÆue
)

57 
fio_£m
 *
£m
 = 
NULL
;

59 
£m
 = (*Ë
	`mm≠
(
NULL
, (
fio_£m
),

60 
PROT_READ
 | 
PROT_WRITE
,

61 
OS_MAP_ANON
 | 
MAP_SHARED
, -1, 0);

62 i‡(
£m
 =
MAP_FAILED
) {

63 
	`≥º‹
("mmap semaphore");

64  
NULL
;

67 i‡(!
	`__fio_£m_öô
(
£m
, 
vÆue
))

68  
£m
;

70 
	`fio_£m_ªmove
(
£m
);

71  
NULL
;

72 
	}
}

74 
boﬁ
 
	$£m_timed_out
(
time•ec
 *
t
, 
m£cs
)

76 
timevÆ
 
tv
;

77 
time•ec
 
now
;

79 
	`gëtimeofday
(&
tv
, 
NULL
);

80 
now
.
tv_£c
 = 
tv
.tv_sec;

81 
now
.
tv_n£c
 = 
tv
.
tv_u£c
 * 1000;

83  
	`mtime_sö˚
(
t
, &
now
Ë>
m£cs
;

84 
	}
}

86 
	$fio_£m_down_timeout
(
fio_£m
 *
£m
, 
m£cs
)

88 
time•ec
 
ba£
;

89 
time•ec
 
t
;

90 
ªt
 = 0;

92 
	`as£π
(
£m
->
magic
 =
FIO_SEM_MAGIC
);

94 #ifde‡
CONFIG_PTHREAD_CONDATTR_SETCLOCK


95 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
t
);

97 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
t
);

100 
ba£
 = 
t
;

102 
t
.
tv_£c
 +
m£cs
 / 1000;

103 
t
.
tv_n£c
 +((
m£cs
 * 1000000ULL) % 1000000000);

104 i‡(
t
.
tv_n£c
 >= 1000000000) {

105 
t
.
tv_n£c
 -= 1000000000;

106 
t
.
tv_£c
++;

109 
	`±hªad_muãx_lock
(&
£m
->
lock
);

111 
£m
->
waôîs
++;

112 !
£m
->
vÆue
 && !
ªt
) {

117 
ªt
 = 
	`±hªad_c⁄d_timedwaô
(&
£m
->
c⁄d
, &£m->
lock
, &
t
);

118 i‡(
ªt
 =
ETIMEDOUT
 && !
	`£m_timed_out
(&
ba£
, 
m£cs
))

119 
ªt
 = 0;

121 
£m
->
waôîs
--;

123 i‡(!
ªt
) {

124 
£m
->
vÆue
--;

125 
	`±hªad_muãx_u∆ock
(&
£m
->
lock
);

129 
	`±hªad_muãx_u∆ock
(&
£m
->
lock
);

130  
ªt
;

131 
	}
}

133 
boﬁ
 
	$fio_£m_down_åylock
(
fio_£m
 *
£m
)

135 
boﬁ
 
ªt
 = 
åue
;

137 
	`as£π
(
£m
->
magic
 =
FIO_SEM_MAGIC
);

139 
	`±hªad_muãx_lock
(&
£m
->
lock
);

140 i‡(
£m
->
vÆue
) {

141 
£m
->
vÆue
--;

142 
ªt
 = 
Ál£
;

144 
	`±hªad_muãx_u∆ock
(&
£m
->
lock
);

146  
ªt
;

147 
	}
}

149 
	$fio_£m_down
(
fio_£m
 *
£m
)

151 
	`as£π
(
£m
->
magic
 =
FIO_SEM_MAGIC
);

153 
	`±hªad_muãx_lock
(&
£m
->
lock
);

155 !
£m
->
vÆue
) {

156 
£m
->
waôîs
++;

157 
	`±hªad_c⁄d_waô
(&
£m
->
c⁄d
, &£m->
lock
);

158 
£m
->
waôîs
--;

161 
£m
->
vÆue
--;

162 
	`±hªad_muãx_u∆ock
(&
£m
->
lock
);

163 
	}
}

165 
	$fio_£m_up
(
fio_£m
 *
£m
)

167 
do_wake
 = 0;

169 
	`as£π
(
£m
->
magic
 =
FIO_SEM_MAGIC
);

171 
	`±hªad_muãx_lock
(&
£m
->
lock
);

172 i‡(!
£m
->
vÆue
 && sem->
waôîs
)

173 
do_wake
 = 1;

174 
£m
->
vÆue
++;

176 i‡(
do_wake
)

177 
	`±hªad_c⁄d_sig«l
(&
£m
->
c⁄d
);

179 
	`±hªad_muãx_u∆ock
(&
£m
->
lock
);

180 
	}
}

	@fio_sem.h

1 #i‚de‡
FIO_SEM_H


2 
	#FIO_SEM_H


	)

4 
	~<±hªad.h
>

5 
	~"lib/ty≥s.h
"

7 
	#FIO_SEM_MAGIC
 0x4d555445U

	)

9 
	sfio_£m
 {

10 
±hªad_muãx_t
 
	mlock
;

11 
±hªad_c⁄d_t
 
	mc⁄d
;

12 
	mvÆue
;

13 
	mwaôîs
;

14 
	mmagic
;

18 
	mFIO_SEM_LOCKED
 = 0,

19 
	mFIO_SEM_UNLOCKED
 = 1,

22 
__fio_£m_öô
(
fio_£m
 *, );

23 
fio_£m
 *
fio_£m_öô
();

24 
__fio_£m_ªmove
(
fio_£m
 *);

25 
fio_£m_ªmove
(
fio_£m
 *);

26 
fio_£m_up
(
fio_£m
 *);

27 
fio_£m_down
(
fio_£m
 *);

28 
boﬁ
 
fio_£m_down_åylock
(
fio_£m
 *);

29 
fio_£m_down_timeout
(
fio_£m
 *, );

	@fio_time.h

1 #i‚de‡
FIO_TIME_H


2 
	#FIO_TIME_H


	)

4 
	~<°döt.h
>

6 
	~<time.h
>

7 
	~<sys/time.h
>

9 
	~"lib/ty≥s.h
"

11 
	gthªad_d©a
;

12 
uöt64_t
 
¡ime_sö˚
(c⁄° 
time•ec
 *, const timespec *);

13 
uöt64_t
 
¡ime_sö˚_now
(c⁄° 
time•ec
 *);

14 
uöt64_t
 
utime_sö˚
(c⁄° 
time•ec
 *, const timespec *);

15 
uöt64_t
 
utime_sö˚_now
(c⁄° 
time•ec
 *);

16 
öt64_t
 
ªl_time_sö˚
(c⁄° 
time•ec
 *,

17 c⁄° 
time•ec
 *);

18 
uöt64_t
 
mtime_sö˚
(c⁄° 
time•ec
 *, const timespec *);

19 
uöt64_t
 
mtime_sö˚_now
(c⁄° 
time•ec
 *);

20 
uöt64_t
 
mtime_sö˚_tv
(c⁄° 
timevÆ
 *, const timeval *);

21 
uöt64_t
 
time_sö˚_now
(c⁄° 
time•ec
 *);

22 
uöt64_t
 
time_sö˚_gíesis
();

23 
uöt64_t
 
mtime_sö˚_gíesis
();

24 
uöt64_t
 
utime_sö˚_gíesis
();

25 
uöt64_t
 
u£c_•ö
();

26 
uöt64_t
 
u£c_¶ìp
(
thªad_d©a
 *, );

27 
fûl_°¨t_time
(
time•ec
 *);

28 
£t_gíesis_time
();

29 
boﬁ
 
ømp_time_ovî
(
thªad_d©a
 *);

30 
boﬁ
 
ö_ømp_time
(
thªad_d©a
 *);

31 
fio_time_öô
();

32 
time•ec_add_m£c
(
time•ec
 *, );

33 
£t_ïoch_time
(
thªad_d©a
 *, , 
˛ockid_t
);

	@flist.h

1 #i‚de‡
_LINUX_FLIST_H


2 
	#_LINUX_FLIST_H


	)

4 
	~<°dlib.h
>

5 
	~<°ddef.h
>

7 
	#c⁄èöî_of
(
±r
, 
ty≥
, 
membî
) ({ \

8 c⁄° 
	`__ty≥of__
–((
ty≥
 *)0)->
membî
 ) *
__m±r
 = (
±r
); \

9 (
ty≥
 *)–(*)
__m±r
 - 
	`off£tof
—y≥,
membî
Ë);})

	)

21 
	sÊi°_hód
 {

22 
Êi°_hód
 *
	m√xt
, *
	m¥ev
;

25 
	#FLIST_HEAD_INIT
(
«me
Ë{ &“ame), &“ameË}

	)

27 
	#FLIST_HEAD
(
«me
) \

28 
Êi°_hód
 
«me
 = 
	`FLIST_HEAD_INIT
“ame)

	)

30 
	#INIT_FLIST_HEAD
(
±r
) do { \

31 (
±r
)->
√xt
 = (±r); (±r)->
¥ev
 = (ptr); \

32 } 0)

	)

40 
ölöe
 
	$__Êi°_add
(
Êi°_hód
 *
√w_íåy
,

41 
Êi°_hód
 *
¥ev
,

42 
Êi°_hód
 *
√xt
)

44 
√xt
->
¥ev
 = 
√w_íåy
;

45 
√w_íåy
->
√xt
 =Çext;

46 
√w_íåy
->
¥ev
 =Örev;

47 
¥ev
->
√xt
 = 
√w_íåy
;

48 
	}
}

58 
ölöe
 
	$Êi°_add
(
Êi°_hód
 *
√w_íåy
,

59 
Êi°_hód
 *
hód
)

61 
	`__Êi°_add
(
√w_íåy
, 
hód
, hód->
√xt
);

62 
	}
}

64 
ölöe
 
	$Êi°_add_èû
(
Êi°_hód
 *
√w_íåy
,

65 
Êi°_hód
 *
hód
)

67 
	`__Êi°_add
(
√w_íåy
, 
hód
->
¥ev
, head);

68 
	}
}

77 
ölöe
 
	$__Êi°_dñ
(
Êi°_hód
 *
¥ev
,

78 
Êi°_hód
 * 
√xt
)

80 
√xt
->
¥ev
 =Örev;

81 
¥ev
->
√xt
 =Çext;

82 
	}
}

90 
ölöe
 
	$Êi°_dñ
(
Êi°_hód
 *
íåy
)

92 
	`__Êi°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

93 
íåy
->
√xt
 = 
NULL
;

94 
íåy
->
¥ev
 = 
NULL
;

95 
	}
}

101 
ölöe
 
	$Êi°_dñ_öô
(
Êi°_hód
 *
íåy
)

103 
	`__Êi°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

104 
	`INIT_FLIST_HEAD
(
íåy
);

105 
	}
}

111 
ölöe
 
	$Êi°_em±y
(c⁄° 
Êi°_hód
 *
hód
)

113  
hód
->
√xt
 == head;

114 
	}
}

116 
ölöe
 
	$__Êi°_•li˚
(c⁄° 
Êi°_hód
 *
li°
,

117 
Êi°_hód
 *
¥ev
,

118 
Êi°_hód
 *
√xt
)

120 
Êi°_hód
 *
fú°
 = 
li°
->
√xt
;

121 
Êi°_hód
 *
œ°
 = 
li°
->
¥ev
;

123 
fú°
->
¥ev
 =Örev;

124 
¥ev
->
√xt
 = 
fú°
;

126 
œ°
->
√xt
 =Çext;

127 
√xt
->
¥ev
 = 
œ°
;

128 
	}
}

130 
ölöe
 
	$Êi°_•li˚
(c⁄° 
Êi°_hód
 *
li°
,

131 
Êi°_hód
 *
hód
)

133 i‡(!
	`Êi°_em±y
(
li°
))

134 
	`__Êi°_•li˚
(
li°
, 
hód
, hód->
√xt
);

135 
	}
}

137 
ölöe
 
	$Êi°_•li˚_èû
(
Êi°_hód
 *
li°
,

138 
Êi°_hód
 *
hód
)

140 i‡(!
	`Êi°_em±y
(
li°
))

141 
	`__Êi°_•li˚
(
li°
, 
hód
->
¥ev
, head);

142 
	}
}

144 
ölöe
 
	$Êi°_•li˚_èû_öô
(
Êi°_hód
 *
li°
,

145 
Êi°_hód
 *
hód
)

147 i‡(!
	`Êi°_em±y
(
li°
)) {

148 
	`__Êi°_•li˚
(
li°
, 
hód
->
¥ev
, head);

149 
	`INIT_FLIST_HEAD
(
li°
);

151 
	}
}

153 
ölöe
 
	$Êi°_•li˚_öô
(
Êi°_hód
 *
li°
,

154 
Êi°_hód
 *
hód
)

156 i‡(!
	`Êi°_em±y
(
li°
)) {

157 
	`__Êi°_•li˚
(
li°
, 
hód
, hód->
√xt
);

158 
	`INIT_FLIST_HEAD
(
li°
);

160 
	}
}

168 
	#Êi°_íåy
(
±r
, 
ty≥
, 
membî
) \

169 
	`c⁄èöî_of
(
±r
, 
ty≥
, 
membî
)

	)

171 
	#Êi°_fú°_íåy
(
±r
, 
ty≥
, 
membî
) \

172 
	`Êi°_íåy
((
±r
)->
√xt
, 
ty≥
, 
membî
)

	)

174 
	#Êi°_œ°_íåy
(
±r
, 
ty≥
, 
membî
) \

175 
	`Êi°_íåy
((
±r
)->
¥ev
, 
ty≥
, 
membî
)

	)

182 
	#Êi°_f‹_óch
(
pos
, 
hód
) \

183 
pos
 = (
hód
)->
√xt
;Öo†!(hód);Öo†pos->√xt)

	)

191 
	#Êi°_f‹_óch_ß„
(
pos
, 
n
, 
hód
) \

192 
pos
 = (
hód
)->
√xt
, 
n
 =Öos->next;Öos != (head); \

193 
pos
 = 
n
,Ç =Öos->
√xt
)

	)

195 
Êi°_s‹t
(*
¥iv
, 
Êi°_hód
 *
hód
,

196 (*
cmp
)(*
¥iv
, 
Êi°_hód
 *
a
, Êi°_hód *
b
));

	@flow.c

1 
	~"fio.h
"

2 
	~"fio_£m.h
"

3 
	~"smÆloc.h
"

4 
	~"Êi°.h
"

6 
	sfio_Êow
 {

7 
	mªfs
;

8 
	mid
;

9 
Êi°_hód
 
	mli°
;

10 
	mÊow_cou¡î
;

11 
	mtŸÆ_weight
;

14 
Êi°_hód
 *
	gÊow_li°
;

15 
fio_£m
 *
	gÊow_lock
;

17 
	$Êow_thªshﬁd_ex˚eded
(
thªad_d©a
 *
td
)

19 
fio_Êow
 *
Êow
 = 
td
->flow;

20 
Êow_cou¡î_øtio
, 
Êow_weight_øtio
;

22 i‡(!
Êow
)

25 
Êow_cou¡î_øtio
 = ()
td
->
Êow_cou¡î
 /

26 
	`©omic_lﬂd_ªœxed
(&
Êow
->
Êow_cou¡î
);

27 
Êow_weight_øtio
 = ()
td
->
o
.
Êow
 /

28 
	`©omic_lﬂd_ªœxed
(&
Êow
->
tŸÆ_weight
);

36 i‡(
Êow_cou¡î_øtio
 > 
Êow_weight_øtio
) {

37 i‡(
td
->
o
.
Êow_¶ìp
) {

38 
	`io_u_quõs˚
(
td
);

39 
	`u¶ìp
(
td
->
o
.
Êow_¶ìp
);

40 } i‡(
td
->
o
.
z⁄e_mode
 =
ZONE_MODE_ZBD
) {

41 
	`io_u_quõs˚
(
td
);

51 
	`©omic_add
(&
Êow
->
Êow_cou¡î
, 1);

52 ++
td
->
Êow_cou¡î
;

55 
	}
}

57 
fio_Êow
 *
	$Êow_gë
(
id
)

59 
fio_Êow
 *
Êow
 = 
NULL
;

60 
Êi°_hód
 *
n
;

62 i‡(!
Êow_lock
)

63  
NULL
;

65 
	`fio_£m_down
(
Êow_lock
);

67 
	`Êi°_f‹_óch
(
n
, 
Êow_li°
) {

68 
Êow
 = 
	`Êi°_íåy
(
n
, 
fio_Êow
, 
li°
);

69 i‡(
Êow
->
id
 == id)

72 
Êow
 = 
NULL
;

75 i‡(!
Êow
) {

76 
Êow
 = 
	`smÆloc
((*flow));

77 i‡(!
Êow
) {

78 
	`fio_£m_up
(
Êow_lock
);

79  
NULL
;

81 
Êow
->
ªfs
 = 0;

82 
	`INIT_FLIST_HEAD
(&
Êow
->
li°
);

83 
Êow
->
id
 = id;

84 
Êow
->
Êow_cou¡î
 = 1;

85 
Êow
->
tŸÆ_weight
 = 0;

87 
	`Êi°_add_èû
(&
Êow
->
li°
, 
Êow_li°
);

90 
Êow
->
ªfs
++;

91 
	`fio_£m_up
(
Êow_lock
);

92  
Êow
;

93 
	}
}

95 
	$Êow_put
(
fio_Êow
 *
Êow
, 
Êow_cou¡î
,

96 
weight
)

98 i‡(!
Êow_lock
)

101 
	`fio_£m_down
(
Êow_lock
);

103 
	`©omic_sub
(&
Êow
->
Êow_cou¡î
, flow_counter);

104 
	`©omic_sub
(&
Êow
->
tŸÆ_weight
, 
weight
);

106 i‡(!--
Êow
->
ªfs
) {

107 
	`as£π
(
Êow
->
Êow_cou¡î
 == 1);

108 
	`Êi°_dñ
(&
Êow
->
li°
);

109 
	`s‰ì
(
Êow
);

112 
	`fio_£m_up
(
Êow_lock
);

113 
	}
}

115 
	$Êow_öô_job
(
thªad_d©a
 *
td
)

117 i‡(
td
->
o
.
Êow
) {

118 
td
->
Êow
 = 
	`Êow_gë
—d->
o
.
Êow_id
);

119 
td
->
Êow_cou¡î
 = 0;

120 
	`©omic_add
(&
td
->
Êow
->
tŸÆ_weight
,Åd->
o
.flow);

122 
	}
}

124 
	$Êow_exô_job
(
thªad_d©a
 *
td
)

126 i‡(
td
->
Êow
) {

127 
	`Êow_put
(
td
->
Êow
,Åd->
Êow_cou¡î
,Åd->
o
.flow);

128 
td
->
Êow
 = 
NULL
;

130 
	}
}

132 
	$Êow_öô
()

134 
Êow_li°
 = 
	`smÆloc
((*flow_list));

135 i‡(!
Êow_li°
) {

136 
	`log_îr
("fio: smallocÖoolÉxhausted\n");

140 
Êow_lock
 = 
	`fio_£m_öô
(
FIO_SEM_UNLOCKED
);

141 i‡(!
Êow_lock
) {

142 
	`log_îr
("fio: failedÅoállocate flowÜock\n");

143 
	`s‰ì
(
Êow_li°
);

147 
	`INIT_FLIST_HEAD
(
Êow_li°
);

148 
	}
}

150 
	$Êow_exô
()

152 i‡(
Êow_lock
)

153 
	`fio_£m_ªmove
(
Êow_lock
);

154 i‡(
Êow_li°
)

155 
	`s‰ì
(
Êow_li°
);

156 
	}
}

	@flow.h

1 #i‚de‡
FIO_FLOW_H


2 
	#FIO_FLOW_H


	)

4 
	#FLOW_MAX_WEIGHT
 1000

	)

6 
Êow_thªshﬁd_ex˚eded
(
thªad_d©a
 *
td
);

7 
Êow_öô_job
(
thªad_d©a
 *
td
);

8 
Êow_exô_job
(
thªad_d©a
 *
td
);

10 
Êow_exô
();

11 
Êow_öô
();

	@gclient.c

1 
	~<°dlib.h
>

2 
	~<°rög.h
>

4 
	~<glib.h
>

5 
	~<ˇúo.h
>

6 
	~<gtk/gtk.h
>

8 
	~"fio.h
"

9 
	~"gfio.h
"

10 
	~"ghñ≥rs.h
"

11 
	~"g›ti⁄s.h
"

12 
	~"gîr‹.h
"

13 
	~"gøph.h
"

14 
	~"g˛õ¡.h
"

15 
	~"¥ötög.h
"

16 
	~"lib/pow2.h
"

18 
gfio_di•œy_ts
(
fio_˛õ¡
 *
˛õ¡
, 
thªad_°©
 *
ts
,

19 
group_run_°©s
 *
rs
);

21 
gboﬁón
 
	$ªsu…s_wödow_dñëe
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

23 
gui_íåy
 *
ge
 = (gui_íåy *Ë
d©a
;

25 
	`gtk_widgë_de°roy
(
w
);

26 
ge
->
ªsu…s_wödow
 = 
NULL
;

27 
ge
->
ªsu…s_nŸebook
 = 
NULL
;

28  
TRUE
;

29 
	}
}

31 
	$ªsu…s_˛o£
(
GtkWidgë
 *
w
, 
gpoöãr
 *
d©a
)

33 
gui_íåy
 *
ge
 = (gui_íåy *Ë
d©a
;

35 
	`gtk_widgë_de°roy
(
ge
->
ªsu…s_wödow
);

36 
	}
}

38 
	$ªsu…s_¥öt
(
GtkWidgë
 *
w
, 
gpoöãr
 *
d©a
)

40 
gui_íåy
 *
ge
 = (gui_íåy *Ë
d©a
;

42 
	`gfio_¥öt_ªsu…s
(
ge
);

43 
	}
}

45 
GtkA˘i⁄E¡ry
 
	gªsu…s_míu_ôems
[] = {

46 { "FûeMíuA˘i⁄", 
GTK_STOCK_FILE
, "Fûe", 
NULL
, NULL, NULL},

47 { "GøphMíuA˘i⁄", 
GTK_STOCK_FILE
, "Gøph", 
NULL
, NULL, NULL},

48 { "PrötFûe", 
GTK_STOCK_PRINT
, "Pröt", "<C⁄åﬁ>P", 
NULL
, 
G_CALLBACK
(
ªsu…s_¥öt
) },

49 { "Clo£Fûe", 
GTK_STOCK_CLOSE
, "Clo£", "<C⁄åﬁ>W", 
NULL
, 
G_CALLBACK
(
ªsu…s_˛o£
) },

51 
göt
 
	gªsu…s_nmíu_ôems
 = 
FIO_ARRAY_SIZE
(
ªsu…s_míu_ôems
);

53 c⁄° 
gch¨
 *
	gªsu…s_ui_°rög
 = " \
<ui> \
<menubarÇame=\"MainMenu\"> \
<menuÇame=\"FileMenu\"áction=\"FileMenuAction\"> \
<menuitemÇame=\"Print\"áction=\"PrintFile\" /> \
<menuitemÇame=\"Close\"áction=\"CloseFile\" /> \
</menu> \
<menuÇame=\"GraphMenu\"áction=\"GraphMenuAction\"> \
</menu>\
</menubar> \
</ui> \
";

66 
GtkWidgë
 *
	$gë_ªsu…s_míub¨
(
GtkWidgë
 *
wödow
, 
gui_íåy
 *
ge
)

68 
GtkA˘i⁄Group
 *
a˘i⁄_group
;

69 
GtkWidgë
 *
widgë
;

70 
GEº‹
 *
îr‹
 = 0;

72 
ge
->
ªsu…s_uim™agî
 = 
	`gtk_ui_m™agî_√w
();

74 
a˘i⁄_group
 = 
	`gtk_a˘i⁄_group_√w
("ResultsMenu");

75 
	`gtk_a˘i⁄_group_add_a˘i⁄s
(
a˘i⁄_group
, 
ªsu…s_míu_ôems
, 
ªsu…s_nmíu_ôems
, 
ge
);

77 
	`gtk_ui_m™agî_ö£π_a˘i⁄_group
(
ge
->
ªsu…s_uim™agî
, 
a˘i⁄_group
, 0);

78 
	`gtk_ui_m™agî_add_ui_‰om_°rög
(
	`GTK_UI_MANAGER
(
ge
->
ªsu…s_uim™agî
), 
ªsu…s_ui_°rög
, -1, &
îr‹
);

80 
	`gtk_wödow_add_ac˚l_group
(
	`GTK_WINDOW
(
wödow
), 
	`gtk_ui_m™agî_gë_ac˚l_group
(
ge
->
ªsu…s_uim™agî
));

82 
widgë
 = 
	`gtk_ui_m™agî_gë_widgë
(
ge
->
ªsu…s_uim™agî
, "/MainMenu");

83  
widgë
;

84 
	}
}

86 
GtkWidgë
 *
	$gë_ªsu…s_wödow
(
gui_íåy
 *
ge
)

88 
GtkWidgë
 *
wö
, *
nŸebook
, *
vbox
;

90 i‡(
ge
->
ªsu…s_wödow
)

91  
ge
->
ªsu…s_nŸebook
;

93 
wö
 = 
	`gtk_wödow_√w
(
GTK_WINDOW_TOPLEVEL
);

94 
	`gtk_wödow_£t_tôÀ
(
	`GTK_WINDOW
(
wö
), "Results");

95 
	`gtk_wödow_£t_deÁu…_size
(
	`GTK_WINDOW
(
wö
), 1024, 768);

96 
	`g_sig«l_c⁄√˘
(
wö
, "dñëe-evít", 
	`G_CALLBACK
(
ªsu…s_wödow_dñëe
), 
ge
);

97 
	`g_sig«l_c⁄√˘
(
wö
, "de°roy", 
	`G_CALLBACK
(
ªsu…s_wödow_dñëe
), 
ge
);

99 
vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 0);

100 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
wö
), 
vbox
);

102 
ge
->
ªsu…s_míu
 = 
	`gë_ªsu…s_míub¨
(
wö
, ge);

103 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
ge
->
ªsu…s_míu
, 
FALSE
, FALSE, 0);

105 
nŸebook
 = 
	`gtk_nŸebook_√w
();

106 
	`gtk_nŸebook_£t_s¸ﬁœbÀ
(
	`GTK_NOTEBOOK
(
nŸebook
), 1);

107 
	`gtk_nŸebook_p›up_íabÀ
(
	`GTK_NOTEBOOK
(
nŸebook
));

108 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
vbox
), 
nŸebook
);

110 
ge
->
ªsu…s_wödow
 = 
wö
;

111 
ge
->
ªsu…s_nŸebook
 = 
nŸebook
;

112  
ge
->
ªsu…s_nŸebook
;

113 
	}
}

115 
	$gfio_ãxt_›
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

117 
cmd_ãxt_pdu
 *
p
 = (cmd_ãxt_pdu *Ë
cmd
->
∑ylﬂd
;

118 
gfio_˛õ¡
 *
gc
 = 
˛õ¡
->
˛õ¡_d©a
;

119 
gui_íåy
 *
ge
 = 
gc
->ge;

120 
gui
 *
ui
 = 
ge
->ui;

121 
GtkTªeIãr
 
ôî
;

122 
tm
 *tm;

123 
time_t
 
£c
;

124 
tmp
[64], 
timebuf
[96];

126 
£c
 = 
p
->
log_£c
;

127 
tm
 = 
	`loˇ…ime
(&
£c
);

128 
	`°r·ime
(
tmp
, —mp), "%Y-%m-%d %H:%M:%S", 
tm
);

129 
	`•rötf
(
timebuf
, "%s.%03ld", 
tmp
, (Ë
p
->
log_u£c
 / 1000);

131 
	`gdk_thªads_íãr
();

133 
	`gtk_li°_°‹e_≠≥nd
(
ui
->
log_modñ
, &
ôî
);

134 
	`gtk_li°_°‹e_£t
(
ui
->
log_modñ
, &
ôî
, 0, 
timebuf
, -1);

135 
	`gtk_li°_°‹e_£t
(
ui
->
log_modñ
, &
ôî
, 1, 
˛õ¡
->
ho°«me
, -1);

136 
	`gtk_li°_°‹e_£t
(
ui
->
log_modñ
, &
ôî
, 2, 
	`log_gë_Àvñ
(
p
->
Àvñ
), -1);

137 
	`gtk_li°_°‹e_£t
(
ui
->
log_modñ
, &
ôî
, 3, 
p
->
buf
, -1);

139 i‡(
p
->
Àvñ
 =
FIO_LOG_ERR
)

140 
	`gfio_võw_log
(
ui
);

142 
	`gdk_thªads_Àave
();

143 
	}
}

145 
	$disk_utû_de°roy
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

147 
gui_íåy
 *
ge
 = (gui_íåy *Ë
d©a
;

149 
ge
->
disk_utû_vbox
 = 
NULL
;

150 
	`gtk_widgë_de°roy
(
w
);

151 
	}
}

153 
GtkWidgë
 *
	$gfio_disk_utû_gë_vbox
(
gui_íåy
 *
ge
)

155 
GtkWidgë
 *
vbox
, *
box
, *
s¸ﬁl
, *
ªs_nŸebook
;

157 i‡(
ge
->
disk_utû_vbox
)

158  
ge
->
disk_utû_vbox
;

160 
s¸ﬁl
 = 
	`gë_s¸ﬁÀd_wödow
(5);

161 
vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 3);

162 
box
 = 
	`gtk_hbox_√w
(
FALSE
, 0);

163 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
box
, 
FALSE
, FALSE, 5);

165 
	`gtk_s¸ﬁÀd_wödow_add_wôh_võwp‹t
(
	`GTK_SCROLLED_WINDOW
(
s¸ﬁl
), 
vbox
);

166 
ªs_nŸebook
 = 
	`gë_ªsu…s_wödow
(
ge
);

168 
	`gtk_nŸebook_≠≥nd_∑ge
(
	`GTK_NOTEBOOK
(
ªs_nŸebook
), 
s¸ﬁl
, 
	`gtk_œbñ_√w
("Disk utilization"));

169 
ge
->
disk_utû_vbox
 = 
box
;

170 
	`g_sig«l_c⁄√˘
(
vbox
, "de°roy", 
	`G_CALLBACK
(
disk_utû_de°roy
), 
ge
);

172  
ge
->
disk_utû_vbox
;

173 
	}
}

175 
	$__gfio_disk_utû_show
(
GtkWidgë
 *
ªs_nŸebook
,

176 
gfio_˛õ¡
 *
gc
, 
cmd_du_pdu
 *
p
)

178 
GtkWidgë
 *
box
, *
‰ame
, *
íåy
, *
vbox
, *
utû_vbox
;

179 
gui_íåy
 *
ge
 = 
gc
->ge;

180 
utû
;

181 
tmp
[16];

183 
utû_vbox
 = 
	`gfio_disk_utû_gë_vbox
(
ge
);

185 
vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 3);

186 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
utû_vbox
), 
vbox
);

188 
‰ame
 = 
	`gtk_‰ame_√w
((*Ë
p
->
dus
.
«me
);

189 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
‰ame
, 
FALSE
, FALSE, 2);

191 
box
 = 
	`gtk_vbox_√w
(
FALSE
, 3);

192 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
box
);

194 
‰ame
 = 
	`gtk_‰ame_√w
("Read");

195 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
‰ame
, 
FALSE
, FALSE, 2);

196 
vbox
 = 
	`gtk_hbox_√w
(
TRUE
, 3);

197 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
vbox
);

198 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
vbox
, "IOs");

199 
	`íåy_£t_öt_vÆue
(
íåy
, 
p
->
dus
.
s
.
ios
[0]);

200 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
vbox
, "Merges");

201 
	`íåy_£t_öt_vÆue
(
íåy
, 
p
->
dus
.
s
.
mîges
[0]);

202 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
vbox
, "Sectors");

203 
	`íåy_£t_öt_vÆue
(
íåy
, 
p
->
dus
.
s
.
£˘‹s
[0]);

204 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
vbox
, "Ticks");

205 
	`íåy_£t_öt_vÆue
(
íåy
, 
p
->
dus
.
s
.
ticks
[0]);

207 
‰ame
 = 
	`gtk_‰ame_√w
("Write");

208 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
‰ame
, 
FALSE
, FALSE, 2);

209 
vbox
 = 
	`gtk_hbox_√w
(
TRUE
, 3);

210 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
vbox
);

211 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
vbox
, "IOs");

212 
	`íåy_£t_öt_vÆue
(
íåy
, 
p
->
dus
.
s
.
ios
[1]);

213 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
vbox
, "Merges");

214 
	`íåy_£t_öt_vÆue
(
íåy
, 
p
->
dus
.
s
.
mîges
[1]);

215 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
vbox
, "Sectors");

216 
	`íåy_£t_öt_vÆue
(
íåy
, 
p
->
dus
.
s
.
£˘‹s
[1]);

217 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
vbox
, "Ticks");

218 
	`íåy_£t_öt_vÆue
(
íåy
, 
p
->
dus
.
s
.
ticks
[1]);

220 
‰ame
 = 
	`gtk_‰ame_√w
("Shared");

221 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
‰ame
, 
FALSE
, FALSE, 2);

222 
vbox
 = 
	`gtk_hbox_√w
(
TRUE
, 3);

223 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
vbox
);

224 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
vbox
, "IOÅicks");

225 
	`íåy_£t_öt_vÆue
(
íåy
, 
p
->
dus
.
s
.
io_ticks
);

226 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
vbox
, "Time in queue");

227 
	`íåy_£t_öt_vÆue
(
íåy
, 
p
->
dus
.
s
.
time_ö_queue
);

229 
utû
 = 0.0;

230 i‡(
p
->
dus
.
s
.
m£c
)

231 
utû
 = (Ë100 * 
p
->
dus
.
s
.
io_ticks
 / (Ëp->dus.s.
m£c
;

232 i‡(
utû
 > 100.0)

233 
utû
 = 100.0;

235 
	`•rötf
(
tmp
, "%3.2f%%", 
utû
);

236 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
vbox
, "Disk utilization");

237 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
íåy
), 
tmp
);

239 
	`gtk_widgë_show_Æl
(
ge
->
ªsu…s_wödow
);

241 
	}
}

243 
	$gfio_disk_utû_show
(
gfio_˛õ¡
 *
gc
)

245 
gui_íåy
 *
ge
 = 
gc
->ge;

246 
GtkWidgë
 *
ªs_nŸebook
;

247 
i
;

249 i‡(!
gc
->
ƒ_du
)

252 
ªs_nŸebook
 = 
	`gë_ªsu…s_wödow
(
ge
);

254 
i
 = 0; i < 
gc
->
ƒ_du
; i++) {

255 
cmd_du_pdu
 *
p
 = &
gc
->
du
[
i
];

257 
	`__gfio_disk_utû_show
(
ªs_nŸebook
, 
gc
, 
p
);

260 
	`gtk_widgë_show_Æl
(
ge
->
ªsu…s_wödow
);

262 
	}
}

264 
	$gfio_disk_utû_›
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

266 
cmd_du_pdu
 *
p
 = (cmd_du_pdu *Ë
cmd
->
∑ylﬂd
;

267 
gfio_˛õ¡
 *
gc
 = 
˛õ¡
->
˛õ¡_d©a
;

268 
gui_íåy
 *
ge
 = 
gc
->ge;

269 
ƒ
 = 
gc
->
ƒ_du
;

271 
gc
->
du
 = 
	`ªÆloc
(gc->du, (
ƒ
 + 1Ë* (
cmd_du_pdu
));

272 
	`mem˝y
(&
gc
->
du
[
ƒ
], 
p
, (*p));

273 
gc
->
ƒ_du
++;

275 
	`gdk_thªads_íãr
();

276 i‡(
ge
->
ªsu…s_wödow
)

277 
	`__gfio_disk_utû_show
(
ge
->
ªsu…s_nŸebook
, 
gc
, 
p
);

279 
	`gfio_disk_utû_show
(
gc
);

280 
	`gdk_thªads_Àave
();

281 
	}
}

283 
	gsum_°©_ƒ
;

285 
	$gfio_thªad_°©us_›
(
fio_˛õ¡
 *
˛õ¡
,

286 
fio_√t_cmd
 *
cmd
)

288 
cmd_ts_pdu
 *
p
 = (cmd_ts_pdu *Ë
cmd
->
∑ylﬂd
;

290 
	`gfio_di•œy_ts
(
˛õ¡
, &
p
->
ts
, &p->
rs
);

292 i‡(
sum_°©_˛õ¡s
 == 1)

295 
	`sum_thªad_°©s
(&
˛õ¡_ts
, &
p
->
ts
);

296 
	`sum_group_°©s
(&
˛õ¡_gs
, &
p
->
rs
);

298 
˛õ¡_ts
.
membîs
++;

299 
˛õ¡_ts
.
thªad_numbî
 = 
p
->
ts
.thread_number;

300 
˛õ¡_ts
.
groupid
 = 
p
->
ts
.groupid;

301 
˛õ¡_ts
.
sig_figs
 = 
p
->
ts
.sig_figs;

303 i‡(++
sum_°©_ƒ
 =
sum_°©_˛õ¡s
) {

304 
	`°r˝y
(
˛õ¡_ts
.
«me
, "All clients");

305 
	`gfio_di•œy_ts
(
˛õ¡
, &
˛õ¡_ts
, &
˛õ¡_gs
);

307 
	}
}

309 
	$gfio_group_°©s_›
(
fio_˛õ¡
 *
˛õ¡
,

310 
fio_√t_cmd
 *
cmd
)

313 
	}
}

315 
	$gfio_upd©e_thªad_°©us
(
gui_íåy
 *
ge
,

316 *
°©us_mesßge
, 
≥rc
)

318 
mesßge
[100];

319 c⁄° *
m
 = 
mesßge
;

321 
	`¢¥ötf
(
mesßge
, (mesßge), "%s", 
°©us_mesßge
);

322 
	`gtk_¥ogªss_b¨_£t_ãxt
(
	`GTK_PROGRESS_BAR
(
ge
->
thªad_°©us_pb
), 
m
);

323 
	`gtk_¥ogªss_b¨_£t_‰a˘i⁄
(
	`GTK_PROGRESS_BAR
(
ge
->
thªad_°©us_pb
), 
≥rc
 / 100.0);

324 
	`gtk_widgë_queue_døw
(
ge
->
ui
->
wödow
);

325 
	}
}

327 
	$gfio_upd©e_thªad_°©us_Æl
(
gui
 *
ui
, *
°©us_mesßge
,

328 
≥rc
)

330 
mesßge
[100];

331 c⁄° *
m
 = 
mesßge
;

333 
	`¢¥ötf
(
mesßge
, (mesßge), "%s", 
°©us_mesßge
);

334 
	`gtk_¥ogªss_b¨_£t_ãxt
(
	`GTK_PROGRESS_BAR
(
ui
->
thªad_°©us_pb
), 
m
);

335 
	`gtk_¥ogªss_b¨_£t_‰a˘i⁄
(
	`GTK_PROGRESS_BAR
(
ui
->
thªad_°©us_pb
), 
≥rc
 / 100.0);

336 
	`gtk_widgë_queue_døw
(
ui
->
wödow
);

337 
	}
}

342 
	$gfio_upd©e_˛õ¡_ëa
(
fio_˛õ¡
 *
˛õ¡
, 
jobs_ëa
 *
je
)

344 
gfio_˛õ¡
 *
gc
 = 
˛õ¡
->
˛õ¡_d©a
;

345 
gui_íåy
 *
ge
 = 
gc
->ge;

346 
ëa_good
;

347 
ëa_°r
[128];

348 
ouçut
[256];

349 
tmp
[32];

350 
≥rc
 = 0.0;

351 
i2p
 = 0;

353 
	`gdk_thªads_íãr
();

355 
ëa_°r
[0] = '\0';

356 
ouçut
[0] = '\0';

358 i‡(
je
->
ëa_£c
 !
INT_MAX
 && je->
ñ≠£d_£c
) {

359 
≥rc
 = (Ë
je
->
ñ≠£d_£c
 / (Ë(je->ñ≠£d_£¯+ je->
ëa_£c
);

360 
	`ëa_to_°r
(
ëa_°r
, 
je
->
ëa_£c
);

363 
	`•rötf
(
tmp
, "%u", 
je
->
ƒ_ru¬ög
);

364 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
jobs
), 
tmp
);

365 
	`•rötf
(
tmp
, "%u", 
je
->
fûes_›í
);

366 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
fûes
), 
tmp
);

368 i‡(
je
->
ëa_£c
 !
INT_MAX
 && je->
ƒ_ru¬ög
) {

369 *
i›s_°r
[
DDIR_RWDIR_CNT
];

370 *
øã_°r
[
DDIR_RWDIR_CNT
];

371 *
øã_Æt
[
DDIR_RWDIR_CNT
];

372 
tmp
[128];

373 
i
;

375 i‡((!
je
->
ëa_£c
 && !
ëa_good
Ë|| je->
ƒ_ømp
 =je->
ƒ_ru¬ög
)

376 
	`°r˝y
(
ouçut
, "-.-% done");

378 
ëa_good
 = 1;

379 
≥rc
 *= 100.0;

380 
	`•rötf
(
ouçut
, "%3.1f%% d⁄e", 
≥rc
);

383 
i›s_°r
[0] = 
	`num2°r
(
je
->
i›s
[0], je->
sig_figs
, 1, 0, 
N2S_PERSEC
);

384 
i›s_°r
[1] = 
	`num2°r
(
je
->
i›s
[1], je->
sig_figs
, 1, 0, 
N2S_PERSEC
);

385 
i›s_°r
[2] = 
	`num2°r
(
je
->
i›s
[2], je->
sig_figs
, 1, 0, 
N2S_PERSEC
);

387 
øã_°r
[0] = 
	`num2°r
(
je
->
øã
[0], je->
sig_figs
, 10, 
i2p
, 
N2S_BYTEPERSEC
);

388 
øã_Æt
[0] = 
	`num2°r
(
je
->
øã
[0], je->
sig_figs
, 10, !
i2p
, 
N2S_BYTEPERSEC
);

389 
	`¢¥ötf
(
tmp
, —mp), "%†(%s)", 
øã_°r
[0], 
øã_Æt
[0]);

390 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
ªad_bw
), 
tmp
);

391 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
ªad_i›s
), 
i›s_°r
[0]);

393 
øã_°r
[1] = 
	`num2°r
(
je
->
øã
[1], je->
sig_figs
, 10, 
i2p
, 
N2S_BYTEPERSEC
);

394 
øã_Æt
[1] = 
	`num2°r
(
je
->
øã
[1], je->
sig_figs
, 10, !
i2p
, 
N2S_BYTEPERSEC
);

395 
	`¢¥ötf
(
tmp
, —mp), "%†(%s)", 
øã_°r
[1], 
øã_Æt
[1]);

396 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
wrôe_bw
), 
tmp
);

397 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
wrôe_i›s
), 
i›s_°r
[1]);

399 
øã_°r
[2] = 
	`num2°r
(
je
->
øã
[2], je->
sig_figs
, 10, 
i2p
, 
N2S_BYTEPERSEC
);

400 
øã_Æt
[2] = 
	`num2°r
(
je
->
øã
[2], je->
sig_figs
, 10, !
i2p
, 
N2S_BYTEPERSEC
);

401 
	`¢¥ötf
(
tmp
, —mp), "%†(%s)", 
øã_°r
[2], 
øã_Æt
[2]);

402 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
åim_bw
), 
tmp
);

403 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
åim_i›s
), 
i›s_°r
[2]);

405 
	`gøph_add_xy_d©a
(
ge
->
gøphs
.
i›s_gøph
, ge->gøphs.
ªad_i›s
, 
je
->
ñ≠£d_£c
, je->
i›s
[0], 
i›s_°r
[0]);

406 
	`gøph_add_xy_d©a
(
ge
->
gøphs
.
i›s_gøph
, ge->gøphs.
wrôe_i›s
, 
je
->
ñ≠£d_£c
, je->
i›s
[1], 
i›s_°r
[1]);

407 
	`gøph_add_xy_d©a
(
ge
->
gøphs
.
i›s_gøph
, ge->gøphs.
åim_i›s
, 
je
->
ñ≠£d_£c
, je->
i›s
[2], 
i›s_°r
[2]);

408 
	`gøph_add_xy_d©a
(
ge
->
gøphs
.
b™dwidth_gøph
, ge->gøphs.
ªad_bw
, 
je
->
ñ≠£d_£c
, je->
øã
[0], 
øã_°r
[0]);

409 
	`gøph_add_xy_d©a
(
ge
->
gøphs
.
b™dwidth_gøph
, ge->gøphs.
wrôe_bw
, 
je
->
ñ≠£d_£c
, je->
øã
[1], 
øã_°r
[1]);

410 
	`gøph_add_xy_d©a
(
ge
->
gøphs
.
b™dwidth_gøph
, ge->gøphs.
åim_bw
, 
je
->
ñ≠£d_£c
, je->
øã
[2], 
øã_°r
[2]);

412 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

413 
	`‰ì
(
øã_°r
[
i
]);

414 
	`‰ì
(
øã_Æt
[
i
]);

415 
	`‰ì
(
i›s_°r
[
i
]);

419 i‡(
ëa_°r
[0]) {

420 *
d°
 = 
ouçut
 + 
	`°æí
(output);

422 
	`•rötf
(
d°
, " - %s", 
ëa_°r
);

425 
	`gfio_upd©e_thªad_°©us
(
ge
, 
ouçut
, 
≥rc
);

426 
	`gdk_thªads_Àave
();

427 
	}
}

432 
	$gfio_upd©e_Æl_ëa
(
jobs_ëa
 *
je
)

434 
gui
 *
ui
 = &
maö_ui
;

435 
ëa_good
;

436 
ëa_°r
[128];

437 
ouçut
[256];

438 
≥rc
 = 0.0;

439 
i
, 
i2p
 = 0;

441 
	`gdk_thªads_íãr
();

443 
ëa_°r
[0] = '\0';

444 
ouçut
[0] = '\0';

446 i‡(
je
->
ëa_£c
 !
INT_MAX
 && je->
ñ≠£d_£c
) {

447 
≥rc
 = (Ë
je
->
ñ≠£d_£c
 / (Ë(je->ñ≠£d_£¯+ je->
ëa_£c
);

448 
	`ëa_to_°r
(
ëa_°r
, 
je
->
ëa_£c
);

451 
	`íåy_£t_öt_vÆue
(
ui
->
ëa
.
jobs
, 
je
->
ƒ_ru¬ög
);

453 i‡(
je
->
ëa_£c
 !
INT_MAX
 && je->
ƒ_ru¬ög
) {

454 *
i›s_°r
[
DDIR_RWDIR_CNT
];

455 *
øã_°r
[
DDIR_RWDIR_CNT
];

456 *
øã_Æt
[
DDIR_RWDIR_CNT
];

457 
tmp
[128];

459 i‡((!
je
->
ëa_£c
 && !
ëa_good
Ë|| je->
ƒ_ømp
 =je->
ƒ_ru¬ög
)

460 
	`°r˝y
(
ouçut
, "-.-% done");

462 
ëa_good
 = 1;

463 
≥rc
 *= 100.0;

464 
	`•rötf
(
ouçut
, "%3.1f%% d⁄e", 
≥rc
);

467 
i›s_°r
[0] = 
	`num2°r
(
je
->
i›s
[0], je->
sig_figs
, 1, 0, 
N2S_PERSEC
);

468 
i›s_°r
[1] = 
	`num2°r
(
je
->
i›s
[1], je->
sig_figs
, 1, 0, 
N2S_PERSEC
);

469 
i›s_°r
[2] = 
	`num2°r
(
je
->
i›s
[2], je->
sig_figs
, 1, 0, 
N2S_PERSEC
);

471 
øã_°r
[0] = 
	`num2°r
(
je
->
øã
[0], je->
sig_figs
, 10, 
i2p
, 
N2S_BYTEPERSEC
);

472 
øã_Æt
[0] = 
	`num2°r
(
je
->
øã
[0], je->
sig_figs
, 10, !
i2p
, 
N2S_BYTEPERSEC
);

473 
	`¢¥ötf
(
tmp
, —mp), "%†(%s)", 
øã_°r
[0], 
øã_Æt
[0]);

474 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ui
->
ëa
.
ªad_bw
), 
tmp
);

475 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ui
->
ëa
.
ªad_i›s
), 
i›s_°r
[0]);

477 
øã_°r
[1] = 
	`num2°r
(
je
->
øã
[1], je->
sig_figs
, 10, 
i2p
, 
N2S_BYTEPERSEC
);

478 
øã_Æt
[1] = 
	`num2°r
(
je
->
øã
[1], je->
sig_figs
, 10, !
i2p
, 
N2S_BYTEPERSEC
);

479 
	`¢¥ötf
(
tmp
, —mp), "%†(%s)", 
øã_°r
[1], 
øã_Æt
[1]);

480 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ui
->
ëa
.
wrôe_bw
), 
tmp
);

481 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ui
->
ëa
.
wrôe_i›s
), 
i›s_°r
[1]);

483 
øã_°r
[2] = 
	`num2°r
(
je
->
øã
[2], je->
sig_figs
, 10, 
i2p
, 
N2S_BYTEPERSEC
);

484 
øã_Æt
[2] = 
	`num2°r
(
je
->
øã
[2], je->
sig_figs
, 10, !
i2p
, 
N2S_BYTEPERSEC
);

485 
	`¢¥ötf
(
tmp
, —mp), "%†(%s)", 
øã_°r
[2], 
øã_Æt
[2]);

486 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ui
->
ëa
.
åim_bw
), 
tmp
);

487 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ui
->
ëa
.
åim_i›s
), 
i›s_°r
[2]);

489 
	`gøph_add_xy_d©a
(
ui
->
gøphs
.
i›s_gøph
, ui->gøphs.
ªad_i›s
, 
je
->
ñ≠£d_£c
, je->
i›s
[0], 
i›s_°r
[0]);

490 
	`gøph_add_xy_d©a
(
ui
->
gøphs
.
i›s_gøph
, ui->gøphs.
wrôe_i›s
, 
je
->
ñ≠£d_£c
, je->
i›s
[1], 
i›s_°r
[1]);

491 
	`gøph_add_xy_d©a
(
ui
->
gøphs
.
i›s_gøph
, ui->gøphs.
åim_i›s
, 
je
->
ñ≠£d_£c
, je->
i›s
[2], 
i›s_°r
[2]);

492 
	`gøph_add_xy_d©a
(
ui
->
gøphs
.
b™dwidth_gøph
, ui->gøphs.
ªad_bw
, 
je
->
ñ≠£d_£c
, je->
øã
[0], 
øã_°r
[0]);

493 
	`gøph_add_xy_d©a
(
ui
->
gøphs
.
b™dwidth_gøph
, ui->gøphs.
wrôe_bw
, 
je
->
ñ≠£d_£c
, je->
øã
[1], 
øã_°r
[1]);

494 
	`gøph_add_xy_d©a
(
ui
->
gøphs
.
b™dwidth_gøph
, ui->gøphs.
åim_bw
, 
je
->
ñ≠£d_£c
, je->
øã
[2], 
øã_°r
[2]);

496 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

497 
	`‰ì
(
øã_°r
[
i
]);

498 
	`‰ì
(
øã_Æt
[
i
]);

499 
	`‰ì
(
i›s_°r
[
i
]);

503 i‡(
ëa_°r
[0]) {

504 *
d°
 = 
ouçut
 + 
	`°æí
(output);

506 
	`•rötf
(
d°
, " - %s", 
ëa_°r
);

509 
	`gfio_upd©e_thªad_°©us_Æl
(
ui
, 
ouçut
, 
≥rc
);

510 
	`gdk_thªads_Àave
();

511 
	}
}

513 
	$gfio_¥obe_›
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

515 
cmd_¥obe_ª∂y_pdu
 *
¥obe
 = (cmd_¥obe_ª∂y_pdu *Ë
cmd
->
∑ylﬂd
;

516 
gfio_˛õ¡
 *
gc
 = 
˛õ¡
->
˛õ¡_d©a
;

517 
gui_íåy
 *
ge
 = 
gc
->ge;

518 c⁄° *
os
, *
¨ch
;

520 
os
 = 
	`fio_gë_os_°rög
(
¥obe
->os);

521 i‡(!
os
)

522 
os
 = "unknown";

524 
¨ch
 = 
	`fio_gë_¨ch_°rög
(
¥obe
->arch);

525 i‡(!
¨ch
)

526 
os
 = "unknown";

528 i‡(!
˛õ¡
->
«me
)

529 
˛õ¡
->
«me
 = 
	`°rdup
((*Ë
¥obe
->
ho°«me
);

531 
gc
->
˛õ¡_˝us
 = 
	`À32_to_˝u
(
¥obe
->
˝us
);

532 
gc
->
˛õ¡_Êags
 = 
	`À64_to_˝u
(
¥obe
->
Êags
);

534 
	`gdk_thªads_íãr
();

536 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
ge
->
¥obe
.
ho°«me
), (*)Örobe->hostname);

537 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
ge
->
¥obe
.
os
), os);

538 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
ge
->
¥obe
.
¨ch
),árch);

539 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
ge
->
¥obe
.
fio_vî
), (*Ë¥obe->
fio_vîsi⁄
);

541 
	`gfio_£t_°©e
(
ge
, 
GE_STATE_CONNECTED
);

543 
	`gdk_thªads_Àave
();

544 
	}
}

546 
	$gfio_quô_›
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

548 
gfio_˛õ¡
 *
gc
 = 
˛õ¡
->
˛õ¡_d©a
;

550 
	`gdk_thªads_íãr
();

551 
	`gfio_£t_°©e
(
gc
->
ge
, 
GE_STATE_NEW
);

552 
	`gdk_thªads_Àave
();

553 
	}
}

555 
thªad_›ti⁄s
 *
	$gfio_˛õ¡_add_job
(
gfio_˛õ¡
 *
gc
,

556 
thªad_›ti⁄s_∑ck
 *
t›
)

558 
gfio_˛õ¡_›ti⁄s
 *
gco
;

560 
gco
 = 
	`ˇŒoc
(1, (*gco));

561 
	`c⁄vît_thªad_›ti⁄s_to_˝u
(&
gco
->
o
, 
t›
);

562 
	`INIT_FLIST_HEAD
(&
gco
->
li°
);

563 
	`Êi°_add_èû
(&
gco
->
li°
, &
gc
->
o_li°
);

564 
gc
->
o_li°_ƒ
 = 1;

565  &
gco
->
o
;

566 
	}
}

568 
	$gfio_add_job_›
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

570 
cmd_add_job_pdu
 *
p
 = (cmd_add_job_pdu *Ë
cmd
->
∑ylﬂd
;

571 
gfio_˛õ¡
 *
gc
 = 
˛õ¡
->
˛õ¡_d©a
;

572 
gui_íåy
 *
ge
 = 
gc
->ge;

573 
thªad_›ti⁄s
 *
o
;

574 *
c1
, *
c2
, *
c3
, *
c4
;

575 
tmp
[80];

576 
i2p
;

578 
p
->
thªad_numbî
 = 
	`À32_to_˝u
(p->thread_number);

579 
p
->
groupid
 = 
	`À32_to_˝u
(p->groupid);

580 
o
 = 
	`gfio_˛õ¡_add_job
(
gc
, &
p
->
t›
);

582 
	`gdk_thªads_íãr
();

584 
	`gtk_combo_box_ãxt_≠≥nd_ãxt
(
	`GTK_COMBO_BOX_TEXT
(
ge
->
ëa
.
«mes
), (
gch¨
 *Ë
o
->
«me
);

585 
	`gtk_combo_box_£t_a˘ive
(
	`GTK_COMBO_BOX
(
ge
->
ëa
.
«mes
), 0);

587 
	`•rötf
(
tmp
, "%†%s", 
o
->
odúe˘
 ? "dúe˘" : "buf„ªd", 
	`ddú_°r
(o->
td_ddú
));

588 
	`mu…ôext_add_íåy
(&
ge
->
ëa
.
iŸy≥
, 
tmp
);

590 
i2p
 = 
	`is_powî_of_2
(
o
->
kb_ba£
);

591 
c1
 = 
	`num2°r
(
o
->
mö_bs
[
DDIR_READ
], o->
sig_figs
, 1, 
i2p
, 
N2S_BYTE
);

592 
c2
 = 
	`num2°r
(
o
->
max_bs
[
DDIR_READ
], o->
sig_figs
, 1, 
i2p
, 
N2S_BYTE
);

593 
c3
 = 
	`num2°r
(
o
->
mö_bs
[
DDIR_WRITE
], o->
sig_figs
, 1, 
i2p
, 
N2S_BYTE
);

594 
c4
 = 
	`num2°r
(
o
->
max_bs
[
DDIR_WRITE
], o->
sig_figs
, 1, 
i2p
, 
N2S_BYTE
);

596 
	`•rötf
(
tmp
, "%s-%s,%s-%s", 
c1
, 
c2
, 
c3
, 
c4
);

597 
	`‰ì
(
c1
);

598 
	`‰ì
(
c2
);

599 
	`‰ì
(
c3
);

600 
	`‰ì
(
c4
);

601 
	`mu…ôext_add_íåy
(&
ge
->
ëa
.
bs
, 
tmp
);

603 
	`mu…ôext_add_íåy
(&
ge
->
ëa
.
i€ngöe
, (c⁄° *Ë
o
->ioengine);

605 
	`•rötf
(
tmp
, "%u", 
o
->
iodïth
);

606 
	`mu…ôext_add_íåy
(&
ge
->
ëa
.
iodïth
, 
tmp
);

608 
	`mu…ôext_£t_íåy
(&
ge
->
ëa
.
iŸy≥
, 0);

609 
	`mu…ôext_£t_íåy
(&
ge
->
ëa
.
bs
, 0);

610 
	`mu…ôext_£t_íåy
(&
ge
->
ëa
.
i€ngöe
, 0);

611 
	`mu…ôext_£t_íåy
(&
ge
->
ëa
.
iodïth
, 0);

613 
	`gfio_£t_°©e
(
ge
, 
GE_STATE_JOB_SENT
);

615 
	`gdk_thªads_Àave
();

616 
	}
}

618 
	$gfio_upd©e_job_›
(
fio_˛õ¡
 *
˛õ¡
,

619 
fio_√t_cmd
 *
cmd
)

621 
uöt32_t
 *
pdu_îr‹
 = (uöt32_à*Ë
cmd
->
∑ylﬂd
;

622 
gfio_˛õ¡
 *
gc
 = 
˛õ¡
->
˛õ¡_d©a
;

624 
gc
->
upd©e_job_°©us
 = 
	`À32_to_˝u
(*
pdu_îr‹
);

625 
gc
->
upd©e_job_d⁄e
 = 1;

626 
	}
}

628 
	$gfio_˛õ¡_timed_out
(
fio_˛õ¡
 *
˛õ¡
)

630 
gfio_˛õ¡
 *
gc
 = 
˛õ¡
->
˛õ¡_d©a
;

631 
buf
[256];

633 
	`gdk_thªads_íãr
();

635 
	`gfio_£t_°©e
(
gc
->
ge
, 
GE_STATE_NEW
);

636 
	`˛ór_ge_ui_öfo
(
gc
->
ge
);

638 
	`•rötf
(
buf
, "Clõ¡ %s:ÅimeouàèlkögÅÿ£rvî.\n", 
˛õ¡
->
ho°«me
);

639 
	`gfio_ªp‹t_öfo
(
gc
->
ge
->
ui
, "Nëw‹kÅimeout", 
buf
);

641 
	`gdk_thªads_Àave
();

642 
	}
}

644 
	$gfio_˛õ¡_°›
(
fio_˛õ¡
 *
˛õ¡
)

646 
gfio_˛õ¡
 *
gc
 = 
˛õ¡
->
˛õ¡_d©a
;

648 
	`gdk_thªads_íãr
();

650 
	`gfio_£t_°©e
(
gc
->
ge
, 
GE_STATE_JOB_DONE
);

652 i‡(
gc
->
îr_íåy
)

653 
	`íåy_£t_öt_vÆue
(
gc
->
îr_íåy
, 
˛õ¡
->
îr‹
);

655 
	`gdk_thªads_Àave
();

656 
	}
}

658 
	$gfio_˛õ¡_°¨t
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

660 
gfio_˛õ¡
 *
gc
 = 
˛õ¡
->
˛õ¡_d©a
;

662 
	`gdk_thªads_íãr
();

663 
	`gfio_£t_°©e
(
gc
->
ge
, 
GE_STATE_JOB_STARTED
);

664 
	`gdk_thªads_Àave
();

665 
	}
}

667 
	$gfio_˛õ¡_job_°¨t
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

669 
gfio_˛õ¡
 *
gc
 = 
˛õ¡
->
˛õ¡_d©a
;

671 
	`gdk_thªads_íãr
();

672 
	`gfio_£t_°©e
(
gc
->
ge
, 
GE_STATE_JOB_RUNNING
);

673 
	`gdk_thªads_Àave
();

674 
	}
}

676 
	$gfio_add_tŸÆ_dïths_åì
(
GtkLi°St‹e
 *
modñ
,

677 
thªad_°©
 *
ts
, 
Àn
)

679 
io_u_di°
[
FIO_IO_U_MAP_NR
];

680 
GtkTªeIãr
 
ôî
;

682 c⁄° 
add_mask
 = 0x17e;

683 
i
, 
j
;

685 
	`°©_ˇlc_di°
(
ts
->
io_u_m≠
, 
	`ddú_rw_sum
—s->
tŸÆ_io_u
), 
io_u_di°
);

687 
	`gtk_li°_°‹e_≠≥nd
(
modñ
, &
ôî
);

689 
	`gtk_li°_°‹e_£t
(
modñ
, &
ôî
, 0, "Total", -1);

691 
i
 = 1, 
j
 = 0; i < 
Àn
; i++) {

692 
fbuf
[32];

694 i‡(!(
add_mask
 & (1UL << (
i
 - 1))))

695 
	`•rötf
(
fbuf
, "0.0%%");

697 
	`•rötf
(
fbuf
, "%3.1f%%", 
io_u_di°
[
j
]);

698 
j
++;

701 
	`gtk_li°_°‹e_£t
(
modñ
, &
ôî
, 
i
, 
fbuf
, -1);

704 
	}
}

706 
	$gfio_add_íd_ªsu…s
(
gfio_˛õ¡
 *
gc
, 
thªad_°©
 *
ts
,

707 
group_run_°©s
 *
rs
)

709 
ƒ
 = 
gc
->
ƒ_ªsu…s
;

711 
gc
->
ªsu…s
 = 
	`ªÆloc
(gc->ªsu…s, (
ƒ
 + 1Ë* (
íd_ªsu…s
));

712 
	`mem˝y
(&
gc
->
ªsu…s
[
ƒ
].
ts
,Ås, (*ts));

713 
	`mem˝y
(&
gc
->
ªsu…s
[
ƒ
].
gs
, 
rs
, (*rs));

714 
gc
->
ƒ_ªsu…s
++;

715 
	}
}

717 
	$gfio_add_sc_dïths_åì
(
GtkLi°St‹e
 *
modñ
,

718 
thªad_°©
 *
ts
, 
Àn
,

719 
submô
)

721 
io_u_di°
[
FIO_IO_U_MAP_NR
];

722 
GtkTªeIãr
 
ôî
;

724 c⁄° 
add_mask
 = 0x1f9;

725 
i
, 
j
;

727 i‡(
submô
)

728 
	`°©_ˇlc_di°
(
ts
->
io_u_submô
,Ås->
tŸÆ_submô
, 
io_u_di°
);

730 
	`°©_ˇlc_di°
(
ts
->
io_u_com∂ëe
,Ås->
tŸÆ_com∂ëe
, 
io_u_di°
);

732 
	`gtk_li°_°‹e_≠≥nd
(
modñ
, &
ôî
);

734 
	`gtk_li°_°‹e_£t
(
modñ
, &
ôî
, 0, 
submô
 ? "Submit" : "Complete", -1);

736 
i
 = 1, 
j
 = 0; i < 
Àn
; i++) {

737 
fbuf
[32];

739 i‡(!(
add_mask
 & (1UL << (
i
 - 1))))

740 
	`•rötf
(
fbuf
, "0.0%%");

742 
	`•rötf
(
fbuf
, "%3.1f%%", 
io_u_di°
[
j
]);

743 
j
++;

746 
	`gtk_li°_°‹e_£t
(
modñ
, &
ôî
, 
i
, 
fbuf
, -1);

749 
	}
}

751 
	$gfio_show_io_dïths
(
GtkWidgë
 *
vbox
, 
thªad_°©
 *
ts
)

753 
GtkWidgë
 *
‰ame
, *
box
, *
åì_võw
 = 
NULL
;

754 
GtkTªeSñe˘i⁄
 *
£À˘i⁄
;

755 
GtkLi°St‹e
 *
modñ
;

756 
i
;

757 c⁄° *
œbñs
[] = { "Depth", "0", "1", "2", "4", "8", "16", "32", "64", ">= 64" };

758 c⁄° 
ƒ_œbñs
 = 
	`FIO_ARRAY_SIZE
(
œbñs
);

759 
GTy≥
 
ty≥s
[
ƒ_œbñs
];

761 
‰ame
 = 
	`gtk_‰ame_√w
("IO depths");

762 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
‰ame
, 
FALSE
, FALSE, 5);

764 
box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

765 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
box
);

767 
i
 = 0; i < 
ƒ_œbñs
; i++)

768 
ty≥s
[
i
] = 
G_TYPE_STRING
;

770 
modñ
 = 
	`gtk_li°_°‹e_√wv
(
ƒ_œbñs
, 
ty≥s
);

772 
åì_võw
 = 
	`gtk_åì_võw_√w_wôh_modñ
(
	`GTK_TREE_MODEL
(
modñ
));

773 
	`gtk_widgë_£t_ˇn_focus
(
åì_võw
, 
FALSE
);

775 
	`g_obje˘_£t
(
	`G_OBJECT
(
åì_võw
), "hódîs-visibÀ", 
TRUE
,

776 "íabÀ-grid-löes", 
GTK_TREE_VIEW_GRID_LINES_BOTH
, 
NULL
);

778 
£À˘i⁄
 = 
	`gtk_åì_võw_gë_£À˘i⁄
(
	`GTK_TREE_VIEW
(
åì_võw
));

779 
	`gtk_åì_£À˘i⁄_£t_mode
(
	`GTK_TREE_SELECTION
(
£À˘i⁄
), 
GTK_SELECTION_BROWSE
);

781 
i
 = 0; i < 
ƒ_œbñs
; i++)

782 
	`åì_võw_cﬁumn
(
åì_võw
, 
i
, 
œbñs
[i], 
ALIGN_RIGHT
 | 
UNSORTABLE
);

784 
	`gfio_add_tŸÆ_dïths_åì
(
modñ
, 
ts
, 
ƒ_œbñs
);

785 
	`gfio_add_sc_dïths_åì
(
modñ
, 
ts
, 
ƒ_œbñs
, 1);

786 
	`gfio_add_sc_dïths_åì
(
modñ
, 
ts
, 
ƒ_œbñs
, 0);

788 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
åì_võw
, 
TRUE
, TRUE, 3);

789 
	}
}

791 
	$gfio_show_˝u_ußge
(
GtkWidgë
 *
vbox
, 
thªad_°©
 *
ts
)

793 
GtkWidgë
 *
box
, *
‰ame
, *
íåy
;

794 
u§_˝u
, 
sys_˝u
;

795 
ru¡ime
;

796 
tmp
[32];

798 
ru¡ime
 = 
ts
->
tŸÆ_run_time
;

799 i‡(
ru¡ime
) {

800 
ru¡
 = (Ë
ru¡ime
;

802 
u§_˝u
 = (Ë
ts
->
u§_time
 * 100 / 
ru¡
;

803 
sys_˝u
 = (Ë
ts
->
sys_time
 * 100 / 
ru¡
;

805 
u§_˝u
 = 0;

806 
sys_˝u
 = 0;

809 
‰ame
 = 
	`gtk_‰ame_√w
("OSÑesources");

810 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
‰ame
, 
FALSE
, FALSE, 5);

812 
box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

813 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
box
);

815 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
box
, "User CPU");

816 
	`•rötf
(
tmp
, "%3.2f%%", 
u§_˝u
);

817 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
íåy
), 
tmp
);

818 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
box
, "System CPU");

819 
	`•rötf
(
tmp
, "%3.2f%%", 
sys_˝u
);

820 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
íåy
), 
tmp
);

821 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
box
, "Context switches");

822 
	`íåy_£t_öt_vÆue
(
íåy
, 
ts
->
˘x
);

823 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
box
, "Major faults");

824 
	`íåy_£t_öt_vÆue
(
íåy
, 
ts
->
majf
);

825 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
box
, "Minor faults");

826 
	`íåy_£t_öt_vÆue
(
íåy
, 
ts
->
möf
);

827 
	}
}

829 
GtkWidgë
 *
	$gfio_ouçut_œt_buckës
(*
œt
, c⁄° **
œbñs
,

830 
num
)

832 
GtkWidgë
 *
åì_võw
;

833 
GtkTªeSñe˘i⁄
 *
£À˘i⁄
;

834 
GtkLi°St‹e
 *
modñ
;

835 
GtkTªeIãr
 
ôî
;

836 
GTy≥
 *
ty≥s
;

837 
i
;

839 
ty≥s
 = 
	`mÆloc
(
num
 * (
GTy≥
));

841 
i
 = 0; i < 
num
; i++)

842 
ty≥s
[
i
] = 
G_TYPE_STRING
;

844 
modñ
 = 
	`gtk_li°_°‹e_√wv
(
num
, 
ty≥s
);

845 
	`‰ì
(
ty≥s
);

846 
ty≥s
 = 
NULL
;

848 
åì_võw
 = 
	`gtk_åì_võw_√w_wôh_modñ
(
	`GTK_TREE_MODEL
(
modñ
));

849 
	`gtk_widgë_£t_ˇn_focus
(
åì_võw
, 
FALSE
);

851 
	`g_obje˘_£t
(
	`G_OBJECT
(
åì_võw
), "hódîs-visibÀ", 
TRUE
,

852 "íabÀ-grid-löes", 
GTK_TREE_VIEW_GRID_LINES_BOTH
, 
NULL
);

854 
£À˘i⁄
 = 
	`gtk_åì_võw_gë_£À˘i⁄
(
	`GTK_TREE_VIEW
(
åì_võw
));

855 
	`gtk_åì_£À˘i⁄_£t_mode
(
	`GTK_TREE_SELECTION
(
£À˘i⁄
), 
GTK_SELECTION_BROWSE
);

857 
i
 = 0; i < 
num
; i++)

858 
	`åì_võw_cﬁumn
(
åì_võw
, 
i
, 
œbñs
[i], 
ALIGN_RIGHT
 | 
UNSORTABLE
);

860 
	`gtk_li°_°‹e_≠≥nd
(
modñ
, &
ôî
);

862 
i
 = 0; i < 
num
; i++) {

863 
fbuf
[32];

865 i‡(
œt
[
i
] <= 0.0)

866 
	`•rötf
(
fbuf
, "0.00");

868 
	`•rötf
(
fbuf
, "%3.2f%%", 
œt
[
i
]);

870 
	`gtk_li°_°‹e_£t
(
modñ
, &
ôî
, 
i
, 
fbuf
, -1);

873  
åì_võw
;

874 
	}
}

876 
gøph
 *
	$£tup_œt_buckë_gøph
(c⁄° *
tôÀ
, *
œt
,

877 c⁄° **
œbñs
,

878 
Àn
,

879 
xdim
, 
ydim
)

881 
gøph
 *
g
;

882 
i
;

884 
g
 = 
	`gøph_√w
(
xdim
, 
ydim
, 
gfio_gøph_f⁄t
);

885 
	`gøph_tôÀ
(
g
, 
tôÀ
);

886 
	`gøph_x_tôÀ
(
g
, "Buckets");

887 
	`gøph_y_tôÀ
(
g
, "Percent");

889 
i
 = 0; i < 
Àn
; i++) {

890 
gøph_œbñ_t
 
l
;

892 
l
 = 
	`gøph_add_œbñ
(
g
, 
œbñs
[
i
]);

893 
	`gøph_add_d©a
(
g
, 
l
, 
œt
[
i
]);

896  
g
;

897 
	}
}

899 
	$⁄_expo£_œt_døwög_¨ó
(
GtkWidgë
 *
w
, 
GdkEvít
 *
evít
, 
gpoöãr
 
p
)

901 
gøph
 *
g
 = 
p
;

902 
ˇúo_t
 *
¸
;

904 
¸
 = 
	`gdk_ˇúo_¸óã
(
	`gtk_widgë_gë_wödow
(
w
));

906 i‡(
	`gøph_has_toﬁtùs
(
g
)) {

907 
	`g_obje˘_£t
(
w
, "has-toﬁtù", 
TRUE
, 
NULL
);

908 
	`g_sig«l_c⁄√˘
(
w
, "quîy-toﬁtù", 
	`G_CALLBACK
(
˛©_gøph_toﬁtù
), 
g
);

911 
	`ˇúo_£t_sour˚_rgb
(
¸
, 0, 0, 0);

912 
	`b¨_gøph_døw
(
g
, 
¸
);

913 
	`ˇúo_de°roy
(
¸
);

915  
FALSE
;

916 
	}
}

918 
göt
 
	$⁄_c⁄fig_œt_døwög_¨ó
(
GtkWidgë
 *
w
, 
GdkEvítC⁄figuª
 *
evít
,

919 
gpoöãr
 
d©a
)

921 
guöt
 
width
 = 
	`gtk_widgë_gë_Æloˇãd_width
(
w
);

922 
guöt
 
height
 = 
	`gtk_widgë_gë_Æloˇãd_height
(
w
);

923 
gøph
 *
g
 = 
d©a
;

925 
	`gøph_£t_size
(
g
, 
width
, 
height
);

926 
	`gøph_£t_size
(
g
, 
width
, 
height
);

927 
	`gøph_£t_posôi⁄
(
g
, 0, 0);

928  
TRUE
;

929 
	}
}

931 
	$gfio_show_œãncy_buckës
(
gfio_˛õ¡
 *
gc
, 
GtkWidgë
 *
vbox
,

932 
thªad_°©
 *
ts
)

934 
io_u_œt
[
FIO_IO_U_LAT_N_NR
 + 
FIO_IO_U_LAT_U_NR
 + 
FIO_IO_U_LAT_M_NR
];

935 c⁄° *
ønges
[] = { "2ns", "4ns", "10ns", "20ns", "50ns", "100ns",

941 
°¨t
, 
íd
, 
i
;

942 c⁄° 
tŸÆ
 = 
FIO_IO_U_LAT_U_NR
 + 
FIO_IO_U_LAT_M_NR
;

943 
GtkWidgë
 *
‰ame
, *
åì_võw
, *
hbox
, *
com∂ëi⁄_vbox
, *
døwög_¨ó
;

944 
gui_íåy
 *
ge
 = 
gc
->ge;

946 
	`°©_ˇlc_œt_n
(
ts
, 
io_u_œt
);

947 
	`°©_ˇlc_œt_u
(
ts
, &
io_u_œt
[
FIO_IO_U_LAT_N_NR
]);

948 
	`°©_ˇlc_œt_m
(
ts
, &
io_u_œt
[
FIO_IO_U_LAT_N_NR
 + 
FIO_IO_U_LAT_U_NR
]);

953 
°¨t
 = 
íd
 = -1U;

954 
i
 = 0; i < 
tŸÆ
; i++) {

955 i‡(
io_u_œt
[
i
] == 0.00)

958 i‡(
°¨t
 == -1U)

959 
°¨t
 = 
i
;

960 
íd
 = 
i
;

966 i‡(
°¨t
 == -1U)

969 
åì_võw
 = 
	`gfio_ouçut_œt_buckës
(&
io_u_œt
[
°¨t
], &
ønges
[°¨t], 
íd
 - start + 1);

970 
ge
->
œt_buckë_gøph
 = 
	`£tup_œt_buckë_gøph
("L©ícy buckës", &
io_u_œt
[
°¨t
], &
ønges
[°¨t], 
íd
 - start + 1, 700.0, 300.0);

972 
‰ame
 = 
	`gtk_‰ame_√w
("Latency buckets");

973 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
‰ame
, 
FALSE
, FALSE, 5);

975 
com∂ëi⁄_vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 3);

976 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
com∂ëi⁄_vbox
);

977 
hbox
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

978 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
com∂ëi⁄_vbox
), 
hbox
);

980 
døwög_¨ó
 = 
	`gtk_døwög_¨ó_√w
();

981 
	`gtk_widgë_£t_size_ªque°
(
	`GTK_WIDGET
(
døwög_¨ó
), 700, 300);

982 
	`gtk_widgë_modify_bg
(
døwög_¨ó
, 
GTK_STATE_NORMAL
, &
gfio_cﬁ‹_whôe
);

983 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
com∂ëi⁄_vbox
), 
døwög_¨ó
);

984 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
døwög_¨ó
), 
GFIO_DRAW_EVENT
, 
	`G_CALLBACK
(
⁄_expo£_œt_døwög_¨ó
), 
ge
->
œt_buckë_gøph
);

985 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
døwög_¨ó
), "c⁄figuª_evít", 
	`G_CALLBACK
(
⁄_c⁄fig_œt_døwög_¨ó
), 
ge
->
œt_buckë_gøph
);

987 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox
), 
åì_võw
, 
TRUE
, TRUE, 3);

988 
	}
}

990 
	$gfio_show_œt
(
GtkWidgë
 *
vbox
, c⁄° *
«me
, 
mö
,

991 
max
, 
món
, 
dev
)

993 c⁄° *
ba£
 = "(nsec)";

994 
GtkWidgë
 *
hbox
, *
œbñ
, *
‰ame
;

995 *
möp
, *
maxp
;

996 
tmp
[64];

998 i‡(
	`n£c_to_m£c
(&
mö
, &
max
, &
món
, &
dev
))

999 
ba£
 = "(msec)";

1000 i‡(
	`n£c_to_u£c
(&
mö
, &
max
, &
món
, &
dev
))

1001 
ba£
 = "(usec)";

1003 
möp
 = 
	`num2°r
(
mö
, 6, 1, 0, 
N2S_NONE
);

1004 
maxp
 = 
	`num2°r
(
max
, 6, 1, 0, 
N2S_NONE
);

1006 
	`•rötf
(
tmp
, "%†%s", 
«me
, 
ba£
);

1007 
‰ame
 = 
	`gtk_‰ame_√w
(
tmp
);

1008 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
‰ame
, 
FALSE
, FALSE, 5);

1010 
hbox
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

1011 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
hbox
);

1013 
œbñ
 = 
	`√w_öfo_œbñ_ö_‰ame
(
hbox
, "Minimum");

1014 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
œbñ
), 
möp
);

1015 
œbñ
 = 
	`√w_öfo_œbñ_ö_‰ame
(
hbox
, "Maximum");

1016 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
œbñ
), 
maxp
);

1017 
œbñ
 = 
	`√w_öfo_œbñ_ö_‰ame
(
hbox
, "Average");

1018 
	`•rötf
(
tmp
, "%5.02f", 
món
);

1019 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
œbñ
), 
tmp
);

1020 
œbñ
 = 
	`√w_öfo_œbñ_ö_‰ame
(
hbox
, "Standard deviation");

1021 
	`•rötf
(
tmp
, "%5.02f", 
dev
);

1022 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
œbñ
), 
tmp
);

1024 
	`‰ì
(
möp
);

1025 
	`‰ì
(
maxp
);

1026 
	}
}

1028 
GtkWidgë
 *
	$gfio_ouçut_˛©_≥r˚¡ûes
(*
ovÆs
,

1029 
fio_Â64_t
 *
∂i°
,

1030 
Àn
,

1031 c⁄° *
ba£
,

1032 
sˇÀ
)

1034 
GTy≥
 
ty≥s
[
FIO_IO_U_LIST_MAX_LEN
];

1035 
GtkWidgë
 *
åì_võw
;

1036 
GtkTªeSñe˘i⁄
 *
£À˘i⁄
;

1037 
GtkLi°St‹e
 *
modñ
;

1038 
GtkTªeIãr
 
ôî
;

1039 
i
, 
j
;

1041 
i
 = 0; i < 
Àn
; i++)

1042 
ty≥s
[
i
] = 
G_TYPE_ULONG
;

1044 
modñ
 = 
	`gtk_li°_°‹e_√wv
(
Àn
, 
ty≥s
);

1046 
åì_võw
 = 
	`gtk_åì_võw_√w_wôh_modñ
(
	`GTK_TREE_MODEL
(
modñ
));

1047 
	`gtk_widgë_£t_ˇn_focus
(
åì_võw
, 
FALSE
);

1049 
	`g_obje˘_£t
(
	`G_OBJECT
(
åì_võw
), "hódîs-visibÀ", 
TRUE
,

1050 "íabÀ-grid-löes", 
GTK_TREE_VIEW_GRID_LINES_BOTH
, 
NULL
);

1052 
£À˘i⁄
 = 
	`gtk_åì_võw_gë_£À˘i⁄
(
	`GTK_TREE_VIEW
(
åì_võw
));

1053 
	`gtk_åì_£À˘i⁄_£t_mode
(
	`GTK_TREE_SELECTION
(
£À˘i⁄
), 
GTK_SELECTION_BROWSE
);

1055 
i
 = 0; i < 
Àn
; i++) {

1056 
fbuf
[8];

1058 
	`•rötf
(
fbuf
, "%2.2f%%", 
∂i°
[
i
].
u
.
f
);

1059 
	`åì_võw_cﬁumn
(
åì_võw
, 
i
, 
fbuf
, 
ALIGN_RIGHT
 | 
UNSORTABLE
);

1062 
	`gtk_li°_°‹e_≠≥nd
(
modñ
, &
ôî
);

1064 
i
 = 0; i < 
Àn
; i++) {

1065 
j
 = 0; j < 
sˇÀ
; j++)

1066 
ovÆs
[
i
] = (ovals[i] + 999) / 1000;

1067 
	`gtk_li°_°‹e_£t
(
modñ
, &
ôî
, 
i
, (Ë
ovÆs
[i], -1);

1070  
åì_võw
;

1071 
	}
}

1073 
gøph
 *
	$£tup_˛©_gøph
(*
tôÀ
, *
ovÆs
,

1074 
fio_Â64_t
 *
∂i°
,

1075 
Àn
,

1076 
xdim
, 
ydim
)

1078 
gøph
 *
g
;

1079 
i
;

1081 
g
 = 
	`gøph_√w
(
xdim
, 
ydim
, 
gfio_gøph_f⁄t
);

1082 
	`gøph_tôÀ
(
g
, 
tôÀ
);

1083 
	`gøph_x_tôÀ
(
g
, "Percentile");

1084 
	`gøph_y_tôÀ
(
g
, "Time");

1086 
i
 = 0; i < 
Àn
; i++) {

1087 
gøph_œbñ_t
 
l
;

1088 
fbuf
[8];

1090 
	`•rötf
(
fbuf
, "%2.2f%%", 
∂i°
[
i
].
u
.
f
);

1091 
l
 = 
	`gøph_add_œbñ
(
g
, 
fbuf
);

1092 
	`gøph_add_d©a
(
g
, 
l
, (Ë
ovÆs
[
i
]);

1095  
g
;

1096 
	}
}

1098 
	$gfio_show_˛©_≥r˚¡ûes
(
gfio_˛õ¡
 *
gc
,

1099 
GtkWidgë
 *
vbox
, 
thªad_°©
 *
ts
,

1100 
ddú
, 
uöt64_t
 *
io_u_∂©
,

1101 
ƒ
, c⁄° *
ty≥
)

1103 
fio_Â64_t
 *
∂i°
 = 
ts
->
≥r˚¡ûe_li°
;

1104 
Àn
, 
sˇÀ_down
;

1105 *
ovÆs
, 
möv
, 
maxv
;

1106 c⁄° *
ba£
;

1107 
GtkWidgë
 *
åì_võw
, *
‰ame
, *
hbox
, *
døwög_¨ó
, *
com∂ëi⁄_vbox
;

1108 
gui_íåy
 *
ge
 = 
gc
->ge;

1109 
tmp
[64];

1111 
Àn
 = 
	`ˇlc_˛©_≥r˚¡ûes
(
io_u_∂©
, 
ƒ
, 
∂i°
, &
ovÆs
, &
maxv
, &
möv
);

1112 i‡(!
Àn
)

1113 
out
;

1119 i‡(
möv
 > 2000000 && 
maxv
 > 99999999ULL) {

1120 
sˇÀ_down
 = 2;

1121 
ba£
 = "msec";

1122 } i‡(
möv
 > 2000 && 
maxv
 > 99999) {

1123 
sˇÀ_down
 = 1;

1124 
ba£
 = "usec";

1126 
sˇÀ_down
 = 0;

1127 
ba£
 = "nsec";

1130 
	`•rötf
(
tmp
, "%†œãncyÖî˚¡ûe†(%s)", 
ty≥
, 
ba£
);

1132 
åì_võw
 = 
	`gfio_ouçut_˛©_≥r˚¡ûes
(
ovÆs
, 
∂i°
, 
Àn
, 
ba£
, 
sˇÀ_down
);

1133 
ge
->
˛©_gøph
 = 
	`£tup_˛©_gøph
(
tmp
, 
ovÆs
, 
∂i°
, 
Àn
, 700.0, 300.0);

1135 
‰ame
 = 
	`gtk_‰ame_√w
(
tmp
);

1136 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
‰ame
, 
FALSE
, FALSE, 5);

1138 
com∂ëi⁄_vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 3);

1139 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
com∂ëi⁄_vbox
);

1140 
hbox
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

1141 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
com∂ëi⁄_vbox
), 
hbox
);

1142 
døwög_¨ó
 = 
	`gtk_døwög_¨ó_√w
();

1143 
	`gtk_widgë_£t_size_ªque°
(
	`GTK_WIDGET
(
døwög_¨ó
), 700, 300);

1144 
	`gtk_widgë_modify_bg
(
døwög_¨ó
, 
GTK_STATE_NORMAL
, &
gfio_cﬁ‹_whôe
);

1145 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
com∂ëi⁄_vbox
), 
døwög_¨ó
);

1146 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
døwög_¨ó
), 
GFIO_DRAW_EVENT
, 
	`G_CALLBACK
(
⁄_expo£_œt_døwög_¨ó
), 
ge
->
˛©_gøph
);

1147 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
døwög_¨ó
), "c⁄figuª_evít", 
	`G_CALLBACK
(
⁄_c⁄fig_œt_døwög_¨ó
), 
ge
->
˛©_gøph
);

1149 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox
), 
åì_võw
, 
TRUE
, TRUE, 3);

1150 
out
:

1151 i‡(
ovÆs
)

1152 
	`‰ì
(
ovÆs
);

1153 
	}
}

1155 
	#GFIO_CLAT
 1

	)

1156 
	#GFIO_SLAT
 2

	)

1157 
	#GFIO_LAT
 4

	)

1159 
	$gfio_show_ddú_°©us
(
gfio_˛õ¡
 *
gc
, 
GtkWidgë
 *
mbox
,

1160 
group_run_°©s
 *
rs
,

1161 
thªad_°©
 *
ts
, 
ddú
)

1163 c⁄° *
ddú_œbñ
[3] = { "Read", "Write", "Trim" };

1164 
GtkWidgë
 *
‰ame
, *
œbñ
, *
box
, *
vbox
, *
maö_vbox
;

1165 
mö
[3], 
max
[3];

1166 
ru¡
;

1167 
bw
, 
i›s
;

1168 
Êags
 = 0;

1169 
món
[3], 
dev
[3];

1170 *
io_p
, *
io_∑…
, *
bw_p
, *
bw_∑…
, *
i›s_p
;

1171 
tmp
[128];

1172 
i2p
;

1174 i‡(!
ts
->
ru¡ime
[
ddú
])

1177 
i2p
 = 
	`is_powî_of_2
(
rs
->
kb_ba£
);

1178 
ru¡
 = 
ts
->
ru¡ime
[
ddú
];

1180 
bw
 = (1000 * 
ts
->
io_byãs
[
ddú
]Ë/ 
ru¡
;

1182 
i›s
 = (1000 * (
uöt64_t
)
ts
->
tŸÆ_io_u
[
ddú
]Ë/ 
ru¡
;

1183 
i›s_p
 = 
	`num2°r
(
i›s
, 
ts
->
sig_figs
, 1, 0, 
N2S_PERSEC
);

1185 
box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

1186 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
mbox
), 
box
, 
TRUE
, 
FALSE
, 3);

1188 
‰ame
 = 
	`gtk_‰ame_√w
(
ddú_œbñ
[
ddú
]);

1189 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
‰ame
, 
TRUE
, TRUE, 5);

1191 
maö_vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 3);

1192 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
maö_vbox
);

1194 
box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

1195 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
maö_vbox
), 
box
, 
TRUE
, 
FALSE
, 3);

1197 
œbñ
 = 
	`√w_öfo_œbñ_ö_‰ame
(
box
, "IO");

1198 
io_p
 = 
	`num2°r
(
ts
->
io_byãs
[
ddú
],Ås->
sig_figs
, 1, 
i2p
, 
N2S_BYTE
);

1199 
io_∑…
 = 
	`num2°r
(
ts
->
io_byãs
[
ddú
],Ås->
sig_figs
, 1, !
i2p
, 
N2S_BYTE
);

1200 
	`¢¥ötf
(
tmp
, —mp), "%†(%s)", 
io_p
, 
io_∑…
);

1201 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
œbñ
), 
tmp
);

1203 
œbñ
 = 
	`√w_öfo_œbñ_ö_‰ame
(
box
, "Bandwidth");

1204 
bw_p
 = 
	`num2°r
(
bw
, 
ts
->
sig_figs
, 1, 
i2p
,Ås->
unô_ba£
);

1205 
bw_∑…
 = 
	`num2°r
(
bw
, 
ts
->
sig_figs
, 1, !
i2p
,Ås->
unô_ba£
);

1206 
	`¢¥ötf
(
tmp
, —mp), "%†(%s)", 
bw_p
, 
bw_∑…
);

1207 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
œbñ
), 
tmp
);

1209 
œbñ
 = 
	`√w_öfo_œbñ_ö_‰ame
(
box
, "IOPS");

1210 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
œbñ
), 
i›s_p
);

1211 
œbñ
 = 
	`√w_öfo_œbñ_ö_‰ame
(
box
, "Runtime (msec)");

1212 
	`œbñ_£t_öt_vÆue
(
œbñ
, 
ts
->
ru¡ime
[
ddú
]);

1214 i‡(
	`ˇlc_œt
(&
ts
->
bw_°©
[
ddú
], &
mö
[0], &
max
[0], &
món
[0], &
dev
[0])) {

1215 
p_of_agg
 = 100.0;

1216 c⁄° *
bw_°r
 = "KiB/s";

1217 
tmp
[32];

1219 i‡(
rs
->
agg
[
ddú
]) {

1220 
p_of_agg
 = 
món
[0] * 100 / (Ë
rs
->
agg
[
ddú
];

1221 i‡(
p_of_agg
 > 100.0)

1222 
p_of_agg
 = 100.0;

1225 i‡(
món
[0] > 1073741824.9) {

1226 
mö
[0] /= 1048576.0;

1227 
max
[0] /= 1048576.0;

1228 
món
[0] /= 1048576.0;

1229 
dev
[0] /= 1048576.0;

1230 
bw_°r
 = "GiB/s";

1233 i‡(
món
[0] > 1047575.9) {

1234 
mö
[0] /= 1024.0;

1235 
max
[0] /= 1024.0;

1236 
món
[0] /= 1024.0;

1237 
dev
[0] /= 1024.0;

1238 
bw_°r
 = "MiB/s";

1240 
	`•rötf
(
tmp
, "B™dwidth (%s)", 
bw_°r
);

1241 
‰ame
 = 
	`gtk_‰ame_√w
(
tmp
);

1242 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
maö_vbox
), 
‰ame
, 
FALSE
, FALSE, 5);

1244 
box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

1245 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
box
);

1247 
œbñ
 = 
	`√w_öfo_œbñ_ö_‰ame
(
box
, "Minimum");

1248 
	`œbñ_£t_öt_vÆue
(
œbñ
, 
mö
[0]);

1249 
œbñ
 = 
	`√w_öfo_œbñ_ö_‰ame
(
box
, "Maximum");

1250 
	`œbñ_£t_öt_vÆue
(
œbñ
, 
max
[0]);

1251 
œbñ
 = 
	`√w_öfo_œbñ_ö_‰ame
(
box
, "Percentage of jobs");

1252 
	`•rötf
(
tmp
, "%3.2f%%", 
p_of_agg
);

1253 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
œbñ
), 
tmp
);

1254 
œbñ
 = 
	`√w_öfo_œbñ_ö_‰ame
(
box
, "Average");

1255 
	`•rötf
(
tmp
, "%5.02f", 
món
[0]);

1256 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
œbñ
), 
tmp
);

1257 
œbñ
 = 
	`√w_öfo_œbñ_ö_‰ame
(
box
, "Standard deviation");

1258 
	`•rötf
(
tmp
, "%5.02f", 
dev
[0]);

1259 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
œbñ
), 
tmp
);

1262 i‡(
	`ˇlc_œt
(&
ts
->
¶©_°©
[
ddú
], &
mö
[0], &
max
[0], &
món
[0], &
dev
[0]))

1263 
Êags
 |
GFIO_SLAT
;

1264 i‡(
	`ˇlc_œt
(&
ts
->
˛©_°©
[
ddú
], &
mö
[1], &
max
[1], &
món
[1], &
dev
[1]))

1265 
Êags
 |
GFIO_CLAT
;

1266 i‡(
	`ˇlc_œt
(&
ts
->
œt_°©
[
ddú
], &
mö
[2], &
max
[2], &
món
[2], &
dev
[2]))

1267 
Êags
 |
GFIO_LAT
;

1269 i‡(
Êags
) {

1270 
‰ame
 = 
	`gtk_‰ame_√w
("Latency");

1271 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
maö_vbox
), 
‰ame
, 
FALSE
, FALSE, 5);

1273 
vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 3);

1274 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
vbox
);

1276 i‡(
Êags
 & 
GFIO_SLAT
)

1277 
	`gfio_show_œt
(
vbox
, "Submissi⁄Ü©ícy", 
mö
[0], 
max
[0], 
món
[0], 
dev
[0]);

1278 i‡(
Êags
 & 
GFIO_CLAT
)

1279 
	`gfio_show_œt
(
vbox
, "Com∂ëi⁄Ü©ícy", 
mö
[1], 
max
[1], 
món
[1], 
dev
[1]);

1280 i‡(
Êags
 & 
GFIO_LAT
)

1281 
	`gfio_show_œt
(
vbox
, "TŸÆÜ©ícy", 
mö
[2], 
max
[2], 
món
[2], 
dev
[2]);

1284 i‡(
ts
->
¶©_≥r˚¡ûes
 && 
Êags
 & 
GFIO_SLAT
)

1285 
	`gfio_show_˛©_≥r˚¡ûes
(
gc
, 
maö_vbox
, 
ts
, 
ddú
,

1286 
ts
->
io_u_∂©
[
FIO_SLAT
][
ddú
],

1287 
ts
->
¶©_°©
[
ddú
].
ßm∂es
,

1289 i‡(
ts
->
˛©_≥r˚¡ûes
 && 
Êags
 & 
GFIO_CLAT
)

1290 
	`gfio_show_˛©_≥r˚¡ûes
(
gc
, 
maö_vbox
, 
ts
, 
ddú
,

1291 
ts
->
io_u_∂©
[
FIO_CLAT
][
ddú
],

1292 
ts
->
˛©_°©
[
ddú
].
ßm∂es
,

1294 i‡(
ts
->
œt_≥r˚¡ûes
 && 
Êags
 & 
GFIO_LAT
)

1295 
	`gfio_show_˛©_≥r˚¡ûes
(
gc
, 
maö_vbox
, 
ts
, 
ddú
,

1296 
ts
->
io_u_∂©
[
FIO_LAT
][
ddú
],

1297 
ts
->
œt_°©
[
ddú
].
ßm∂es
,

1300 
	`‰ì
(
io_p
);

1301 
	`‰ì
(
bw_p
);

1302 
	`‰ì
(
io_∑…
);

1303 
	`‰ì
(
bw_∑…
);

1304 
	`‰ì
(
i›s_p
);

1305 
	}
}

1307 
	$__gfio_di•œy_íd_ªsu…s
(
GtkWidgë
 *
wö
, 
gfio_˛õ¡
 *
gc
,

1308 
thªad_°©
 *
ts
,

1309 
group_run_°©s
 *
rs
)

1311 
GtkWidgë
 *
box
, *
vbox
, *
íåy
, *
s¸ﬁl
;

1312 
i
;

1314 
s¸ﬁl
 = 
	`gtk_s¸ﬁÀd_wödow_√w
(
NULL
, NULL);

1315 
	`gtk_c⁄èöî_£t_b‹dî_width
(
	`GTK_CONTAINER
(
s¸ﬁl
), 5);

1316 
	`gtk_s¸ﬁÀd_wödow_£t_pﬁicy
(
	`GTK_SCROLLED_WINDOW
(
s¸ﬁl
), 
GTK_POLICY_AUTOMATIC
, GTK_POLICY_AUTOMATIC);

1318 
vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 3);

1320 
box
 = 
	`gtk_hbox_√w
(
FALSE
, 0);

1321 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
box
, 
TRUE
, 
FALSE
, 5);

1323 
	`gtk_s¸ﬁÀd_wödow_add_wôh_võwp‹t
(
	`GTK_SCROLLED_WINDOW
(
s¸ﬁl
), 
vbox
);

1325 
	`gtk_nŸebook_≠≥nd_∑ge
(
	`GTK_NOTEBOOK
(
wö
), 
s¸ﬁl
, 
	`gtk_œbñ_√w
(
ts
->
«me
));

1327 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
box
, "Name");

1328 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
íåy
), 
ts
->
«me
);

1329 i‡(
	`°æí
(
ts
->
des¸ùti⁄
)) {

1330 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
box
, "Description");

1331 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
íåy
), 
ts
->
des¸ùti⁄
);

1333 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
box
, "Group ID");

1334 
	`íåy_£t_öt_vÆue
(
íåy
, 
ts
->
groupid
);

1335 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
box
, "Jobs");

1336 
	`íåy_£t_öt_vÆue
(
íåy
, 
ts
->
membîs
);

1337 
gc
->
îr_íåy
 = 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
box
, "Error");

1338 
	`íåy_£t_öt_vÆue
(
íåy
, 
ts
->
îr‹
);

1339 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
box
, "PID");

1340 
	`íåy_£t_öt_vÆue
(
íåy
, 
ts
->
pid
);

1342 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

1343 i‡(
ts
->
io_byãs
[
i
])

1344 
	`gfio_show_ddú_°©us
(
gc
, 
vbox
, 
rs
, 
ts
, 
i
);

1347 
	`gfio_show_œãncy_buckës
(
gc
, 
vbox
, 
ts
);

1348 
	`gfio_show_˝u_ußge
(
vbox
, 
ts
);

1349 
	`gfio_show_io_dïths
(
vbox
, 
ts
);

1350 
	}
}

1352 
	$gfio_di•œy_íd_ªsu…s
(
gfio_˛õ¡
 *
gc
)

1354 
gui_íåy
 *
ge
 = 
gc
->ge;

1355 
GtkWidgë
 *
ªs_nŸebook
;

1356 
i
;

1358 
ªs_nŸebook
 = 
	`gë_ªsu…s_wödow
(
ge
);

1360 
i
 = 0; i < 
gc
->
ƒ_ªsu…s
; i++) {

1361 
íd_ªsu…s
 *
e
 = &
gc
->
ªsu…s
[
i
];

1363 
	`__gfio_di•œy_íd_ªsu…s
(
ªs_nŸebook
, 
gc
, &
e
->
ts
, &e->
gs
);

1366 i‡(
	`gfio_disk_utû_show
(
gc
))

1367 
	`gtk_widgë_show_Æl
(
ge
->
ªsu…s_wödow
);

1368 
	}
}

1370 
	$gfio_di•œy_ts
(
fio_˛õ¡
 *
˛õ¡
, 
thªad_°©
 *
ts
,

1371 
group_run_°©s
 *
rs
)

1373 
gfio_˛õ¡
 *
gc
 = 
˛õ¡
->
˛õ¡_d©a
;

1374 
gui_íåy
 *
ge
 = 
gc
->ge;

1376 
	`gfio_add_íd_ªsu…s
(
gc
, 
ts
, 
rs
);

1378 
	`gdk_thªads_íãr
();

1379 i‡(
ge
->
ªsu…s_wödow
)

1380 
	`__gfio_di•œy_íd_ªsu…s
(
ge
->
ªsu…s_nŸebook
, 
gc
, 
ts
, 
rs
);

1382 
	`gfio_di•œy_íd_ªsu…s
(
gc
);

1383 
	`gdk_thªads_Àave
();

1384 
	}
}

1386 
	$gfio_˛õ¡_ªmoved
(
fio_˛õ¡
 *
˛õ¡
)

1388 
gfio_˛õ¡
 *
gc
 = 
˛õ¡
->
˛õ¡_d©a
;

1390 
	`as£π
(
gc
->
˛õ¡
 == client);

1391 
	`fio_put_˛õ¡
(
gc
->
˛õ¡
);

1392 
gc
->
˛õ¡
 = 
NULL
;

1393 
	}
}

1395 
˛õ¡_›s
 
	ggfio_˛õ¡_›s
 = {

1396 .
ãxt
 = 
gfio_ãxt_›
,

1397 .
	gdisk_utû
 = 
gfio_disk_utû_›
,

1398 .
	gthªad_°©us
 = 
gfio_thªad_°©us_›
,

1399 .
	ggroup_°©s
 = 
gfio_group_°©s_›
,

1400 .
	gjobs_ëa
 = 
gfio_upd©e_˛õ¡_ëa
,

1401 .
	gëa
 = 
gfio_upd©e_Æl_ëa
,

1402 .
	g¥obe
 = 
gfio_¥obe_›
,

1403 .
	gquô
 = 
gfio_quô_›
,

1404 .
	gadd_job
 = 
gfio_add_job_›
,

1405 .
	gupd©e_job
 = 
gfio_upd©e_job_›
,

1406 .
	gtimed_out
 = 
gfio_˛õ¡_timed_out
,

1407 .
	g°›
 = 
gfio_˛õ¡_°›
,

1408 .
	g°¨t
 = 
gfio_˛õ¡_°¨t
,

1409 .
	gjob_°¨t
 = 
gfio_˛õ¡_job_°¨t
,

1410 .
	gªmoved
 = 
gfio_˛õ¡_ªmoved
,

1411 .
	gëa_m£c
 = 
FIO_CLIENT_DEF_ETA_MSEC
,

1412 .
	g°ay_c⁄√˘ed
 = 1,

1413 .
	g˛õ¡_ty≥
 = 
FIO_CLIENT_TYPE_GUI
,

	@gclient.h

1 #i‚de‡
GFIO_CLIENT_H


2 
	#GFIO_CLIENT_H


	)

4 
˛õ¡_›s
 
gfio_˛õ¡_›s
;

6 
gfio_di•œy_íd_ªsu…s
(
gfio_˛õ¡
 *);

8 
	#GFIO_READ_R
 0.13

	)

9 
	#GFIO_READ_G
 0.54

	)

10 
	#GFIO_READ_B
 0.13

	)

11 
	#GFIO_WRITE_R
 1.00

	)

12 
	#GFIO_WRITE_G
 0.00

	)

13 
	#GFIO_WRITE_B
 0.00

	)

14 
	#GFIO_TRIM_R
 0.24

	)

15 
	#GFIO_TRIM_G
 0.18

	)

16 
	#GFIO_TRIM_B
 0.52

	)

	@gcompat.c

1 
	~<gtk/gtk.h
>

3 
	~"gcom∑t.h
"

5 #i‡
GTK_MAJOR_VERSION
 <2 && 
GTK_MINOR_VERSION
 < 24

7 
GtkWidgë
 *
	$gtk_combo_box_ãxt_√w
()

9  
	`gtk_combo_box_√w
();

10 
	}
}

12 
	$gtk_combo_box_ãxt_≠≥nd_ãxt
(
GtkComboBoxText
 *
combo_box
,

13 c⁄° 
gch¨
 *
ãxt
)

15 
	`gtk_combo_box_≠≥nd_ãxt
(
	`GTK_COMBO_BOX
(
combo_box
), 
ãxt
);

16 
	}
}

18 
	$gtk_combo_box_ãxt_ö£π_ãxt
(
GtkComboBoxText
 *
combo_box
, 
göt
 
posôi⁄
,

19 c⁄° 
gch¨
 *
ãxt
)

21 
	`gtk_combo_box_ö£π_ãxt
(
	`GTK_COMBO_BOX
(
combo_box
), 
posôi⁄
, 
ãxt
);

22 
	}
}

24 
	$gtk_combo_box_ãxt_¥ïíd_ãxt
(
GtkComboBoxText
 *
combo_box
,

25 c⁄° 
gch¨
 *
ãxt
)

27 
	`gtk_combo_box_¥ïíd_ãxt
(
	`GTK_COMBO_BOX
(
combo_box
), 
ãxt
);

28 
	}
}

30 
gch¨
 *
	$gtk_combo_box_ãxt_gë_a˘ive_ãxt
(
GtkComboBoxText
 *
combo_box
)

32  
	`gtk_combo_box_gë_a˘ive_ãxt
(
	`GTK_COMBO_BOX
(
combo_box
));

33 
	}
}

37 #i‡
GTK_MAJOR_VERSION
 < 3

39 
guöt
 
	$gtk_widgë_gë_Æloˇãd_width
(
GtkWidgë
 *
w
)

41  
w
->
Æloˇti⁄
.
width
;

42 
	}
}

44 
guöt
 
	$gtk_widgë_gë_Æloˇãd_height
(
GtkWidgë
 *
w
)

46  
w
->
Æloˇti⁄
.
height
;

47 
	}
}

51 #i‡
GTK_MAJOR_VERSION
 <2 && 
GTK_MINOR_VERSION
 < 18

52 
	$gtk_widgë_£t_ˇn_focus
(
GtkWidgë
 *
widgë
, 
gboﬁón
 
ˇn_focus
)

54 i‡(
ˇn_focus
)

55 
	`GTK_WIDGET_SET_FLAGS
(
widgë
, 
GTK_CAN_FOCUS
);

57 
	`GTK_WIDGET_UNSET_FLAGS
(
widgë
, 
GTK_CAN_FOCUS
);

58 
	}
}

	@gcompat.h

1 #i‚de‡
GFIO_GTK_COMPAT


2 
	#GFIO_GTK_COMPAT


	)

4 
	~<gtk/gtk.h
>

6 #i‡
GTK_MAJOR_VERSION
 <2 && 
GTK_MINOR_VERSION
 < 24

7 
	gGtkComboBoxText
;

8 
GtkComboBox
 
	tGtkComboBoxText
;

9 
GtkWidgë
 *
gtk_combo_box_ãxt_√w
();

10 
GtkWidgë
 *
gtk_combo_box_ãxt_√w_wôh_íåy
();

11 
gtk_combo_box_ãxt_≠≥nd_ãxt
(
GtkComboBoxText
 *
combo_box
, c⁄° 
gch¨
 *
ãxt
);

12 
gtk_combo_box_ãxt_ö£π_ãxt
(
GtkComboBoxText
 *
combo_box
, 
göt
 
posôi⁄
, c⁄° 
gch¨
 *
ãxt
);

13 
gtk_combo_box_ãxt_¥ïíd_ãxt
(
GtkComboBoxText
 *
combo_box
, c⁄° 
gch¨
 *
ãxt
);

14 
gtk_combo_box_ãxt_ªmove
(
GtkComboBoxText
 *
combo_box
, 
göt
 
posôi⁄
);

15 
gch¨
 *
gtk_combo_box_ãxt_gë_a˘ive_ãxt
(
GtkComboBoxText
 *
combo_box
);

17 
	#GTK_COMBO_BOX_TEXT
 
GTK_COMBO_BOX


	)

20 #i‡
GTK_MAJOR_VERSION
 <2 && 
GTK_MINOR_VERSION
 < 14

21 
ölöe
 
GtkWidgë
 *
	$gtk_dülog_gë_c⁄ã¡_¨ó
(
GtkDülog
 *
dülog
)

23  
dülog
->
vbox
;

24 
	}
}

25 
ölöe
 
GdkWödow
 *
	$gtk_widgë_gë_wödow
(
GtkWidgë
 *
w
)

27  
w
->
wödow
;

28 
	}
}

31 #i‡
GTK_MAJOR_VERSION
 < 3

32 
guöt
 
gtk_widgë_gë_Æloˇãd_width
(
GtkWidgë
 *
w
);

33 
guöt
 
gtk_widgë_gë_Æloˇãd_height
(
GtkWidgë
 *
w
);

36 #i‡
GTK_MAJOR_VERSION
 == 3

37 
	#GFIO_DRAW_EVENT
 "døw"

	)

38 #ñi‡
GTK_MAJOR_VERSION
 == 2

39 
	#GFIO_DRAW_EVENT
 "expo£_evít"

	)

42 #i‡
GTK_MAJOR_VERSION
 <2 && 
GTK_MINOR_VERSION
 < 18

43 
gtk_widgë_£t_ˇn_focus
(
GtkWidgë
 *
widgë
, 
gboﬁón
 
ˇn_focus
);

	@gerror.c

1 
	~<loˇÀ.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<°d¨g.h
>

6 
	~<gtk/gtk.h
>

8 
	~"gfio.h
"

9 
	~"gîr‹.h
"

11 
	$⁄_öfo_b¨_ª•⁄£
(
GtkWidgë
 *
widgë
, 
göt
 
ª•⁄£
,

12 
gpoöãr
 
d©a
)

14 
gui
 *
ui
 = (guò*Ë
d©a
;

16 i‡(
ª•⁄£
 =
GTK_RESPONSE_OK
) {

17 
	`gtk_widgë_de°roy
(
widgë
);

18 
ui
->
îr‹_öfo_b¨
 = 
NULL
;

20 
	}
}

22 
	$ªp‹t_îr‹
(
gui_íåy
 *
ge
, 
GEº‹
 *
îr‹
)

24 
gui
 *
ui
 = 
ge
->ui;

26 i‡(
ui
->
îr‹_öfo_b¨
 =
NULL
) {

27 
GtkWidgë
 *
c⁄èöî
;

29 
ui
->
îr‹_öfo_b¨
 = 
	`gtk_öfo_b¨_√w_wôh_buâ⁄s
(
GTK_STOCK_OK
,

30 
GTK_RESPONSE_OK
, 
NULL
);

31 
	`g_sig«l_c⁄√˘
(
ui
->
îr‹_öfo_b¨
, "ª•⁄£", 
	`G_CALLBACK
(
⁄_öfo_b¨_ª•⁄£
), ui);

32 
	`gtk_öfo_b¨_£t_mesßge_ty≥
(
	`GTK_INFO_BAR
(
ui
->
îr‹_öfo_b¨
),

33 
GTK_MESSAGE_ERROR
);

35 
ui
->
îr‹_œbñ
 = 
	`gtk_œbñ_√w
(
îr‹
->
mesßge
);

36 
c⁄èöî
 = 
	`gtk_öfo_b¨_gë_c⁄ã¡_¨ó
(
	`GTK_INFO_BAR
(
ui
->
îr‹_öfo_b¨
));

37 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
c⁄èöî
), 
ui
->
îr‹_œbñ
);

39 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
ui
->
vbox
), ui->
îr‹_öfo_b¨
, 
FALSE
, FALSE, 0);

40 
	`gtk_widgë_show_Æl
(
ui
->
vbox
);

42 
buf„r
[256];

43 
	`¢¥ötf
(
buf„r
, (buffer), "FailedÅo open file.");

44 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
ui
->
îr‹_œbñ
), 
buf„r
);

46 
	}
}

48 
	$gfio_ªp‹t_îr‹
(
gui_íåy
 *
ge
, c⁄° *
f‹m©
, ...)

50 
va_li°
 
¨gs
;

51 
GEº‹
 *
îr‹
;

53 
	`va_°¨t
(
¨gs
, 
f‹m©
);

54 
îr‹
 = 
	`g_îr‹_√w_vÆi°
(
	`g_qu¨k_‰om_°rög
("fio"), 1, 
f‹m©
, 
¨gs
);

55 
	`va_íd
(
¨gs
);

57 
	`ªp‹t_îr‹
(
ge
, 
îr‹
);

58 
	`g_îr‹_‰ì
(
îr‹
);

59 
	}
}

61 
	$gfio_ªp‹t_öfo
(
gui
 *
ui
, c⁄° *
tôÀ
, c⁄° *
mesßge
)

63 
GtkWidgë
 *
dülog
, *
c⁄ã¡
, *
œbñ
;

65 
dülog
 = 
	`gtk_dülog_√w_wôh_buâ⁄s
(
tôÀ
, 
	`GTK_WINDOW
(
ui
->
wödow
),

66 
GTK_DIALOG_MODAL
 | 
GTK_DIALOG_DESTROY_WITH_PARENT
,

67 
GTK_STOCK_OK
, 
GTK_RESPONSE_OK
, 
NULL
);

69 
c⁄ã¡
 = 
	`gtk_dülog_gë_c⁄ã¡_¨ó
(
	`GTK_DIALOG
(
dülog
));

70 
œbñ
 = 
	`gtk_œbñ_√w
(
mesßge
);

71 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
c⁄ã¡
), 
œbñ
);

72 
	`gtk_widgë_show_Æl
(
dülog
);

73 
	`gtk_dülog_£t_deÁu…_ª•⁄£
(
	`GTK_DIALOG
(
dülog
), 
GTK_RESPONSE_ACCEPT
);

74 
	`gtk_dülog_run
(
	`GTK_DIALOG
(
dülog
));

75 
	`gtk_widgë_de°roy
(
dülog
);

76 
	}
}

	@gerror.h

1 #i‚de‡
GFIO_ERROR_H


2 
	#GFIO_ERROR_H


	)

4 
gfio_ªp‹t_îr‹
(
gui_íåy
 *
ge
, c⁄° *
f‹m©
, ...);

5 
gfio_ªp‹t_öfo
(
gui
 *
ui
, c⁄° *
tôÀ
, c⁄° *
mesßge
);

	@gettime-thread.c

1 
	~<sys/time.h
>

2 
	~<time.h
>

4 
	~"fio.h
"

5 
	~"lib/£qlock.h
"

6 
	~"smÆloc.h
"

8 
fio_ts
 *
	gfio_ts
;

9 
	gfio_gtod_ofÊﬂd
 = 0;

10 
±hªad_t
 
	ggtod_thªad
;

11 
os_˝u_mask_t
 
	gfio_gtod_˝umask
;

13 
	$fio_gtod_öô
()

15 i‡(
fio_ts
)

18 
fio_ts
 = 
	`smÆloc
((*fio_ts));

19 
	}
}

21 
	$fio_gtod_upd©e
()

23 
timevÆ
 
__tv
;

25 i‡(!
fio_ts
)

28 
	`gëtimeofday
(&
__tv
, 
NULL
);

30 
	`wrôe_£qlock_begö
(&
fio_ts
->
£qlock
);

31 
fio_ts
->
ts
.
tv_£c
 = 
__tv
.tv_sec;

32 
fio_ts
->
ts
.
tv_n£c
 = 
__tv
.
tv_u£c
 * 1000;

33 
	`wrôe_£qlock_íd
(&
fio_ts
->
£qlock
);

34 
	}
}

36 
	sgtod_˝u_d©a
 {

37 
fio_£m
 *
	m£m
;

38 
	m˝u
;

41 *
	$gtod_thªad_maö
(*
d©a
)

43 
fio_£m
 *
£m
 = 
d©a
;

44 
ªt
;

46 
ªt
 = 
	`fio_£èfföôy
(
	`gëtid
(), 
fio_gtod_˝umask
);

48 
	`fio_£m_up
(
£m
);

50 i‡(
ªt
 == -1) {

51 
	`log_îr
("gtod: setaffinity failed\n");

52  
NULL
;

61 
ƒ_£gmíts
) {

62 
	`fio_gtod_upd©e
();

63 
n›
;

66  
NULL
;

67 
	}
}

69 
	$fio_°¨t_gtod_thªad
()

71 
fio_£m
 *
£m
;

72 
±hªad_©å_t
 
©å
;

73 
ªt
;

75 
£m
 = 
	`fio_£m_öô
(
FIO_SEM_LOCKED
);

76 i‡(!
£m
)

79 
	`±hªad_©å_öô
(&
©å
);

80 
	`±hªad_©å_£t°acksize
(&
©å
, 2 * 
PTHREAD_STACK_MIN
);

81 
ªt
 = 
	`±hªad_¸óã
(&
gtod_thªad
, &
©å
, 
gtod_thªad_maö
, 
£m
);

82 
	`±hªad_©å_de°roy
(&
©å
);

83 i‡(
ªt
) {

84 
	`log_îr
("C™'à¸óã gtodÅhªad: %s\n", 
	`°ªº‹
(
ªt
));

85 
îr
;

88 
ªt
 = 
	`±hªad_dëach
(
gtod_thªad
);

89 i‡(
ªt
) {

90 
	`log_îr
("C™'àdëach gtodÅhªad: %s\n", 
	`°ªº‹
(
ªt
));

91 
îr
;

94 
	`d¥öt
(
FD_MUTEX
, "wait on startup_sem\n");

95 
	`fio_£m_down
(
£m
);

96 
	`d¥öt
(
FD_MUTEX
, "done waiting on startup_sem\n");

97 
îr
:

98 
	`fio_£m_ªmove
(
£m
);

99  
ªt
;

100 
	}
}

102 
	$fio_gtod_£t_˝u
(
˝u
)

104 #ifde‡
FIO_HAVE_CPU_AFFINITY


105 
	`fio_˝u_£t
(&
fio_gtod_˝umask
, 
˝u
);

107 
	}
}

	@gettime.c

5 
	~<m©h.h
>

7 
	~"fio.h
"

8 
	~"os/os.h
"

10 #i‡
deföed
(
ARCH_HAVE_CPU_CLOCK
)

11 #i‚de‡
ARCH_CPU_CLOCK_CYCLES_PER_USEC


12 
	gcy˛es_≥r_m£c
;

13 
	gcy˛es_°¨t
;

14 
	g˛ock_mu…
;

15 
	gmax_cy˛es_mask
;

16 
	gn£cs_f‹_max_cy˛es
;

17 
	g˛ock_shi·
;

18 
	gmax_cy˛es_shi·
;

19 
	#MAX_CLOCK_SEC
 60*60

	)

21 #ifde‡
ARCH_CPU_CLOCK_WRAPS


22 
	gcy˛es_wøp
;

25 
boﬁ
 
	gtsc_ªlübÀ
 = 
Ál£
;

27 
	stv_vÆid
 {

28 
	mw¨√d
;

30 #ifde‡
ARCH_HAVE_CPU_CLOCK


31 #ifde‡
CONFIG_TLS_THREAD


32 
__thªad
 
tv_vÆid
 
	g°©ic_tv_vÆid
;

34 
±hªad_key_t
 
	gtv_és_key
;

38 
fio_cs
 
	gfio_˛ock_sour˚
 = 
FIO_PREFERRED_CLOCK_SOURCE
;

39 
	gfio_˛ock_sour˚_£t
 = 0;

40 
fio_cs
 
	gfio_˛ock_sour˚_öôed
 = 
CS_INVAL
;

42 #ifde‡
FIO_DEBUG_TIME


44 
	#HASH_BITS
 8

	)

45 
	#HASH_SIZE
 (1 << 
HASH_BITS
)

	)

47 
Êi°_hód
 
	ghash
[
HASH_SIZE
];

48 
	ggtod_öôed
;

50 
	sgtod_log
 {

51 
Êi°_hód
 
	mli°
;

52 *
	mˇŒî
;

53 
	mˇŒs
;

56 
gtod_log
 *
	$föd_hash
(*
ˇŒî
)

58 
h
 = 
	`hash_±r
(
ˇŒî
, 
HASH_BITS
);

59 
Êi°_hód
 *
íåy
;

61 
	`Êi°_f‹_óch
(
íåy
, &
hash
[
h
]) {

62 
gtod_log
 *
log
 = 
	`Êi°_íåy
(
íåy
, gtod_log,

63 
li°
);

65 i‡(
log
->
ˇŒî
 == caller)

66  
log
;

69  
NULL
;

70 
	}
}

72 
	$öc_ˇŒî
(*
ˇŒî
)

74 
gtod_log
 *
log
 = 
	`föd_hash
(
ˇŒî
);

76 i‡(!
log
) {

77 
h
;

79 
log
 = 
	`mÆloc
((*log));

80 
	`INIT_FLIST_HEAD
(&
log
->
li°
);

81 
log
->
ˇŒî
 = caller;

82 
log
->
ˇŒs
 = 0;

84 
h
 = 
	`hash_±r
(
ˇŒî
, 
HASH_BITS
);

85 
	`Êi°_add_èû
(&
log
->
li°
, &
hash
[
h
]);

88 
log
->
ˇŒs
++;

89 
	}
}

91 
	$gtod_log_ˇŒî
(*
ˇŒî
)

93 i‡(
gtod_öôed
)

94 
	`öc_ˇŒî
(
ˇŒî
);

95 
	}
}

97 
fio_exô
 
	$fio_dump_gtod
()

99 
tŸÆ_ˇŒs
 = 0;

100 
i
;

102 
i
 = 0; i < 
HASH_SIZE
; i++) {

103 
Êi°_hód
 *
íåy
;

104 
gtod_log
 *
log
;

106 
	`Êi°_f‹_óch
(
íåy
, &
hash
[
i
]) {

107 
log
 = 
	`Êi°_íåy
(
íåy
, 
gtod_log
, 
li°
);

109 
	`¥ötf
("fun˘i⁄ %p, cÆl†%lu\n", 
log
->
ˇŒî
,

110 
log
->
ˇŒs
);

111 
tŸÆ_ˇŒs
 +
log
->
ˇŒs
;

115 
	`¥ötf
("TŸÆ %lu gëtimeofday\n", 
tŸÆ_ˇŒs
);

116 
	}
}

118 
fio_öô
 
	$gtod_öô
()

120 
i
;

122 
i
 = 0; i < 
HASH_SIZE
; i++)

123 
	`INIT_FLIST_HEAD
(&
hash
[
i
]);

125 
gtod_öôed
 = 1;

126 
	}
}

135 
	$fio_gë_m⁄o_time
(
time•ec
 *
ts
)

137 
ªt
;

139 #ifde‡
CONFIG_CLOCK_GETTIME


140 #i‡
	`deföed
(
CONFIG_CLOCK_MONOTONIC
)

141 
ªt
 = 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, 
ts
);

143 
ªt
 = 
	`˛ock_gëtime
(
CLOCK_REALTIME
, 
ts
);

146 
timevÆ
 
tv
;

148 
ªt
 = 
	`gëtimeofday
(&
tv
, 
NULL
);

149 i‡(
ªt
 == 0) {

150 
ts
->
tv_£c
 = 
tv
.tv_sec;

151 
ts
->
tv_n£c
 = 
tv
.
tv_u£c
 * 1000;

154 
	`as£π
(
ªt
 <= 0);

155  
ªt
;

156 
	}
}

158 
	$__fio_gëtime
(
time•ec
 *
ç
)

160 
fio_˛ock_sour˚
) {

161 #ifde‡
CONFIG_GETTIMEOFDAY


162 
CS_GTOD
: {

163 
timevÆ
 
tv
;

164 
	`gëtimeofday
(&
tv
, 
NULL
);

166 
ç
->
tv_£c
 = 
tv
.tv_sec;

167 
ç
->
tv_n£c
 = 
tv
.
tv_u£c
 * 1000;

171 #ifde‡
CONFIG_CLOCK_GETTIME


172 
CS_CGETTIME
: {

173 i‡(
	`fio_gë_m⁄o_time
(
ç
) < 0) {

174 
	`log_îr
("fio: fio_get_mono_time() fails\n");

175 
	`as£π
(0);

180 #ifde‡
ARCH_HAVE_CPU_CLOCK


181 
CS_CPUCLOCK
: {

182 
uöt64_t
 
n£cs
, 
t
, 
mu…ùÀs
;

183 
tv_vÆid
 *
tv
;

185 #ifde‡
CONFIG_TLS_THREAD


186 
tv
 = &
°©ic_tv_vÆid
;

188 
tv
 = 
	`±hªad_gë•ecific
(
tv_és_key
);

191 
t
 = 
	`gë_˝u_˛ock
();

192 #ifde‡
ARCH_CPU_CLOCK_WRAPS


193 i‡(
t
 < 
cy˛es_°¨t
 && !
cy˛es_wøp
)

194 
cy˛es_wøp
 = 1;

195 i‡(
cy˛es_wøp
 && 
t
 >
cy˛es_°¨t
 && !
tv
->
w¨√d
) {

196 
	`log_îr
("fio: double CPU clock wrap\n");

197 
tv
->
w¨√d
 = 1;

200 #ifde‡
ARCH_CPU_CLOCK_CYCLES_PER_USEC


201 
n£cs
 = 
t
 / 
ARCH_CPU_CLOCK_CYCLES_PER_USEC
 * 1000;

203 
t
 -
cy˛es_°¨t
;

204 
mu…ùÀs
 = 
t
 >> 
max_cy˛es_shi·
;

205 
n£cs
 = 
mu…ùÀs
 * 
n£cs_f‹_max_cy˛es
;

206 
n£cs
 +((
t
 & 
max_cy˛es_mask
Ë* 
˛ock_mu…
Ë>> 
˛ock_shi·
;

208 
ç
->
tv_£c
 = 
n£cs
 / 1000000000ULL;

209 
ç
->
tv_n£c
 = 
n£cs
 % 1000000000ULL;

214 
	`log_îr
("fio: invÆid clock sour˚ %d\n", 
fio_˛ock_sour˚
);

217 
	}
}

219 #ifde‡
FIO_DEBUG_TIME


220 
	$fio_gëtime
(
time•ec
 *
ç
, *
ˇŒî
)

222 
	$fio_gëtime
(
time•ec
 *
ç
, 
fio_unu£d
 *
ˇŒî
)

225 #ifde‡
FIO_DEBUG_TIME


226 i‡(!
ˇŒî
)

227 
ˇŒî
 = 
	`__buûtö_ªtu∫_addªss
(0);

229 
	`gtod_log_ˇŒî
(
ˇŒî
);

231 i‡(
	`fio_u∆ikñy
(
	`fio_gëtime_ofÊﬂd
(
ç
)))

234 
	`__fio_gëtime
(
ç
);

235 
	}
}

237 #i‡
deföed
(
ARCH_HAVE_CPU_CLOCK
Ë&& !deföed(
ARCH_CPU_CLOCK_CYCLES_PER_USEC
)

238 
	$gë_cy˛es_≥r_m£c
()

240 
time•ec
 
s
, 
e
;

241 
uöt64_t
 
c_s
, 
c_e
;

242 
uöt64_t
 
ñ≠£d
;

244 
	`fio_gë_m⁄o_time
(&
s
);

246 
c_s
 = 
	`gë_˝u_˛ock
();

248 
	`fio_gë_m⁄o_time
(&
e
);

249 
c_e
 = 
	`gë_˝u_˛ock
();

251 
ñ≠£d
 = 
	`¡ime_sö˚
(&
s
, &
e
);

252 i‡(
ñ≠£d
 >= 1280000)

256  (
c_e
 - 
c_s
Ë* 1000000 / 
ñ≠£d
;

257 
	}
}

259 
	#NR_TIME_ITERS
 50

	)

261 
	$ˇlibøã_˝u_˛ock
()

263 
dñè
, 
món
, 
S
;

264 
uöt64_t
 
möc
, 
maxc
, 
avg
, 
cy˛es
[
NR_TIME_ITERS
];

265 
i
, 
ßm∂es
, 
s·
 = 0;

266 
tmp
, 
max_ticks
, 
max_mu…
;

268 
cy˛es
[0] = 
	`gë_cy˛es_≥r_m£c
();

269 
S
 = 
dñè
 = 
món
 = 0.0;

270 
i
 = 0; i < 
NR_TIME_ITERS
; i++) {

271 
cy˛es
[
i
] = 
	`gë_cy˛es_≥r_m£c
();

272 
dñè
 = 
cy˛es
[
i
] - 
món
;

273 i‡(
dñè
) {

274 
món
 +
dñè
 / (
i
 + 1.0);

275 
S
 +
dñè
 * (
cy˛es
[
i
] - 
món
);

283 i‡(!
cy˛es
[0] && !cy˛es[
NR_TIME_ITERS
 - 1])

286 
S
 = 
	`sqπ
(S / (
NR_TIME_ITERS
 - 1.0));

288 
möc
 = -1ULL;

289 
maxc
 = 
ßm∂es
 = 
avg
 = 0;

290 
i
 = 0; i < 
NR_TIME_ITERS
; i++) {

291 
this
 = 
cy˛es
[
i
];

293 
möc
 = 
	`mö
(
cy˛es
[
i
], minc);

294 
maxc
 = 
	`max
(
cy˛es
[
i
], maxc);

296 i‡((
	`fmax
(
this
, 
món
Ë- 
	`fmö
—his, món)Ë> 
S
)

298 
ßm∂es
++;

299 
avg
 +
this
;

302 
S
 /(Ë
NR_TIME_ITERS
;

304 
i
 = 0; i < 
NR_TIME_ITERS
; i++)

305 
	`d¥öt
(
FD_TIME
, "cy˛es[%d]=%Œu\n", 
i
, (Ë
cy˛es
[i]);

307 
avg
 /
ßm∂es
;

308 
cy˛es_≥r_m£c
 = 
avg
;

309 
	`d¥öt
(
FD_TIME
, "min=%llu, max=%llu, mean=%f, S=%f, N=%d\n",

310 (Ë
möc
,

311 (Ë
maxc
, 
món
, 
S
, 
NR_TIME_ITERS
);

312 
	`d¥öt
(
FD_TIME
, "åimmed món=%Œu, N=%d\n", (Ë
avg
, 
ßm∂es
);

314 
max_ticks
 = 
MAX_CLOCK_SEC
 * 
cy˛es_≥r_m£c
 * 1000ULL;

315 
max_mu…
 = 
ULLONG_MAX
 / 
max_ticks
;

316 
	`d¥öt
(
FD_TIME
, "max_ticks=%llu, __builtin_clzll=%d, "

317 "max_mu…=%Œu\n", 
max_ticks
,

318 
	`__buûtö_˛zŒ
(
max_ticks
), 
max_mu…
);

324 
tmp
 = 
max_mu…
 * 
cy˛es_≥r_m£c
 / 1000000;

325 
tmp
 > 1) {

326 
tmp
 >>= 1;

327 
s·
++;

328 
	`d¥öt
(
FD_TIME
, "tmp=%Œu, s·=%u\n", 
tmp
, 
s·
);

331 
˛ock_shi·
 = 
s·
;

332 
˛ock_mu…
 = (1ULL << 
s·
Ë* 1000000 / 
cy˛es_≥r_m£c
;

333 
	`d¥öt
(
FD_TIME
, "˛ock_shi·=%u, clock_mu…=%Œu\n", 
˛ock_shi·
,

334 
˛ock_mu…
);

340 
max_cy˛es_shi·
 = 
max_cy˛es_mask
 = 0;

341 
tmp
 = 
MAX_CLOCK_SEC
 * 1000ULL * 
cy˛es_≥r_m£c
;

342 
	`d¥öt
(
FD_TIME
, "tmp=%Œu, max_cy˛es_shi·=%u\n", 
tmp
,

343 
max_cy˛es_shi·
);

344 
tmp
 > 1) {

345 
tmp
 >>= 1;

346 
max_cy˛es_shi·
++;

347 
	`d¥öt
(
FD_TIME
, "tmp=%Œu, max_cy˛es_shi·=%u\n", 
tmp
, 
max_cy˛es_shi·
);

354 
n£cs_f‹_max_cy˛es
 = ((1ULL << 
max_cy˛es_shi·
Ë* 
˛ock_mu…
)

355 >> 
˛ock_shi·
;

358 
tmp
 = 0;Åm∞< 
max_cy˛es_shi·
;Åmp++)

359 
max_cy˛es_mask
 |1ULL << 
tmp
;

361 
	`d¥öt
(
FD_TIME
, "max_cycles_shift=%u, 2^max_cycles_shift=%llu, "

364 
max_cy˛es_shi·
, (1ULL << max_cycles_shift),

365 
n£cs_f‹_max_cy˛es
, 
max_cy˛es_mask
);

367 
cy˛es_°¨t
 = 
	`gë_˝u_˛ock
();

368 
	`d¥öt
(
FD_TIME
, "cy˛es_°¨t=%Œu\n", 
cy˛es_°¨t
);

370 
	}
}

372 
	$ˇlibøã_˝u_˛ock
()

374 #ifde‡
ARCH_CPU_CLOCK_CYCLES_PER_USEC


379 
	}
}

382 #i‡
deföed
(
ARCH_HAVE_CPU_CLOCK
Ë&& !deföed(
CONFIG_TLS_THREAD
)

383 
	$fio_loˇl_˛ock_öô
()

385 
tv_vÆid
 *
t
;

387 
t
 = 
	`ˇŒoc
(1, (*t));

388 i‡(
	`±hªad_£t•ecific
(
tv_és_key
, 
t
)) {

389 
	`log_îr
("fio: can't set TLS key\n");

390 
	`as£π
(0);

392 
	}
}

394 
	$kûl_tv_és_key
(*
d©a
)

396 
	`‰ì
(
d©a
);

397 
	}
}

399 
	$fio_loˇl_˛ock_öô
()

401 
	}
}

404 
	$fio_˛ock_öô
()

406 i‡(
fio_˛ock_sour˚
 =
fio_˛ock_sour˚_öôed
)

409 #i‡
	`deföed
(
ARCH_HAVE_CPU_CLOCK
Ë&& !deföed(
CONFIG_TLS_THREAD
)

410 i‡(
	`±hªad_key_¸óã
(&
tv_és_key
, 
kûl_tv_és_key
))

411 
	`log_îr
("fio: can't create TLS key\n");

414 
fio_˛ock_sour˚_öôed
 = 
fio_˛ock_sour˚
;

416 i‡(
	`ˇlibøã_˝u_˛ock
())

417 
tsc_ªlübÀ
 = 
Ál£
;

424 i‡(
tsc_ªlübÀ
) {

425 i‡(!
fio_˛ock_sour˚_£t
 && !
	`fio_m⁄Ÿ⁄ic_˛ockã°
(0))

426 
fio_˛ock_sour˚
 = 
CS_CPUCLOCK
;

427 } i‡(
fio_˛ock_sour˚
 =
CS_CPUCLOCK
)

428 
	`log_öfo
("fio: clocksource=cpu mayÇot beÑeliable\n");

429 
	`d¥öt
(
FD_TIME
, "gëtime: clocksour˚=%d\n", (Ë
fio_˛ock_sour˚
);

430 
	}
}

432 
uöt64_t
 
	$¡ime_sö˚
(c⁄° 
time•ec
 *
s
, c⁄° time•e¯*
e
)

434 
öt64_t
 
£c
, 
n£c
;

436 
£c
 = 
e
->
tv_£c
 - 
s
->tv_sec;

437 
n£c
 = 
e
->
tv_n£c
 - 
s
->tv_nsec;

438 i‡(
£c
 > 0 && 
n£c
 < 0) {

439 
£c
--;

440 
n£c
 += 1000000000LL;

446 i‡(
£c
 < 0 || (£¯=0 && 
n£c
 < 0))

449  
n£c
 + (
£c
 * 1000000000LL);

450 
	}
}

452 
uöt64_t
 
	$¡ime_sö˚_now
(c⁄° 
time•ec
 *
s
)

454 
time•ec
 
now
;

456 
	`fio_gëtime
(&
now
, 
NULL
);

457  
	`¡ime_sö˚
(
s
, &
now
);

458 
	}
}

460 
uöt64_t
 
	$utime_sö˚
(c⁄° 
time•ec
 *
s
, c⁄° time•e¯*
e
)

462 
öt64_t
 
£c
, 
u£c
;

464 
£c
 = 
e
->
tv_£c
 - 
s
->tv_sec;

465 
u£c
 = (
e
->
tv_n£c
 - 
s
->tv_nsec) / 1000;

466 i‡(
£c
 > 0 && 
u£c
 < 0) {

467 
£c
--;

468 
u£c
 += 1000000;

474 i‡(
£c
 < 0 || (£¯=0 && 
u£c
 < 0))

477  
u£c
 + (
£c
 * 1000000);

478 
	}
}

480 
uöt64_t
 
	$utime_sö˚_now
(c⁄° 
time•ec
 *
s
)

482 
time•ec
 
t
;

483 #ifde‡
FIO_DEBUG_TIME


484 *
p
 = 
	`__buûtö_ªtu∫_addªss
(0);

486 
	`fio_gëtime
(&
t
, 
p
);

488 
	`fio_gëtime
(&
t
, 
NULL
);

491  
	`utime_sö˚
(
s
, &
t
);

492 
	}
}

494 
uöt64_t
 
	$mtime_sö˚_tv
(c⁄° 
timevÆ
 *
s
, c⁄° timevÆ *
e
)

496 
öt64_t
 
£c
, 
u£c
;

498 
£c
 = 
e
->
tv_£c
 - 
s
->tv_sec;

499 
u£c
 = (
e
->
tv_u£c
 - 
s
->tv_usec);

500 i‡(
£c
 > 0 && 
u£c
 < 0) {

501 
£c
--;

502 
u£c
 += 1000000;

505 i‡(
£c
 < 0 || (£¯=0 && 
u£c
 < 0))

508 
£c
 *= 1000;

509 
u£c
 /= 1000;

510  
£c
 + 
u£c
;

511 
	}
}

513 
uöt64_t
 
	$mtime_sö˚_now
(c⁄° 
time•ec
 *
s
)

515 
time•ec
 
t
;

516 #ifde‡
FIO_DEBUG_TIME


517 *
p
 = 
	`__buûtö_ªtu∫_addªss
(0);

519 
	`fio_gëtime
(&
t
, 
p
);

521 
	`fio_gëtime
(&
t
, 
NULL
);

524  
	`mtime_sö˚
(
s
, &
t
);

525 
	}
}

532 
öt64_t
 
	$ªl_time_sö˚
(c⁄° 
time•ec
 *
s
, c⁄° time•e¯*
e
)

534 
öt64_t
 
£c
, 
n£c
;

536 
£c
 = 
e
->
tv_£c
 - 
s
->tv_sec;

537 
n£c
 = 
e
->
tv_n£c
 - 
s
->tv_nsec;

538 i‡(
n£c
 < 0) {

539 
£c
--;

540 
n£c
 += 1000ULL * 1000 * 1000;

542 
	`as£π
(0 <
n£c
 &&Çsec < 1000ULL * 1000 * 1000);

544  
£c
 * 1000 + 
n£c
 / (1000 * 1000);

545 
	}
}

551 
uöt64_t
 
	$mtime_sö˚
(c⁄° 
time•ec
 *
s
, c⁄° time•e¯*
e
)

553  
	`max
(
	`ªl_time_sö˚
(
s
, 
e
), (
öt64_t
)0);

554 
	}
}

556 
uöt64_t
 
	$time_sö˚_now
(c⁄° 
time•ec
 *
s
)

558  
	`mtime_sö˚_now
(
s
) / 1000;

559 
	}
}

561 #i‡
deföed
(
FIO_HAVE_CPU_AFFINITY
Ë&& deföed(
ARCH_HAVE_CPU_CLOCK
) && \

562 
deföed
(
CONFIG_SYNC_SYNC
Ë&& 
	$deföed
(
CONFIG_CMP_SWAP
)

564 
	#CLOCK_ENTRIES_DEBUG
 100000

	)

565 
	#CLOCK_ENTRIES_TEST
 1000

	)

567 
	s˛ock_íåy
 {

568 
uöt32_t
 
£q
;

569 
uöt32_t
 
˝u
;

570 
uöt64_t
 
tsc
;

573 
	s˛ock_thªad
 {

574 
±hªad_t
 
thªad
;

575 
˝u
;

576 
debug
;

577 
fio_£m
 
lock
;

578 
ƒ_íåõs
;

579 
uöt32_t
 *
£q
;

580 
˛ock_íåy
 *
íåõs
;

583 
ölöe
 
uöt32_t
 
	$©omic32_com∑ª_™d_sw≠
(
uöt32_t
 *
±r
, uöt32_à
ﬁd
,

584 
uöt32_t
 
√w
)

586  
	`__sync_vÆ_com∑ª_™d_sw≠
(
±r
, 
ﬁd
, 
√w
);

587 
	}
}

589 *
	$˛ock_thªad_‚
(*
d©a
)

591 
˛ock_thªad
 *
t
 = 
d©a
;

592 
˛ock_íåy
 *
c
;

593 
os_˝u_mask_t
 
˝u_mask
;

594 
fú°
;

595 
i
;

597 i‡(
	`fio_˝u£t_öô
(&
˝u_mask
)) {

598 
__îr
 = 
î∫o
;

600 
	`log_îr
("˛ock cpu£àöô faûed: %s\n", 
	`°ªº‹
(
__îr
));

601 
îr_out
;

604 
	`fio_˝u_£t
(&
˝u_mask
, 
t
->
˝u
);

606 i‡(
	`fio_£èfföôy
(
	`gëtid
(), 
˝u_mask
) == -1) {

607 
__îr
 = 
î∫o
;

609 
	`log_îr
("˛ock sëafföôy faûed: %s\n", 
	`°ªº‹
(
__îr
));

610 
îr
;

613 
	`fio_£m_down
(&
t
->
lock
);

615 
fú°
 = 
	`gë_˝u_˛ock
();

616 
c
 = &
t
->
íåõs
[0];

617 
i
 = 0; i < 
t
->
ƒ_íåõs
; i++, 
c
++) {

618 
uöt32_t
 
£q
;

619 
uöt64_t
 
tsc
;

621 
c
->
˝u
 = 
t
->cpu;

623 
£q
 = *
t
->seq;

624 i‡(
£q
 =
UINT_MAX
)

626 
	`__sync_synchr⁄ize
();

627 
tsc
 = 
	`gë_˝u_˛ock
();

628 } 
£q
 !
	`©omic32_com∑ª_™d_sw≠
(
t
->seq, seq, seq + 1));

630 i‡(
£q
 =
UINT_MAX
)

633 
c
->
£q
 = seq;

634 
c
->
tsc
 =Åsc;

637 i‡(
t
->
debug
) {

638 
˛ocks
;

640 
˛ocks
 = 
t
->
íåõs
[
i
 - 1].
tsc
 -Å->entries[0].tsc;

641 
	`log_öfo
("cs: cpu%3d: %Œu clock†£í, fú° %Œu\n", 
t
->
˝u
,

642 
˛ocks
, 
fú°
);

649 i‡(
i
 > 1 && !
t
->
íåõs
[ò- 1].
tsc
 && !t->entries[0].tsc)

650 
îr
;

652 
	`fio_˝u£t_exô
(&
˝u_mask
);

653  
NULL
;

654 
îr
:

655 
	`fio_˝u£t_exô
(&
˝u_mask
);

656 
îr_out
:

658 
	}
}

660 
	$˛ock_cmp
(c⁄° *
p1
, c⁄° *
p2
)

662 c⁄° 
˛ock_íåy
 *
c1
 = 
p1
;

663 c⁄° 
˛ock_íåy
 *
c2
 = 
p2
;

665 i‡(
c1
->
£q
 =
c2
->seq)

666 
	`log_îr
("cs: bug inátomic sequence!\n");

668  
c1
->
£q
 - 
c2
->seq;

669 
	}
}

671 
	$fio_m⁄Ÿ⁄ic_˛ockã°
(
debug
)

673 
˛ock_thªad
 *
˘hªads
;

674 
£í_˝us
, 
ƒ_˝us
 = 
	`˝us_⁄löe
();

675 
˛ock_íåy
 *
íåõs
;

676 
ƒ_íåõs
, 
ã¡rõs
, 
Áûed
 = 0;

677 
˛ock_íåy
 *
¥ev
, *
this
;

678 
uöt32_t
 
£q
 = 0;

679 
i
;

680 
os_˝u_mask_t
 
mask
;

682 #ifde‡
FIO_HAVE_GET_THREAD_AFFINITY


683 
	`fio_gë_thªad_afföôy
(
mask
);

685 
	`mem£t
(&
mask
, 0, (mask));

686 
i
 = 0; i < 
ƒ_˝us
; i++)

687 
	`fio_˝u_£t
(&
mask
, 
i
);

690 i‡(
debug
) {

691 
	`log_öfo
("cs:ÑñübÀ_tsc: %s\n", 
tsc_ªlübÀ
 ? "yes" : "no");

693 #ifde‡
FIO_INC_DEBUG


694 
fio_debug
 |1U << 
FD_TIME
;

696 
ƒ_íåõs
 = 
CLOCK_ENTRIES_DEBUG
;

698 
ƒ_íåõs
 = 
CLOCK_ENTRIES_TEST
;

700 
	`ˇlibøã_˝u_˛ock
();

702 i‡(
debug
) {

703 #ifde‡
FIO_INC_DEBUG


704 
fio_debug
 &~(1U << 
FD_TIME
);

708 
˘hªads
 = 
	`mÆloc
(
ƒ_˝us
 * (
˛ock_thªad
));

709 
ã¡rõs
 = 
ƒ_íåõs
 * 
ƒ_˝us
;

710 
íåõs
 = 
	`mÆloc
(
ã¡rõs
 * (
˛ock_íåy
));

712 i‡(
debug
)

713 
	`log_öfo
("cs: Te°ög %u CPUs\n", 
ƒ_˝us
);

715 
£í_˝us
 = 0;

716 
i
 = 0; i < 
ƒ_˝us
; i++) {

717 
˛ock_thªad
 *
t
 = &
˘hªads
[
i
];

719 i‡(!
	`fio_˝u_is£t
(&
mask
, 
i
))

721 
t
->
˝u
 = 
i
;

722 
t
->
debug
 = debug;

723 
t
->
£q
 = &seq;

724 
t
->
ƒ_íåõs
 =Çr_entries;

725 
t
->
íåõs
 = &íåõs[
£í_˝us
 * 
ƒ_íåõs
];

726 
	`__fio_£m_öô
(&
t
->
lock
, 
FIO_SEM_LOCKED
);

727 i‡(
	`±hªad_¸óã
(&
t
->
thªad
, 
NULL
, 
˛ock_thªad_‚
,Å)) {

728 
Áûed
++;

729 
ƒ_˝us
 = 
i
;

732 
£í_˝us
++;

735 
i
 = 0; i < 
ƒ_˝us
; i++) {

736 
˛ock_thªad
 *
t
 = &
˘hªads
[
i
];

738 i‡(!
	`fio_˝u_is£t
(&
mask
, 
i
))

740 
	`fio_£m_up
(&
t
->
lock
);

743 
i
 = 0; i < 
ƒ_˝us
; i++) {

744 
˛ock_thªad
 *
t
 = &
˘hªads
[
i
];

745 *
ªt
;

747 i‡(!
	`fio_˝u_is£t
(&
mask
, 
i
))

749 
	`±hªad_joö
(
t
->
thªad
, &
ªt
);

750 i‡(
ªt
)

751 
Áûed
++;

752 
	`__fio_£m_ªmove
(&
t
->
lock
);

754 
	`‰ì
(
˘hªads
);

756 i‡(
Áûed
) {

757 i‡(
debug
)

758 
	`log_îr
("Clocksour˚Åe°: %luÅhªad†Áûed\n", 
Áûed
);

759 
îr
;

762 
ã¡rõs
 = 
ƒ_íåõs
 * 
£í_˝us
;

763 
	`qs‹t
(
íåõs
, 
ã¡rõs
, (
˛ock_íåy
), 
˛ock_cmp
);

766 
¥ev
 = 
NULL
;

767 
Áûed
 = 
i
 = 0; i < 
ã¡rõs
; i++) {

768 
this
 = &
íåõs
[
i
];

770 i‡(!
i
) {

771 
¥ev
 = 
this
;

775 i‡(
¥ev
->
tsc
 > 
this
->tsc) {

776 
uöt64_t
 
diff
 = 
¥ev
->
tsc
 - 
this
->tsc;

778 i‡(!
debug
) {

779 
Áûed
++;

783 
	`log_öfo
("cs: CPU clock mismatch (diff=%llu):\n",

784 (Ë
diff
);

785 
	`log_öfo
("\àCPU%3u: TSC=%Œu, SEQ=%u\n", 
¥ev
->
˝u
, (Ë¥ev->
tsc
,Öªv->
£q
);

786 
	`log_öfo
("\àCPU%3u: TSC=%Œu, SEQ=%u\n", 
this
->
˝u
, (Ëthis->
tsc
,Åhis->
£q
);

787 
Áûed
++;

790 
¥ev
 = 
this
;

793 i‡(
debug
) {

794 i‡(
Áûed
)

795 
	`log_öfo
("cs: Faûed: %lu\n", 
Áûed
);

797 
	`log_öfo
("cs: Pass!\n");

799 
îr
:

800 
	`‰ì
(
íåõs
);

801  !!
Áûed
;

802 
	}
}

806 
	$fio_m⁄Ÿ⁄ic_˛ockã°
(
debug
)

808 i‡(
debug
)

809 
	`log_öfo
("cs: currentÖlatform doesÇot support CPU clocks\n");

811 
	}
}

	@gettime.h

1 #i‚de‡
FIO_GETTIME_H


2 
	#FIO_GETTIME_H


	)

4 
	~<sys/time.h
>

6 
	~"¨ch/¨ch.h
"

7 
	~"lib/£qlock.h
"

12 
	efio_cs
 {

13 
	mCS_GTOD
 = 1,

14 
	mCS_CGETTIME
,

15 
	mCS_CPUCLOCK
,

16 
	mCS_INVAL
,

19 
fio_gë_m⁄o_time
(
time•ec
 *);

20 
fio_gëtime
(
time•ec
 *, *);

21 
fio_gtod_öô
();

22 
fio_˛ock_öô
();

23 
fio_°¨t_gtod_thªad
();

24 
fio_m⁄Ÿ⁄ic_˛ockã°
(
debug
);

25 
fio_loˇl_˛ock_öô
();

27 
	sfio_ts
 {

28 
£qlock
 seqlock;

29 
time•ec
 
ts
;

30 } *
fio_ts
;

32 
ölöe
 
	$fio_gëtime_ofÊﬂd
(
time•ec
 *
ts
)

34 
£q
;

36 i‡(!
fio_ts
)

40 
£q
 = 
	`ªad_£qlock_begö
(&
fio_ts
->
£qlock
);

41 *
ts
 = 
fio_ts
->ts;

42 } 
	`ªad_£qlock_ªåy
(&
fio_ts
->
£qlock
, 
£q
));

45 
	}
}

47 
fio_gtod_£t_˝u
(
˝u
);

	@gfio.c

24 
	~<loˇÀ.h
>

25 
	~<°dlib.h
>

26 
	~<°rög.h
>

27 
	~<libgí.h
>

29 
	~<glib.h
>

30 
	~<ˇúo.h
>

31 
	~<gtk/gtk.h
>

33 
	~"fio.h
"

34 
	~"gfio.h
"

35 
	~"ghñ≥rs.h
"

36 
	~"g›ti⁄s.h
"

37 
	~"gîr‹.h
"

38 
	~"g˛õ¡.h
"

39 
	~"gøph.h
"

41 
gui
 
	gmaö_ui
;

43 
boﬁ
 
	ggfio_£rvî_ru¬ög
;

44 
	ggfio_gøph_limô
 = 100;

46 
GdkCﬁ‹
 
	ggfio_cﬁ‹_whôe
;

47 
GdkCﬁ‹
 
	ggfio_cﬁ‹_lightyñlow
;

48 c⁄° *
	ggfio_gøph_f⁄t
 = 
GRAPH_DEFAULT_FONT
;

50 (*
	t˛ickfun˘i⁄
)(
	tGtkWidgë
 *
	twidgë
, 
	tgpoöãr
 
	td©a
);

52 
	`c⁄√˘_˛icked
(
GtkWidgë
 *
widgë
, 
gpoöãr
 
d©a
);

53 
	`°¨t_job_˛icked
(
GtkWidgë
 *
widgë
, 
gpoöãr
 
d©a
);

54 
	`£nd_˛icked
(
GtkWidgë
 *
widgë
, 
gpoöãr
 
d©a
);

56 
	sbuâ⁄_•ec
 {

57 c⁄° *
buâ⁄ãxt
;

58 
˛ickfun˘i⁄
 
f
;

59 c⁄° *
toﬁtùãxt
[2];

60 c⁄° 
°¨t_£nsôive
;

61 } 
buâ⁄•e˛i°
[] = {

63 .
buâ⁄ãxt
 = "Connect",

64 .
f
 = 
c⁄√˘_˛icked
,

65 .
toﬁtùãxt
 = { "Disconnect from host", "ConnectÅo host" },

66 .
°¨t_£nsôive
 = 1,

69 .
buâ⁄ãxt
 = "Send",

70 .
f
 = 
£nd_˛icked
,

71 .
toﬁtùãxt
 = { "Síd job des¸ùti⁄Åÿho°", 
NULL
 },

72 .
°¨t_£nsôive
 = 0,

75 .
buâ⁄ãxt
 = "Start Job",

76 .
f
 = 
°¨t_job_˛icked
,

77 .
toﬁtùãxt
 = { "SèπÅhêcuºíàjob o¿thê£rvî", 
NULL
 },

78 .
°¨t_£nsôive
 = 0,

80 
	}
};

82 
	$£tup_i›s_gøph
(
gfio_gøphs
 *
gg
)

84 
gøph
 *
g
;

86 
g
 = 
	`gøph_√w
(
DRAWING_AREA_XDIM
 / 2.0, 
DRAWING_AREA_YDIM
, 
gfio_gøph_f⁄t
);

87 
	`gøph_tôÀ
(
g
, "IOPS (IOs/sec)");

88 
	`gøph_x_tôÀ
(
g
, "Time (secs)");

89 
gg
->
ªad_i›s
 = 
	`gøph_add_œbñ
(
g
, "Read IOPS");

90 
gg
->
wrôe_i›s
 = 
	`gøph_add_œbñ
(
g
, "Write IOPS");

91 
gg
->
åim_i›s
 = 
	`gøph_add_œbñ
(
g
, "Trim IOPS");

92 
	`gøph_£t_cﬁ‹
(
g
, 
gg
->
ªad_i›s
, 
GFIO_READ_R
, 
GFIO_READ_G
, 
GFIO_READ_B
);

93 
	`gøph_£t_cﬁ‹
(
g
, 
gg
->
wrôe_i›s
, 
GFIO_WRITE_R
, 
GFIO_WRITE_G
, 
GFIO_WRITE_B
);

94 
	`gøph_£t_cﬁ‹
(
g
, 
gg
->
åim_i›s
, 
GFIO_TRIM_R
, 
GFIO_TRIM_G
, 
GFIO_TRIM_B
);

95 
	`löe_gøph_£t_d©a_cou¡_limô
(
g
, 
gfio_gøph_limô
);

96 
	`gøph_add_exåa_•a˚
(
g
, 0.0, 0.0, 0.0, 0.0);

97 
	`gøph_£t_gøph_Æl_zî€s
(
g
, 0);

98 
gg
->
i›s_gøph
 = 
g
;

99 
	}
}

101 
	$£tup_b™dwidth_gøph
(
gfio_gøphs
 *
gg
)

103 
gøph
 *
g
;

105 
g
 = 
	`gøph_√w
(
DRAWING_AREA_XDIM
 / 2.0, 
DRAWING_AREA_YDIM
, 
gfio_gøph_f⁄t
);

106 
	`gøph_tôÀ
(
g
, "Bandwidth (bytes/sec)");

107 
	`gøph_x_tôÀ
(
g
, "Time (secs)");

108 
gg
->
ªad_bw
 = 
	`gøph_add_œbñ
(
g
, "Read Bandwidth");

109 
gg
->
wrôe_bw
 = 
	`gøph_add_œbñ
(
g
, "Write Bandwidth");

110 
gg
->
åim_bw
 = 
	`gøph_add_œbñ
(
g
, "Trim Bandwidth");

111 
	`gøph_£t_cﬁ‹
(
g
, 
gg
->
ªad_bw
, 
GFIO_READ_R
, 
GFIO_READ_G
, 
GFIO_READ_B
);

112 
	`gøph_£t_cﬁ‹
(
g
, 
gg
->
wrôe_bw
, 
GFIO_WRITE_R
, 
GFIO_WRITE_G
, 
GFIO_WRITE_B
);

113 
	`gøph_£t_cﬁ‹
(
g
, 
gg
->
åim_bw
, 
GFIO_TRIM_R
, 
GFIO_TRIM_G
, 
GFIO_TRIM_B
);

114 
	`gøph_£t_ba£_off£t
(
g
, 1);

115 
	`löe_gøph_£t_d©a_cou¡_limô
(
g
, 100);

116 
	`gøph_add_exåa_•a˚
(
g
, 0.0, 0.0, 0.0, 0.0);

117 
	`gøph_£t_gøph_Æl_zî€s
(
g
, 0);

118 
gg
->
b™dwidth_gøph
 = 
g
;

119 
	}
}

121 
	$£tup_gøphs
(
gfio_gøphs
 *
g
)

123 
	`£tup_i›s_gøph
(
g
);

124 
	`£tup_b™dwidth_gøph
(
g
);

125 
	}
}

127 
	$˛ór_ge_ui_öfo
(
gui_íåy
 *
ge
)

129 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
ge
->
¥obe
.
ho°«me
), "");

130 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
ge
->
¥obe
.
os
), "");

131 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
ge
->
¥obe
.
¨ch
), "");

132 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
ge
->
¥obe
.
fio_vî
), "");

135 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
«me
), "");

137 
	`mu…ôext_upd©e_íåy
(&
ge
->
ëa
.
iŸy≥
, 0, "");

138 
	`mu…ôext_upd©e_íåy
(&
ge
->
ëa
.
bs
, 0, "");

139 
	`mu…ôext_upd©e_íåy
(&
ge
->
ëa
.
i€ngöe
, 0, "");

140 
	`mu…ôext_upd©e_íåy
(&
ge
->
ëa
.
iodïth
, 0, "");

141 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
jobs
), "");

142 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
fûes
), "");

143 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
ªad_bw
), "");

144 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
ªad_i›s
), "");

145 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
wrôe_bw
), "");

146 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
wrôe_i›s
), "");

147 
	}
}

149 
	$£t_míu_íåy_ãxt
(
gui
 *
ui
, c⁄° *
∑th
,

150 c⁄° *
ãxt
)

152 
GtkWidgë
 *
w
;

154 
w
 = 
	`gtk_ui_m™agî_gë_widgë
(
ui
->
uim™agî
, 
∑th
);

155 i‡(
w
)

156 
	`gtk_míu_ôem_£t_œbñ
(
	`GTK_MENU_ITEM
(
w
), 
ãxt
);

158 
	`Ârötf
(
°dîr
, "gfio: c™'àfödÖ©h %s\n", 
∑th
);

159 
	}
}

162 
	$£t_míu_íåy_visibÀ
(
gui
 *
ui
, c⁄° *
∑th
, 
show
)

164 
GtkWidgë
 *
w
;

166 
w
 = 
	`gtk_ui_m™agî_gë_widgë
(
ui
->
uim™agî
, 
∑th
);

167 i‡(
w
)

168 
	`gtk_widgë_£t_£nsôive
(
w
, 
show
);

170 
	`Ârötf
(
°dîr
, "gfio: c™'àfödÖ©h %s\n", 
∑th
);

171 
	}
}

173 
	$£t_job_míu_visibÀ
(
gui
 *
ui
, 
visibÀ
)

175 
	`£t_míu_íåy_visibÀ
(
ui
, "/MaöMíu/JobMíu", 
visibÀ
);

176 
	}
}

178 
	$£t_võw_ªsu…s_visibÀ
(
gui
 *
ui
, 
visibÀ
)

180 
	`£t_míu_íåy_visibÀ
(
ui
, "/MaöMíu/VõwMíu/Resu…s", 
visibÀ
);

181 
	}
}

183 c⁄° *
	$gë_buâ⁄_toﬁtù
(
buâ⁄_•ec
 *
s
, 
£nsôive
)

185 i‡(
s
->
toﬁtùãxt
[
£nsôive
])

186  
s
->
toﬁtùãxt
[
£nsôive
];

188  
s
->
toﬁtùãxt
[0];

189 
	}
}

191 
GtkWidgë
 *
	$add_buâ⁄
(
GtkWidgë
 *
buâ⁄box
,

192 
buâ⁄_•ec
 *
buâ⁄•ec
, 
gpoöãr
 
d©a
)

194 
GtkWidgë
 *
buâ⁄
 = 
	`gtk_buâ⁄_√w_wôh_œbñ
(
buâ⁄•ec
->
buâ⁄ãxt
);

195 
gboﬁón
 
£ns
 = 
buâ⁄•ec
->
°¨t_£nsôive
;

197 
	`g_sig«l_c⁄√˘
(
buâ⁄
, "˛icked", 
	`G_CALLBACK
(
buâ⁄•ec
->
f
), 
d©a
);

198 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
buâ⁄box
), 
buâ⁄
, 
FALSE
, FALSE, 3);

200 
£ns
 = 
buâ⁄•ec
->
°¨t_£nsôive
;

201 
	`gtk_widgë_£t_toﬁtù_ãxt
(
buâ⁄
, 
	`gë_buâ⁄_toﬁtù
(
buâ⁄•ec
, 
£ns
));

202 
	`gtk_widgë_£t_£nsôive
(
buâ⁄
, 
£ns
);

204  
buâ⁄
;

205 
	}
}

207 
	$add_buâ⁄s
(
gui_íåy
 *
ge
, 
buâ⁄_•ec
 *
buâ⁄li°
,

208 
nbuâ⁄s
)

210 
i
;

212 
i
 = 0; i < 
nbuâ⁄s
; i++)

213 
ge
->
buâ⁄
[
i
] = 
	`add_buâ⁄
(ge->
buâ⁄box
, &
buâ⁄li°
[i], ge);

214 
	}
}

220 
	$upd©e_buâ⁄_°©es
(
gui
 *
ui
, 
gui_íåy
 *
ge
)

222 
c⁄√˘_°©e
, 
£nd_°©e
, 
°¨t_°©e
, 
edô_°©e
;

223 c⁄° *
c⁄√˘_°r
 = 
NULL
;

225 
ge
->
°©e
) {

227 
	`gfio_ªp‹t_îr‹
(
ge
, "Bad clõ¡ sèã: %u\n", ge->
°©e
);

229 
GE_STATE_NEW
:

230 
c⁄√˘_°©e
 = 1;

231 
edô_°©e
 = 1;

232 
c⁄√˘_°r
 = "Connect";

233 
£nd_°©e
 = 0;

234 
°¨t_°©e
 = 0;

236 
GE_STATE_CONNECTED
:

237 
c⁄√˘_°©e
 = 1;

238 
edô_°©e
 = 1;

239 
c⁄√˘_°r
 = "Disconnect";

240 
£nd_°©e
 = 1;

241 
°¨t_°©e
 = 0;

243 
GE_STATE_JOB_SENT
:

244 
c⁄√˘_°©e
 = 1;

245 
edô_°©e
 = 1;

246 
c⁄√˘_°r
 = "Disconnect";

247 
£nd_°©e
 = 0;

248 
°¨t_°©e
 = 1;

250 
GE_STATE_JOB_STARTED
:

251 
c⁄√˘_°©e
 = 1;

252 
edô_°©e
 = 1;

253 
c⁄√˘_°r
 = "Disconnect";

254 
£nd_°©e
 = 0;

255 
°¨t_°©e
 = 1;

257 
GE_STATE_JOB_RUNNING
:

258 
c⁄√˘_°©e
 = 1;

259 
edô_°©e
 = 0;

260 
c⁄√˘_°r
 = "Disconnect";

261 
£nd_°©e
 = 0;

262 
°¨t_°©e
 = 0;

264 
GE_STATE_JOB_DONE
:

265 
c⁄√˘_°©e
 = 1;

266 
edô_°©e
 = 0;

267 
c⁄√˘_°r
 = "Connect";

268 
£nd_°©e
 = 0;

269 
°¨t_°©e
 = 0;

273 
	`gtk_widgë_£t_£nsôive
(
ge
->
buâ⁄
[
GFIO_BUTTON_CONNECT
], 
c⁄√˘_°©e
);

274 
	`gtk_widgë_£t_£nsôive
(
ge
->
buâ⁄
[
GFIO_BUTTON_SEND
], 
£nd_°©e
);

275 
	`gtk_widgë_£t_£nsôive
(
ge
->
buâ⁄
[
GFIO_BUTTON_START
], 
°¨t_°©e
);

276 
	`gtk_buâ⁄_£t_œbñ
(
	`GTK_BUTTON
(
ge
->
buâ⁄
[
GFIO_BUTTON_CONNECT
]), 
c⁄√˘_°r
);

277 
	`gtk_widgë_£t_toﬁtù_ãxt
(
ge
->
buâ⁄
[
GFIO_BUTTON_CONNECT
], 
	`gë_buâ⁄_toﬁtù
(&
buâ⁄•e˛i°
[GFIO_BUTTON_CONNECT], 
c⁄√˘_°©e
));

279 
	`£t_míu_íåy_visibÀ
(
ui
, "/MaöMíu/JobMíu/C⁄√˘", 
c⁄√˘_°©e
);

280 
	`£t_míu_íåy_ãxt
(
ui
, "/MaöMíu/JobMíu/C⁄√˘", 
c⁄√˘_°r
);

282 
	`£t_míu_íåy_visibÀ
(
ui
, "/MaöMíu/JobMíu/Edô job", 
edô_°©e
);

283 
	`£t_míu_íåy_visibÀ
(
ui
, "/MaöMíu/JobMíu/Síd job", 
£nd_°©e
);

284 
	`£t_míu_íåy_visibÀ
(
ui
, "/MaöMíu/JobMíu/Sèπ job", 
°¨t_°©e
);

286 i‡(
ge
->
˛õ¡
 && ge->˛õ¡->
ƒ_ªsu…s
)

287 
	`£t_võw_ªsu…s_visibÀ
(
ui
, 1);

289 
	`£t_võw_ªsu…s_visibÀ
(
ui
, 0);

290 
	}
}

292 
	$gfio_£t_°©e
(
gui_íåy
 *
ge
, 
°©e
)

294 
ge
->
°©e
 = state;

295 
	`upd©e_buâ⁄_°©es
(
ge
->
ui
, ge);

296 
	}
}

298 
	$gfio_ui_£tup_log
(
gui
 *
ui
)

300 
GtkTªeSñe˘i⁄
 *
£À˘i⁄
;

301 
GtkLi°St‹e
 *
modñ
;

302 
GtkWidgë
 *
åì_võw
;

304 
modñ
 = 
	`gtk_li°_°‹e_√w
(4, 
G_TYPE_STRING
, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_STRING);

306 
åì_võw
 = 
	`gtk_åì_võw_√w_wôh_modñ
(
	`GTK_TREE_MODEL
(
modñ
));

307 
	`gtk_widgë_£t_ˇn_focus
(
åì_võw
, 
FALSE
);

309 
£À˘i⁄
 = 
	`gtk_åì_võw_gë_£À˘i⁄
(
	`GTK_TREE_VIEW
(
åì_võw
));

310 
	`gtk_åì_£À˘i⁄_£t_mode
(
	`GTK_TREE_SELECTION
(
£À˘i⁄
), 
GTK_SELECTION_BROWSE
);

311 
	`g_obje˘_£t
(
	`G_OBJECT
(
åì_võw
), "hódîs-visibÀ", 
TRUE
,

312 "íabÀ-grid-löes", 
GTK_TREE_VIEW_GRID_LINES_BOTH
, 
NULL
);

314 
	`åì_võw_cﬁumn
(
åì_võw
, 0, "Time", 
ALIGN_RIGHT
 | 
UNSORTABLE
);

315 
	`åì_võw_cﬁumn
(
åì_võw
, 1, "Ho°", 
ALIGN_RIGHT
 | 
UNSORTABLE
);

316 
	`åì_võw_cﬁumn
(
åì_võw
, 2, "Levñ", 
ALIGN_RIGHT
 | 
UNSORTABLE
);

317 
	`åì_võw_cﬁumn
(
åì_võw
, 3, "Text", 
ALIGN_LEFT
 | 
UNSORTABLE
);

319 
ui
->
log_modñ
 = 
modñ
;

320 
ui
->
log_åì
 = 
åì_võw
;

321 
	}
}

323 
göt
 
	$⁄_c⁄fig_døwög_¨ó
(
GtkWidgë
 *
w
, 
GdkEvítC⁄figuª
 *
evít
,

324 
gpoöãr
 
d©a
)

326 
guöt
 
width
 = 
	`gtk_widgë_gë_Æloˇãd_width
(
w
);

327 
guöt
 
height
 = 
	`gtk_widgë_gë_Æloˇãd_height
(
w
);

328 
gfio_gøphs
 *
g
 = 
d©a
;

330 
	`gøph_£t_size
(
g
->
i›s_gøph
, 
width
 / 2.0, 
height
);

331 
	`gøph_£t_posôi⁄
(
g
->
i›s_gøph
, 
width
 / 2.0, 0.0);

332 
	`gøph_£t_size
(
g
->
b™dwidth_gøph
, 
width
 / 2.0, 
height
);

333 
	`gøph_£t_posôi⁄
(
g
->
b™dwidth_gøph
, 0, 0);

334  
TRUE
;

335 
	}
}

337 
	$døw_gøph
(
gøph
 *
g
, 
ˇúo_t
 *
¸
)

339 
	`löe_gøph_døw
(
g
, 
¸
);

340 
	`ˇúo_°roke
(
¸
);

341 
	}
}

343 
gboﬁón
 
	$gøph_toﬁtù
(
GtkWidgë
 *
w
, 
göt
 
x
, göà
y
,

344 
gboﬁón
 
keybﬂrd_mode
, 
GtkToﬁtù
 *
toﬁtù
,

345 
gpoöãr
 
d©a
)

347 
gfio_gøphs
 *
g
 = 
d©a
;

348 c⁄° *
ãxt
 = 
NULL
;

350 i‡(
	`gøph_c⁄èös_xy
(
g
->
i›s_gøph
, 
x
, 
y
))

351 
ãxt
 = 
	`gøph_föd_toﬁtù
(
g
->
i›s_gøph
, 
x
, 
y
);

352 i‡(
	`gøph_c⁄èös_xy
(
g
->
b™dwidth_gøph
, 
x
, 
y
))

353 
ãxt
 = 
	`gøph_föd_toﬁtù
(
g
->
b™dwidth_gøph
, 
x
, 
y
);

355 i‡(
ãxt
) {

356 
	`gtk_toﬁtù_£t_ãxt
(
toﬁtù
, 
ãxt
);

357  
TRUE
;

360  
FALSE
;

361 
	}
}

363 
	$⁄_expo£_døwög_¨ó
(
GtkWidgë
 *
w
, 
GdkEvít
 *
evít
, 
gpoöãr
 
p
)

365 
gfio_gøphs
 *
g
 = 
p
;

366 
ˇúo_t
 *
¸
;

368 
¸
 = 
	`gdk_ˇúo_¸óã
(
	`gtk_widgë_gë_wödow
(
w
));

370 i‡(
	`gøph_has_toﬁtùs
(
g
->
i›s_gøph
) ||

371 
	`gøph_has_toﬁtùs
(
g
->
b™dwidth_gøph
)) {

372 
	`g_obje˘_£t
(
w
, "has-toﬁtù", 
TRUE
, 
NULL
);

373 
	`g_sig«l_c⁄√˘
(
w
, "quîy-toﬁtù", 
	`G_CALLBACK
(
gøph_toﬁtù
), 
g
);

376 
	`ˇúo_£t_sour˚_rgb
(
¸
, 0, 0, 0);

377 
	`døw_gøph
(
g
->
i›s_gøph
, 
¸
);

378 
	`døw_gøph
(
g
->
b™dwidth_gøph
, 
¸
);

379 
	`ˇúo_de°roy
(
¸
);

381  
FALSE
;

382 
	}
}

387 
	$ge_de°roy
(
gui_íåy
 *
ge
)

389 
gfio_˛õ¡
 *
gc
 = 
ge
->
˛õ¡
;

391 i‡(
gc
) {

392 i‡(
gc
->
˛õ¡
) {

393 i‡(
ge
->
°©e
 >
GE_STATE_CONNECTED
)

394 
	`fio_˛õ¡_ãrmö©e
(
gc
->
˛õ¡
);

396 
	`fio_put_˛õ¡
(
gc
->
˛õ¡
);

398 
	`‰ì
(
gc
);

401 
	`g_hash_èbÀ_ªmove
(
ge
->
ui
->
ge_hash
, &ge->
∑ge_num
);

403 
	`‰ì
(
ge
->
job_fûe
);

404 
	`‰ì
(
ge
->
ho°
);

405 
	`‰ì
(
ge
);

406 
	}
}

408 
	$ge_widgë_de°roy
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

410 
gui_íåy
 *
ge
 = (gui_íåy *Ë
d©a
;

412 
	`ge_de°roy
(
ge
);

413 
	}
}

415 
	$gfio_quô
(
gui
 *
ui
)

417 
	`gtk_maö_quô
();

418 
	}
}

420 
quô_˛icked
(
__©åibuã__
((
unu£d
)Ë
GtkWidgë
 *
widgë
,

421 
gpoöãr
 
d©a
)

423 
gui
 *
	gui
 = (guò*Ë
d©a
;

425 
gfio_quô
(
ui
);

428 *
	$job_thªad
(*
¨g
)

430 
gui
 *
ui
 = 
¨g
;

432 
ui
->
h™dÀr_ru¬ög
 = 1;

433 
	`fio_h™dÀ_˛õ¡s
(&
gfio_˛õ¡_›s
);

434 
ui
->
h™dÀr_ru¬ög
 = 0;

435  
NULL
;

436 
	}
}

438 
	$£nd_job_fûe
(
gui_íåy
 *
ge
)

440 
gfio_˛õ¡
 *
gc
 = 
ge
->
˛õ¡
;

441 
ªt
 = 0;

447 !
	`Êi°_em±y
(&
gc
->
o_li°
)) {

448 
gfio_˛õ¡_›ti⁄s
 *
gco
;

450 
gco
 = 
	`Êi°_fú°_íåy
(&
gc
->
o_li°
, 
gfio_˛õ¡_›ti⁄s
, 
li°
);

451 
	`Êi°_dñ
(&
gco
->
li°
);

452 
	`‰ì
(
gco
);

455 
ªt
 = 
	`fio_˛õ¡_£nd_öi
(
gc
->
˛õ¡
, 
ge
->
job_fûe
, 
Ál£
);

456 i‡(!
ªt
)

459 
	`gfio_ªp‹t_îr‹
(
ge
, "FaûedÅÿ£nd fûê%s: %s\n", ge->
job_fûe
, 
	`°ªº‹
(-
ªt
));

461 
	}
}

463 *
	$£rvî_thªad
(*
¨g
)

465 
	`fio_£rvî_¸óã_sk_key
();

466 
is_backíd
 = 
åue
;

467 
gfio_£rvî_ru¬ög
 = 
åue
;

468 
	`fio_°¨t_£rvî
(
NULL
);

469 
gfio_£rvî_ru¬ög
 = 
Ál£
;

470 
	`fio_£rvî_de°roy_sk_key
();

471  
NULL
;

472 
	}
}

474 
	$gfio_°¨t_£rvî
(
gui
 *
ui
)

476 i‡(!
gfio_£rvî_ru¬ög
) {

477 
gfio_£rvî_ru¬ög
 = 
åue
;

478 
	`±hªad_¸óã
(&
ui
->
£rvî_t
, 
NULL
, 
£rvî_thªad
, NULL);

479 
	`±hªad_dëach
(
ui
->
£rvî_t
);

481 
	}
}

483 
°¨t_job_˛icked
(
__©åibuã__
((
unu£d
)Ë
GtkWidgë
 *
widgë
,

484 
gpoöãr
 
d©a
)

486 
gui_íåy
 *
	gge
 = 
d©a
;

487 
gfio_˛õ¡
 *
	ggc
 = 
ge
->
˛õ¡
;

489 i‡(
	ggc
)

490 
fio_°¨t_˛õ¡
(
gc
->
˛õ¡
);

493 
fûe_›í
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
);

495 
	sc⁄√˘i⁄_widgës


497 
GtkWidgë
 *
	mhíåy
;

498 
GtkWidgë
 *
	mcombo
;

499 
GtkWidgë
 *
	mbuâ⁄
;

502 
	$ho°«me_cb
(
GtkE¡ry
 *
íåy
, 
gpoöãr
 
d©a
)

504 
c⁄√˘i⁄_widgës
 *
cw
 = 
d©a
;

505 
u£s_√t
 = 0, 
is_loˇlho°
 = 0;

506 c⁄° 
gch¨
 *
ãxt
;

507 
gch¨
 *
˘ext
;

514 
˘ext
 = 
	`gtk_combo_box_ãxt_gë_a˘ive_ãxt
(
	`GTK_COMBO_BOX_TEXT
(
cw
->
combo
));

515 i‡(!
˘ext
 || !
	`°∫cmp
(ctext, "IPv4", 4) || !strncmp(ctext, "IPv6", 4))

516 
u£s_√t
 = 1;

517 
	`g_‰ì
(
˘ext
);

519 i‡(
u£s_√t
) {

520 
ãxt
 = 
	`gtk_íåy_gë_ãxt
(
	`GTK_ENTRY
(
cw
->
híåy
));

521 i‡(!
	`°rcmp
(
ãxt
, "127.0.0.1") || !strcmp(text, "localhost") ||

522 !
	`°rcmp
(
ãxt
, "::1") || !strcmp(text, "ip6-localhost") ||

523 !
	`°rcmp
(
ãxt
, "ip6-loopback"))

524 
is_loˇlho°
 = 1;

527 i‡(!
u£s_√t
 || 
is_loˇlho°
) {

528 
	`gtk_toggÀ_buâ⁄_£t_a˘ive
(
	`GTK_TOGGLE_BUTTON
(
cw
->
buâ⁄
), 1);

529 
	`gtk_widgë_£t_£nsôive
(
cw
->
buâ⁄
, 1);

531 
	`gtk_toggÀ_buâ⁄_£t_a˘ive
(
	`GTK_TOGGLE_BUTTON
(
cw
->
buâ⁄
), 0);

532 
	`gtk_widgë_£t_£nsôive
(
cw
->
buâ⁄
, 0);

534 
	}
}

536 
	$gë_c⁄√˘i⁄_dëaûs
(
gui_íåy
 *
ge
)

538 
GtkWidgë
 *
dülog
, *
box
, *
vbox
, *
hbox
, *
‰ame
, *
≥¡ry
;

539 
c⁄√˘i⁄_widgës
 
cw
;

540 
gui
 *
ui
 = 
ge
->ui;

541 *
ty≥íåy
;

543 i‡(
ge
->
ho°
)

546 
dülog
 = 
	`gtk_dülog_√w_wôh_buâ⁄s
("Connection details",

547 
	`GTK_WINDOW
(
ui
->
wödow
),

548 
GTK_DIALOG_DESTROY_WITH_PARENT
,

549 
GTK_STOCK_OK
, 
GTK_RESPONSE_ACCEPT
,

550 
GTK_STOCK_CANCEL
, 
GTK_RESPONSE_REJECT
, 
NULL
);

552 
‰ame
 = 
	`gtk_‰ame_√w
("Hostname / socketÇame");

553 
vbox
 = 
	`gtk_dülog_gë_c⁄ã¡_¨ó
(
	`GTK_DIALOG
(
dülog
));

554 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
‰ame
, 
FALSE
, FALSE, 5);

556 
box
 = 
	`gtk_vbox_√w
(
FALSE
, 6);

557 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
box
);

559 
hbox
 = 
	`gtk_hbox_√w
(
TRUE
, 10);

560 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
hbox
, 
FALSE
, FALSE, 0);

561 
cw
.
híåy
 = 
	`gtk_íåy_√w
();

562 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
cw
.
híåy
), "localhost");

563 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox
), 
cw
.
híåy
, 
TRUE
, TRUE, 0);

565 
‰ame
 = 
	`gtk_‰ame_√w
("Port");

566 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
‰ame
, 
FALSE
, FALSE, 5);

567 
box
 = 
	`gtk_vbox_√w
(
FALSE
, 10);

568 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
box
);

570 
hbox
 = 
	`gtk_hbox_√w
(
TRUE
, 4);

571 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
hbox
, 
FALSE
, FALSE, 0);

572 
≥¡ry
 = 
	`¸óã_•öbuâ⁄
(
hbox
, 1, 65535, 
FIO_NET_PORT
);

574 
‰ame
 = 
	`gtk_‰ame_√w
("Type");

575 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
‰ame
, 
FALSE
, FALSE, 5);

576 
box
 = 
	`gtk_vbox_√w
(
FALSE
, 10);

577 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
box
);

579 
hbox
 = 
	`gtk_hbox_√w
(
TRUE
, 4);

580 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
hbox
, 
FALSE
, FALSE, 0);

582 
cw
.
combo
 = 
	`gtk_combo_box_ãxt_√w
();

583 
	`gtk_combo_box_ãxt_≠≥nd_ãxt
(
	`GTK_COMBO_BOX_TEXT
(
cw
.
combo
), "IPv4");

584 
	`gtk_combo_box_ãxt_≠≥nd_ãxt
(
	`GTK_COMBO_BOX_TEXT
(
cw
.
combo
), "IPv6");

585 
	`gtk_combo_box_ãxt_≠≥nd_ãxt
(
	`GTK_COMBO_BOX_TEXT
(
cw
.
combo
), "local socket");

586 
	`gtk_combo_box_£t_a˘ive
(
	`GTK_COMBO_BOX
(
cw
.
combo
), 0);

588 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
hbox
), 
cw
.
combo
);

590 
‰ame
 = 
	`gtk_‰ame_√w
("Options");

591 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
‰ame
, 
FALSE
, FALSE, 5);

592 
box
 = 
	`gtk_vbox_√w
(
FALSE
, 10);

593 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
box
);

595 
hbox
 = 
	`gtk_hbox_√w
(
TRUE
, 4);

596 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
hbox
, 
FALSE
, FALSE, 0);

598 
cw
.
buâ⁄
 = 
	`gtk_check_buâ⁄_√w_wôh_œbñ
("Auto-spawn fio backend");

599 
	`gtk_toggÀ_buâ⁄_£t_a˘ive
(
	`GTK_TOGGLE_BUTTON
(
cw
.
buâ⁄
), 1);

600 
	`gtk_widgë_£t_toﬁtù_ãxt
(
cw
.
buâ⁄
, "WhenÑunning fioÜocally, it isÇecessaryÅo haveÅhe backendÑunning onÅhe same system. IfÅhis is checked, gfio will startÅhe backendáutomatically for you if it isn'tálreadyÑunning.");

601 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox
), 
cw
.
buâ⁄
, 
FALSE
, FALSE, 6);

606 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
cw
.
híåy
), "ch™ged", 
	`G_CALLBACK
(
ho°«me_cb
), &cw);

607 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
cw
.
combo
), "ch™ged", 
	`G_CALLBACK
(
ho°«me_cb
), &cw);

609 
	`gtk_widgë_show_Æl
(
dülog
);

611 i‡(
	`gtk_dülog_run
(
	`GTK_DIALOG
(
dülog
)Ë!
GTK_RESPONSE_ACCEPT
) {

612 
	`gtk_widgë_de°roy
(
dülog
);

616 
ge
->
ho°
 = 
	`°rdup
(
	`gtk_íåy_gë_ãxt
(
	`GTK_ENTRY
(
cw
.
híåy
)));

617 
ge
->
p‹t
 = 
	`gtk_•ö_buâ⁄_gë_vÆue_as_öt
(
	`GTK_SPIN_BUTTON
(
≥¡ry
));

619 
ty≥íåy
 = 
	`gtk_combo_box_ãxt_gë_a˘ive_ãxt
(
	`GTK_COMBO_BOX_TEXT
(
cw
.
combo
));

620 i‡(!
ty≥íåy
 || !
	`°∫cmp
(typeentry, "IPv4", 4))

621 
ge
->
ty≥
 = 
Fio_˛õ¡_ùv4
;

622 i‡(!
	`°∫cmp
(
ty≥íåy
, "IPv6", 4))

623 
ge
->
ty≥
 = 
Fio_˛õ¡_ùv6
;

625 
ge
->
ty≥
 = 
Fio_˛õ¡_sockë
;

626 
	`g_‰ì
(
ty≥íåy
);

628 
ge
->
£rvî_°¨t
 = 
	`gtk_toggÀ_buâ⁄_gë_a˘ive
(
	`GTK_TOGGLE_BUTTON
(
cw
.
buâ⁄
));

630 
	`gtk_widgë_de°roy
(
dülog
);

632 
	}
}

634 
	$gfio_£t_˛õ¡
(
gfio_˛õ¡
 *
gc
, 
fio_˛õ¡
 *
˛õ¡
)

636 
gc
->
˛õ¡
 = 
	`fio_gë_˛õ¡
(client);

637 
˛õ¡
->
˛õ¡_d©a
 = 
gc
;

638 
	}
}

640 
	$gfio_˛õ¡_added
(
gui_íåy
 *
ge
, 
fio_˛õ¡
 *
˛õ¡
)

642 
gfio_˛õ¡_›ti⁄s
 *
gco
;

643 
gfio_˛õ¡
 *
gc
;

645 
gc
 = 
	`ˇŒoc
(1, (*gc));

646 
	`INIT_FLIST_HEAD
(&
gc
->
o_li°
);

647 
gc
->
ge
 = ge;

648 
ge
->
˛õ¡
 = 
gc
;

649 
	`gfio_£t_˛õ¡
(
gc
, 
˛õ¡
);

655 
gco
 = 
	`ˇŒoc
(1, (*gco));

656 
	`INIT_FLIST_HEAD
(&
gco
->
li°
);

657 
	`›ti⁄s_deÁu…_fûl
(&
gco
->
o
);

658 
	`Êi°_add_èû
(&
gco
->
li°
, &
gc
->
o_li°
);

659 
gc
->
o_li°_ƒ
++;

660 
	}
}

662 
	$gfio_˛ór_gøph_d©a
(
gfio_gøphs
 *
g
)

664 
	`gøph_˛ór_vÆues
(
g
->
i›s_gøph
);

665 
	`gøph_˛ór_vÆues
(
g
->
b™dwidth_gøph
);

666 
	}
}

668 
	$c⁄√˘_˛icked
(
GtkWidgë
 *
widgë
, 
gpoöãr
 
d©a
)

670 
gui_íåy
 *
ge
 = 
d©a
;

671 
gfio_˛õ¡
 *
gc
 = 
ge
->
˛õ¡
;

673 i‡(
ge
->
°©e
 =
GE_STATE_NEW
) {

674 
ªt
;

676 i‡(!
ge
->
job_fûe
)

677 
	`fûe_›í
(
widgë
, 
ge
->
ui
);

678 i‡(!
ge
->
job_fûe
)

681 
gc
 = 
ge
->
˛õ¡
;

683 i‡(!
gc
->
˛õ¡
) {

684 
fio_˛õ¡
 *
˛õ¡
;

686 i‡(
	`gë_c⁄√˘i⁄_dëaûs
(
ge
)) {

687 
	`gfio_ªp‹t_îr‹
(
ge
, "FailedÅo get connection details\n");

691 
˛õ¡
 = 
	`fio_˛õ¡_add_ex∂icô
(&
gfio_˛õ¡_›s
, 
ge
->
ho°
, ge->
ty≥
, ge->
p‹t
);

692 i‡(!
˛õ¡
) {

693 
	`gfio_ªp‹t_îr‹
(
ge
, "FaûedÅÿadd clõ¡ %s\n", ge->
ho°
);

694 
	`‰ì
(
ge
->
ho°
);

695 
ge
->
ho°
 = 
NULL
;

698 
	`gfio_£t_˛õ¡
(
gc
, 
˛õ¡
);

701 
	`gtk_¥ogªss_b¨_£t_ãxt
(
	`GTK_PROGRESS_BAR
(
ge
->
thªad_°©us_pb
), "No jobsÑunning");

702 
	`gtk_¥ogªss_b¨_£t_‰a˘i⁄
(
	`GTK_PROGRESS_BAR
(
ge
->
thªad_°©us_pb
), 0.0);

703 
ªt
 = 
	`fio_˛õ¡_c⁄√˘
(
gc
->
˛õ¡
);

704 i‡(!
ªt
) {

705 i‡(!
ge
->
ui
->
h™dÀr_ru¬ög
)

706 
	`±hªad_¸óã
(&
ge
->
ui
->
t
, 
NULL
, 
job_thªad
, ge->ui);

707 
	`gfio_£t_°©e
(
ge
, 
GE_STATE_CONNECTED
);

708 
	`gfio_˛ór_gøph_d©a
(&
ge
->
gøphs
);

710 
	`gfio_ªp‹t_îr‹
(
ge
, "FaûedÅÿc⁄√˘Åÿ%s: %s\n", ge->
˛õ¡
->˛õ¡->
ho°«me
, 
	`°ªº‹
(-
ªt
));

713 
	`fio_˛õ¡_ãrmö©e
(
gc
->
˛õ¡
);

714 
	`gfio_£t_°©e
(
ge
, 
GE_STATE_NEW
);

715 
	`˛ór_ge_ui_öfo
(
ge
);

717 
	}
}

719 
	$£nd_˛icked
(
GtkWidgë
 *
widgë
, 
gpoöãr
 
d©a
)

721 
gui_íåy
 *
ge
 = 
d©a
;

723 i‡(
	`£nd_job_fûe
(
ge
))

724 
	`gtk_widgë_£t_£nsôive
(
ge
->
buâ⁄
[
GFIO_BUTTON_START
], 1);

725 
	}
}

727 
GtkWidgë
 *
√w_˛õ¡_∑ge
(
gui_íåy
 *
ge
);

729 
gui_íåy
 *
	$Æloc_√w_gui_íåy
(
gui
 *
ui
)

731 
gui_íåy
 *
ge
;

733 
ge
 = 
	`mÆloc
((*ge));

734 
	`mem£t
(
ge
, 0, (*ge));

735 
ge
->
°©e
 = 
GE_STATE_NEW
;

736 
ge
->
ui
 = ui;

737  
ge
;

738 
	}
}

740 
gui_íåy
 *
	$gë_√w_ge_wôh_èb
(
gui
 *
ui
, c⁄° *
«me
)

742 
gui_íåy
 *
ge
;

744 
ge
 = 
	`Æloc_√w_gui_íåy
(
ui
);

746 
ge
->
vbox
 = 
	`√w_˛õ¡_∑ge
(ge);

747 
	`g_sig«l_c⁄√˘
(
ge
->
vbox
, "de°roy", 
	`G_CALLBACK
(
ge_widgë_de°roy
), ge);

749 
ge
->
∑ge_œbñ
 = 
	`gtk_œbñ_√w
(
«me
);

750 
ge
->
∑ge_num
 = 
	`gtk_nŸebook_≠≥nd_∑ge
(
	`GTK_NOTEBOOK
(
ui
->
nŸebook
), ge->
vbox
, ge->
∑ge_œbñ
);

752 
	`g_hash_èbÀ_ö£π
(
ui
->
ge_hash
, &
ge
->
∑ge_num
, ge);

754 
	`gtk_widgë_show_Æl
(
ui
->
wödow
);

755  
ge
;

756 
	}
}

758 
	$fûe_√w
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

760 
gui
 *
ui
 = (guò*Ë
d©a
;

761 
gui_íåy
 *
ge
;

763 
ge
 = 
	`gë_√w_ge_wôh_èb
(
ui
, "Untitled");

764 
	`gtk_nŸebook_£t_cuºít_∑ge
(
	`GTK_NOTEBOOK
(
ui
->
nŸebook
), 
ge
->
∑ge_num
);

765 
	}
}

771 
gui_íåy
 *
	$gë_ge_‰om_∑ge
(
gui
 *
ui
, 
göt
 
cur_∑ge
,

772 *
¸óãd
)

774 i‡(!
cur_∑ge
) {

775 i‡(
¸óãd
)

776 *
¸óãd
 = 1;

777  
	`gë_√w_ge_wôh_èb
(
ui
, "Untitled");

780 i‡(
¸óãd
)

781 *
¸óãd
 = 0;

783  
	`g_hash_èbÀ_lookup
(
ui
->
ge_hash
, &
cur_∑ge
);

784 
	}
}

786 
gui_íåy
 *
	$gë_ge_‰om_cur_èb
(
gui
 *
ui
)

788 
göt
 
cur_∑ge
;

794 
cur_∑ge
 = 
	`gtk_nŸebook_gë_cuºít_∑ge
(
	`GTK_NOTEBOOK
(
ui
->
nŸebook
));

795 i‡(
cur_∑ge
)

796  
	`gë_ge_‰om_∑ge
(
ui
, 
cur_∑ge
, 
NULL
);

798  
NULL
;

799 
	}
}

801 
	$fûe_˛o£
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

803 
gui
 *
ui
 = (guò*Ë
d©a
;

804 
gui_íåy
 *
ge
;

809 
ge
 = 
	`gë_ge_‰om_cur_èb
(
ui
);

810 i‡(
ge
) {

811 
	`gtk_widgë_de°roy
(
ge
->
vbox
);

815 i‡(
	`g_hash_èbÀ_size
(
ui
->
ge_hash
)) {

816 
	`gfio_ªp‹t_öfo
(
ui
, "Error", "The mainÖage view cannot be closed\n");

820 
	`gfio_quô
(
ui
);

821 
	}
}

823 
	$fûe_add_ª˚¡
(
gui
 *
ui
, c⁄° 
gch¨
 *
uri
)

825 
GtkRe˚¡D©a
 
grd
;

827 
	`mem£t
(&
grd
, 0, (grd));

828 
grd
.
di•œy_«me
 = 
	`°rdup
("gfio");

829 
grd
.
des¸ùti⁄
 = 
	`°rdup
("Fio job file");

830 
grd
.
mime_ty≥
 = 
	`°rdup
(
GFIO_MIME
);

831 
grd
.
≠p_«me
 = 
	`°rdup
(
	`g_gë_≠∂iˇti⁄_«me
());

832 
grd
.
≠p_exec
 = 
	`°rdup
("gfio %f/%u");

834 
	`gtk_ª˚¡_m™agî_add_fuŒ
(
ui
->
ª˚¡m™agî
, 
uri
, &
grd
);

835 
	}
}

837 
gch¨
 *
	$gë_fûíame_‰om_uri
(c⁄° 
gch¨
 *
uri
)

839 i‡(
	`°∫cmp
(
uri
, "file://", 7))

840  
	`°rdup
(
uri
);

842  
	`°rdup
(
uri
 + 7);

843 
	}
}

845 
	$do_fûe_›í
(
gui_íåy
 *
ge
, c⁄° 
gch¨
 *
uri
)

847 
fio_˛õ¡
 *
˛õ¡
;

849 
	`as£π
(!
ge
->
job_fûe
);

851 
ge
->
job_fûe
 = 
	`gë_fûíame_‰om_uri
(
uri
);

853 
˛õ¡
 = 
	`fio_˛õ¡_add_ex∂icô
(&
gfio_˛õ¡_›s
, 
ge
->
ho°
, ge->
ty≥
, ge->
p‹t
);

854 i‡(
˛õ¡
) {

855 *
œbñ
 = 
	`°rdup
(
uri
);

857 
	`ba£«me
(
œbñ
);

858 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
ge
->
∑ge_œbñ
), 
	`ba£«me
(
œbñ
));

859 
	`‰ì
(
œbñ
);

861 
	`gfio_˛õ¡_added
(
ge
, 
˛õ¡
);

862 
	`fûe_add_ª˚¡
(
ge
->
ui
, 
uri
);

866 
	`gfio_ªp‹t_îr‹
(
ge
, "FaûedÅÿadd clõ¡ %s\n", ge->
ho°
);

867 
	`‰ì
(
ge
->
ho°
);

868 
ge
->
ho°
 = 
NULL
;

869 
	`‰ì
(
ge
->
job_fûe
);

870 
ge
->
job_fûe
 = 
NULL
;

872 
	}
}

874 
	$do_fûe_›í_wôh_èb
(
gui
 *
ui
, c⁄° 
gch¨
 *
uri
)

876 
gui_íåy
 *
ge
;

877 
göt
 
cur_∑ge
;

878 
ªt
, 
ge_is_√w
 = 0;

884 
cur_∑ge
 = 
	`gtk_nŸebook_gë_cuºít_∑ge
(
	`GTK_NOTEBOOK
(
ui
->
nŸebook
));

885 
ge
 = 
	`gë_ge_‰om_∑ge
(
ui
, 
cur_∑ge
, &
ge_is_√w
);

886 i‡(
ge
->
˛õ¡
) {

887 
ge
 = 
	`gë_√w_ge_wôh_èb
(
ui
, "Untitled");

888 
ge_is_√w
 = 1;

891 
	`gtk_nŸebook_£t_cuºít_∑ge
(
	`GTK_NOTEBOOK
(
ui
->
nŸebook
), 
ge
->
∑ge_num
);

893 i‡(
	`gë_c⁄√˘i⁄_dëaûs
(
ge
)) {

894 i‡(
ge_is_√w
)

895 
	`gtk_widgë_de°roy
(
ge
->
vbox
);

900 
ªt
 = 
	`do_fûe_›í
(
ge
, 
uri
);

902 i‡(!
ªt
) {

903 i‡(
ge
->
£rvî_°¨t
)

904 
	`gfio_°¨t_£rvî
(
ui
);

906 i‡(
ge_is_√w
)

907 
	`gtk_widgë_de°roy
(
ge
->
vbox
);

910  
ªt
;

911 
	}
}

913 
	$ª˚¡_›í
(
GtkA˘i⁄
 *
a˘i⁄
, 
gpoöãr
 
d©a
)

915 
gui
 *
ui
 = (guò*Ë
d©a
;

916 
GtkRe˚¡Info
 *
öfo
;

917 c⁄° 
gch¨
 *
uri
;

919 
öfo
 = 
	`g_obje˘_gë_d©a
(
	`G_OBJECT
(
a˘i⁄
), "gtk-recent-info");

920 
uri
 = 
	`gtk_ª˚¡_öfo_gë_uri
(
öfo
);

922 
	`do_fûe_›í_wôh_èb
(
ui
, 
uri
);

923 
	}
}

925 
	$fûe_›í
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

927 
gui
 *
ui
 = 
d©a
;

928 
GtkWidgë
 *
dülog
;

929 
GtkFûeFûãr
 *
fûãr
;

930 
gch¨
 *
fûíame
;

932 
dülog
 = 
	`gtk_fûe_choo£r_dülog_√w
("Open File",

933 
	`GTK_WINDOW
(
ui
->
wödow
),

934 
GTK_FILE_CHOOSER_ACTION_OPEN
,

935 
GTK_STOCK_CANCEL
, 
GTK_RESPONSE_CANCEL
,

936 
GTK_STOCK_OPEN
, 
GTK_RESPONSE_ACCEPT
,

937 
NULL
);

938 
	`gtk_fûe_choo£r_£t_£À˘_mu…ùÀ
(
	`GTK_FILE_CHOOSER
(
dülog
), 
FALSE
);

940 
fûãr
 = 
	`gtk_fûe_fûãr_√w
();

941 
	`gtk_fûe_fûãr_add_∑âîn
(
fûãr
, "*.fio");

942 
	`gtk_fûe_fûãr_add_∑âîn
(
fûãr
, "*.job");

943 
	`gtk_fûe_fûãr_add_∑âîn
(
fûãr
, "*.ini");

944 
	`gtk_fûe_fûãr_add_mime_ty≥
(
fûãr
, 
GFIO_MIME
);

945 
	`gtk_fûe_fûãr_£t_«me
(
fûãr
, "Fio job file");

946 
	`gtk_fûe_choo£r_£t_fûãr
(
	`GTK_FILE_CHOOSER
(
dülog
), 
fûãr
);

948 i‡(
	`gtk_dülog_run
(
	`GTK_DIALOG
(
dülog
)Ë!
GTK_RESPONSE_ACCEPT
) {

949 
	`gtk_widgë_de°roy
(
dülog
);

953 
fûíame
 = 
	`gtk_fûe_choo£r_gë_fûíame
(
	`GTK_FILE_CHOOSER
(
dülog
));

955 
	`gtk_widgë_de°roy
(
dülog
);

957 
	`do_fûe_›í_wôh_èb
(
ui
, 
fûíame
);

958 
	`g_‰ì
(
fûíame
);

959 
	}
}

961 
	$fûe_ßve
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

963 
gui
 *
ui
 = 
d©a
;

964 
GtkWidgë
 *
dülog
;

966 
dülog
 = 
	`gtk_fûe_choo£r_dülog_√w
("Save File",

967 
	`GTK_WINDOW
(
ui
->
wödow
),

968 
GTK_FILE_CHOOSER_ACTION_SAVE
,

969 
GTK_STOCK_CANCEL
, 
GTK_RESPONSE_CANCEL
,

970 
GTK_STOCK_SAVE
, 
GTK_RESPONSE_ACCEPT
,

971 
NULL
);

973 
	`gtk_fûe_choo£r_£t_do_ovîwrôe_c⁄fúm©i⁄
(
	`GTK_FILE_CHOOSER
(
dülog
), 
TRUE
);

974 
	`gtk_fûe_choo£r_£t_cuºít_«me
(
	`GTK_FILE_CHOOSER
(
dülog
), "Untitled document");

976 i‡(
	`gtk_dülog_run
(
	`GTK_DIALOG
(
dülog
)Ë=
GTK_RESPONSE_ACCEPT
) {

977 *
fûíame
;

979 
fûíame
 = 
	`gtk_fûe_choo£r_gë_fûíame
(
	`GTK_FILE_CHOOSER
(
dülog
));

981 
	`g_‰ì
(
fûíame
);

983 
	`gtk_widgë_de°roy
(
dülog
);

984 
	}
}

986 
	$võw_log_de°roy
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

988 
gui
 *
ui
 = (guò*Ë
d©a
;

990 
	`g_obje˘_ªf
(
	`G_OBJECT
(
ui
->
log_åì
));

991 
	`gtk_c⁄èöî_ªmove
(
	`GTK_CONTAINER
(
w
), 
ui
->
log_åì
);

992 
	`gtk_widgë_de°roy
(
w
);

993 
ui
->
log_võw
 = 
NULL
;

994 
	}
}

996 
	$gfio_võw_log
(
gui
 *
ui
)

998 
GtkWidgë
 *
wö
, *
s¸ﬁl
, *
vbox
, *
box
;

1000 i‡(
ui
->
log_võw
)

1003 
ui
->
log_võw
 = 
wö
 = 
	`gtk_wödow_√w
(
GTK_WINDOW_TOPLEVEL
);

1004 
	`gtk_wödow_£t_tôÀ
(
	`GTK_WINDOW
(
wö
), "Log");

1005 
	`gtk_wödow_£t_deÁu…_size
(
	`GTK_WINDOW
(
wö
), 700, 500);

1007 
s¸ﬁl
 = 
	`gtk_s¸ﬁÀd_wödow_√w
(
NULL
, NULL);

1009 
	`gtk_c⁄èöî_£t_b‹dî_width
(
	`GTK_CONTAINER
(
s¸ﬁl
), 5);

1011 
	`gtk_s¸ﬁÀd_wödow_£t_pﬁicy
(
	`GTK_SCROLLED_WINDOW
(
s¸ﬁl
), 
GTK_POLICY_AUTOMATIC
, GTK_POLICY_AUTOMATIC);

1013 
box
 = 
	`gtk_hbox_√w
(
TRUE
, 0);

1014 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
ui
->
log_åì
, 
TRUE
, TRUE, 0);

1015 
	`g_sig«l_c⁄√˘
(
box
, "de°roy", 
	`G_CALLBACK
(
võw_log_de°roy
), 
ui
);

1016 
	`gtk_s¸ﬁÀd_wödow_add_wôh_võwp‹t
(
	`GTK_SCROLLED_WINDOW
(
s¸ﬁl
), 
box
);

1018 
vbox
 = 
	`gtk_vbox_√w
(
TRUE
, 5);

1019 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
s¸ﬁl
, 
TRUE
, TRUE, 0);

1021 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
wö
), 
vbox
);

1022 
	`gtk_widgë_show_Æl
(
wö
);

1023 
	}
}

1025 
	$võw_log
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

1027 
gui
 *
ui
 = (guò*Ë
d©a
;

1029 
	`gfio_võw_log
(
ui
);

1030 
	}
}

1032 
	$c⁄√˘_job_íåy
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

1034 
gui
 *
ui
 = (guò*Ë
d©a
;

1035 
gui_íåy
 *
ge
;

1037 
ge
 = 
	`gë_ge_‰om_cur_èb
(
ui
);

1038 i‡(
ge
)

1039 
	`c⁄√˘_˛icked
(
w
, 
ge
);

1040 
	}
}

1042 
	$£nd_job_íåy
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

1044 
gui
 *
ui
 = (guò*Ë
d©a
;

1045 
gui_íåy
 *
ge
;

1047 
ge
 = 
	`gë_ge_‰om_cur_èb
(
ui
);

1048 i‡(
ge
)

1049 
	`£nd_˛icked
(
w
, 
ge
);

1050 
	}
}

1052 
	$edô_job_íåy
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

1054 
gui
 *
ui
 = (guò*Ë
d©a
;

1055 
gui_íåy
 *
ge
;

1057 
ge
 = 
	`gë_ge_‰om_cur_èb
(
ui
);

1058 i‡(
ge
 && ge->
˛õ¡
)

1059 
	`g›t_gë_›ti⁄s_wödow
(
ui
->
wödow
, 
ge
->
˛õ¡
);

1060 
	}
}

1062 
	$°¨t_job_íåy
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

1064 
gui
 *
ui
 = (guò*Ë
d©a
;

1065 
gui_íåy
 *
ge
;

1067 
ge
 = 
	`gë_ge_‰om_cur_èb
(
ui
);

1068 i‡(
ge
)

1069 
	`°¨t_job_˛icked
(
w
, 
ge
);

1070 
	}
}

1072 
	$võw_ªsu…s
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

1074 
gui
 *
ui
 = (guò*Ë
d©a
;

1075 
gfio_˛õ¡
 *
gc
;

1076 
gui_íåy
 *
ge
;

1078 
ge
 = 
	`gë_ge_‰om_cur_èb
(
ui
);

1079 i‡(!
ge
)

1082 i‡(
ge
->
ªsu…s_wödow
)

1085 
gc
 = 
ge
->
˛õ¡
;

1086 i‡(
gc
 && gc->
ƒ_ªsu…s
)

1087 
	`gfio_di•œy_íd_ªsu…s
(
gc
);

1088 
	}
}

1090 
	$__upd©e_gøph_£âögs
(
gfio_gøphs
 *
g
)

1092 
	`löe_gøph_£t_d©a_cou¡_limô
(
g
->
i›s_gøph
, 
gfio_gøph_limô
);

1093 
	`gøph_£t_f⁄t
(
g
->
i›s_gøph
, 
gfio_gøph_f⁄t
);

1094 
	`löe_gøph_£t_d©a_cou¡_limô
(
g
->
b™dwidth_gøph
, 
gfio_gøph_limô
);

1095 
	`gøph_£t_f⁄t
(
g
->
b™dwidth_gøph
, 
gfio_gøph_f⁄t
);

1096 
	}
}

1098 
	$ge_upd©e_£âögs_‚
(
gpoöãr
 
key
, gpoöã∏
vÆue
, gpoöã∏
d©a
)

1100 
gui_íåy
 *
ge
 = (gui_íåy *Ë
vÆue
;

1101 
GdkEvít
 *
ev
;

1103 
	`__upd©e_gøph_£âögs
(&
ge
->
gøphs
);

1105 
ev
 = 
	`gdk_evít_√w
(
GDK_EXPOSE
);

1106 
	`g_sig«l_emô_by_«me
(
	`G_OBJECT
(
ge
->
gøphs
.
døwög_¨ó
), 
GFIO_DRAW_EVENT
, 
	`GTK_WIDGET
(ge->gøphs.døwög_¨ó), 
ev
, &ge->graphs);

1107 
	`gdk_evít_‰ì
(
ev
);

1108 
	}
}

1110 
	$upd©e_gøph_limôs
()

1112 
gui
 *
ui
 = &
maö_ui
;

1113 
GdkEvít
 *
ev
;

1115 
	`__upd©e_gøph_£âögs
(&
ui
->
gøphs
);

1117 
ev
 = 
	`gdk_evít_√w
(
GDK_EXPOSE
);

1118 
	`g_sig«l_emô_by_«me
(
	`G_OBJECT
(
ui
->
gøphs
.
døwög_¨ó
), 
GFIO_DRAW_EVENT
, 
	`GTK_WIDGET
(ui->gøphs.døwög_¨ó), 
ev
, &ui->graphs);

1119 
	`gdk_evít_‰ì
(
ev
);

1121 
	`g_hash_èbÀ_f‹óch
(
ui
->
ge_hash
, 
ge_upd©e_£âögs_‚
, 
NULL
);

1122 
	}
}

1124 
	$¥e„ªn˚s
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

1126 
GtkWidgë
 *
dülog
, *
‰ame
, *
box
, **
buâ⁄s
, *
vbox
, *
f⁄t
;

1127 
GtkWidgë
 *
hbox
, *
•ö
, *
íåy
, *
•ö_öt
;

1128 
gui
 *
ui
 = (guò*Ë
d©a
;

1129 
i
;

1131 
dülog
 = 
	`gtk_dülog_√w_wôh_buâ⁄s
("Preferences",

1132 
	`GTK_WINDOW
(
ui
->
wödow
),

1133 
GTK_DIALOG_DESTROY_WITH_PARENT
,

1134 
GTK_STOCK_OK
, 
GTK_RESPONSE_ACCEPT
,

1135 
GTK_STOCK_CANCEL
, 
GTK_RESPONSE_REJECT
,

1136 
NULL
);

1138 
‰ame
 = 
	`gtk_‰ame_√w
("Graphing");

1139 
vbox
 = 
	`gtk_dülog_gë_c⁄ã¡_¨ó
(
	`GTK_DIALOG
(
dülog
));

1140 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
‰ame
, 
FALSE
, FALSE, 5);

1141 
vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 6);

1142 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
vbox
);

1144 
hbox
 = 
	`gtk_hbox_√w
(
FALSE
, 5);

1145 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
hbox
, 
FALSE
, FALSE, 5);

1146 
íåy
 = 
	`gtk_œbñ_√w
("Font faceÅo use for graphÜabels");

1147 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox
), 
íåy
, 
TRUE
, TRUE, 5);

1149 
f⁄t
 = 
	`gtk_f⁄t_buâ⁄_√w_wôh_f⁄t
(
gfio_gøph_f⁄t
);

1150 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox
), 
f⁄t
, 
FALSE
, FALSE, 5);

1152 
box
 = 
	`gtk_vbox_√w
(
FALSE
, 6);

1153 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
box
, 
FALSE
, FALSE, 5);

1155 
hbox
 = 
	`gtk_hbox_√w
(
FALSE
, 5);

1156 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
hbox
, 
TRUE
, TRUE, 5);

1157 
íåy
 = 
	`gtk_œbñ_√w
("MaximumÇumber of dataÖoints in graph (seconds)");

1158 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox
), 
íåy
, 
FALSE
, FALSE, 5);

1160 
•ö
 = 
	`¸óã_•öbuâ⁄
(
hbox
, 10, 1000000, 
gfio_gøph_limô
);

1162 
box
 = 
	`gtk_vbox_√w
(
FALSE
, 6);

1163 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
box
, 
FALSE
, FALSE, 5);

1165 
hbox
 = 
	`gtk_hbox_√w
(
FALSE
, 5);

1166 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
hbox
, 
TRUE
, TRUE, 5);

1167 
íåy
 = 
	`gtk_œbñ_√w
("Client ETAÑequest interval (msec)");

1168 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox
), 
íåy
, 
FALSE
, FALSE, 5);

1170 
•ö_öt
 = 
	`¸óã_•öbuâ⁄
(
hbox
, 100, 100000, 
gfio_˛õ¡_›s
.
ëa_m£c
);

1171 
‰ame
 = 
	`gtk_‰ame_√w
("DebugÜogging");

1172 
vbox
 = 
	`gtk_dülog_gë_c⁄ã¡_¨ó
(
	`GTK_DIALOG
(
dülog
));

1173 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
‰ame
, 
FALSE
, FALSE, 5);

1174 
vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 6);

1175 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
vbox
);

1177 
box
 = 
	`gtk_hbox_√w
(
FALSE
, 6);

1178 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
vbox
), 
box
);

1180 
buâ⁄s
 = 
	`mÆloc
((
GtkWidgë
 *Ë* 
FD_DEBUG_MAX
);

1182 
i
 = 0; i < 
FD_DEBUG_MAX
; i++) {

1183 i‡(
i
 == 7) {

1184 
box
 = 
	`gtk_hbox_√w
(
FALSE
, 6);

1185 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
vbox
), 
box
);

1189 
buâ⁄s
[
i
] = 
	`gtk_check_buâ⁄_√w_wôh_œbñ
(
debug_Àvñs
[i].
«me
);

1190 
	`gtk_widgë_£t_toﬁtù_ãxt
(
buâ⁄s
[
i
], 
debug_Àvñs
[i].
hñp
);

1191 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
buâ⁄s
[
i
], 
FALSE
, FALSE, 6);

1194 
	`gtk_widgë_show_Æl
(
dülog
);

1196 i‡(
	`gtk_dülog_run
(
	`GTK_DIALOG
(
dülog
)Ë!
GTK_RESPONSE_ACCEPT
) {

1197 
	`gtk_widgë_de°roy
(
dülog
);

1201 
i
 = 0; i < 
FD_DEBUG_MAX
; i++) {

1202 
£t
;

1204 
£t
 = 
	`gtk_toggÀ_buâ⁄_gë_a˘ive
(
	`GTK_TOGGLE_BUTTON
(
buâ⁄s
[
i
]));

1205 i‡(
£t
)

1206 
fio_debug
 |(1UL << 
i
);

1209 
gfio_gøph_f⁄t
 = 
	`°rdup
(
	`gtk_f⁄t_buâ⁄_gë_f⁄t_«me
(
	`GTK_FONT_BUTTON
(
f⁄t
)));

1210 
gfio_gøph_limô
 = 
	`gtk_•ö_buâ⁄_gë_vÆue_as_öt
(
	`GTK_SPIN_BUTTON
(
•ö
));

1211 
	`upd©e_gøph_limôs
();

1212 
gfio_˛õ¡_›s
.
ëa_m£c
 = 
	`gtk_•ö_buâ⁄_gë_vÆue_as_öt
(
	`GTK_SPIN_BUTTON
(
•ö_öt
));

1214 
	`gtk_widgë_de°roy
(
dülog
);

1215 
	}
}

1217 
	$about_dülog
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

1219 c⁄° *
auth‹s
[] = {

1222 
NULL


1224 c⁄° *
li˚n£
[] = {

1237 *
li˚n£_å™s
;

1239 
li˚n£_å™s
 = 
	`g_°rc⁄ˇt
(
li˚n£
[0], "\n",Üicense[1], "\n",

1240 
li˚n£
[2], "\n", 
NULL
);

1242 
	`gtk_show_about_dülog
(
NULL
,

1245 "li˚n£", 
li˚n£_å™s
,

1247 "auth‹s", 
auth‹s
,

1248 "vîsi⁄", 
fio_vîsi⁄_°rög
,

1252 "wøp-li˚n£", 
TRUE
,

1253 
NULL
);

1255 
	`g_‰ì
(
li˚n£_å™s
);

1256 
	}
}

1258 
GtkA˘i⁄E¡ry
 
	gmíu_ôems
[] = {

1259 { "FûeMíuA˘i⁄", 
GTK_STOCK_FILE
, "Fûe", 
NULL
, NULL, NULL},

1260 { "VõwMíuA˘i⁄", 
GTK_STOCK_FILE
, "Võw", 
NULL
, NULL, NULL},

1261 { "JobMíuA˘i⁄", 
GTK_STOCK_FILE
, "Job", 
NULL
, NULL, NULL},

1262 { "HñpMíuA˘i⁄", 
GTK_STOCK_HELP
, "Hñp", 
NULL
, NULL, NULL},

1263 { "NewFûe", 
GTK_STOCK_NEW
, "New", "<C⁄åﬁ>N", 
NULL
, 
G_CALLBACK
(
fûe_√w
) },

1264 { "Clo£Fûe", 
GTK_STOCK_CLOSE
, "Clo£", "<C⁄åﬁ>W", 
NULL
, 
G_CALLBACK
(
fûe_˛o£
) },

1265 { "O≥nFûe", 
GTK_STOCK_OPEN
, 
NULL
, "<C⁄åﬁ>O", NULL, 
G_CALLBACK
(
fûe_›í
) },

1266 { "SaveFûe", 
GTK_STOCK_SAVE
, 
NULL
, "<C⁄åﬁ>S", NULL, 
G_CALLBACK
(
fûe_ßve
) },

1267 { "Pª„ªn˚s", 
GTK_STOCK_PREFERENCES
, 
NULL
, "<C⁄åﬁ>p", NULL, 
G_CALLBACK
(
¥e„ªn˚s
) },

1268 { "VõwLog", 
NULL
, "Log", "<C⁄åﬁ>l", NULL, 
G_CALLBACK
(
võw_log
) },

1269 { "VõwResu…s", 
NULL
, "Resu…s", "<C⁄åﬁ>R", NULL, 
G_CALLBACK
(
võw_ªsu…s
) },

1270 { "C⁄√˘Job", 
NULL
, "C⁄√˘", "<C⁄åﬁ>D", NULL, 
G_CALLBACK
(
c⁄√˘_job_íåy
) },

1271 { "EdôJob", 
NULL
, "Edô job", "<C⁄åﬁ>E", NULL, 
G_CALLBACK
(
edô_job_íåy
) },

1272 { "SídJob", 
NULL
, "Síd job", "<C⁄åﬁ>X", NULL, 
G_CALLBACK
(
£nd_job_íåy
) },

1273 { "SèπJob", 
NULL
, "Sèπ job", "<C⁄åﬁ>L", NULL, 
G_CALLBACK
(
°¨t_job_íåy
) },

1274 { "Quô", 
GTK_STOCK_QUIT
, 
NULL
, "<C⁄åﬁ>Q", NULL, 
G_CALLBACK
(
quô_˛icked
) },

1275 { "About", 
GTK_STOCK_ABOUT
, 
NULL
, NULL, NULL, 
G_CALLBACK
(
about_dülog
) },

1277 
göt
 
	gnmíu_ôems
 = 
FIO_ARRAY_SIZE
(
míu_ôems
);

1279 c⁄° 
gch¨
 *
	gui_°rög
 = " \
<ui> \
<menubarÇame=\"MainMenu\"> \
<menuÇame=\"FileMenu\"áction=\"FileMenuAction\"> \
<menuitemÇame=\"New\"áction=\"NewFile\" /> \
<menuitemÇame=\"Open\"áction=\"OpenFile\" /> \
<menuitemÇame=\"Close\"áction=\"CloseFile\" /> \
<separatorÇame=\"Separator1\"/> \
<menuitemÇame=\"Save\"áction=\"SaveFile\" /> \
<separatorÇame=\"Separator2\"/> \
<menuitemÇame=\"Preferences\"áction=\"Preferences\" /> \
<separatorÇame=\"Separator3\"/> \
<placeholderÇame=\"FileRecentFiles\"/> \
<separatorÇame=\"Separator4\"/> \
<menuitemÇame=\"Quit\"áction=\"Quit\" /> \
</menu> \
<menuÇame=\"JobMenu\"áction=\"JobMenuAction\"> \
<menuitemÇame=\"Connect\"áction=\"ConnectJob\" /> \
<separatorÇame=\"Separator5\"/> \
<menuitemÇame=\"Edit job\"áction=\"EditJob\" /> \
<menuitemÇame=\"Send job\"áction=\"SendJob\" /> \
<separatorÇame=\"Separator6\"/> \
<menuitemÇame=\"Start job\"áction=\"StartJob\" /> \
</menu>\
<menuÇame=\"ViewMenu\"áction=\"ViewMenuAction\"> \
<menuitemÇame=\"Results\"áction=\"ViewResults\" /> \
<separatorÇame=\"Separator7\"/> \
<menuitemÇame=\"Log\"áction=\"ViewLog\" /> \
</menu>\
<menuÇame=\"Help\"áction=\"HelpMenuAction\"> \
<menuitemÇame=\"About\"áction=\"About\" /> \
</menu> \
</menubar> \
</ui> \
";

1315 
GtkWidgë
 *
	$gë_míub¨_míu
(
GtkWidgë
 *
wödow
, 
GtkUIM™agî
 *
ui_m™agî
,

1316 
gui
 *
ui
)

1318 
GtkA˘i⁄Group
 *
a˘i⁄_group
;

1319 
GEº‹
 *
îr‹
 = 0;

1321 
a˘i⁄_group
 = 
	`gtk_a˘i⁄_group_√w
("Menu");

1322 
	`gtk_a˘i⁄_group_add_a˘i⁄s
(
a˘i⁄_group
, 
míu_ôems
, 
nmíu_ôems
, 
ui
);

1324 
	`gtk_ui_m™agî_ö£π_a˘i⁄_group
(
ui_m™agî
, 
a˘i⁄_group
, 0);

1325 
	`gtk_ui_m™agî_add_ui_‰om_°rög
(
	`GTK_UI_MANAGER
(
ui_m™agî
), 
ui_°rög
, -1, &
îr‹
);

1327 
	`gtk_wödow_add_ac˚l_group
(
	`GTK_WINDOW
(
wödow
), 
	`gtk_ui_m™agî_gë_ac˚l_group
(
ui_m™agî
));

1329  
	`gtk_ui_m™agî_gë_widgë
(
ui_m™agî
, "/MainMenu");

1330 
	}
}

1332 
	$gfio_ui_£tup
(
GtkSëtögs
 *
£âögs
, 
GtkWidgë
 *
míub¨
,

1333 
GtkWidgë
 *
vbox
, 
GtkUIM™agî
 *
ui_m™agî
)

1335 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
míub¨
, 
FALSE
, FALSE, 0);

1336 
	}
}

1338 
	$combo_íåy_ch™ged
(
GtkComboBox
 *
box
, 
gpoöãr
 
d©a
)

1340 
gui_íåy
 *
ge
 = (gui_íåy *Ë
d©a
;

1341 
göt
 
ödex
;

1343 
ödex
 = 
	`gtk_combo_box_gë_a˘ive
(
box
);

1345 
	`mu…ôext_£t_íåy
(&
ge
->
ëa
.
iŸy≥
, 
ödex
);

1346 
	`mu…ôext_£t_íåy
(&
ge
->
ëa
.
bs
, 
ödex
);

1347 
	`mu…ôext_£t_íåy
(&
ge
->
ëa
.
i€ngöe
, 
ödex
);

1348 
	`mu…ôext_£t_íåy
(&
ge
->
ëa
.
iodïth
, 
ödex
);

1349 
	}
}

1351 
	$combo_íåy_de°roy
(
GtkWidgë
 *
widgë
, 
gpoöãr
 
d©a
)

1353 
gui_íåy
 *
ge
 = (gui_íåy *Ë
d©a
;

1355 
	`mu…ôext_‰ì
(&
ge
->
ëa
.
iŸy≥
);

1356 
	`mu…ôext_‰ì
(&
ge
->
ëa
.
bs
);

1357 
	`mu…ôext_‰ì
(&
ge
->
ëa
.
i€ngöe
);

1358 
	`mu…ôext_‰ì
(&
ge
->
ëa
.
iodïth
);

1359 
	}
}

1361 
GtkWidgë
 *
	$√w_˛õ¡_∑ge
(
gui_íåy
 *
ge
)

1363 
GtkWidgë
 *
maö_vbox
, *
¥obe
, *
¥obe_‰ame
, *
¥obe_box
;

1364 
GtkWidgë
 *
s¸ﬁÀd_wödow
, *
bŸtom_Æign
, *
t›_Æign
, *
t›_vbox
;

1366 
maö_vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 3);

1368 
t›_Æign
 = 
	`gtk_Æignmít_√w
(0, 0, 1, 0);

1369 
t›_vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 3);

1370 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
t›_Æign
), 
t›_vbox
);

1371 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
maö_vbox
), 
t›_Æign
, 
FALSE
, FALSE, 0);

1373 
¥obe
 = 
	`gtk_‰ame_√w
("Job");

1374 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
maö_vbox
), 
¥obe
, 
FALSE
, FALSE, 3);

1375 
¥obe_‰ame
 = 
	`gtk_vbox_√w
(
FALSE
, 3);

1376 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
¥obe
), 
¥obe_‰ame
);

1378 
¥obe_box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

1379 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
¥obe_‰ame
), 
¥obe_box
, 
FALSE
, FALSE, 3);

1380 
ge
->
¥obe
.
ho°«me
 = 
	`√w_öfo_œbñ_ö_‰ame
(
¥obe_box
, "Host");

1381 
ge
->
¥obe
.
os
 = 
	`√w_öfo_œbñ_ö_‰ame
(
¥obe_box
, "OS");

1382 
ge
->
¥obe
.
¨ch
 = 
	`√w_öfo_œbñ_ö_‰ame
(
¥obe_box
, "Architecture");

1383 
ge
->
¥obe
.
fio_vî
 = 
	`√w_öfo_œbñ_ö_‰ame
(
¥obe_box
, "Fio version");

1385 
¥obe_box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

1386 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
¥obe_‰ame
), 
¥obe_box
, 
FALSE
, FALSE, 3);

1388 
ge
->
ëa
.
«mes
 = 
	`√w_combo_íåy_ö_‰ame
(
¥obe_box
, "Jobs");

1389 
	`g_sig«l_c⁄√˘
(
ge
->
ëa
.
«mes
, "ch™ged", 
	`G_CALLBACK
(
combo_íåy_ch™ged
), ge);

1390 
	`g_sig«l_c⁄√˘
(
ge
->
ëa
.
«mes
, "de°roy", 
	`G_CALLBACK
(
combo_íåy_de°roy
), ge);

1391 
ge
->
ëa
.
iŸy≥
.
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
¥obe_box
, "IO");

1392 
ge
->
ëa
.
bs
.
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
¥obe_box
, "Blocksize (Read/Write/Trim)");

1393 
ge
->
ëa
.
i€ngöe
.
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
¥obe_box
, "IO Engine");

1394 
ge
->
ëa
.
iodïth
.
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
¥obe_box
, "IO Depth");

1395 
ge
->
ëa
.
jobs
 = 
	`√w_öfo_íåy_ö_‰ame
(
¥obe_box
, "Jobs");

1396 
ge
->
ëa
.
fûes
 = 
	`√w_öfo_íåy_ö_‰ame
(
¥obe_box
, "Open files");

1398 
¥obe_box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

1399 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
¥obe_‰ame
), 
¥obe_box
, 
FALSE
, FALSE, 3);

1400 
ge
->
ëa
.
ªad_bw
 = 
	`√w_öfo_íåy_ö_‰ame_rgb
(
¥obe_box
, "Ród BW", 
GFIO_READ_R
, 
GFIO_READ_G
, 
GFIO_READ_B
);

1401 
ge
->
ëa
.
ªad_i›s
 = 
	`√w_öfo_íåy_ö_‰ame_rgb
(
¥obe_box
, "Ród IOPS", 
GFIO_READ_R
, 
GFIO_READ_G
, 
GFIO_READ_B
);

1402 
ge
->
ëa
.
wrôe_bw
 = 
	`√w_öfo_íåy_ö_‰ame_rgb
(
¥obe_box
, "WrôêBW", 
GFIO_WRITE_R
, 
GFIO_WRITE_G
, 
GFIO_WRITE_B
);

1403 
ge
->
ëa
.
wrôe_i›s
 = 
	`√w_öfo_íåy_ö_‰ame_rgb
(
¥obe_box
, "WrôêIOPS", 
GFIO_WRITE_R
, 
GFIO_WRITE_G
, 
GFIO_WRITE_B
);

1404 
ge
->
ëa
.
åim_bw
 = 
	`√w_öfo_íåy_ö_‰ame_rgb
(
¥obe_box
, "Trim BW", 
GFIO_TRIM_R
, 
GFIO_TRIM_G
, 
GFIO_TRIM_B
);

1405 
ge
->
ëa
.
åim_i›s
 = 
	`√w_öfo_íåy_ö_‰ame_rgb
(
¥obe_box
, "Trim IOPS", 
GFIO_TRIM_R
, 
GFIO_TRIM_G
, 
GFIO_TRIM_B
);

1411 
¥obe_box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

1412 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
¥obe_‰ame
), 
¥obe_box
, 
TRUE
, 
FALSE
, 3);

1414 
ge
->
ëa
.
¸_bw
 = 
	`√w_öfo_œbñ_ö_‰ame
(
¥obe_box
, "Commit BW");

1415 
ge
->
ëa
.
¸_i›s
 = 
	`√w_öfo_œbñ_ö_‰ame
(
¥obe_box
, "Commit IOPS");

1417 
ge
->
ëa
.
cw_bw
 = 
	`√w_öfo_œbñ_ö_‰ame
(
¥obe_box
, "Commit BW");

1418 
ge
->
ëa
.
cw_i›s
 = 
	`√w_öfo_œbñ_ö_‰ame
(
¥obe_box
, "Commit IOPS");

1424 
ge
->
gøphs
.
døwög_¨ó
 = 
	`gtk_døwög_¨ó_√w
();

1425 
	`gtk_widgë_£t_size_ªque°
(
	`GTK_WIDGET
(
ge
->
gøphs
.
døwög_¨ó
),

1426 
DRAWING_AREA_XDIM
, 
DRAWING_AREA_YDIM
);

1427 
	`gtk_widgë_modify_bg
(
ge
->
gøphs
.
døwög_¨ó
, 
GTK_STATE_NORMAL
, &
gfio_cﬁ‹_lightyñlow
);

1428 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
ge
->
gøphs
.
døwög_¨ó
), 
GFIO_DRAW_EVENT
,

1429 
	`G_CALLBACK
(
⁄_expo£_døwög_¨ó
), &
ge
->
gøphs
);

1430 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
ge
->
gøphs
.
døwög_¨ó
), "configure_event",

1431 
	`G_CALLBACK
(
⁄_c⁄fig_døwög_¨ó
), &
ge
->
gøphs
);

1432 
s¸ﬁÀd_wödow
 = 
	`gtk_s¸ﬁÀd_wödow_√w
(
NULL
, NULL);

1433 
	`gtk_s¸ﬁÀd_wödow_£t_pﬁicy
(
	`GTK_SCROLLED_WINDOW
(
s¸ﬁÀd_wödow
),

1434 
GTK_POLICY_AUTOMATIC
, GTK_POLICY_AUTOMATIC);

1435 
	`gtk_s¸ﬁÀd_wödow_add_wôh_võwp‹t
(
	`GTK_SCROLLED_WINDOW
(
s¸ﬁÀd_wödow
),

1436 
ge
->
gøphs
.
døwög_¨ó
);

1437 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
maö_vbox
), 
s¸ﬁÀd_wödow
, 
TRUE
, TRUE, 0);

1439 
	`£tup_gøphs
(&
ge
->
gøphs
);

1445 
bŸtom_Æign
 = 
	`gtk_Æignmít_√w
(0, 1, 1, 0);

1446 
ge
->
buâ⁄box
 = 
	`gtk_hbox_√w
(
FALSE
, 0);

1447 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
bŸtom_Æign
), 
ge
->
buâ⁄box
);

1448 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
maö_vbox
), 
bŸtom_Æign
, 
FALSE
, FALSE, 0);

1450 
	`add_buâ⁄s
(
ge
, 
buâ⁄•e˛i°
, 
	`FIO_ARRAY_SIZE
(buttonspeclist));

1455 
ge
->
thªad_°©us_pb
 = 
	`gtk_¥ogªss_b¨_√w
();

1456 
	`gtk_¥ogªss_b¨_£t_‰a˘i⁄
(
	`GTK_PROGRESS_BAR
(
ge
->
thªad_°©us_pb
), 0.0);

1457 
	`gtk_¥ogªss_b¨_£t_ãxt
(
	`GTK_PROGRESS_BAR
(
ge
->
thªad_°©us_pb
), "No connections");

1458 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
ge
->
buâ⁄box
), ge->
thªad_°©us_pb
);

1461  
maö_vbox
;

1462 
	}
}

1464 
GtkWidgë
 *
	$√w_maö_∑ge
(
gui
 *
ui
)

1466 
GtkWidgë
 *
maö_vbox
, *
¥obe
, *
¥obe_‰ame
, *
¥obe_box
;

1467 
GtkWidgë
 *
s¸ﬁÀd_wödow
, *
bŸtom_Æign
, *
t›_Æign
, *
t›_vbox
;

1469 
maö_vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 3);

1475 
t›_Æign
 = 
	`gtk_Æignmít_√w
(0, 0, 1, 0);

1476 
t›_vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 0);

1477 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
t›_Æign
), 
t›_vbox
);

1478 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
maö_vbox
), 
t›_Æign
, 
FALSE
, FALSE, 0);

1480 
¥obe
 = 
	`gtk_‰ame_√w
("Run statistics");

1481 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
maö_vbox
), 
¥obe
, 
FALSE
, FALSE, 3);

1482 
¥obe_‰ame
 = 
	`gtk_vbox_√w
(
FALSE
, 3);

1483 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
¥obe
), 
¥obe_‰ame
);

1485 
¥obe_box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

1486 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
¥obe_‰ame
), 
¥obe_box
, 
FALSE
, FALSE, 3);

1487 
ui
->
ëa
.
jobs
 = 
	`√w_öfo_íåy_ö_‰ame
(
¥obe_box
, "Running");

1488 
ui
->
ëa
.
ªad_bw
 = 
	`√w_öfo_íåy_ö_‰ame_rgb
(
¥obe_box
, "Ród BW", 
GFIO_READ_R
, 
GFIO_READ_G
, 
GFIO_READ_B
);

1489 
ui
->
ëa
.
ªad_i›s
 = 
	`√w_öfo_íåy_ö_‰ame_rgb
(
¥obe_box
, "IOPS", 
GFIO_READ_R
, 
GFIO_READ_G
, 
GFIO_READ_B
);

1490 
ui
->
ëa
.
wrôe_bw
 = 
	`√w_öfo_íåy_ö_‰ame_rgb
(
¥obe_box
, "WrôêBW", 
GFIO_WRITE_R
, 
GFIO_WRITE_G
, 
GFIO_WRITE_B
);

1491 
ui
->
ëa
.
wrôe_i›s
 = 
	`√w_öfo_íåy_ö_‰ame_rgb
(
¥obe_box
, "IOPS", 
GFIO_WRITE_R
, 
GFIO_WRITE_G
, 
GFIO_WRITE_B
);

1492 
ui
->
ëa
.
åim_bw
 = 
	`√w_öfo_íåy_ö_‰ame_rgb
(
¥obe_box
, "Trim BW", 
GFIO_TRIM_R
, 
GFIO_TRIM_G
, 
GFIO_TRIM_B
);

1493 
ui
->
ëa
.
åim_i›s
 = 
	`√w_öfo_íåy_ö_‰ame_rgb
(
¥obe_box
, "IOPS", 
GFIO_TRIM_R
, 
GFIO_TRIM_G
, 
GFIO_TRIM_B
);

1499 
¥obe_box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

1500 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
¥obe_‰ame
), 
¥obe_box
, 
TRUE
, 
FALSE
, 3);

1502 
ui
->
ëa
.
¸_bw
 = 
	`√w_öfo_œbñ_ö_‰ame
(
¥obe_box
, "Commit BW");

1503 
ui
->
ëa
.
¸_i›s
 = 
	`√w_öfo_œbñ_ö_‰ame
(
¥obe_box
, "Commit IOPS");

1505 
ui
->
ëa
.
cw_bw
 = 
	`√w_öfo_œbñ_ö_‰ame
(
¥obe_box
, "Commit BW");

1506 
ui
->
ëa
.
cw_i›s
 = 
	`√w_öfo_œbñ_ö_‰ame
(
¥obe_box
, "Commit IOPS");

1512 
ui
->
gøphs
.
døwög_¨ó
 = 
	`gtk_døwög_¨ó_√w
();

1513 
	`gtk_widgë_£t_size_ªque°
(
	`GTK_WIDGET
(
ui
->
gøphs
.
døwög_¨ó
),

1514 
DRAWING_AREA_XDIM
, 
DRAWING_AREA_YDIM
);

1515 
	`gtk_widgë_modify_bg
(
ui
->
gøphs
.
døwög_¨ó
, 
GTK_STATE_NORMAL
, &
gfio_cﬁ‹_lightyñlow
);

1516 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
ui
->
gøphs
.
døwög_¨ó
), 
GFIO_DRAW_EVENT
,

1517 
	`G_CALLBACK
(
⁄_expo£_døwög_¨ó
), &
ui
->
gøphs
);

1518 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
ui
->
gøphs
.
døwög_¨ó
), "configure_event",

1519 
	`G_CALLBACK
(
⁄_c⁄fig_døwög_¨ó
), &
ui
->
gøphs
);

1520 
s¸ﬁÀd_wödow
 = 
	`gtk_s¸ﬁÀd_wödow_√w
(
NULL
, NULL);

1521 
	`gtk_s¸ﬁÀd_wödow_£t_pﬁicy
(
	`GTK_SCROLLED_WINDOW
(
s¸ﬁÀd_wödow
),

1522 
GTK_POLICY_AUTOMATIC
, GTK_POLICY_AUTOMATIC);

1523 
	`gtk_s¸ﬁÀd_wödow_add_wôh_võwp‹t
(
	`GTK_SCROLLED_WINDOW
(
s¸ﬁÀd_wödow
),

1524 
ui
->
gøphs
.
døwög_¨ó
);

1525 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
maö_vbox
), 
s¸ﬁÀd_wödow
,

1526 
TRUE
, TRUE, 0);

1528 
	`£tup_gøphs
(&
ui
->
gøphs
);

1534 
bŸtom_Æign
 = 
	`gtk_Æignmít_√w
(0, 1, 1, 0);

1535 
ui
->
buâ⁄box
 = 
	`gtk_hbox_√w
(
FALSE
, 0);

1536 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
bŸtom_Æign
), 
ui
->
buâ⁄box
);

1537 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
maö_vbox
), 
bŸtom_Æign
, 
FALSE
, FALSE, 0);

1542 
ui
->
thªad_°©us_pb
 = 
	`gtk_¥ogªss_b¨_√w
();

1543 
	`gtk_¥ogªss_b¨_£t_‰a˘i⁄
(
	`GTK_PROGRESS_BAR
(
ui
->
thªad_°©us_pb
), 0.0);

1544 
	`gtk_¥ogªss_b¨_£t_ãxt
(
	`GTK_PROGRESS_BAR
(
ui
->
thªad_°©us_pb
), "No connections");

1545 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
ui
->
buâ⁄box
), ui->
thªad_°©us_pb
);

1547  
maö_vbox
;

1548 
	}
}

1550 
gboﬁón
 
	$nŸebook_swôch_∑ge
(
GtkNŸebook
 *
nŸebook
, 
GtkWidgë
 *
widgë
,

1551 
guöt
 
∑ge
, 
gpoöãr
 
d©a
)

1554 
gui
 *
ui
 = (guò*Ë
d©a
;

1555 
gui_íåy
 *
ge
;

1557 i‡(!
∑ge
) {

1558 
	`£t_job_míu_visibÀ
(
ui
, 0);

1559 
	`£t_võw_ªsu…s_visibÀ
(
ui
, 0);

1560  
TRUE
;

1563 
	`£t_job_míu_visibÀ
(
ui
, 1);

1564 
ge
 = 
	`gë_ge_‰om_∑ge
(
ui
, 
∑ge
, 
NULL
);

1565 i‡(
ge
)

1566 
	`upd©e_buâ⁄_°©es
(
ui
, 
ge
);

1568  
TRUE
;

1569 
	}
}

1571 
göt
 
	$com∑ª_ª˚¡_ôems
(
GtkRe˚¡Info
 *
a
, GtkRe˚¡Infÿ*
b
)

1573 
time_t
 
time_a
 = 
	`gtk_ª˚¡_öfo_gë_visôed
(
a
);

1574 
time_t
 
time_b
 = 
	`gtk_ª˚¡_öfo_gë_visôed
(
b
);

1576  
time_b
 - 
time_a
;

1577 
	}
}

1579 
	$add_ª˚¡_fûe_ôems
(
gui
 *
ui
)

1581 c⁄° 
gch¨
 *
gfio
 = 
	`g_gë_≠∂iˇti⁄_«me
();

1582 
GLi°
 *
ôems
, *
ôem
;

1583 
i
 = 0;

1585 i‡(
ui
->
ª˚¡_ui_id
) {

1586 
	`gtk_ui_m™agî_ªmove_ui
(
ui
->
uim™agî
, ui->
ª˚¡_ui_id
);

1587 
	`gtk_ui_m™agî_ísuª_upd©e
(
ui
->
uim™agî
);

1589 
ui
->
ª˚¡_ui_id
 = 
	`gtk_ui_m™agî_√w_mîge_id
(ui->
uim™agî
);

1591 i‡(
ui
->
a˘i⁄group
) {

1592 
	`gtk_ui_m™agî_ªmove_a˘i⁄_group
(
ui
->
uim™agî
, ui->
a˘i⁄group
);

1593 
	`g_obje˘_uƒef
(
ui
->
a˘i⁄group
);

1595 
ui
->
a˘i⁄group
 = 
	`gtk_a˘i⁄_group_√w
("RecentFileActions");

1597 
	`gtk_ui_m™agî_ö£π_a˘i⁄_group
(
ui
->
uim™agî
, ui->
a˘i⁄group
, -1);

1599 
ôems
 = 
	`gtk_ª˚¡_m™agî_gë_ôems
(
ui
->
ª˚¡m™agî
);

1600 
ôems
 = 
	`g_li°_s‹t
(ôems, (
GCom∑ªFunc
Ë
com∑ª_ª˚¡_ôems
);

1602 
ôem
 = 
ôems
; iãm && iãm->
d©a
; iãm = 
	`g_li°_√xt
(item)) {

1603 
GtkRe˚¡Info
 *
öfo
 = (GtkRe˚¡Infÿ*Ë
ôem
->
d©a
;

1604 
gch¨
 *
a˘i⁄_«me
;

1605 c⁄° 
gch¨
 *
œbñ
;

1606 
GtkA˘i⁄
 *
a˘i⁄
;

1608 i‡(!
	`gtk_ª˚¡_öfo_has_≠∂iˇti⁄
(
öfo
, 
gfio
))

1614 i‡(!
	`gtk_ª˚¡_öfo_is_loˇl
(
öfo
Ë|| !
	`gtk_ª˚¡_öfo_exi°s
(info))

1617 
a˘i⁄_«me
 = 
	`g_°rdup_¥ötf
("Re˚¡Fûe%u", 
i
++);

1618 
œbñ
 = 
	`gtk_ª˚¡_öfo_gë_di•œy_«me
(
öfo
);

1620 
a˘i⁄
 = 
	`g_obje˘_√w
(
GTK_TYPE_ACTION
,

1621 "«me", 
a˘i⁄_«me
,

1622 "œbñ", 
œbñ
, 
NULL
);

1624 
	`g_obje˘_£t_d©a_fuŒ
(
	`G_OBJECT
(
a˘i⁄
), "gtk-recent-info",

1625 
	`gtk_ª˚¡_öfo_ªf
(
öfo
),

1626 (
GDe°royNŸify
Ë
gtk_ª˚¡_öfo_uƒef
);

1629 
	`g_sig«l_c⁄√˘
(
a˘i⁄
, "a˘iv©e", 
	`G_CALLBACK
(
ª˚¡_›í
), 
ui
);

1631 
	`gtk_a˘i⁄_group_add_a˘i⁄
(
ui
->
a˘i⁄group
, 
a˘i⁄
);

1632 
	`g_obje˘_uƒef
(
a˘i⁄
);

1634 
	`gtk_ui_m™agî_add_ui
(
ui
->
uim™agî
, ui->
ª˚¡_ui_id
,

1636 
œbñ
, 
a˘i⁄_«me
,

1637 
GTK_UI_MANAGER_MENUITEM
, 
FALSE
);

1639 
	`g_‰ì
(
a˘i⁄_«me
);

1641 i‡(
i
 == 8)

1645 
	`g_li°_f‹óch
(
ôems
, (
GFunc
Ë
gtk_ª˚¡_öfo_uƒef
, 
NULL
);

1646 
	`g_li°_‰ì
(
ôems
);

1647 
	}
}

1649 
	$døg_™d_dr›_ª˚ived
(
GtkWidgë
 *
widgë
, 
GdkDøgC⁄ãxt
 *
˘x
,

1650 
göt
 
x
, göà
y
, 
GtkSñe˘i⁄D©a
 *
£ld©a
,

1651 
guöt
 
öfo
, guöà
time
, 
gpoöãr
 *
d©a
)

1653 
gui
 *
ui
 = (guò*Ë
d©a
;

1654 
gch¨
 **
uris
;

1655 
GtkWidgë
 *
sour˚
;

1657 
sour˚
 = 
	`gtk_døg_gë_sour˚_widgë
(
˘x
);

1658 i‡(
sour˚
 && 
widgë
 =
	`gtk_widgë_gë_t›Àvñ
(source)) {

1659 
	`gtk_døg_föish
(
˘x
, 
FALSE
, FALSE, 
time
);

1663 
uris
 = 
	`gtk_£À˘i⁄_d©a_gë_uris
(
£ld©a
);

1664 i‡(!
uris
) {

1665 
	`gtk_døg_föish
(
˘x
, 
FALSE
, FALSE, 
time
);

1669 i‡(
uris
[0])

1670 
	`do_fûe_›í_wôh_èb
(
ui
, 
uris
[0]);

1672 
	`gtk_døg_föish
(
˘x
, 
TRUE
, 
FALSE
, 
time
);

1673 
	`g_°r‰ìv
(
uris
);

1674 
	}
}

1676 
	$öô_ui
(*
¨gc
, **
¨gv
[], 
gui
 *
ui
)

1678 
GtkSëtögs
 *
£âögs
;

1679 
GtkWidgë
 *
vbox
;

1685 #i‡!
	`GLIB_CHECK_VERSION
(2, 31, 0)

1686 i‡(!
	`g_thªad_suµ‹ãd
())

1687 
	`g_thªad_öô
(
NULL
);

1690 
	`gdk_thªads_öô
();

1692 
	`gtk_öô
(
¨gc
, 
¨gv
);

1693 
£âögs
 = 
	`gtk_£âögs_gë_deÁu…
();

1694 
	`gtk_£âögs_£t_l⁄g_¥›îty
(
£âögs
, "gtk_tooltip_timeout", 10, "gfio setting");

1695 #i‡!
	`GLIB_CHECK_VERSION
(2, 36, 0)

1696 
	`g_ty≥_öô
();

1698 
	`gdk_cﬁ‹_∑r£
("#fffff4", &
gfio_cﬁ‹_lightyñlow
);

1699 
	`gdk_cﬁ‹_∑r£
("whôe", &
gfio_cﬁ‹_whôe
);

1701 
ui
->
wödow
 = 
	`gtk_wödow_√w
(
GTK_WINDOW_TOPLEVEL
);

1702 
	`gtk_wödow_£t_tôÀ
(
	`GTK_WINDOW
(
ui
->
wödow
), "fio");

1703 
	`gtk_wödow_£t_deÁu…_size
(
	`GTK_WINDOW
(
ui
->
wödow
), 1024, 768);

1705 
	`g_sig«l_c⁄√˘
(
ui
->
wödow
, "dñëe-evít", 
	`G_CALLBACK
(
quô_˛icked
), ui);

1706 
	`g_sig«l_c⁄√˘
(
ui
->
wödow
, "de°roy", 
	`G_CALLBACK
(
quô_˛icked
), ui);

1708 
ui
->
vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 0);

1709 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
ui
->
wödow
), ui->
vbox
);

1711 
ui
->
uim™agî
 = 
	`gtk_ui_m™agî_√w
();

1712 
ui
->
míu
 = 
	`gë_míub¨_míu
(ui->
wödow
, ui->
uim™agî
, ui);

1713 
	`gfio_ui_£tup
(
£âögs
, 
ui
->
míu
, ui->
vbox
, ui->
uim™agî
);

1715 
ui
->
ª˚¡m™agî
 = 
	`gtk_ª˚¡_m™agî_gë_deÁu…
();

1716 
	`add_ª˚¡_fûe_ôems
(
ui
);

1718 
ui
->
nŸebook
 = 
	`gtk_nŸebook_√w
();

1719 
	`g_sig«l_c⁄√˘
(
ui
->
nŸebook
, "swôch-∑ge", 
	`G_CALLBACK
(
nŸebook_swôch_∑ge
), ui);

1720 
	`gtk_nŸebook_£t_s¸ﬁœbÀ
(
	`GTK_NOTEBOOK
(
ui
->
nŸebook
), 1);

1721 
	`gtk_nŸebook_p›up_íabÀ
(
	`GTK_NOTEBOOK
(
ui
->
nŸebook
));

1722 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
ui
->
vbox
), ui->
nŸebook
);

1724 
vbox
 = 
	`√w_maö_∑ge
(
ui
);

1725 
	`gtk_døg_de°_£t
(
	`GTK_WIDGET
(
ui
->
wödow
), 
GTK_DEST_DEFAULT_ALL
, 
NULL
, 1, 
GDK_ACTION_COPY
);

1726 
	`gtk_døg_de°_add_uri_èrgës
(
	`GTK_WIDGET
(
ui
->
wödow
));

1727 
	`g_sig«l_c⁄√˘
(
ui
->
wödow
, "døg-d©a-ª˚ived", 
	`G_CALLBACK
(
døg_™d_dr›_ª˚ived
), ui);

1729 
	`gtk_nŸebook_≠≥nd_∑ge
(
	`GTK_NOTEBOOK
(
ui
->
nŸebook
), 
vbox
, 
	`gtk_œbñ_√w
("Main"));

1731 
	`gfio_ui_£tup_log
(
ui
);

1733 
	`gtk_widgë_show_Æl
(
ui
->
wödow
);

1734 
	}
}

1736 
	$maö
(
¨gc
, *
¨gv
[], *
ívp
[])

1738 i‡(
	`öôülize_fio
(
ívp
))

1740 i‡(
	`fio_öô_›ti⁄s
())

1743 
	`g›t_öô
();

1745 
	`mem£t
(&
maö_ui
, 0, (main_ui));

1746 
maö_ui
.
ge_hash
 = 
	`g_hash_èbÀ_√w
(
g_öt_hash
, 
g_öt_equÆ
);

1748 
	`öô_ui
(&
¨gc
, &
¨gv
, &
maö_ui
);

1750 
	`gdk_thªads_íãr
();

1751 
	`gtk_maö
();

1752 
	`gdk_thªads_Àave
();

1754 
	`g_hash_èbÀ_de°roy
(
maö_ui
.
ge_hash
);

1756 
	`g›t_exô
();

1758 
	}
}

	@gfio.h

1 #i‚de‡
GFIO_H


2 
	#GFIO_H


	)

4 
	~<gtk/gtk.h
>

6 
	~"gcom∑t.h
"

7 
	~"°©.h
"

8 
	~"thªad_›ti⁄s.h
"

9 
	~"ghñ≥rs.h
"

10 
	~"gøph.h
"

12 
	s¥obe_widgë
 {

13 
GtkWidgë
 *
	mho°«me
;

14 
GtkWidgë
 *
	mos
;

15 
GtkWidgë
 *
	m¨ch
;

16 
GtkWidgë
 *
	mfio_vî
;

19 
	sëa_widgë
 {

20 
GtkWidgë
 *
	m«mes
;

21 
mu…ôext_widgë
 
	miŸy≥
;

22 
mu…ôext_widgë
 
	mbs
;

23 
mu…ôext_widgë
 
	mi€ngöe
;

24 
mu…ôext_widgë
 
	miodïth
;

25 
GtkWidgë
 *
	mjobs
;

26 
GtkWidgë
 *
	mfûes
;

27 
GtkWidgë
 *
	mªad_bw
;

28 
GtkWidgë
 *
	mªad_i›s
;

29 
GtkWidgë
 *
	m¸_bw
;

30 
GtkWidgë
 *
	m¸_i›s
;

31 
GtkWidgë
 *
	mwrôe_bw
;

32 
GtkWidgë
 *
	mwrôe_i›s
;

33 
GtkWidgë
 *
	mcw_bw
;

34 
GtkWidgë
 *
	mcw_i›s
;

35 
GtkWidgë
 *
	måim_bw
;

36 
GtkWidgë
 *
	måim_i›s
;

39 
	sgfio_gøphs
 {

40 
	#DRAWING_AREA_XDIM
 1000

	)

41 
	#DRAWING_AREA_YDIM
 400

	)

42 
GtkWidgë
 *
	mdøwög_¨ó
;

43 
gøph
 *
	mi›s_gøph
;

44 
gøph_œbñ_t
 
	mªad_i›s
;

45 
gøph_œbñ_t
 
	mwrôe_i›s
;

46 
gøph_œbñ_t
 
	måim_i›s
;

47 
gøph
 *
	mb™dwidth_gøph
;

48 
gøph_œbñ_t
 
	mªad_bw
;

49 
gøph_œbñ_t
 
	mwrôe_bw
;

50 
gøph_œbñ_t
 
	måim_bw
;

56 
	sgui
 {

57 
GtkUIM™agî
 *
	muim™agî
;

58 
GtkRe˚¡M™agî
 *
	mª˚¡m™agî
;

59 
GtkA˘i⁄Group
 *
	ma˘i⁄group
;

60 
guöt
 
	mª˚¡_ui_id
;

61 
GtkWidgë
 *
	mmíu
;

62 
GtkWidgë
 *
	mwödow
;

63 
GtkWidgë
 *
	mvbox
;

64 
GtkWidgë
 *
	mthªad_°©us_pb
;

65 
GtkWidgë
 *
	mbuâ⁄box
;

66 
GtkWidgë
 *
	mnŸebook
;

67 
GtkWidgë
 *
	mîr‹_öfo_b¨
;

68 
GtkWidgë
 *
	mîr‹_œbñ
;

69 
GtkLi°St‹e
 *
	mlog_modñ
;

70 
GtkWidgë
 *
	mlog_åì
;

71 
GtkWidgë
 *
	mlog_võw
;

72 
gfio_gøphs
 
	mgøphs
;

73 
¥obe_widgë
 
	m¥obe
;

74 
ëa_widgë
 
	mëa
;

75 
±hªad_t
 
	m£rvî_t
;

77 
±hªad_t
 
	mt
;

78 
	mh™dÀr_ru¬ög
;

80 
GHashTabÀ
 *
	mge_hash
;

83 
gui
 
maö_ui
;

86 
	mGE_STATE_NEW
 = 1,

87 
	mGE_STATE_CONNECTED
,

88 
	mGE_STATE_JOB_SENT
,

89 
	mGE_STATE_JOB_STARTED
,

90 
	mGE_STATE_JOB_RUNNING
,

91 
	mGE_STATE_JOB_DONE
,

95 
	mGFIO_BUTTON_CONNECT
 = 0,

96 
	mGFIO_BUTTON_SEND
,

97 
	mGFIO_BUTTON_START
,

98 
	mGFIO_BUTTON_NR
,

104 
	sgui_íåy
 {

105 
gui
 *
	mui
;

107 
GtkWidgë
 *
	mvbox
;

108 
GtkWidgë
 *
	mjob_nŸebook
;

109 
GtkWidgë
 *
	mthªad_°©us_pb
;

110 
GtkWidgë
 *
	mbuâ⁄box
;

111 
GtkWidgë
 *
	mbuâ⁄
[
GFIO_BUTTON_NR
];

112 
GtkWidgë
 *
	mnŸebook
;

113 
GtkWidgë
 *
	mîr‹_öfo_b¨
;

114 
GtkWidgë
 *
	mîr‹_œbñ
;

115 
GtkWidgë
 *
	mªsu…s_wödow
;

116 
GtkWidgë
 *
	mªsu…s_nŸebook
;

117 
GtkUIM™agî
 *
	mªsu…s_uim™agî
;

118 
GtkWidgë
 *
	mªsu…s_míu
;

119 
GtkWidgë
 *
	mdisk_utû_vbox
;

120 
GtkLi°St‹e
 *
	mlog_modñ
;

121 
GtkWidgë
 *
	mlog_åì
;

122 
GtkWidgë
 *
	mlog_võw
;

123 
gfio_gøphs
 
	mgøphs
;

124 
¥obe_widgë
 
	m¥obe
;

125 
ëa_widgë
 
	mëa
;

126 
GtkWidgë
 *
	m∑ge_œbñ
;

127 
göt
 
	m∑ge_num
;

128 
	m°©e
;

130 
gøph
 *
	m˛©_gøph
;

131 
gøph
 *
	mœt_buckë_gøph
;

133 
gfio_˛õ¡
 *
	m˛õ¡
;

134 *
	mjob_fûe
;

135 *
	mho°
;

136 
	mp‹t
;

137 
	mty≥
;

138 
	m£rvî_°¨t
;

141 
	síd_ªsu…s
 {

142 
group_run_°©s
 
	mgs
;

143 
thªad_°©
 
	mts
;

146 
	sgfio_˛õ¡_›ti⁄s
 {

147 
Êi°_hód
 
	mli°
;

148 
thªad_›ti⁄s
 
	mo
;

151 
	sgfio_˛õ¡
 {

152 
gui_íåy
 *
	mge
;

153 
fio_˛õ¡
 *
	m˛õ¡
;

154 
GtkWidgë
 *
	mîr_íåy
;

155 
uöt32_t
 
	m˛õ¡_˝us
;

156 
uöt64_t
 
	m˛õ¡_Êags
;

158 
Êi°_hód
 
	mo_li°
;

159 
	mo_li°_ƒ
;

161 
íd_ªsu…s
 *
	mªsu…s
;

162 
	mƒ_ªsu…s
;

164 
uöt32_t
 
	mupd©e_job_°©us
;

165 vﬁ©ûê
uöt32_t
 
	mupd©e_job_d⁄e
;

167 
cmd_du_pdu
 *
	mdu
;

168 
	mƒ_du
;

171 
	#GFIO_MIME
 "ãxt/fio"

	)

173 
gfio_võw_log
(
gui
 *
ui
);

174 
gfio_£t_°©e
(
gui_íåy
 *
ge
, 
°©e
);

175 
˛ór_ge_ui_öfo
(
gui_íåy
 *
ge
);

177 c⁄° *
gfio_gøph_f⁄t
;

178 
GdkCﬁ‹
 
gfio_cﬁ‹_whôe
;

179 
GdkCﬁ‹
 
gfio_cﬁ‹_lightyñlow
;

	@ghelpers.c

1 
	~<°dlib.h
>

2 
	~<°rög.h
>

3 
	~<gtk/gtk.h
>

5 
	~"gcom∑t.h
"

6 
	~"ghñ≥rs.h
"

8 
GtkWidgë
 *
	$√w_combo_íåy_ö_‰ame
(
GtkWidgë
 *
box
, c⁄° *
œbñ
)

10 
GtkWidgë
 *
íåy
, *
‰ame
;

12 
‰ame
 = 
	`gtk_‰ame_√w
(
œbñ
);

13 
íåy
 = 
	`gtk_combo_box_ãxt_√w
();

14 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
‰ame
, 
TRUE
, TRUE, 3);

15 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
íåy
);

17  
íåy
;

18 
	}
}

20 
GtkWidgë
 *
	$√w_öfo_íåy_ö_‰ame
(
GtkWidgë
 *
box
, c⁄° *
œbñ
)

22 
GtkWidgë
 *
íåy
, *
‰ame
;

24 
‰ame
 = 
	`gtk_‰ame_√w
(
œbñ
);

25 
íåy
 = 
	`gtk_íåy_√w
();

26 
	`gtk_edôabÀ_£t_edôabÀ
(
	`GTK_EDITABLE
(
íåy
), 0);

27 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
‰ame
, 
TRUE
, TRUE, 3);

28 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
íåy
);

30  
íåy
;

31 
	}
}

33 
	$fûl_cﬁ‹_‰om_rgb
(
GdkCﬁ‹
 *
c
, 
gÊﬂt
 
r
, gÊﬂà
g
, gÊﬂà
b
)

35 
göt
 
R
, 
G
, 
B
;

36 
gch¨
 
tmp
[8];

38 
	`mem£t
(
c
, 0, (*c));

39 
R
 = 
r
 * 255;

40 
G
 = 
g
 * 255;

41 
B
 = 
b
 * 255;

42 
	`¢¥ötf
(
tmp
, —mp), "#%02x%02x%02x", 
R
, 
G
, 
B
);

43 
	`gdk_cﬁ‹_∑r£
(
tmp
, 
c
);

44 
	}
}

46 
GtkWidgë
 *
	$√w_öfo_íåy_ö_‰ame_rgb
(
GtkWidgë
 *
box
, c⁄° *
œbñ
,

47 
gÊﬂt
 
r
, gÊﬂà
g
, gÊﬂà
b
)

49 
GtkWidgë
 *
íåy
;

50 
GdkCﬁ‹
 
c
;

52 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
box
, 
œbñ
);

53 
	`fûl_cﬁ‹_‰om_rgb
(&
c
, 
r
, 
g
, 
b
);

54 
	`gtk_widgë_modify_ãxt
(
íåy
, 
GTK_STATE_NORMAL
, &
c
);

55  
íåy
;

56 
	}
}

58 
GtkWidgë
 *
	$√w_öfo_œbñ_ö_‰ame
(
GtkWidgë
 *
box
, c⁄° *
œbñ
)

60 
GtkWidgë
 *
œbñ_widgë
;

61 
GtkWidgë
 *
‰ame
;

63 
‰ame
 = 
	`gtk_‰ame_√w
(
œbñ
);

64 
œbñ_widgë
 = 
	`gtk_œbñ_√w
(
NULL
);

65 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
‰ame
, 
TRUE
, TRUE, 3);

66 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
œbñ_widgë
);

68  
œbñ_widgë
;

69 
	}
}

71 
GtkWidgë
 *
	$¸óã_•öbuâ⁄
(
GtkWidgë
 *
hbox
, 
mö
, 
max
, 
defvÆ
)

73 
GtkWidgë
 *
buâ⁄
, *
box
;

75 
box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

76 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
hbox
), 
box
);

78 
buâ⁄
 = 
	`gtk_•ö_buâ⁄_√w_wôh_ønge
(
mö
, 
max
, 1.0);

79 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
buâ⁄
, 
TRUE
, TRUE, 0);

81 
	`gtk_•ö_buâ⁄_£t_upd©e_pﬁicy
(
	`GTK_SPIN_BUTTON
(
buâ⁄
), 
GTK_UPDATE_IF_VALID
);

82 
	`gtk_•ö_buâ⁄_£t_vÆue
(
	`GTK_SPIN_BUTTON
(
buâ⁄
), 
defvÆ
);

84  
buâ⁄
;

85 
	}
}

87 
	$œbñ_£t_öt_vÆue
(
GtkWidgë
 *
íåy
, 
vÆ
)

89 
tmp
[80];

91 
	`•rötf
(
tmp
, "%u", 
vÆ
);

92 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
íåy
), 
tmp
);

93 
	}
}

95 
	$íåy_£t_öt_vÆue
(
GtkWidgë
 *
íåy
, 
vÆ
)

97 
tmp
[80];

99 
	`•rötf
(
tmp
, "%u", 
vÆ
);

100 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
íåy
), 
tmp
);

101 
	}
}

103 
GtkTªeVõwCﬁumn
 *
	$åì_võw_cﬁumn
(
GtkWidgë
 *
åì_võw
, 
ödex
, c⁄° *
tôÀ
, 
Êags
)

105 
GtkCñlRídîî
 *
ªndîî
;

106 
GtkTªeVõwCﬁumn
 *
cﬁ
;

107 
xÆign
 = 0.0;

108 
P™goAlignmít
 
Æign
;

109 
gboﬁón
 
visibÀ
;

111 
Æign
 = (
Êags
 & 
ALIGN_LEFT
Ë? 
PANGO_ALIGN_LEFT
 :

112 (
Êags
 & 
ALIGN_RIGHT
Ë? 
PANGO_ALIGN_RIGHT
 :

113 
PANGO_ALIGN_CENTER
;

114 
visibÀ
 = !(
Êags
 & 
INVISIBLE
);

116 
ªndîî
 = 
	`gtk_˚Œ_ªndîî_ãxt_√w
();

117 
cﬁ
 = 
	`gtk_åì_võw_cﬁumn_√w
();

119 
	`gtk_åì_võw_cﬁumn_£t_tôÀ
(
cﬁ
, 
tôÀ
);

120 i‡(!(
Êags
 & 
UNSORTABLE
))

121 
	`gtk_åì_võw_cﬁumn_£t_s‹t_cﬁumn_id
(
cﬁ
, 
ödex
);

122 
	`gtk_åì_võw_cﬁumn_£t_ªsizabÀ
(
cﬁ
, 
TRUE
);

123 
	`gtk_åì_võw_cﬁumn_∑ck_°¨t
(
cﬁ
, 
ªndîî
, 
TRUE
);

124 
	`gtk_åì_võw_cﬁumn_£t_ex∑nd
(
cﬁ
, 
TRUE
);

125 
	`gtk_åì_võw_cﬁumn_add_©åibuã
(
cﬁ
, 
ªndîî
, "ãxt", 
ödex
);

126 
	`g_obje˘_£t
(
	`G_OBJECT
(
ªndîî
), "Æignmít", 
Æign
, 
NULL
);

127 
Æign
) {

128 
PANGO_ALIGN_LEFT
:

129 
xÆign
 = 0.0;

131 
PANGO_ALIGN_CENTER
:

132 
xÆign
 = 0.5;

134 
PANGO_ALIGN_RIGHT
:

135 
xÆign
 = 1.0;

138 
	`gtk_˚Œ_ªndîî_£t_Æignmít
(
	`GTK_CELL_RENDERER
(
ªndîî
), 
xÆign
, 0.5);

139 
	`gtk_åì_võw_cﬁumn_£t_visibÀ
(
cﬁ
, 
visibÀ
);

140 
	`gtk_åì_võw_≠≥nd_cﬁumn
(
	`GTK_TREE_VIEW
(
åì_võw
), 
cﬁ
);

141  
cﬁ
;

142 
	}
}

144 
	$mu…ôext_add_íåy
(
mu…ôext_widgë
 *
mt
, c⁄° *
ãxt
)

146 
mt
->
ãxt
 = 
	`ªÆloc
(mt->ãxt, (mt->
max_ãxt
 + 1) * (*));

147 
mt
->
ãxt
[mt->
max_ãxt
] = 
	`°rdup
(text);

148 
mt
->
max_ãxt
++;

149 
	}
}

151 
	$mu…ôext_£t_íåy
(
mu…ôext_widgë
 *
mt
, 
ödex
)

153 i‡(
ödex
 >
mt
->
max_ãxt
)

155 i‡(!
mt
->
ãxt
 || !mt->ãxt[
ödex
])

158 
mt
->
cur_ãxt
 = 
ödex
;

159 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
mt
->
íåy
), mt->
ãxt
[
ödex
]);

160 
	}
}

162 
	$mu…ôext_upd©e_íåy
(
mu…ôext_widgë
 *
mt
, 
ödex
,

163 c⁄° *
ãxt
)

165 i‡(!
mt
->
ãxt
)

168 i‡(
mt
->
ãxt
[
ödex
])

169 
	`‰ì
(
mt
->
ãxt
[
ödex
]);

171 
mt
->
ãxt
[
ödex
] = 
	`°rdup
(text);

172 i‡(
mt
->
cur_ãxt
 =
ödex
)

173 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
mt
->
íåy
), mt->
ãxt
[
ödex
]);

174 
	}
}

176 
	$mu…ôext_‰ì
(
mu…ôext_widgë
 *
mt
)

178 
i
;

180 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
mt
->
íåy
), "");

182 
i
 = 0; i < 
mt
->
max_ãxt
; i++) {

183 i‡(
mt
->
ãxt
[
i
])

184 
	`‰ì
(
mt
->
ãxt
[
i
]);

187 
	`‰ì
(
mt
->
ãxt
);

188 
mt
->
cur_ãxt
 = -1;

189 
mt
->
max_ãxt
 = 0;

190 
	}
}

192 
GtkWidgë
 *
	$gë_s¸ﬁÀd_wödow
(
göt
 
b‹dî_width
)

194 
GtkWidgë
 *
s¸ﬁl
;

196 
s¸ﬁl
 = 
	`gtk_s¸ﬁÀd_wödow_√w
(
NULL
, NULL);

197 
	`gtk_c⁄èöî_£t_b‹dî_width
(
	`GTK_CONTAINER
(
s¸ﬁl
), 
b‹dî_width
);

198 
	`gtk_s¸ﬁÀd_wödow_£t_pﬁicy
(
	`GTK_SCROLLED_WINDOW
(
s¸ﬁl
), 
GTK_POLICY_AUTOMATIC
, GTK_POLICY_AUTOMATIC);

200  
s¸ﬁl
;

201 
	}
}

	@ghelpers.h

1 #i‚de‡
GFIO_HELPERS_H


2 
	#GFIO_HELPERS_H


	)

4 
GtkWidgë
 *
√w_combo_íåy_ö_‰ame
(GtkWidgë *
box
, c⁄° *
œbñ
);

5 
GtkWidgë
 *
√w_öfo_íåy_ö_‰ame
(GtkWidgë *
box
, c⁄° *
œbñ
);

6 
GtkWidgë
 *
√w_öfo_œbñ_ö_‰ame
(GtkWidgë *
box
, c⁄° *
œbñ
);

7 
GtkWidgë
 *
√w_öfo_íåy_ö_‰ame_rgb
(GtkWidgë *
box
, c⁄° *
œbñ
,

8 
gÊﬂt
 
r
, gÊﬂà
g
, gÊﬂà
b
);

9 
GtkWidgë
 *
¸óã_•öbuâ⁄
(GtkWidgë *
hbox
, 
mö
, 
max
, 
defvÆ
);

10 
œbñ_£t_öt_vÆue
(
GtkWidgë
 *
íåy
, 
vÆ
);

11 
íåy_£t_öt_vÆue
(
GtkWidgë
 *
íåy
, 
vÆ
);

13 
GtkWidgë
 *
gë_s¸ﬁÀd_wödow
(
göt
 
b‹dî_width
);

15 
	smu…ôext_widgë
 {

16 
GtkWidgë
 *
	míåy
;

17 **
	mãxt
;

18 
	mcur_ãxt
;

19 
	mmax_ãxt
;

22 
mu…ôext_add_íåy
(
mu…ôext_widgë
 *
mt
, c⁄° *
ãxt
);

23 
mu…ôext_£t_íåy
(
mu…ôext_widgë
 *
mt
, 
ödex
);

24 
mu…ôext_upd©e_íåy
(
mu…ôext_widgë
 *
mt
, 
ödex
,

25 c⁄° *
ãxt
);

26 
mu…ôext_‰ì
(
mu…ôext_widgë
 *
mt
);

28 
	#ALIGN_LEFT
 1

	)

29 
	#ALIGN_RIGHT
 2

	)

30 
	#INVISIBLE
 4

	)

31 
	#UNSORTABLE
 8

	)

33 
GtkTªeVõwCﬁumn
 *
åì_võw_cﬁumn
(
GtkWidgë
 *
åì_võw
, 
ödex
, c⁄° *
tôÀ
, 
Êags
);

	@goptions.c

1 
	~<loˇÀ.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

5 
	~<glib.h
>

6 
	~<ˇúo.h
>

7 
	~<gtk/gtk.h
>

9 
	~"fio.h
"

10 
	~"gfio.h
"

11 
	~"ghñ≥rs.h
"

12 
	~"gîr‹.h
"

13 
	~"∑r£.h
"

14 
	~"›tgroup.h
"

16 
	sg›t
 {

17 
GtkWidgë
 *
	mbox
;

18 
	m›t_ödex
;

19 
	m›t_ty≥
;

20 
gul⁄g
 
	msig_h™dÀr
;

21 
g›t_job_võw
 *
	mgjv
;

22 
Êi°_hód
 
	mch™ged_li°
;

25 
	sg›t_combo
 {

26 
g›t
 
	mg›t
;

27 
GtkWidgë
 *
	mcombo
;

30 
	sg›t_öt
 {

31 
g›t
 
	mg›t
;

32 
	mœ°vÆ
;

33 
GtkWidgë
 *
	m•ö
;

36 
	sg›t_boﬁ
 {

37 
g›t
 
	mg›t
;

38 
GtkWidgë
 *
	mcheck
;

41 
	sg›t_°r
 {

42 
g›t
 
	mg›t
;

43 
GtkWidgë
 *
	míåy
;

46 
	sg›t_°r_vÆ
 {

47 
g›t
 
	mg›t
;

48 
GtkWidgë
 *
	m•ö
;

49 
GtkWidgë
 *
	mcombo
;

50 
	mmaxödex
;

53 
	#GOPT_RANGE_SPIN
 4

	)

55 
	sg›t_ønge
 {

56 
g›t
 
	mg›t
;

57 
GtkWidgë
 *
	m•ös
[
GOPT_RANGE_SPIN
];

60 
	sg›t_°r_mu…i
 {

61 
g›t
 
	mg›t
;

62 
GtkWidgë
 *
	mchecks
[
PARSE_MAX_VP
];

66 
	mGOPT_COMBO_INT
 = 1,

67 
	mGOPT_COMBO_STR
,

68 
	mGOPT_INT
,

69 
	mGOPT_BOOL
,

70 
	mGOPT_STR
,

71 
	mGOPT_STR_VAL
,

72 
	mGOPT_RANGE
,

73 
	mGOPT_STR_MULTI
,

76 
	sg›t_‰ame_widgë
 {

77 
GtkWidgë
 *
	mvbox
[2];

78 
	mƒ
;

81 
	sg›t_job_võw
 {

82 
g›t_‰ame_widgë
 
	mg_widgës
[
__FIO_OPT_G_NR
];

83 
GtkWidgë
 *
	mvboxes
[
__FIO_OPT_C_NR
];

84 
g›t
 *
	mg›ts
[
FIO_MAX_OPTS
];

85 
GtkWidgë
 *
	mdülog
;

86 
GtkWidgë
 *
	mjob_combo
;

87 
gfio_˛õ¡
 *
	m˛õ¡
;

88 
Êi°_hód
 
	mch™ged_li°
;

89 
thªad_›ti⁄s
 *
	mo
;

90 
	mö_job_swôch
;

93 
GNode
 *
	gg›t_dï_åì
;

95 
GtkWidgë
 *
	$g›t_gë_group_‰ame
(
g›t_job_võw
 *
gjv
,

96 
GtkWidgë
 *
box
, 
uöt64_t
 
groupmask
)

98 
uöt64_t
 
mask
, 
group
;

99 c⁄° 
›t_group
 *
og
;

100 
GtkWidgë
 *
‰ame
, *
hbox
;

101 
g›t_‰ame_widgë
 *
gfw
;

103 i‡(!
groupmask
)

106 
mask
 = 
groupmask
;

107 
og
 = 
	`›t_group_ˇt_‰om_mask
(&
mask
);

108 i‡(!
og
)

109  
NULL
;

111 
group
 = 
	`ffz64
(~
groupmask
);

112 
gfw
 = &
gjv
->
g_widgës
[
group
];

113 i‡(!
gfw
->
vbox
[0]) {

114 
‰ame
 = 
	`gtk_‰ame_√w
(
og
->
«me
);

115 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
‰ame
, 
FALSE
, FALSE, 3);

116 
hbox
 = 
	`gtk_hbox_√w
(
FALSE
, 0);

117 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
hbox
);

118 
gfw
->
vbox
[0] = 
	`gtk_vbox_√w
(
TRUE
, 5);

119 
gfw
->
vbox
[1] = 
	`gtk_vbox_√w
(
TRUE
, 5);

120 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox
), 
gfw
->
vbox
[0], 
TRUE
, TRUE, 5);

121 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox
), 
gfw
->
vbox
[1], 
TRUE
, TRUE, 5);

124 
hbox
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

125 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
gfw
->
vbox
[gfw->
ƒ
++ & 1]), 
hbox
, 
FALSE
, FALSE, 5);

126  
hbox
;

127 
	}
}

132 
	$g›t_£t_chûdªn_visibÀ
(
g›t_job_võw
 *
gjv
,

133 
fio_›ti⁄
 *
∑ª¡
,

134 
gboﬁón
 
visibÀ
)

136 
GNode
 *
chûd
, *
node
;

138 i‡(
∑ª¡
->
hide_⁄_£t
)

139 
visibÀ
 = !visible;

141 
node
 = 
	`g_node_föd
(
g›t_dï_åì
, 
G_IN_ORDER
, 
G_TRAVERSE_ALL
, 
∑ª¡
);

142 
chûd
 = 
	`g_node_fú°_chûd
(
node
);

143 
chûd
) {

144 
fio_›ti⁄
 *
o
 = 
chûd
->
d©a
;

145 
g›t
 *
g
 = 
o
->
gui_d©a
;

146 
GtkWidgë
 *
widgë
 = 
g
->
box
;

151 i‡(
	`g_node_n_chûdªn
(
chûd
))

152 
	`g›t_£t_chûdªn_visibÀ
(
gjv
, 
o
, 
visibÀ
);

154 
	`gtk_widgë_£t_£nsôive
(
widgë
, 
visibÀ
);

155 
chûd
 = 
	`g_node_√xt_siblög
(child);

157 
	}
}

159 
	$g›t_m¨k_ödex
(
g›t_job_võw
 *
gjv
, 
g›t
 *gopt,

160 
idx
, 
ty≥
)

162 
	`INIT_FLIST_HEAD
(&
g›t
->
ch™ged_li°
);

164 
	`as£π
(!
gjv
->
g›ts
[
idx
]);

165 
g›t
->
›t_ödex
 = 
idx
;

166 
g›t
->
›t_ty≥
 = 
ty≥
;

167 
g›t
->
gjv
 = gjv;

168 
gjv
->
g›ts
[
idx
] = 
g›t
;

169 
	}
}

171 
	$g›t_dülog_upd©e_≠∂y_buâ⁄
(
g›t_job_võw
 *
gjv
)

173 
GtkDülog
 *
dülog
 = 
	`GTK_DIALOG
(
gjv
->dialog);

174 
gboﬁón
 
£t
;

176 
£t
 = !
	`Êi°_em±y
(&
gjv
->
ch™ged_li°
);

177 
	`gtk_dülog_£t_ª•⁄£_£nsôive
(
dülog
, 
GTK_RESPONSE_APPLY
, 
£t
);

179 i‡(
£t
) {

180 
	`gtk_widgë_£t_£nsôive
(
gjv
->
job_combo
, 0);

181 
	`gtk_widgë_£t_toﬁtù_ãxt
(
gjv
->
job_combo
, "Apply option changes before switchingÅoáÇew job");

183 
	`gtk_widgë_£t_£nsôive
(
gjv
->
job_combo
, 1);

184 
	`gtk_widgë_£t_toﬁtù_ãxt
(
gjv
->
job_combo
, "Change current job");

186 
	}
}

188 
	$g›t_ch™ged
(
g›t
 *gopt)

190 
g›t_job_võw
 *
gjv
 = 
g›t
->gjv;

192 i‡(
gjv
->
ö_job_swôch
)

199 i‡(
	`Êi°_em±y
(&
g›t
->
ch™ged_li°
)) {

200 
	`Êi°_add_èû
(&
g›t
->
ch™ged_li°
, &
gjv
->changed_list);

201 
	`g›t_dülog_upd©e_≠∂y_buâ⁄
(
gjv
);

203 
	}
}

205 
	$g›t_°r_ch™ged
(
GtkE¡ry
 *
íåy
, 
gpoöãr
 
d©a
)

207 
g›t_°r
 *
s
 = (g›t_°∏*Ë
d©a
;

208 
fio_›ti⁄
 *
o
 = &
fio_›ti⁄s
[
s
->
g›t
.
›t_ödex
];

209 c⁄° 
gch¨
 *
ãxt
;

210 
£t
;

212 
	`g›t_ch™ged
(&
s
->
g›t
);

214 
ãxt
 = 
	`gtk_íåy_gë_ãxt
(
	`GTK_ENTRY
(
s
->
íåy
));

215 
£t
 = 
	`°rcmp
(
ãxt
, "") != 0;

217 
	`g›t_£t_chûdªn_visibÀ
(
s
->
g›t
.
gjv
, 
o
, 
£t
);

218 
	}
}

220 
	$g›t_°r_de°roy
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

222 
g›t_°r
 *
s
 = (g›t_°∏*Ë
d©a
;

224 
	`‰ì
(
s
);

225 
	`gtk_widgë_de°roy
(
w
);

226 
	}
}

228 
	$g›t_°r_°‹e_£t_vÆ
(
g›t_°r
 *
s
, c⁄° *
ãxt
)

230 i‡(
ãxt
)

231 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
s
->
íåy
), 
ãxt
);

232 
	}
}

234 
g›t
 *
	$g›t_√w_°r_°‹e
(
g›t_job_võw
 *
gjv
,

235 
fio_›ti⁄
 *
o
, c⁄° *
ãxt
,

236 
idx
)

238 
g›t_°r
 *
s
;

239 
GtkWidgë
 *
œbñ
;

241 
s
 = 
	`ˇŒoc
(1, (*s));

243 
s
->
g›t
.
box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

244 i‡(!
o
->
 ame
)

245 
œbñ
 = 
	`gtk_œbñ_√w
(
o
->
«me
);

247 
œbñ
 = 
	`gtk_œbñ_√w
(
o
->
 ame
);

249 
s
->
íåy
 = 
	`gtk_íåy_√w
();

250 
	`g›t_m¨k_ödex
(
gjv
, &
s
->
g›t
, 
idx
, 
GOPT_STR
);

251 
	`gtk_edôabÀ_£t_edôabÀ
(
	`GTK_EDITABLE
(
s
->
íåy
), 1);

253 i‡(
ãxt
)

254 
	`g›t_°r_°‹e_£t_vÆ
(
s
, 
ãxt
);

255 i‡(
o
->
def
)

256 
	`g›t_°r_°‹e_£t_vÆ
(
s
, 
o
->
def
);

258 
s
->
g›t
.
sig_h™dÀr
 = 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(s->
íåy
), "ch™ged", 
	`G_CALLBACK
(
g›t_°r_ch™ged
), s);

259 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
s
->
íåy
), "de°roy", 
	`G_CALLBACK
(
g›t_°r_de°roy
), s);

261 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
s
->
g›t
.
box
), s->
íåy
, 
FALSE
, FALSE, 0);

262 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
s
->
g›t
.
box
), 
œbñ
, 
FALSE
, FALSE, 0);

263  &
s
->
g›t
;

264 
	}
}

266 
	$g›t_combo_ch™ged
(
GtkComboBox
 *
box
, 
gpoöãr
 
d©a
)

268 
g›t_combo
 *
c
 = (g›t_combÿ*Ë
d©a
;

269 
fio_›ti⁄
 *
o
 = &
fio_›ti⁄s
[
c
->
g›t
.
›t_ödex
];

270 
ödex
;

272 
	`g›t_ch™ged
(&
c
->
g›t
);

274 
ödex
 = 
	`gtk_combo_box_gë_a˘ive
(
	`GTK_COMBO_BOX
(
c
->
combo
));

276 
	`g›t_£t_chûdªn_visibÀ
(
c
->
g›t
.
gjv
, 
o
, 
ödex
);

277 
	}
}

279 
	$g›t_combo_de°roy
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

281 
g›t_combo
 *
c
 = (g›t_combÿ*Ë
d©a
;

283 
	`‰ì
(
c
);

284 
	`gtk_widgë_de°roy
(
w
);

285 
	}
}

287 
g›t_combo
 *
	$__g›t_√w_combo
(
g›t_job_võw
 *
gjv
,

288 
fio_›ti⁄
 *
o
,

289 
idx
, 
ty≥
)

291 
g›t_combo
 *
c
;

292 
GtkWidgë
 *
œbñ
;

294 
c
 = 
	`ˇŒoc
(1, (*c));

296 
c
->
g›t
.
box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

297 i‡(!
o
->
 ame
)

298 
œbñ
 = 
	`gtk_œbñ_√w
(
o
->
«me
);

300 
œbñ
 = 
	`gtk_œbñ_√w
(
o
->
 ame
);

302 
c
->
combo
 = 
	`gtk_combo_box_ãxt_√w
();

303 
	`g›t_m¨k_ödex
(
gjv
, &
c
->
g›t
, 
idx
, 
ty≥
);

304 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
c
->
combo
), "de°roy", 
	`G_CALLBACK
(
g›t_combo_de°roy
), c);

306 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
c
->
g›t
.
box
), c->
combo
, 
FALSE
, FALSE, 0);

307 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
c
->
g›t
.
box
), 
œbñ
, 
FALSE
, FALSE, 0);

309  
c
;

310 
	}
}

312 
	$g›t_combo_°r_£t_vÆ
(
g›t_combo
 *
c
, c⁄° *
ãxt
)

314 
fio_›ti⁄
 *
o
 = &
fio_›ti⁄s
[
c
->
g›t
.
›t_ödex
];

315 
vÆue_∑ú
 *
vp
;

316 
i
;

318 
i
 = 0;

319 
vp
 = &
o
->
posvÆ
[0];

320 
vp
->
ivÆ
) {

321 i‡(!
	`°rcmp
(
vp
->
ivÆ
, 
ãxt
)) {

322 
	`gtk_combo_box_£t_a˘ive
(
	`GTK_COMBO_BOX
(
c
->
combo
), 
i
);

325 
vp
++;

326 
i
++;

328 
	}
}

330 
g›t
 *
	$g›t_√w_combo_°r
(
g›t_job_võw
 *
gjv
,

331 
fio_›ti⁄
 *
o
, c⁄° *
ãxt
,

332 
idx
)

334 
g›t_combo
 *
c
;

335 
vÆue_∑ú
 *
vp
;

336 
i
, 
a˘ive
 = 0;

338 
c
 = 
	`__g›t_√w_combo
(
gjv
, 
o
, 
idx
, 
GOPT_COMBO_STR
);

340 
i
 = 0;

341 
vp
 = &
o
->
posvÆ
[0];

342 
vp
->
ivÆ
) {

343 
	`gtk_combo_box_ãxt_≠≥nd_ãxt
(
	`GTK_COMBO_BOX_TEXT
(
c
->
combo
), 
vp
->
ivÆ
);

344 i‡(
o
->
def
 && !
	`°rcmp
(
vp
->
ivÆ
, o->def))

345 
a˘ive
 = 
i
;

346 
vp
++;

347 
i
++;

350 
	`gtk_combo_box_£t_a˘ive
(
	`GTK_COMBO_BOX
(
c
->
combo
), 
a˘ive
);

351 i‡(
ãxt
)

352 
	`g›t_combo_°r_£t_vÆ
(
c
, 
ãxt
);

353 
c
->
g›t
.
sig_h™dÀr
 = 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(c->
combo
), "ch™ged", 
	`G_CALLBACK
(
g›t_combo_ch™ged
), c);

354  &
c
->
g›t
;

355 
	}
}

357 
	$g›t_combo_öt_£t_vÆ
(
g›t_combo
 *
c
, 
ù
)

359 
fio_›ti⁄
 *
o
 = &
fio_›ti⁄s
[
c
->
g›t
.
›t_ödex
];

360 
vÆue_∑ú
 *
vp
;

361 
i
;

363 
i
 = 0;

364 
vp
 = &
o
->
posvÆ
[0];

365 
vp
->
ivÆ
) {

366 i‡(
vp
->
ovÆ
 =
ù
) {

367 
	`gtk_combo_box_£t_a˘ive
(
	`GTK_COMBO_BOX
(
c
->
combo
), 
i
);

370 
vp
++;

371 
i
++;

373 
	}
}

375 
g›t
 *
	$g›t_√w_combo_öt
(
g›t_job_võw
 *
gjv
,

376 
fio_›ti⁄
 *
o
, *
ù
,

377 
idx
)

379 
g›t_combo
 *
c
;

380 
vÆue_∑ú
 *
vp
;

381 
i
, 
a˘ive
 = 0;

383 
c
 = 
	`__g›t_√w_combo
(
gjv
, 
o
, 
idx
, 
GOPT_COMBO_INT
);

385 
i
 = 0;

386 
vp
 = &
o
->
posvÆ
[0];

387 
vp
->
ivÆ
) {

388 
	`gtk_combo_box_ãxt_≠≥nd_ãxt
(
	`GTK_COMBO_BOX_TEXT
(
c
->
combo
), 
vp
->
ivÆ
);

389 i‡(
ù
 && 
vp
->
ovÆ
 == *ip)

390 
a˘ive
 = 
i
;

391 
vp
++;

392 
i
++;

395 
	`gtk_combo_box_£t_a˘ive
(
	`GTK_COMBO_BOX
(
c
->
combo
), 
a˘ive
);

396 i‡(
ù
)

397 
	`g›t_combo_öt_£t_vÆ
(
c
, *
ù
);

398 
c
->
g›t
.
sig_h™dÀr
 = 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(c->
combo
), "ch™ged", 
	`G_CALLBACK
(
g›t_combo_ch™ged
), c);

399  &
c
->
g›t
;

400 
	}
}

402 
	$g›t_°r_mu…i_toggÀd
(
GtkToggÀBuâ⁄
 *
buâ⁄
, 
gpoöãr
 
d©a
)

404 
g›t_°r_mu…i
 *
m
 = (g›t_°r_mu…ò*Ë
d©a
;

406 
	`g›t_ch™ged
(&
m
->
g›t
);

407 
	}
}

409 
	$g›t_°r_mu…i_de°roy
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

411 
g›t_°r_mu…i
 *
m
 = (g›t_°r_mu…ò*Ë
d©a
;

413 
	`‰ì
(
m
);

414 
	`gtk_widgë_de°roy
(
w
);

415 
	}
}

417 
	$g›t_°r_mu…i_£t_vÆ
(
g›t_°r_mu…i
 *
m
, 
vÆ
)

419 
	}
}

421 
g›t
 *
	$g›t_√w_°r_mu…i
(
g›t_job_võw
 *
gjv
,

422 
fio_›ti⁄
 *
o
, 
idx
)

424 
g›t_°r_mu…i
 *
m
;

425 
vÆue_∑ú
 *
vp
;

426 
GtkWidgë
 *
‰ame
, *
hbox
;

427 
i
;

429 
m
 = 
	`ˇŒoc
(1, (*m));

430 
m
->
g›t
.
box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

431 
	`g›t_m¨k_ödex
(
gjv
, &
m
->
g›t
, 
idx
, 
GOPT_STR_MULTI
);

433 i‡(!
o
->
 ame
)

434 
‰ame
 = 
	`gtk_‰ame_√w
(
o
->
«me
);

436 
‰ame
 = 
	`gtk_‰ame_√w
(
o
->
 ame
);

437 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
m
->
g›t
.
box
), 
‰ame
, 
FALSE
, FALSE, 3);

439 
hbox
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

440 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
hbox
);

442 
i
 = 0;

443 
vp
 = &
o
->
posvÆ
[0];

444 
vp
->
ivÆ
) {

445 
m
->
checks
[
i
] = 
	`gtk_check_buâ⁄_√w_wôh_œbñ
(
vp
->
ivÆ
);

446 
	`gtk_widgë_£t_toﬁtù_ãxt
(
m
->
checks
[
i
], 
vp
->
hñp
);

447 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox
), 
m
->
checks
[
i
], 
FALSE
, FALSE, 3);

448 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
m
->
checks
[
i
]), "toggÀd", 
	`G_CALLBACK
(
g›t_°r_mu…i_toggÀd
), m);

449 
vp
++;

450 
i
++;

453 
	`g›t_°r_mu…i_£t_vÆ
(
m
, 0);

454 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
m
->
g›t
.
box
), "de°roy", 
	`G_CALLBACK
(
g›t_°r_mu…i_de°roy
), m);

455  &
m
->
g›t
;

456 
	}
}

458 
	$g›t_öt_ch™ged
(
GtkSpöBuâ⁄
 *
•ö
, 
gpoöãr
 
d©a
)

460 
g›t_öt
 *
i
 = (g›t_öà*Ë
d©a
;

461 
fio_›ti⁄
 *
o
 = &
fio_›ti⁄s
[
i
->
g›t
.
›t_ödex
];

462 
GtkAdju°mít
 *
adj
;

463 
vÆue
, 
dñè
;

465 
	`g›t_ch™ged
(&
i
->
g›t
);

467 
adj
 = 
	`gtk_•ö_buâ⁄_gë_adju°mít
(
•ö
);

468 
vÆue
 = 
	`gtk_adju°mít_gë_vÆue
(
adj
);

469 
dñè
 = 
vÆue
 - 
i
->
œ°vÆ
;

470 
i
->
œ°vÆ
 = 
vÆue
;

472 i‡(
o
->
öv_›t
) {

473 
g›t
 *
b_öv
 = 
o
->
öv_›t
->
gui_d©a
;

474 
g›t_öt
 *
i_öv
 = 
	`c⁄èöî_of
(
b_öv
, g›t_öt, 
g›t
);

475 
cur_vÆ
;

477 
	`as£π
(
o
->
ty≥
 =o->
öv_›t
->type);

479 
cur_vÆ
 = 
	`gtk_•ö_buâ⁄_gë_vÆue
(
	`GTK_SPIN_BUTTON
(
i_öv
->
•ö
));

480 
cur_vÆ
 -
dñè
;

481 
	`g_sig«l_h™dÀr_block
(
	`G_OBJECT
(
i_öv
->
•ö
), i_öv->
g›t
.
sig_h™dÀr
);

482 
	`gtk_•ö_buâ⁄_£t_vÆue
(
	`GTK_SPIN_BUTTON
(
i_öv
->
•ö
), 
cur_vÆ
);

483 
	`g_sig«l_h™dÀr_unblock
(
	`G_OBJECT
(
i_öv
->
•ö
), i_öv->
g›t
.
sig_h™dÀr
);

485 
	}
}

487 
	$g›t_öt_de°roy
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

489 
g›t_öt
 *
i
 = (g›t_öà*Ë
d©a
;

491 
	`‰ì
(
i
);

492 
	`gtk_widgë_de°roy
(
w
);

493 
	}
}

495 
	$g›t_öt_£t_vÆ
(
g›t_öt
 *
i
, 
p
)

497 
	`gtk_•ö_buâ⁄_£t_vÆue
(
	`GTK_SPIN_BUTTON
(
i
->
•ö
), 
p
);

498 
i
->
œ°vÆ
 = 
p
;

499 
	}
}

501 
g›t_öt
 *
	$__g›t_√w_öt
(
g›t_job_võw
 *
gjv
,

502 
fio_›ti⁄
 *
o
,

503 *
p
, 
idx
)

505 
defvÆ
;

506 
g›t_öt
 *
i
;

507 
guöt
 
maxvÆ
, 
öãrvÆ
;

508 
GtkWidgë
 *
œbñ
;

510 
i
 = 
	`ˇŒoc
(1, (*i));

511 
i
->
g›t
.
box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

512 i‡(!
o
->
 ame
)

513 
œbñ
 = 
	`gtk_œbñ_√w
(
o
->
«me
);

515 
œbñ
 = 
	`gtk_œbñ_√w
(
o
->
 ame
);

517 
maxvÆ
 = 
o
->maxval;

518 i‡(!
maxvÆ
)

519 
maxvÆ
 = 
UINT_MAX
;

521 
defvÆ
 = 0;

522 i‡(
p
)

523 
defvÆ
 = *
p
;

524 i‡(
o
->
def
) {

525 
vÆ
;

527 
	`check_°r_byãs
(
o
->
def
, &
vÆ
, o);

528 
defvÆ
 = 
vÆ
;

531 
öãrvÆ
 = 1.0;

532 i‡(
o
->
öãrvÆ
)

533 
öãrvÆ
 = 
o
->interval;

535 
i
->
•ö
 = 
	`gtk_•ö_buâ⁄_√w_wôh_ønge
(
o
->
mövÆ
, 
maxvÆ
, 
öãrvÆ
);

536 
	`g›t_m¨k_ödex
(
gjv
, &
i
->
g›t
, 
idx
, 
GOPT_INT
);

537 
	`gtk_•ö_buâ⁄_£t_upd©e_pﬁicy
(
	`GTK_SPIN_BUTTON
(
i
->
•ö
), 
GTK_UPDATE_IF_VALID
);

538 i‡(
p
)

539 
	`g›t_öt_£t_vÆ
(
i
, *
p
);

541 
	`g›t_öt_£t_vÆ
(
i
, 
defvÆ
);

542 
i
->
g›t
.
sig_h™dÀr
 = 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(i->
•ö
), "vÆue-ch™ged", 
	`G_CALLBACK
(
g›t_öt_ch™ged
), i);

543 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
i
->
•ö
), "de°roy", 
	`G_CALLBACK
(
g›t_öt_de°roy
), i);

545 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
i
->
g›t
.
box
), i->
•ö
, 
FALSE
, FALSE, 0);

546 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
i
->
g›t
.
box
), 
œbñ
, 
FALSE
, FALSE, 0);

548  
i
;

549 
	}
}

551 
g›t
 *
	$g›t_√w_öt
(
g›t_job_võw
 *
gjv
,

552 
fio_›ti⁄
 *
o
, *
ù
,

553 
idx
)

555 
uŒp
;

556 
g›t_öt
 *
i
;

558 i‡(
ù
) {

559 
uŒp
 = *
ù
;

560 
i
 = 
	`__g›t_√w_öt
(
gjv
, 
o
, &
uŒp
, 
idx
);

562 
i
 = 
	`__g›t_√w_öt
(
gjv
, 
o
, 
NULL
, 
idx
);

564  &
i
->
g›t
;

565 
	}
}

567 
g›t
 *
	$g›t_√w_uŒ⁄g
(
g›t_job_võw
 *
gjv
,

568 
fio_›ti⁄
 *
o
, *
p
,

569 
idx
)

571 
g›t_öt
 *
i
;

573 
i
 = 
	`__g›t_√w_öt
(
gjv
, 
o
, 
p
, 
idx
);

574  &
i
->
g›t
;

575 
	}
}

577 
	$g›t_boﬁ_toggÀd
(
GtkToggÀBuâ⁄
 *
buâ⁄
, 
gpoöãr
 
d©a
)

579 
g›t_boﬁ
 *
b
 = (g›t_boﬁ *Ë
d©a
;

580 
fio_›ti⁄
 *
o
 = &
fio_›ti⁄s
[
b
->
g›t
.
›t_ödex
];

581 
gboﬁón
 
£t
;

583 
	`g›t_ch™ged
(&
b
->
g›t
);

585 
£t
 = 
	`gtk_toggÀ_buâ⁄_gë_a˘ive
(
	`GTK_TOGGLE_BUTTON
(
b
->
check
));

587 i‡(
o
->
öv_›t
) {

588 
g›t
 *
g_öv
 = 
o
->
öv_›t
->
gui_d©a
;

589 
g›t_boﬁ
 *
b_öv
 = 
	`c⁄èöî_of
(
g_öv
, g›t_boﬁ, 
g›t
);

591 
	`as£π
(
o
->
ty≥
 =o->
öv_›t
->type);

593 
	`g_sig«l_h™dÀr_block
(
	`G_OBJECT
(
b_öv
->
check
), b_öv->
g›t
.
sig_h™dÀr
);

594 
	`gtk_toggÀ_buâ⁄_£t_a˘ive
(
	`GTK_TOGGLE_BUTTON
(
b_öv
->
check
), !
£t
);

595 
	`g_sig«l_h™dÀr_unblock
(
	`G_OBJECT
(
b_öv
->
check
), b_öv->
g›t
.
sig_h™dÀr
);

598 
	`g›t_£t_chûdªn_visibÀ
(
b
->
g›t
.
gjv
, 
o
, 
£t
);

599 
	}
}

601 
	$g›t_boﬁ_de°roy
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

603 
g›t_boﬁ
 *
b
 = (g›t_boﬁ *Ë
d©a
;

605 
	`‰ì
(
b
);

606 
	`gtk_widgë_de°roy
(
w
);

607 
	}
}

609 
	$g›t_boﬁ_£t_vÆ
(
g›t_boﬁ
 *
b
, 
vÆ
)

611 
	`gtk_toggÀ_buâ⁄_£t_a˘ive
(
	`GTK_TOGGLE_BUTTON
(
b
->
check
), 
vÆ
);

612 
	}
}

614 
g›t
 *
	$g›t_√w_boﬁ
(
g›t_job_võw
 *
gjv
,

615 
fio_›ti⁄
 *
o
, *
vÆ
,

616 
idx
)

618 
g›t_boﬁ
 *
b
;

619 
GtkWidgë
 *
œbñ
;

620 
def°©e
 = 0;

622 
b
 = 
	`ˇŒoc
(1, (*b));

623 
b
->
g›t
.
box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

624 i‡(!
o
->
 ame
)

625 
œbñ
 = 
	`gtk_œbñ_√w
(
o
->
«me
);

627 
œbñ
 = 
	`gtk_œbñ_√w
(
o
->
 ame
);

629 
b
->
check
 = 
	`gtk_check_buâ⁄_√w
();

630 
	`g›t_m¨k_ödex
(
gjv
, &
b
->
g›t
, 
idx
, 
GOPT_BOOL
);

631 i‡(
o
->
def
 && !
	`°rcmp
(o->def, "1"))

632 
def°©e
 = 1;

634 i‡(
o
->
√g
)

635 
def°©e
 = !defstate;

637 i‡(
vÆ
)

638 
	`g›t_boﬁ_£t_vÆ
(
b
, *
vÆ
);

640 
	`gtk_toggÀ_buâ⁄_£t_a˘ive
(
	`GTK_TOGGLE_BUTTON
(
b
->
check
), 
def°©e
);

641 
b
->
g›t
.
sig_h™dÀr
 = 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(b->
check
), "toggÀd", 
	`G_CALLBACK
(
g›t_boﬁ_toggÀd
), b);

642 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
b
->
check
), "de°roy", 
	`G_CALLBACK
(
g›t_boﬁ_de°roy
), b);

644 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
b
->
g›t
.
box
), b->
check
, 
FALSE
, FALSE, 0);

645 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
b
->
g›t
.
box
), 
œbñ
, 
FALSE
, FALSE, 0);

646  &
b
->
g›t
;

647 
	}
}

654 
	$ønge_vÆue_ch™ged
(
GtkSpöBuâ⁄
 *
•ö
, 
gpoöãr
 
d©a
)

656 
g›t_ønge
 *
r
 = (g›t_øngê*Ë
d©a
;

657 
ch™ged
 = -1, 
i
;

658 
göt
 
vÆ
, 
mvÆ
;

660 
	`g›t_ch™ged
(&
r
->
g›t
);

662 
i
 = 0; i < 
GOPT_RANGE_SPIN
; i++) {

663 i‡(
	`GTK_SPIN_BUTTON
(
r
->
•ös
[
i
]Ë=
•ö
) {

664 
ch™ged
 = 
i
;

669 
	`as£π
(
ch™ged
 != -1);

674 i‡(
ch™ged
 == 0 || changed == 2) {

675 
GtkWidgë
 *
m•ö
 = 
r
->
•ös
[
ch™ged
 + 1];

677 
vÆ
 = 
	`gtk_•ö_buâ⁄_gë_vÆue_as_öt
(
	`GTK_SPIN_BUTTON
(
r
->
•ös
[
ch™ged
]));

678 
mvÆ
 = 
	`gtk_•ö_buâ⁄_gë_vÆue_as_öt
(
	`GTK_SPIN_BUTTON
(
m•ö
));

679 i‡(
vÆ
 > 
mvÆ
)

680 
	`gtk_•ö_buâ⁄_£t_vÆue
(
	`GTK_SPIN_BUTTON
(
m•ö
), 
vÆ
);

682 
GtkWidgë
 *
m•ö
 = 
r
->
•ös
[
ch™ged
 - 1];

684 
vÆ
 = 
	`gtk_•ö_buâ⁄_gë_vÆue_as_öt
(
	`GTK_SPIN_BUTTON
(
r
->
•ös
[
ch™ged
]));

685 
mvÆ
 = 
	`gtk_•ö_buâ⁄_gë_vÆue_as_öt
(
	`GTK_SPIN_BUTTON
(
m•ö
));

686 i‡(
vÆ
 < 
mvÆ
)

687 
	`gtk_•ö_buâ⁄_£t_vÆue
(
	`GTK_SPIN_BUTTON
(
m•ö
), 
vÆ
);

689 
	}
}

691 
	$g›t_ønge_de°roy
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

693 
g›t_ønge
 *
r
 = (g›t_øngê*Ë
d©a
;

695 
	`‰ì
(
r
);

696 
	`gtk_widgë_de°roy
(
w
);

697 
	}
}

699 
	$g›t_öt_ønge_£t_vÆ
(
g›t_ønge
 *
r
, *
vÆs
)

701 
i
;

703 
i
 = 0; i < 
GOPT_RANGE_SPIN
; i++)

704 
	`gtk_•ö_buâ⁄_£t_vÆue
(
	`GTK_SPIN_BUTTON
(
r
->
•ös
[
i
]), 
vÆs
[i]);

705 
	}
}

707 
g›t
 *
	$g›t_√w_öt_ønge
(
g›t_job_võw
 *
gjv
,

708 
fio_›ti⁄
 *
o
, **
ù
,

709 
idx
)

711 
g›t_ønge
 *
r
;

712 
GtkWidgë
 *
œbñ
;

713 
guöt
 
öãrvÆ
;

714 
defvÆs
[
GOPT_RANGE_SPIN
];

715 
göt
 
maxvÆ
;

716 
i
;

718 
r
 = 
	`ˇŒoc
(1, (*r));

719 
r
->
g›t
.
box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

720 
	`g›t_m¨k_ödex
(
gjv
, &
r
->
g›t
, 
idx
, 
GOPT_RANGE
);

721 i‡(!
o
->
 ame
)

722 
œbñ
 = 
	`gtk_œbñ_√w
(
o
->
«me
);

724 
œbñ
 = 
	`gtk_œbñ_√w
(
o
->
 ame
);

726 
maxvÆ
 = 
o
->maxval;

727 i‡(!
maxvÆ
)

728 
maxvÆ
 = 
INT_MAX
;

730 
	`mem£t
(
defvÆs
, 0, (defvals));

731 i‡(
o
->
def
) {

732 
vÆ
;

734 
	`check_°r_byãs
(
o
->
def
, &
vÆ
, o);

735 
i
 = 0; i < 
GOPT_RANGE_SPIN
; i++)

736 
defvÆs
[
i
] = 
vÆ
;

739 
öãrvÆ
 = 1.0;

740 i‡(
o
->
öãrvÆ
)

741 
öãrvÆ
 = 
o
->interval;

743 
i
 = 0; i < 
GOPT_RANGE_SPIN
; i++) {

744 
r
->
•ös
[
i
] = 
	`gtk_•ö_buâ⁄_√w_wôh_ønge
(
o
->
mövÆ
, 
maxvÆ
, 
öãrvÆ
);

745 
	`gtk_•ö_buâ⁄_£t_upd©e_pﬁicy
(
	`GTK_SPIN_BUTTON
(
r
->
•ös
[
i
]), 
GTK_UPDATE_IF_VALID
);

746 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
r
->
g›t
.
box
),Ñ->
•ös
[
i
], 
FALSE
, FALSE, 0);

749 i‡(
ù
)

750 
	`g›t_öt_ønge_£t_vÆ
(
r
, *
ù
);

752 
	`g›t_öt_ønge_£t_vÆ
(
r
, 
defvÆs
);

754 
i
 = 0; i < 
GOPT_RANGE_SPIN
; i++)

755 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
r
->
•ös
[
i
]), "vÆue-ch™ged", 
	`G_CALLBACK
(
ønge_vÆue_ch™ged
),Ñ);

757 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
r
->
g›t
.
box
), 
œbñ
, 
FALSE
, FALSE, 0);

758 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
r
->
g›t
.
box
), "de°roy", 
	`G_CALLBACK
(
g›t_ønge_de°roy
),Ñ);

759  &
r
->
g›t
;

760 
	}
}

762 
	$g›t_°r_vÆ_de°roy
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

764 
g›t_°r_vÆ
 *
g
 = (g›t_°r_vÆ *Ë
d©a
;

766 
	`‰ì
(
g
);

767 
	`gtk_widgë_de°roy
(
w
);

768 
	}
}

770 
	$g›t_°r_vÆ_•ö_wøµed
(
GtkSpöBuâ⁄
 *
•ö
, 
gpoöãr
 
d©a
)

772 
g›t_°r_vÆ
 *
g
 = (g›t_°r_vÆ *Ë
d©a
;

773 
vÆ
;

774 
GtkAdju°mít
 *
adj
;

775 
göt
 
ödex
;

777 
adj
 = 
	`gtk_•ö_buâ⁄_gë_adju°mít
(
•ö
);

778 
vÆ
 = 
	`gtk_adju°mít_gë_vÆue
(
adj
);

783 i‡(!
vÆ
) {

784 
ödex
 = 
	`gtk_combo_box_gë_a˘ive
(
	`GTK_COMBO_BOX
(
g
->
combo
));

785 i‡(
ödex
 + 1 <
g
->
maxödex
) {

786 
vÆ
 = 1;

787 
	`gtk_combo_box_£t_a˘ive
(
	`GTK_COMBO_BOX
(
g
->
combo
), ++
ödex
);

789 
vÆ
 = 1023;

790 
	`gtk_•ö_buâ⁄_£t_vÆue
(
•ö
, 
vÆ
);

792 
ödex
 = 
	`gtk_combo_box_gë_a˘ive
(
	`GTK_COMBO_BOX
(
g
->
combo
));

793 i‡(
ödex
) {

794 
	`gtk_combo_box_£t_a˘ive
(
	`GTK_COMBO_BOX
(
g
->
combo
), --
ödex
);

795 
	`gtk_•ö_buâ⁄_£t_vÆue
(
•ö
, 1023);

797 
	`gtk_•ö_buâ⁄_£t_vÆue
(
•ö
, 0);

799 
	}
}

801 
	$g›t_°r_vÆ_ch™ged
(
GtkSpöBuâ⁄
 *
•ö
, 
gpoöãr
 
d©a
)

803 
g›t_°r_vÆ
 *
g
 = (g›t_°r_vÆ *Ë
d©a
;

805 
	`g›t_ch™ged
(&
g
->
g›t
);

806 
	}
}

808 
	$g›t_°r_vÆ_£t_vÆ
(
g›t_°r_vÆ
 *
g
, 
vÆ
)

810 
i
 = 0;

813 i‡(!
vÆ
 || (val % 1024))

816 
i
++;

817 
vÆ
 /= 1024;

820 
	`gtk_•ö_buâ⁄_£t_vÆue
(
	`GTK_SPIN_BUTTON
(
g
->
•ö
), 
vÆ
);

821 
	`gtk_combo_box_£t_a˘ive
(
	`GTK_COMBO_BOX
(
g
->
combo
), 
i
);

822 
	}
}

824 
g›t
 *
	$g›t_√w_°r_vÆ
(
g›t_job_võw
 *
gjv
,

825 
fio_›ti⁄
 *
o
,

826 *
p
, 
idx
)

828 
g›t_°r_vÆ
 *
g
;

829 c⁄° 
gch¨
 *
po°fix
[] = { "B", "KiB", "MiB", "GiB", "TiB", "PiB", "EiB" };

830 
GtkWidgë
 *
œbñ
;

831 
i
;

833 
g
 = 
	`ˇŒoc
(1, (*g));

834 
g
->
g›t
.
box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

835 i‡(!
o
->
 ame
)

836 
œbñ
 = 
	`gtk_œbñ_√w
(
o
->
«me
);

838 
œbñ
 = 
	`gtk_œbñ_√w
(
o
->
 ame
);

839 
	`g›t_m¨k_ödex
(
gjv
, &
g
->
g›t
, 
idx
, 
GOPT_STR_VAL
);

841 
g
->
•ö
 = 
	`gtk_•ö_buâ⁄_√w_wôh_ønge
(0.0, 1023.0, 1.0);

842 
	`gtk_•ö_buâ⁄_£t_upd©e_pﬁicy
(
	`GTK_SPIN_BUTTON
(
g
->
•ö
), 
GTK_UPDATE_IF_VALID
);

843 
	`gtk_•ö_buâ⁄_£t_vÆue
(
	`GTK_SPIN_BUTTON
(
g
->
•ö
), 0);

844 
	`gtk_•ö_buâ⁄_£t_wøp
(
	`GTK_SPIN_BUTTON
(
g
->
•ö
), 1);

845 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
g
->
g›t
.
box
), g->
•ö
, 
FALSE
, FALSE, 0);

846 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
g
->
•ö
), "wøµed", 
	`G_CALLBACK
(
g›t_°r_vÆ_•ö_wøµed
), g);

847 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
g
->
•ö
), "ch™ged", 
	`G_CALLBACK
(
g›t_°r_vÆ_ch™ged
), g);

849 
g
->
combo
 = 
	`gtk_combo_box_ãxt_√w
();

850 
i
 = 0;

851 
	`°æí
(
po°fix
[
i
])) {

852 
	`gtk_combo_box_ãxt_≠≥nd_ãxt
(
	`GTK_COMBO_BOX_TEXT
(
g
->
combo
), 
po°fix
[
i
]);

853 
i
++;

855 
g
->
maxödex
 = 
i
 - 1;

856 
	`gtk_combo_box_£t_a˘ive
(
	`GTK_COMBO_BOX
(
g
->
combo
), 0);

857 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
g
->
g›t
.
box
), g->
combo
, 
FALSE
, FALSE, 0);

858 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
g
->
g›t
.
box
), 
œbñ
, 
FALSE
, FALSE, 3);

860 i‡(
p
)

861 
	`g›t_°r_vÆ_£t_vÆ
(
g
, *
p
);

863 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
g
->
combo
), "ch™ged", 
	`G_CALLBACK
(
g›t_°r_vÆ_ch™ged
), g);

865 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
g
->
g›t
.
box
), "de°roy", 
	`G_CALLBACK
(
g›t_°r_vÆ_de°roy
), g);

866  &
g
->
g›t
;

867 
	}
}

869 
	$g›t_£t_›ti⁄
(
g›t_job_võw
 *
gjv
, 
fio_›ti⁄
 *
o
,

870 
g›t
 *g›t, 
thªad_›ti⁄s
 *
to
)

872 
o
->
ty≥
) {

873 
FIO_OPT_STR_VAL
: {

874 *
uŒp
 = 
NULL
;

875 
g›t_°r_vÆ
 *
g
;

877 i‡(
o
->
off1
)

878 
uŒp
 = 
	`td_v¨
(
to
, 
o
, o->
off1
);

880 
g
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_°r_vÆ
, gopt);

881 i‡(
uŒp
)

882 
	`g›t_°r_vÆ_£t_vÆ
(
g
, *
uŒp
);

885 
FIO_OPT_STR_VAL_TIME
: {

886 *
uŒp
 = 
NULL
;

887 
g›t_öt
 *
i
;

889 i‡(
o
->
off1
)

890 
uŒp
 = 
	`td_v¨
(
to
, 
o
, o->
off1
);

892 
i
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_öt
, gopt);

893 i‡(
uŒp
)

894 
	`g›t_öt_£t_vÆ
(
i
, *
uŒp
);

897 
FIO_OPT_INT
:

898 i‡(
o
->
posvÆ
[0].
ivÆ
) {

899 *
ù
 = 
NULL
;

900 
g›t_combo
 *
c
;

902 i‡(
o
->
off1
)

903 
ù
 = 
	`td_v¨
(
to
, 
o
, o->
off1
);

905 
c
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_combo
, gopt);

906 i‡(
ù
)

907 
	`g›t_combo_öt_£t_vÆ
(
c
, *
ù
);

909 *
ù
 = 
NULL
;

910 
g›t_öt
 *
i
;

912 i‡(
o
->
off1
)

913 
ù
 = 
	`td_v¨
(
to
, 
o
, o->
off1
);

915 
i
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_öt
, gopt);

916 i‡(
ù
)

917 
	`g›t_öt_£t_vÆ
(
i
, *
ù
);

920 
FIO_OPT_STR_SET
:

921 
FIO_OPT_BOOL
: {

922 *
ù
 = 
NULL
;

923 
g›t_boﬁ
 *
b
;

925 i‡(
o
->
off1
)

926 
ù
 = 
	`td_v¨
(
to
, 
o
, o->
off1
);

928 
b
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_boﬁ
, gopt);

929 i‡(
ù
)

930 
	`g›t_boﬁ_£t_vÆ
(
b
, *
ù
);

933 
FIO_OPT_STR
: {

934 i‡(
o
->
posvÆ
[0].
ivÆ
) {

935 *
ù
 = 
NULL
;

936 
g›t_combo
 *
c
;

938 i‡(
o
->
off1
)

939 
ù
 = 
	`td_v¨
(
to
, 
o
, o->
off1
);

941 
c
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_combo
, gopt);

942 i‡(
ù
)

943 
	`g›t_combo_öt_£t_vÆ
(
c
, *
ù
);

945 
g›t_°r
 *
s
;

946 *
ãxt
 = 
NULL
;

948 i‡(
o
->
off1
) {

949 **
p
 = 
	`td_v¨
(
to
, 
o
, o->
off1
);

951 
ãxt
 = *
p
;

954 
s
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_°r
, gopt);

955 
	`g›t_°r_°‹e_£t_vÆ
(
s
, 
ãxt
);

960 
FIO_OPT_STR_STORE
: {

961 
g›t_combo
 *
c
;

962 *
ãxt
 = 
NULL
;

964 i‡(
o
->
off1
) {

965 **
p
 = 
	`td_v¨
(
to
, 
o
, o->
off1
);

966 
ãxt
 = *
p
;

969 i‡(!
o
->
posvÆ
[0].
ivÆ
) {

970 
g›t_°r
 *
s
;

972 
s
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_°r
, gopt);

973 
	`g›t_°r_°‹e_£t_vÆ
(
s
, 
ãxt
);

977 
c
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_combo
, gopt);

978 i‡(
ãxt
)

979 
	`g›t_combo_°r_£t_vÆ
(
c
, 
ãxt
);

982 
FIO_OPT_STR_MULTI
:

985 
FIO_OPT_RANGE
: {

986 
g›t_ønge
 *
r
;

987 *
ù
[4] = { 
	`td_v¨
(
to
, 
o
, o->
off1
),

988 
	`td_v¨
(
to
, 
o
, o->
off2
),

989 
	`td_v¨
(
to
, 
o
, o->
off3
),

990 
	`td_v¨
(
to
, 
o
, o->
off4
) };

992 
r
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_ønge
, gopt);

993 
	`g›t_öt_ønge_£t_vÆ
(
r
, *
ù
);

997 
FIO_OPT_FLOAT_LIST
:

999 
FIO_OPT_DEPRECATED
:

1002 
	`¥ötf
("ign‹êty≥ %u\n", 
o
->
ty≥
);

1005 
	}
}

1007 
	$g›t_add_›ti⁄
(
g›t_job_võw
 *
gjv
, 
GtkWidgë
 *
hbox
,

1008 
fio_›ti⁄
 *
o
, 
›t_ödex
,

1009 
thªad_›ti⁄s
 *
to
)

1011 
g›t
 *
go
 = 
NULL
;

1013 
o
->
ty≥
) {

1014 
FIO_OPT_STR_VAL
: {

1015 *
uŒp
 = 
NULL
;

1017 i‡(
o
->
off1
)

1018 
uŒp
 = 
	`td_v¨
(
to
, 
o
, o->
off1
);

1020 
go
 = 
	`g›t_√w_°r_vÆ
(
gjv
, 
o
, 
uŒp
, 
›t_ödex
);

1023 
FIO_OPT_STR_VAL_TIME
: {

1024 *
uŒp
 = 
NULL
;

1026 i‡(
o
->
off1
)

1027 
uŒp
 = 
	`td_v¨
(
to
, 
o
, o->
off1
);

1029 
go
 = 
	`g›t_√w_uŒ⁄g
(
gjv
, 
o
, 
uŒp
, 
›t_ödex
);

1032 
FIO_OPT_INT
:

1033 i‡(
o
->
posvÆ
[0].
ivÆ
) {

1034 *
ù
 = 
NULL
;

1036 i‡(
o
->
off1
)

1037 
ù
 = 
	`td_v¨
(
to
, 
o
, o->
off1
);

1039 
go
 = 
	`g›t_√w_combo_öt
(
gjv
, 
o
, 
ù
, 
›t_ödex
);

1041 *
ù
 = 
NULL
;

1043 i‡(
o
->
off1
)

1044 
ù
 = 
	`td_v¨
(
to
, 
o
, o->
off1
);

1046 
go
 = 
	`g›t_√w_öt
(
gjv
, 
o
, 
ù
, 
›t_ödex
);

1049 
FIO_OPT_STR_SET
:

1050 
FIO_OPT_BOOL
: {

1051 *
ù
 = 
NULL
;

1053 i‡(
o
->
off1
)

1054 
ù
 = 
	`td_v¨
(
to
, 
o
, o->
off1
);

1056 
go
 = 
	`g›t_√w_boﬁ
(
gjv
, 
o
, 
ù
, 
›t_ödex
);

1059 
FIO_OPT_STR
: {

1060 i‡(
o
->
posvÆ
[0].
ivÆ
) {

1061 *
ù
 = 
NULL
;

1063 i‡(
o
->
off1
)

1064 
ù
 = 
	`td_v¨
(
to
, 
o
, o->
off1
);

1066 
go
 = 
	`g›t_√w_combo_öt
(
gjv
, 
o
, 
ù
, 
›t_ödex
);

1069 
go
 = 
	`g›t_√w_°r_°‹e
(
gjv
, 
o
, 
NULL
, 
›t_ödex
);

1074 
FIO_OPT_STR_STORE
: {

1075 *
ãxt
 = 
NULL
;

1077 i‡(
o
->
off1
) {

1078 **
p
 = 
	`td_v¨
(
to
, 
o
, o->
off1
);

1079 
ãxt
 = *
p
;

1082 i‡(!
o
->
posvÆ
[0].
ivÆ
) {

1083 
go
 = 
	`g›t_√w_°r_°‹e
(
gjv
, 
o
, 
ãxt
, 
›t_ödex
);

1087 
go
 = 
	`g›t_√w_combo_°r
(
gjv
, 
o
, 
ãxt
, 
›t_ödex
);

1090 
FIO_OPT_STR_MULTI
:

1091 
go
 = 
	`g›t_√w_°r_mu…i
(
gjv
, 
o
, 
›t_ödex
);

1093 
FIO_OPT_RANGE
: {

1094 *
ù
[4] = { 
	`td_v¨
(
to
, 
o
, o->
off1
),

1095 
	`td_v¨
(
to
, 
o
, o->
off2
),

1096 
	`td_v¨
(
to
, 
o
, o->
off3
),

1097 
	`td_v¨
(
to
, 
o
, o->
off4
) };

1099 
go
 = 
	`g›t_√w_öt_ønge
(
gjv
, 
o
, 
ù
, 
›t_ödex
);

1103 
FIO_OPT_FLOAT_LIST
:

1105 
FIO_OPT_DEPRECATED
:

1108 
	`¥ötf
("ign‹êty≥ %u\n", 
o
->
ty≥
);

1112 i‡(
go
) {

1113 
GtkWidgë
 *
de°
;

1115 i‡(
o
->
hñp
)

1116 
	`gtk_widgë_£t_toﬁtù_ãxt
(
go
->
box
, 
o
->
hñp
);

1118 
o
->
gui_d©a
 = 
go
;

1120 
de°
 = 
	`g›t_gë_group_‰ame
(
gjv
, 
hbox
, 
o
->
group
);

1121 i‡(!
de°
)

1122 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox
), 
go
->
box
, 
FALSE
, FALSE, 5);

1124 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
de°
), 
go
->
box
, 
FALSE
, FALSE, 5);

1126 
	}
}

1128 
	$g›t_add_›ti⁄s
(
g›t_job_võw
 *
gjv
,

1129 
thªad_›ti⁄s
 *
to
)

1131 
GtkWidgë
 *
hbox
 = 
NULL
;

1132 
i
;

1137 
i
 = 0; 
fio_›ti⁄s
[i].
«me
; i++) {

1138 
fio_›ti⁄
 *
o
 = &
fio_›ti⁄s
[
i
];

1139 
uöt64_t
 
mask
 = 
o
->
ˇãg‹y
;

1140 c⁄° 
›t_group
 *
og
;

1142 (
og
 = 
	`›t_group_‰om_mask
(&
mask
)Ë!
NULL
) {

1143 
GtkWidgë
 *
vbox
 = 
gjv
->
vboxes
[
	`ffz64
(~
og
->
mask
)];

1145 
hbox
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

1146 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
hbox
, 
FALSE
, FALSE, 5);

1147 
	`g›t_add_›ti⁄
(
gjv
, 
hbox
, 
o
, 
i
, 
to
);

1150 
	}
}

1152 
	$g›t_£t_›ti⁄s
(
g›t_job_võw
 *
gjv
,

1153 
thªad_›ti⁄s
 *
to
)

1155 
i
;

1157 
i
 = 0; 
fio_›ti⁄s
[i].
«me
; i++) {

1158 
fio_›ti⁄
 *
o
 = &
fio_›ti⁄s
[
i
];

1159 
g›t
 *g›à
gjv
->
g›ts
[
i
];

1161 
	`g›t_£t_›ti⁄
(
gjv
, 
o
, 
g›t
, 
to
);

1163 
	}
}

1165 
GtkWidgë
 *
	$g›t_add_èb
(
GtkWidgë
 *
nŸebook
, c⁄° *
«me
)

1167 
GtkWidgë
 *
box
, *
vbox
, *
s¸ﬁl
;

1169 
s¸ﬁl
 = 
	`gtk_s¸ﬁÀd_wödow_√w
(
NULL
, NULL);

1170 
	`gtk_c⁄èöî_£t_b‹dî_width
(
	`GTK_CONTAINER
(
s¸ﬁl
), 5);

1171 
	`gtk_s¸ﬁÀd_wödow_£t_pﬁicy
(
	`GTK_SCROLLED_WINDOW
(
s¸ﬁl
), 
GTK_POLICY_AUTOMATIC
, GTK_POLICY_AUTOMATIC);

1173 
vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 3);

1174 
box
 = 
	`gtk_hbox_√w
(
FALSE
, 0);

1175 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
box
, 
FALSE
, FALSE, 5);

1176 
	`gtk_s¸ﬁÀd_wödow_add_wôh_võwp‹t
(
	`GTK_SCROLLED_WINDOW
(
s¸ﬁl
), 
vbox
);

1177 
	`gtk_nŸebook_≠≥nd_∑ge
(
	`GTK_NOTEBOOK
(
nŸebook
), 
s¸ﬁl
, 
	`gtk_œbñ_√w
(
«me
));

1178  
vbox
;

1179 
	}
}

1181 
GtkWidgë
 *
	$g›t_add_group_èb
(
GtkWidgë
 *
nŸebook
,

1182 c⁄° 
›t_group
 *
og
)

1184  
	`g›t_add_èb
(
nŸebook
, 
og
->
«me
);

1185 
	}
}

1187 
	$g›t_add_group_èbs
(
GtkWidgë
 *
nŸebook
, 
g›t_job_võw
 *
gjv
)

1189 c⁄° 
›t_group
 *
og
;

1190 
i
;

1192 
i
 = 0;

1194 
uöt64_t
 
mask
 = (1ULL << 
i
);

1196 
og
 = 
	`›t_group_‰om_mask
(&
mask
);

1197 i‡(!
og
)

1199 
gjv
->
vboxes
[
i
] = 
	`g›t_add_group_èb
(
nŸebook
, 
og
);

1200 
i
++;

1202 
	}
}

1204 
	$g›t_h™dÀ_°r_mu…i_ch™ged
(
g›t_job_võw
 *
gjv
,

1205 
g›t_°r_mu…i
 *
m
,

1206 
fio_›ti⁄
 *
o
)

1208 *
ù
 = 
	`td_v¨
(
gjv
->
o
, o, o->
off1
);

1209 
vÆue_∑ú
 *
vp
;

1210 
gboﬁón
 
£t
;

1211 
guöt
 
vÆ
 = 0;

1212 
i
;

1214 
i
 = 0;

1215 
vp
 = &
o
->
posvÆ
[0];

1216 
vp
->
ivÆ
) {

1217 i‡(!
m
->
checks
[
i
])

1219 
£t
 = 
	`gtk_toggÀ_buâ⁄_gë_a˘ive
(
	`GTK_TOGGLE_BUTTON
(
m
->
checks
[
i
]));

1220 i‡(
£t
) {

1221 i‡(
vp
->
‹vÆ
)

1222 
vÆ
 |
vp
->
ovÆ
;

1224 
vÆ
 = 
vp
->
ovÆ
;

1226 
i
++;

1227 
vp
++;

1230 i‡(
o
->
off1
)

1231 *
ù
 = 
vÆ
;

1232 
	}
}

1234 
	$g›t_h™dÀ_ønge_ch™ged
(
g›t_job_võw
 *
gjv
,

1235 
g›t_ønge
 *
r
,

1236 
fio_›ti⁄
 *
o
)

1238 *
ù
[4] = { 
	`td_v¨
(
gjv
->
o
, o, o->
off1
),

1239 
	`td_v¨
(
gjv
->
o
, o, o->
off2
),

1240 
	`td_v¨
(
gjv
->
o
, o, o->
off3
),

1241 
	`td_v¨
(
gjv
->
o
, o, o->
off4
) };

1242 
göt
 
vÆ
;

1243 
i
;

1245 
i
 = 0; i < 
GOPT_RANGE_SPIN
; i++) {

1246 
vÆ
 = 
	`gtk_•ö_buâ⁄_gë_vÆue_as_öt
(
	`GTK_SPIN_BUTTON
(
r
->
•ös
[
i
]));

1247 *
ù
[
i
] = 
vÆ
;

1249 
	}
}

1251 
	$g›t_h™dÀ_°r_vÆ_ch™ged
(
g›t_job_võw
 *
gjv
,

1252 
g›t_°r_vÆ
 *
s
,

1253 
fio_›ti⁄
 *
o
)

1255 *
uŒp
 = 
	`td_v¨
(
gjv
->
o
, o, o->
off1
);

1256 
GtkAdju°mít
 *
adj
;

1257 
göt
 
ödex
;

1259 i‡(!
uŒp
)

1265 
adj
 = 
	`gtk_•ö_buâ⁄_gë_adju°mít
(
	`GTK_SPIN_BUTTON
(
s
->
•ö
));

1266 *
uŒp
 = 
	`gtk_adju°mít_gë_vÆue
(
adj
);

1271 
ödex
 = 
	`gtk_combo_box_gë_a˘ive
(
	`GTK_COMBO_BOX
(
s
->
combo
));

1272 
ödex
--)

1273 *
uŒp
 *= 1024ULL;

1274 
	}
}

1276 
	$g›t_h™dÀ_°r_ch™ged
(
g›t_job_võw
 *
gjv
,

1277 
g›t_°r
 *
s
, 
fio_›ti⁄
 *
o
)

1279 **
p
 = 
	`td_v¨
(
gjv
->
o
, o, o->
off1
);

1281 i‡(*
p
)

1282 
	`‰ì
(*
p
);

1284 *
p
 = 
	`°rdup
(
	`gtk_íåy_gë_ãxt
(
	`GTK_ENTRY
(
s
->
íåy
)));

1285 
	}
}

1287 
	$g›t_h™dÀ_boﬁ_ch™ged
(
g›t_job_võw
 *
gjv
,

1288 
g›t_boﬁ
 *
b
, 
fio_›ti⁄
 *
o
)

1290 *
ù
 = 
	`td_v¨
(
gjv
->
o
, o, o->
off1
);

1291 
gboﬁón
 
£t
;

1293 
£t
 = 
	`gtk_toggÀ_buâ⁄_gë_a˘ive
(
	`GTK_TOGGLE_BUTTON
(
b
->
check
));

1294 *
ù
 = 
£t
;

1295 
	}
}

1297 
	$g›t_h™dÀ_öt_ch™ged
(
g›t_job_võw
 *
gjv
,

1298 
g›t_öt
 *
i
, 
fio_›ti⁄
 *
o
)

1300 *
ù
 = 
	`td_v¨
(
gjv
->
o
, o, o->
off1
);

1301 
GtkAdju°mít
 *
adj
;

1302 
guöt
 
vÆ
;

1304 
adj
 = 
	`gtk_•ö_buâ⁄_gë_adju°mít
(
	`GTK_SPIN_BUTTON
(
i
->
•ö
));

1305 
vÆ
 = 
	`gtk_adju°mít_gë_vÆue
(
adj
);

1306 *
ù
 = 
vÆ
;

1307 
	}
}

1309 
	$g›t_h™dÀ_combo_°r_ch™ged
(
g›t_job_võw
 *
gjv
,

1310 
g›t_combo
 *
c
,

1311 
fio_›ti⁄
 *
o
)

1313 **
p
 = 
	`td_v¨
(
gjv
->
o
, o, o->
off1
);

1315 i‡(*
p
)

1316 
	`‰ì
(*
p
);

1318 *
p
 = 
	`°rdup
(
	`gtk_combo_box_ãxt_gë_a˘ive_ãxt
(
	`GTK_COMBO_BOX_TEXT
(
c
->
combo
)));

1319 
	}
}

1321 
	$g›t_h™dÀ_combo_öt_ch™ged
(
g›t_job_võw
 *
gjv
,

1322 
g›t_combo
 *
c
,

1323 
fio_›ti⁄
 *
o
)

1325 *
ù
 = 
	`td_v¨
(
gjv
->
o
, o, o->
off1
);

1326 
göt
 
ödex
;

1328 
ödex
 = 
	`gtk_combo_box_gë_a˘ive
(
	`GTK_COMBO_BOX
(
c
->
combo
));

1329 *
ù
 = 
o
->
posvÆ
[
ödex
].
ovÆ
;

1330 
	}
}

1332 
	$g›t_h™dÀ_ch™ged
(
g›t
 *gopt)

1334 
fio_›ti⁄
 *
o
 = &
fio_›ti⁄s
[
g›t
->
›t_ödex
];

1335 
g›t_job_võw
 *
gjv
 = 
g›t
->gjv;

1337 
g›t
->
›t_ty≥
) {

1338 
GOPT_COMBO_INT
: {

1339 
g›t_combo
 *
c
;

1341 
c
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_combo
, gopt);

1342 
	`g›t_h™dÀ_combo_öt_ch™ged
(
gjv
, 
c
, 
o
);

1345 
GOPT_COMBO_STR
: {

1346 
g›t_combo
 *
c
;

1348 
c
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_combo
, gopt);

1349 
	`g›t_h™dÀ_combo_°r_ch™ged
(
gjv
, 
c
, 
o
);

1352 
GOPT_INT
: {

1353 
g›t_öt
 *
i
;

1355 
i
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_öt
, gopt);

1356 
	`g›t_h™dÀ_öt_ch™ged
(
gjv
, 
i
, 
o
);

1359 
GOPT_BOOL
: {

1360 
g›t_boﬁ
 *
b
;

1362 
b
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_boﬁ
, gopt);

1363 
	`g›t_h™dÀ_boﬁ_ch™ged
(
gjv
, 
b
, 
o
);

1366 
GOPT_STR
: {

1367 
g›t_°r
 *
s
;

1369 
s
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_°r
, gopt);

1370 
	`g›t_h™dÀ_°r_ch™ged
(
gjv
, 
s
, 
o
);

1373 
GOPT_STR_VAL
: {

1374 
g›t_°r_vÆ
 *
s
;

1376 
s
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_°r_vÆ
, gopt);

1377 
	`g›t_h™dÀ_°r_vÆ_ch™ged
(
gjv
, 
s
, 
o
);

1380 
GOPT_RANGE
: {

1381 
g›t_ønge
 *
r
;

1383 
r
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_ønge
, gopt);

1384 
	`g›t_h™dÀ_ønge_ch™ged
(
gjv
, 
r
, 
o
);

1387 
GOPT_STR_MULTI
: {

1388 
g›t_°r_mu…i
 *
m
;

1390 
m
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_°r_mu…i
, gopt);

1391 
	`g›t_h™dÀ_°r_mu…i_ch™ged
(
gjv
, 
m
, 
o
);

1395 
	`log_îr
("gfio: bad o±i⁄Åy≥: %d\n", 
g›t
->
›t_ty≥
);

1398 
	}
}

1400 
	$g›t_ªp‹t_upd©e_°©us
(
g›t_job_võw
 *
gjv
)

1402 
gfio_˛õ¡
 *
gc
 = 
gjv
->
˛õ¡
;

1403 
tmp
[80];

1405 
	`•rötf
(
tmp
, "\nCom∂ëed wôhÉº‹: %d\n", 
gc
->
upd©e_job_°©us
);

1406 
	`gfio_ªp‹t_öfo
(
gc
->
ge
->
ui
, "Upd©êjob", 
tmp
);

1407 
	}
}

1409 
	$g›t_h™dÀ_ch™ged_›ti⁄s
(
g›t_job_võw
 *
gjv
)

1411 
gfio_˛õ¡
 *
gc
 = 
gjv
->
˛õ¡
;

1412 
Êi°_hód
 *
íåy
;

1413 
uöt64_t
 
waôid
 = 0;

1414 
g›t
 *gopt;

1415 
ªt
;

1417 
	`Êi°_f‹_óch
(
íåy
, &
gjv
->
ch™ged_li°
) {

1418 
g›t
 = 
	`Êi°_íåy
(
íåy
, g›t, 
ch™ged_li°
);

1419 
	`g›t_h™dÀ_ch™ged
(
g›t
);

1422 
gc
->
upd©e_job_°©us
 = 0;

1423 
gc
->
upd©e_job_d⁄e
 = 0;

1425 
ªt
 = 
	`fio_˛õ¡_upd©e_›ti⁄s
(
gc
->
˛õ¡
, 
gjv
->
o
, &
waôid
);

1426 i‡(
ªt
)

1427 
d⁄e
;

1429 
ªt
 = 
	`fio_˛õ¡_waô_f‹_ª∂y
(
gc
->
˛õ¡
, 
waôid
);

1430 i‡(
ªt
)

1431 
d⁄e
;

1433 
	`as£π
(
gc
->
upd©e_job_d⁄e
);

1434 i‡(
gc
->
upd©e_job_°©us
)

1435 
d⁄e
;

1437 !
	`Êi°_em±y
(&
gjv
->
ch™ged_li°
)) {

1438 
g›t
 = 
	`Êi°_fú°_íåy
(&
gjv
->
ch™ged_li°
, gopt, changed_list);

1439 
	`Êi°_dñ_öô
(&
g›t
->
ch™ged_li°
);

1442 
d⁄e
:

1443 
	`g›t_dülog_upd©e_≠∂y_buâ⁄
(
gjv
);

1444  
ªt
;

1445 
	}
}

1447 
göt
 
	$g›t_dülog_ˇn˚l
(
göt
 
ª•⁄£
)

1449 
ª•⁄£
) {

1450 
GTK_RESPONSE_NONE
:

1451 
GTK_RESPONSE_REJECT
:

1452 
GTK_RESPONSE_DELETE_EVENT
:

1453 
GTK_RESPONSE_CANCEL
:

1454 
GTK_RESPONSE_NO
:

1459 
	}
}

1461 
göt
 
	$g›t_dülog_d⁄e
(
göt
 
ª•⁄£
)

1463 
ª•⁄£
) {

1464 
GTK_RESPONSE_ACCEPT
:

1465 
GTK_RESPONSE_OK
:

1466 
GTK_RESPONSE_YES
:

1471 
	}
}

1473 
	$g›t_h™dÀ_›ti⁄_dülog
(
g›t_job_võw
 *
gjv
)

1475 
göt
 
ª•⁄£
;

1478 
ª•⁄£
 = 
	`gtk_dülog_run
(
	`GTK_DIALOG
(
gjv
->
dülog
));

1480 i‡(
	`g›t_dülog_ˇn˚l
(
ª•⁄£
) ||

1481 
	`g›t_dülog_d⁄e
(
ª•⁄£
))

1487 
	`g›t_h™dÀ_ch™ged_›ti⁄s
(
gjv
);

1488 
	`g›t_ªp‹t_upd©e_°©us
(
gjv
);

1491 i‡(
	`g›t_dülog_ˇn˚l
(
ª•⁄£
))

1494 
	`g›t_h™dÀ_ch™ged_›ti⁄s
(
gjv
);

1495 
	}
}

1497 
	$g›t_job_ch™ged
(
GtkComboBox
 *
box
, 
gpoöãr
 
d©a
)

1499 
g›t_job_võw
 *
gjv
 = (g›t_job_võw *Ë
d©a
;

1500 
gfio_˛õ¡_›ti⁄s
 *
gco
 = 
NULL
;

1501 
gfio_˛õ¡
 *
gc
 = 
gjv
->
˛õ¡
;

1502 
Êi°_hód
 *
íåy
;

1503 
gch¨
 *
job
;

1509 i‡(!
	`Êi°_em±y
(&
gjv
->
ch™ged_li°
)) {

1510 
	`gfio_ªp‹t_öfo
(
gc
->
ge
->
ui
, "Internal Error", "Modified options on job switch.\nThat shouldÇot beÖossible!\n");

1514 
job
 = 
	`gtk_combo_box_ãxt_gë_a˘ive_ãxt
(
	`GTK_COMBO_BOX_TEXT
(
gjv
->
job_combo
));

1515 
	`Êi°_f‹_óch
(
íåy
, &
gc
->
o_li°
) {

1516 c⁄° *
«me
;

1518 
gco
 = 
	`Êi°_íåy
(
íåy
, 
gfio_˛õ¡_›ti⁄s
, 
li°
);

1519 
«me
 = 
gco
->
o
.name;

1520 i‡(!
«me
 || !
	`°æí
(name))

1521 
«me
 = "Default job";

1523 i‡(!
	`°rcmp
(
«me
, 
job
))

1526 
gco
 = 
NULL
;

1529 i‡(!
gco
) {

1530 
	`gfio_ªp‹t_öfo
(
gc
->
ge
->
ui
, "Internal Error", "CouldÇot find job description.\nThat shouldÇot beÖossible!\n");

1534 
gjv
->
ö_job_swôch
 = 1;

1535 
	`g›t_£t_›ti⁄s
(
gjv
, &
gco
->
o
);

1536 
gjv
->
ö_job_swôch
 = 0;

1537 
	}
}

1539 
	$g›t_gë_›ti⁄s_wödow
(
GtkWidgë
 *
wödow
, 
gfio_˛õ¡
 *
gc
)

1541 
GtkWidgë
 *
dülog
, *
nŸebook
, *
vbox
, *
t›vbox
, *
combo
;

1542 
gfio_˛õ¡_›ti⁄s
 *
gco
;

1543 
Êi°_hód
 *
íåy
;

1544 
g›t_job_võw
 *
gjv
;

1546 
dülog
 = 
	`gtk_dülog_√w_wôh_buâ⁄s
("Fio options",

1547 
	`GTK_WINDOW
(
wödow
), 
GTK_DIALOG_DESTROY_WITH_PARENT
,

1548 
GTK_STOCK_OK
, 
GTK_RESPONSE_ACCEPT
,

1549 
GTK_STOCK_APPLY
, 
GTK_RESPONSE_APPLY
,

1550 
GTK_STOCK_CANCEL
, 
GTK_RESPONSE_REJECT
, 
NULL
);

1552 
combo
 = 
	`gtk_combo_box_ãxt_√w
();

1553 
	`Êi°_f‹_óch
(
íåy
, &
gc
->
o_li°
) {

1554 
thªad_›ti⁄s
 *
o
;

1555 c⁄° *
«me
;

1557 
gco
 = 
	`Êi°_íåy
(
íåy
, 
gfio_˛õ¡_›ti⁄s
, 
li°
);

1558 
o
 = &
gco
->o;

1559 
«me
 = 
o
->name;

1560 i‡(!
«me
 || !
	`°æí
(name))

1561 
«me
 = "Default job";

1563 
	`gtk_combo_box_ãxt_≠≥nd_ãxt
(
	`GTK_COMBO_BOX_TEXT
(
combo
), 
«me
);

1565 
	`gtk_combo_box_£t_a˘ive
(
	`GTK_COMBO_BOX
(
combo
), 0);

1567 
	`gtk_widgë_£t_size_ªque°
(
	`GTK_WIDGET
(
dülog
), 1024, 768);

1569 
t›vbox
 = 
	`gtk_dülog_gë_c⁄ã¡_¨ó
(
	`GTK_DIALOG
(
dülog
));

1570 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
t›vbox
), 
combo
, 
FALSE
, FALSE, 5);

1572 
vbox
 = 
	`gtk_vbox_√w
(
TRUE
, 5);

1573 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
t›vbox
), 
vbox
, 
TRUE
, TRUE, 5);

1575 
nŸebook
 = 
	`gtk_nŸebook_√w
();

1576 
	`gtk_nŸebook_£t_s¸ﬁœbÀ
(
	`GTK_NOTEBOOK
(
nŸebook
), 1);

1577 
	`gtk_nŸebook_p›up_íabÀ
(
	`GTK_NOTEBOOK
(
nŸebook
));

1578 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
nŸebook
, 
TRUE
, TRUE, 5);

1580 
gjv
 = 
	`ˇŒoc
(1, (*gjv));

1581 
	`INIT_FLIST_HEAD
(&
gjv
->
ch™ged_li°
);

1582 
gco
 = 
	`Êi°_fú°_íåy
(&
gc
->
o_li°
, 
gfio_˛õ¡_›ti⁄s
, 
li°
);

1583 
gjv
->
o
 = &
gco
->o;

1584 
gjv
->
dülog
 = dialog;

1585 
gjv
->
˛õ¡
 = 
gc
;

1586 
gjv
->
job_combo
 = 
combo
;

1587 
	`g›t_add_group_èbs
(
nŸebook
, 
gjv
);

1588 
	`g›t_add_›ti⁄s
(
gjv
, &
gco
->
o
);

1589 
	`g›t_dülog_upd©e_≠∂y_buâ⁄
(
gjv
);

1591 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
combo
), "ch™ged", 
	`G_CALLBACK
(
g›t_job_ch™ged
), 
gjv
);

1593 
	`gtk_widgë_show_Æl
(
dülog
);

1595 
	`g›t_h™dÀ_›ti⁄_dülog
(
gjv
);

1597 
	`gtk_widgë_de°roy
(
dülog
);

1598 
	`‰ì
(
gjv
);

1599 
	}
}

1604 
	$g›t_öô
()

1606 
i
;

1608 
g›t_dï_åì
 = 
	`g_node_√w
(
NULL
);

1610 
i
 = 0; 
fio_›ti⁄s
[i].
«me
; i++) {

1611 
fio_›ti⁄
 *
o
 = &
fio_›ti⁄s
[
i
];

1612 
GNode
 *
node
, *
≈¨ít
;

1618 
node
 = 
	`g_node_√w
(
o
);

1619 
≈¨ít
 = 
g›t_dï_åì
;

1620 i‡(
o
->
∑ª¡
) {

1621 
fio_›ti⁄
 *
∑ª¡
;

1623 
∑ª¡
 = 
	`fio_›ti⁄_föd
(
o
->parent);

1624 
≈¨ít
 = 
	`g_node_föd
(
g›t_dï_åì
, 
G_IN_ORDER
, 
G_TRAVERSE_ALL
, 
∑ª¡
);

1625 i‡(!
≈¨ít
) {

1626 
	`log_îr
("fio: didÇŸ födÖ¨íà%†f‹ o± %s\n", 
o
->
«me
, o->
∑ª¡
);

1627 
≈¨ít
 = 
g›t_dï_åì
;

1631 
	`g_node_ö£π
(
≈¨ít
, -1, 
node
);

1633 
	}
}

1635 
	$g›t_exô
()

1637 
	`g_node_de°roy
(
g›t_dï_åì
);

1638 
g›t_dï_åì
 = 
NULL
;

1639 
	}
}

	@goptions.h

1 #i‚de‡
GFIO_OPTIONS_H


2 
	#GFIO_OPTIONS_H


	)

4 
g›t_gë_›ti⁄s_wödow
(
GtkWidgë
 *
wödow
, 
gfio_˛õ¡
 *
gc
);

5 
g›t_öô
();

6 
g›t_exô
();

	@graph.c

23 
	~<°rög.h
>

24 
	~<°dlib.h
>

25 
	~<m©h.h
>

26 
	~<as£π.h
>

27 
	~<°dlib.h
>

29 
	~<ˇúo.h
>

30 
	~<gtk/gtk.h
>

32 
	~"tickm¨ks.h
"

33 
	~"gøph.h
"

34 
	~"Êi°.h
"

35 
	~"lib/¥io_åì.h
"

36 
	~"ˇúo_ãxt_hñ≥rs.h
"

41 
	#TOOLTIP_DELTA
 0.08

	)

43 
	sxyvÆue
 {

44 
	mx
, 
	my
;

48 
	mGV_F_ON_PRIO
 = 1,

49 
	mGV_F_PRIO_SKIP
 = 2,

52 
	sgøph_vÆue
 {

53 
Êi°_hód
 
	mli°
;

54 
¥io_åì_node
 
	mnode
;

55 
Êi°_hód
 
	mÆüs
;

56 
	mÊags
;

57 *
	mtoﬁtù
;

58 *
	mvÆue
;

61 
	sgøph_œbñ
 {

62 
Êi°_hód
 
	mli°
;

63 *
	mœbñ
;

64 
Êi°_hód
 
	mvÆue_li°
;

65 
¥io_åì_roŸ
 
	m¥io_åì
;

66 
	mr
, 
	mg
, 
	mb
;

67 
	mhide
;

68 
	mvÆue_cou¡
;

69 
gøph
 *
	m∑ª¡
;

72 
	stick_vÆue
 {

73 
	moff£t
;

74 
	mvÆue
;

77 
	sgøph
 {

78 *
	mtôÀ
;

79 *
	mxtôÀ
;

80 *
	mytôÀ
;

81 
	mxdim
, 
	mydim
;

82 
	mxoff£t
, 
	myoff£t
;

83 
Êi°_hód
 
	mœbñ_li°
;

84 
	m≥r_œbñ_limô
;

85 c⁄° *
	mf⁄t
;

86 
gøph_axis_unô_ch™ge_ˇŒback
 
	mx_axis_unô_ch™ge_ˇŒback
;

87 
gøph_axis_unô_ch™ge_ˇŒback
 
	my_axis_unô_ch™ge_ˇŒback
;

88 
	mba£_off£t
;

89 
	md⁄t_gøph_Æl_zî€s
;

90 
	mÀ·_exåa
;

91 
	mright_exåa
;

92 
	mt›_exåa
;

93 
	mbŸtom_exåa
;

95 
	mxtick_zîo
;

96 
	mxtick_dñè
;

97 
	mxtick_zîo_vÆ
;

98 
	mxtick_⁄e_vÆ
;

99 
	mytick_zîo
;

100 
	mytick_dñè
;

101 
	mytick_zîo_vÆ
;

102 
	mytick_⁄e_vÆ
;

105 
	$gøph_£t_size
(
gøph
 *
g
, 
xdim
, 
ydim
)

107 
g
->
xdim
 = xdim;

108 
g
->
ydim
 = ydim;

109 
	}
}

111 
	$gøph_£t_posôi⁄
(
gøph
 *
g
, 
xoff£t
, 
yoff£t
)

113 
g
->
xoff£t
 = xoffset;

114 
g
->
yoff£t
 = yoffset;

115 
	}
}

117 
gøph
 *
	$gøph_√w
(
xdim
, 
ydim
, c⁄° *
f⁄t
)

119 
gøph
 *
g
;

121 
g
 = 
	`ˇŒoc
(1, (*g));

122 
	`INIT_FLIST_HEAD
(&
g
->
œbñ_li°
);

123 
	`gøph_£t_size
(
g
, 
xdim
, 
ydim
);

124 
g
->
≥r_œbñ_limô
 = -1;

125 
g
->
f⁄t
 = font;

126 i‡(!
g
->
f⁄t
)

127 
g
->
f⁄t
 = 
GRAPH_DEFAULT_FONT
;

128  
g
;

129 
	}
}

131 
	$gøph_£t_f⁄t
(
gøph
 *
g
, c⁄° *
f⁄t
)

133 
g
->
f⁄t
 = font;

134 
	}
}

136 
	$gøph_x_axis_unô_ch™ge_nŸify
(
gøph
 *
g
, 
gøph_axis_unô_ch™ge_ˇŒback
 
f
)

138 
g
->
x_axis_unô_ch™ge_ˇŒback
 = 
f
;

139 
	}
}

141 
	$gøph_y_axis_unô_ch™ge_nŸify
(
gøph
 *
g
, 
gøph_axis_unô_ch™ge_ˇŒback
 
f
)

143 
g
->
y_axis_unô_ch™ge_ˇŒback
 = 
f
;

144 
	}
}

146 
	$cou¡_œbñs
(
gøph
 *
g
)

148 
Êi°_hód
 *
íåy
;

149 
cou¡
 = 0;

151 
	`Êi°_f‹_óch
(
íåy
, &
g
->
œbñ_li°
)

152 
cou¡
++;

154  
cou¡
;

155 
	}
}

157 
	$cou¡_vÆues
(
gøph_œbñ
 *
l
)

159 
Êi°_hód
 *
íåy
;

160 
cou¡
 = 0;

162 
	`Êi°_f‹_óch
(
íåy
, &
l
->
vÆue_li°
)

163 
cou¡
++;

165  
cou¡
;

166 
	}
}

168 (*
	tdoubÀ_com∑øt‹
)(
	ta
, 
	tb
);

170 
	$mödoubÀ
(
a
, 
b
)

172  
a
 < 
b
 ?á : b;

173 
	}
}

175 
	$maxdoubÀ
(
a
, 
b
)

177  
a
 < 
b
 ? b :á;

178 
	}
}

180 
	$föd_doubÀ_vÆues
(
gøph_œbñ
 *
l
, 
doubÀ_com∑øt‹
 
cmp
)

182 
Êi°_hód
 *
íåy
;

183 
™swî
 = 0.0, 
tmp
;

184 
fú°
 = 1;

186 i‡(
	`Êi°_em±y
(&
l
->
vÆue_li°
))

189 
	`Êi°_f‹_óch
(
íåy
, &
l
->
vÆue_li°
) {

190 
gøph_vÆue
 *
i
;

192 
i
 = 
	`Êi°_íåy
(
íåy
, 
gøph_vÆue
, 
li°
);

193 
tmp
 = *(*Ë
i
->
vÆue
;

194 i‡(
fú°
) {

195 
™swî
 = 
tmp
;

196 
fú°
 = 0;

198 
™swî
 = 
	`cmp
◊nswî, 
tmp
);

201  
™swî
;

202 
	}
}

204 
	$föd_doubÀ_d©a
(
gøph
 *
g
, 
doubÀ_com∑øt‹
 
cmp
)

206 
Êi°_hód
 *
íåy
;

207 
gøph_œbñ
 *
i
;

208 
fú°
 = 1;

209 
™swî
, 
tmp
;

211 i‡(
	`Êi°_em±y
(&
g
->
œbñ_li°
))

214 
	`Êi°_f‹_óch
(
íåy
, &
g
->
œbñ_li°
) {

215 
i
 = 
	`Êi°_íåy
(
íåy
, 
gøph_œbñ
, 
li°
);

216 
tmp
 = 
	`föd_doubÀ_vÆues
(
i
, 
cmp
);

217 i‡(
fú°
) {

218 
™swî
 = 
tmp
;

219 
fú°
 = 0;

221 
™swî
 = 
	`cmp
(
tmp
,ánswer);

224  
™swî
;

225 
	}
}

227 
	$föd_mö_d©a
(
gøph
 *
g
)

229  
	`föd_doubÀ_d©a
(
g
, 
mödoubÀ
);

230 
	}
}

232 
	$föd_max_d©a
(
gøph
 *
g
)

234  
	`föd_doubÀ_d©a
(
g
, 
maxdoubÀ
);

235 
	}
}

237 
	$døw_b¨s
(
gøph
 *
bg
, 
ˇúo_t
 *
¸
, 
gøph_œbñ
 *
lb
,

238 
œbñ_off£t
, 
b¨_width
,

239 
möd©a
, 
maxd©a
)

241 
Êi°_hód
 *
íåy
;

242 
x1
, 
y1
, 
x2
, 
y2
;

243 
b¨_num
 = 0;

244 
domaö
, 
ønge
, 
v
;

246 
domaö
 = (
maxd©a
 - 
möd©a
);

247 
ønge
 = (Ë
bg
->
ydim
 * 0.80;

248 
	`ˇúo_°roke
(
¸
);

249 
	`Êi°_f‹_óch
(
íåy
, &
lb
->
vÆue_li°
) {

250 
gøph_vÆue
 *
i
;

252 
i
 = 
	`Êi°_íåy
(
íåy
, 
gøph_vÆue
, 
li°
);

254 
x1
 = 
œbñ_off£t
 + (Ë
b¨_num
 * 
b¨_width
 + (bar_width * 0.05);

255 
x2
 = 
x1
 + 
b¨_width
 * 0.90;

256 
y2
 = 
bg
->
ydim
 * 0.90;

257 
v
 = *(*Ë
i
->
vÆue
;

258 
y1
 = 
y2
 - (((
v
 - 
möd©a
Ë/ 
domaö
Ë* 
ønge
);

259 
	`ˇúo_move_to
(
¸
, 
x1
, 
y1
);

260 
	`ˇúo_löe_to
(
¸
, 
x1
, 
y2
);

261 
	`ˇúo_löe_to
(
¸
, 
x2
, 
y2
);

262 
	`ˇúo_löe_to
(
¸
, 
x2
, 
y1
);

263 
	`ˇúo_˛o£_∑th
(
¸
);

264 
	`ˇúo_fûl
(
¸
);

265 
	`ˇúo_°roke
(
¸
);

266 
b¨_num
++;

268 
	}
}

270 
	$gøph_døw_comm⁄
(
gøph
 *
g
, 
ˇúo_t
 *
¸
, *
x1
,

271 *
y1
, *
x2
, *
y2
)

273 c⁄° 
shade_cﬁ
[3][3] = { { 0.55, 0.54, 0.54 },

276 
i
;

278 *
x1
 = 0.10 * 
g
->
xdim
;

279 *
x2
 = 0.95 * 
g
->
xdim
;

280 *
y1
 = 0.10 * 
g
->
ydim
;

281 *
y2
 = 0.90 * 
g
->
ydim
;

286 
	`ˇúo_£t_löe_width
(
¸
, 1.0);

287 
i
 = 0; i < 3; i++) {

288 
off£t
 = 
i
 + 1.0;

290 
	`ˇúo_£t_sour˚_rgb
(
¸
, 
shade_cﬁ
[
i
][0], shade_col[i][1], shade_col[i][2]);

291 
	`ˇúo_move_to
(
¸
, 
off£t
 + *
x1
, *
y1
 - offset);

292 
	`ˇúo_löe_to
(
¸
, *
x2
 + 
off£t
, *
y1
 - offset);

293 
	`ˇúo_löe_to
(
¸
, *
x2
 + 
off£t
, *
y2
 - offset);

294 
	`ˇúo_°roke
(
¸
);

297 
	`ˇúo_£t_sour˚_rgb
(
¸
, 0, 0, 0);

298 
	`ˇúo_£t_löe_width
(
¸
, 1.2);

300 
	`ˇúo_move_to
(
¸
, *
x1
, *
y1
);

301 
	`ˇúo_löe_to
(
¸
, *
x1
, *
y2
);

302 
	`ˇúo_löe_to
(
¸
, *
x2
, *
y2
);

303 
	`ˇúo_löe_to
(
¸
, *
x2
, *
y1
);

304 
	`ˇúo_löe_to
(
¸
, *
x1
, *
y1
);

305 
	`ˇúo_°roke
(
¸
);

307 
	`døw_˚¡îed_ãxt
(
¸
, 
g
->
f⁄t
, g->
xdim
 / 2, g->
ydim
 / 20, 20.0, g->
tôÀ
);

308 
	`døw_˚¡îed_ãxt
(
¸
, 
g
->
f⁄t
, g->
xdim
 / 2, g->
ydim
 * 0.97, 14.0, g->
xtôÀ
);

309 
	`døw_vîtiˇl_˚¡îed_ãxt
(
¸
, 
g
->
f⁄t
, g->
xdim
 * 0.02, g->
ydim
 / 2, 14.0, g->
ytôÀ
);

310 
	`ˇúo_°roke
(
¸
);

311 
	}
}

313 
	$gøph_døw_x_ticks
(
gøph
 *
g
, 
ˇúo_t
 *
¸
,

314 
x1
, 
y1
, 
x2
, 
y2
,

315 
möx
, 
maxx
, 
¡icks
, 
add_tm_ãxt
)

317 
tickm¨k
 *
tm
;

318 
tx
;

319 
i
, 
powî_of_ãn
;

320 
dash
[] = { 1.0, 2.0 };

322 
¡icks
 = 
	`ˇlc_tickm¨ks
(
möx
, 
maxx
,Çticks, &
tm
, &
powî_of_ãn
,

323 
g
->
x_axis_unô_ch™ge_ˇŒback
 =
NULL
, g->
ba£_off£t
);

324 i‡(
g
->
x_axis_unô_ch™ge_ˇŒback
)

325 
g
->
	`x_axis_unô_ch™ge_ˇŒback
(g, 
powî_of_ãn
);

327 
i
 = 0; i < 
¡icks
; i++) {

328 
tx
 = (((
tm
[
i
].
vÆue
Ë- 
möx
Ë/ (
maxx
 - möx)Ë* (
x2
 - 
x1
) + x1;

333 i‡(!
i
) {

334 
g
->
xtick_zîo
 = 
tx
;

335 
g
->
xtick_zîo_vÆ
 = 
tm
[0].
vÆue
;

336 } i‡(
i
 == 1) {

337 
g
->
xtick_dñè
 = (
tm
[1].
vÆue
 -Åm[0].vÆueË/ (
tx
 - g->
xtick_zîo
);

338 
g
->
xtick_⁄e_vÆ
 = 
tm
[1].
vÆue
;

342 i‡(
x1
 - 
tx
 > 0.01 ||Åx - 
x2
 > 0.01)

346 
	`ˇúo_£t_löe_width
(
¸
, 1.0);

347 
	`ˇúo_move_to
(
¸
, 
tx
, 
y2
);

348 
	`ˇúo_löe_to
(
¸
, 
tx
, 
y2
 + (y2 - 
y1
) * 0.03);

349 
	`ˇúo_°roke
(
¸
);

352 
	`ˇúo_ßve
(
¸
);

353 
	`ˇúo_£t_dash
(
¸
, 
dash
, 2, 0.66);

354 
	`ˇúo_£t_löe_width
(
¸
, 0.33);

355 
	`ˇúo_move_to
(
¸
, 
tx
, 
y1
);

356 
	`ˇúo_löe_to
(
¸
, 
tx
, 
y2
);

357 
	`ˇúo_°roke
(
¸
);

358 
	`ˇúo_ª°‹e
(
¸
);

360 i‡(!
add_tm_ãxt
)

364 
	`døw_˚¡îed_ãxt
(
¸
, 
g
->
f⁄t
, 
tx
, 
y2
 * 1.04, 12.0, 
tm
[
i
].
°rög
);

365 
	`ˇúo_°roke
(
¸
);

367 
	}
}

369 
	$gøph_døw_y_ticks
(
gøph
 *
g
, 
ˇúo_t
 *
¸
,

370 
x1
, 
y1
, 
x2
, 
y2
,

371 
möy
, 
maxy
, 
¡icks
, 
add_tm_ãxt
)

373 
tickm¨k
 *
tm
;

374 
ty
;

375 
i
, 
powî_of_ãn
;

376 
dash
[] = { 1.0, 2.0 };

378 
¡icks
 = 
	`ˇlc_tickm¨ks
(
möy
, 
maxy
,Çticks, &
tm
, &
powî_of_ãn
,

379 
g
->
y_axis_unô_ch™ge_ˇŒback
 =
NULL
, g->
ba£_off£t
);

380 i‡(
g
->
y_axis_unô_ch™ge_ˇŒback
)

381 
g
->
	`y_axis_unô_ch™ge_ˇŒback
(g, 
powî_of_ãn
);

388 
maxy
 = 
tm
[
¡icks
 - 1].
vÆue
;

390 
i
 = 0; i < 
¡icks
; i++) {

391 
ty
 = 
y2
 - (((
tm
[
i
].
vÆue
Ë- 
möy
Ë/ (
maxy
 - möy)Ë* (y2 - 
y1
);

396 i‡(!
i
) {

397 
g
->
ytick_zîo
 = 
ty
;

398 
g
->
ytick_zîo_vÆ
 = 
tm
[0].
vÆue
;

399 } i‡(
i
 == 1) {

400 
g
->
ytick_dñè
 = (
tm
[1].
vÆue
 -Åm[0].vÆueË/ (
ty
 - g->
ytick_zîo
);

401 
g
->
ytick_⁄e_vÆ
 = 
tm
[1].
vÆue
;

405 i‡(
y1
 - 
ty
 > 0.01 ||Åy - 
y2
 > 0.01)

409 
	`ˇúo_move_to
(
¸
, 
x1
, 
ty
);

410 
	`ˇúo_löe_to
(
¸
, 
x1
 - (
x2
 - x1Ë* 0.02, 
ty
);

411 
	`ˇúo_°roke
(
¸
);

414 
	`ˇúo_ßve
(
¸
);

415 
	`ˇúo_£t_dash
(
¸
, 
dash
, 2, 0.66);

416 
	`ˇúo_£t_löe_width
(
¸
, 0.33);

417 
	`ˇúo_move_to
(
¸
, 
x1
, 
ty
);

418 
	`ˇúo_löe_to
(
¸
, 
x2
, 
ty
);

419 
	`ˇúo_°roke
(
¸
);

420 
	`ˇúo_ª°‹e
(
¸
);

422 i‡(!
add_tm_ãxt
)

426 
	`døw_right_ju°ifõd_ãxt
(
¸
, 
g
->
f⁄t
, 
x1
 - (
x2
 - x1Ë* 0.025, 
ty
, 12.0, 
tm
[
i
].
°rög
);

427 
	`ˇúo_°roke
(
¸
);

433  
maxy
;

434 
	}
}

436 
	$b¨_gøph_døw
(
gøph
 *
bg
, 
ˇúo_t
 *
¸
)

438 
x1
, 
y1
, 
x2
, 
y2
;

439 
•a˚_≥r_œbñ
, 
b¨_width
;

440 
œbñ_off£t
, 
möd©a
, 
maxd©a
;

441 
i
, 
∆abñs
;

442 
gøph_œbñ
 *
lb
;

443 
Êi°_hód
 *
íåy
;

445 
	`ˇúo_ßve
(
¸
);

446 
	`ˇúo_å™¶©e
(
¸
, 
bg
->
xoff£t
, bg->
yoff£t
);

447 
	`gøph_døw_comm⁄
(
bg
, 
¸
, &
x1
, &
y1
, &
x2
, &
y2
);

449 
∆abñs
 = 
	`cou¡_œbñs
(
bg
);

450 
•a˚_≥r_œbñ
 = (
x2
 - 
x1
Ë/ (Ë
∆abñs
;

456 
möd©a
 = 
	`föd_mö_d©a
(
bg
);

457 i‡(
möd©a
 > 0)

458 
möd©a
 = 0;

460 
maxd©a
 = 
	`föd_max_d©a
(
bg
);

462 i‡(
	`Ábs
(
maxd©a
 - 
möd©a
) < 1e-20) {

463 
	`døw_˚¡îed_ãxt
(
¸
, 
bg
->
f⁄t
,

464 
x1
 + (
x2
 - x1) / 2.0,

465 
y1
 + (
y2
 - y1) / 2.0, 20.0, "No good data");

469 
maxd©a
 = 
	`gøph_døw_y_ticks
(
bg
, 
¸
, 
x1
, 
y1
, 
x2
, 
y2
, 
möd©a
, maxdata, 10, 1);

470 
i
 = 0;

471 
	`Êi°_f‹_óch
(
íåy
, &
bg
->
œbñ_li°
) {

472 
nvÆues
;

474 
lb
 = 
	`Êi°_íåy
(
íåy
, 
gøph_œbñ
, 
li°
);

475 
nvÆues
 = 
	`cou¡_vÆues
(
lb
);

476 
b¨_width
 = (
•a˚_≥r_œbñ
 - s∑˚_≥r_œbñ * 0.2Ë/ (Ë
nvÆues
;

477 
œbñ_off£t
 = 
bg
->
xdim
 * 0.1 + 
•a˚_≥r_œbñ
 * (Ë
i
 + space_per_label * 0.1;

478 
	`døw_b¨s
(
bg
, 
¸
, 
lb
, 
œbñ_off£t
, 
b¨_width
, 
möd©a
, 
maxd©a
);

480 
	`døw_˚¡îed_ãxt
(
¸
, 
bg
->
f⁄t
, 
x1
 + 
•a˚_≥r_œbñ
 * (
i
 + 0.5), bg->
ydim
 * 0.93,

481 12.0, 
lb
->
œbñ
);

482 
i
++;

484 
	`ˇúo_°roke
(
¸
);

485 
	`ˇúo_ª°‹e
(
¸
);

486 
	}
}

488 (*
	txy_vÆue_exåa˘‹
)(
	tgøph_vÆue
 *
	tv
);

490 
	$gëx
(
gøph_vÆue
 *
v
)

492 
xyvÆue
 *
xy
 = 
v
->
vÆue
;

493  
xy
->
x
;

494 
	}
}

496 
	$gëy
(
gøph_vÆue
 *
v
)

498 
xyvÆue
 *
xy
 = 
v
->
vÆue
;

499  
xy
->
y
;

500 
	}
}

502 
	$föd_xy_vÆue
(
gøph
 *
g
, 
xy_vÆue_exåa˘‹
 
gëvÆue
, 
doubÀ_com∑øt‹
 
cmp
)

504 
tmp
, 
™swî
 = 0.0;

505 
gøph_œbñ
 *
i
;

506 
gøph_vÆue
 *
j
;

507 
Êi°_hód
 *
jíåy
, *
íåy
;

508 
fú°
 = 1;

510 
	`Êi°_f‹_óch
(
íåy
, &
g
->
œbñ_li°
) {

511 
i
 = 
	`Êi°_íåy
(
íåy
, 
gøph_œbñ
, 
li°
);

513 
	`Êi°_f‹_óch
(
jíåy
, &
i
->
vÆue_li°
) {

514 
j
 = 
	`Êi°_íåy
(
jíåy
, 
gøph_vÆue
, 
li°
);

515 
tmp
 = 
	`gëvÆue
(
j
);

516 i‡(
fú°
) {

517 
fú°
 = 0;

518 
™swî
 = 
tmp
;

520 
™swî
 = 
	`cmp
(
tmp
,ánswer);

524  
™swî
;

525 
	}
}

527 
	$löe_gøph_døw
(
gøph
 *
g
, 
ˇúo_t
 *
¸
)

529 
x1
, 
y1
, 
x2
, 
y2
;

530 
möx
, 
möy
, 
maxx
, 
maxy
, 
gmöx
, 
gmöy
, 
gmaxx
, 
gmaxy
;

531 
tx
, 
ty
, 
t›_exåa
, 
bŸtom_exåa
, 
À·_exåa
, 
right_exåa
;

532 
gøph_œbñ
 *
i
;

533 
gøph_vÆue
 *
j
;

534 
good_d©a
 = 1, 
fú°
 = 1;

535 
Êi°_hód
 *
íåy
, *
À¡ry
;

537 
	`ˇúo_ßve
(
¸
);

538 
	`ˇúo_å™¶©e
(
¸
, 
g
->
xoff£t
, g->
yoff£t
);

539 
	`gøph_døw_comm⁄
(
g
, 
¸
, &
x1
, &
y1
, &
x2
, &
y2
);

541 
möx
 = 
	`föd_xy_vÆue
(
g
, 
gëx
, 
mödoubÀ
);

542 
maxx
 = 
	`föd_xy_vÆue
(
g
, 
gëx
, 
maxdoubÀ
);

543 
möy
 = 
	`föd_xy_vÆue
(
g
, 
gëy
, 
mödoubÀ
);

550 i‡(
möy
 > 0)

551 
möy
 = 0;

553 
maxy
 = 
	`föd_xy_vÆue
(
g
, 
gëy
, 
maxdoubÀ
);

555 i‡(
	`Ábs
(
maxx
 - 
möx
Ë< 1e-20 || fabs(
maxy
 - 
möy
) < 1e-20) {

556 
good_d©a
 = 0;

557 
möx
 = 0.0;

558 
möy
 = 0.0;

559 
maxx
 = 10.0;

560 
maxy
 = 100.0;

563 
t›_exåa
 = 0.0;

564 
bŸtom_exåa
 = 0.0;

565 
À·_exåa
 = 0.0;

566 
right_exåa
 = 0.0;

568 i‡(
g
->
t›_exåa
 > 0.001)

569 
t›_exåa
 = 
	`Ábs
(
maxy
 - 
möy
Ë* 
g
->top_extra;

570 i‡(
g
->
bŸtom_exåa
 > 0.001)

571 
bŸtom_exåa
 = 
	`Ábs
(
maxy
 - 
möy
Ë* 
g
->bottom_extra;

572 i‡(
g
->
À·_exåa
 > 0.001)

573 
À·_exåa
 = 
	`Ábs
(
maxx
 - 
möx
Ë* 
g
->left_extra;

574 i‡(
g
->
right_exåa
 > 0.001)

575 
right_exåa
 = 
	`Ábs
(
maxx
 - 
möx
Ë* 
g
->right_extra;

577 
gmöx
 = 
möx
 - 
À·_exåa
;

578 
gmaxx
 = 
maxx
 + 
right_exåa
;

579 
gmöy
 = 
möy
 - 
bŸtom_exåa
;

580 
gmaxy
 = 
maxy
 + 
t›_exåa
;

582 
	`gøph_døw_x_ticks
(
g
, 
¸
, 
x1
, 
y1
, 
x2
, 
y2
, 
gmöx
, 
gmaxx
, 10, 
good_d©a
);

583 
gmaxy
 = 
	`gøph_døw_y_ticks
(
g
, 
¸
, 
x1
, 
y1
, 
x2
, 
y2
, 
gmöy
, gmaxy, 10, 
good_d©a
);

585 i‡(!
good_d©a
)

586 
skù_d©a
;

588 
	`ˇúo_£t_löe_width
(
¸
, 1.5);

589 
	`ˇúo_£t_löe_joö
(
¸
, 
CAIRO_LINE_JOIN_ROUND
);

591 
	`Êi°_f‹_óch
(
À¡ry
, &
g
->
œbñ_li°
) {

592 
i
 = 
	`Êi°_íåy
(
À¡ry
, 
gøph_œbñ
, 
li°
);

593 
fú°
 = 1;

594 i‡(
i
->
hide
 || i->
r
 < 0)

597 
	`ˇúo_£t_sour˚_rgb
(
¸
, 
i
->
r
, i->
g
, i->
b
);

598 
	`Êi°_f‹_óch
(
íåy
, &
i
->
vÆue_li°
) {

599 
j
 = 
	`Êi°_íåy
(
íåy
, 
gøph_vÆue
, 
li°
);

600 
tx
 = ((
	`gëx
(
j
Ë- 
gmöx
Ë/ (
gmaxx
 - gmöx)Ë* (
x2
 - 
x1
) + x1;

601 
ty
 = 
y2
 - ((
	`gëy
(
j
Ë- 
gmöy
Ë/ (
gmaxy
 - gmöy)Ë* (y2 - 
y1
);

602 i‡(
fú°
) {

603 
	`ˇúo_move_to
(
¸
, 
tx
, 
ty
);

604 
fú°
 = 0;

606 
	`ˇúo_löe_to
(
¸
, 
tx
, 
ty
);

608 
	`ˇúo_°roke
(
¸
);

611 
skù_d©a
:

612 
	`ˇúo_ª°‹e
(
¸
);

613 
	}
}

615 
	$£t°rög
(**
°r
, c⁄° *
vÆue
)

617 
	`‰ì
(*
°r
);

618 *
°r
 = 
	`°rdup
(
vÆue
);

619 
	}
}

621 
	$gøph_tôÀ
(
gøph
 *
bg
, c⁄° *
tôÀ
)

623 
	`£t°rög
(&
bg
->
tôÀ
,Åitle);

624 
	}
}

626 
	$gøph_x_tôÀ
(
gøph
 *
bg
, c⁄° *
tôÀ
)

628 
	`£t°rög
(&
bg
->
xtôÀ
, 
tôÀ
);

629 
	}
}

631 
	$gøph_y_tôÀ
(
gøph
 *
bg
, c⁄° *
tôÀ
)

633 
	`£t°rög
(&
bg
->
ytôÀ
, 
tôÀ
);

634 
	}
}

636 
gøph_œbñ
 *
	$gøph_föd_œbñ
(
gøph
 *
bg
,

637 c⁄° *
œbñ
)

639 
Êi°_hód
 *
íåy
;

640 
gøph_œbñ
 *
i
;

642 
	`Êi°_f‹_óch
(
íåy
, &
bg
->
œbñ_li°
) {

643 
i
 = 
	`Êi°_íåy
(
íåy
, 
gøph_œbñ
, 
li°
);

645 i‡(
	`°rcmp
(
œbñ
, 
i
->label) == 0)

646  
i
;

649  
NULL
;

650 
	}
}

652 
gøph_œbñ_t
 
	$gøph_add_œbñ
(
gøph
 *
bg
, c⁄° *
œbñ
)

654 
gøph_œbñ
 *
i
;

656 
i
 = 
	`gøph_föd_œbñ
(
bg
, 
œbñ
);

657 i‡(
i
)

658  
i
;

659 
i
 = 
	`ˇŒoc
(1, (*i));

660 
	`INIT_FLIST_HEAD
(&
i
->
vÆue_li°
);

661 
i
->
∑ª¡
 = 
bg
;

662 
	`£t°rög
(&
i
->
œbñ
,Üabel);

663 
	`Êi°_add_èû
(&
i
->
li°
, &
bg
->
œbñ_li°
);

664 
	`INIT_PRIO_TREE_ROOT
(&
i
->
¥io_åì
);

665  
i
;

666 
	}
}

668 
	$__gøph_vÆue_dr›
(
gøph_œbñ
 *
l
, 
gøph_vÆue
 *
v
)

670 
	`Êi°_dñ_öô
(&
v
->
li°
);

671 i‡(
v
->
toﬁtù
)

672 
	`‰ì
(
v
->
toﬁtù
);

673 
	`‰ì
(
v
->
vÆue
);

674 
	`‰ì
(
v
);

675 
l
->
vÆue_cou¡
--;

676 
	}
}

678 
	$gøph_vÆue_dr›
(
gøph_œbñ
 *
l
, 
gøph_vÆue
 *
v
)

680 i‡(
v
->
Êags
 & 
GV_F_PRIO_SKIP
) {

681 
	`__gøph_vÆue_dr›
(
l
, 
v
);

688 !(
v
->
Êags
 & 
GV_F_ON_PRIO
)) {

689 
	`as£π
(!
	`Êi°_em±y
(&
v
->
Æüs
));

690 
v
 = 
	`Êi°_fú°_íåy
(&v->
Æüs
, 
gøph_vÆue
,álias);

693 
	`¥io_åì_ªmove
(&
l
->
¥io_åì
, &
v
->
node
);

698 !
	`Êi°_em±y
(&
v
->
Æüs
)) {

699 
gøph_vÆue
 *
a
;

701 
a
 = 
	`Êi°_fú°_íåy
(&
v
->
Æüs
, 
gøph_vÆue
,álias);

702 
	`Êi°_dñ_öô
(&
a
->
Æüs
);

704 
	`__gøph_vÆue_dr›
(
l
, 
a
);

707 
	`__gøph_vÆue_dr›
(
l
, 
v
);

708 
	}
}

710 
	$gøph_œbñ_add_vÆue
(
gøph_œbñ
 *
i
, *
vÆue
,

711 c⁄° *
toﬁtù
)

713 
gøph
 *
g
 = 
i
->
∑ª¡
;

714 
gøph_vÆue
 *
x
;

716 
x
 = 
	`mÆloc
((*x));

717 
	`mem£t
(
x
, 0, (*x));

718 
	`INIT_FLIST_HEAD
(&
x
->
Æüs
);

719 
	`INIT_FLIST_HEAD
(&
x
->
li°
);

720 
	`Êi°_add_èû
(&
x
->
li°
, &
i
->
vÆue_li°
);

721 
i
->
vÆue_cou¡
++;

722 
x
->
vÆue
 = value;

724 i‡(
toﬁtù
) {

725 
xvÆ
 = 
	`gëx
(
x
);

726 
möx
 = 
xvÆ
 - (
g
->
xtick_⁄e_vÆ
 * 
TOOLTIP_DELTA
);

727 
maxx
 = 
xvÆ
 + (
g
->
xtick_⁄e_vÆ
 * 
TOOLTIP_DELTA
);

728 
¥io_åì_node
 *
ªt
;

734 
möx
 = minx * 1000.0;

735 
maxx
 = maxx * 1000.0;

737 
	`INIT_PRIO_TREE_NODE
(&
x
->
node
);

738 
x
->
node
.
°¨t
 = 
möx
;

739 
x
->
node
.
œ°
 = 
maxx
;

740 
x
->
toﬁtù
 = 
	`°rdup
(tooltip);

741 i‡(
x
->
node
.
œ°
 =x->node.
°¨t
) {

742 
x
->
node
.
œ°
 +
	`Ábs
(
g
->
xtick_dñè
);

743 i‡(
x
->
node
.
œ°
 =x->node.
°¨t
)

744 
x
->
node
.
œ°
++;

751 
ªt
 = 
	`¥io_åì_ö£π
(&
i
->
¥io_åì
, &
x
->
node
);

752 i‡(
ªt
 !&
x
->
node
) {

753 
gøph_vÆue
 *
Æüs
;

755 
Æüs
 = 
	`c⁄èöî_of
(
ªt
, 
gøph_vÆue
, 
node
);

756 
	`Êi°_add_èû
(&
x
->
Æüs
, &alias->alias);

758 
x
->
Êags
 = 
GV_F_ON_PRIO
;

760 
x
->
Êags
 = 
GV_F_PRIO_SKIP
;

762 i‡(
g
->
≥r_œbñ_limô
 != -1 &&

763 
i
->
vÆue_cou¡
 > 
g
->
≥r_œbñ_limô
) {

764 
to_dr›
 = 1;

772 i‡(
i
->
vÆue_cou¡
 - 
g
->
≥r_œbñ_limô
 >= 2)

773 
to_dr›
 = 2;

775 
to_dr›
-- && !
	`Êi°_em±y
(&
i
->
vÆue_li°
)) {

776 
x
 = 
	`Êi°_fú°_íåy
(&
i
->
vÆue_li°
, 
gøph_vÆue
, 
li°
);

777 
	`gøph_vÆue_dr›
(
i
, 
x
);

782 i‡(
i
->
vÆue_cou¡
 <
g
->
≥r_œbñ_limô
)

786 
	}
}

788 
	$gøph_add_d©a
(
gøph
 *
bg
, 
gøph_œbñ_t
 
œbñ
, c⁄° 
vÆue
)

790 
gøph_œbñ
 *
i
 = 
œbñ
;

791 *
d
;

793 
d
 = 
	`mÆloc
((*d));

794 *
d
 = 
vÆue
;

796 
	`gøph_œbñ_add_vÆue
(
i
, 
d
, 
NULL
);

798 
	}
}

800 
	$gøph_n⁄zîo_y
(
gøph_œbñ
 *
l
)

802 
Êi°_hód
 *
íåy
;

804 
	`Êi°_f‹_óch
(
íåy
, &
l
->
vÆue_li°
) {

805 
gøph_vÆue
 *
v
;

807 
v
 = 
	`Êi°_íåy
(
íåy
, 
gøph_vÆue
, 
li°
);

808 i‡(
	`gëy
(
v
) != 0.0)

813 
	}
}

815 
	$gøph_add_xy_d©a
(
gøph
 *
bg
, 
gøph_œbñ_t
 
œbñ
,

816 c⁄° 
x
, c⁄° 
y
, c⁄° *
toﬁtù
)

818 
gøph_œbñ
 *
i
 = 
œbñ
;

819 
xyvÆue
 *
xy
;

821 i‡(
bg
->
d⁄t_gøph_Æl_zî€s
 && 
y
 =0.0 && !
	`gøph_n⁄zîo_y
(
i
))

822 
i
->
hide
 = 1;

824 
i
->
hide
 = 0;

826 
xy
 = 
	`mÆloc
((*xy));

827 
xy
->
x
 = x;

828 
xy
->
y
 = y;

830 
	`gøph_œbñ_add_vÆue
(
i
, 
xy
, 
toﬁtù
);

832 
	}
}

834 
	$gøph_‰ì_vÆues
(
gøph_œbñ
 *
l
)

836 
gøph_vÆue
 *
i
;

838 !
	`Êi°_em±y
(&
l
->
vÆue_li°
)) {

839 
i
 = 
	`Êi°_fú°_íåy
(&
l
->
vÆue_li°
, 
gøph_vÆue
, 
li°
);

840 
	`gøph_vÆue_dr›
(
l
, 
i
);

842 
	}
}

844 
	$gøph_‰ì_œbñs
(
gøph
 *
g
)

846 
gøph_œbñ
 *
i
;

848 !
	`Êi°_em±y
(&
g
->
œbñ_li°
)) {

849 
i
 = 
	`Êi°_fú°_íåy
(&
g
->
œbñ_li°
, 
gøph_œbñ
, 
li°
);

850 
	`Êi°_dñ
(&
i
->
li°
);

851 
	`gøph_‰ì_vÆues
(
i
);

852 
	`‰ì
(
i
);

854 
	}
}

856 
	$gøph_˛ór_vÆues
(
gøph
 *
g
)

858 
Êi°_hód
 *
node
;

859 
gøph_œbñ
 *
i
;

861 
	`Êi°_f‹_óch
(
node
, &
g
->
œbñ_li°
) {

862 
i
 = 
	`Êi°_íåy
(
node
, 
gøph_œbñ
, 
li°
);

863 
	`gøph_‰ì_vÆues
(
i
);

865 
	}
}

867 
	$gøph_£t_cﬁ‹
(
gøph
 *
gr
, 
gøph_œbñ_t
 
œbñ
, 
ªd
,

868 
gªí
, 
blue
)

870 
gøph_œbñ
 *
i
 = 
œbñ
;

871 
r
, 
g
, 
b
;

873 i‡(
ªd
 < 0.0) {

874 
r
 = -1.0;

875 
g
 = -1.0;

876 
b
 = -1.0;

878 
r
 = 
	`Ábs
(
ªd
);

879 
g
 = 
	`Ábs
(
gªí
);

880 
b
 = 
	`Ábs
(
blue
);

882 i‡(
r
 > 1.0)

883 
r
 = 1.0;

884 i‡(
g
 > 1.0)

885 
g
 = 1.0;

886 i‡(
b
 > 1.0)

887 
b
 = 1.0;

890 
i
->
r
 =Ñ;

891 
i
->
g
 = g;

892 
i
->
b
 = b;

893 
	}
}

895 
	$gøph_‰ì
(
gøph
 *
bg
)

897 
	`‰ì
(
bg
->
tôÀ
);

898 
	`‰ì
(
bg
->
xtôÀ
);

899 
	`‰ì
(
bg
->
ytôÀ
);

900 
	`gøph_‰ì_œbñs
(
bg
);

901 
	}
}

907 
	$löe_gøph_£t_d©a_cou¡_limô
(
gøph
 *
g
, 
≥r_œbñ_limô
)

909 
g
->
≥r_œbñ_limô
 =Öer_label_limit;

910 
	}
}

912 
	$gøph_add_exåa_•a˚
(
gøph
 *
g
, 
À·_≥r˚¡
,

913 
right_≥r˚¡
, 
t›_≥r˚¡
,

914 
bŸtom_≥r˚¡
)

916 
g
->
À·_exåa
 = 
À·_≥r˚¡
;

917 
g
->
right_exåa
 = 
right_≥r˚¡
;

918 
g
->
t›_exåa
 = 
t›_≥r˚¡
;

919 
g
->
bŸtom_exåa
 = 
bŸtom_≥r˚¡
;

920 
	}
}

927 
	$gøph_£t_ba£_off£t
(
gøph
 *
g
, 
ba£_off£t
)

929 
g
->
ba£_off£t
 = base_offset;

930 
	}
}

932 
	$gøph_has_toﬁtùs
(
gøph
 *
g
)

934 
Êi°_hód
 *
íåy
;

935 
gøph_œbñ
 *
i
;

937 
	`Êi°_f‹_óch
(
íåy
, &
g
->
œbñ_li°
) {

938 
i
 = 
	`Êi°_íåy
(
íåy
, 
gøph_œbñ
, 
li°
);

940 i‡(!
	`¥io_åì_em±y
(&
i
->
¥io_åì
))

945 
	}
}

947 
	$gøph_c⁄èös_xy
(
gøph
 *
g
, 
x
, 
y
)

949 
fú°_x
 = 
g
->
xoff£t
;

950 
œ°_x
 = 
g
->
xoff£t
 + g->
xdim
;

951 
fú°_y
 = 
g
->
yoff£t
;

952 
œ°_y
 = 
g
->
yoff£t
 + g->
ydim
;

954  (
x
 >
fú°_x
 && x <
œ°_x
Ë&& (
y
 >
fú°_y
 && y <
œ°_y
);

955 
	}
}

957 c⁄° *
	$gøph_föd_toﬁtù
(
gøph
 *
g
, 
ix
, 
iy
)

959 
x
 = 
ix
, 
y
 = 
iy
;

960 
¥io_åì_ôî
 
ôî
;

961 
¥io_åì_node
 *
n
;

962 
gøph_vÆue
 *
be°
 = 
NULL
;

963 
Êi°_hód
 *
íåy
;

964 
be°_dñè
;

965 
maxy
, 
möy
;

967 
x
 -
g
->
xoff£t
;

968 
y
 -
g
->
yoff£t
;

970 
x
 = 
g
->
xtick_zîo_vÆ
 + ((x - g->
xtick_zîo
Ë* g->
xtick_dñè
);

971 
y
 = 
g
->
ytick_zîo_vÆ
 + ((y - g->
ytick_zîo
Ë* g->
ytick_dñè
);

973 
x
 = x * 1000.0;

974 
maxy
 = 
y
 + (
g
->
ytick_⁄e_vÆ
 * 
TOOLTIP_DELTA
);

975 
möy
 = 
y
 - (
g
->
ytick_⁄e_vÆ
 * 
TOOLTIP_DELTA
);

976 
be°_dñè
 = 
UINT_MAX
;

977 
	`Êi°_f‹_óch
(
íåy
, &
g
->
œbñ_li°
) {

978 
gøph_œbñ
 *
i
;

980 
i
 = 
	`Êi°_íåy
(
íåy
, 
gøph_œbñ
, 
li°
);

981 i‡(
i
->
hide
)

984 
	`INIT_PRIO_TREE_ITER
(&
ôî
);

985 
	`¥io_åì_ôî_öô
(&
ôî
, &
i
->
¥io_åì
, 
x
, x);

987 
n
 = 
	`¥io_åì_√xt
(&
ôî
);

988 i‡(!
n
)

992 
gøph_vÆue
 *
v
, *
roŸv
;

993 
yvÆ
, 
ydiff
;

995 
v
 = 
	`c⁄èöî_of
(
n
, 
gøph_vÆue
, 
node
);

996 
roŸv
 = 
v
;

998 
yvÆ
 = 
	`gëy
(
v
);

999 
ydiff
 = 
	`Ábs
(
yvÆ
 - 
y
);

1004 i‡(
ydiff
 < 
be°_dñè
) {

1005 
be°_dñè
 = 
ydiff
;

1006 i‡(!
be°_dñè
 ||

1007 (
yvÆ
 >
möy
 && yvÆ <
maxy
)) {

1008 
be°
 = 
v
;

1012 i‡(!
	`Êi°_em±y
(&
v
->
Æüs
))

1013 
v
 = 
	`Êi°_fú°_íåy
(&v->
Æüs
, 
gøph_vÆue
,álias);

1014 } 
v
 !
roŸv
);

1015 } (
n
 = 
	`¥io_åì_√xt
(&
ôî
)Ë!
NULL
);

1020 i‡(
be°
)

1024 i‡(
be°
)

1025  
be°
->
toﬁtù
;

1027  
NULL
;

1028 
	}
}

1030 
	$gøph_£t_gøph_Æl_zî€s
(
gøph
 *
g
, 
£t
)

1032 
g
->
d⁄t_gøph_Æl_zî€s
 = !
£t
;

1033 
	}
}

	@graph.h

1 #i‚de‡
GRAPH_H


2 
	#GRAPH_H


	)

4 
	ggøph
;

5 
	ggøph_œbñ
;

7 
gøph_œbñ
 * 
	tgøph_œbñ_t
;

9 
	#GRAPH_DEFAULT_FONT
 "S™†12"

	)

11 
gøph
 *
gøph_√w
(
xdim
, 
ydim
, c⁄° *
f⁄t
);

13 
gøph_£t_size
(
gøph
 *
g
, 
xdim
, 
ydim
);

15 
gøph_£t_posôi⁄
(
gøph
 *
g
, 
xoff£t
, 
yoff£t
);

17 
b¨_gøph_døw
(
gøph
 *
g
, 
ˇúo_t
 *
¸
);

19 
löe_gøph_døw
(
gøph
 *
g
, 
ˇúo_t
 *
¸
);

21 
löe_gøph_£t_d©a_cou¡_limô
(
gøph
 *
g
, 
≥r_œbñ_limô
);

26 
gøph_£t_f⁄t
(
gøph
 *
g
, c⁄° *
f⁄t
);

27 
gøph_tôÀ
(
gøph
 *
g
, c⁄° *
tôÀ
);

29 
gøph_x_tôÀ
(
gøph
 *
g
, c⁄° *
tôÀ
);

31 
gøph_y_tôÀ
(
gøph
 *
g
, c⁄° *
tôÀ
);

33 
gøph_œbñ_t
 
gøph_add_œbñ
(
gøph
 *
g
, c⁄° *
œbñ
);

55 
gøph_add_d©a
(
gøph
 *
g
, 
gøph_œbñ_t
 
œbñ
, c⁄° 
vÆue
);

57 
gøph_add_xy_d©a
(
gøph
 *
g
, 
gøph_œbñ_t
 
œbñ
,

58 c⁄° 
x
, c⁄° 
y
, c⁄° *
toﬁtù
);

61 
gøph_£t_cﬁ‹
(
gøph
 *
g
, 
gøph_œbñ_t
 
œbñ
,

62 
ªd
, 
gªí
, 
blue
);

63 
	#INVISIBLE_COLOR
 (-1.0)

	)

70 
gøph_‰ì
(
gøph
 *
bg
);

73 (*
	tgøph_axis_unô_ch™ge_ˇŒback
)(
	tgøph
 *
	tg
, 
	tpowî_of_ãn
);

74 
	`gøph_x_axis_unô_ch™ge_nŸify
(
gøph
 *
g
, 
gøph_axis_unô_ch™ge_ˇŒback
 
f
);

75 
	`gøph_y_axis_unô_ch™ge_nŸify
(
gøph
 *
g
, 
gøph_axis_unô_ch™ge_ˇŒback
 
f
);

83 
	`gøph_add_exåa_•a˚
(
gøph
 *
g
, 
À·_≥r˚¡
, 
right_≥r˚¡
,

84 
t›_≥r˚¡
, 
bŸtom_≥r˚¡
);

89 
	`gøph_has_toﬁtùs
(
gøph
 *
g
);

90 c⁄° *
	`gøph_föd_toﬁtù
(
gøph
 *
g
, 
x
, 
y
);

91 
	`gøph_c⁄èös_xy
(
gøph
 *
p
, 
x
, 
y
);

93 
	`gøph_£t_ba£_off£t
(
gøph
 *
g
, 
ba£_off£t
);

94 
	`gøph_£t_gøph_Æl_zî€s
(
gøph
 *
g
, 
£t
);

96 
	`gøph_˛ór_vÆues
(
gøph
 *
g
);

	@hash.h

1 #i‚de‡
_LINUX_HASH_H


2 
	#_LINUX_HASH_H


	)

4 
	~<öây≥s.h
>

5 
	~"¨ch/¨ch.h
"

6 
	~"compûî/compûî.h
"

19 
	#GOLDEN_RATIO_32
 0x61C88647

	)

20 
	#GOLDEN_RATIO_64
 0x61C8864680B583EBuŒ

	)

22 
ölöe
 
	$__hash_l⁄g
(
uöt64_t
 
vÆ
)

24 
uöt64_t
 
hash
 = 
vÆ
;

26 #i‡
BITS_PER_LONG
 == 64

27 
hash
 *
GOLDEN_RATIO_64
;

30 
uöt64_t
 
n
 = 
hash
;

31 
n
 <<= 18;

32 
hash
 -
n
;

33 
n
 <<= 33;

34 
hash
 -
n
;

35 
n
 <<= 3;

36 
hash
 +
n
;

37 
n
 <<= 3;

38 
hash
 -
n
;

39 
n
 <<= 4;

40 
hash
 +
n
;

41 
n
 <<= 2;

42 
hash
 +
n
;

45  
hash
;

46 
	}
}

48 
ölöe
 
	$hash_l⁄g
(
vÆ
, 
bôs
)

51  
	`__hash_l⁄g
(
vÆ
Ë>> (
BITS_PER_LONG
 - 
bôs
);

52 
	}
}

54 
ölöe
 
uöt64_t
 
	$__hash_u64
(
uöt64_t
 
vÆ
)

56  
vÆ
 * 
GOLDEN_RATIO_64
;

57 
	}
}

59 
ölöe
 
	$hash_±r
(*
±r
, 
bôs
)

61  
	`hash_l⁄g
((
uöçå_t
)
±r
, 
bôs
);

62 
	}
}

68 
	#JHASH_INITVAL
 
GOLDEN_RATIO_32


	)

70 
ölöe
 
uöt32_t
 
	$rﬁ32
(
uöt32_t
 
w‹d
, uöt32_à
shi·
)

72  (
w‹d
 << 
shi·
) | (word >> (32 - shift));

73 
	}
}

76 
	#__jhash_mix
(
a
, 
b
, 
c
) \

78 
a
 -
c
;á ^
	`rﬁ32
(c, 4); c +
b
; \

79 
b
 -
a
; b ^
	`rﬁ32
◊, 6);á +
c
; \

80 
c
 -
b
; c ^
	`rﬁ32
(b, 8); b +
a
; \

81 
a
 -
c
;á ^
	`rﬁ32
(c, 16); c +
b
; \

82 
b
 -
a
; b ^
	`rﬁ32
◊, 19);á +
c
; \

83 
c
 -
b
; c ^
	`rﬁ32
(b, 4); b +
a
; \

84 }

	)

87 
	#__jhash_föÆ
(
a
, 
b
, 
c
) \

89 
c
 ^
b
; c -
	`rﬁ32
(b, 14); \

90 
a
 ^
c
;á -
	`rﬁ32
(c, 11); \

91 
b
 ^
a
; b -
	`rﬁ32
(a, 25); \

92 
c
 ^
b
; c -
	`rﬁ32
(b, 16); \

93 
a
 ^
c
;á -
	`rﬁ32
(c, 4); \

94 
b
 ^
a
; b -
	`rﬁ32
(a, 14); \

95 
c
 ^
b
; c -
	`rﬁ32
(b, 24); \

96 }

	)

98 
ölöe
 
uöt32_t
 
	$jhash
(c⁄° *
key
, 
uöt32_t
 
Àngth
, uöt32_à
öôvÆ
)

100 c⁄° 
uöt8_t
 *
k
 = 
key
;

101 
uöt32_t
 
a
, 
b
, 
c
;

104 
a
 = 
b
 = 
c
 = 
JHASH_INITVAL
 + 
Àngth
 + 
öôvÆ
;

107 
Àngth
 > 12) {

108 
a
 +*
k
;

109 
b
 +*(
k
 + 4);

110 
c
 +*(
k
 + 8);

111 
	`__jhash_mix
(
a
, 
b
, 
c
);

112 
Àngth
 -= 12;

113 
k
 += 12;

118 
Àngth
) {

119 12: 
c
 +(
uöt32_t
Ë
k
[11] << 24; 
fio_ÁŒthrough
;

120 11: 
c
 +(
uöt32_t
Ë
k
[10] << 16; 
fio_ÁŒthrough
;

121 10: 
c
 +(
uöt32_t
Ë
k
[9] << 8; 
fio_ÁŒthrough
;

122 9: 
c
 +
k
[8]; 
fio_ÁŒthrough
;

123 8: 
b
 +(
uöt32_t
Ë
k
[7] << 24; 
fio_ÁŒthrough
;

124 7: 
b
 +(
uöt32_t
Ë
k
[6] << 16; 
fio_ÁŒthrough
;

125 6: 
b
 +(
uöt32_t
Ë
k
[5] << 8; 
fio_ÁŒthrough
;

126 5: 
b
 +
k
[4]; 
fio_ÁŒthrough
;

127 4: 
a
 +(
uöt32_t
Ë
k
[3] << 24; 
fio_ÁŒthrough
;

128 3: 
a
 +(
uöt32_t
Ë
k
[2] << 16; 
fio_ÁŒthrough
;

129 2: 
a
 +(
uöt32_t
Ë
k
[1] << 8; 
fio_ÁŒthrough
;

130 1: 
a
 +
k
[0];

131 
	`__jhash_föÆ
(
a
, 
b
, 
c
);

132 
fio_ÁŒthrough
;

137  
c
;

138 
	}
}

	@helper_thread.c

1 
	~<sig«l.h
>

2 
	~<uni°d.h
>

3 #ifde‡
CONFIG_HAVE_TIMERFD_CREATE


4 
	~<sys/timîfd.h
>

6 #ifde‡
CONFIG_VALGRIND_DEV


7 
	~<vÆgröd/drd.h
>

9 
	#DRD_IGNORE_VAR
(
x
Ëdÿ{ } 0)

	)

12 #ifde‡
WIN32


13 
	~"os/os-wödows.h
"

16 
	~"fio.h
"

17 
	~"smÆloc.h
"

18 
	~"hñ≥r_thªad.h
"

19 
	~"°ódy°©e.h
"

20 
	~"psh¨ed.h
"

22 
	g¶ìp_accuøcy_ms
;

23 
	gtimîfd
 = -1;

25 
	ea˘i⁄
 {

26 
	mA_EXIT
 = 1,

27 
	mA_RESET
 = 2,

28 
	mA_DO_STAT
 = 3,

31 
	shñ≥r_d©a
 {

32 vﬁ©ûê
	mexô
;

33 
	mpùe
[2];

34 
sk_out
 *
	msk_out
;

35 
±hªad_t
 
	mthªad
;

36 
fio_£m
 *
	m°¨tup_£m
;

37 } *
	ghñ≥r_d©a
;

39 
	söãrvÆ_timî
 {

40 c⁄° *
	m«me
;

41 
time•ec
 
	mexpúes
;

42 
uöt32_t
 
	möãrvÆ_ms
;

43 (*
	mfunc
)();

46 
	$hñ≥r_thªad_de°roy
()

48 i‡(!
hñ≥r_d©a
)

51 
	`˛o£
(
hñ≥r_d©a
->
pùe
[0]);

52 
	`˛o£
(
hñ≥r_d©a
->
pùe
[1]);

53 
	`s‰ì
(
hñ≥r_d©a
);

54 
	}
}

56 #ifde‡
_WIN32


57 
	$sock_öô
()

59 
WSADATA
 
wßD©a
;

60 
ªs
;

63 
ªs
 = 
	`WSASèπup
(
	`MAKEWORD
(2, 2), &
wßD©a
);

64 
	`as£π
(
ªs
 == 0);

65 
	}
}

67 
	$make_n⁄blockög
(
fd
)

69 
¨g
 = 1;

71  
	`io˘lsockë
(
fd
, 
FIONBIO
, &
¨g
);

72 
	}
}

74 
	$wrôe_to_pùe
(
fd
, c⁄° *
buf
, 
size_t
 
Àn
)

76  
	`£nd
(
fd
, 
buf
, 
Àn
, 0);

77 
	}
}

79 
	$ªad_‰om_pùe
(
fd
, *
buf
, 
size_t
 
Àn
)

81  
	`ªcv
(
fd
, 
buf
, 
Àn
, 0);

82 
	}
}

84 
	$sock_öô
()

86 
	}
}

88 
	$make_n⁄blockög
(
fd
)

90  
	`f˙é
(
fd
, 
F_SETFL
, 
O_NONBLOCK
);

91 
	}
}

93 
	$wrôe_to_pùe
(
fd
, c⁄° *
buf
, 
size_t
 
Àn
)

95  
	`wrôe
(
fd
, 
buf
, 
Àn
);

96 
	}
}

98 
	$ªad_‰om_pùe
(
fd
, *
buf
, 
size_t
 
Àn
)

100  
	`ªad
(
fd
, 
buf
, 
Àn
);

101 
	}
}

104 
	$block_sig«ls
()

106 #ifde‡
HAVE_PTHREAD_SIGMASK


107 
sig£t_t
 
sigmask
;

109 
ªt
 = 
	`±hªad_sigmask
(
SIG_UNBLOCK
, 
NULL
, &
sigmask
);

110 
	`as£π
(
ªt
 == 0);

111 
ªt
 = 
	`±hªad_sigmask
(
SIG_BLOCK
, &
sigmask
, 
NULL
);

112 
	`as£π
(
ªt
 == 0);

114 
	}
}

116 
	$submô_a˘i⁄
(
a˘i⁄
 
a
)

118 c⁄° 
d©a
 = 
a
;

119 
ªt
;

121 i‡(!
hñ≥r_d©a
)

124 
ªt
 = 
	`wrôe_to_pùe
(
hñ≥r_d©a
->
pùe
[1], &
d©a
, (data));

125 
	`as£π
(
ªt
 == 1);

126 
	}
}

128 
	$hñ≥r_ª£t
()

130 
	`submô_a˘i⁄
(
A_RESET
);

131 
	}
}

138 
	$hñ≥r_do_°©
()

140 
	`submô_a˘i⁄
(
A_DO_STAT
);

141 
	}
}

143 
boﬁ
 
	$hñ≥r_should_exô
()

145 i‡(!
hñ≥r_d©a
)

146  
åue
;

148  
hñ≥r_d©a
->
exô
;

149 
	}
}

151 
	$hñ≥r_thªad_exô
()

153 i‡(!
hñ≥r_d©a
)

156 
hñ≥r_d©a
->
exô
 = 1;

157 
	`submô_a˘i⁄
(
A_EXIT
);

158 
	`±hªad_joö
(
hñ≥r_d©a
->
thªad
, 
NULL
);

159 
	}
}

162 
	$ª£t_timîs
(
öãrvÆ_timî
 
timî
[], 
num_timîs
,

163 
time•ec
 *
now
)

165 
uöt32_t
 
m£c_to_√xt_evít
 = 
INT_MAX
;

166 
i
;

168 
i
 = 0; i < 
num_timîs
; ++i) {

169 
timî
[
i
].
expúes
 = *
now
;

170 
	`time•ec_add_m£c
(&
timî
[
i
].
expúes
,Åimî[i].
öãrvÆ_ms
);

171 
m£c_to_√xt_evít
 = 
	`mö_nŸ_zîo
(msec_to_next_event,

172 
timî
[
i
].
öãrvÆ_ms
);

175  
m£c_to_√xt_evít
;

176 
	}
}

182 
uöt8_t
 
	$waô_f‹_a˘i⁄
(
fd
, 
timeout_ms
)

184 
timevÆ
 
timeout
 = {

185 .
tv_£c
 = 
timeout_ms
 / 1000,

186 .
tv_u£c
 = (
timeout_ms
 % 1000) * 1000,

188 
fd_£t
 
rfds
, 
efds
;

189 
uöt8_t
 
a˘i⁄
 = 0;

190 
uöt64_t
 
exp
;

191 
ªs
;

193 
ªs
 = 
	`ªad_‰om_pùe
(
fd
, &
a˘i⁄
, (action));

194 i‡(
ªs
 > 0 || 
timeout_ms
 == 0)

195  
a˘i⁄
;

196 
	`FD_ZERO
(&
rfds
);

197 
	`FD_SET
(
fd
, &
rfds
);

198 
	`FD_ZERO
(&
efds
);

199 
	`FD_SET
(
fd
, &
efds
);

200 #ifde‡
CONFIG_HAVE_TIMERFD_CREATE


208 
ôimî•ec
 
dñè
 = {};

210 
dñè
.
ô_vÆue
.
tv_£c
 = 
timeout
.tv_sec;

211 
dñè
.
ô_vÆue
.
tv_n£c
 = 
timeout
.
tv_u£c
 * 1000;

212 
ªs
 = 
	`timîfd_£âime
(
timîfd
, 0, &
dñè
, 
NULL
);

213 
	`as£π
(
ªs
 == 0);

214 
	`FD_SET
(
timîfd
, &
rfds
);

217 
ªs
 = 
	`£À˘
(
	`max
(
fd
, 
timîfd
Ë+ 1, &
rfds
, 
NULL
, &
efds
,

218 
timîfd
 >0 ? 
NULL
 : &
timeout
);

219 i‡(
ªs
 < 0) {

220 
	`log_îr
("fio: select() call in helperÅhread failed: %s",

221 
	`°ªº‹
(
î∫o
));

222  
A_EXIT
;

224 i‡(
	`FD_ISSET
(
fd
, &
rfds
))

225 
	`ªad_‰om_pùe
(
fd
, &
a˘i⁄
, (action));

226 i‡(
timîfd
 >0 && 
	`FD_ISSET
—imîfd, &
rfds
)) {

227 
ªs
 = 
	`ªad
(
timîfd
, &
exp
, (exp));

228 
	`as£π
(
ªs
 =(
exp
));

230  
a˘i⁄
;

231 
	}
}

238 
	$evÆ_timî
(
öãrvÆ_timî
 *
ô
, c⁄° 
time•ec
 *
now
,

239 *
m£c_to_√xt_evít
)

241 
öt64_t
 
dñè_ms
;

242 
boﬁ
 
expúed
;

245 i‡(
ô
->
öãrvÆ_ms
 == 0)

248 
dñè_ms
 = 
	`ªl_time_sö˚
(
now
, &
ô
->
expúes
);

249 
expúed
 = 
dñè_ms
 <
¶ìp_accuøcy_ms
;

250 i‡(
expúed
) {

251 
	`time•ec_add_m£c
(&
ô
->
expúes
, it->
öãrvÆ_ms
);

252 
dñè_ms
 = 
	`ªl_time_sö˚
(
now
, &
ô
->
expúes
);

253 i‡(
dñè_ms
 < 
ô
->
öãrvÆ_ms
 - 
¶ìp_accuøcy_ms
 ||

254 
dñè_ms
 > 
ô
->
öãrvÆ_ms
 + 
¶ìp_accuøcy_ms
) {

255 
	`d¥öt
(
FD_HELPERTHREAD
,

256 "%s: dñè = %" 
PRIi64
 " <> %u. Clock jump?\n",

257 
ô
->
«me
, 
dñè_ms
, it->
öãrvÆ_ms
);

258 
dñè_ms
 = 
ô
->
öãrvÆ_ms
;

259 
ô
->
expúes
 = *
now
;

260 
	`time•ec_add_m£c
(&
ô
->
expúes
, it->
öãrvÆ_ms
);

263 *
m£c_to_√xt_evít
 = 
	`mö
(()
dñè_ms
, *msec_to_next_event);

264  
expúed
 ? 
ô
->
	`func
() : 0;

265 
	}
}

267 *
	$hñ≥r_thªad_maö
(*
d©a
)

269 
hñ≥r_d©a
 *
hd
 = 
d©a
;

270 
m£c_to_√xt_evít
, 
√xt_log
;

271 
öãrvÆ_timî
 
timî
[] = {

273 .
«me
 = "disk_util",

274 .
öãrvÆ_ms
 = 
DISK_UTIL_MSEC
,

275 .
func
 = 
upd©e_io_ticks
,

278 .
«me
 = "status_interval",

279 .
öãrvÆ_ms
 = 
°©us_öãrvÆ
,

280 .
func
 = 
__show_ru¬ög_run_°©s
,

283 .
«me
 = "steadystate",

284 .
öãrvÆ_ms
 = 
°ódy°©e_íabÀd
 ? 
STEADYSTATE_MSEC
 :

286 .
func
 = 
°ódy°©e_check
,

289 
time•ec
 
ts
;

290 
˛k_tck
;

291 
ªt
 = 0;

293 
	`os_˛k_tck
(&
˛k_tck
);

295 
	`d¥öt
(
FD_HELPERTHREAD
, "˛k_tck = %ld\n", 
˛k_tck
);

296 
	`as£π
(
˛k_tck
 > 0);

297 
¶ìp_accuøcy_ms
 = (1000 + 
˛k_tck
 - 1) / clk_tck;

299 #ifde‡
CONFIG_HAVE_TIMERFD_CREATE


300 
timîfd
 = 
	`timîfd_¸óã
(
CLOCK_MONOTONIC
, 
TFD_NONBLOCK
);

301 
	`as£π
(
timîfd
 >= 0);

302 
¶ìp_accuøcy_ms
 = 1;

305 
	`sk_out_assign
(
hd
->
sk_out
);

308 
	`block_sig«ls
();

310 
	`fio_gë_m⁄o_time
(&
ts
);

311 
m£c_to_√xt_evít
 = 
	`ª£t_timîs
(
timî
, 
	`FIO_ARRAY_SIZE
—imî), &
ts
);

313 
	`fio_£m_up
(
hd
->
°¨tup_£m
);

315 !
ªt
 && !
hd
->
exô
) {

316 
uöt8_t
 
a˘i⁄
;

317 
i
;

319 
a˘i⁄
 = 
	`waô_f‹_a˘i⁄
(
hd
->
pùe
[0], 
m£c_to_√xt_evít
);

320 i‡(
a˘i⁄
 =
A_EXIT
)

323 
	`fio_gë_m⁄o_time
(&
ts
);

325 
m£c_to_√xt_evít
 = 
INT_MAX
;

327 i‡(
a˘i⁄
 =
A_RESET
)

328 
m£c_to_√xt_evít
 = 
	`ª£t_timîs
(
timî
,

329 
	`FIO_ARRAY_SIZE
(
timî
), &
ts
);

331 
i
 = 0; i < 
	`FIO_ARRAY_SIZE
(
timî
); ++i)

332 
ªt
 = 
	`evÆ_timî
(&
timî
[
i
], &
ts
, &
m£c_to_√xt_evít
);

334 i‡(
a˘i⁄
 =
A_DO_STAT
)

335 
	`__show_ru¬ög_run_°©s
();

337 
√xt_log
 = 
	`ˇlc_log_ßm∂es
();

338 i‡(!
√xt_log
)

339 
√xt_log
 = 
DISK_UTIL_MSEC
;

341 
m£c_to_√xt_evít
 = 
	`mö
(
√xt_log
, msec_to_next_event);

342 
	`d¥öt
(
FD_HELPERTHREAD
,

344 
√xt_log
, 
m£c_to_√xt_evít
);

346 i‡(!
is_backíd
)

347 
	`¥öt_thªad_°©us
();

350 i‡(
timîfd
 >= 0) {

351 
	`˛o£
(
timîfd
);

352 
timîfd
 = -1;

355 
	`fio_wrôeout_logs
(
Ál£
);

357 
	`sk_out_dr›
();

358  
NULL
;

359 
	}
}

364 
	$pùe_ovî_lo›back
(
fd
[2])

366 
sockaddr_ö
 
addr
 = { .
sö_Ámûy
 = 
AF_INET
 };

367 
sockÀn_t
 
Àn
 = (
addr
);

368 
ªs
;

370 
addr
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_LOOPBACK
);

372 
	`sock_öô
();

374 
fd
[0] = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

375 i‡(
fd
[0] < 0)

376 
îr
;

377 
fd
[1] = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

378 i‡(
fd
[1] < 0)

379 
˛o£_fd_0
;

380 
ªs
 = 
	`böd
(
fd
[0], (
sockaddr
 *)&
addr
, 
Àn
);

381 i‡(
ªs
 < 0)

382 
˛o£_fd_1
;

383 
ªs
 = 
	`gësock«me
(
fd
[0], (
sockaddr
 *)&
addr
, &
Àn
);

384 i‡(
ªs
 < 0)

385 
˛o£_fd_1
;

386 
ªs
 = 
	`li°í
(
fd
[0], 1);

387 i‡(
ªs
 < 0)

388 
˛o£_fd_1
;

389 
ªs
 = 
	`c⁄√˘
(
fd
[1], (
sockaddr
 *)&
addr
, 
Àn
);

390 i‡(
ªs
 < 0)

391 
˛o£_fd_1
;

392 
ªs
 = 
	`ac˚±
(
fd
[0], 
NULL
, NULL);

393 i‡(
ªs
 < 0)

394 
˛o£_fd_1
;

395 
	`˛o£
(
fd
[0]);

396 
fd
[0] = 
ªs
;

399 
˛o£_fd_1
:

400 
	`˛o£
(
fd
[1]);

402 
˛o£_fd_0
:

403 
	`˛o£
(
fd
[0]);

405 
îr
:

407 
	}
}

409 
	$hñ≥r_thªad_¸óã
(
fio_£m
 *
°¨tup_£m
, 
sk_out
 *sk_out)

411 
hñ≥r_d©a
 *
hd
;

412 
ªt
;

414 
hd
 = 
	`sˇŒoc
(1, (*hd));

416 
	`£tup_disk_utû
();

417 
	`°ódy°©e_£tup
();

419 
hd
->
sk_out
 = sk_out;

421 #i‡
	`deföed
(
CONFIG_PIPE2
)

422 
ªt
 = 
	`pùe2
(
hd
->
pùe
, 
O_CLOEXEC
);

423 #ñi‡
	`deföed
(
CONFIG_PIPE
)

424 
ªt
 = 
	`pùe
(
hd
->
pùe
);

426 
ªt
 = 
	`pùe_ovî_lo›back
(
hd
->
pùe
);

428 i‡(
ªt
)

431 
ªt
 = 
	`make_n⁄blockög
(
hd
->
pùe
[0]);

432 
	`as£π
(
ªt
 >= 0);

434 
hd
->
°¨tup_£m
 = startup_sem;

436 
	`DRD_IGNORE_VAR
(
hñ≥r_d©a
);

438 
ªt
 = 
	`±hªad_¸óã
(&
hd
->
thªad
, 
NULL
, 
hñ≥r_thªad_maö
, hd);

439 i‡(
ªt
) {

440 
	`log_îr
("C™'à¸óã hñ≥∏thªad: %s\n", 
	`°ªº‹
(
ªt
));

444 
hñ≥r_d©a
 = 
hd
;

446 
	`d¥öt
(
FD_MUTEX
, "wait on startup_sem\n");

447 
	`fio_£m_down
(
°¨tup_£m
);

448 
	`d¥öt
(
FD_MUTEX
, "done waiting on startup_sem\n");

450 
	}
}

	@helper_thread.h

1 #i‚de‡
FIO_HELPER_THREAD_H


2 
	#FIO_HELPER_THREAD_H


	)

4 
hñ≥r_ª£t
();

5 
hñ≥r_do_°©
();

6 
boﬁ
 
hñ≥r_should_exô
();

7 
hñ≥r_thªad_de°roy
();

8 
hñ≥r_thªad_exô
();

9 
hñ≥r_thªad_¸óã
(
fio_£m
 *, 
sk_out
 *);

	@helpers.c

1 
	~<î∫o.h
>

3 
	~"hñ≥rs.h
"

5 #i‚de‡
CONFIG_LINUX_FALLOCATE


6 
	$ÁŒoˇã
(
fd
, 
mode
, 
off_t
 
off£t
, off_à
Àn
)

8 
î∫o
 = 
ENOSYS
;

10 
	}
}

13 #i‚de‡
CONFIG_POSIX_FALLOCATE


14 
	$posix_ÁŒoˇã
(
fd
, 
off_t
 
off£t
, off_à
Àn
)

17 
	}
}

20 #i‚de‡
CONFIG_SYNC_FILE_RANGE


21 
	$sync_fûe_ønge
(
fd
, 
uöt64_t
 
off£t
, uöt64_à
nbyãs
,

22 
Êags
)

24 
î∫o
 = 
ENOSYS
;

26 
	}
}

29 #i‚de‡
CONFIG_POSIX_FADVISE


30 
	$posix_Ádvi£
(
fd
, 
off_t
 
off£t
, off_à
Àn
, 
advi˚
)

33 
	}
}

	@helpers.h

1 #i‚de‡
FIO_HELPERS_H


2 
	#FIO_HELPERS_H


	)

4 
	~<sys/ty≥s.h
>

6 
	~"os/os.h
"

8 
ÁŒoˇã
(
fd
, 
mode
, 
off_t
 
off£t
, off_à
Àn
);

9 
posix_ÁŒoˇã
(
fd
, 
off_t
 
off£t
, off_à
Àn
);

10 #i‚de‡
CONFIG_SYNC_FILE_RANGE


11 
sync_fûe_ønge
(
fd
, 
uöt64_t
 
off£t
, uöt64_à
nbyãs
,

12 
Êags
);

14 
posix_Ádvi£
(
fd
, 
off_t
 
off£t
, off_à
Àn
, 
advi˚
);

	@idletime.c

1 
	~<m©h.h
>

2 
	~"fio.h
"

3 
	~"js⁄.h
"

4 
	~"idÀtime.h
"

6 vﬁ©ûê
idÀ_¥of_comm⁄
 
	gùc
;

12 
	$ˇlibøã_unô
(*
d©a
)

14 
t
, 
i
, 
j
, 
k
;

15 
time•ec
 
çs
;

16 
tunô
 = 0.0;

18 
i
 = 0; i < 
CALIBRATE_RUNS
; i++) {

20 
	`fio_gëtime
(&
çs
, 
NULL
);

22 
j
 = 0; j < 
CALIBRATE_SCALE
; j++) {

24 
k
=0; k < 
∑ge_size
; k++) {

25 
d©a
[(
k
 + 
j
Ë% 
∑ge_size
] = k % 256;

30 i‡(
ùc
.
°©us
 =
IDLE_PROF_STATUS_PROF_STOP
)

35 
t
 = 
	`utime_sö˚_now
(&
çs
);

36 i‡(!
t
)

40 i‡((
i
 =0Ë|| (()
t
 < 
tunô
))

41 
tunô
 = ()
t
;

44  
tunô
 / 
CALIBRATE_SCALE
;

45 
	}
}

47 
	$‰ì_˝u_afföôy
(
idÀ_¥of_thªad
 *
ùt
)

49 #i‡
	`deföed
(
FIO_HAVE_CPU_AFFINITY
)

50 
	`fio_˝u£t_exô
(&
ùt
->
˝u_mask
);

52 
	}
}

54 
	$£t_˝u_afföôy
(
idÀ_¥of_thªad
 *
ùt
)

56 #i‡
	`deföed
(
FIO_HAVE_CPU_AFFINITY
)

57 i‡(
	`fio_˝u£t_öô
(&
ùt
->
˝u_mask
)) {

58 
	`log_îr
("fio: cpuset init failed\n");

62 
	`fio_˝u_£t
(&
ùt
->
˝u_mask
, i±->
˝u
);

64 i‡(
	`fio_£èfföôy
(
	`gëtid
(), 
ùt
->
˝u_mask
)) {

65 
	`log_îr
("fio: fio_setaffinity failed\n");

66 
	`fio_˝u£t_exô
(&
ùt
->
˝u_mask
);

72 
	`log_îr
("fio: fio_setaffinityÇot supported\n");

75 
	}
}

77 *
	$idÀ_¥of_thªad_‚
(*
d©a
)

79 
ªtvÆ
;

80 
j
, 
k
;

81 
idÀ_¥of_thªad
 *
ùt
 = 
d©a
;

84 
	`±hªad_muãx_lock
(&
ùt
->
öô_lock
);

87 i‡(
ùc
.
°©us
 =
IDLE_PROF_STATUS_ABORT
) {

88 
	`±hªad_muãx_u∆ock
(&
ùt
->
öô_lock
);

89  
NULL
;

92 
ªtvÆ
 = 
	`£t_˝u_afföôy
(
ùt
);

93 i‡(
ªtvÆ
 == -1) {

94 
ùt
->
°©e
 = 
TD_EXITED
;

95 
	`±hªad_muãx_u∆ock
(&
ùt
->
öô_lock
);

96  
NULL
;

99 
ùt
->
ˇli_time
 = 
	`ˇlibøã_unô
(ùt->
d©a
);

102 #i‡
	`deföed
(
CONFIG_SCHED_IDLE
)

103 i‡((
ªtvÆ
 = 
	`fio_£t_sched_idÀ
()))

104 
	`log_îr
("fio: fio_set_sched_idle failed\n");

106 
ªtvÆ
 = -1;

107 
	`log_îr
("fio: fio_set_sched_idleÇot supported\n");

109 i‡(
ªtvÆ
 == -1) {

110 
ùt
->
°©e
 = 
TD_EXITED
;

111 
	`±hªad_muãx_u∆ock
(&
ùt
->
öô_lock
);

112 
do_exô
;

115 
ùt
->
°©e
 = 
TD_INITIALIZED
;

118 
	`±hªad_c⁄d_sig«l
(&
ùt
->
c⁄d
);

119 
	`±hªad_muãx_u∆ock
(&
ùt
->
öô_lock
);

122 
	`±hªad_muãx_lock
(&
ùt
->
°¨t_lock
);

125 i‡(
ùc
.
°©us
 =
IDLE_PROF_STATUS_ABORT
) {

126 
	`±hªad_muãx_u∆ock
(&
ùt
->
°¨t_lock
);

127 
do_exô
;

131 i‡(
ùc
.
°©us
 =
IDLE_PROF_STATUS_CALI_STOP
) {

132 
	`±hªad_muãx_u∆ock
(&
ùt
->
°¨t_lock
);

133 
do_exô
;

136 
	`fio_gëtime
(&
ùt
->
çs
, 
NULL
);

137 
ùt
->
°©e
 = 
TD_RUNNING
;

139 
j
 = 0;

141 
k
 = 0; k < 
∑ge_size
; k++) {

142 
ùt
->
d©a
[(
k
 + 
j
Ë% 
∑ge_size
] = k % 256;

143 i‡(
ùc
.
°©us
 =
IDLE_PROF_STATUS_PROF_STOP
) {

144 
	`fio_gëtime
(&
ùt
->
çe
, 
NULL
);

145 
idÀ_¥of_d⁄e
;

148 
j
++;

151 
idÀ_¥of_d⁄e
:

153 
ùt
->
lo›s
 = 
j
 + (Ë
k
 / 
∑ge_size
;

154 
ùt
->
°©e
 = 
TD_EXITED
;

155 
	`±hªad_muãx_u∆ock
(&
ùt
->
°¨t_lock
);

157 
do_exô
:

158 
	`‰ì_˝u_afföôy
(
ùt
);

159  
NULL
;

160 
	}
}

163 
	$ˇlibøti⁄_°©s
()

165 
i
;

166 
sum
 = 0.0, 
v¨
 = 0.0;

167 
idÀ_¥of_thªad
 *
ùt
;

169 
i
 = 0; i < 
ùc
.
ƒ_˝us
; i++) {

170 
ùt
 = &
ùc
.
ùts
[
i
];

171 
sum
 +
ùt
->
ˇli_time
;

174 
ùc
.
ˇli_món
 = 
sum
/ùc.
ƒ_˝us
;

176 
i
 = 0; i < 
ùc
.
ƒ_˝us
; i++) {

177 
ùt
 = &
ùc
.
ùts
[
i
];

178 
v¨
 +
	`pow
(
ùt
->
ˇli_time
-
ùc
.
ˇli_món
, 2);

181 
ùc
.
ˇli_°ddev
 = 
	`sqπ
(
v¨
/(ùc.
ƒ_˝us
-1));

182 
	}
}

184 
	$fio_idÀ_¥of_öô
()

186 
i
, 
ªt
;

187 
time•ec
 
ts
;

188 
±hªad_©å_t
 
èâr
;

189 
±hªad_c⁄d©å_t
 
ˇâr
;

190 
idÀ_¥of_thªad
 *
ùt
;

192 
ùc
.
ƒ_˝us
 = 
	`˝us_⁄löe
();

193 
ùc
.
°©us
 = 
IDLE_PROF_STATUS_OK
;

195 i‡(
ùc
.
›t
 =
IDLE_PROF_OPT_NONE
)

198 
ªt
 = 
	`±hªad_c⁄d©å_öô
(&
ˇâr
);

199 
	`as£π
(
ªt
 == 0);

200 #ifde‡
CONFIG_PTHREAD_CONDATTR_SETCLOCK


201 
ªt
 = 
	`±hªad_c⁄d©å_£t˛ock
(&
ˇâr
, 
CLOCK_MONOTONIC
);

202 
	`as£π
(
ªt
 == 0);

205 i‡((
ªt
 = 
	`±hªad_©å_öô
(&
èâr
))) {

206 
	`log_îr
("fio:Öthªad_©å_öô %s\n", 
	`°ªº‹
(
ªt
));

209 i‡((
ªt
 = 
	`±hªad_©å_£tsc›e
(&
èâr
, 
PTHREAD_SCOPE_SYSTEM
))) {

210 
	`log_îr
("fio:Öthªad_©å_£tsc›ê%s\n", 
	`°ªº‹
(
ªt
));

214 
ùc
.
ùts
 = 
	`mÆloc
(ùc.
ƒ_˝us
 * (
idÀ_¥of_thªad
));

215 i‡(!
ùc
.
ùts
) {

216 
	`log_îr
("fio: malloc failed\n");

220 
ùc
.
buf
 = 
	`mÆloc
(ùc.
ƒ_˝us
 * 
∑ge_size
);

221 i‡(!
ùc
.
buf
) {

222 
	`log_îr
("fio: malloc failed\n");

223 
	`‰ì
(
ùc
.
ùts
);

231 
i
 = 0; i < 
ùc
.
ƒ_˝us
; i++) {

232 
ùt
 = &
ùc
.
ùts
[
i
];

234 
ùt
->
˝u
 = 
i
;

235 
ùt
->
°©e
 = 
TD_NOT_CREATED
;

236 
ùt
->
d©a
 = (*)(
ùc
.
buf
 + 
∑ge_size
 * 
i
);

238 i‡((
ªt
 = 
	`±hªad_muãx_öô
(&
ùt
->
öô_lock
, 
NULL
))) {

239 
ùc
.
°©us
 = 
IDLE_PROF_STATUS_ABORT
;

240 
	`log_îr
("fio:Öthªad_muãx_öô %s\n", 
	`°ªº‹
(
ªt
));

244 i‡((
ªt
 = 
	`±hªad_muãx_öô
(&
ùt
->
°¨t_lock
, 
NULL
))) {

245 
ùc
.
°©us
 = 
IDLE_PROF_STATUS_ABORT
;

246 
	`log_îr
("fio:Öthªad_muãx_öô %s\n", 
	`°ªº‹
(
ªt
));

250 i‡((
ªt
 = 
	`±hªad_c⁄d_öô
(&
ùt
->
c⁄d
, &
ˇâr
))) {

251 
ùc
.
°©us
 = 
IDLE_PROF_STATUS_ABORT
;

252 
	`log_îr
("fio:Öthªad_c⁄d_öô %s\n", 
	`°ªº‹
(
ªt
));

257 
	`±hªad_muãx_lock
(&
ùt
->
öô_lock
);

260 
	`±hªad_muãx_lock
(&
ùt
->
°¨t_lock
);

262 i‡((
ªt
 = 
	`±hªad_¸óã
(&
ùt
->
thªad
, &
èâr
, 
idÀ_¥of_thªad_‚
, ipt))) {

263 
ùc
.
°©us
 = 
IDLE_PROF_STATUS_ABORT
;

264 
	`log_îr
("fio:Öthªad_¸óã %s\n", 
	`°ªº‹
(
ªt
));

267 
ùt
->
°©e
 = 
TD_CREATED
;

269 i‡((
ªt
 = 
	`±hªad_dëach
(
ùt
->
thªad
))) {

271 
	`log_îr
("fio:Öthªad_dëach %s\n", 
	`°ªº‹
(
ªt
));

279 
i
 = 0; i < 
ùc
.
ƒ_˝us
; i++) {

280 
ùt
 = &
ùc
.
ùts
[
i
];

281 
	`±hªad_muãx_u∆ock
(&
ùt
->
öô_lock
);

284 i‡(
ùc
.
°©us
 =
IDLE_PROF_STATUS_ABORT
)

288 
i
 = 0; i < 
ùc
.
ƒ_˝us
; i++) {

289 
ùt
 = &
ùc
.
ùts
[
i
];

290 
	`±hªad_muãx_lock
(&
ùt
->
öô_lock
);

291 (
ùt
->
°©e
 !
TD_EXITED
) &&

292 (
ùt
->
°©e
!=
TD_INITIALIZED
)) {

293 #ifde‡
CONFIG_PTHREAD_CONDATTR_SETCLOCK


294 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ts
);

296 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
ts
);

298 
ts
.
tv_£c
 += 1;

299 
	`±hªad_c⁄d_timedwaô
(&
ùt
->
c⁄d
, &ùt->
öô_lock
, &
ts
);

301 
	`±hªad_muãx_u∆ock
(&
ùt
->
öô_lock
);

307 i‡(
ùt
->
°©e
 =
TD_EXITED
)

308 
ùc
.
°©us
 = 
IDLE_PROF_STATUS_ABORT
;

311 i‡(
ùc
.
°©us
 !
IDLE_PROF_STATUS_ABORT
)

312 
	`ˇlibøti⁄_°©s
();

314 
ùc
.
ˇli_món
 = ipc.
ˇli_°ddev
 = 0.0;

316 i‡(
ùc
.
›t
 =
IDLE_PROF_OPT_CALI
)

317 
ùc
.
°©us
 = 
IDLE_PROF_STATUS_CALI_STOP
;

318 
	}
}

320 
	$fio_idÀ_¥of_°¨t
()

322 
i
;

323 
idÀ_¥of_thªad
 *
ùt
;

325 i‡(
ùc
.
›t
 =
IDLE_PROF_OPT_NONE
)

329 
i
 = 0; i < 
ùc
.
ƒ_˝us
; i++) {

330 
ùt
 = &
ùc
.
ùts
[
i
];

331 
	`±hªad_muãx_u∆ock
(&
ùt
->
°¨t_lock
);

333 
	}
}

335 
	$fio_idÀ_¥of_°›
()

337 
i
;

338 
uöt64_t
 
ru¡
;

339 
time•ec
 
ts
;

340 
idÀ_¥of_thªad
 *
ùt
;

342 i‡(
ùc
.
›t
 =
IDLE_PROF_OPT_NONE
)

345 i‡(
ùc
.
›t
 =
IDLE_PROF_OPT_CALI
)

348 
ùc
.
°©us
 = 
IDLE_PROF_STATUS_PROF_STOP
;

351 
i
 = 0; i < 
ùc
.
ƒ_˝us
; i++) {

352 
ùt
 = &
ùc
.
ùts
[
i
];

353 
	`±hªad_muãx_lock
(&
ùt
->
°¨t_lock
);

354 (
ùt
->
°©e
 !
TD_EXITED
) &&

355 (
ùt
->
°©e
!=
TD_NOT_CREATED
)) {

356 
	`fio_gëtime
(&
ts
, 
NULL
);

357 
ts
.
tv_£c
 += 1;

359 
	`±hªad_c⁄d_timedwaô
(&
ùt
->
c⁄d
, &ùt->
°¨t_lock
, &
ts
);

361 
	`±hªad_muãx_u∆ock
(&
ùt
->
°¨t_lock
);

364 i‡(
ùc
.
ˇli_món
 != 0.0) {

365 
ru¡
 = 
	`utime_sö˚
(&
ùt
->
çs
, &ùt->
çe
);

366 i‡(
ru¡
)

367 
ùt
->
idÀ√ss
 = i±->
lo›s
 * 
ùc
.
ˇli_món
 / 
ru¡
;

369 
ùt
->
idÀ√ss
 = 0.0;

371 
ùt
->
idÀ√ss
 = 0.0;

378 
	}
}

384 
	$fio_idÀ_¥of_˝u_°©
(
˝u
)

386 
i
, 
ƒ_˝us
 = 
ùc
.nr_cpus;

387 
idÀ_¥of_thªad
 *
ùt
;

388 
p
 = 0.0;

390 i‡(
ùc
.
›t
 =
IDLE_PROF_OPT_NONE
)

393 i‡((
˝u
 >
ƒ_˝us
) || (cpu < -1)) {

394 
	`log_îr
("fio: idleÖrofiling invalid cpu index\n");

398 i‡(
˝u
 == -1) {

399 
i
 = 0; i < 
ƒ_˝us
; i++) {

400 
ùt
 = &
ùc
.
ùts
[
i
];

401 
p
 +
ùt
->
idÀ√ss
;

403 
p
 /
ƒ_˝us
;

405 
ùt
 = &
ùc
.
ùts
[
˝u
];

406 
p
 = 
ùt
->
idÀ√ss
;

409  
p
 * 100.0;

410 
	}
}

412 
	$fio_idÀ_¥of_˛ónup
()

414 i‡(
ùc
.
ùts
) {

415 
	`‰ì
(
ùc
.
ùts
);

416 
ùc
.
ùts
 = 
NULL
;

419 i‡(
ùc
.
buf
) {

420 
	`‰ì
(
ùc
.
buf
);

421 
ùc
.
buf
 = 
NULL
;

423 
	}
}

425 
	$fio_idÀ_¥of_∑r£_›t
(c⁄° *
¨gs
)

427 
ùc
.
›t
 = 
IDLE_PROF_OPT_NONE
;

429 i‡(!
¨gs
) {

430 
	`log_îr
("fio:Émpty idle-prof option string\n");

434 #i‡
	`deföed
(
FIO_HAVE_CPU_AFFINITY
Ë&& deföed(
CONFIG_SCHED_IDLE
)

435 i‡(
	`°rcmp
("ˇlibøã", 
¨gs
) == 0) {

436 
ùc
.
›t
 = 
IDLE_PROF_OPT_CALI
;

437 
	`fio_idÀ_¥of_öô
();

438 
	`fio_idÀ_¥of_°¨t
();

439 
	`fio_idÀ_¥of_°›
();

440 
	`show_idÀ_¥of_°©s
(
FIO_OUTPUT_NORMAL
, 
NULL
, NULL);

442 } i‡(
	`°rcmp
("sy°em", 
¨gs
) == 0) {

443 
ùc
.
›t
 = 
IDLE_PROF_OPT_SYSTEM
;

445 } i‡(
	`°rcmp
("≥r˝u", 
¨gs
) == 0) {

446 
ùc
.
›t
 = 
IDLE_PROF_OPT_PERCPU
;

449 
	`log_îr
("fio: inc‹ª˘ idÀ-¥o‡›ti⁄: %s\n", 
¨gs
);

453 
	`log_îr
("fio: idle-profÇot supported onÅhisÖlatform\n");

456 
	}
}

458 
	$show_idÀ_¥of_°©s
(
ouçut
, 
js⁄_obje˘
 *
∑ª¡
,

459 
buf_ouçut
 *
out
)

461 
i
, 
ƒ_˝us
 = 
ùc
.nr_cpus;

462 
js⁄_obje˘
 *
tmp
;

463 
s
[
MAX_CPU_STR_LEN
];

465 i‡(
ouçut
 =
FIO_OUTPUT_NORMAL
) {

466 i‡(
ùc
.
›t
 > 
IDLE_PROF_OPT_CALI
)

467 
	`log_buf
(
out
, "\nCPU idleness:\n");

468 i‡(
ùc
.
›t
 =
IDLE_PROF_OPT_CALI
)

469 
	`log_buf
(
out
, "CPU idleness:\n");

471 i‡(
ùc
.
›t
 >
IDLE_PROF_OPT_SYSTEM
)

472 
	`log_buf
(
out
, " sy°em: %3.2f%%\n", 
	`fio_idÀ_¥of_˝u_°©
(-1));

474 i‡(
ùc
.
›t
 =
IDLE_PROF_OPT_PERCPU
) {

475 
	`log_buf
(
out
, "Öî˝u: %3.2f%%", 
	`fio_idÀ_¥of_˝u_°©
(0));

476 
i
 = 1; i < 
ƒ_˝us
; i++)

477 
	`log_buf
(
out
, ", %3.2f%%", 
	`fio_idÀ_¥of_˝u_°©
(
i
));

478 
	`log_buf
(
out
, "\n");

481 i‡(
ùc
.
›t
 >
IDLE_PROF_OPT_CALI
) {

482 
	`log_buf
(
out
, " unô w‹k: món=%3.2fus,", 
ùc
.
ˇli_món
);

483 
	`log_buf
(
out
, " stddev=%3.2f\n", 
ùc
.
ˇli_°ddev
);

489 i‡((
ùc
.
›t
 !
IDLE_PROF_OPT_NONE
Ë&& (
ouçut
 & 
FIO_OUTPUT_JSON
)) {

490 i‡(!
∑ª¡
)

493 
tmp
 = 
	`js⁄_¸óã_obje˘
();

494 i‡(!
tmp
)

497 
	`js⁄_obje˘_add_vÆue_obje˘
(
∑ª¡
, "˝u_idÀ√ss", 
tmp
);

498 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
tmp
, "sy°em", 
	`fio_idÀ_¥of_˝u_°©
(-1));

500 i‡(
ùc
.
›t
 =
IDLE_PROF_OPT_PERCPU
) {

501 
i
 = 0; i < 
ƒ_˝us
; i++) {

502 
	`¢¥ötf
(
s
, 
MAX_CPU_STR_LEN
, "˝u-%d", 
i
);

503 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
tmp
, 
s
, 
	`fio_idÀ_¥of_˝u_°©
(
i
));

507 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
tmp
, "unô_món", 
ùc
.
ˇli_món
);

508 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
tmp
, "unô_°ddev", 
ùc
.
ˇli_°ddev
);

510 
	}
}

	@idletime.h

1 #i‚de‡
FIO_IDLETIME_H


2 
	#FIO_IDLETIME_H


	)

4 
	~<sys/time.h
>

5 
	~<sys/ty≥s.h
>

6 
	~"os/os.h
"

8 
	#CALIBRATE_RUNS
 10

	)

9 
	#CALIBRATE_SCALE
 1000

	)

10 
	#MAX_CPU_STR_LEN
 32

	)

13 
	mIDLE_PROF_OPT_NONE
,

14 
	mIDLE_PROF_OPT_CALI
,

15 
	mIDLE_PROF_OPT_SYSTEM
,

16 
	mIDLE_PROF_OPT_PERCPU


20 
	mIDLE_PROF_STATUS_OK
,

21 
	mIDLE_PROF_STATUS_CALI_STOP
,

22 
	mIDLE_PROF_STATUS_PROF_STOP
,

23 
	mIDLE_PROF_STATUS_ABORT


26 
	sidÀ_¥of_thªad
 {

27 
±hªad_t
 
	mthªad
;

28 
	m˝u
;

29 
	m°©e
;

30 
time•ec
 
	mçs
;

31 
time•ec
 
	mçe
;

32 
	mˇli_time
;

33 
	mlo›s
;

34 
	midÀ√ss
;

35 *
	md©a
;

36 
±hªad_c⁄d_t
 
	mc⁄d
;

37 
±hªad_muãx_t
 
	möô_lock
;

38 
±hªad_muãx_t
 
	m°¨t_lock
;

40 
os_˝u_mask_t
 
	m˝u_mask
;

43 
	sidÀ_¥of_comm⁄
 {

44 
idÀ_¥of_thªad
 *
	mùts
;

45 
	mƒ_˝us
;

46 
	m°©us
;

47 
	m›t
;

48 
	mˇli_món
;

49 
	mˇli_°ddev
;

50 *
	mbuf
;

53 
fio_idÀ_¥of_∑r£_›t
(const *);

55 
fio_idÀ_¥of_öô
();

56 
fio_idÀ_¥of_°¨t
();

57 
fio_idÀ_¥of_°›
();

59 
show_idÀ_¥of_°©s
(, 
js⁄_obje˘
 *, 
buf_ouçut
 *);

61 
fio_idÀ_¥of_˛ónup
();

	@init.c

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

6 
	~<uni°d.h
>

7 
	~<˘y≥.h
>

8 
	~<°rög.h
>

9 
	~<î∫o.h
>

10 
	~<sys/ùc.h
>

11 
	~<sys/ty≥s.h
>

12 
	~<dlf˙.h
>

13 #ifde‡
CONFIG_VALGRIND_DEV


14 
	~<vÆgröd/drd.h
>

16 
	#DRD_IGNORE_VAR
(
x
Ëdÿ{ } 0)

	)

19 
	~"fio.h
"

20 #i‚de‡
FIO_NO_HAVE_SHM_H


21 
	~<sys/shm.h
>

24 
	~"∑r£.h
"

25 
	~"smÆloc.h
"

26 
	~"fûehash.h
"

27 
	~"vîify.h
"

28 
	~"¥ofûe.h
"

29 
	~"£rvî.h
"

30 
	~"idÀtime.h
"

31 
	~"fûñock.h
"

32 
	~"°ódy°©e.h
"

33 
	~"blkåa˚.h
"

35 
	~"o¶ib/a•rötf.h
"

36 
	~"o¶ib/gë›t.h
"

37 
	~"o¶ib/°rˇ£°r.h
"

39 
	~"¸c/ã°.h
"

40 
	~"lib/pow2.h
"

41 
	~"lib/mem˝y.h
"

43 c⁄° 
	gfio_vîsi⁄_°rög
[] = 
FIO_VERSION
;

45 
	#FIO_RANDSEED
 (0xb1899bedUL)

	)

47 **
	göi_fûe
;

48 
boﬁ
 
	gdump_cmdlöe
;

49 
boﬁ
 
	g∑r£_⁄ly
;

50 
boﬁ
 
	gmîge_blkåa˚_⁄ly
;

52 
thªad_d©a
 
	gdef_thªad
;

53 
thªad_£gmít
 
	g£gmíts
[
REAL_MAX_SEG
];

54 **
	gjob_£˘i⁄s
;

55 
	gƒ_job_£˘i⁄s
;

57 
boﬁ
 
	gexôÆl_⁄_ãrmö©e
 = 
Ál£
;

58 
	gouçut_f‹m©
 = 
FIO_OUTPUT_NORMAL
;

59 
	gëa_¥öt
 = 
FIO_ETA_AUTO
;

60 
	gëa_öãrvÆ_m£c
 = 1000;

61 
	gëa_√w_löe
 = 0;

62 
FILE
 *
	gf_out
 = 
NULL
;

63 
FILE
 *
	gf_îr
 = 
NULL
;

64 *
	gexec_¥ofûe
 = 
NULL
;

65 
	gw¨nögs_Áèl
 = 0;

66 
	gãr£_vîsi⁄
 = 3;

67 
boﬁ
 
	gis_backíd
 = 
Ál£
;

68 
boﬁ
 
	gis_loˇl_backíd
 = 
Ál£
;

69 
	gƒ_˛õ¡s
 = 0;

70 
boﬁ
 
	glog_sy¶og
 = 
Ál£
;

72 
boﬁ
 
	gwrôe_bw_log
 = 
Ál£
;

73 
boﬁ
 
	gªad_⁄ly
 = 
Ál£
;

74 
	g°©us_öãrvÆ
 = 0;

76 *
	gåiggî_fûe
 = 
NULL
;

77 
	gåiggî_timeout
 = 0;

78 *
	gåiggî_cmd
 = 
NULL
;

79 *
	gåiggî_ªmŸe_cmd
 = 
NULL
;

81 *
	gaux_∑th
 = 
NULL
;

83 
	g¥ev_group_jobs
;

85 
	gfio_debug
 = 0;

86 
	gfio_debug_jobno
 = -1;

87 *
	gfio_debug_jobp
 = 
NULL
;

88 *
	gfio_w¨√d
 = 
NULL
;

90 
	gcmd_›t°r
[256];

91 
boﬁ
 
	gdid_¨g
;

93 
	#FIO_CLIENT_FLAG
 (1 << 16)

	)

99 
›ti⁄
 
	gl_›ts
[
FIO_NR_OPTIONS
] = {

101 .
«me
 = (*) "output",

102 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

103 .
	gvÆ
 = 'o' | 
FIO_CLIENT_FLAG
,

106 .
	g«me
 = (*) "latency-log",

107 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

108 .
	gvÆ
 = 'l' | 
FIO_CLIENT_FLAG
,

111 .
	g«me
 = (*) "bandwidth-log",

112 .
	ghas_¨g
 = 
no_¨gumít
,

113 .
	gvÆ
 = 'b' | 
FIO_CLIENT_FLAG
,

116 .
	g«me
 = (*) "minimal",

117 .
	ghas_¨g
 = 
no_¨gumít
,

118 .
	gvÆ
 = 'm' | 
FIO_CLIENT_FLAG
,

121 .
	g«me
 = (*) "output-format",

122 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

123 .
	gvÆ
 = 'F' | 
FIO_CLIENT_FLAG
,

126 .
	g«me
 = (*) "append-terse",

127 .
	ghas_¨g
 = 
›ti⁄Æ_¨gumít
,

128 .
	gvÆ
 = 'f',

131 .
	g«me
 = (*) "version",

132 .
	ghas_¨g
 = 
no_¨gumít
,

133 .
	gvÆ
 = 'v' | 
FIO_CLIENT_FLAG
,

136 .
	g«me
 = (*) "help",

137 .
	ghas_¨g
 = 
no_¨gumít
,

138 .
	gvÆ
 = 'h' | 
FIO_CLIENT_FLAG
,

141 .
	g«me
 = (*) "cmdhelp",

142 .
	ghas_¨g
 = 
›ti⁄Æ_¨gumít
,

143 .
	gvÆ
 = 'c' | 
FIO_CLIENT_FLAG
,

146 .
	g«me
 = (*) "enghelp",

147 .
	ghas_¨g
 = 
›ti⁄Æ_¨gumít
,

148 .
	gvÆ
 = 'i' | 
FIO_CLIENT_FLAG
,

151 .
	g«me
 = (*) "showcmd",

152 .
	ghas_¨g
 = 
no_¨gumít
,

153 .
	gvÆ
 = 's' | 
FIO_CLIENT_FLAG
,

156 .
	g«me
 = (*) "readonly",

157 .
	ghas_¨g
 = 
no_¨gumít
,

158 .
	gvÆ
 = 'r' | 
FIO_CLIENT_FLAG
,

161 .
	g«me
 = (*) "eta",

162 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

163 .
	gvÆ
 = 'e' | 
FIO_CLIENT_FLAG
,

166 .
	g«me
 = (*) "eta-interval",

167 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

168 .
	gvÆ
 = 'O' | 
FIO_CLIENT_FLAG
,

171 .
	g«me
 = (*) "eta-newline",

172 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

173 .
	gvÆ
 = 'E' | 
FIO_CLIENT_FLAG
,

176 .
	g«me
 = (*) "debug",

177 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

178 .
	gvÆ
 = 'd' | 
FIO_CLIENT_FLAG
,

181 .
	g«me
 = (*) "parse-only",

182 .
	ghas_¨g
 = 
no_¨gumít
,

183 .
	gvÆ
 = 'P' | 
FIO_CLIENT_FLAG
,

186 .
	g«me
 = (*) "section",

187 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

188 .
	gvÆ
 = 'x' | 
FIO_CLIENT_FLAG
,

190 #ifde‡
CONFIG_ZLIB


192 .
	g«me
 = (*) "inflate-log",

193 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

194 .
	gvÆ
 = 'X' | 
FIO_CLIENT_FLAG
,

198 .
	g«me
 = (*) "alloc-size",

199 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

200 .
	gvÆ
 = 'a' | 
FIO_CLIENT_FLAG
,

203 .
	g«me
 = (*) "profile",

204 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

205 .
	gvÆ
 = 'p' | 
FIO_CLIENT_FLAG
,

208 .
	g«me
 = (*) "warnings-fatal",

209 .
	ghas_¨g
 = 
no_¨gumít
,

210 .
	gvÆ
 = 'w' | 
FIO_CLIENT_FLAG
,

213 .
	g«me
 = (*) "max-jobs",

214 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

215 .
	gvÆ
 = 'j' | 
FIO_CLIENT_FLAG
,

218 .
	g«me
 = (*) "terse-version",

219 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

220 .
	gvÆ
 = 'V' | 
FIO_CLIENT_FLAG
,

223 .
	g«me
 = (*) "server",

224 .
	ghas_¨g
 = 
›ti⁄Æ_¨gumít
,

225 .
	gvÆ
 = 'S',

227 #ifde‡
WIN32


229 .
	g«me
 = (*) "server-internal",

230 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

231 .
	gvÆ
 = 'N',

234 { .
	g«me
 = (*) "daemonize",

235 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

236 .
	gvÆ
 = 'D',

239 .
	g«me
 = (*) "client",

240 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

241 .
	gvÆ
 = 'C',

244 .
	g«me
 = (*) "remote-config",

245 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

246 .
	gvÆ
 = 'R',

249 .
	g«me
 = (*) "cpuclock-test",

250 .
	ghas_¨g
 = 
no_¨gumít
,

251 .
	gvÆ
 = 'T',

254 .
	g«me
 = (*) "crctest",

255 .
	ghas_¨g
 = 
›ti⁄Æ_¨gumít
,

256 .
	gvÆ
 = 'G',

259 .
	g«me
 = (*) "memcpytest",

260 .
	ghas_¨g
 = 
›ti⁄Æ_¨gumít
,

261 .
	gvÆ
 = 'M',

264 .
	g«me
 = (*) "idle-prof",

265 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

266 .
	gvÆ
 = 'I',

269 .
	g«me
 = (*) "status-interval",

270 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

271 .
	gvÆ
 = 'L' | 
FIO_CLIENT_FLAG
,

274 .
	g«me
 = (*) "trigger-file",

275 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

276 .
	gvÆ
 = 'W',

279 .
	g«me
 = (*) "trigger-timeout",

280 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

281 .
	gvÆ
 = 'B',

284 .
	g«me
 = (*) "trigger",

285 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

286 .
	gvÆ
 = 'H',

289 .
	g«me
 = (*) "trigger-remote",

290 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

291 .
	gvÆ
 = 'J',

294 .
	g«me
 = (*) "aux-path",

295 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

296 .
	gvÆ
 = 'K',

299 .
	g«me
 = (*) "merge-blktrace-only",

300 .
	ghas_¨g
 = 
no_¨gumít
,

301 .
	gvÆ
 = 'A' | 
FIO_CLIENT_FLAG
,

304 .
	g«me
 = 
NULL
,

308 
	$‰ì_thªads_shm
()

310 
i
;

312 
i
 = 0; i < 
ƒ_£gmíts
; i++) {

313 
thªad_£gmít
 *
£g
 = &
£gmíts
[
i
];

315 i‡(
£g
->
thªads
) {

316 *
ç
 = 
£g
->
thªads
;

317 #i‚de‡
CONFIG_NO_SHM


318 
shmid_ds
 
sbuf
;

320 
£g
->
thªads
 = 
NULL
;

321 
	`shmdt
(
ç
);

322 
	`shm˘l
(
£g
->
shm_id
, 
IPC_RMID
, &
sbuf
);

323 
£g
->
shm_id
 = -1;

325 
£g
->
thªads
 = 
NULL
;

326 
	`‰ì
(
ç
);

331 
ƒ_£gmíts
 = 0;

332 
cur_£gmít
 = 0;

333 
	}
}

335 
	$‰ì_shm
()

337 #i‚de‡
FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION


338 i‡(
ƒ_£gmíts
) {

339 
	`Êow_exô
();

340 
fio_debug_jobp
 = 
NULL
;

341 
fio_w¨√d
 = 
NULL
;

342 
	`‰ì_thªads_shm
();

345 
	`‰ì
(
åiggî_fûe
);

346 
	`‰ì
(
åiggî_cmd
);

347 
	`‰ì
(
åiggî_ªmŸe_cmd
);

348 
åiggî_fûe
 = 
åiggî_cmd
 = 
åiggî_ªmŸe_cmd
 = 
NULL
;

350 
	`›ti⁄s_‰ì
(
fio_›ti⁄s
, &
def_thªad
.
o
);

351 
	`fio_fûñock_exô
();

352 
	`fûe_hash_exô
();

353 
	`s˛ónup
();

355 
	}
}

357 
	$add_thªad_£gmít
()

359 
thªad_£gmít
 *
£g
 = &
£gmíts
[
ƒ_£gmíts
];

360 
size_t
 
size
 = 
JOBS_PER_SEG
 * (
thªad_d©a
);

361 
i
;

363 i‡(
ƒ_£gmíts
 + 1 >
REAL_MAX_SEG
) {

364 
	`log_îr
("error: maximumÇumber of jobsÑeached.\n");

368 
size
 += 2 * ();

370 #i‚de‡
CONFIG_NO_SHM


371 
£g
->
shm_id
 = 
	`shmgë
(0, 
size
, 
IPC_CREAT
 | 0600);

372 i‡(
£g
->
shm_id
 == -1) {

373 i‡(
î∫o
 !
EINVAL
 &&Éºnÿ!
ENOMEM
 &&Éºnÿ!
ENOSPC
)

374 
	`≥º‹
("shmget");

378 
£g
->
thªads
 = 
	`mÆloc
(
size
);

379 i‡(!
£g
->
thªads
)

383 #i‚de‡
CONFIG_NO_SHM


384 
£g
->
thªads
 = 
	`shm©
(£g->
shm_id
, 
NULL
, 0);

385 i‡(
£g
->
thªads
 == (*) -1) {

386 
	`≥º‹
("shmat");

389 i‡(
	`shm_©èch_to_›í_ªmoved
())

390 
	`shm˘l
(
£g
->
shm_id
, 
IPC_RMID
, 
NULL
);

393 
ƒ_£gmíts
++;

395 
	`mem£t
(
£g
->
thªads
, 0, 
JOBS_PER_SEG
 * (
thªad_d©a
));

396 
i
 = 0; i < 
JOBS_PER_SEG
; i++)

397 
	`DRD_IGNORE_VAR
(
£g
->
thªads
[
i
]);

398 
£g
->
ƒ_thªads
 = 0;

401 i‡(
ƒ_£gmíts
 != 1) {

402 
cur_£gmít
++;

406 
fio_debug_jobp
 = (*)(
£g
->
thªads
 + 
JOBS_PER_SEG
);

407 *
fio_debug_jobp
 = -1;

408 
fio_w¨√d
 = 
fio_debug_jobp
 + 1;

409 *
fio_w¨√d
 = 0;

411 
	`Êow_öô
();

413 
	}
}

420 
	$ex∑nd_thªad_¨ó
()

422 
thªad_£gmít
 *
£g
 = &
£gmíts
[
cur_£gmít
];

424 i‡(
ƒ_£gmíts
 && 
£g
->
ƒ_thªads
 < 
JOBS_PER_SEG
)

427  
	`add_thªad_£gmít
();

428 
	}
}

430 
	$dump_¥öt_›ti⁄
(
¥öt_›ti⁄
 *
p
)

432 c⁄° *
dñim
;

434 i‡(!
	`°rcmp
("des¸ùti⁄", 
p
->
«me
))

435 
dñim
 = "\"";

437 
dñim
 = "";

439 
	`log_öfo
("--%s%s", 
p
->
«me
,Ö->
vÆue
 ? "" : " ");

440 i‡(
p
->
vÆue
)

441 
	`log_öfo
("=%s%s%†", 
dñim
, 
p
->
vÆue
, delim);

442 
	}
}

444 
	$dump_›t_li°
(
thªad_d©a
 *
td
)

446 
Êi°_hód
 *
íåy
;

447 
¥öt_›ti⁄
 *
p
;

449 i‡(
	`Êi°_em±y
(&
td
->
›t_li°
))

452 
	`Êi°_f‹_óch
(
íåy
, &
td
->
›t_li°
) {

453 
p
 = 
	`Êi°_íåy
(
íåy
, 
¥öt_›ti⁄
, 
li°
);

454 
	`dump_¥öt_›ti⁄
(
p
);

456 
	}
}

458 
	$c›y_›t_li°
(
thªad_d©a
 *
d°
, thªad_d©®*
§c
)

460 
Êi°_hód
 *
íåy
;

462 i‡(
	`Êi°_em±y
(&
§c
->
›t_li°
))

465 
	`Êi°_f‹_óch
(
íåy
, &
§c
->
›t_li°
) {

466 
¥öt_›ti⁄
 *
§˝
, *
d°p
;

468 
§˝
 = 
	`Êi°_íåy
(
íåy
, 
¥öt_›ti⁄
, 
li°
);

469 
d°p
 = 
	`mÆloc
((*dstp));

470 
d°p
->
«me
 = 
	`°rdup
(
§˝
->name);

471 i‡(
§˝
->
vÆue
)

472 
d°p
->
vÆue
 = 
	`°rdup
(
§˝
->value);

474 
d°p
->
vÆue
 = 
NULL
;

475 
	`Êi°_add_èû
(&
d°p
->
li°
, &
d°
->
›t_li°
);

477 
	}
}

482 
thªad_d©a
 *
	$gë_√w_job
(
boﬁ
 
globÆ
, 
thªad_d©a
 *
∑ª¡
,

483 
boﬁ
 
¥e£rve_eo
, c⁄° *
job«me
)

485 
thªad_£gmít
 *
£g
;

486 
thªad_d©a
 *
td
;

488 i‡(
globÆ
)

489  &
def_thªad
;

490 i‡(
	`ex∑nd_thªad_¨ó
()) {

491 
	`log_îr
("error: failedÅo setup shm segment\n");

492  
NULL
;

495 
£g
 = &
£gmíts
[
cur_£gmít
];

496 
td
 = &
£g
->
thªads
[£g->
ƒ_thªads
++];

497 
thªad_numbî
++;

498 *
td
 = *
∑ª¡
;

500 
	`INIT_FLIST_HEAD
(&
td
->
›t_li°
);

501 i‡(
∑ª¡
 !&
def_thªad
)

502 
	`c›y_›t_li°
(
td
, 
∑ª¡
);

504 
td
->
io_›s
 = 
NULL
;

505 
td
->
io_›s_öô
 = 0;

506 i‡(!
¥e£rve_eo
)

507 
td
->
eo
 = 
NULL
;

509 
td
->
o
.
uid
 =Åd->o.
gid
 = -1U;

511 
	`dup_fûes
(
td
, 
∑ª¡
);

512 
	`fio_›ti⁄s_mem_du≥
(
td
);

514 
	`¥ofûe_add_hooks
(
td
);

516 
td
->
thªad_numbî
 =Åhread_number;

517 
td
->
subjob_numbî
 = 0;

519 i‡(
job«me
)

520 
td
->
o
.
«me
 = 
	`°rdup
(
job«me
);

522 i‡(!
∑ª¡
->
o
.
group_ªp‹tög
 ||Ö¨íà=&
def_thªad
)

523 
°©_numbî
++;

525  
td
;

526 
	}
}

528 
	$put_job
(
thªad_d©a
 *
td
)

530 i‡(
td
 =&
def_thªad
)

533 
	`¥ofûe_td_exô
(
td
);

534 
	`Êow_exô_job
(
td
);

536 i‡(
td
->
îr‹
)

537 
	`log_öfo
("fio: %s\n", 
td
->
vîr‹
);

539 
	`fio_›ti⁄s_‰ì
(
td
);

540 
	`fio_dump_›ti⁄s_‰ì
(
td
);

541 i‡(
td
->
io_›s
)

542 
	`‰ì_i€ngöe
(
td
);

544 i‡(
td
->
o
.
«me
)

545 
	`‰ì
(
td
->
o
.
«me
);

547 
	`mem£t
(
td
, 0, (*td));

548 
£gmíts
[
cur_£gmít
].
ƒ_thªads
--;

549 
thªad_numbî
--;

550 
	}
}

552 
	$__£tup_øã
(
thªad_d©a
 *
td
, 
fio_ddú
 
ddú
)

554 
bs
 = 
td
->
o
.
mö_bs
[
ddú
];

556 
	`as£π
(
	`ddú_rw
(
ddú
));

558 i‡(
td
->
o
.
øã
[
ddú
])

559 
td
->
øã_bps
[
ddú
] =Åd->
o
.
øã
[ddir];

561 
td
->
øã_bps
[
ddú
] = (
uöt64_t
Ëtd->
o
.
øã_i›s
[ddú] * 
bs
;

563 i‡(!
td
->
øã_bps
[
ddú
]) {

564 
	`log_îr
("rateÜowerÅhan supported\n");

568 
td
->
øã_√xt_io_time
[
ddú
] = 0;

569 
td
->
øã_io_issue_byãs
[
ddú
] = 0;

570 
td
->
œ°_u£c
[
ddú
] = 0;

572 
	}
}

574 
	$£tup_øã
(
thªad_d©a
 *
td
)

576 
ªt
 = 0;

578 
	`f‹_óch_rw_ddú
(
ddú
) {

579 i‡(
td
->
o
.
øã
[
ddú
] ||Åd->o.
øã_i›s
[ddir]) {

580 
ªt
 |
	`__£tup_øã
(
td
, 
ddú
);

583  
ªt
;

584 
	}
}

586 
	$fixed_block_size
(
thªad_›ti⁄s
 *
o
)

588  
o
->
mö_bs
[
DDIR_READ
] =o->
max_bs
[DDIR_READ] &&

589 
o
->
mö_bs
[
DDIR_WRITE
] =o->
max_bs
[DDIR_WRITE] &&

590 
o
->
mö_bs
[
DDIR_TRIM
] =o->
max_bs
[DDIR_TRIM] &&

591 
o
->
mö_bs
[
DDIR_READ
] =o->mö_bs[
DDIR_WRITE
] &&

592 
o
->
mö_bs
[
DDIR_READ
] =o->mö_bs[
DDIR_TRIM
];

593 
	}
}

598 
	$gcd
(
m
, 
n
)

600 i‡(!
n
)

601  
m
;

603  
	`gcd
(
n
, 
m
 %Ç);

604 
	}
}

610 
	$fixup_›ti⁄s
(
thªad_d©a
 *
td
)

612 
thªad_›ti⁄s
 *
o
 = &
td
->o;

613 
ªt
 = 0;

615 i‡(
ªad_⁄ly
 && (
	`td_wrôe
(
td
Ë|| 
	`td_åim
(td))) {

616 
	`log_îr
("fio:Årimánd write operationsáreÇotállowed"

618 
ªt
 |= 1;

621 #i‚de‡
CONFIG_PSHARED


622 i‡(!
o
->
u£_thªad
) {

623 
	`log_öfo
("fio:ÅhisÖlatform doesÇot supportÖrocess shared"

626 
o
->
u£_thªad
 = 1;

627 
ªt
 |
w¨nögs_Áèl
;

631 i‡(
o
->
wrôe_iﬁog_fûe
 && o->
ªad_iﬁog_fûe
) {

632 
	`log_îr
("fio:Ñead iolog overrides write_iolog\n");

633 
	`‰ì
(
o
->
wrôe_iﬁog_fûe
);

634 
o
->
wrôe_iﬁog_fûe
 = 
NULL
;

635 
ªt
 |
w¨nögs_Áèl
;

638 i‡(
o
->
z⁄e_mode
 =
ZONE_MODE_NONE
 && o->
z⁄e_size
) {

639 
	`log_îr
("fio: --zonemode=noneánd --zonesizeáreÇot compatible.\n");

640 
ªt
 |= 1;

643 i‡(
o
->
z⁄e_mode
 =
ZONE_MODE_ZBD
 && !o->
¸óã_£rülize
) {

644 
	`log_îr
("fio: --zonemode=zbdánd --create_serialize=0áreÇot compatible.\n");

645 
ªt
 |= 1;

648 i‡(
o
->
z⁄e_mode
 =
ZONE_MODE_STRIDED
 && !o->
z⁄e_size
) {

649 
	`log_îr
("fio: --zonesize must be specified when using --zonemode=strided.\n");

650 
ªt
 |= 1;

653 i‡(
o
->
z⁄e_mode
 =
ZONE_MODE_NOT_SPECIFIED
) {

654 i‡(
o
->
z⁄e_size
)

655 
o
->
z⁄e_mode
 = 
ZONE_MODE_STRIDED
;

657 
o
->
z⁄e_mode
 = 
ZONE_MODE_NONE
;

663 i‡(
o
->
z⁄e_mode
 =
ZONE_MODE_STRIDED
 && o->
›í_fûes
 > 1)

664 
o
->
z⁄e_mode
 = 
ZONE_MODE_NONE
;

670 i‡(
o
->
z⁄e_mode
 =
ZONE_MODE_STRIDED
 && !o->
z⁄e_ønge
)

671 
o
->
z⁄e_ønge
 = o->
z⁄e_size
;

676 i‡(
	`td_ªad
(
td
))

677 
o
->
ovîwrôe
 = 1;

679 
	`f‹_óch_rw_ddú
(
ddú
) {

680 i‡(!
o
->
mö_bs
[
ddú
])

681 
o
->
mö_bs
[
ddú
] = o->
bs
[ddir];

682 i‡(!
o
->
max_bs
[
ddú
])

683 
o
->
max_bs
[
ddú
] = o->
bs
[ddir];

686 
o
->
rw_mö_bs
 = -1;

687 
	`f‹_óch_rw_ddú
(
ddú
) {

688 
o
->
rw_mö_bs
 = 
	`mö
(o->rw_mö_bs, o->
mö_bs
[
ddú
]);

694 
	`f‹_óch_rw_ddú
(
ddú
) {

695 i‡(!
o
->
ba
[
ddú
] || !
	`td_øndom
(
td
))

696 
o
->
ba
[
ddú
] = o->
mö_bs
[ddir];

699 i‡((
o
->
ba
[
DDIR_READ
] !o->
mö_bs
[DDIR_READ] ||

700 
o
->
ba
[
DDIR_WRITE
] !o->
mö_bs
[DDIR_WRITE] ||

701 
o
->
ba
[
DDIR_TRIM
] !o->
mö_bs
[DDIR_TRIM]) &&

702 !
o
->
n‹™domm≠
) {

703 
	`log_îr
("fio: Any use of blockalign=Åurns offÑandommap\n");

704 
o
->
n‹™domm≠
 = 1;

705 
ªt
 |
w¨nögs_Áèl
;

708 i‡(!
o
->
fûe_size_high
)

709 
o
->
fûe_size_high
 = o->
fûe_size_low
;

711 i‡(
o
->
°¨t_dñay_high
) {

712 i‡(!
o
->
°¨t_dñay_‹ig
)

713 
o
->
°¨t_dñay_‹ig
 = o->
°¨t_dñay
;

714 
o
->
°¨t_dñay
 = 
	`ønd_bëwìn
(&
td
->
dñay_°©e
,

715 
o
->
°¨t_dñay_‹ig
,

716 
o
->
°¨t_dñay_high
);

719 i‡(
o
->
n‹™domm≠
 && o->
vîify
 !
VERIFY_NONE


720 && !
	`fixed_block_size
(
o
)) {

721 
	`log_îr
("fio:Çorandommap given for variable block sizes, "

723 
ªt
 |
w¨nögs_Áèl
;

725 i‡(
o
->
bs_u«lig√d
 && (o->
odúe˘
 || 
	`td_i€ngöe_Êagged
(
td
, 
FIO_RAWIO
)))

726 
	`log_îr
("fio: bs_unaligned mayÇot work withÑaw io\n");

731 i‡(
o
->
thöktime_•ö
 > o->
thöktime
)

732 
o
->
thöktime_•ö
 = o->
thöktime
;

737 i‡(
o
->
iodïth_low
 > o->
iodïth
 || !o->iodepth_low)

738 
o
->
iodïth_low
 = o->
iodïth
;

743 i‡(
o
->
iodïth_b©ch
 > o->
iodïth
 || !o->iodepth_batch)

744 
o
->
iodïth_b©ch
 = o->
iodïth
;

750 i‡(
o
->
iodïth_b©ch_com∂ëe_mö
 > o->
iodïth_b©ch_com∂ëe_max
)

751 
o
->
iodïth_b©ch_com∂ëe_max
 = o->
iodïth_b©ch_com∂ëe_mö
;

758 i‡(
o
->
£rülize_ovîœp
 && !(
td
->
Êags
 & 
TD_F_READ_IOLOG
) &&

759 (!(
	`td_wrôe
(
td
Ë|| 
	`td_åim
—d)Ë|| 
o
->
iodïth
 == 1) &&

760 
o
->
io_submô_mode
 !
IO_MODE_OFFLOAD
)

761 
o
->
£rülize_ovîœp
 = 0;

763 i‡(
o
->
ƒ_fûes
 > 
td
->
fûes_ödex
)

764 
o
->
ƒ_fûes
 = 
td
->
fûes_ödex
;

766 i‡(
o
->
›í_fûes
 > o->
ƒ_fûes
 || !o->open_files)

767 
o
->
›í_fûes
 = o->
ƒ_fûes
;

769 i‡(((
o
->
øã
[
DDIR_READ
] + o->øã[
DDIR_WRITE
] + o->øã[
DDIR_TRIM
]) &&

770 (
o
->
øã_i›s
[
DDIR_READ
] + o->øã_i›s[
DDIR_WRITE
] + o->øã_i›s[
DDIR_TRIM
])) ||

771 ((
o
->
øãmö
[
DDIR_READ
] + o->øãmö[
DDIR_WRITE
] + o->øãmö[
DDIR_TRIM
]) &&

772 (
o
->
øã_i›s_mö
[
DDIR_READ
] + o->øã_i›s_mö[
DDIR_WRITE
] + o->øã_i›s_mö[
DDIR_TRIM
]))) {

773 
	`log_îr
("fio:ÑateándÑate_iopsáre mutuallyÉxclusive\n");

774 
ªt
 |= 1;

776 
	`f‹_óch_rw_ddú
(
ddú
) {

777 i‡((
o
->
øã
[
ddú
] && (o->øã[ddú] < o->
øãmö
[ddir])) ||

778 (
o
->
øã_i›s
[
ddú
] && (o->øã_i›s[ddú] < o->
øã_i›s_mö
[ddir]))) {

779 
	`log_îr
("fio: möimumÑ©êex˚ed†øã, ddú %d\n", +
ddú
);

780 
ªt
 |= 1;

784 i‡(!
o
->
timeout
 && o->
time_ba£d
) {

785 
	`log_îr
("fio:Åime_basedÑequiresáÑuntime/timeout setting\n");

786 
o
->
time_ba£d
 = 0;

787 
ªt
 |
w¨nögs_Áèl
;

790 i‡(
o
->
fûl_devi˚
 && !o->
size
)

791 
o
->
size
 = -1ULL;

793 i‡(
o
->
vîify
 !
VERIFY_NONE
) {

794 i‡(
	`td_wrôe
(
td
Ë&& 
o
->
do_vîify
 && o->
numjobs
 > 1 &&

795 (
o
->
fûíame
 ||

796 !(
o
->
unique_fûíame
 &&

797 
	`°r°r
(
o
->
fûíame_f‹m©
, "$jobname") &&

798 
	`°r°r
(
o
->
fûíame_f‹m©
, "$jobnum") &&

799 
	`°r°r
(
o
->
fûíame_f‹m©
, "$filenum")))) {

800 
	`log_öfo
("fio: multiple writers may overwrite blocks "

803 
ªt
 |
w¨nögs_Áèl
;

810 i‡(
	`td_wrôe
(
td
Ë&& 
o
->
do_vîify
 && o->
timeout
 &&

811 
o
->
time_ba£d
 && !
	`td_ªad
(
td
Ë&& !o->
vîify_backlog
) {

812 
	`log_öfo
("fio: verificationÑeadÖhase willÇever "

815 
ªt
 |
w¨nögs_Áèl
;

818 i‡(!
	`fio_›ti⁄_is_£t
(
o
, 
ªfûl_buf„rs
))

819 
o
->
ªfûl_buf„rs
 = 1;

821 i‡(
o
->
max_bs
[
DDIR_WRITE
] !o->
mö_bs
[DDIR_WRITE] &&

822 !
o
->
vîify_öãrvÆ
)

823 
o
->
vîify_öãrvÆ
 = o->
mö_bs
[
DDIR_WRITE
];

829 i‡(
o
->
vîify_öãrvÆ
 > o->
mö_bs
[
DDIR_WRITE
])

830 
o
->
vîify_öãrvÆ
 = o->
mö_bs
[
DDIR_WRITE
];

831 i‡(
	`td_ªad
(
td
Ë&& 
o
->
vîify_öãrvÆ
 > o->
mö_bs
[
DDIR_READ
])

832 
o
->
vîify_öãrvÆ
 = o->
mö_bs
[
DDIR_READ
];

838 i‡(!
o
->
vîify_öãrvÆ
 ||

839 (
o
->
mö_bs
[
DDIR_WRITE
] % o->
vîify_öãrvÆ
) ||

840 (
o
->
max_bs
[
DDIR_WRITE
] % o->
vîify_öãrvÆ
))

841 
o
->
vîify_öãrvÆ
 = 
	`gcd
(o->
mö_bs
[
DDIR_WRITE
],

842 
o
->
max_bs
[
DDIR_WRITE
]);

845 i‡(
o
->
¥e_ªad
) {

846 i‡(
o
->
övÆid©e_ˇche
)

847 
o
->
övÆid©e_ˇche
 = 0;

848 i‡(
	`td_i€ngöe_Êagged
(
td
, 
FIO_PIPEIO
)) {

849 
	`log_öfo
("fio: cannotÖre-read files withán IOÉngine"

851 
ªt
 |
w¨nögs_Áèl
;

855 i‡(
o
->
unô_ba£
 =
N2S_NONE
) {

856 i‡(
	`td_i€ngöe_Êagged
(
td
, 
FIO_BIT_BASED
))

857 
o
->
unô_ba£
 = 
N2S_BITPERSEC
;

859 
o
->
unô_ba£
 = 
N2S_BYTEPERSEC
;

862 #i‚de‡
CONFIG_FDATASYNC


863 i‡(
o
->
fd©async_blocks
) {

864 
	`log_öfo
("fio:ÅhisÖlatform doesÇot support fdatasync()"

868 
o
->
fsync_blocks
 = o->
fd©async_blocks
;

869 
o
->
fd©async_blocks
 = 0;

870 
ªt
 |
w¨nögs_Áèl
;

874 #ifde‡
WIN32


879 i‡(
	`td_i€ngöe_Êagged
(
td
, 
FIO_SYNCIO
Ë&& (
o
->
odúe˘
 || o->
sync_io
)) {

880 
	`log_îr
("fio: Windows doesÇot support direct orÇon-buffered io with"

883 
ªt
 |= 1;

893 i‡(
o
->
com¥ess_≥r˚¡age
) {

894 i‡(
o
->
com¥ess_≥r˚¡age
 == 100) {

895 
o
->
zîo_buf„rs
 = 1;

896 
o
->
com¥ess_≥r˚¡age
 = 0;

897 } i‡(!
	`fio_›ti⁄_is_£t
(
o
, 
ªfûl_buf„rs
)) {

898 
o
->
ªfûl_buf„rs
 = 1;

899 
td
->
Êags
 |
TD_F_REFILL_BUFFERS
;

907 i‡(
o
->
øndom_di°ributi⁄
 !
FIO_RAND_DIST_RANDOM
)

908 
o
->
n‹™domm≠
 = 1;

913 i‡(
o
->
size
 && o->sizê< 
	`td_mö_bs
(
td
)) {

914 
	`log_îr
("fio: sizeÅoo small, mustÇot beÜessÅhan minimum block size: %llu < %llu\n",

915 (Ë
o
->
size
, 
	`td_mö_bs
(
td
));

916 
ªt
 |= 1;

922 i‡(
o
->
ﬂtomic
)

923 
o
->
odúe˘
 = 1;

928 i‡(
	`fio_›ti⁄_is_£t
(
o
, 
ønd_£ed
))

929 
o
->
ønd_ª≥©abÀ
 = 0;

931 i‡(
	`td_i€ngöe_Êagged
(
td
, 
FIO_NOEXTEND
Ë&& 
o
->
fûe_≠≥nd
) {

932 
	`log_îr
("fio: c™'à≠≥nd/exã¡ wôh IOÉngöê%s\n", 
td
->
io_›s
->
«me
);

933 
ªt
 |= 1;

936 i‡(
	`fio_›ti⁄_is_£t
(
o
, 
gtod_˝u
)) {

937 
	`fio_gtod_öô
();

938 
	`fio_gtod_£t_˝u
(
o
->
gtod_˝u
);

939 
fio_gtod_ofÊﬂd
 = 1;

942 
td
->
lo›s
 = 
o
->loops;

943 i‡(!
td
->
lo›s
)

944 
td
->
lo›s
 = 1;

946 i‡(
o
->
block_îr‹_hi°
 && o->
ƒ_fûes
 != 1) {

947 
	`log_îr
("fio: blockÉrror histogram onlyávailable "

949 "¥ovided\n", 
o
->
ƒ_fûes
);

950 
ªt
 |= 1;

953 i‡(
o
->
dißbÀ_œt
)

954 
o
->
œt_≥r˚¡ûes
 = 0;

955 i‡(
o
->
dißbÀ_˛©
)

956 
o
->
˛©_≥r˚¡ûes
 = 0;

957 i‡(
o
->
dißbÀ_¶©
)

958 
o
->
¶©_≥r˚¡ûes
 = 0;

963 
	`f‹_óch_rw_ddú
(
ddú
)

964 
o
->
max_œãncy
[
ddú
] *= 1000ULL;

966 
o
->
œãncy_èrgë
 *= 1000ULL;

971 i‡(
o
->
dedu≥_≥r˚¡age
 && o->
dedu≥_mode
 =
DEDUPE_MODE_WORKING_SET
) {

972 i‡(!
	`fio_›ti⁄_is_£t
(
o
, 
size
)) {

973 
	`log_îr
("fio:Öregenerated dedupe working set "

975 
ªt
 |= 1;

976 } i‡(
o
->
ƒ_fûes
 != 1) {

977 
	`log_îr
("fio: dedupe working set mode supported with "

979 "¥ovided\n", 
o
->
ƒ_fûes
);

980 
ªt
 |= 1;

981 } i‡(
o
->
dedu≥_w‹kög_£t_≥r˚¡age
 + o->
dedu≥_≥r˚¡age
 > 100) {

982 
	`log_îr
("fio: impossibleÅoÑeachÉxpected dedupeÖercentage %u "

985 
o
->
dedu≥_≥r˚¡age
, o->
dedu≥_w‹kög_£t_≥r˚¡age
);

986 
ªt
 |= 1;

990  
ªt
;

991 
	}
}

993 
	$öô_ønd_fûe_£rvi˚
(
thªad_d©a
 *
td
)

995 
ƒ™ges
 = 
td
->
o
.
ƒ_fûes
 << 
FIO_FSERVICE_SHIFT
;

996 c⁄° 
£ed
 = 
td
->
ønd_£eds
[
FIO_RAND_FILE_OFF
];

998 i‡(
td
->
o
.
fûe_£rvi˚_ty≥
 =
FIO_FSERVICE_ZIPF
) {

999 
	`zùf_öô
(&
td
->
√xt_fûe_zùf
, 
ƒ™ges
,Åd->
zùf_thëa
,Åd->
øndom_˚¡î
, 
£ed
);

1000 
	`zùf_dißbÀ_hash
(&
td
->
√xt_fûe_zùf
);

1001 } i‡(
td
->
o
.
fûe_£rvi˚_ty≥
 =
FIO_FSERVICE_PARETO
) {

1002 
	`∑ªto_öô
(&
td
->
√xt_fûe_zùf
, 
ƒ™ges
,Åd->
∑ªto_h
,Åd->
øndom_˚¡î
, 
£ed
);

1003 
	`zùf_dißbÀ_hash
(&
td
->
√xt_fûe_zùf
);

1004 } i‡(
td
->
o
.
fûe_£rvi˚_ty≥
 =
FIO_FSERVICE_GAUSS
) {

1005 
	`gauss_öô
(&
td
->
√xt_fûe_gauss
, 
ƒ™ges
,Åd->
gauss_dev
,Åd->
øndom_˚¡î
, 
£ed
);

1006 
	`gauss_dißbÀ_hash
(&
td
->
√xt_fûe_gauss
);

1008 
	}
}

1010 
	$td_fûl_vîify_°©e_£ed
(
thªad_d©a
 *
td
)

1012 
boﬁ
 
u£64
;

1014 i‡(
td
->
o
.
øndom_gíî©‹
 =
FIO_RAND_GEN_TAUSWORTHE64
)

1015 
u£64
 = 
åue
;

1017 
u£64
 = 
Ál£
;

1019 
	`öô_ønd_£ed
(&
td
->
vîify_°©e
,Åd->
ønd_£eds
[
FIO_RAND_VER_OFF
],

1020 
u£64
);

1021 
	}
}

1023 
	$td_fûl_ønd_£eds_öã∫Æ
(
thªad_d©a
 *
td
, 
boﬁ
 
u£64
)

1025 
uöt64_t
 
ªad_£ed
 = 
td
->
ønd_£eds
[
FIO_RAND_BS_OFF
];

1026 
uöt64_t
 
wrôe_£ed
 = 
td
->
ønd_£eds
[
FIO_RAND_BS1_OFF
];

1027 
uöt64_t
 
åim_£ed
 = 
td
->
ønd_£eds
[
FIO_RAND_BS2_OFF
];

1028 
i
;

1038 i‡(
td
->
o
.
vîify
 !
VERIFY_NONE
)

1039 
wrôe_£ed
 = 
ªad_£ed
;

1040 i‡(
	`td_åimwrôe
(
td
))

1041 
åim_£ed
 = 
wrôe_£ed
;

1042 
	`öô_ønd_£ed
(&
td
->
b§™ge_°©e
[
DDIR_READ
], 
ªad_£ed
, 
u£64
);

1043 
	`öô_ønd_£ed
(&
td
->
b§™ge_°©e
[
DDIR_WRITE
], 
wrôe_£ed
, 
u£64
);

1044 
	`öô_ønd_£ed
(&
td
->
b§™ge_°©e
[
DDIR_TRIM
], 
åim_£ed
, 
u£64
);

1046 
	`td_fûl_vîify_°©e_£ed
(
td
);

1047 
	`öô_ønd_£ed
(&
td
->
rwmix_°©e
,Åd->
ønd_£eds
[
FIO_RAND_MIX_OFF
], 
Ál£
);

1049 i‡(
td
->
o
.
fûe_£rvi˚_ty≥
 =
FIO_FSERVICE_RANDOM
)

1050 
	`öô_ønd_£ed
(&
td
->
√xt_fûe_°©e
,Åd->
ønd_£eds
[
FIO_RAND_FILE_OFF
], 
u£64
);

1051 i‡(
td
->
o
.
fûe_£rvi˚_ty≥
 & 
__FIO_FSERVICE_NONUNIFORM
)

1052 
	`öô_ønd_fûe_£rvi˚
(
td
);

1054 
	`öô_ønd_£ed
(&
td
->
fûe_size_°©e
,Åd->
ønd_£eds
[
FIO_RAND_FILE_SIZE_OFF
], 
u£64
);

1055 
	`öô_ønd_£ed
(&
td
->
åim_°©e
,Åd->
ønd_£eds
[
FIO_RAND_TRIM_OFF
], 
u£64
);

1056 
	`öô_ønd_£ed
(&
td
->
dñay_°©e
,Åd->
ønd_£eds
[
FIO_RAND_START_DELAY
], 
u£64
);

1057 
	`öô_ønd_£ed
(&
td
->
poiss⁄_°©e
[0],Åd->
ønd_£eds
[
FIO_RAND_POISSON_OFF
], 0);

1058 
	`öô_ønd_£ed
(&
td
->
poiss⁄_°©e
[1],Åd->
ønd_£eds
[
FIO_RAND_POISSON2_OFF
], 0);

1059 
	`öô_ønd_£ed
(&
td
->
poiss⁄_°©e
[2],Åd->
ønd_£eds
[
FIO_RAND_POISSON3_OFF
], 0);

1060 
	`öô_ønd_£ed
(&
td
->
dedu≥_°©e
,Åd->
ønd_£eds
[
FIO_DEDUPE_OFF
], 
Ál£
);

1061 
	`öô_ønd_£ed
(&
td
->
z⁄e_°©e
,Åd->
ønd_£eds
[
FIO_RAND_ZONE_OFF
], 
Ál£
);

1062 
	`öô_ønd_£ed
(&
td
->
¥io_°©e
,Åd->
ønd_£eds
[
FIO_RAND_PRIO_CMDS
], 
Ál£
);

1063 
	`öô_ønd_£ed
(&
td
->
dedu≥_w‹kög_£t_ödex_°©e
,Åd->
ønd_£eds
[
FIO_RAND_DEDUPE_WORKING_SET_IX
], 
u£64
);

1065 i‡(!
	`td_øndom
(
td
))

1068 i‡(
td
->
o
.
ønd_ª≥©abÀ
)

1069 
td
->
ønd_£eds
[
FIO_RAND_BLOCK_OFF
] = 
FIO_RANDSEED
 *Åd->
thªad_numbî
;

1071 
	`öô_ønd_£ed
(&
td
->
øndom_°©e
,Åd->
ønd_£eds
[
FIO_RAND_BLOCK_OFF
], 
u£64
);

1073 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

1074 
‰™d_°©e
 *
s
 = &
td
->
£q_ønd_°©e
[
i
];

1076 
	`öô_ønd_£ed
(
s
, 
td
->
ønd_£eds
[
FIO_RAND_SEQ_RAND_READ_OFF
], 
Ál£
);

1078 
	}
}

1080 
	$td_fûl_ønd_£eds
(
thªad_d©a
 *
td
)

1082 
boﬁ
 
u£64
;

1084 i‡(
td
->
o
.
ÆÃ™d_ª≥©abÀ
) {

1085 
i
;

1087 
i
 = 0; i < 
FIO_RAND_NR_OFFS
; i++)

1088 
td
->
ønd_£eds
[
i
] = 
FIO_RANDSEED
 *Åd->
thªad_numbî


1089 + 
i
;

1092 i‡(
td
->
o
.
øndom_gíî©‹
 =
FIO_RAND_GEN_TAUSWORTHE64
)

1093 
u£64
 = 
åue
;

1095 
u£64
 = 
Ál£
;

1097 
	`td_fûl_ønd_£eds_öã∫Æ
(
td
, 
u£64
);

1099 
	`öô_ønd_£ed
(&
td
->
buf_°©e
,Åd->
ønd_£eds
[
FIO_RAND_BUF_OFF
], 
u£64
);

1100 
	`‰™d_c›y
(&
td
->
buf_°©e_¥ev
, &td->
buf_°©e
);

1101 
	}
}

1107 
	$i€ngöe_lﬂd
(
thªad_d©a
 *
td
)

1109 i‡(!
td
->
o
.
i€ngöe
) {

1110 
	`log_îr
("fio: internal fault,Ço IOÉngine specified\n");

1114 i‡(
td
->
io_›s
) {

1115 
i€ngöe_›s
 *
›s
;

1116 *
dlh™dÀ
;

1121 i‡(!
	`°rcmp
(
td
->
io_›s
->
«me
,Åd->
o
.
i€ngöe
)) {

1131 
dlh™dÀ
 = 
td
->
io_›s
->dlhandle;

1132 
›s
 = 
	`lﬂd_i€ngöe
(
td
);

1133 i‡(!
›s
)

1134 
Áû
;

1136 i‡(
›s
 =
td
->
io_›s
 && 
dlh™dÀ
 ==Åd->io_ops->dlhandle)

1139 i‡(
dlh™dÀ
 && dlh™dÀ !
td
->
io_›s
->dlhandle)

1140 
	`dl˛o£
(
dlh™dÀ
);

1143 
	`‰ì_i€ngöe
(
td
);

1146 
td
->
io_›s
 = 
	`lﬂd_i€ngöe
(td);

1147 i‡(!
td
->
io_›s
)

1148 
Áû
;

1150 i‡(
td
->
io_›s
->
›ti⁄_°ru˘_size
 &&Åd->io_›s->
›ti⁄s
) {

1157 *
‹igeo
 = 
td
->
eo
;

1161 i‡(!
‹igeo
 && 
td
 !&
def_thªad
 && def_thªad.
eo
 &&

1162 
def_thªad
.
io_›s
->
›ti⁄s
 =
td
->io_ops->options)

1163 
‹igeo
 = 
def_thªad
.
eo
;

1165 
	`›ti⁄s_öô
(
td
->
io_›s
->
›ti⁄s
);

1166 
td
->
eo
 = 
	`mÆloc
—d->
io_›s
->
›ti⁄_°ru˘_size
);

1172 i‡(
‹igeo
) {

1173 
	`mem˝y
(
td
->
eo
, 
‹igeo
,Åd->
io_›s
->
›ti⁄_°ru˘_size
);

1174 
	`›ti⁄s_mem_du≥
(
td
->
io_›s
->
›ti⁄s
,Åd->
eo
);

1176 
	`mem£t
(
td
->
eo
, 0,Åd->
io_›s
->
›ti⁄_°ru˘_size
);

1177 
	`fûl_deÁu…_›ti⁄s
(
td
->
eo
,Åd->
io_›s
->
›ti⁄s
);

1179 *(
thªad_d©a
 **)
td
->
eo
 =Åd;

1182 i‡(
td
->
o
.
odúe˘
)

1183 
td
->
io_›s
->
Êags
 |
FIO_RAWIO
;

1185 
	`td_£t_i€ngöe_Êags
(
td
);

1188 
Áû
:

1189 
	`log_îr
("fio: failedÅoÜoadÉngine\n");

1192 
	}
}

1194 
	$öô_Êags
(
thªad_d©a
 *
td
)

1196 
thªad_›ti⁄s
 *
o
 = &
td
->o;

1197 
i
;

1199 i‡(
o
->
vîify_backlog
)

1200 
td
->
Êags
 |
TD_F_VER_BACKLOG
;

1201 i‡(
o
->
åim_backlog
)

1202 
td
->
Êags
 |
TD_F_TRIM_BACKLOG
;

1203 i‡(
o
->
ªad_iﬁog_fûe
)

1204 
td
->
Êags
 |
TD_F_READ_IOLOG
;

1205 i‡(
o
->
ªfûl_buf„rs
)

1206 
td
->
Êags
 |
TD_F_REFILL_BUFFERS
;

1210 i‡(
o
->
s¸ambÀ_buf„rs
 && 
	`fio_›ti⁄_is_£t
(o, scramble_buffers))

1211 
td
->
Êags
 |
TD_F_SCRAMBLE_BUFFERS
;

1216 i‡(
o
->
s¸ambÀ_buf„rs
 && !(o->
zîo_buf„rs
 &&

1217 
	`fio_›ti⁄_is_£t
(
o
, 
zîo_buf„rs
)))

1218 
td
->
Êags
 |
TD_F_SCRAMBLE_BUFFERS
;

1219 i‡(
o
->
vîify
 !
VERIFY_NONE
)

1220 
td
->
Êags
 |
TD_F_DO_VERIFY
;

1222 i‡(
o
->
vîify_async
 || o->
io_submô_mode
 =
IO_MODE_OFFLOAD
)

1223 
td
->
Êags
 |
TD_F_NEED_LOCK
;

1225 i‡(
o
->
mem_ty≥
 =
MEM_CUDA_MALLOC
)

1226 
td
->
Êags
 &~
TD_F_SCRAMBLE_BUFFERS
;

1228 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

1229 i‡(
	`›ti⁄_check_øã
(
td
, 
i
)) {

1230 
td
->
Êags
 |
TD_F_CHECK_RATE
;

1234 
	}
}

1236 
	$£tup_øndom_£eds
(
thªad_d©a
 *
td
)

1238 
uöt64_t
 
£ed
;

1239 
i
;

1241 i‡(!
td
->
o
.
ønd_ª≥©abÀ
 && !
	`fio_›ti⁄_is_£t
(&td->o, 
ønd_£ed
)) {

1242 
ªt
 = 
	`öô_øndom_£eds
(
td
->
ønd_£eds
, (td->rand_seeds));

1243 i‡(!
ªt
)

1244 
	`td_fûl_ønd_£eds
(
td
);

1245  
ªt
;

1248 
£ed
 = 
td
->
o
.
ønd_£ed
;

1249 
i
 = 0; i < 4; i++)

1250 
£ed
 *= 0x9e370001UL;

1252 
i
 = 0; i < 
FIO_RAND_NR_OFFS
; i++) {

1253 
td
->
ønd_£eds
[
i
] = 
£ed
 *Åd->
thªad_numbî
 + i;

1254 
£ed
 *= 0x9e370001UL;

1257 
	`td_fûl_ønd_£eds
(
td
);

1259 
	}
}

1262 
	mFPRE_NONE
 = 0,

1263 
	mFPRE_JOBNAME
,

1264 
	mFPRE_JOBNUM
,

1265 
	mFPRE_FILENUM
,

1266 
	mFPRE_CLIENTUID


1269 
	sÂª_keyw‹d
 {

1270 c⁄° *
	mkeyw‹d
;

1271 
size_t
 
	m°æí
;

1272 
	mkey
;

1273 } 
	gÂª_keyw‹ds
[] = {

1274 { .
keyw‹d
 = "$job«me", .
	gkey
 = 
FPRE_JOBNAME
, },

1275 { .
	gkeyw‹d
 = "$jobnum", .
	gkey
 = 
FPRE_JOBNUM
, },

1276 { .
	gkeyw‹d
 = "$fûíum", .
	gkey
 = 
FPRE_FILENUM
, },

1277 { .
	gkeyw‹d
 = "$˛õ¡uid", .
	gkey
 = 
FPRE_CLIENTUID
, },

1278 { .
	gkeyw‹d
 = 
NULL
, },

1281 *
	$make_fûíame
(*
buf
, 
size_t
 
buf_size
,
thªad_›ti⁄s
 *
o
,

1282 c⁄° *
job«me
, 
jobnum
, 
fûíum
)

1284 
Âª_keyw‹d
 *
f
;

1285 
c›y
[
PATH_MAX
];

1286 
size_t
 
d°_À·
 = 
PATH_MAX
 - 1;

1288 i‡(!
o
->
fûíame_f‹m©
 || !
	`°æí
(o->filename_format)) {

1289 
	`•rötf
(
buf
, "%s.%d.%d", 
job«me
, 
jobnum
, 
fûíum
);

1290  
buf
;

1293 
f
 = &
Âª_keyw‹ds
[0]; f->
keyw‹d
; f++)

1294 
f
->
°æí
 = 
	`°æí
(f->
keyw‹d
);

1296 
	`¢¥ötf
(
buf
, 
buf_size
, "%s", 
o
->
fûíame_f‹m©
);

1298 
	`mem£t
(
c›y
, 0, (copy));

1299 
f
 = &
Âª_keyw‹ds
[0]; f->
keyw‹d
; f++) {

1301 
size_t
 
¥e_Àn
, 
po°_°¨t
 = 0;

1302 *
°r
, *
d°
 = 
c›y
;

1304 
°r
 = 
	`°rˇ£°r
(
buf
, 
f
->
keyw‹d
);

1305 i‡(!
°r
)

1308 
¥e_Àn
 = 
°r
 - 
buf
;

1309 i‡(
	`°æí
(
°r
Ë!
f
->
°æí
)

1310 
po°_°¨t
 = 
¥e_Àn
 + 
f
->
°æí
;

1312 i‡(
¥e_Àn
) {

1313 
	`°∫˝y
(
d°
, 
buf
, 
¥e_Àn
);

1314 
d°
 +
¥e_Àn
;

1315 
d°_À·
 -
¥e_Àn
;

1318 
f
->
key
) {

1319 
FPRE_JOBNAME
: {

1320 
ªt
;

1322 
ªt
 = 
	`¢¥ötf
(
d°
, 
d°_À·
, "%s", 
job«me
);

1323 i‡(
ªt
 < 0)

1325 i‡(
ªt
 > 
d°_À·
) {

1326 
	`log_îr
("fio:Åruncated filename\n");

1327 
d°
 +
d°_À·
;

1328 
d°_À·
 = 0;

1330 
d°
 +
ªt
;

1331 
d°_À·
 -
ªt
;

1335 
FPRE_JOBNUM
: {

1336 
ªt
;

1338 
ªt
 = 
	`¢¥ötf
(
d°
, 
d°_À·
, "%d", 
jobnum
);

1339 i‡(
ªt
 < 0)

1341 i‡(
ªt
 > 
d°_À·
) {

1342 
	`log_îr
("fio:Åruncated filename\n");

1343 
d°
 +
d°_À·
;

1344 
d°_À·
 = 0;

1346 
d°
 +
ªt
;

1347 
d°_À·
 -
ªt
;

1351 
FPRE_FILENUM
: {

1352 
ªt
;

1354 
ªt
 = 
	`¢¥ötf
(
d°
, 
d°_À·
, "%d", 
fûíum
);

1355 i‡(
ªt
 < 0)

1357 i‡(
ªt
 > 
d°_À·
) {

1358 
	`log_îr
("fio:Åruncated filename\n");

1359 
d°
 +
d°_À·
;

1360 
d°_À·
 = 0;

1362 
d°
 +
ªt
;

1363 
d°_À·
 -
ªt
;

1367 
FPRE_CLIENTUID
: {

1368 
ªt
;

1369 
ªt
 = 
	`¢¥ötf
(
d°
, 
d°_À·
, "%s", 
˛õ¡_sockaddr_°r
);

1370 i‡(
ªt
 < 0)

1372 i‡(
ªt
 > 
d°_À·
) {

1373 
	`log_îr
("fio:Åruncated filename\n");

1374 
d°
 +
d°_À·
;

1375 
d°_À·
 = 0;

1377 
d°
 +
ªt
;

1378 
d°_À·
 -
ªt
;

1383 
	`as£π
(0);

1387 i‡(
po°_°¨t
)

1388 
	`°∫˝y
(
d°
, 
buf
 + 
po°_°¨t
, 
d°_À·
);

1390 
	`¢¥ötf
(
buf
, 
buf_size
, "%s", 
c›y
);

1394  
buf
;

1395 
	}
}

1397 
boﬁ
 
	$∑r£_dryrun
()

1399  
dump_cmdlöe
 || 
∑r£_⁄ly
;

1400 
	}
}

1402 
	$gí_log_«me
(*
«me
, 
size_t
 
size
, c⁄° *
logty≥
,

1403 c⁄° *
log«me
, 
num
,

1404 c⁄° *
suf
, 
≥r_job
)

1406 i‡(
≥r_job
)

1407 
	`¢¥ötf
(
«me
, 
size
, "%s_%s.%d.%s", 
log«me
, 
logty≥
, 
num
, 
suf
);

1409 
	`¢¥ötf
(
«me
, 
size
, "%s_%s.%s", 
log«me
, 
logty≥
, 
suf
);

1410 
	}
}

1412 
	$check_waôìs
(*
waôì
)

1414 
thªad_d©a
 *
td
;

1415 
i
, 
ªt
 = 0;

1417 
	`f‹_óch_td
(
td
, 
i
) {

1418 i‡(
td
->
subjob_numbî
)

1421 
ªt
 +!
	`°rcmp
(
td
->
o
.
«me
, 
waôì
);

1424  
ªt
;

1425 
	}
}

1427 
boﬁ
 
	$waô_f‹_ok
(c⁄° *
job«me
, 
thªad_›ti⁄s
 *
o
)

1429 
nw
;

1431 i‡(!
o
->
waô_f‹
)

1432  
åue
;

1434 i‡(!
	`°rcmp
(
job«me
, 
o
->
waô_f‹
)) {

1435 
	`log_îr
("%s:á job cannot wait for itself (wait_for=%s).\n",

1436 
job«me
, 
o
->
waô_f‹
);

1437  
Ál£
;

1440 i‡(!(
nw
 = 
	`check_waôìs
(
o
->
waô_f‹
))) {

1441 
	`log_îr
("%s: waôì job %†unknown.\n", 
job«me
, 
o
->
waô_f‹
);

1442  
Ál£
;

1445 i‡(
nw
 > 1) {

1446 
	`log_îr
("%s: multiple waitees %s found,\n"

1448 
job«me
, 
o
->
waô_f‹
);

1449  
Ál£
;

1452  
åue
;

1453 
	}
}

1455 
	$vîify_≥r_group_›ti⁄s
(
thªad_d©a
 *
td
, c⁄° *
job«me
)

1457 
thªad_d©a
 *
td2
;

1458 
i
;

1460 
	`f‹_óch_td
(
td2
, 
i
) {

1461 i‡(
td
->
groupid
 !
td2
->groupid)

1464 i‡(
td
->
o
.
°©s
 &&

1465 
td
->
o
.
œt_≥r˚¡ûes
 !
td2
->o.lat_percentiles) {

1466 
	`log_îr
("fio:Üat_percentiles in job: %s differs from group\n",

1467 
job«me
);

1473 
	}
}

1478 c⁄° *
	$make_log_«me
(c⁄° *
log«me
, c⁄° *
job«me
)

1480 i‡(
log«me
 && 
	`°rcmp
(logname, ""))

1481  
log«me
;

1483  
job«me
;

1484 
	}
}

1491 
	$add_job
(
thªad_d©a
 *
td
, c⁄° *
job«me
, 
job_add_num
,

1492 
ªcur£d
, 
˛õ¡_ty≥
)

1494 
i
;

1495 
‚ame
[
PATH_MAX
 + 1];

1496 
numjobs
, 
fûe_Ælo˚d
;

1497 
thªad_›ti⁄s
 *
o
 = &
td
->o;

1498 
log«me
[
PATH_MAX
 + 32];

1503 i‡(
td
 =&
def_thªad
)

1506 
	`öô_Êags
(
td
);

1511 i‡(
	`∑r£_dryrun
()) {

1512 
	`put_job
(
td
);

1516 
td
->
˛õ¡_ty≥
 = client_type;

1518 i‡(
	`¥ofûe_td_öô
(
td
))

1519 
îr
;

1521 i‡(
	`i€ngöe_lﬂd
(
td
))

1522 
îr
;

1524 
fûe_Ælo˚d
 = 0;

1525 i‡(!
o
->
fûíame
 && !
td
->
fûes_ödex
 && !o->
ªad_iﬁog_fûe
) {

1526 
fûe_Ælo˚d
 = 1;

1528 i‡(
o
->
ƒ_fûes
 =1 && 
	`exi°s_™d_nŸ_ªgfûe
(
job«me
))

1529 
	`add_fûe
(
td
, 
job«me
, 
job_add_num
, 0);

1531 
i
 = 0; i < 
o
->
ƒ_fûes
; i++)

1532 
	`add_fûe
(
td
, 
	`make_fûíame
(
‚ame
, (‚ame), 
o
, 
job«me
, 
job_add_num
, 
i
), job_add_num, 0);

1536 i‡(
	`£tup_øndom_£eds
(
td
)) {

1537 
	`td_vîr‹
(
td
, 
î∫o
, "setup_random_seeds");

1538 
îr
;

1541 i‡(
	`fixup_›ti⁄s
(
td
))

1542 
îr
;

1544 i‡(!
td
->
o
.
dedu≥_globÆ
 && 
	`öô_dedu≥_w‹kög_£t_£eds
(td, 0))

1545 
îr
;

1550 i‡(!
	`waô_f‹_ok
(
job«me
, 
o
))

1551 
îr
;

1553 
	`Êow_öô_job
(
td
);

1559 i‡(
td
->
eo
)

1560 *(
thªad_d©a
 **)
td
->
eo
 = 
NULL
;

1562 i‡(
	`td_i€ngöe_Êagged
(
td
, 
FIO_DISKLESSIO
)) {

1563 
fio_fûe
 *
f
;

1565 
	`f‹_óch_fûe
(
td
, 
f
, 
i
)

1566 
f
->
ªÆ_fûe_size
 = -1ULL;

1569 
td
->
£m
 = 
	`fio_£m_öô
(
FIO_SEM_LOCKED
);

1571 
td
->
ts
.
˛©_≥r˚¡ûes
 = 
o
->clat_percentiles;

1572 
td
->
ts
.
œt_≥r˚¡ûes
 = 
o
->lat_percentiles;

1573 
td
->
ts
.
¶©_≥r˚¡ûes
 = 
o
->slat_percentiles;

1574 
td
->
ts
.
≥r˚¡ûe_¥ecisi⁄
 = 
o
->percentile_precision;

1575 
	`mem˝y
(
td
->
ts
.
≥r˚¡ûe_li°
, 
o
->percentile_list, (o->percentile_list));

1576 
td
->
ts
.
sig_figs
 = 
o
->sig_figs;

1578 
	`öô_thªad_°©_mö_vÆs
(&
td
->
ts
);

1586 
td
->
ddú_£q_ƒ
 = 1;

1588 i‡((
o
->
°⁄ewÆl
 || o->
√w_group
Ë&& 
¥ev_group_jobs
) {

1589 
¥ev_group_jobs
 = 0;

1590 
groupid
++;

1591 i‡(
groupid
 =
INT_MAX
) {

1592 
	`log_îr
("fio:Åoo many groups defined\n");

1593 
îr
;

1597 
td
->
groupid
 = groupid;

1598 
¥ev_group_jobs
++;

1600 i‡(
td
->
o
.
group_ªp‹tög
 && 
¥ev_group_jobs
 > 1 &&

1601 
	`vîify_≥r_group_›ti⁄s
(
td
, 
job«me
))

1602 
îr
;

1604 i‡(
	`£tup_øã
(
td
))

1605 
îr
;

1607 i‡(
o
->
wrôe_œt_log
) {

1608 
log_∑øms
 
p
 = {

1609 .
td
 =Åd,

1610 .
avg_m£c
 = 
o
->
log_avg_m£c
,

1611 .
hi°_m£c
 = 
o
->
log_hi°_m£c
,

1612 .
hi°_cﬂr£√ss
 = 
o
->
log_hi°_cﬂr£√ss
,

1613 .
log_ty≥
 = 
IO_LOG_TYPE_LAT
,

1614 .
log_off£t
 = 
o
->log_offset,

1615 .
log_¥io
 = 
o
->log_prio,

1616 .
log_gz
 = 
o
->log_gz,

1617 .
log_gz_°‹e
 = 
o
->log_gz_store,

1619 c⁄° *
¥e
 = 
	`make_log_«me
(
o
->
œt_log_fûe
, o->
«me
);

1620 c⁄° *
suf
;

1622 i‡(
p
.
log_gz_°‹e
)

1623 
suf
 = "log.fz";

1625 
suf
 = "log";

1627 i‡(!
o
->
dißbÀ_œt
) {

1628 
	`gí_log_«me
(
log«me
, ÷og«me), "œt", 
¥e
,

1629 
td
->
thªad_numbî
, 
suf
, 
o
->
≥r_job_logs
);

1630 
	`£tup_log
(&
td
->
œt_log
, &
p
, 
log«me
);

1633 i‡(!
o
->
dißbÀ_¶©
) {

1634 
	`gí_log_«me
(
log«me
, ÷og«me), "¶©", 
¥e
,

1635 
td
->
thªad_numbî
, 
suf
, 
o
->
≥r_job_logs
);

1636 
	`£tup_log
(&
td
->
¶©_log
, &
p
, 
log«me
);

1639 i‡(!
o
->
dißbÀ_˛©
) {

1640 
	`gí_log_«me
(
log«me
, ÷og«me), "˛©", 
¥e
,

1641 
td
->
thªad_numbî
, 
suf
, 
o
->
≥r_job_logs
);

1642 
	`£tup_log
(&
td
->
˛©_log
, &
p
, 
log«me
);

1647 i‡(
o
->
wrôe_hi°_log
) {

1648 
log_∑øms
 
p
 = {

1649 .
td
 =Åd,

1650 .
avg_m£c
 = 
o
->
log_avg_m£c
,

1651 .
hi°_m£c
 = 
o
->
log_hi°_m£c
,

1652 .
hi°_cﬂr£√ss
 = 
o
->
log_hi°_cﬂr£√ss
,

1653 .
log_ty≥
 = 
IO_LOG_TYPE_HIST
,

1654 .
log_off£t
 = 
o
->log_offset,

1655 .
log_¥io
 = 
o
->log_prio,

1656 .
log_gz
 = 
o
->log_gz,

1657 .
log_gz_°‹e
 = 
o
->log_gz_store,

1659 c⁄° *
¥e
 = 
	`make_log_«me
(
o
->
hi°_log_fûe
, o->
«me
);

1660 c⁄° *
suf
;

1662 #i‚de‡
CONFIG_ZLIB


1663 i‡(
td
->
˛õ¡_ty≥
) {

1664 
	`log_îr
("fio: --write_hist_logÑequires zlib in client/server mode\n");

1665 
îr
;

1669 i‡(
p
.
log_gz_°‹e
)

1670 
suf
 = "log.fz";

1672 
suf
 = "log";

1674 
	`gí_log_«me
(
log«me
, ÷og«me), "˛©_hi°", 
¥e
,

1675 
td
->
thªad_numbî
, 
suf
, 
o
->
≥r_job_logs
);

1676 
	`£tup_log
(&
td
->
˛©_hi°_log
, &
p
, 
log«me
);

1679 i‡(
o
->
wrôe_bw_log
) {

1680 
log_∑øms
 
p
 = {

1681 .
td
 =Åd,

1682 .
avg_m£c
 = 
o
->
log_avg_m£c
,

1683 .
hi°_m£c
 = 
o
->
log_hi°_m£c
,

1684 .
hi°_cﬂr£√ss
 = 
o
->
log_hi°_cﬂr£√ss
,

1685 .
log_ty≥
 = 
IO_LOG_TYPE_BW
,

1686 .
log_off£t
 = 
o
->log_offset,

1687 .
log_¥io
 = 
o
->log_prio,

1688 .
log_gz
 = 
o
->log_gz,

1689 .
log_gz_°‹e
 = 
o
->log_gz_store,

1691 c⁄° *
¥e
 = 
	`make_log_«me
(
o
->
bw_log_fûe
, o->
«me
);

1692 c⁄° *
suf
;

1694 i‡(
	`fio_›ti⁄_is_£t
(
o
, 
bw_avg_time
))

1695 
p
.
avg_m£c
 = 
	`mö
(
o
->
log_avg_m£c
, o->
bw_avg_time
);

1697 
o
->
bw_avg_time
 = 
p
.
avg_m£c
;

1699 
p
.
hi°_m£c
 = 
o
->
log_hi°_m£c
;

1700 
p
.
hi°_cﬂr£√ss
 = 
o
->
log_hi°_cﬂr£√ss
;

1702 i‡(
p
.
log_gz_°‹e
)

1703 
suf
 = "log.fz";

1705 
suf
 = "log";

1707 
	`gí_log_«me
(
log«me
, ÷og«me), "bw", 
¥e
,

1708 
td
->
thªad_numbî
, 
suf
, 
o
->
≥r_job_logs
);

1709 
	`£tup_log
(&
td
->
bw_log
, &
p
, 
log«me
);

1711 i‡(
o
->
wrôe_i›s_log
) {

1712 
log_∑øms
 
p
 = {

1713 .
td
 =Åd,

1714 .
avg_m£c
 = 
o
->
log_avg_m£c
,

1715 .
hi°_m£c
 = 
o
->
log_hi°_m£c
,

1716 .
hi°_cﬂr£√ss
 = 
o
->
log_hi°_cﬂr£√ss
,

1717 .
log_ty≥
 = 
IO_LOG_TYPE_IOPS
,

1718 .
log_off£t
 = 
o
->log_offset,

1719 .
log_¥io
 = 
o
->log_prio,

1720 .
log_gz
 = 
o
->log_gz,

1721 .
log_gz_°‹e
 = 
o
->log_gz_store,

1723 c⁄° *
¥e
 = 
	`make_log_«me
(
o
->
i›s_log_fûe
, o->
«me
);

1724 c⁄° *
suf
;

1726 i‡(
	`fio_›ti⁄_is_£t
(
o
, 
i›s_avg_time
))

1727 
p
.
avg_m£c
 = 
	`mö
(
o
->
log_avg_m£c
, o->
i›s_avg_time
);

1729 
o
->
i›s_avg_time
 = 
p
.
avg_m£c
;

1731 
p
.
hi°_m£c
 = 
o
->
log_hi°_m£c
;

1732 
p
.
hi°_cﬂr£√ss
 = 
o
->
log_hi°_cﬂr£√ss
;

1734 i‡(
p
.
log_gz_°‹e
)

1735 
suf
 = "log.fz";

1737 
suf
 = "log";

1739 
	`gí_log_«me
(
log«me
, ÷og«me), "i›s", 
¥e
,

1740 
td
->
thªad_numbî
, 
suf
, 
o
->
≥r_job_logs
);

1741 
	`£tup_log
(&
td
->
i›s_log
, &
p
, 
log«me
);

1744 i‡(!
o
->
«me
)

1745 
o
->
«me
 = 
	`°rdup
(
job«me
);

1747 i‡(
ouçut_f‹m©
 & 
FIO_OUTPUT_NORMAL
) {

1748 i‡(!
job_add_num
) {

1749 i‡(
is_backíd
 && !
ªcur£d
)

1750 
	`fio_£rvî_£nd_add_job
(
td
);

1752 i‡(!
	`td_i€ngöe_Êagged
(
td
, 
FIO_NOIO
)) {

1753 *
c1
, *
c2
, *
c3
, *
c4
;

1754 *
c5
 = 
NULL
, *
c6
 = NULL;

1755 
i2p
 = 
	`is_powî_of_2
(
o
->
kb_ba£
);

1756 
buf_ouçut
 
out
;

1758 
c1
 = 
	`num2°r
(
o
->
mö_bs
[
DDIR_READ
], o->
sig_figs
, 1, 
i2p
, 
N2S_BYTE
);

1759 
c2
 = 
	`num2°r
(
o
->
max_bs
[
DDIR_READ
], o->
sig_figs
, 1, 
i2p
, 
N2S_BYTE
);

1760 
c3
 = 
	`num2°r
(
o
->
mö_bs
[
DDIR_WRITE
], o->
sig_figs
, 1, 
i2p
, 
N2S_BYTE
);

1761 
c4
 = 
	`num2°r
(
o
->
max_bs
[
DDIR_WRITE
], o->
sig_figs
, 1, 
i2p
, 
N2S_BYTE
);

1763 i‡(!
o
->
bs_is_£q_ønd
) {

1764 
c5
 = 
	`num2°r
(
o
->
mö_bs
[
DDIR_TRIM
], o->
sig_figs
, 1, 
i2p
, 
N2S_BYTE
);

1765 
c6
 = 
	`num2°r
(
o
->
max_bs
[
DDIR_TRIM
], o->
sig_figs
, 1, 
i2p
, 
N2S_BYTE
);

1768 
	`buf_ouçut_öô
(&
out
);

1769 
	`__log_buf
(&
out
, "%s: (g=%d):Ñw=%s, ", 
td
->
o
.
«me
,

1770 
td
->
groupid
,

1771 
	`ddú_°r
(
o
->
td_ddú
));

1773 i‡(
o
->
bs_is_£q_ønd
)

1774 
	`__log_buf
(&
out
, "bs=(R) %s-%s, (W) %s-%s, bs_is_seq_rand, ",

1775 
c1
, 
c2
, 
c3
, 
c4
);

1777 
	`__log_buf
(&
out
, "bs=(R) %s-%s, (W) %s-%s, (T) %s-%s, ",

1778 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
);

1780 
	`__log_buf
(&
out
, "ioengine=%s, iodepth=%u\n",

1781 
td
->
io_›s
->
«me
, 
o
->
iodïth
);

1782 
	`log_öfo_buf
(
out
.
buf
, out.
buÊí
);

1783 
	`buf_ouçut_‰ì
(&
out
);

1785 
	`‰ì
(
c1
);

1786 
	`‰ì
(
c2
);

1787 
	`‰ì
(
c3
);

1788 
	`‰ì
(
c4
);

1789 
	`‰ì
(
c5
);

1790 
	`‰ì
(
c6
);

1792 } i‡(
job_add_num
 == 1)

1793 
	`log_öfo
("...\n");

1796 i‡(
	`td_°ódy°©e_öô
(
td
))

1797 
îr
;

1799 i‡(
o
->
mîge_blkåa˚_fûe
 && !
	`mîge_blkåa˚_iﬁogs
(
td
))

1800 
îr
;

1802 i‡(
mîge_blkåa˚_⁄ly
) {

1803 
	`put_job
(
td
);

1811 
numjobs
 = 
o
->numjobs;

1812 --
numjobs
) {

1813 
thªad_d©a
 *
td_√w
 = 
	`gë_√w_job
(
Ál£
, 
td
, 
åue
, 
job«me
);

1815 i‡(!
td_√w
)

1816 
îr
;

1818 
td_√w
->
o
.
numjobs
 = 1;

1819 
td_√w
->
o
.
°⁄ewÆl
 = 0;

1820 
td_√w
->
o
.
√w_group
 = 0;

1821 
td_√w
->
subjob_numbî
 = 
numjobs
;

1822 
td_√w
->
o
.
ss_dur
 = o->ss_dur * 1000000l;

1823 
td_√w
->
o
.
ss_limô
 = o->ss_limit;

1825 i‡(
fûe_Ælo˚d
) {

1826 i‡(
td_√w
->
fûes
) {

1827 
fio_fûe
 *
f
;

1828 
	`f‹_óch_fûe
(
td_√w
, 
f
, 
i
)

1829 
	`fio_fûe_‰ì
(
f
);

1830 
	`‰ì
(
td_√w
->
fûes
);

1831 
td_√w
->
fûes
 = 
NULL
;

1833 
td_√w
->
fûes_ödex
 = 0;

1834 
td_√w
->
fûes_size
 = 0;

1835 i‡(
td_√w
->
o
.
fûíame
) {

1836 
	`‰ì
(
td_√w
->
o
.
fûíame
);

1837 
td_√w
->
o
.
fûíame
 = 
NULL
;

1841 i‡(
	`add_job
(
td_√w
, 
job«me
, 
numjobs
, 1, 
˛õ¡_ty≥
))

1842 
îr
;

1846 
îr
:

1847 
	`put_job
(
td
);

1849 
	}
}

1854 
	$add_job_›ts
(c⁄° **
o
, 
˛õ¡_ty≥
)

1856 
thªad_d©a
 *
td
, *
td_∑ª¡
;

1857 
i
, 
ö_globÆ
 = 1;

1858 
job«me
[32];

1860 
i
 = 0;

1861 
td_∑ª¡
 = 
td
 = 
NULL
;

1862 
o
[
i
]) {

1863 i‡(!
	`°∫cmp
(
o
[
i
], "name", 4)) {

1864 
ö_globÆ
 = 0;

1865 i‡(
td
)

1866 
	`add_job
(
td
, 
job«me
, 0, 0, 
˛õ¡_ty≥
);

1867 
td
 = 
NULL
;

1868 
	`•rötf
(
job«me
, "%s", 
o
[
i
] + 5);

1870 i‡(
ö_globÆ
 && !
td_∑ª¡
)

1871 
td_∑ª¡
 = 
	`gë_√w_job
(
åue
, &
def_thªad
, 
Ál£
, 
job«me
);

1872 i‡(!
ö_globÆ
 && !
td
) {

1873 i‡(!
td_∑ª¡
)

1874 
td_∑ª¡
 = &
def_thªad
;

1875 
td
 = 
	`gë_√w_job
(
Ál£
, 
td_∑ª¡
, fÆ£, 
job«me
);

1877 i‡(
ö_globÆ
)

1878 
	`fio_›ti⁄s_∑r£
(
td_∑ª¡
, (**Ë&
o
[
i
], 1);

1880 
	`fio_›ti⁄s_∑r£
(
td
, (**Ë&
o
[
i
], 1);

1881 
i
++;

1884 i‡(
td
)

1885 
	`add_job
(
td
, 
job«me
, 0, 0, 
˛õ¡_ty≥
);

1886 
	}
}

1888 
	$skù_this_£˘i⁄
(c⁄° *
«me
)

1890 
i
;

1892 i‡(!
ƒ_job_£˘i⁄s
)

1894 i‡(!
	`°∫cmp
(
«me
, "global", 6))

1897 
i
 = 0; i < 
ƒ_job_£˘i⁄s
; i++)

1898 i‡(!
	`°rcmp
(
job_£˘i⁄s
[
i
], 
«me
))

1902 
	}
}

1904 
	$is_em±y_‹_commít
(*
löe
)

1906 
i
;

1908 
i
 = 0; i < 
	`°æí
(
löe
); i++) {

1909 i‡(
löe
[
i
] == ';')

1911 i‡(
löe
[
i
] == '#')

1913 i‡(!
	`is•a˚
((Ë
löe
[
i
]Ë&& !
	`is˙ål
(()Üine[i]))

1918 
	}
}

1923 
	$__∑r£_jobs_öi
(
thªad_d©a
 *
td
,

1924 *
fûe
, 
is_buf
, 
°⁄ewÆl_Êag
, 
ty≥
,

1925 
√°ed
, *
«me
, ***
p›ts
, *
a›ts
, *
n›ts
)

1927 
boﬁ
 
globÆ
 = 
Ál£
;

1928 
boﬁ
 
°dö_occupõd
 = 
Ál£
;

1929 *
°rög
;

1930 
FILE
 *
f
;

1931 *
p
;

1932 
ªt
 = 0, 
°⁄ewÆl
;

1933 
fú°_£˘
 = 1;

1934 
skù_fgës
 = 0;

1935 
öside_skù
 = 0;

1936 **
›ts
;

1937 
i
, 
Æloc_›ts
, 
num_›ts
;

1939 
	`d¥öt
(
FD_PARSE
, "P¨sög inòfûê%s\n", 
fûe
);

1940 
	`as£π
(
td
 || !
√°ed
);

1942 i‡(
is_buf
)

1943 
f
 = 
NULL
;

1945 i‡(!
	`°rcmp
(
fûe
, "-")) {

1946 
f
 = 
°dö
;

1947 
°dö_occupõd
 = 
åue
;

1949 
f
 = 
	`f›í
(
fûe
, "r");

1951 i‡(!
f
) {

1952 
__îr
 = 
î∫o
;

1954 
	`log_îr
("fio: u«bÀÅÿ›í '%s' job fûe\n", 
fûe
);

1955 i‡(
td
)

1956 
	`td_vîr‹
(
td
, 
__îr
, "job file open");

1961 
°rög
 = 
	`mÆloc
(
OPT_LEN_MAX
);

1966 i‡(!
√°ed
) {

1967 
«me
 = 
	`mÆloc
(280);

1968 
	`mem£t
(
«me
, 0, 280);

1971 
›ts
 = 
NULL
;

1972 i‡(
√°ed
 && 
p›ts
) {

1973 
›ts
 = *
p›ts
;

1974 
Æloc_›ts
 = *
a›ts
;

1975 
num_›ts
 = *
n›ts
;

1978 i‡(!
›ts
) {

1979 
Æloc_›ts
 = 8;

1980 
›ts
 = 
	`mÆloc
((*Ë* 
Æloc_›ts
);

1981 
num_›ts
 = 0;

1984 
°⁄ewÆl
 = 
°⁄ewÆl_Êag
;

1990 i‡(!
skù_fgës
) {

1991 i‡(
is_buf
)

1992 
p
 = 
	`°r£p
(&
fûe
, "\n");

1994 
p
 = 
	`fgës
(
°rög
, 
OPT_LEN_MAX
, 
f
);

1995 i‡(!
p
)

1999 
skù_fgës
 = 0;

2000 
	`°rù_bœnk_‰⁄t
(&
p
);

2001 
	`°rù_bœnk_íd
(
p
);

2003 
	`d¥öt
(
FD_PARSE
, "%s\n", 
p
);

2004 i‡(
	`is_em±y_‹_commít
(
p
))

2007 i‡(!
√°ed
) {

2008 i‡(
	`ssˇnf
(
p
, "[%255[^\n]]", 
«me
) != 1) {

2009 i‡(
öside_skù
)

2012 
	`log_îr
("fio: option <%s> outside of "

2013 "[] job se˘i⁄\n", 
p
);

2014 
ªt
 = 1;

2018 
«me
[
	`°æí
(name) - 1] = '\0';

2020 i‡(
	`skù_this_£˘i⁄
(
«me
)) {

2021 
öside_skù
 = 1;

2024 
öside_skù
 = 0;

2026 
	`d¥öt
(
FD_PARSE
, "P¨sög se˘i⁄ [%s]\n", 
«me
);

2028 
globÆ
 = !
	`°∫cmp
(
«me
, "global", 6);

2030 i‡(
dump_cmdlöe
) {

2031 i‡(
fú°_£˘
)

2032 
	`log_öfo
("fio ");

2033 i‡(!
globÆ
)

2034 
	`log_öfo
("--«me=%†", 
«me
);

2035 
fú°_£˘
 = 0;

2038 
td
 = 
	`gë_√w_job
(
globÆ
, &
def_thªad
, 
Ál£
, 
«me
);

2039 i‡(!
td
) {

2040 
ªt
 = 1;

2047 i‡(!
globÆ
 && 
°⁄ewÆl
) {

2048 
td
->
o
.
°⁄ewÆl
 = stonewall;

2049 
°⁄ewÆl
 = 0;

2052 
num_›ts
 = 0;

2053 
	`mem£t
(
›ts
, 0, 
Æloc_›ts
 * (*));

2056 
skù_fgës
 = 1;

2059 i‡(!
skù_fgës
) {

2060 i‡(
is_buf
)

2061 
p
 = 
	`°r£p
(&
fûe
, "\n");

2063 
p
 = 
	`fgës
(
°rög
, 
OPT_LEN_MAX
, 
f
);

2064 i‡(!
p
)

2066 
	`d¥öt
(
FD_PARSE
, "%s", 
p
);

2069 
skù_fgës
 = 0;

2071 i‡(
	`is_em±y_‹_commít
(
p
))

2074 
	`°rù_bœnk_‰⁄t
(&
p
);

2080 i‡(
p
[0] == '[') {

2081 i‡(
√°ed
) {

2082 
	`log_îr
("NoÇew sections in included files\n");

2083 
ªt
 = 1;

2084 
out
;

2087 
skù_fgës
 = 1;

2091 
	`°rù_bœnk_íd
(
p
);

2093 i‡(!
	`°∫cmp
(
p
, "ö˛ude", 
	`°æí
("include"))) {

2094 *
fûíame
 = 
p
 + 
	`°æí
("include") + 1,

2095 *
ts
, *
fuŒ_‚
 = 
NULL
;

2101 i‡(
	`ac˚ss
(
fûíame
, 
F_OK
) &&

2102 (
ts
 = 
	`°ºchr
(
fûe
, '/'))) {

2103 i‡(
	`a•rötf
(&
fuŒ_‚
, "%.*s%s",

2104 ()(
ts
 - 
fûe
 + 1), file,

2105 
fûíame
) < 0) {

2106 
ªt
 = 
ENOMEM
;

2109 
fûíame
 = 
fuŒ_‚
;

2112 
ªt
 = 
	`__∑r£_jobs_öi
(
td
, 
fûíame
, 
is_buf
,

2113 
°⁄ewÆl_Êag
, 
ty≥
, 1,

2114 
«me
, &
›ts
,

2115 &
Æloc_›ts
, &
num_›ts
);

2117 i‡(
ªt
) {

2118 
	`log_îr
("Error %d whileÖarsing "

2120 
ªt
, 
fûíame
);

2123 i‡(
fuŒ_‚
)

2124 
	`‰ì
(
fuŒ_‚
);

2126 i‡(
ªt
)

2132 i‡(
num_›ts
 =
Æloc_›ts
) {

2133 
Æloc_›ts
 <<= 1;

2134 
›ts
 = 
	`ªÆloc
(opts,

2135 
Æloc_›ts
 * (*));

2138 
›ts
[
num_›ts
] = 
	`°rdup
(
p
);

2139 
num_›ts
++;

2142 i‡(
√°ed
) {

2143 *
p›ts
 = 
›ts
;

2144 *
a›ts
 = 
Æloc_›ts
;

2145 *
n›ts
 = 
num_›ts
;

2146 
out
;

2149 
ªt
 = 
	`fio_›ti⁄s_∑r£
(
td
, 
›ts
, 
num_›ts
);

2151 i‡(!
ªt
 && 
td
->
o
.
ªad_iﬁog_fûe
 !
NULL
) {

2152 *
‚ame
 = 
	`gë_«me_by_idx
(
td
->
o
.
ªad_iﬁog_fûe
,

2153 
td
->
subjob_numbî
);

2154 i‡(!
	`°rcmp
(
‚ame
, "-")) {

2155 i‡(
°dö_occupõd
) {

2156 
	`log_îr
("fio: only one user (read_iolog_file/job "

2159 
ªt
 = 1;

2161 
°dö_occupõd
 = 
åue
;

2164 i‡(!
ªt
) {

2165 i‡(
dump_cmdlöe
)

2166 
	`dump_›t_li°
(
td
);

2168 
ªt
 = 
	`add_job
(
td
, 
«me
, 0, 0, 
ty≥
);

2170 
	`log_îr
("fio: job %†dr›≥d\n", 
«me
);

2171 
	`put_job
(
td
);

2174 
i
 = 0; i < 
num_›ts
; i++)

2175 
	`‰ì
(
›ts
[
i
]);

2176 
num_›ts
 = 0;

2177 } !
ªt
);

2179 i‡(
dump_cmdlöe
)

2180 
	`log_öfo
("\n");

2182 
i
 = 0;

2183 
i
 < 
ƒ_job_£˘i⁄s
) {

2184 
	`‰ì
(
job_£˘i⁄s
[
i
]);

2185 
i
++;

2188 
	`‰ì
(
job_£˘i⁄s
);

2189 
job_£˘i⁄s
 = 
NULL
;

2190 
ƒ_job_£˘i⁄s
 = 0;

2192 
	`‰ì
(
›ts
);

2193 
out
:

2194 
	`‰ì
(
°rög
);

2195 i‡(!
√°ed
)

2196 
	`‰ì
(
«me
);

2197 i‡(!
is_buf
 && 
f
 !
°dö
)

2198 
	`f˛o£
(
f
);

2199  
ªt
;

2200 
	}
}

2202 
	$∑r£_jobs_öi
(*
fûe
, 
is_buf
, 
°⁄ewÆl_Êag
, 
ty≥
)

2204  
	`__∑r£_jobs_öi
(
NULL
, 
fûe
, 
is_buf
, 
°⁄ewÆl_Êag
, 
ty≥
,

2205 0, 
NULL
, NULL, NULL, NULL);

2206 
	}
}

2208 
	$fûl_def_thªad
()

2210 
	`mem£t
(&
def_thªad
, 0, (def_thread));

2211 
	`INIT_FLIST_HEAD
(&
def_thªad
.
›t_li°
);

2213 
	`fio_gëafföôy
(
	`gëpid
(), &
def_thªad
.
o
.
˝umask
);

2214 
def_thªad
.
o
.
îr‹_dump
 = 1;

2219 
	`fio_fûl_deÁu…_›ti⁄s
(&
def_thªad
);

2221 
	}
}

2223 
	$show_debug_ˇãg‹õs
()

2225 #ifde‡
FIO_INC_DEBUG


2226 c⁄° 
debug_Àvñ
 *
dl
 = &
debug_Àvñs
[0];

2227 
cuæí
, 
fú°
 = 1;

2229 
cuæí
 = 0;

2230 
dl
->
«me
) {

2231 
has_√xt
 = (
dl
 + 1)->
«me
 !
NULL
;

2233 i‡(
fú°
 || 
cuæí
 + 
	`°æí
(
dl
->
«me
) >= 80) {

2234 i‡(!
fú°
) {

2235 
	`¥ötf
("\n");

2236 
cuæí
 = 0;

2238 
cuæí
 +
	`¥ötf
("\t\t\t%s", 
dl
->
«me
);

2239 
cuæí
 += 3 * (8 - 1);

2240 i‡(
has_√xt
)

2241 
cuæí
 +
	`¥ötf
(",");

2243 
cuæí
 +
	`¥ötf
("%s", 
dl
->
«me
);

2244 i‡(
has_√xt
)

2245 
cuæí
 +
	`¥ötf
(",");

2247 
dl
++;

2248 
fú°
 = 0;

2250 
	`¥ötf
("\n");

2252 
	}
}

2259 
	$ußge
(c⁄° *
«me
)

2261 
	`¥ötf
("%s\n", 
fio_vîsi⁄_°rög
);

2262 
	`¥ötf
("%†[›ti⁄s] [job o±i⁄s] <job fûe(s)>\n", 
«me
);

2263 
	`¥ötf
(" --debug=options\tEnable debugÜogging. May be one/more of:\n");

2264 
	`show_debug_ˇãg‹õs
();

2265 
	`¥ötf
(" --parse-only\t\tParse options only, don't startány IO\n");

2266 
	`¥ötf
(" --merge-blktrace-only\tMerge blktraces only, don't startány IO\n");

2267 
	`¥ötf
(" --output\t\tWrite outputÅo file\n");

2268 
	`¥ötf
(" --bandwidth-log\tGenerateággregate bandwidthÜogs\n");

2269 
	`¥ötf
(" --minimal\t\tMinimal (terse) output\n");

2270 
	`¥ötf
(" --output-format=type\tOutput format (terse,json,json+,normal)\n");

2271 
	`¥ötf
(" --terse-version=type\tSetÅerse version output format"

2273 
	`¥ötf
(" --version\t\tPrint version infoándÉxit\n");

2274 
	`¥ötf
(" --help\t\tPrintÅhisÖage\n");

2275 
	`¥ötf
(" --cpuclock-test\tPerformÅest/validation of CPU clock\n");

2276 
	`¥ötf
(" --crctest=[type]\tTest speed of checksum functions\n");

2277 
	`¥ötf
(" --cmdhelp=cmd\t\tPrint command help, \"all\" foráll of"

2279 
	`¥ötf
(" --enghelp=engine\tPrint ioengine help, orÜist"

2281 
	`¥ötf
(" --enghelp=engine,cmd\tPrint help forán ioengine"

2283 
	`¥ötf
(" --showcmd\t\tTurná job file into commandÜine options\n");

2284 
	`¥ötf
(" --eta=when\t\tWhen ETAÉstimate should beÖrinted\n");

2285 
	`¥ötf
(" \t\tMay be \"always\", \"never\" or \"auto\"\n");

2286 
	`¥ötf
(" --eta-newline=t\tForceáÇewÜine forÉvery 't'");

2287 
	`¥ötf
("ÖeriodÖassed\n");

2288 
	`¥ötf
(" --status-interval=t\tForce full status dumpÉvery");

2289 
	`¥ötf
(" 't'ÖeriodÖassed\n");

2290 
	`¥ötf
(" --readonly\t\tTurn on safetyÑead-only checks,Öreventing"

2292 
	`¥ötf
(" --section=name\tOnlyÑun specified section in job file,"

2294 
	`¥ötf
(" --alloc-size=kb\tSet smallocÖoolÅoÅhis size in kb"

2296 
	`¥ötf
(" --warnings-fatal\tFioÖarser warningsáre fatal\n");

2297 
	`¥ötf
(" --max-jobs=nr\t\tMaximumÇumber ofÅhreads/processesÅo support\n");

2298 
	`¥ötf
(" --server=args\t\tStartá backend fio server\n");

2299 
	`¥ötf
(" --daemonize=pidfile\tBackground fio server, writeÖidÅo file\n");

2300 
	`¥ötf
(" --client=hostname\tTalkÅoÑemote backend(s) fio serverát hostname\n");

2301 
	`¥ötf
(" --remote-config=file\tTell fio serverÅoÜoadÅhisÜocal job file\n");

2302 
	`¥ötf
(" --idle-prof=option\tReport cpu idleness oná system orÖercpu basis\n"

2305 #ifde‡
CONFIG_ZLIB


2306 
	`¥ötf
(" --inflate-log=log\tInflateánd output compressedÜog\n");

2308 
	`¥ötf
(" --trigger-file=file\tExecuteÅrigger cmd when fileÉxists\n");

2309 
	`¥ötf
(" --trigger-timeout=t\tExecuteÅriggerátÅhisÅime\n");

2310 
	`¥ötf
(" --trigger=cmd\t\tSetÅhis commandásÜocalÅrigger\n");

2311 
	`¥ötf
(" --trigger-remote=cmd\tSetÅhis commandásÑemoteÅrigger\n");

2312 
	`¥ötf
(" --aux-path=path\tUseÅhisÖath for fio state generated files\n");

2313 
	`¥ötf
("\nFio was written by Jens Axboe <axboe@kernel.dk>\n");

2314 
	}
}

2316 #ifde‡
FIO_INC_DEBUG


2317 c⁄° 
debug_Àvñ
 
	gdebug_Àvñs
[] = {

2318 { .
«me
 = "process",

2319 .
	ghñp
 = "Process creation/exitÜogging",

2320 .
	gshi·
 = 
FD_PROCESS
,

2322 { .
	g«me
 = "file",

2323 .
	ghñp
 = "FileÑelatedáctionÜogging",

2324 .
	gshi·
 = 
FD_FILE
,

2326 { .
	g«me
 = "io",

2327 .
	ghñp
 = "IOánd IOÉngineáctionÜogging (offsets, queue, completions,Étc)",

2328 .
	gshi·
 = 
FD_IO
,

2330 { .
	g«me
 = "mem",

2331 .
	ghñp
 = "Memoryállocation/freeingÜogging",

2332 .
	gshi·
 = 
FD_MEM
,

2334 { .
	g«me
 = "blktrace",

2335 .
	ghñp
 = "blktraceáctionÜogging",

2336 .
	gshi·
 = 
FD_BLKTRACE
,

2338 { .
	g«me
 = "verify",

2339 .
	ghñp
 = "IO verificationáctionÜogging",

2340 .
	gshi·
 = 
FD_VERIFY
,

2342 { .
	g«me
 = "random",

2343 .
	ghñp
 = "Random generationÜogging",

2344 .
	gshi·
 = 
FD_RANDOM
,

2346 { .
	g«me
 = "parse",

2347 .
	ghñp
 = "ParserÜogging",

2348 .
	gshi·
 = 
FD_PARSE
,

2350 { .
	g«me
 = "diskutil",

2351 .
	ghñp
 = "Disk utilityÜoggingáctions",

2352 .
	gshi·
 = 
FD_DISKUTIL
,

2354 { .
	g«me
 = "job",

2355 .
	ghñp
 = "LoggingÑelatedÅo creating/destroying jobs",

2356 .
	gshi·
 = 
FD_JOB
,

2358 { .
	g«me
 = "mutex",

2359 .
	ghñp
 = "MutexÜogging",

2360 .
	gshi·
 = 
FD_MUTEX


2362 { .
	g«me
 = "profile",

2363 .
	ghñp
 = "LoggingÑelatedÅoÖrofiles",

2364 .
	gshi·
 = 
FD_PROFILE
,

2366 { .
	g«me
 = "time",

2367 .
	ghñp
 = "LoggingÑelatedÅoÅime keeping functions",

2368 .
	gshi·
 = 
FD_TIME
,

2370 { .
	g«me
 = "net",

2371 .
	ghñp
 = "NetworkÜogging",

2372 .
	gshi·
 = 
FD_NET
,

2374 { .
	g«me
 = "rate",

2375 .
	ghñp
 = "RateÜogging",

2376 .
	gshi·
 = 
FD_RATE
,

2378 { .
	g«me
 = "compress",

2379 .
	ghñp
 = "Log compressionÜogging",

2380 .
	gshi·
 = 
FD_COMPRESS
,

2382 { .
	g«me
 = "steadystate",

2383 .
	ghñp
 = "Steady state detectionÜogging",

2384 .
	gshi·
 = 
FD_STEADYSTATE
,

2386 { .
	g«me
 = "helperthread",

2387 .
	ghñp
 = "HelperÅhreadÜogging",

2388 .
	gshi·
 = 
FD_HELPERTHREAD
,

2390 { .
	g«me
 = "zbd",

2391 .
	ghñp
 = "Zoned Block DeviceÜogging",

2392 .
	gshi·
 = 
FD_ZBD
,

2394 { .
	g«me
 = 
NULL
, },

2397 
	$£t_debug
(c⁄° *
°rög
)

2399 c⁄° 
debug_Àvñ
 *
dl
;

2400 *
p
 = (*Ë
°rög
;

2401 *
›t
;

2402 
i
;

2404 i‡(!
°rög
)

2407 i‡(!
	`°rcmp
(
°rög
, "?") || !strcmp(string, "help")) {

2408 
	`log_öfo
("fio: dumping debug options:");

2409 
i
 = 0; 
debug_Àvñs
[i].
«me
; i++) {

2410 
dl
 = &
debug_Àvñs
[
i
];

2411 
	`log_öfo
("%s,", 
dl
->
«me
);

2413 
	`log_öfo
("all\n");

2417 (
›t
 = 
	`°r£p
(&
p
, ",")Ë!
NULL
) {

2418 
found
 = 0;

2420 i‡(!
	`°∫cmp
(
›t
, "all", 3)) {

2421 
	`log_öfo
("fio: setáll debug options\n");

2422 
fio_debug
 = ~0UL;

2426 
i
 = 0; 
debug_Àvñs
[i].
«me
; i++) {

2427 
dl
 = &
debug_Àvñs
[
i
];

2428 
found
 = !
	`°∫cmp
(
›t
, 
dl
->
«me
, 
	`°æí
(dl->name));

2429 i‡(!
found
)

2432 i‡(
dl
->
shi·
 =
FD_JOB
) {

2433 
›t
 = 
	`°rchr
(opt, ':');

2434 i‡(!
›t
) {

2435 
	`log_îr
("fio: missing jobÇumber\n");

2438 
›t
++;

2439 
fio_debug_jobno
 = 
	`©oi
(
›t
);

2440 
	`log_öfo
("fio: set debug jobno %d\n",

2441 
fio_debug_jobno
);

2443 
	`log_öfo
("fio: së debug o±i⁄ %s\n", 
›t
);

2444 
fio_debug
 |(1UL << 
dl
->
shi·
);

2449 i‡(!
found
)

2450 
	`log_îr
("fio: debug mask %†nŸ found\n", 
›t
);

2453 
	}
}

2455 
	$£t_debug
(c⁄° *
°rög
)

2457 
	`log_îr
("fio: debugÅracingÇot included in build\n");

2459 
	}
}

2462 
	$fio_›ti⁄s_fûl_›t°rög
()

2464 *
o°r
 = 
cmd_›t°r
;

2465 
i
, 
c
;

2467 
c
 = 
i
 = 0;

2468 
l_›ts
[
i
].
«me
) {

2469 
o°r
[
c
++] = 
l_›ts
[
i
].
vÆ
;

2470 i‡(
l_›ts
[
i
].
has_¨g
 =
ªquúed_¨gumít
)

2471 
o°r
[
c
++] = ':';

2472 i‡(
l_›ts
[
i
].
has_¨g
 =
›ti⁄Æ_¨gumít
) {

2473 
o°r
[
c
++] = ':';

2474 
o°r
[
c
++] = ':';

2476 
i
++;

2478 
o°r
[
c
] = '\0';

2479 
	}
}

2481 
	$˛õ¡_Êag_£t
(
c
)

2483 
i
;

2485 
i
 = 0;

2486 
l_›ts
[
i
].
«me
) {

2487 
vÆ
 = 
l_›ts
[
i
].val;

2489 i‡(
c
 =(
vÆ
 & 0xff))

2490  (
vÆ
 & 
FIO_CLIENT_FLAG
);

2492 
i
++;

2496 
	}
}

2498 
	$∑r£_cmd_˛õ¡
(*
˛õ¡
, *
›t
)

2500 
	`fio_˛õ¡_add_cmd_›ti⁄
(
˛õ¡
, 
›t
);

2501 
	}
}

2503 
	$show_˛o£°_›ti⁄
(c⁄° *
«me
)

2505 
be°_›ti⁄
, 
be°_di°™˚
;

2506 
i
, 
di°™˚
;

2508 *
«me
 == '-')

2509 
«me
++;

2511 
be°_›ti⁄
 = -1;

2512 
be°_di°™˚
 = 
INT_MAX
;

2513 
i
 = 0;

2514 
l_›ts
[
i
].
«me
) {

2515 
di°™˚
 = 
	`°rög_di°™˚
(
«me
, 
l_›ts
[
i
].name);

2516 i‡(
di°™˚
 < 
be°_di°™˚
) {

2517 
be°_di°™˚
 = 
di°™˚
;

2518 
be°_›ti⁄
 = 
i
;

2520 
i
++;

2523 i‡(
be°_›ti⁄
 !-1 && 
	`°rög_di°™˚_ok
(
«me
, 
be°_di°™˚
))

2524 
	`log_îr
("Did you mó¿%s?\n", 
l_›ts
[
be°_›ti⁄
].
«me
);

2525 
	}
}

2527 
	$∑r£_ouçut_f‹m©
(c⁄° *
›èrg
)

2529 *
p
, *
‹ig
, *
›t
;

2530 
ªt
 = 0;

2532 
p
 = 
‹ig
 = 
	`°rdup
(
›èrg
);

2534 
ouçut_f‹m©
 = 0;

2536 (
›t
 = 
	`°r£p
(&
p
, ",")Ë!
NULL
) {

2537 i‡(!
	`°rcmp
(
›t
, "minimal") ||

2538 !
	`°rcmp
(
›t
, "terse") ||

2539 !
	`°rcmp
(
›t
, "csv"))

2540 
ouçut_f‹m©
 |
FIO_OUTPUT_TERSE
;

2541 i‡(!
	`°rcmp
(
›t
, "json"))

2542 
ouçut_f‹m©
 |
FIO_OUTPUT_JSON
;

2543 i‡(!
	`°rcmp
(
›t
, "json+"))

2544 
ouçut_f‹m©
 |(
FIO_OUTPUT_JSON
 | 
FIO_OUTPUT_JSON_PLUS
);

2545 i‡(!
	`°rcmp
(
›t
, "normal"))

2546 
ouçut_f‹m©
 |
FIO_OUTPUT_NORMAL
;

2548 
	`log_îr
("fio: invÆid ouçuàf‹m© %s\n", 
›t
);

2549 
ªt
 = 1;

2554 
	`‰ì
(
‹ig
);

2555  
ªt
;

2556 
	}
}

2558 
	$∑r£_cmd_löe
(
¨gc
, *
¨gv
[], 
˛õ¡_ty≥
)

2560 
thªad_d©a
 *
td
 = 
NULL
;

2561 
c
, 
öi_idx
 = 0, 
lidx
, 
ªt
 = 0, 
do_exô
 = 0, 
exô_vÆ
 = 0;

2562 *
o°r
 = 
cmd_›t°r
;

2563 *
pid_fûe
 = 
NULL
;

2564 *
cur_˛õ¡
 = 
NULL
;

2565 
boﬁ
 
backíd
 = 
Ál£
;

2571 
›töd
 = 1;

2573 (
c
 = 
	`gë›t_l⁄g_⁄ly
(
¨gc
, 
¨gv
, 
o°r
, 
l_›ts
, &
lidx
)) != -1) {

2574 i‡((
c
 & 
FIO_CLIENT_FLAG
Ë|| 
	`˛õ¡_Êag_£t
(c)) {

2575 
	`∑r£_cmd_˛õ¡
(
cur_˛õ¡
, 
¨gv
[
›töd
 - 1]);

2576 
c
 &~
FIO_CLIENT_FLAG
;

2579 
c
) {

2581 
smÆloc_poﬁ_size
 = 
	`©oi
(
›èrg
);

2582 
smÆloc_poﬁ_size
 <<= 10;

2583 
	`söô
();

2586 
	`log_îr
("fio: --latency-log is deprecated. UseÖer-jobÜatencyÜog options.\n");

2587 
do_exô
++;

2588 
exô_vÆ
 = 1;

2591 
wrôe_bw_log
 = 
åue
;

2594 
FILE
 *
tmp
;

2596 i‡(
f_out
 && f_ouà!
°dout
)

2597 
	`f˛o£
(
f_out
);

2599 
tmp
 = 
	`f›í
(
›èrg
, "w+");

2600 i‡(!
tmp
) {

2601 
	`log_îr
("fio: ouçuàfûê›íÉº‹: %s\n", 
	`°ªº‹
(
î∫o
));

2602 
exô_vÆ
 = 1;

2603 
do_exô
++;

2606 
f_îr
 = 
f_out
 = 
tmp
;

2610 
ouçut_f‹m©
 = 
FIO_OUTPUT_TERSE
;

2613 i‡(
	`∑r£_ouçut_f‹m©
(
›èrg
)) {

2614 
	`log_îr
("fio: failedÖarsing output-format\n");

2615 
exô_vÆ
 = 1;

2616 
do_exô
++;

2621 
ouçut_f‹m©
 |
FIO_OUTPUT_TERSE
;

2624 
did_¨g
 = 
åue
;

2625 i‡(!
cur_˛õ¡
) {

2626 
	`ußge
(
¨gv
[0]);

2627 
do_exô
++;

2631 
did_¨g
 = 
åue
;

2632 i‡(!
cur_˛õ¡
) {

2633 
	`fio_show_›ti⁄_hñp
(
›èrg
);

2634 
do_exô
++;

2638 
did_¨g
 = 
åue
;

2639 i‡(!
cur_˛õ¡
) {

2640 
exô_vÆ
 = 
	`fio_show_i€ngöe_hñp
(
›èrg
);

2641 
do_exô
++;

2645 
did_¨g
 = 
åue
;

2646 
dump_cmdlöe
 = 
åue
;

2649 
ªad_⁄ly
 = 1;

2652 
did_¨g
 = 
åue
;

2653 i‡(!
cur_˛õ¡
) {

2654 
	`log_öfo
("%s\n", 
fio_vîsi⁄_°rög
);

2655 
do_exô
++;

2659 
ãr£_vîsi⁄
 = 
	`©oi
(
›èrg
);

2660 i‡(!(
ãr£_vîsi⁄
 >= 2 &&Åerse_version <= 5)) {

2661 
	`log_îr
("fio: badÅerse version format\n");

2662 
exô_vÆ
 = 1;

2663 
do_exô
++;

2667 i‡(!
	`°rcmp
("Æways", 
›èrg
))

2668 
ëa_¥öt
 = 
FIO_ETA_ALWAYS
;

2669 i‡(!
	`°rcmp
("√vî", 
›èrg
))

2670 
ëa_¥öt
 = 
FIO_ETA_NEVER
;

2673 
t
 = 0;

2675 i‡(
	`check_°r_time
(
›èrg
, &
t
, 1)) {

2676 
	`log_îr
("fio: faûedÖ¨sögÉèÅimê%s\n", 
›èrg
);

2677 
exô_vÆ
 = 1;

2678 
do_exô
++;

2681 
ëa_√w_löe
 = 
t
 / 1000;

2682 i‡(!
ëa_√w_löe
) {

2683 
	`log_îr
("fio:ÉtaÇewÜineÅimeÅoo short\n");

2684 
exô_vÆ
 = 1;

2685 
do_exô
++;

2690 
t
 = 0;

2692 i‡(
	`check_°r_time
(
›èrg
, &
t
, 1)) {

2693 
	`log_îr
("fio: faûedÖ¨sögÉè i¡îvÆ %s\n", 
›èrg
);

2694 
exô_vÆ
 = 1;

2695 
do_exô
++;

2698 
ëa_öãrvÆ_m£c
 = 
t
 / 1000;

2699 i‡(
ëa_öãrvÆ_m£c
 < 
DISK_UTIL_MSEC
) {

2700 
	`log_îr
("fio:Éè i¡îvÆÅimêtoÿsh‹à(%um£¯mö)\n", 
DISK_UTIL_MSEC
);

2701 
exô_vÆ
 = 1;

2702 
do_exô
++;

2707 i‡(
	`£t_debug
(
›èrg
))

2708 
do_exô
++;

2711 
did_¨g
 = 
åue
;

2712 
∑r£_⁄ly
 = 
åue
;

2715 
size_t
 
√w_size
;

2717 i‡(!
	`°rcmp
(
›èrg
, "global")) {

2718 
	`log_îr
("fio: can't use globalás only "

2720 
do_exô
++;

2721 
exô_vÆ
 = 1;

2724 
√w_size
 = (
ƒ_job_£˘i⁄s
 + 1) * (*);

2725 
job_£˘i⁄s
 = 
	`ªÆloc
(job_£˘i⁄s, 
√w_size
);

2726 
job_£˘i⁄s
[
ƒ_job_£˘i⁄s
] = 
	`°rdup
(
›èrg
);

2727 
ƒ_job_£˘i⁄s
++;

2730 #ifde‡
CONFIG_ZLIB


2732 
exô_vÆ
 = 
	`iﬁog_fûe_öÊ©e
(
›èrg
);

2733 
did_¨g
 = 
åue
;

2734 
do_exô
++;

2738 
did_¨g
 = 
åue
;

2739 i‡(
exec_¥ofûe
)

2740 
	`‰ì
(
exec_¥ofûe
);

2741 
exec_¥ofûe
 = 
	`°rdup
(
›èrg
);

2743 
FIO_GETOPT_JOB
: {

2744 c⁄° *
›t
 = 
l_›ts
[
lidx
].
«me
;

2745 *
vÆ
 = 
›èrg
;

2747 i‡(!
	`°∫cmp
(
›t
, "«me", 4Ë&& 
td
) {

2748 
ªt
 = 
	`add_job
(
td
,Åd->
o
.
«me
 ?: "fio", 0, 0, 
˛õ¡_ty≥
);

2749 i‡(
ªt
)

2750 
out_‰ì
;

2751 
td
 = 
NULL
;

2752 
did_¨g
 = 
åue
;

2754 i‡(!
td
) {

2755 
is_£˘i⁄
 = !
	`°∫cmp
(
›t
, "name", 4);

2756 
globÆ
 = 0;

2758 i‡(!
is_£˘i⁄
 || !
	`°∫cmp
(
vÆ
, "global", 6))

2759 
globÆ
 = 1;

2761 i‡(
is_£˘i⁄
 && 
	`skù_this_£˘i⁄
(
vÆ
))

2764 
td
 = 
	`gë_√w_job
(
globÆ
, &
def_thªad
, 
åue
, 
NULL
);

2765 i‡(!
td
 || 
	`i€ngöe_lﬂd
(td)) {

2766 i‡(
td
) {

2767 
	`put_job
(
td
);

2768 
td
 = 
NULL
;

2770 
do_exô
++;

2771 
exô_vÆ
 = 1;

2774 
	`fio_›ti⁄s_£t_i€ngöe_›ts
(
l_›ts
, 
td
);

2777 i‡((!
vÆ
 || !
	`°æí
(val)) &&

2778 
l_›ts
[
lidx
].
has_¨g
 =
ªquúed_¨gumít
) {

2779 
	`log_îr
("fio: o±i⁄ %†ªquúe†™árgumít\n", 
›t
);

2780 
ªt
 = 1;

2782 
ªt
 = 
	`fio_cmd_›ti⁄_∑r£
(
td
, 
›t
, 
vÆ
);

2784 i‡(
ªt
) {

2785 i‡(
td
) {

2786 
	`put_job
(
td
);

2787 
td
 = 
NULL
;

2789 
do_exô
++;

2790 
exô_vÆ
 = 1;

2793 i‡(!
ªt
 && !
	`°rcmp
(
›t
, "ioengine")) {

2794 i‡(
	`i€ngöe_lﬂd
(
td
)) {

2795 
	`put_job
(
td
);

2796 
td
 = 
NULL
;

2797 
do_exô
++;

2798 
exô_vÆ
 = 1;

2801 
	`fio_›ti⁄s_£t_i€ngöe_›ts
(
l_›ts
, 
td
);

2805 
FIO_GETOPT_IOENGINE
: {

2806 c⁄° *
›t
 = 
l_›ts
[
lidx
].
«me
;

2807 *
vÆ
 = 
›èrg
;

2809 i‡(!
td
)

2812 
ªt
 = 
	`fio_cmd_i€ngöe_›ti⁄_∑r£
(
td
, 
›t
, 
vÆ
);

2814 i‡(
ªt
) {

2815 i‡(
td
) {

2816 
	`put_job
(
td
);

2817 
td
 = 
NULL
;

2819 
do_exô
++;

2820 
exô_vÆ
 = 1;

2825 
w¨nögs_Áèl
 = 1;

2831 
did_¨g
 = 
åue
;

2832 #i‚de‡
CONFIG_NO_SHM


2833 i‡(
ƒ_˛õ¡s
) {

2834 
	`log_îr
("fio: can't be both clientánd server\n");

2835 
do_exô
++;

2836 
exô_vÆ
 = 1;

2839 i‡(
›èrg
)

2840 
	`fio_£rvî_£t_¨g
(
›èrg
);

2841 
is_backíd
 = 
åue
;

2842 
backíd
 = 
åue
;

2844 
	`log_îr
("fio: client/serverÑequires SHM support\n");

2845 
do_exô
++;

2846 
exô_vÆ
 = 1;

2849 #ifde‡
WIN32


2851 
did_¨g
 = 
åue
;

2852 
	`fio_£rvî_öã∫Æ_£t
(
›èrg
);

2856 i‡(
pid_fûe
)

2857 
	`‰ì
(
pid_fûe
);

2858 
pid_fûe
 = 
	`°rdup
(
›èrg
);

2861 i‡((
ªt
 = 
	`fio_idÀ_¥of_∑r£_›t
(
›èrg
))) {

2863 
did_¨g
 = 
åue
;

2864 
do_exô
++;

2865 i‡(
ªt
 == -1)

2866 
exô_vÆ
 = 1;

2870 
did_¨g
 = 
åue
;

2871 i‡(
is_backíd
) {

2872 
	`log_îr
("fio: can't be both clientánd server\n");

2873 
do_exô
++;

2874 
exô_vÆ
 = 1;

2878 i‡(0 =
	`ac˚ss
(
›èrg
, 
R_OK
)) {

2880 
ho°addr
[
PATH_MAX
] = {0};

2881 
f‹m©°r
[8];

2882 
FILE
 * 
ho°f
 = 
	`f›í
(
›èrg
, "r");

2883 i‡(!
ho°f
) {

2884 
	`log_îr
("fio: couldÇŸ o≥¿˛õ¡Üi° fûê%†f‹Ñód\n", 
›èrg
);

2885 
do_exô
++;

2886 
exô_vÆ
 = 1;

2889 
	`•rötf
(
f‹m©°r
, "%%%ds", 
PATH_MAX
 - 1);

2894 
	`fsˇnf
(
ho°f
, 
f‹m©°r
, 
ho°addr
) == 1) {

2896 i‡(
	`fio_˛õ¡_add
(&
fio_˛õ¡_›s
, 
ho°addr
, &
cur_˛õ¡
)) {

2897 
	`log_îr
("fio: faûedáddög clõ¡ %†‰om fûê%s\n", 
ho°addr
, 
›èrg
);

2898 
do_exô
++;

2899 
exô_vÆ
 = 1;

2903 
	`f˛o£
(
ho°f
);

2906 i‡(
	`fio_˛õ¡_add
(&
fio_˛õ¡_›s
, 
›èrg
, &
cur_˛õ¡
)) {

2907 
	`log_îr
("fio: faûedáddög clõ¡ %s\n", 
›èrg
);

2908 
do_exô
++;

2909 
exô_vÆ
 = 1;

2916 
›töd
 < 
¨gc
) {

2917 i‡(!
	`°∫cmp
(
¨gv
[
›töd
], "--", 2) ||

2918 !
	`°∫cmp
(
¨gv
[
›töd
], "-", 1))

2921 i‡(
	`fio_˛õ¡_add_öi_fûe
(
cur_˛õ¡
, 
¨gv
[
›töd
], 
Ál£
))

2923 
›töd
++;

2927 
did_¨g
 = 
åue
;

2928 i‡(
	`fio_˛õ¡_add_öi_fûe
(
cur_˛õ¡
, 
›èrg
, 
åue
)) {

2929 
do_exô
++;

2930 
exô_vÆ
 = 1;

2934 
did_¨g
 = 
åue
;

2935 
do_exô
++;

2936 
exô_vÆ
 = 
	`fio_m⁄Ÿ⁄ic_˛ockã°
(1);

2939 
did_¨g
 = 
åue
;

2940 
do_exô
++;

2941 
exô_vÆ
 = 
	`fio_¸˘e°
(
›èrg
);

2944 
did_¨g
 = 
åue
;

2945 
do_exô
++;

2946 
exô_vÆ
 = 
	`fio_mem˝y_ã°
(
›èrg
);

2949 
vÆ
;

2951 i‡(
	`check_°r_time
(
›èrg
, &
vÆ
, 1)) {

2952 
	`log_îr
("fio: faûedÖ¨sögÅimê%s\n", 
›èrg
);

2953 
do_exô
++;

2954 
exô_vÆ
 = 1;

2957 i‡(
vÆ
 < 1000) {

2958 
	`log_îr
("fio: status intervalÅoo small\n");

2959 
do_exô
++;

2960 
exô_vÆ
 = 1;

2962 
°©us_öãrvÆ
 = 
vÆ
 / 1000;

2966 i‡(
åiggî_fûe
)

2967 
	`‰ì
(
åiggî_fûe
);

2968 
åiggî_fûe
 = 
	`°rdup
(
›èrg
);

2971 i‡(
åiggî_cmd
)

2972 
	`‰ì
(
åiggî_cmd
);

2973 
åiggî_cmd
 = 
	`°rdup
(
›èrg
);

2976 i‡(
åiggî_ªmŸe_cmd
)

2977 
	`‰ì
(
åiggî_ªmŸe_cmd
);

2978 
åiggî_ªmŸe_cmd
 = 
	`°rdup
(
›èrg
);

2981 i‡(
aux_∑th
)

2982 
	`‰ì
(
aux_∑th
);

2983 
aux_∑th
 = 
	`°rdup
(
›èrg
);

2986 i‡(
	`check_°r_time
(
›èrg
, &
åiggî_timeout
, 1)) {

2987 
	`log_îr
("fio: faûedÖ¨sögÅimê%s\n", 
›èrg
);

2988 
do_exô
++;

2989 
exô_vÆ
 = 1;

2991 
åiggî_timeout
 /= 1000000;

2995 
did_¨g
 = 
åue
;

2996 
mîge_blkåa˚_⁄ly
 = 
åue
;

2999 
	`log_îr
("%s: uƒecognized o±i⁄ '%s'\n", 
¨gv
[0],

3000 
¨gv
[
›töd
 - 1]);

3001 
	`show_˛o£°_›ti⁄
(
¨gv
[
›töd
 - 1]);

3002 
fio_ÁŒthrough
;

3004 
do_exô
++;

3005 
exô_vÆ
 = 1;

3008 i‡(
do_exô
)

3012 i‡(
do_exô
 && !(
is_backíd
 || 
ƒ_˛õ¡s
))

3013 
	`exô
(
exô_vÆ
);

3015 i‡(
ƒ_˛õ¡s
 && 
	`fio_˛õ¡s_c⁄√˘
())

3016 
	`exô
(1);

3018 i‡(
is_backíd
 && 
backíd
)

3019  
	`fio_°¨t_£rvî
(
pid_fûe
);

3020 i‡(
pid_fûe
)

3021 
	`‰ì
(
pid_fûe
);

3023 i‡(
td
) {

3024 i‡(!
ªt
) {

3025 
ªt
 = 
	`add_job
(
td
,Åd->
o
.
«me
 ?: "fio", 0, 0, 
˛õ¡_ty≥
);

3026 i‡(
ªt
)

3027 
	`exô
(1);

3031 !
ªt
 && 
›töd
 < 
¨gc
) {

3032 
öi_idx
++;

3033 
öi_fûe
 = 
	`ªÆloc
(öi_fûe, 
öi_idx
 * (*));

3034 
öi_fûe
[
öi_idx
 - 1] = 
	`°rdup
(
¨gv
[
›töd
]);

3035 
›töd
++;

3038 
out_‰ì
:

3039  
öi_idx
;

3040 
	}
}

3042 
	$fio_öô_›ti⁄s
()

3044 
f_out
 = 
°dout
;

3045 
f_îr
 = 
°dîr
;

3047 
	`fio_›ti⁄s_fûl_›t°rög
();

3048 
	`fio_›ti⁄s_dup_™d_öô
(
l_›ts
);

3050 
	`©exô
(
‰ì_shm
);

3052 i‡(
	`fûl_def_thªad
())

3056 
	}
}

3058 
fio_check_›ti⁄s
(
thªad_›ti⁄s
 *);

3060 
	$∑r£_›ti⁄s
(
¨gc
, *
¨gv
[])

3062 c⁄° 
ty≥
 = 
FIO_CLIENT_TYPE_CLI
;

3063 
job_fûes
, 
i
;

3065 i‡(
	`fio_öô_›ti⁄s
())

3067 i‡(
	`fio_ã°_cc⁄v
(&
def_thªad
.
o
))

3068 
	`log_îr
("fio: failed internal cconvÅest\n");

3070 
job_fûes
 = 
	`∑r£_cmd_löe
(
¨gc
, 
¨gv
, 
ty≥
);

3072 i‡(
job_fûes
 > 0) {

3073 
i
 = 0; i < 
job_fûes
; i++) {

3074 i‡(
i
 && 
	`fûl_def_thªad
())

3076 i‡(
ƒ_˛õ¡s
) {

3077 i‡(
	`fio_˛õ¡s_£nd_öi
(
öi_fûe
[
i
]))

3079 
	`‰ì
(
öi_fûe
[
i
]);

3080 } i‡(!
is_backíd
) {

3081 i‡(
	`∑r£_jobs_öi
(
öi_fûe
[
i
], 0, i, 
ty≥
))

3083 
	`‰ì
(
öi_fûe
[
i
]);

3086 } i‡(
ƒ_˛õ¡s
) {

3087 i‡(
	`fûl_def_thªad
())

3089 i‡(
	`fio_˛õ¡s_£nd_öi
(
NULL
))

3093 
	`‰ì
(
öi_fûe
);

3094 
	`fio_›ti⁄s_‰ì
(&
def_thªad
);

3095 
	`fûe£tup_mem_‰ì
();

3097 i‡(!
thªad_numbî
) {

3098 i‡(
	`∑r£_dryrun
())

3100 i‡(
exec_¥ofûe
)

3102 i‡(
is_backíd
 || 
ƒ_˛õ¡s
)

3104 i‡(
did_¨g
)

3107 
	`log_îr
("No job(s) defined\n\n");

3108 
	`ußge
(
¨gv
[0]);

3112 i‡(
ouçut_f‹m©
 & 
FIO_OUTPUT_NORMAL
)

3113 
	`log_öfo
("%s\n", 
fio_vîsi⁄_°rög
);

3116 
	}
}

3118 
	$›ti⁄s_deÁu…_fûl
(
thªad_›ti⁄s
 *
o
)

3120 
	`mem˝y
(
o
, &
def_thªad
.o, (*o));

3121 
	}
}

3123 
thªad_d©a
 *
	$gë_globÆ_›ti⁄s
()

3125  &
def_thªad
;

3126 
	}
}

	@io_ddir.h

1 #i‚de‡
FIO_DDIR_H


2 
	#FIO_DDIR_H


	)

4 
	efio_ddú
 {

5 
	mDDIR_READ
 = 0,

6 
	mDDIR_WRITE
 = 1,

7 
	mDDIR_TRIM
 = 2,

8 
	mDDIR_SYNC
 = 3,

9 
	mDDIR_DATASYNC
,

10 
	mDDIR_SYNC_FILE_RANGE
,

11 
	mDDIR_WAIT
,

12 
	mDDIR_LAST
,

13 
	mDDIR_INVAL
 = -1,

15 
	mDDIR_RWDIR_CNT
 = 3,

16 
	mDDIR_RWDIR_SYNC_CNT
 = 4,

19 
	#f‹_óch_rw_ddú
(
ddú
Ë
fio_ddú
 ddú = 0; ddú < 
DDIR_RWDIR_CNT
; ddú++)

	)

21 
ölöe
 c⁄° *
	$io_ddú_«me
(
fio_ddú
 
ddú
)

23 c⁄° *
«me
[] = { "read", "write", "trim", "sync",

27 i‡(
ddú
 >0 && ddú < 
DDIR_LAST
)

28  
«me
[
ddú
];

31 
	}
}

33 
	etd_ddú
 {

34 
	mTD_DDIR_READ
 = 1 << 0,

35 
	mTD_DDIR_WRITE
 = 1 << 1,

36 
	mTD_DDIR_RAND
 = 1 << 2,

37 
	mTD_DDIR_TRIM
 = 1 << 3,

38 
	mTD_DDIR_RW
 = 
TD_DDIR_READ
 | 
TD_DDIR_WRITE
,

39 
	mTD_DDIR_RANDREAD
 = 
TD_DDIR_READ
 | 
TD_DDIR_RAND
,

40 
	mTD_DDIR_RANDWRITE
 = 
TD_DDIR_WRITE
 | 
TD_DDIR_RAND
,

41 
	mTD_DDIR_RANDRW
 = 
TD_DDIR_RW
 | 
TD_DDIR_RAND
,

42 
	mTD_DDIR_RANDTRIM
 = 
TD_DDIR_TRIM
 | 
TD_DDIR_RAND
,

43 
	mTD_DDIR_TRIMWRITE
 = 
TD_DDIR_TRIM
 | 
TD_DDIR_WRITE
,

44 
	mTD_DDIR_RANDTRIMWRITE
 = 
TD_DDIR_RANDTRIM
 | 
TD_DDIR_WRITE
,

47 
	#td_ªad
(
td
Ë(—d)->
o
.
td_ddú
 & 
TD_DDIR_READ
)

	)

48 
	#td_wrôe
(
td
Ë(—d)->
o
.
td_ddú
 & 
TD_DDIR_WRITE
)

	)

49 
	#td_åim
(
td
Ë(—d)->
o
.
td_ddú
 & 
TD_DDIR_TRIM
)

	)

50 
	#td_rw
(
td
Ë((—d)->
o
.
td_ddú
 & 
TD_DDIR_RW
Ë=TD_DDIR_RW)

	)

51 
	#td_øndom
(
td
Ë(—d)->
o
.
td_ddú
 & 
TD_DDIR_RAND
)

	)

52 
	#fûe_øndomm≠
(
td
, 
f
Ë(!—d)->
o
.
n‹™domm≠
 && 
	`fio_fûe_axm≠
((f)))

	)

53 
	#td_åimwrôe
(
td
Ë((—d)->
o
.
td_ddú
 & 
TD_DDIR_TRIMWRITE
) \

54 =
TD_DDIR_TRIMWRITE
)

	)

55 
	#td_øndåimwrôe
(
td
Ë((—d)->
o
.
td_ddú
 & 
TD_DDIR_RANDTRIMWRITE
) \

56 =
TD_DDIR_RANDTRIMWRITE
)

	)

58 
ölöe
 
	$ddú_sync
(
fio_ddú
 
ddú
)

60  
ddú
 =
DDIR_SYNC
 || ddú =
DDIR_DATASYNC
 ||

61 
ddú
 =
DDIR_SYNC_FILE_RANGE
;

62 
	}
}

64 
ölöe
 
	$ddú_rw
(
fio_ddú
 
ddú
)

66  
ddú
 =
DDIR_READ
 || ddú =
DDIR_WRITE
 || ddú =
DDIR_TRIM
;

67 
	}
}

69 
ölöe
 c⁄° *
	$ddú_°r
(
td_ddú
 
ddú
)

71 c⁄° *
__°r
[] = { 
NULL
, "read", "write", "rw", "rand",

73 "åim", 
NULL
, "trimwrite", NULL, "randtrim",

74 
NULL
, "randtrimwrite" };

76  
__°r
[
ddú
];

77 
	}
}

79 
	#ddú_rw_sum
(
¨r
) \

80 ((
¨r
)[
DDIR_READ
] + (¨r)[
DDIR_WRITE
] + (¨r)[
DDIR_TRIM
])

	)

	@io_u.c

1 
	~<uni°d.h
>

2 
	~<°rög.h
>

3 
	~<as£π.h
>

5 
	~"fio.h
"

6 
	~"vîify.h
"

7 
	~"åim.h
"

8 
	~"lib/ønd.h
"

9 
	~"lib/axm≠.h
"

10 
	~"îr.h
"

11 
	~"lib/pow2.h
"

12 
	~"mömax.h
"

13 
	~"zbd.h
"

15 
	sio_com∂ëi⁄_d©a
 {

16 
	mƒ
;

18 
	mîr‹
;

19 
uöt64_t
 
	mbyãs_d⁄e
[
DDIR_RWDIR_CNT
];

20 
time•ec
 
	mtime
;

27 
boﬁ
 
	$øndom_m≠_‰ì
(
fio_fûe
 *
f
, c⁄° 
uöt64_t
 
block
)

29  !
	`axm≠_is£t
(
f
->
io_axm≠
, 
block
);

30 
	}
}

35 
uöt64_t
 
	$m¨k_øndom_m≠
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

36 
uöt64_t
 
off£t
, uöt64_à
buÊí
)

38 
mö_bs
 = 
td
->
o
.mö_bs[
io_u
->
ddú
];

39 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

40 
ƒ_blocks
;

41 
uöt64_t
 
block
;

43 
block
 = (
off£t
 - 
f
->
fûe_off£t
Ë/ (
uöt64_t
Ë
mö_bs
;

44 
ƒ_blocks
 = (
buÊí
 + 
mö_bs
 - 1) / min_bs;

45 
	`as£π
(
ƒ_blocks
 > 0);

47 i‡(!(
io_u
->
Êags
 & 
IO_U_F_BUSY_OK
)) {

48 
ƒ_blocks
 = 
	`axm≠_£t_ƒ
(
f
->
io_axm≠
, 
block
,Çr_blocks);

49 
	`as£π
(
ƒ_blocks
 > 0);

52 i‡((
ƒ_blocks
 * 
mö_bs
Ë< 
buÊí
)

53 
buÊí
 = 
ƒ_blocks
 * 
mö_bs
;

55  
buÊí
;

56 
	}
}

58 
uöt64_t
 
	$œ°_block
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

59 
fio_ddú
 
ddú
)

61 
uöt64_t
 
max_blocks
;

62 
uöt64_t
 
max_size
;

64 
	`as£π
(
	`ddú_rw
(
ddú
));

70 
max_size
 = 
f
->
io_size
;

71 i‡(
max_size
 > 
f
->
ªÆ_fûe_size
)

72 
max_size
 = 
f
->
ªÆ_fûe_size
;

74 i‡(
td
->
o
.
z⁄e_mode
 =
ZONE_MODE_STRIDED
 &&Åd->o.
z⁄e_ønge
)

75 
max_size
 = 
td
->
o
.
z⁄e_ønge
;

77 i‡(
td
->
o
.
mö_bs
[
ddú
] >Åd->o.
ba
[ddir])

78 
max_size
 -
td
->
o
.
mö_bs
[
ddú
] -Åd->o.
ba
[ddir];

80 
max_blocks
 = 
max_size
 / (
uöt64_t
Ë
td
->
o
.
ba
[
ddú
];

81 i‡(!
max_blocks
)

84  
max_blocks
;

85 
	}
}

87 
	$__gë_√xt_ønd_off£t
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

88 
fio_ddú
 
ddú
, 
uöt64_t
 *
b
,

89 
uöt64_t
 
œ°b
)

91 
uöt64_t
 
r
;

93 i‡(
td
->
o
.
øndom_gíî©‹
 =
FIO_RAND_GEN_TAUSWORTHE
 ||

94 
td
->
o
.
øndom_gíî©‹
 =
FIO_RAND_GEN_TAUSWORTHE64
) {

96 
r
 = 
	`__ønd
(&
td
->
øndom_°©e
);

98 
	`d¥öt
(
FD_RANDOM
, "of‡ønd %Œu\n", (Ë
r
);

100 *
b
 = 
œ°b
 * (
r
 / (
	`ønd_max
(&
td
->
øndom_°©e
) + 1.0));

102 
uöt64_t
 
off
 = 0;

104 
	`as£π
(
	`fio_fûe_lf§
(
f
));

106 i‡(
	`lf§_√xt
(&
f
->
lf§
, &
off
))

109 *
b
 = 
off
;

115 i‡(!
	`fûe_øndomm≠
(
td
, 
f
))

116 
ªt
;

121 i‡(
	`øndom_m≠_‰ì
(
f
, *
b
))

122 
ªt
;

124 
	`d¥öt
(
FD_RANDOM
, "get_next_rand_offset: offset %llu busy\n",

125 (Ë*
b
);

127 *
b
 = 
	`axm≠_√xt_‰ì
(
f
->
io_axm≠
, *b);

128 i‡(*
b
 =(
uöt64_t
) -1ULL)

130 
ªt
:

132 
	}
}

134 
	$__gë_√xt_ønd_off£t_zùf
(
thªad_d©a
 *
td
,

135 
fio_fûe
 *
f
, 
fio_ddú
 
ddú
,

136 
uöt64_t
 *
b
)

138 *
b
 = 
	`zùf_√xt
(&
f
->
zùf
);

140 
	}
}

142 
	$__gë_√xt_ønd_off£t_∑ªto
(
thªad_d©a
 *
td
,

143 
fio_fûe
 *
f
, 
fio_ddú
 
ddú
,

144 
uöt64_t
 *
b
)

146 *
b
 = 
	`∑ªto_√xt
(&
f
->
zùf
);

148 
	}
}

150 
	$__gë_√xt_ønd_off£t_gauss
(
thªad_d©a
 *
td
,

151 
fio_fûe
 *
f
, 
fio_ddú
 
ddú
,

152 
uöt64_t
 *
b
)

154 *
b
 = 
	`gauss_√xt
(&
f
->
gauss
);

156 
	}
}

158 
	$__gë_√xt_ønd_off£t_z⁄ed_abs
(
thªad_d©a
 *
td
,

159 
fio_fûe
 *
f
,

160 
fio_ddú
 
ddú
, 
uöt64_t
 *
b
)

162 
z⁄e_•lô_ödex
 *
zsi
;

163 
uöt64_t
 
œ°b
, 
£nd
, 
°ŸÆ
;

164 
v
;

166 
œ°b
 = 
	`œ°_block
(
td
, 
f
, 
ddú
);

167 i‡(!
œ°b
)

170 i‡(!
td
->
o
.
z⁄e_•lô_ƒ
[
ddú
]) {

171 
baû
:

172  
	`__gë_√xt_ønd_off£t
(
td
, 
f
, 
ddú
, 
b
, 
œ°b
);

178 
v
 = 
	`ønd_bëwìn
(&
td
->
z⁄e_°©e
, 1, 100);

184 
zsi
 = &
td
->
z⁄e_°©e_ödex
[
ddú
][
v
 - 1];

185 
°ŸÆ
 = 
zsi
->
size_¥ev
 / 
td
->
o
.
ba
[
ddú
];

186 
£nd
 = 
zsi
->
size
 / 
td
->
o
.
ba
[
ddú
];

191 i‡(
£nd
 == -1U) {

192 i‡(!
	`fio_did_w¨n
(
FIO_WARN_ZONED_BUG
))

193 
	`log_îr
("fio: bug in zoned generation\n");

194 
baû
;

195 } i‡(
£nd
 > 
œ°b
) {

201 
	`log_îr
("fio: zoned_abs sizesÉxceed file size\n");

208 i‡(
	`__gë_√xt_ønd_off£t
(
td
, 
f
, 
ddú
, 
b
, 
£nd
 - 
°ŸÆ
) == 1)

211 *
b
 +
°ŸÆ
;

213 
	}
}

215 
	$__gë_√xt_ønd_off£t_z⁄ed
(
thªad_d©a
 *
td
,

216 
fio_fûe
 *
f
, 
fio_ddú
 
ddú
,

217 
uöt64_t
 *
b
)

219 
v
, 
£nd
, 
°ŸÆ
;

220 
uöt64_t
 
off£t
, 
œ°b
;

221 
z⁄e_•lô_ödex
 *
zsi
;

223 
œ°b
 = 
	`œ°_block
(
td
, 
f
, 
ddú
);

224 i‡(!
œ°b
)

227 i‡(!
td
->
o
.
z⁄e_•lô_ƒ
[
ddú
]) {

228 
baû
:

229  
	`__gë_√xt_ønd_off£t
(
td
, 
f
, 
ddú
, 
b
, 
œ°b
);

235 
v
 = 
	`ønd_bëwìn
(&
td
->
z⁄e_°©e
, 1, 100);

237 
zsi
 = &
td
->
z⁄e_°©e_ödex
[
ddú
][
v
 - 1];

238 
°ŸÆ
 = 
zsi
->
size_≥rc_¥ev
;

239 
£nd
 = 
zsi
->
size_≥rc
;

244 i‡(
£nd
 == -1U) {

245 i‡(!
	`fio_did_w¨n
(
FIO_WARN_ZONED_BUG
))

246 
	`log_îr
("fio: bug in zoned generation\n");

247 
baû
;

255 i‡(
°ŸÆ
)

256 
off£t
 = 
°ŸÆ
 * 
œ°b
 / 100ULL;

258 
off£t
 = 0;

260 
œ°b
 =Üa°b * (
£nd
 - 
°ŸÆ
) / 100ULL;

265 i‡(
	`__gë_√xt_ønd_off£t
(
td
, 
f
, 
ddú
, 
b
, 
œ°b
) == 1)

271 i‡(
off£t
)

272 *
b
 +
off£t
;

275 
	}
}

277 
	$gë_√xt_ønd_off£t
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

278 
fio_ddú
 
ddú
, 
uöt64_t
 *
b
)

280 i‡(
td
->
o
.
øndom_di°ributi⁄
 =
FIO_RAND_DIST_RANDOM
) {

281 
uöt64_t
 
œ°b
;

283 
œ°b
 = 
	`œ°_block
(
td
, 
f
, 
ddú
);

284 i‡(!
œ°b
)

287  
	`__gë_√xt_ønd_off£t
(
td
, 
f
, 
ddú
, 
b
, 
œ°b
);

288 } i‡(
td
->
o
.
øndom_di°ributi⁄
 =
FIO_RAND_DIST_ZIPF
)

289  
	`__gë_√xt_ønd_off£t_zùf
(
td
, 
f
, 
ddú
, 
b
);

290 i‡(
td
->
o
.
øndom_di°ributi⁄
 =
FIO_RAND_DIST_PARETO
)

291  
	`__gë_√xt_ønd_off£t_∑ªto
(
td
, 
f
, 
ddú
, 
b
);

292 i‡(
td
->
o
.
øndom_di°ributi⁄
 =
FIO_RAND_DIST_GAUSS
)

293  
	`__gë_√xt_ønd_off£t_gauss
(
td
, 
f
, 
ddú
, 
b
);

294 i‡(
td
->
o
.
øndom_di°ributi⁄
 =
FIO_RAND_DIST_ZONED
)

295  
	`__gë_√xt_ønd_off£t_z⁄ed
(
td
, 
f
, 
ddú
, 
b
);

296 i‡(
td
->
o
.
øndom_di°ributi⁄
 =
FIO_RAND_DIST_ZONED_ABS
)

297  
	`__gë_√xt_ønd_off£t_z⁄ed_abs
(
td
, 
f
, 
ddú
, 
b
);

299 
	`log_îr
("fio: unknow¿øndom di°ributi⁄: %d\n", 
td
->
o
.
øndom_di°ributi⁄
);

301 
	}
}

303 
boﬁ
 
	$should_do_øndom
(
thªad_d©a
 *
td
, 
fio_ddú
 
ddú
)

305 
v
;

307 i‡(
td
->
o
.
≥rc_ønd
[
ddú
] == 100)

308  
åue
;

310 
v
 = 
	`ønd_bëwìn
(&
td
->
£q_ønd_°©e
[
ddú
], 1, 100);

312  
v
 <
td
->
o
.
≥rc_ønd
[
ddú
];

313 
	}
}

315 
	$lo›_ˇche_övÆid©e
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

317 
thªad_›ti⁄s
 *
o
 = &
td
->o;

319 i‡(
o
->
övÆid©e_ˇche
 && !o->
odúe˘
) {

320 
fio_unu£d
 
ªt
;

322 
ªt
 = 
	`fûe_övÆid©e_ˇche
(
td
, 
f
);

324 
	}
}

326 
	$gë_√xt_ønd_block
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

327 
fio_ddú
 
ddú
, 
uöt64_t
 *
b
)

329 i‡(!
	`gë_√xt_ønd_off£t
(
td
, 
f
, 
ddú
, 
b
))

332 i‡(
td
->
o
.
time_ba£d
 ||

333 (
td
->
o
.
fûe_£rvi˚_ty≥
 & 
__FIO_FSERVICE_NONUNIFORM
)) {

334 
	`fio_fûe_ª£t
(
td
, 
f
);

335 
	`lo›_ˇche_övÆid©e
(
td
, 
f
);

336 i‡(!
	`gë_√xt_ønd_off£t
(
td
, 
f
, 
ddú
, 
b
))

340 
	`d¥öt
(
FD_IO
, "%s:Ñand offset failed,Üast=%llu, size=%llu\n",

341 
f
->
fûe_«me
, (Ëf->
œ°_pos
[
ddú
],

342 (Ë
f
->
ªÆ_fûe_size
);

344 
	}
}

346 
	$gë_√xt_£q_off£t
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

347 
fio_ddú
 
ddú
, 
uöt64_t
 *
off£t
)

349 
thªad_›ti⁄s
 *
o
 = &
td
->o;

351 
	`as£π
(
	`ddú_rw
(
ddú
));

357 i‡(
f
->
œ°_pos
[
ddú
] >f->
io_size
 + 
	`gë_°¨t_off£t
(
td
, f) &&

358 
o
->
time_ba£d
 && o->
ƒ_fûes
 == 1) {

359 
f
->
œ°_pos
[
ddú
] = f->
fûe_off£t
;

360 
	`lo›_ˇche_övÆid©e
(
td
, 
f
);

363 i‡(
f
->
œ°_pos
[
ddú
] < f->
ªÆ_fûe_size
) {

364 
uöt64_t
 
pos
;

369 i‡(
f
->
œ°_pos
[
ddú
] =f->
fûe_off£t
 &&

370 
f
->
fûe_off£t
 && 
o
->
ddú_£q_add
 < 0) {

371 i‡(
f
->
ªÆ_fûe_size
 > f->
io_size
)

372 
f
->
œ°_pos
[
ddú
] = f->
io_size
;

374 
f
->
œ°_pos
[
ddú
] = f->
ªÆ_fûe_size
;

377 
pos
 = 
f
->
œ°_pos
[
ddú
] - f->
fûe_off£t
;

378 i‡(
pos
 && 
o
->
ddú_£q_add
) {

379 
pos
 +
o
->
ddú_£q_add
;

387 i‡(
pos
 >
f
->
ªÆ_fûe_size
) {

388 i‡(
o
->
ddú_£q_add
 > 0)

389 
pos
 = 
f
->
fûe_off£t
;

391 i‡(
f
->
ªÆ_fûe_size
 > f->
io_size
)

392 
pos
 = 
f
->
io_size
;

394 
pos
 = 
f
->
ªÆ_fûe_size
;

396 
pos
 +
o
->
ddú_£q_add
;

401 *
off£t
 = 
pos
;

406 
	}
}

408 
	$gë_√xt_block
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

409 
fio_ddú
 
ddú
, 
rw_£q
,

410 
boﬁ
 *
is_øndom
)

412 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

413 
uöt64_t
 
b
, 
off£t
;

414 
ªt
;

416 
	`as£π
(
	`ddú_rw
(
ddú
));

418 
b
 = 
off£t
 = -1ULL;

420 i‡(
	`td_øndåimwrôe
(
td
Ë&& 
ddú
 =
DDIR_WRITE
) {

422 
	`io_u_£t
(
td
, 
io_u
, 
IO_U_F_BUSY_OK
);

423 
off£t
 = 
f
->
œ°_°¨t
[
DDIR_TRIM
];

424 *
is_øndom
 = 
åue
;

425 
ªt
 = 0;

426 } i‡(
rw_£q
) {

427 i‡(
	`td_øndom
(
td
)) {

428 i‡(
	`should_do_øndom
(
td
, 
ddú
)) {

429 
ªt
 = 
	`gë_√xt_ønd_block
(
td
, 
f
, 
ddú
, &
b
);

430 *
is_øndom
 = 
åue
;

432 *
is_øndom
 = 
Ál£
;

433 
	`io_u_£t
(
td
, 
io_u
, 
IO_U_F_BUSY_OK
);

434 
ªt
 = 
	`gë_√xt_£q_off£t
(
td
, 
f
, 
ddú
, &
off£t
);

435 i‡(
ªt
)

436 
ªt
 = 
	`gë_√xt_ønd_block
(
td
, 
f
, 
ddú
, &
b
);

439 *
is_øndom
 = 
Ál£
;

440 
ªt
 = 
	`gë_√xt_£q_off£t
(
td
, 
f
, 
ddú
, &
off£t
);

443 
	`io_u_£t
(
td
, 
io_u
, 
IO_U_F_BUSY_OK
);

444 *
is_øndom
 = 
Ál£
;

446 i‡(
td
->
o
.
rw_£q
 =
RW_SEQ_SEQ
) {

447 
ªt
 = 
	`gë_√xt_£q_off£t
(
td
, 
f
, 
ddú
, &
off£t
);

448 i‡(
ªt
) {

449 
ªt
 = 
	`gë_√xt_ønd_block
(
td
, 
f
, 
ddú
, &
b
);

450 *
is_øndom
 = 
Ál£
;

452 } i‡(
td
->
o
.
rw_£q
 =
RW_SEQ_IDENT
) {

453 i‡(
f
->
œ°_°¨t
[
ddú
] != -1ULL)

454 
off£t
 = 
f
->
œ°_°¨t
[
ddú
] - f->
fûe_off£t
;

456 
off£t
 = 0;

457 
ªt
 = 0;

459 
	`log_îr
("fio: unknow¿rw_£q=%d\n", 
td
->
o
.
rw_£q
);

460 
ªt
 = 1;

464 i‡(!
ªt
) {

465 i‡(
off£t
 != -1ULL)

466 
io_u
->
off£t
 = offset;

467 i‡(
b
 != -1ULL)

468 
io_u
->
off£t
 = 
b
 * 
td
->
o
.
ba
[
ddú
];

470 
	`log_îr
("fio: bug i¿off£àgíî©i⁄: off£t=%Œu, b=%Œu\n", (Ë
off£t
, (Ë
b
);

471 
ªt
 = 1;

473 
io_u
->
vîify_off£t
 = io_u->
off£t
;

476  
ªt
;

477 
	}
}

484 
	$gë_√xt_off£t
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

485 
boﬁ
 *
is_øndom
)

487 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

488 
fio_ddú
 
ddú
 = 
io_u
->ddir;

489 
rw_£q_hô
 = 0;

491 
	`as£π
(
	`ddú_rw
(
ddú
));

493 i‡(
td
->
o
.
ddú_£q_ƒ
 && !--td->ddir_seq_nr) {

494 
rw_£q_hô
 = 1;

495 
td
->
ddú_£q_ƒ
 =Åd->
o
.ddir_seq_nr;

498 i‡(
	`gë_√xt_block
(
td
, 
io_u
, 
ddú
, 
rw_£q_hô
, 
is_øndom
))

501 i‡(
io_u
->
off£t
 >
f
->
io_size
) {

502 
	`d¥öt
(
FD_IO
, "get_next_offset: offset %llu >= io_size %llu\n",

503 (Ë
io_u
->
off£t
,

504 (Ë
f
->
io_size
);

508 
io_u
->
off£t
 +
f
->
fûe_off£t
;

509 i‡(
io_u
->
off£t
 >
f
->
ªÆ_fûe_size
) {

510 
	`d¥öt
(
FD_IO
, "get_next_offset: offset %llu >= size %llu\n",

511 (Ë
io_u
->
off£t
,

512 (Ë
f
->
ªÆ_fûe_size
);

530 i‡(
	`td_øndåimwrôe
(
td
Ë&& 
ddú
 =
DDIR_TRIM
 &&

531 
f
->
œ°_°¨t
[
DDIR_TRIM
] =
io_u
->
off£t
)

532 
f
->
œ°_°¨t
[
DDIR_WRITE
]--;

534 
io_u
->
vîify_off£t
 = io_u->
off£t
;

536 
	}
}

538 
ölöe
 
boﬁ
 
	$io_u_fôs
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

539 
buÊí
)

541 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

543  
io_u
->
off£t
 + 
buÊí
 <
f
->
io_size
 + 
	`gë_°¨t_off£t
(
td
, f);

544 
	}
}

546 
	$gë_√xt_buÊí
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

547 
boﬁ
 
is_øndom
)

549 
ddú
 = 
io_u
->ddir;

550 
buÊí
 = 0;

551 
möbs
, 
maxbs
;

552 
uöt64_t
 
‰™d_max
, 
r
;

553 
boﬁ
 
powî_2
;

555 
	`as£π
(
	`ddú_rw
(
ddú
));

557 i‡(
	`td_øndåimwrôe
(
td
Ë&& 
ddú
 =
DDIR_WRITE
) {

558 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

560  
f
->
œ°_pos
[
DDIR_TRIM
] - f->
œ°_°¨t
[DDIR_TRIM];

563 i‡(
td
->
o
.
bs_is_£q_ønd
)

564 
ddú
 = 
is_øndom
 ? 
DDIR_WRITE
 : 
DDIR_READ
;

566 
möbs
 = 
td
->
o
.
mö_bs
[
ddú
];

567 
maxbs
 = 
td
->
o
.
max_bs
[
ddú
];

569 i‡(
möbs
 =
maxbs
)

570  
möbs
;

575 i‡(!
	`io_u_fôs
(
td
, 
io_u
, 
möbs
))

578 
‰™d_max
 = 
	`ønd_max
(&
td
->
b§™ge_°©e
[
ddú
]);

580 
r
 = 
	`__ønd
(&
td
->
b§™ge_°©e
[
ddú
]);

582 i‡(!
td
->
o
.
bs•lô_ƒ
[
ddú
]) {

583 
buÊí
 = 
möbs
 + (Ë((Ë
maxbs
 *

584 (
r
 / (
‰™d_max
 + 1.0)));

586 
≥rc
 = 0;

587 
i
;

589 
i
 = 0; i < 
td
->
o
.
bs•lô_ƒ
[
ddú
]; i++) {

590 
bs•lô
 *
b•
 = &
td
->
o
.bs•lô[
ddú
][
i
];

592 i‡(!
b•
->
≥rc
)

594 
buÊí
 = 
b•
->
bs
;

595 
≥rc
 +
b•
->perc;

596 i‡((
r
 / 
≥rc
 <
‰™d_max
 / 100ULL) &&

597 
	`io_u_fôs
(
td
, 
io_u
, 
buÊí
))

602 
powî_2
 = 
	`is_powî_of_2
(
möbs
);

603 i‡(!
td
->
o
.
bs_u«lig√d
 && 
powî_2
)

604 
buÊí
 &~(
möbs
 - 1);

605 i‡(!
td
->
o
.
bs_u«lig√d
 && !
powî_2
)

606 
buÊí
 -buÊí % 
möbs
;

607 i‡(
buÊí
 > 
maxbs
)

608 
buÊí
 = 
maxbs
;

609 } !
	`io_u_fôs
(
td
, 
io_u
, 
buÊí
));

611  
buÊí
;

612 
	}
}

614 
	$£t_rwmix_byãs
(
thªad_d©a
 *
td
)

616 
diff
;

623 
diff
 = 
td
->
o
.
rwmix
[td->
rwmix_ddú
 ^ 1];

624 
td
->
rwmix_issues
 = (td->
io_issues
[td->
rwmix_ddú
] * 
diff
) / 100;

625 
	}
}

627 
ölöe
 
fio_ddú
 
	$gë_ønd_ddú
(
thªad_d©a
 *
td
)

629 
v
;

631 
v
 = 
	`ønd_bëwìn
(&
td
->
rwmix_°©e
, 1, 100);

633 i‡(
v
 <
td
->
o
.
rwmix
[
DDIR_READ
])

634  
DDIR_READ
;

636  
DDIR_WRITE
;

637 
	}
}

639 
	$io_u_quõs˚
(
thªad_d©a
 *
td
)

641 
ªt
 = 0, 
com∂ëed
 = 0, 
îr
 = 0;

652 i‡(
td
->
io_u_queued
 ||Åd->
cur_dïth
)

653 
	`td_io_commô
(
td
);

655 
td
->
io_u_ö_Êight
) {

656 
ªt
 = 
	`io_u_queued_com∂ëe
(
td
, 1);

657 i‡(
ªt
 > 0)

658 
com∂ëed
 +
ªt
;

659 i‡(
ªt
 < 0)

660 
îr
 = 
ªt
;

663 i‡(
td
->
Êags
 & 
TD_F_REGROW_LOGS
)

664 
	`ªgrow_logs
(
td
);

666 i‡(
com∂ëed
)

667  
com∂ëed
;

669  
îr
;

670 
	}
}

672 
fio_ddú
 
	$øã_ddú
(
thªad_d©a
 *
td
, 
fio_ddú
 
ddú
)

674 
fio_ddú
 
odú
 = 
ddú
 ^ 1;

675 
uöt64_t
 
u£c
;

676 
uöt64_t
 
now
;

678 
	`as£π
(
	`ddú_rw
(
ddú
));

679 
now
 = 
	`utime_sö˚_now
(&
td
->
ïoch
);

684 i‡(
td
->
øã_√xt_io_time
[
ddú
] <
now
)

685  
ddú
;

691 i‡(
	`td_rw
(
td
Ë&&Åd->
o
.
rwmix
[
odú
]) {

695 i‡(
td
->
øã_√xt_io_time
[
odú
] <
now
)

696  
odú
;

702 i‡(
td
->
øã_√xt_io_time
[
ddú
] <=

703 
td
->
øã_√xt_io_time
[
odú
]) {

704 
u£c
 = 
td
->
øã_√xt_io_time
[
ddú
] - 
now
;

706 
u£c
 = 
td
->
øã_√xt_io_time
[
odú
] - 
now
;

707 
ddú
 = 
odú
;

710 
u£c
 = 
td
->
øã_√xt_io_time
[
ddú
] - 
now
;

712 i‡(
td
->
o
.
io_submô_mode
 =
IO_MODE_INLINE
)

713 
	`io_u_quõs˚
(
td
);

715 i‡(
td
->
o
.
timeout
 && ((
u£c
 + 
now
) >Åd->o.timeout)) {

719 i‡(
now
 > 
td
->
o
.
timeout
) {

720 
ddú
 = 
DDIR_INVAL
;

721  
ddú
;

723 
u£c
 = 
td
->
o
.
timeout
 - 
now
;

725 
	`u£c_¶ìp
(
td
, 
u£c
);

727 
now
 = 
	`utime_sö˚_now
(&
td
->
ïoch
);

728 i‡((
td
->
o
.
timeout
 && (
now
 >Åd->o.timeout)Ë||Åd->
ãrmö©e
)

729 
ddú
 = 
DDIR_INVAL
;

731  
ddú
;

732 
	}
}

739 
fio_ddú
 
	$gë_rw_ddú
(
thªad_d©a
 *
td
)

741 
fio_ddú
 
ddú
;

747 i‡(
	`should_fsync
(
td
)) {

748 i‡(
td
->
o
.
fsync_blocks
 &&Åd->
io_issues
[
DDIR_WRITE
] &&

749 !(
td
->
io_issues
[
DDIR_WRITE
] %Åd->
o
.
fsync_blocks
))

750  
DDIR_SYNC
;

752 i‡(
td
->
o
.
fd©async_blocks
 &&Åd->
io_issues
[
DDIR_WRITE
] &&

753 !(
td
->
io_issues
[
DDIR_WRITE
] %Åd->
o
.
fd©async_blocks
))

754  
DDIR_DATASYNC
;

756 i‡(
td
->
sync_fûe_ønge_ƒ
 &&Åd->
io_issues
[
DDIR_WRITE
] &&

757 !(
td
->
io_issues
[
DDIR_WRITE
] %Åd->
sync_fûe_ønge_ƒ
))

758  
DDIR_SYNC_FILE_RANGE
;

761 i‡(
	`td_rw
(
td
)) {

765 i‡(
td
->
io_issues
[td->
rwmix_ddú
] >td->
rwmix_issues
) {

771 
ddú
 = 
	`gë_ønd_ddú
(
td
);

773 i‡(
ddú
 !
td
->
rwmix_ddú
)

774 
	`£t_rwmix_byãs
(
td
);

776 
td
->
rwmix_ddú
 = 
ddú
;

778 
ddú
 = 
td
->
rwmix_ddú
;

779 } i‡(
	`td_ªad
(
td
))

780 
ddú
 = 
DDIR_READ
;

781 i‡(
	`td_wrôe
(
td
))

782 
ddú
 = 
DDIR_WRITE
;

783 i‡(
	`td_åim
(
td
))

784 
ddú
 = 
DDIR_TRIM
;

786 
ddú
 = 
DDIR_INVAL
;

788 
td
->
rwmix_ddú
 = 
	`øã_ddú
—d, 
ddú
);

789  
td
->
rwmix_ddú
;

790 
	}
}

792 
	$£t_rw_ddú
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

794 
fio_ddú
 
ddú
 = 
	`gë_rw_ddú
(
td
);

796 i‡(
td
->
o
.
z⁄e_mode
 =
ZONE_MODE_ZBD
)

797 
ddú
 = 
	`zbd_adju°_ddú
(
td
, 
io_u
, ddir);

799 i‡(
	`td_åimwrôe
(
td
)) {

800 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

801 i‡(
f
->
œ°_°¨t
[
DDIR_WRITE
] =f->œ°_°¨t[
DDIR_TRIM
])

802 
ddú
 = 
DDIR_TRIM
;

804 
ddú
 = 
DDIR_WRITE
;

807 
io_u
->
ddú
 = io_u->
ac˘_ddú
 = ddir;

809 i‡(
io_u
->
ddú
 =
DDIR_WRITE
 && 
	`td_i€ngöe_Êagged
(
td
, 
FIO_BARRIER
) &&

810 
td
->
o
.
b¨rõr_blocks
 &&

811 !(
td
->
io_issues
[
DDIR_WRITE
] %Åd->
o
.
b¨rõr_blocks
) &&

812 
td
->
io_issues
[
DDIR_WRITE
])

813 
	`io_u_£t
(
td
, 
io_u
, 
IO_U_F_BARRIER
);

814 
	}
}

816 
	$put_fûe_log
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

818 
ªt
 = 
	`put_fûe
(
td
, 
f
);

820 i‡(
ªt
)

821 
	`td_vîr‹
(
td
, 
ªt
, "file close");

822 
	}
}

824 
	$put_io_u
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

826 c⁄° 
boﬁ
 
√eds_lock
 = 
	`td_async_¥o˚ssög
(
td
);

828 
	`zbd_put_io_u
(
td
, 
io_u
);

830 i‡(
td
->
∑ª¡
)

831 
td
 =Åd->
∑ª¡
;

833 i‡(
√eds_lock
)

834 
	`__td_io_u_lock
(
td
);

836 i‡(
io_u
->
fûe
 && !(io_u->
Êags
 & 
IO_U_F_NO_FILE_PUT
))

837 
	`put_fûe_log
(
td
, 
io_u
->
fûe
);

839 
io_u
->
fûe
 = 
NULL
;

840 
	`io_u_£t
(
td
, 
io_u
, 
IO_U_F_FREE
);

842 i‡(
io_u
->
Êags
 & 
IO_U_F_IN_CUR_DEPTH
) {

843 
td
->
cur_dïth
--;

844 
	`as£π
(!(
td
->
Êags
 & 
TD_F_CHILD
));

846 
	`io_u_qpush
(&
td
->
io_u_‰ìli°
, 
io_u
);

847 
	`td_io_u_‰ì_nŸify
(
td
);

849 i‡(
√eds_lock
)

850 
	`__td_io_u_u∆ock
(
td
);

851 
	}
}

853 
	$˛ór_io_u
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

855 
	`io_u_˛ór
(
td
, 
io_u
, 
IO_U_F_FLIGHT
);

856 
	`put_io_u
(
td
, 
io_u
);

857 
	}
}

859 
	$ªqueue_io_u
(
thªad_d©a
 *
td
, 
io_u
 **io_u)

861 c⁄° 
boﬁ
 
√eds_lock
 = 
	`td_async_¥o˚ssög
(
td
);

862 
io_u
 *
__io_u
 = *io_u;

863 
fio_ddú
 
ddú
 = 
	`ac˘_ddú
(
__io_u
);

865 
	`d¥öt
(
FD_IO
, "ªqueuê%p\n", 
__io_u
);

867 i‡(
td
->
∑ª¡
)

868 
td
 =Åd->
∑ª¡
;

870 i‡(
√eds_lock
)

871 
	`__td_io_u_lock
(
td
);

873 
	`io_u_£t
(
td
, 
__io_u
, 
IO_U_F_FREE
);

874 i‡((
__io_u
->
Êags
 & 
IO_U_F_FLIGHT
Ë&& 
	`ddú_rw
(
ddú
))

875 
td
->
io_issues
[
ddú
]--;

877 
	`io_u_˛ór
(
td
, 
__io_u
, 
IO_U_F_FLIGHT
);

878 i‡(
__io_u
->
Êags
 & 
IO_U_F_IN_CUR_DEPTH
) {

879 
td
->
cur_dïth
--;

880 
	`as£π
(!(
td
->
Êags
 & 
TD_F_CHILD
));

883 
	`io_u_Ωush
(&
td
->
io_u_ªqueues
, 
__io_u
);

884 
	`td_io_u_‰ì_nŸify
(
td
);

886 i‡(
√eds_lock
)

887 
	`__td_io_u_u∆ock
(
td
);

889 *
io_u
 = 
NULL
;

890 
	}
}

892 
	$£tup_°rided_z⁄e_mode
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

894 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

896 
	`as£π
(
td
->
o
.
z⁄e_mode
 =
ZONE_MODE_STRIDED
);

897 
	`as£π
(
td
->
o
.
z⁄e_size
);

898 
	`as£π
(
td
->
o
.
z⁄e_ønge
);

903 i‡(
td
->
z⁄e_byãs
 >td->
o
.
z⁄e_size
) {

904 
td
->
z⁄e_byãs
 = 0;

905 
f
->
fûe_off£t
 +
td
->
o
.
z⁄e_ønge
 +Åd->o.
z⁄e_skù
;

910 i‡(
f
->
fûe_off£t
 >f->
ªÆ_fûe_size
)

911 
f
->
fûe_off£t
 = 
	`gë_°¨t_off£t
(
td
, f);

913 
f
->
œ°_pos
[
io_u
->
ddú
] = f->
fûe_off£t
;

914 
td
->
io_skù_byãs
 +td->
o
.
z⁄e_skù
;

921 i‡(
f
->
œ°_pos
[
io_u
->
ddú
] >(f->
fûe_off£t
 + 
td
->
o
.
z⁄e_ønge
)) {

922 
	`d¥öt
(
FD_IO
, "io_u maöèö z⁄êoff£t=%" 
PRIu64
 "/last_pos=%" PRIu64 "\n",

923 
f
->
fûe_off£t
, f->
œ°_pos
[
io_u
->
ddú
]);

924 
f
->
œ°_pos
[
io_u
->
ddú
] = f->
fûe_off£t
;

931 i‡((
td
->
z⁄e_byãs
 %Åd->
o
.
z⁄e_ønge
) == 0)

932 
	`fio_fûe_ª£t
(
td
, 
f
);

933 
	}
}

935 
	$fûl_io_u
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

937 
boﬁ
 
is_øndom
;

938 
uöt64_t
 
off£t
;

939 
io_u_a˘i⁄
 
ªt
;

941 i‡(
	`td_i€ngöe_Êagged
(
td
, 
FIO_NOIO
))

942 
out
;

944 
	`£t_rw_ddú
(
td
, 
io_u
);

946 i‡(
io_u
->
ddú
 =
DDIR_INVAL
) {

947 
	`d¥öt
(
FD_IO
, "övÆid dúe˘i⁄Ñe˚ived ddú = %d", 
io_u
->
ddú
);

953 i‡(!
	`ddú_rw
(
io_u
->
ddú
))

954 
out
;

956 i‡(
td
->
o
.
z⁄e_mode
 =
ZONE_MODE_STRIDED
)

957 
	`£tup_°rided_z⁄e_mode
(
td
, 
io_u
);

958 i‡(
td
->
o
.
z⁄e_mode
 =
ZONE_MODE_ZBD
)

959 
	`£tup_zbd_z⁄e_mode
(
td
, 
io_u
);

965 i‡(
	`gë_√xt_off£t
(
td
, 
io_u
, &
is_øndom
)) {

966 
	`d¥öt
(
FD_IO
, "io_u %p, faûed gëtög off£t\n", 
io_u
);

970 
io_u
->
buÊí
 = 
	`gë_√xt_buÊí
(
td
, io_u, 
is_øndom
);

971 i‡(!
io_u
->
buÊí
) {

972 
	`d¥öt
(
FD_IO
, "io_u %p, faûed gëtög buÊí\n", 
io_u
);

976 
off£t
 = 
io_u
->offset;

977 i‡(
td
->
o
.
z⁄e_mode
 =
ZONE_MODE_ZBD
) {

978 
ªt
 = 
	`zbd_adju°_block
(
td
, 
io_u
);

979 i‡(
ªt
 =
io_u_eof
)

983 i‡(
io_u
->
off£t
 + io_u->
buÊí
 > io_u->
fûe
->
ªÆ_fûe_size
) {

984 
	`d¥öt
(
FD_IO
, "io_u %p, off=0x%llx +Üen=0x%llxÉxceeds file size=0x%llx\n",

985 
io_u
,

986 (Ë
io_u
->
off£t
, io_u->
buÊí
,

987 (Ë
io_u
->
fûe
->
ªÆ_fûe_size
);

994 i‡(
	`td_øndom
(
td
Ë&& 
	`fûe_øndomm≠
—d, 
io_u
->
fûe
))

995 
io_u
->
buÊí
 = 
	`m¨k_øndom_m≠
(
td
, io_u, 
off£t
, io_u->buflen);

997 
out
:

998 
	`d¥öt_io_u
(
io_u
, "fill");

999 
io_u
->
vîify_off£t
 = io_u->
off£t
;

1000 
td
->
z⁄e_byãs
 +
io_u
->
buÊí
;

1002 
	}
}

1004 
	$__io_u_m¨k_m≠
(
uöt64_t
 *
m≠
, 
ƒ
)

1006 
idx
 = 0;

1008 
ƒ
) {

1010 
idx
 = 6;

1013 
idx
 = 5;

1016 
idx
 = 4;

1019 
idx
 = 3;

1022 
idx
 = 2;

1025 
idx
 = 1;

1026 
fio_ÁŒthrough
;

1031 
m≠
[
idx
]++;

1032 
	}
}

1034 
	$io_u_m¨k_submô
(
thªad_d©a
 *
td
, 
ƒ
)

1036 
	`__io_u_m¨k_m≠
(
td
->
ts
.
io_u_submô
, 
ƒ
);

1037 
td
->
ts
.
tŸÆ_submô
++;

1038 
	}
}

1040 
	$io_u_m¨k_com∂ëe
(
thªad_d©a
 *
td
, 
ƒ
)

1042 
	`__io_u_m¨k_m≠
(
td
->
ts
.
io_u_com∂ëe
, 
ƒ
);

1043 
td
->
ts
.
tŸÆ_com∂ëe
++;

1044 
	}
}

1046 
	$io_u_m¨k_dïth
(
thªad_d©a
 *
td
, 
ƒ
)

1048 
idx
 = 0;

1050 
td
->
cur_dïth
) {

1052 
idx
 = 6;

1055 
idx
 = 5;

1058 
idx
 = 4;

1061 
idx
 = 3;

1064 
idx
 = 2;

1067 
idx
 = 1;

1068 
fio_ÁŒthrough
;

1073 
td
->
ts
.
io_u_m≠
[
idx
] +
ƒ
;

1074 
	}
}

1076 
	$io_u_m¨k_œt_n£c
(
thªad_d©a
 *
td
, 
n£c
)

1078 
idx
 = 0;

1080 
	`as£π
(
n£c
 < 1000);

1082 
n£c
) {

1084 
idx
 = 9;

1087 
idx
 = 8;

1090 
idx
 = 7;

1093 
idx
 = 6;

1096 
idx
 = 5;

1099 
idx
 = 4;

1102 
idx
 = 3;

1105 
idx
 = 2;

1108 
idx
 = 1;

1109 
fio_ÁŒthrough
;

1114 
	`as£π
(
idx
 < 
FIO_IO_U_LAT_N_NR
);

1115 
td
->
ts
.
io_u_œt_n
[
idx
]++;

1116 
	}
}

1118 
	$io_u_m¨k_œt_u£c
(
thªad_d©a
 *
td
, 
u£c
)

1120 
idx
 = 0;

1122 
	`as£π
(
u£c
 < 1000 && usec >= 1);

1124 
u£c
) {

1126 
idx
 = 9;

1129 
idx
 = 8;

1132 
idx
 = 7;

1135 
idx
 = 6;

1138 
idx
 = 5;

1141 
idx
 = 4;

1144 
idx
 = 3;

1147 
idx
 = 2;

1150 
idx
 = 1;

1151 
fio_ÁŒthrough
;

1156 
	`as£π
(
idx
 < 
FIO_IO_U_LAT_U_NR
);

1157 
td
->
ts
.
io_u_œt_u
[
idx
]++;

1158 
	}
}

1160 
	$io_u_m¨k_œt_m£c
(
thªad_d©a
 *
td
, 
m£c
)

1162 
idx
 = 0;

1164 
	`as£π
(
m£c
 >= 1);

1166 
m£c
) {

1168 
idx
 = 11;

1171 
idx
 = 10;

1174 
idx
 = 9;

1177 
idx
 = 8;

1180 
idx
 = 7;

1183 
idx
 = 6;

1186 
idx
 = 5;

1189 
idx
 = 4;

1192 
idx
 = 3;

1195 
idx
 = 2;

1198 
idx
 = 1;

1199 
fio_ÁŒthrough
;

1204 
	`as£π
(
idx
 < 
FIO_IO_U_LAT_M_NR
);

1205 
td
->
ts
.
io_u_œt_m
[
idx
]++;

1206 
	}
}

1208 
	$io_u_m¨k_œãncy
(
thªad_d©a
 *
td
, 
n£c
)

1210 i‡(
n£c
 < 1000)

1211 
	`io_u_m¨k_œt_n£c
(
td
, 
n£c
);

1212 i‡(
n£c
 < 1000000)

1213 
	`io_u_m¨k_œt_u£c
(
td
, 
n£c
 / 1000);

1215 
	`io_u_m¨k_œt_m£c
(
td
, 
n£c
 / 1000000);

1216 
	}
}

1218 
	$__gë_√xt_fûío_ønd
(
thªad_d©a
 *
td
)

1220 
fûío
;

1222 i‡(
td
->
o
.
fûe_£rvi˚_ty≥
 =
FIO_FSERVICE_RANDOM
) {

1223 
uöt64_t
 
‰™d_max
 = 
	`ønd_max
(&
td
->
√xt_fûe_°©e
);

1224 
r
;

1226 
r
 = 
	`__ønd
(&
td
->
√xt_fûe_°©e
);

1227  (Ë((Ë
td
->
o
.
ƒ_fûes


1228 * (
r
 / (
‰™d_max
 + 1.0)));

1231 i‡(
td
->
o
.
fûe_£rvi˚_ty≥
 =
FIO_FSERVICE_ZIPF
)

1232 
fûío
 = 
	`zùf_√xt
(&
td
->
√xt_fûe_zùf
);

1233 i‡(
td
->
o
.
fûe_£rvi˚_ty≥
 =
FIO_FSERVICE_PARETO
)

1234 
fûío
 = 
	`∑ªto_√xt
(&
td
->
√xt_fûe_zùf
);

1235 i‡(
td
->
o
.
fûe_£rvi˚_ty≥
 =
FIO_FSERVICE_GAUSS
)

1236 
fûío
 = 
	`gauss_√xt
(&
td
->
√xt_fûe_gauss
);

1238 
	`log_îr
("fio: bad fûê£rvi˚Åy≥: %d\n", 
td
->
o
.
fûe_£rvi˚_ty≥
);

1239 
	`as£π
(0);

1243  
fûío
 >> 
FIO_FSERVICE_SHIFT
;

1244 
	}
}

1249 
fio_fûe
 *
	$gë_√xt_fûe_ønd
(
thªad_d©a
 *
td
,

1250 
fio_fûe_Êags
 
goodf
,

1251 
fio_fûe_Êags
 
badf
)

1253 
fio_fûe
 *
f
;

1254 
‚o
;

1257 
›íed
 = 0;

1259 
‚o
 = 
	`__gë_√xt_fûío_ønd
(
td
);

1261 
f
 = 
td
->
fûes
[
‚o
];

1262 i‡(
	`fio_fûe_d⁄e
(
f
))

1265 i‡(!
	`fio_fûe_›í
(
f
)) {

1266 
îr
;

1268 i‡(
td
->
ƒ_›í_fûes
 >td->
o
.
›í_fûes
)

1269  
	`ERR_PTR
(-
EBUSY
);

1271 
îr
 = 
	`td_io_›í_fûe
(
td
, 
f
);

1272 i‡(
îr
)

1274 
›íed
 = 1;

1277 i‡((!
goodf
 || (
f
->
Êags
 & goodf)Ë&& !(f->Êag†& 
badf
)) {

1278 
	`d¥öt
(
FD_FILE
, "gë_√xt_fûe_ønd: %p\n", 
f
);

1279  
f
;

1281 i‡(
›íed
)

1282 
	`td_io_˛o£_fûe
(
td
, 
f
);

1284 
	}
}

1289 
fio_fûe
 *
	$gë_√xt_fûe_º
(
thªad_d©a
 *
td
, 
goodf
,

1290 
badf
)

1292 
ﬁd_√xt_fûe
 = 
td
->
√xt_fûe
;

1293 
fio_fûe
 *
f
;

1296 
›íed
 = 0;

1298 
f
 = 
td
->
fûes
[td->
√xt_fûe
];

1300 
td
->
√xt_fûe
++;

1301 i‡(
td
->
√xt_fûe
 >td->
o
.
ƒ_fûes
)

1302 
td
->
√xt_fûe
 = 0;

1304 
	`d¥öt
(
FD_FILE
, "åyög fûê%†%x\n", 
f
->
fûe_«me
, f->
Êags
);

1305 i‡(
	`fio_fûe_d⁄e
(
f
)) {

1306 
f
 = 
NULL
;

1310 i‡(!
	`fio_fûe_›í
(
f
)) {

1311 
îr
;

1313 i‡(
td
->
ƒ_›í_fûes
 >td->
o
.
›í_fûes
)

1314  
	`ERR_PTR
(-
EBUSY
);

1316 
îr
 = 
	`td_io_›í_fûe
(
td
, 
f
);

1317 i‡(
îr
) {

1318 
	`d¥öt
(
FD_FILE
, "error %d on open of %s\n",

1319 
îr
, 
f
->
fûe_«me
);

1320 
f
 = 
NULL
;

1323 
›íed
 = 1;

1326 
	`d¥öt
(
FD_FILE
, "goodf=%x, badf=%x, ff=%x\n", 
goodf
, 
badf
,

1327 
f
->
Êags
);

1328 i‡((!
goodf
 || (
f
->
Êags
 & goodf)Ë&& !(f->Êag†& 
badf
))

1331 i‡(
›íed
)

1332 
	`td_io_˛o£_fûe
(
td
, 
f
);

1334 
f
 = 
NULL
;

1335 } 
td
->
√xt_fûe
 !
ﬁd_√xt_fûe
);

1337 
	`d¥öt
(
FD_FILE
, "gë_√xt_fûe_º: %p\n", 
f
);

1338  
f
;

1339 
	}
}

1341 
fio_fûe
 *
	$__gë_√xt_fûe
(
thªad_d©a
 *
td
)

1343 
fio_fûe
 *
f
;

1345 
	`as£π
(
td
->
o
.
ƒ_fûes
 <td->
fûes_ödex
);

1347 i‡(
td
->
ƒ_d⁄e_fûes
 >td->
o
.
ƒ_fûes
) {

1348 
	`d¥öt
(
FD_FILE
, "get_next_file:Çr_open=%d,Çr_done=%d,"

1349 "Çr_fûes=%d\n", 
td
->
ƒ_›í_fûes
,

1350 
td
->
ƒ_d⁄e_fûes
,

1351 
td
->
o
.
ƒ_fûes
);

1352  
NULL
;

1355 
f
 = 
td
->
fûe_£rvi˚_fûe
;

1356 i‡(
f
 && 
	`fio_fûe_›í
(fË&& !
	`fio_fûe_˛osög
(f)) {

1357 i‡(
td
->
o
.
fûe_£rvi˚_ty≥
 =
FIO_FSERVICE_SEQ
)

1358 
out
;

1359 i‡(
td
->
fûe_£rvi˚_À·
) {

1360 
td
->
fûe_£rvi˚_À·
--;

1361 
out
;

1365 i‡(
td
->
o
.
fûe_£rvi˚_ty≥
 =
FIO_FSERVICE_RR
 ||

1366 
td
->
o
.
fûe_£rvi˚_ty≥
 =
FIO_FSERVICE_SEQ
)

1367 
f
 = 
	`gë_√xt_fûe_º
(
td
, 
FIO_FILE_›í
, 
FIO_FILE_˛osög
);

1369 
f
 = 
	`gë_√xt_fûe_ønd
(
td
, 
FIO_FILE_›í
, 
FIO_FILE_˛osög
);

1371 i‡(
	`IS_ERR
(
f
))

1372  
f
;

1374 
td
->
fûe_£rvi˚_fûe
 = 
f
;

1375 
td
->
fûe_£rvi˚_À·
 =Åd->
fûe_£rvi˚_ƒ
 - 1;

1376 
out
:

1377 i‡(
f
)

1378 
	`d¥öt
(
FD_FILE
, "gë_√xt_fûe: %∞[%s]\n", 
f
, f->
fûe_«me
);

1380 
	`d¥öt
(
FD_FILE
, "get_next_file: NULL\n");

1381  
f
;

1382 
	}
}

1384 
fio_fûe
 *
	$gë_√xt_fûe
(
thªad_d©a
 *
td
)

1386  
	`__gë_√xt_fûe
(
td
);

1387 
	}
}

1389 
	$£t_io_u_fûe
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

1391 
fio_fûe
 *
f
;

1394 
f
 = 
	`gë_√xt_fûe
(
td
);

1395 i‡(
	`IS_ERR_OR_NULL
(
f
))

1396  
	`PTR_ERR
(
f
);

1398 
io_u
->
fûe
 = 
f
;

1399 
	`gë_fûe
(
f
);

1401 i‡(!
	`fûl_io_u
(
td
, 
io_u
))

1404 
	`zbd_put_io_u
(
td
, 
io_u
);

1406 
	`put_fûe_log
(
td
, 
f
);

1407 
	`td_io_˛o£_fûe
(
td
, 
f
);

1408 
io_u
->
fûe
 = 
NULL
;

1409 i‡(
td
->
o
.
fûe_£rvi˚_ty≥
 & 
__FIO_FSERVICE_NONUNIFORM
)

1410 
	`fio_fûe_ª£t
(
td
, 
f
);

1412 
	`fio_fûe_£t_d⁄e
(
f
);

1413 
td
->
ƒ_d⁄e_fûes
++;

1414 
	`d¥öt
(
FD_FILE
, "%s: i†d⁄ê(%d o‡%d)\n", 
f
->
fûe_«me
,

1415 
td
->
ƒ_d⁄e_fûes
,Åd->
o
.
ƒ_fûes
);

1420 
	}
}

1422 
	$œt_Áèl
(
thªad_d©a
 *
td
, 
io_u
 *io_u, 
io_com∂ëi⁄_d©a
 *
icd
,

1423 
ä£c
, 
max_n£c
)

1425 i‡(!
td
->
îr‹
) {

1426 
	`log_îr
("fio:Üatency of %lluÇsecÉxceeds specified max (%lluÇsec): %s %s %llu %llu\n",

1427 
ä£c
, 
max_n£c
,

1428 
io_u
->
fûe
->
fûe_«me
,

1429 
	`io_ddú_«me
(
io_u
->
ddú
),

1430 
io_u
->
off£t
, io_u->
buÊí
);

1432 
	`td_vîr‹
(
td
, 
ETIMEDOUT
, "maxÜatencyÉxceeded");

1433 
icd
->
îr‹
 = 
ETIMEDOUT
;

1434 
	}
}

1436 
	$œt_√w_cy˛e
(
thªad_d©a
 *
td
)

1438 
	`fio_gëtime
(&
td
->
œãncy_ts
, 
NULL
);

1439 
td
->
œãncy_ios
 = 
	`ddú_rw_sum
—d->
io_blocks
);

1440 
td
->
œãncy_Áûed
 = 0;

1441 
	}
}

1447 
boﬁ
 
	$__œt_èrgë_Áûed
(
thªad_d©a
 *
td
)

1449 i‡(
td
->
œãncy_qd
 == 1)

1450  
åue
;

1452 
td
->
œãncy_qd_high
 =Åd->
œãncy_qd
;

1454 i‡(
td
->
œãncy_qd
 =td->
œãncy_qd_low
)

1455 
td
->
œãncy_qd_low
--;

1457 
td
->
œãncy_qd
 = (td->œãncy_qd +Åd->
œãncy_qd_low
) / 2;

1458 
td
->
œãncy_°abÀ_cou¡
 = 0;

1460 
	`d¥öt
(
FD_RATE
, "Ram≥d down: %d %d %d\n", 
td
->
œãncy_qd_low
,Åd->
œãncy_qd
,Åd->
œãncy_qd_high
);

1466 
	`io_u_quõs˚
(
td
);

1467 
	`œt_√w_cy˛e
(
td
);

1468  
Ál£
;

1469 
	}
}

1471 
boﬁ
 
	$œt_èrgë_Áûed
(
thªad_d©a
 *
td
)

1473 i‡(
td
->
o
.
œãncy_≥r˚¡ûe
.
u
.
f
 == 100.0)

1474  
	`__œt_èrgë_Áûed
(
td
);

1476 
td
->
œãncy_Áûed
++;

1477  
Ál£
;

1478 
	}
}

1480 
	$œt_èrgë_öô
(
thªad_d©a
 *
td
)

1482 
td
->
œãncy_íd_run
 = 0;

1484 i‡(
td
->
o
.
œãncy_èrgë
) {

1485 
	`d¥öt
(
FD_RATE
, "L©ícyÅ¨gë=%Œu\n", 
td
->
o
.
œãncy_èrgë
);

1486 
	`fio_gëtime
(&
td
->
œãncy_ts
, 
NULL
);

1487 
td
->
œãncy_qd
 = 1;

1488 
td
->
œãncy_qd_high
 =Åd->
o
.
iodïth
;

1489 
td
->
œãncy_qd_low
 = 1;

1490 
td
->
œãncy_ios
 = 
	`ddú_rw_sum
—d->
io_blocks
);

1492 
td
->
œãncy_qd
 =Åd->
o
.
iodïth
;

1493 
	}
}

1495 
	$œt_èrgë_ª£t
(
thªad_d©a
 *
td
)

1497 i‡(!
td
->
œãncy_íd_run
)

1498 
	`œt_èrgë_öô
(
td
);

1499 
	}
}

1501 
	$œt_èrgë_suc˚ss
(
thªad_d©a
 *
td
)

1503 c⁄° 
qd
 = 
td
->
œãncy_qd
;

1504 
thªad_›ti⁄s
 *
o
 = &
td
->o;

1506 
td
->
œãncy_qd_low
 =Åd->
œãncy_qd
;

1508 i‡(
td
->
œãncy_qd
 + 1 =td->
œãncy_qd_high
) {

1517 i‡(++
td
->
œãncy_°abÀ_cou¡
 >= 3) {

1518 
td
->
œãncy_qd_high
++;

1519 
td
->
œãncy_°abÀ_cou¡
 = 0;

1528 i‡(
td
->
œãncy_qd_high
 !
o
->
iodïth
)

1529 
td
->
œãncy_qd
 = (td->œãncy_qd +Åd->
œãncy_qd_high
) / 2;

1531 
td
->
œãncy_qd
 *= 2;

1533 i‡(
td
->
œãncy_qd
 > 
o
->
iodïth
)

1534 
td
->
œãncy_qd
 = 
o
->
iodïth
;

1536 
	`d¥öt
(
FD_RATE
, "Ram≥d up: %d %d %d\n", 
td
->
œãncy_qd_low
,Åd->
œãncy_qd
,Åd->
œãncy_qd_high
);

1542 i‡(!
o
->
œãncy_run
 && 
td
->
œãncy_qd
 =
qd
) {

1543 i‡(
td
->
œãncy_íd_run
) {

1544 
	`d¥öt
(
FD_RATE
, "Weáre done\n");

1545 
td
->
d⁄e
 = 1;

1547 
	`d¥öt
(
FD_RATE
, "Quiesceánd finalÑun\n");

1548 
	`io_u_quõs˚
(
td
);

1549 
td
->
œãncy_íd_run
 = 1;

1550 
	`ª£t_Æl_°©s
(
td
);

1551 
	`ª£t_io_°©s
(
td
);

1555 
	`œt_√w_cy˛e
(
td
);

1556 
	}
}

1561 
	$œt_èrgë_check
(
thªad_d©a
 *
td
)

1563 
uöt64_t
 
u£c_wödow
;

1564 
uöt64_t
 
ios
;

1565 
suc˚ss_ios
;

1567 
u£c_wödow
 = 
	`utime_sö˚_now
(&
td
->
œãncy_ts
);

1568 i‡(
u£c_wödow
 < 
td
->
o
.
œãncy_wödow
)

1571 
ios
 = 
	`ddú_rw_sum
(
td
->
io_blocks
Ë-Åd->
œãncy_ios
;

1572 
suc˚ss_ios
 = (Ë(
ios
 - 
td
->
œãncy_Áûed
) / () ios;

1573 
suc˚ss_ios
 *= 100.0;

1575 
	`d¥öt
(
FD_RATE
, "Suc˚s†øã: %.2f%% (èrgë %.2f%%)\n", 
suc˚ss_ios
, 
td
->
o
.
œãncy_≥r˚¡ûe
.
u
.
f
);

1577 i‡(
suc˚ss_ios
 >
td
->
o
.
œãncy_≥r˚¡ûe
.
u
.
f
)

1578 
	`œt_èrgë_suc˚ss
(
td
);

1580 
	`__œt_èrgë_Áûed
(
td
);

1581 
	}
}

1587 
boﬁ
 
	$queue_fuŒ
(c⁄° 
thªad_d©a
 *
td
)

1589 c⁄° 
qem±y
 = 
	`io_u_qem±y
(&
td
->
io_u_‰ìli°
);

1591 i‡(
qem±y
)

1592  
åue
;

1593 i‡(!
td
->
o
.
œãncy_èrgë
)

1594  
Ál£
;

1596  
td
->
cur_dïth
 >td->
œãncy_qd
;

1597 
	}
}

1599 
io_u
 *
	$__gë_io_u
(
thªad_d©a
 *
td
)

1601 c⁄° 
boﬁ
 
√eds_lock
 = 
	`td_async_¥o˚ssög
(
td
);

1602 
io_u
 *io_u = 
NULL
;

1603 
ªt
;

1605 i‡(
td
->
°›_io
)

1606  
NULL
;

1608 i‡(
√eds_lock
)

1609 
	`__td_io_u_lock
(
td
);

1611 
agaö
:

1612 i‡(!
	`io_u_ªm±y
(&
td
->
io_u_ªqueues
)) {

1613 
io_u
 = 
	`io_u_Ω›
(&
td
->
io_u_ªqueues
);

1614 
io_u
->
ªsid
 = 0;

1615 } i‡(!
	`queue_fuŒ
(
td
)) {

1616 
io_u
 = 
	`io_u_qp›
(&
td
->
io_u_‰ìli°
);

1618 
io_u
->
fûe
 = 
NULL
;

1619 
io_u
->
buÊí
 = 0;

1620 
io_u
->
ªsid
 = 0;

1621 
io_u
->
íd_io
 = 
NULL
;

1624 i‡(
io_u
) {

1625 
	`as£π
(
io_u
->
Êags
 & 
IO_U_F_FREE
);

1626 
	`io_u_˛ór
(
td
, 
io_u
, 
IO_U_F_FREE
 | 
IO_U_F_NO_FILE_PUT
 |

1627 
IO_U_F_TRIMMED
 | 
IO_U_F_BARRIER
 |

1628 
IO_U_F_VER_LIST
);

1630 
io_u
->
îr‹
 = 0;

1631 
io_u
->
ac˘_ddú
 = -1;

1632 
td
->
cur_dïth
++;

1633 
	`as£π
(!(
td
->
Êags
 & 
TD_F_CHILD
));

1634 
	`io_u_£t
(
td
, 
io_u
, 
IO_U_F_IN_CUR_DEPTH
);

1635 
io_u
->
ùo
 = 
NULL
;

1636 } i‡(
	`td_async_¥o˚ssög
(
td
)) {

1641 
	`as£π
(!(
td
->
Êags
 & 
TD_F_CHILD
));

1642 
ªt
 = 
	`±hªad_c⁄d_waô
(&
td
->
‰ì_c⁄d
, &td->
io_u_lock
);

1643 
	`as£π
(
ªt
 == 0);

1644 i‡(!
td
->
îr‹
)

1645 
agaö
;

1648 i‡(
√eds_lock
)

1649 
	`__td_io_u_u∆ock
(
td
);

1651  
io_u
;

1652 
	}
}

1654 
boﬁ
 
	$check_gë_åim
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

1656 i‡(!(
td
->
Êags
 & 
TD_F_TRIM_BACKLOG
))

1657  
Ál£
;

1658 i‡(!
td
->
åim_íåõs
)

1659  
Ál£
;

1661 i‡(
td
->
åim_b©ch
) {

1662 
td
->
åim_b©ch
--;

1663 i‡(
	`gë_√xt_åim
(
td
, 
io_u
))

1664  
åue
;

1665 } i‡(!(
td
->
io_hi°_Àn
 %Åd->
o
.
åim_backlog
) &&

1666 
td
->
œ°_ddú
 !
DDIR_READ
) {

1667 
td
->
åim_b©ch
 =Åd->
o
.trim_batch;

1668 i‡(!
td
->
åim_b©ch
)

1669 
td
->
åim_b©ch
 =Åd->
o
.
åim_backlog
;

1670 i‡(
	`gë_√xt_åim
(
td
, 
io_u
))

1671  
åue
;

1674  
Ál£
;

1675 
	}
}

1677 
boﬁ
 
	$check_gë_vîify
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

1679 i‡(!(
td
->
Êags
 & 
TD_F_VER_BACKLOG
))

1680  
Ál£
;

1682 i‡(
td
->
io_hi°_Àn
) {

1683 
gë_vîify
 = 0;

1685 i‡(
td
->
vîify_b©ch
)

1686 
gë_vîify
 = 1;

1687 i‡(!(
td
->
io_hi°_Àn
 %Åd->
o
.
vîify_backlog
) &&

1688 
td
->
œ°_ddú
 !
DDIR_READ
) {

1689 
td
->
vîify_b©ch
 =Åd->
o
.verify_batch;

1690 i‡(!
td
->
vîify_b©ch
)

1691 
td
->
vîify_b©ch
 =Åd->
o
.
vîify_backlog
;

1692 
gë_vîify
 = 1;

1695 i‡(
gë_vîify
 && !
	`gë_√xt_vîify
(
td
, 
io_u
)) {

1696 
td
->
vîify_b©ch
--;

1697  
åue
;

1701  
Ál£
;

1702 
	}
}

1710 
	$smÆl_c⁄ã¡_s¸ambÀ
(
io_u
 *io_u)

1712 
i
, 
ƒ_blocks
 = 
io_u
->
buÊí
 >> 9;

1713 
off£t
;

1714 
uöt64_t
 
boff£t
, *
ùå
;

1715 *
p
;

1717 i‡(!
ƒ_blocks
)

1720 
p
 = 
io_u
->
x„r_buf
;

1721 
boff£t
 = 
io_u
->
off£t
;

1723 i‡(
io_u
->
buf_fûÀd_Àn
)

1724 
io_u
->
buf_fûÀd_Àn
 = 0;

1732 
off£t
 = (
io_u
->
°¨t_time
.
tv_n£c
 ^ 
boff£t
) & 7;

1734 
i
 = 0; i < 
ƒ_blocks
; i++) {

1739 
ùå
 = (*Ë
p
 + (
off£t
 << 6);

1740 *
ùå
 = 
boff£t
;

1742 
ùå
 = (*Ë
p
 + 64 - 2 * (
uöt64_t
);

1743 
ùå
[0] = 
io_u
->
°¨t_time
.
tv_£c
;

1744 
ùå
[1] = 
io_u
->
°¨t_time
.
tv_n£c
;

1746 
p
 += 512;

1747 
boff£t
 += 512;

1749 
	}
}

1755 
io_u
 *
	$gë_io_u
(
thªad_d©a
 *
td
)

1757 
fio_fûe
 *
f
;

1758 
io_u
 *io_u;

1759 
do_s¸ambÀ
 = 0;

1760 
ªt
 = 0;

1762 
io_u
 = 
	`__gë_io_u
(
td
);

1763 i‡(!
io_u
) {

1764 
	`d¥öt
(
FD_IO
, "__get_io_u failed\n");

1765  
NULL
;

1768 i‡(
	`check_gë_vîify
(
td
, 
io_u
))

1769 
out
;

1770 i‡(
	`check_gë_åim
(
td
, 
io_u
))

1771 
out
;

1776 i‡(
io_u
->
fûe
)

1777 
out
;

1782 i‡(
td
->
Êags
 & 
TD_F_READ_IOLOG
) {

1783 i‡(
	`ªad_iﬁog_gë
(
td
, 
io_u
))

1784 
îr_put
;

1785 } i‡(
	`£t_io_u_fûe
(
td
, 
io_u
)) {

1786 
ªt
 = -
EBUSY
;

1787 
	`d¥öt
(
FD_IO
, "io_u %p, sëtög fûêÁûed\n", 
io_u
);

1788 
îr_put
;

1791 
f
 = 
io_u
->
fûe
;

1792 i‡(!
f
) {

1793 
	`d¥öt
(
FD_IO
, "io_u %p, sëtög fûêÁûed\n", 
io_u
);

1794 
îr_put
;

1797 
	`as£π
(
	`fio_fûe_›í
(
f
));

1799 i‡(
	`ddú_rw
(
io_u
->
ddú
)) {

1800 i‡(!
io_u
->
buÊí
 && !
	`td_i€ngöe_Êagged
(
td
, 
FIO_NOIO
)) {

1801 
	`d¥öt
(
FD_IO
, "gë_io_u: zîÿbuÊí o¿%p\n", 
io_u
);

1802 
îr_put
;

1805 
f
->
œ°_°¨t
[
io_u
->
ddú
] = io_u->
off£t
;

1806 
f
->
œ°_pos
[
io_u
->
ddú
] = io_u->
off£t
 + io_u->
buÊí
;

1808 i‡(
io_u
->
ddú
 =
DDIR_WRITE
) {

1809 i‡(
td
->
Êags
 & 
TD_F_REFILL_BUFFERS
) {

1810 
	`io_u_fûl_buf„r
(
td
, 
io_u
,

1811 
td
->
o
.
mö_bs
[
DDIR_WRITE
],

1812 
io_u
->
buÊí
);

1813 } i‡((
td
->
Êags
 & 
TD_F_SCRAMBLE_BUFFERS
) &&

1814 !(
td
->
Êags
 & 
TD_F_COMPRESS
) &&

1815 !(
td
->
Êags
 & 
TD_F_DO_VERIFY
))

1816 
do_s¸ambÀ
 = 1;

1817 } i‡(
io_u
->
ddú
 =
DDIR_READ
) {

1822 
io_u
->
buf_fûÀd_Àn
 = 0;

1829 
io_u
->
x„r_buf
 = io_u->
buf
;

1830 
io_u
->
x„r_buÊí
 = io_u->
buÊí
;

1835 
io_u
->
i›rio
 = 
td
->ioprio;

1836 
io_u
->
˛©_¥io_ödex
 = 0;

1837 
out
:

1838 
	`as£π
(
io_u
->
fûe
);

1839 i‡(!
	`td_io_¥ï
(
td
, 
io_u
)) {

1840 i‡(!
td
->
o
.
dißbÀ_œt
)

1841 
	`fio_gëtime
(&
io_u
->
°¨t_time
, 
NULL
);

1843 i‡(
do_s¸ambÀ
)

1844 
	`smÆl_c⁄ã¡_s¸ambÀ
(
io_u
);

1846  
io_u
;

1848 
îr_put
:

1849 
	`d¥öt
(
FD_IO
, "get_io_u failed\n");

1850 
	`put_io_u
(
td
, 
io_u
);

1851  
	`ERR_PTR
(
ªt
);

1852 
	}
}

1854 
	$__io_u_log_îr‹
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

1856 
îr‹_ty≥_bô
 
eb
 = 
	`td_îr‹_ty≥
(
io_u
->
ddú
, io_u->
îr‹
);

1858 i‡(
	`td_n⁄_Áèl_îr‹
(
td
, 
eb
, 
io_u
->
îr‹
Ë&& !td->
o
.
îr‹_dump
)

1861 
	`log_îr
("fio: io_uÉrror%s%s: %s: %s offset=%llu, buflen=%llu\n",

1862 
io_u
->
fûe
 ? " on file " : "",

1863 
io_u
->
fûe
 ? io_u->fûe->
fûe_«me
 : "",

1864 
	`°ªº‹
(
io_u
->
îr‹
),

1865 
	`io_ddú_«me
(
io_u
->
ddú
),

1866 
io_u
->
off£t
, io_u->
x„r_buÊí
);

1868 i‡(
td
->
io_›s
->
îrdëaûs
) {

1869 *
îr
 = 
td
->
io_›s
->
	`îrdëaûs
(
io_u
);

1871 
	`log_îr
("fio: %s\n", 
îr
);

1872 
	`‰ì
(
îr
);

1875 i‡(!
td
->
îr‹
)

1876 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "io_uÉrror");

1877 
	}
}

1879 
	$io_u_log_îr‹
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

1881 
	`__io_u_log_îr‹
(
td
, 
io_u
);

1882 i‡(
td
->
∑ª¡
)

1883 
	`__io_u_log_îr‹
(
td
->
∑ª¡
, 
io_u
);

1884 
	}
}

1886 
ölöe
 
boﬁ
 
	$gtod_ªdu˚
(
thªad_d©a
 *
td
)

1888  (
td
->
o
.
dißbÀ_˛©
 &&Åd->o.
dißbÀ_¶©
 &&Åd->o.
dißbÀ_bw
)

1889 || 
td
->
o
.
gtod_ªdu˚
;

1890 
	}
}

1892 
	$åim_block_öfo
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

1894 
uöt32_t
 *
öfo
 = 
	`io_u_block_öfo
(
td
, 
io_u
);

1896 i‡(
	`BLOCK_INFO_STATE
(*
öfo
Ë>
BLOCK_STATE_TRIM_FAILURE
)

1899 *
öfo
 = 
	`BLOCK_INFO
(
BLOCK_STATE_TRIMMED
, 
	`BLOCK_INFO_TRIMS
(*info) + 1);

1900 
	}
}

1902 
	$accou¡_io_com∂ëi⁄
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

1903 
io_com∂ëi⁄_d©a
 *
icd
,

1904 c⁄° 
fio_ddú
 
idx
, 
byãs
)

1906 c⁄° 
no_ªdu˚
 = !
	`gtod_ªdu˚
(
td
);

1907 
Œn£c
 = 0;

1909 i‡(
td
->
∑ª¡
)

1910 
td
 =Åd->
∑ª¡
;

1912 i‡(!
td
->
o
.
°©s
 || 
	`td_i€ngöe_Êagged
—d, 
FIO_NOSTATS
))

1915 i‡(
no_ªdu˚
)

1916 
Œn£c
 = 
	`¡ime_sö˚
(&
io_u
->
issue_time
, &
icd
->
time
);

1918 i‡(!
td
->
o
.
dißbÀ_œt
) {

1919 
ä£c
;

1921 
ä£c
 = 
	`¡ime_sö˚
(&
io_u
->
°¨t_time
, &
icd
->
time
);

1922 
	`add_œt_ßm∂e
(
td
, 
idx
, 
ä£c
, 
byãs
, 
io_u
->
off£t
,

1923 
io_u
->
i›rio
, io_u->
˛©_¥io_ödex
);

1925 i‡(
td
->
Êags
 & 
TD_F_PROFILE_OPS
) {

1926 
¥of_io_›s
 *
›s
 = &
td
->prof_io_ops;

1928 i‡(
›s
->
io_u_œt
)

1929 
icd
->
îr‹
 = 
›s
->
	`io_u_œt
(
td
, 
ä£c
);

1932 i‡(
	`ddú_rw
(
idx
)) {

1933 i‡(
td
->
o
.
max_œãncy
[
idx
] && 
ä£c
 >Åd->o.max_latency[idx])

1934 
	`œt_Áèl
(
td
, 
io_u
, 
icd
, 
ä£c
,Åd->
o
.
max_œãncy
[
idx
]);

1935 i‡(
td
->
o
.
œãncy_èrgë
 && 
ä£c
 >Åd->o.latency_target) {

1936 i‡(
	`œt_èrgë_Áûed
(
td
))

1937 
	`œt_Áèl
(
td
, 
io_u
, 
icd
, 
ä£c
,Åd->
o
.
œãncy_èrgë
);

1942 i‡(
	`ddú_rw
(
idx
)) {

1943 i‡(!
td
->
o
.
dißbÀ_˛©
) {

1944 
	`add_˛©_ßm∂e
(
td
, 
idx
, 
Œn£c
, 
byãs
, 
io_u
->
off£t
,

1945 
io_u
->
i›rio
, io_u->
˛©_¥io_ödex
);

1946 
	`io_u_m¨k_œãncy
(
td
, 
Œn£c
);

1949 i‡(!
td
->
o
.
dißbÀ_bw
 && 
	`≥r_unô_log
—d->
bw_log
))

1950 
	`add_bw_ßm∂e
(
td
, 
io_u
, 
byãs
, 
Œn£c
);

1952 i‡(
no_ªdu˚
 && 
	`≥r_unô_log
(
td
->
i›s_log
))

1953 
	`add_i›s_ßm∂e
(
td
, 
io_u
, 
byãs
);

1954 } i‡(
	`ddú_sync
(
idx
Ë&& !
td
->
o
.
dißbÀ_˛©
)

1955 
	`add_sync_˛©_ßm∂e
(&
td
->
ts
, 
Œn£c
);

1957 i‡(
td
->
ts
.
ƒ_block_öfos
 && 
io_u
->
ddú
 =
DDIR_TRIM
)

1958 
	`åim_block_öfo
(
td
, 
io_u
);

1959 
	}
}

1961 
	$fûe_log_wrôe_comp
(c⁄° 
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

1962 
uöt64_t
 
off£t
, 
byãs
)

1964 
idx
;

1966 i‡(!
f
)

1969 i‡(
f
->
fú°_wrôe
 =-1ULL || 
off£t
 < f->first_write)

1970 
f
->
fú°_wrôe
 = 
off£t
;

1971 i‡(
f
->
œ°_wrôe
 =-1ULL || ((
off£t
 + 
byãs
) > f->last_write))

1972 
f
->
œ°_wrôe
 = 
off£t
 + 
byãs
;

1974 i‡(!
f
->
œ°_wrôe_comp
)

1977 
idx
 = 
f
->
œ°_wrôe_idx
++;

1978 
f
->
œ°_wrôe_comp
[
idx
] = 
off£t
;

1979 i‡(
f
->
œ°_wrôe_idx
 =
td
->
o
.
iodïth
)

1980 
f
->
œ°_wrôe_idx
 = 0;

1981 
	}
}

1983 
boﬁ
 
	$should_accou¡
(
thªad_d©a
 *
td
)

1985  
	`ømp_time_ovî
(
td
Ë&& (td->
run°©e
 =
TD_RUNNING
 ||

1986 
td
->
run°©e
 =
TD_VERIFYING
);

1987 
	}
}

1989 
	$io_com∂ëed
(
thªad_d©a
 *
td
, 
io_u
 **
io_u_±r
,

1990 
io_com∂ëi⁄_d©a
 *
icd
)

1992 
io_u
 *io_u = *
io_u_±r
;

1993 
fio_ddú
 
ddú
 = 
io_u
->ddir;

1994 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

1996 
	`d¥öt_io_u
(
io_u
, "complete");

1998 
	`as£π
(
io_u
->
Êags
 & 
IO_U_F_FLIGHT
);

1999 
	`io_u_˛ór
(
td
, 
io_u
, 
IO_U_F_FLIGHT
 | 
IO_U_F_BUSY_OK
);

2004 i‡(
io_u
->
ùo
) {

2008 i‡(
io_u
->
îr‹
)

2009 
	`u∆og_io_põ˚
(
td
, 
io_u
);

2011 
	`©omic_°‹e_ªÀa£
(&
io_u
->
ùo
->
Êags
,

2012 
io_u
->
ùo
->
Êags
 & ~
IP_F_IN_FLIGHT
);

2016 i‡(
	`ddú_sync
(
ddú
)) {

2017 
td
->
œ°_was_sync
 = 
åue
;

2018 i‡(
f
) {

2019 
f
->
fú°_wrôe
 = -1ULL;

2020 
f
->
œ°_wrôe
 = -1ULL;

2022 i‡(
	`should_accou¡
(
td
))

2023 
	`accou¡_io_com∂ëi⁄
(
td
, 
io_u
, 
icd
, 
ddú
, io_u->
buÊí
);

2027 
td
->
œ°_was_sync
 = 
Ál£
;

2028 
td
->
œ°_ddú
 = 
ddú
;

2030 i‡(!
io_u
->
îr‹
 && 
	`ddú_rw
(
ddú
)) {

2031 
byãs
 = 
io_u
->
x„r_buÊí
 - io_u->
ªsid
;

2032 
ªt
;

2038 i‡(
byãs
 && 
io_u
->
ªsid
) {

2039 
io_u
->
x„r_buÊí
 = io_u->
ªsid
;

2040 
io_u
->
x„r_buf
 +
byãs
;

2041 
io_u
->
off£t
 +
byãs
;

2042 
td
->
ts
.
sh‹t_io_u
[
io_u
->
ddú
]++;

2043 i‡(
io_u
->
off£t
 < io_u->
fûe
->
ªÆ_fûe_size
) {

2044 
	`ªqueue_io_u
(
td
, 
io_u_±r
);

2049 
td
->
io_blocks
[
ddú
]++;

2050 
td
->
io_byãs
[
ddú
] +
byãs
;

2052 i‡(!(
io_u
->
Êags
 & 
IO_U_F_VER_LIST
)) {

2053 
td
->
this_io_blocks
[
ddú
]++;

2054 
td
->
this_io_byãs
[
ddú
] +
byãs
;

2057 i‡(
ddú
 =
DDIR_WRITE
)

2058 
	`fûe_log_wrôe_comp
(
td
, 
f
, 
io_u
->
off£t
, 
byãs
);

2060 i‡(
	`should_accou¡
(
td
))

2061 
	`accou¡_io_com∂ëi⁄
(
td
, 
io_u
, 
icd
, 
ddú
, 
byãs
);

2063 
icd
->
byãs_d⁄e
[
ddú
] +
byãs
;

2065 i‡(
io_u
->
íd_io
) {

2066 
ªt
 = 
io_u
->
	`íd_io
(
td
, 
io_u_±r
);

2067 
io_u
 = *
io_u_±r
;

2068 i‡(
ªt
 && !
icd
->
îr‹
)

2069 
icd
->
îr‹
 = 
ªt
;

2071 } i‡(
io_u
->
îr‹
) {

2072 
icd
->
îr‹
 = 
io_u
->error;

2073 
	`io_u_log_îr‹
(
td
, 
io_u
);

2075 i‡(
icd
->
îr‹
) {

2076 
îr‹_ty≥_bô
 
eb
 = 
	`td_îr‹_ty≥
(
ddú
, 
icd
->
îr‹
);

2078 i‡(!
	`td_n⁄_Áèl_îr‹
(
td
, 
eb
, 
icd
->
îr‹
))

2085 
	`upd©e_îr‹_cou¡
(
td
, 
icd
->
îr‹
);

2086 
	`td_˛ór_îr‹
(
td
);

2087 
icd
->
îr‹
 = 0;

2088 i‡(
io_u
)

2089 
io_u
->
îr‹
 = 0;

2091 
	}
}

2093 
	$öô_icd
(
thªad_d©a
 *
td
, 
io_com∂ëi⁄_d©a
 *
icd
,

2094 
ƒ
)

2096 
ddú
;

2098 i‡(!
	`gtod_ªdu˚
(
td
))

2099 
	`fio_gëtime
(&
icd
->
time
, 
NULL
);

2101 
icd
->
ƒ
 =Çr;

2103 
icd
->
îr‹
 = 0;

2104 
ddú
 = 0; ddú < 
DDIR_RWDIR_CNT
; ddir++)

2105 
icd
->
byãs_d⁄e
[
ddú
] = 0;

2106 
	}
}

2108 
	$ios_com∂ëed
(
thªad_d©a
 *
td
,

2109 
io_com∂ëi⁄_d©a
 *
icd
)

2111 
io_u
 *io_u;

2112 
i
;

2114 
i
 = 0; i < 
icd
->
ƒ
; i++) {

2115 
io_u
 = 
td
->
io_›s
->
	`evít
—d, 
i
);

2117 
	`io_com∂ëed
(
td
, &
io_u
, 
icd
);

2119 i‡(
io_u
)

2120 
	`put_io_u
(
td
, 
io_u
);

2122 
	}
}

2127 
	$io_u_sync_com∂ëe
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

2129 
io_com∂ëi⁄_d©a
 
icd
;

2130 
ddú
;

2132 
	`öô_icd
(
td
, &
icd
, 1);

2133 
	`io_com∂ëed
(
td
, &
io_u
, &
icd
);

2135 i‡(
io_u
)

2136 
	`put_io_u
(
td
, 
io_u
);

2138 i‡(
icd
.
îr‹
) {

2139 
	`td_vîr‹
(
td
, 
icd
.
îr‹
, "io_u_sync_complete");

2143 
ddú
 = 0; ddú < 
DDIR_RWDIR_CNT
; ddir++)

2144 
td
->
byãs_d⁄e
[
ddú
] +
icd
.bytes_done[ddir];

2147 
	}
}

2152 
	$io_u_queued_com∂ëe
(
thªad_d©a
 *
td
, 
mö_evts
)

2154 
io_com∂ëi⁄_d©a
 
icd
;

2155 
time•ec
 *
tvp
 = 
NULL
;

2156 
ªt
, 
ddú
;

2157 
time•ec
 
ts
 = { .
tv_£c
 = 0, .
tv_n£c
 = 0, };

2159 
	`d¥öt
(
FD_IO
, "io_u_queued_com∂ëe: mö=%d\n", 
mö_evts
);

2161 i‡(!
mö_evts
)

2162 
tvp
 = &
ts
;

2163 i‡(
mö_evts
 > 
td
->
cur_dïth
)

2164 
mö_evts
 = 
td
->
cur_dïth
;

2168 
ªt
 = 
	`td_io_gëevíts
(
td
, 
mö_evts
,Åd->
o
.
iodïth_b©ch_com∂ëe_max
, 
tvp
);

2169 i‡(
ªt
 < 0) {

2170 
	`td_vîr‹
(
td
, -
ªt
, "td_io_getevents");

2171  
ªt
;

2172 } i‡(!
ªt
)

2173  
ªt
;

2175 
	`öô_icd
(
td
, &
icd
, 
ªt
);

2176 
	`ios_com∂ëed
(
td
, &
icd
);

2177 i‡(
icd
.
îr‹
) {

2178 
	`td_vîr‹
(
td
, 
icd
.
îr‹
, "io_u_queued_complete");

2182 
ddú
 = 0; ddú < 
DDIR_RWDIR_CNT
; ddir++)

2183 
td
->
byãs_d⁄e
[
ddú
] +
icd
.bytes_done[ddir];

2185  
ªt
;

2186 
	}
}

2191 
	$io_u_queued
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

2193 i‡(!
td
->
o
.
dißbÀ_¶©
 && 
	`ømp_time_ovî
—dË&&Åd->o.
°©s
) {

2194 
¶©_time
;

2196 
¶©_time
 = 
	`¡ime_sö˚
(&
io_u
->
°¨t_time
, &io_u->
issue_time
);

2198 i‡(
td
->
∑ª¡
)

2199 
td
 =Åd->
∑ª¡
;

2201 
	`add_¶©_ßm∂e
(
td
, 
io_u
->
ddú
, 
¶©_time
, io_u->
x„r_buÊí
,

2202 
io_u
->
off£t
, io_u->
i›rio
);

2204 
	}
}

2209 
‰™d_°©e
 *
	$gë_buf_°©e
(
thªad_d©a
 *
td
)

2211 
v
;

2212 
i
;

2214 i‡(!
td
->
o
.
dedu≥_≥r˚¡age
)

2215  &
td
->
buf_°©e
;

2216 i‡(
td
->
o
.
dedu≥_≥r˚¡age
 == 100) {

2217 
	`‰™d_c›y
(&
td
->
buf_°©e_¥ev
, &td->
buf_°©e
);

2218  &
td
->
buf_°©e
;

2221 
v
 = 
	`ønd_bëwìn
(&
td
->
dedu≥_°©e
, 1, 100);

2223 i‡(
v
 <
td
->
o
.
dedu≥_≥r˚¡age
)

2224 
td
->
o
.
dedu≥_mode
) {

2225 
DEDUPE_MODE_REPEAT
:

2232 
	`‰™d_c›y
(&
td
->
buf_°©e_ªt
, &td->
buf_°©e_¥ev
);

2233  &
td
->
buf_°©e_ªt
;

2234 
DEDUPE_MODE_WORKING_SET
:

2235 
i
 = 
	`ønd_bëwìn
(&
td
->
dedu≥_w‹kög_£t_ödex_°©e
, 0,Åd->
num_unique_∑ges
 - 1);

2236 
	`‰™d_c›y
(&
td
->
buf_°©e_ªt
, &td->
dedu≥_w‹kög_£t_°©es
[
i
]);

2237  &
td
->
buf_°©e_ªt
;

2239 
	`log_îr
("u√x≥˘ed dedu≥ modê%u\n", 
td
->
o
.
dedu≥_mode
);

2240 
	`as£π
(0);

2243  &
td
->
buf_°©e
;

2244 
	}
}

2246 
	$ßve_buf_°©e
(
thªad_d©a
 *
td
, 
‰™d_°©e
 *
rs
)

2248 i‡(
td
->
o
.
dedu≥_≥r˚¡age
 == 100)

2249 
	`‰™d_c›y
(
rs
, &
td
->
buf_°©e_¥ev
);

2250 i‡(
rs
 =&
td
->
buf_°©e
)

2251 
	`‰™d_c›y
(&
td
->
buf_°©e_¥ev
, 
rs
);

2252 
	}
}

2254 
	$fûl_io_buf„r
(
thªad_d©a
 *
td
, *
buf
, 
mö_wrôe
,

2255 
max_bs
)

2257 
thªad_›ti⁄s
 *
o
 = &
td
->o;

2259 i‡(
o
->
mem_ty≥
 =
MEM_CUDA_MALLOC
)

2262 i‡(
o
->
com¥ess_≥r˚¡age
 || o->
dedu≥_≥r˚¡age
) {

2263 
≥rc
 = 
td
->
o
.
com¥ess_≥r˚¡age
;

2264 
‰™d_°©e
 *
rs
 = 
NULL
;

2265 
À·
 = 
max_bs
;

2266 
this_wrôe
;

2276 i‡(!
rs
)

2277 
rs
 = 
	`gë_buf_°©e
(
td
);

2279 
mö_wrôe
 = 
	`mö
(mö_wrôe, 
À·
);

2281 
this_wrôe
 = 
	`mö_nŸ_zîo
(
mö_wrôe
,

2282 (Ë
td
->
o
.
com¥ess_chunk
);

2284 
	`fûl_øndom_buf_≥r˚¡age
(
rs
, 
buf
, 
≥rc
,

2285 
this_wrôe
,Åhis_write,

2286 
o
->
buf„r_∑âîn
,

2287 
o
->
buf„r_∑âîn_byãs
);

2289 
buf
 +
this_wrôe
;

2290 
À·
 -
this_wrôe
;

2291 
	`ßve_buf_°©e
(
td
, 
rs
);

2292 } 
À·
);

2293 } i‡(
o
->
buf„r_∑âîn_byãs
)

2294 
	`fûl_buf„r_∑âîn
(
td
, 
buf
, 
max_bs
);

2295 i‡(
o
->
zîo_buf„rs
)

2296 
	`mem£t
(
buf
, 0, 
max_bs
);

2298 
	`fûl_øndom_buf
(
	`gë_buf_°©e
(
td
), 
buf
, 
max_bs
);

2299 
	}
}

2304 
	$io_u_fûl_buf„r
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

2305 
mö_wrôe
, 
max_bs
)

2307 
io_u
->
buf_fûÀd_Àn
 = 0;

2308 
	`fûl_io_buf„r
(
td
, 
io_u
->
buf
, 
mö_wrôe
, 
max_bs
);

2309 
	}
}

2311 
	$do_sync_fûe_ønge
(c⁄° 
thªad_d©a
 *
td
,

2312 
fio_fûe
 *
f
)

2314 
uöt64_t
 
off£t
, 
nbyãs
;

2316 
off£t
 = 
f
->
fú°_wrôe
;

2317 
nbyãs
 = 
f
->
œ°_wrôe
 - f->
fú°_wrôe
;

2319 i‡(!
nbyãs
)

2322  
	`sync_fûe_ønge
(
f
->
fd
, 
off£t
, 
nbyãs
, 
td
->
o
.
sync_fûe_ønge
);

2323 
	}
}

2325 
	$do_io_u_sync
(c⁄° 
thªad_d©a
 *
td
, 
io_u
 *io_u)

2327 
ªt
;

2329 i‡(
io_u
->
ddú
 =
DDIR_SYNC
) {

2330 #ifde‡
CONFIG_FCNTL_SYNC


2331 
ªt
 = 
	`f˙é
(
io_u
->
fûe
->
fd
, 
F_FULLFSYNC
);

2333 
ªt
 = 
	`fsync
(
io_u
->
fûe
->
fd
);

2335 } i‡(
io_u
->
ddú
 =
DDIR_DATASYNC
) {

2336 #ifde‡
CONFIG_FDATASYNC


2337 
ªt
 = 
	`fd©async
(
io_u
->
fûe
->
fd
);

2339 
ªt
 = 
io_u
->
x„r_buÊí
;

2340 
io_u
->
îr‹
 = 
EINVAL
;

2342 } i‡(
io_u
->
ddú
 =
DDIR_SYNC_FILE_RANGE
)

2343 
ªt
 = 
	`do_sync_fûe_ønge
(
td
, 
io_u
->
fûe
);

2345 
ªt
 = 
io_u
->
x„r_buÊí
;

2346 
io_u
->
îr‹
 = 
EINVAL
;

2349 i‡(
ªt
 < 0)

2350 
io_u
->
îr‹
 = 
î∫o
;

2352  
ªt
;

2353 
	}
}

2355 
	$do_io_u_åim
(c⁄° 
thªad_d©a
 *
td
, 
io_u
 *io_u)

2357 #i‚de‡
FIO_HAVE_TRIM


2358 
io_u
->
îr‹
 = 
EINVAL
;

2361 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

2362 
ªt
;

2364 i‡(
td
->
o
.
z⁄e_mode
 =
ZONE_MODE_ZBD
) {

2365 
ªt
 = 
	`zbd_do_io_u_åim
(
td
, 
io_u
);

2366 i‡(
ªt
 =
io_u_com∂ëed
)

2367  
io_u
->
x„r_buÊí
;

2368 i‡(
ªt
)

2369 
îr
;

2372 
ªt
 = 
	`os_åim
(
f
, 
io_u
->
off£t
, io_u->
x„r_buÊí
);

2373 i‡(!
ªt
)

2374  
io_u
->
x„r_buÊí
;

2376 
îr
:

2377 
io_u
->
îr‹
 = 
ªt
;

2380 
	}
}

	@io_u.h

1 #i‚de‡
FIO_IO_U


2 
	#FIO_IO_U


	)

4 
	~"compûî/compûî.h
"

5 
	~"os/os.h
"

6 
	~"io_ddú.h
"

7 
	~"debug.h
"

8 
	~"fûe.h
"

9 
	~"w‹kqueue.h
"

11 #ifde‡
CONFIG_LIBAIO


12 
	~<libaio.h
>

16 
	mIO_U_F_FREE
 = 1 << 0,

17 
	mIO_U_F_FLIGHT
 = 1 << 1,

18 
	mIO_U_F_NO_FILE_PUT
 = 1 << 2,

19 
	mIO_U_F_IN_CUR_DEPTH
 = 1 << 3,

20 
	mIO_U_F_BUSY_OK
 = 1 << 4,

21 
	mIO_U_F_TRIMMED
 = 1 << 5,

22 
	mIO_U_F_BARRIER
 = 1 << 6,

23 
	mIO_U_F_VER_LIST
 = 1 << 7,

29 
	sio_u
 {

30 
time•ec
 
	m°¨t_time
;

31 
time•ec
 
	missue_time
;

33 
fio_fûe
 *
	mfûe
;

34 
	mÊags
;

35 
fio_ddú
 
	mddú
;

41 
fio_ddú
 
	mac˘_ddú
;

46 
	mnumbîio
;

51 
	mi›rio
;

52 
	m˛©_¥io_ödex
;

57 
	mbuÊí
;

58 
	moff£t
;

59 
	mvîify_off£t
;

60 *
	mbuf
;

65 
uöt64_t
 
	mønd_£ed
;

71 *
	mx„r_buf
;

72 
	mx„r_buÊí
;

78 
	mbuf_fûÀd_Àn
;

80 
io_põ˚
 *
	mùo
;

82 
	mªsid
;

83 
	mîr‹
;

89 
	mödex
;

90 
	m£í
;

91 *
	mígöe_d©a
;

95 
Êi°_hód
 
	mvîify_li°
;

96 
w‹kqueue_w‹k
 
	mw‹k
;

106 (*
	mzbd_queue_io
)(
thªad_d©a
 *
	mtd
, 
	mio_u
 *, 
	mq
,

107 
boﬁ
 
	msuc˚ss
);

113 (*
	mzbd_put_io
)(
thªad_d©a
 *
	mtd
, c⁄° 
	mio_u
 *);

118 (*
	míd_io
)(
	mthªad_d©a
 *, 
	mio_u
 **);

121 #ifde‡
CONFIG_LIBAIO


122 
iocb
 
	miocb
;

124 #ifde‡
CONFIG_POSIXAIO


125 
os_aiocb_t
 
	maiocb
;

127 #ifde‡
FIO_HAVE_SGIO


128 
sg_io_hdr
 
	mhdr
;

130 #ifde‡
CONFIG_SOLARISAIO


131 
aio_ªsu…_t
 
	mªsu…p
;

133 #ifde‡
CONFIG_RDMA


134 
ibv_mr
 *
	mmr
;

136 *
	mmm≠_d©a
;

143 
io_u
 *
__gë_io_u
(
thªad_d©a
 *);

144 
io_u
 *
gë_io_u
(
thªad_d©a
 *);

145 
put_io_u
(
thªad_d©a
 *, 
io_u
 *);

146 
˛ór_io_u
(
thªad_d©a
 *, 
io_u
 *);

147 
ªqueue_io_u
(
thªad_d©a
 *, 
io_u
 **);

148 
__mu°_check
 
io_u_sync_com∂ëe
(
thªad_d©a
 *, 
io_u
 *);

149 
__mu°_check
 
io_u_queued_com∂ëe
(
thªad_d©a
 *, );

150 
io_u_queued
(
thªad_d©a
 *, 
io_u
 *);

151 
io_u_quõs˚
(
thªad_d©a
 *);

152 
io_u_log_îr‹
(
thªad_d©a
 *, 
io_u
 *);

153 
io_u_m¨k_dïth
(
thªad_d©a
 *, );

154 
fûl_io_buf„r
(
thªad_d©a
 *, *, , );

155 
io_u_fûl_buf„r
(
thªad_d©a
 *
td
, 
io_u
 *, , );

156 
io_u_m¨k_com∂ëe
(
thªad_d©a
 *, );

157 
io_u_m¨k_submô
(
thªad_d©a
 *, );

158 
boﬁ
 
queue_fuŒ
(c⁄° 
thªad_d©a
 *);

160 
do_io_u_sync
(c⁄° 
thªad_d©a
 *, 
io_u
 *);

161 
do_io_u_åim
(c⁄° 
thªad_d©a
 *, 
io_u
 *);

163 #ifde‡
FIO_INC_DEBUG


164 
ölöe
 
	$d¥öt_io_u
(
io_u
 *io_u, c⁄° *
p
)

166 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

168 i‡(
f
)

169 
	`d¥öt
(
FD_IO
, "%s: io_u %p: off=0x%llx,len=0x%llx,ddir=%d,file=%s\n",

170 
p
, 
io_u
,

171 (Ë
io_u
->
off£t
,

172 
io_u
->
buÊí
, io_u->
ddú
,

173 
f
->
fûe_«me
);

175 
	`d¥öt
(
FD_IO
, "%s: io_u %p: off=0x%llx,len=0x%llx,ddir=%d\n",

176 
p
, 
io_u
,

177 (Ë
io_u
->
off£t
,

178 
io_u
->
buÊí
, io_u->
ddú
);

179 
	}
}

181 
	#d¥öt_io_u
(
io_u
, 
p
)

	)

184 
ölöe
 
fio_ddú
 
	$ac˘_ddú
(
io_u
 *io_u)

186 i‡(
io_u
->
ac˘_ddú
 != -1)

187  
io_u
->
ac˘_ddú
;

189  
io_u
->
ddú
;

190 
	}
}

192 
	#io_u_˛ór
(
td
, 
io_u
, 
vÆ
) \

193 
	`td_Êags_˛ór
((
td
), &(
io_u
->
Êags
), (
vÆ
))

	)

194 
	#io_u_£t
(
td
, 
io_u
, 
vÆ
) \

195 
	`td_Êags_£t
((
td
), &(
io_u
)->
Êags
, (
vÆ
))

	)

	@io_u_queue.c

1 
	~<°dlib.h
>

2 
	~<°rög.h
>

3 
	~"io_u_queue.h
"

4 
	~"smÆloc.h
"

6 
boﬁ
 
	$io_u_qöô
(
io_u_queue
 *
q
, 
ƒ
, 
boﬁ
 
sh¨ed
)

8 i‡(
sh¨ed
)

9 
q
->
io_us
 = 
	`smÆloc
(
ƒ
 * (
io_u
 *));

11 
q
->
io_us
 = 
	`ˇŒoc
(
ƒ
, (
io_u
 *));

13 i‡(!
q
->
io_us
)

14  
Ál£
;

16 
q
->
ƒ
 = 0;

17 
q
->
max
 = 
ƒ
;

18  
åue
;

19 
	}
}

21 
	$io_u_qexô
(
io_u_queue
 *
q
, 
boﬁ
 
sh¨ed
)

23 i‡(
sh¨ed
)

24 
	`s‰ì
(
q
->
io_us
);

26 
	`‰ì
(
q
->
io_us
);

27 
	}
}

29 
boﬁ
 
	$io_u_röô
(
io_u_rög
 *
rög
, 
ƒ
)

31 
rög
->
max
 = 
ƒ
 + 1;

32 i‡(
rög
->
max
 & (ring->max - 1)) {

33 
rög
->
max
--;

34 
rög
->
max
 |=Ñing->max >> 1;

35 
rög
->
max
 |=Ñing->max >> 2;

36 
rög
->
max
 |=Ñing->max >> 4;

37 
rög
->
max
 |=Ñing->max >> 8;

38 
rög
->
max
 |=Ñing->max >> 16;

39 
rög
->
max
++;

42 
rög
->rög = 
	`ˇŒoc
‘ög->
max
, (
io_u
 *));

43 i‡(!
rög
->ring)

44  
Ál£
;

46 
rög
->
hód
 =Ñög->
èû
 = 0;

47  
åue
;

48 
	}
}

50 
	$io_u_ªxô
(
io_u_rög
 *
rög
)

52 
	`‰ì
(
rög
->ring);

53 
	}
}

	@io_u_queue.h

1 #i‚de‡
FIO_IO_U_QUEUE


2 
	#FIO_IO_U_QUEUE


	)

4 
	~<as£π.h
>

5 
	~<°ddef.h
>

7 
	~"lib/ty≥s.h
"

9 
	gio_u
;

11 
	sio_u_queue
 {

12 
io_u
 **
	mio_us
;

13 
	mƒ
;

14 
	mmax
;

17 
ölöe
 
io_u
 *
	$io_u_qp›
(
io_u_queue
 *
q
)

19 i‡(
q
->
ƒ
) {

20 c⁄° 
√xt
 = --
q
->
ƒ
;

21 
io_u
 *io_u = 
q
->
io_us
[
√xt
];

23 
q
->
io_us
[
√xt
] = 
NULL
;

24  
io_u
;

27  
NULL
;

28 
	}
}

30 
ölöe
 
	$io_u_qpush
(
io_u_queue
 *
q
, 
io_u
 *io_u)

32 i‡(
q
->
ƒ
 < q->
max
) {

33 
q
->
io_us
[q->
ƒ
++] = 
io_u
;

37 
	`as£π
(0);

38 
	}
}

40 
ölöe
 
	$io_u_qem±y
(c⁄° 
io_u_queue
 *
q
)

42  !
q
->
ƒ
;

43 
	}
}

45 
	#io_u_qôî
(
q
, 
io_u
, 
i
) \

46 
i
 = 0; i < (
q
)->
ƒ
 && (
io_u
 = (q)->
io_us
[i]); i++)

	)

48 
boﬁ
 
io_u_qöô
(
io_u_queue
 *
q
, 
ƒ
, boﬁ 
sh¨ed
);

49 
io_u_qexô
(
io_u_queue
 *
q
, 
boﬁ
 
sh¨ed
);

51 
	sio_u_rög
 {

52 
	mhód
;

53 
	mèû
;

54 
	mmax
;

55 
io_u
 **
	mrög
;

58 
boﬁ
 
io_u_röô
(
io_u_rög
 *
rög
, 
ƒ
);

59 
io_u_ªxô
(
io_u_rög
 *
rög
);

61 
ölöe
 
	$io_u_Ωush
(
io_u_rög
 *
r
, 
io_u
 *io_u)

63 i‡(
r
->
hód
 + 1 !r->
èû
) {

64 
r
->
rög
[r->
hód
] = 
io_u
;

65 
r
->
hód
 = (r->hód + 1Ë& (r->
max
 - 1);

69 
	`as£π
(0);

70 
	}
}

72 
ölöe
 
io_u
 *
	$io_u_Ω›
(
io_u_rög
 *
r
)

74 i‡(
r
->
hód
 !r->
èû
) {

75 
io_u
 *io_u = 
r
->
rög
[r->
èû
];

77 
r
->
èû
 = (r->èû + 1Ë& (r->
max
 - 1);

78  
io_u
;

81  
NULL
;

82 
	}
}

84 
ölöe
 
	$io_u_ªm±y
(
io_u_rög
 *
rög
)

86  
rög
->
hód
 =rög->
èû
;

87 
	}
}

	@ioengines.c

12 
	~<°dlib.h
>

13 
	~<uni°d.h
>

14 
	~<°rög.h
>

15 
	~<dlf˙.h
>

16 
	~<f˙é.h
>

17 
	~<as£π.h
>

18 
	~<sys/ty≥s.h
>

19 
	~<dúít.h
>

21 
	~"fio.h
"

22 
	~"diskutû.h
"

23 
	~"zbd.h
"

25 
FLIST_HEAD
(
ígöe_li°
);

27 
ölöe
 
boﬁ
 
	$async_i€ngöe_sync_åim
(
thªad_d©a
 *
td
,

28 
io_u
 *io_u)

30  
	`td_i€ngöe_Êagged
(
td
, 
FIO_ASYNCIO_SYNC_TRIM
) &&

31 
io_u
->
ddú
 =
DDIR_TRIM
;

32 
	}
}

34 
boﬁ
 
	$check_ígöe_›s
(
thªad_d©a
 *
td
, 
i€ngöe_›s
 *
›s
)

36 i‡(
›s
->
vîsi⁄
 !
FIO_IOOPS_VERSION
) {

37 
	`log_îr
("bad io›†vîsi⁄ %d (w™à%d)\n", 
›s
->
vîsi⁄
,

38 
FIO_IOOPS_VERSION
);

39  
åue
;

42 i‡(!
›s
->
queue
) {

43 
	`log_îr
("%s:Çÿqueuêh™dÀr\n", 
›s
->
«me
);

44  
åue
;

50 i‡(
›s
->
Êags
 & 
FIO_SYNCIO
)

51  
Ál£
;

56 i‡((
td
->
o
.
io_submô_mode
 =
IO_MODE_OFFLOAD
) &&

57 (
›s
->
Êags
 & 
FIO_NO_OFFLOAD
)) {

58 
	`log_îr
("%s: can't be used with offloaded submit. Useá sync "

59 "ígöe\n", 
›s
->
«me
);

60  
åue
;

63 i‡(!
›s
->
evít
 || !›s->
gëevíts
) {

64 
	`log_îr
("%s:Çÿevít/gëevít†h™dÀr\n", 
›s
->
«me
);

65  
åue
;

68  
Ál£
;

69 
	}
}

71 
	$uƒegi°î_i€ngöe
(
i€ngöe_›s
 *
›s
)

73 
	`d¥öt
(
FD_IO
, "i€ngöê%†uƒegi°îed\n", 
›s
->
«me
);

74 
	`Êi°_dñ_öô
(&
›s
->
li°
);

75 
	}
}

77 
	$ªgi°î_i€ngöe
(
i€ngöe_›s
 *
›s
)

79 
	`d¥öt
(
FD_IO
, "i€ngöê%†ªgi°îed\n", 
›s
->
«me
);

80 
	`Êi°_add_èû
(&
›s
->
li°
, &
ígöe_li°
);

81 
	}
}

83 
i€ngöe_›s
 *
	$föd_i€ngöe
(c⁄° *
«me
)

85 
i€ngöe_›s
 *
›s
;

86 
Êi°_hód
 *
íåy
;

88 
	`Êi°_f‹_óch
(
íåy
, &
ígöe_li°
) {

89 
›s
 = 
	`Êi°_íåy
(
íåy
, 
i€ngöe_›s
, 
li°
);

90 i‡(!
	`°rcmp
(
«me
, 
›s
->name))

91  
›s
;

94  
NULL
;

95 
	}
}

97 #ifde‡
CONFIG_DYNAMIC_ENGINES


98 *
	$dl›í_exã∫Æ
(
thªad_d©a
 *
td
, c⁄° *
ígöe
)

100 
ígöe_∑th
[
PATH_MAX
];

101 *
dlh™dÀ
;

103 
	`•rötf
(
ígöe_∑th
, "%s/fio-%s.so", 
FIO_EXT_ENG_DIR
, 
ígöe
);

105 
	`d¥öt
(
FD_IO
, "dl›íÉxã∫Æ %s\n", 
ígöe_∑th
);

106 
dlh™dÀ
 = 
	`dl›í
(
ígöe_∑th
, 
RTLD_LAZY
);

107 i‡(!
dlh™dÀ
)

108 
	`log_öfo
("Engine %sÇot found; EitherÇame is invalid, wasÇot built, or fio-engine-%sÖackage is missing.\n",

109 
ígöe
,Éngine);

111  
dlh™dÀ
;

112 
	}
}

114 
	#dl›í_exã∫Æ
(
td
, 
ígöe
Ë(
NULL
)

	)

117 
i€ngöe_›s
 *
	$dl›í_i€ngöe
(
thªad_d©a
 *
td
,

118 c⁄° *
ígöe_lib
)

120 
i€ngöe_›s
 *
›s
;

121 *
dlh™dÀ
;

123 i‡(!
	`°∫cmp
(
ígöe_lib
, "linuxaio", 8) ||

124 !
	`°∫cmp
(
ígöe_lib
, "aio", 3))

125 
ígöe_lib
 = "libaio";

127 
	`d¥öt
(
FD_IO
, "dl›íÉngöê%s\n", 
ígöe_lib
);

129 
	`dÀº‹
();

130 
dlh™dÀ
 = 
	`dl›í
(
ígöe_lib
, 
RTLD_LAZY
);

131 i‡(!
dlh™dÀ
) {

132 
dlh™dÀ
 = 
	`dl›í_exã∫Æ
(
td
, 
ígöe_lib
);

133 i‡(!
dlh™dÀ
) {

134 
	`td_vmsg
(
td
, -1, 
	`dÀº‹
(), "dlopen");

135  
NULL
;

143 
›s
 = 
	`dlsym
(
dlh™dÀ
, 
ígöe_lib
);

144 i‡(!
›s
)

145 
›s
 = 
	`dlsym
(
dlh™dÀ
, "ioengine");

153 i‡(!
›s
) {

154 
gë_i€ngöe_t
 
gë_i€ngöe
 = 
	`dlsym
(
dlh™dÀ
, "get_ioengine");

156 i‡(
gë_i€ngöe
)

157 
	`gë_i€ngöe
(&
›s
);

160 i‡(!
›s
) {

161 
	`td_vmsg
(
td
, -1, 
	`dÀº‹
(), "dlsym");

162 
	`dl˛o£
(
dlh™dÀ
);

163  
NULL
;

166 
›s
->
dlh™dÀ
 = dlhandle;

167  
›s
;

168 
	}
}

170 
i€ngöe_›s
 *
	$__lﬂd_i€ngöe
(c⁄° *
ígöe
)

175 i‡(!
	`°∫cmp
(
ígöe
, "linuxaio", 8) || !strncmp(engine, "aio", 3)) {

176 
	`d¥öt
(
FD_IO
, "converting ioengineÇame: %s ->Üibaio\n",

177 
ígöe
);

178 
ígöe
 = "libaio";

181 
	`d¥öt
(
FD_IO
, "lﬂd i€ngöê%s\n", 
ígöe
);

182  
	`föd_i€ngöe
(
ígöe
);

183 
	}
}

185 
i€ngöe_›s
 *
	$lﬂd_i€ngöe
(
thªad_d©a
 *
td
)

187 
i€ngöe_›s
 *
›s
 = 
NULL
;

188 c⁄° *
«me
;

195 
«me
 = 
td
->
o
.
i€ngöe_so_∑th
 ?:Åd->o.
i€ngöe
;

204 
›s
 = 
	`__lﬂd_i€ngöe
(
td
->
o
.
i€ngöe
);

207 i‡(!
›s
 || ops->
dlh™dÀ
)

208 
›s
 = 
	`dl›í_i€ngöe
(
td
, 
«me
);

214 i‡(!
›s
) {

215 
	`log_îr
("fio:Éngöê%†nŸÜﬂdabÀ\n", 
«me
);

216  
NULL
;

222 i‡(
	`check_ígöe_›s
(
td
, 
›s
))

223  
NULL
;

225  
›s
;

226 
	}
}

231 
	$‰ì_i€ngöe
(
thªad_d©a
 *
td
)

233 
	`as£π
(
td
 !
NULL
 &&Åd->
io_›s
 != NULL);

235 
	`d¥öt
(
FD_IO
, "‰ì i€ngöê%s\n", 
td
->
io_›s
->
«me
);

237 i‡(
td
->
eo
 &&Åd->
io_›s
->
›ti⁄s
) {

238 
	`›ti⁄s_‰ì
(
td
->
io_›s
->
›ti⁄s
,Åd->
eo
);

239 
	`‰ì
(
td
->
eo
);

240 
td
->
eo
 = 
NULL
;

243 i‡(
td
->
io_›s
->
dlh™dÀ
) {

244 
	`d¥öt
(
FD_IO
, "dl˛o£ i€ngöê%s\n", 
td
->
io_›s
->
«me
);

245 
	`dl˛o£
(
td
->
io_›s
->
dlh™dÀ
);

248 
td
->
io_›s
 = 
NULL
;

249 
	}
}

251 
	$˛o£_i€ngöe
(
thªad_d©a
 *
td
)

253 
	`d¥öt
(
FD_IO
, "˛o£ i€ngöê%s\n", 
td
->
io_›s
->
«me
);

255 i‡(
td
->
io_›s
->
˛ónup
) {

256 
td
->
io_›s
->
	`˛ónup
(td);

257 
td
->
io_›s_d©a
 = 
NULL
;

260 
	`‰ì_i€ngöe
(
td
);

261 
	}
}

263 
	$td_io_¥ï
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

265 
	`d¥öt_io_u
(
io_u
, "prep");

266 
	`fio_ro_check
(
td
, 
io_u
);

268 
	`lock_fûe
(
td
, 
io_u
->
fûe
, io_u->
ddú
);

270 i‡(
td
->
io_›s
->
¥ï
) {

271 
ªt
 = 
td
->
io_›s
->
	`¥ï
—d, 
io_u
);

273 
	`d¥öt
(
FD_IO
, "¥ï: io_u %p:Ñë=%d\n", 
io_u
, 
ªt
);

275 i‡(
ªt
)

276 
	`u∆ock_fûe
(
td
, 
io_u
->
fûe
);

277  
ªt
;

281 
	}
}

283 
	$td_io_gëevíts
(
thªad_d©a
 *
td
, 
mö
, 
max
,

284 c⁄° 
time•ec
 *
t
)

286 
r
 = 0;

295 i‡(
td
->
d⁄e
)

298 i‡(
mö
 > 0 && 
td
->
io_›s
->
commô
) {

299 
r
 = 
td
->
io_›s
->
	`commô
(td);

300 i‡(
r
 < 0)

301 
out
;

303 i‡(
max
 > 
td
->
cur_dïth
)

304 
max
 = 
td
->
cur_dïth
;

305 i‡(
mö
 > 
max
)

306 
max
 = 
mö
;

308 
r
 = 0;

309 i‡(
max
 && 
td
->
io_›s
->
gëevíts
)

310 
r
 = 
td
->
io_›s
->
	`gëevíts
—d, 
mö
, 
max
, 
t
);

311 
out
:

312 i‡(
r
 >= 0) {

317 
td
->
io_u_ö_Êight
 -
r
;

318 
	`io_u_m¨k_com∂ëe
(
td
, 
r
);

320 
	`td_vîr‹
(
td
, 
r
, "get_events");

322 
	`d¥öt
(
FD_IO
, "gëevíts: %d\n", 
r
);

323  
r
;

324 
	}
}

326 
fio_q_°©us
 
	$td_io_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

328 c⁄° 
fio_ddú
 
ddú
 = 
	`ac˘_ddú
(
io_u
);

329 
buÊí
 = 
io_u
->
x„r_buÊí
;

330 
fio_q_°©us
 
ªt
;

332 
	`d¥öt_io_u
(
io_u
, "queue");

333 
	`fio_ro_check
(
td
, 
io_u
);

335 
	`as£π
((
io_u
->
Êags
 & 
IO_U_F_FLIGHT
) == 0);

336 
	`io_u_£t
(
td
, 
io_u
, 
IO_U_F_FLIGHT
);

344 i‡(
	`td_ofÊﬂd_ovîœp
(
td
)) {

345 
ªs
 = 
	`±hªad_muãx_u∆ock
(&
ovîœp_check
);

346 
	`as£π
(
ªs
 == 0);

349 
	`as£π
(
	`fio_fûe_›í
(
io_u
->
fûe
));

354 
	`log_io_u
(
td
, 
io_u
);

356 
io_u
->
îr‹
 = 0;

357 
io_u
->
ªsid
 = 0;

359 i‡(
	`td_i€ngöe_Êagged
(
td
, 
FIO_SYNCIO
) ||

360 
	`async_i€ngöe_sync_åim
(
td
, 
io_u
)) {

361 i‡(
	`fio_fûl_issue_time
(
td
)) {

362 
	`fio_gëtime
(&
io_u
->
issue_time
, 
NULL
);

367 i‡(
td
->
o
.
ªad_iﬁog_fûe
)

368 
	`mem˝y
(&
td
->
œ°_issue
, &
io_u
->
issue_time
,

369 (
io_u
->
issue_time
));

374 i‡(
	`ddú_rw
(
ddú
)) {

375 i‡(!(
io_u
->
Êags
 & 
IO_U_F_VER_LIST
)) {

376 
td
->
io_issues
[
ddú
]++;

377 
td
->
io_issue_byãs
[
ddú
] +
buÊí
;

379 
td
->
øã_io_issue_byãs
[
ddú
] +
buÊí
;

382 
ªt
 = 
td
->
io_›s
->
	`queue
—d, 
io_u
);

383 
	`zbd_queue_io_u
(
td
, 
io_u
, 
ªt
);

385 
	`u∆ock_fûe
(
td
, 
io_u
->
fûe
);

387 i‡(
ªt
 =
FIO_Q_BUSY
 && 
	`ddú_rw
(
ddú
)) {

388 
td
->
io_issues
[
ddú
]--;

389 
td
->
io_issue_byãs
[
ddú
] -
buÊí
;

390 
td
->
øã_io_issue_byãs
[
ddú
] -
buÊí
;

391 
	`io_u_˛ór
(
td
, 
io_u
, 
IO_U_F_FLIGHT
);

398 i‡(
io_u
->
îr‹
 && !
td
->error)

399 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "td_io_queue");

407 i‡(
io_u
->
îr‹
 =
EINVAL
 && 
td
->
io_issues
[io_u->
ddú
 & 1] == 1 &&

408 
td
->
o
.
odúe˘
) {

410 
	`log_öfo
("fio: first direct IOÉrrored. File system mayÇot "

415 i‡(
	`zbd_u«lig√d_wrôe
(
io_u
->
îr‹
) &&

416 
td
->
io_issues
[
io_u
->
ddú
 & 1] == 1 &&

417 
td
->
o
.
z⁄e_mode
 !
ZONE_MODE_ZBD
) {

418 
	`log_öfo
("fio: first I/O failed. If %s isá zoned block device, consider --zonemode=zbd\n",

419 
io_u
->
fûe
->
fûe_«me
);

422 i‡(!
td
->
io_›s
->
commô
) {

423 
	`io_u_m¨k_submô
(
td
, 1);

424 
	`io_u_m¨k_com∂ëe
(
td
, 1);

427 i‡(
ªt
 =
FIO_Q_COMPLETED
) {

428 i‡(
	`ddú_rw
(
io_u
->
ddú
) ||

429 (
	`ddú_sync
(
io_u
->
ddú
Ë&& 
td
->
run°©e
 !
TD_FSYNCING
)) {

430 
	`io_u_m¨k_dïth
(
td
, 1);

431 
td
->
ts
.
tŸÆ_io_u
[
io_u
->
ddú
]++;

433 } i‡(
ªt
 =
FIO_Q_QUEUED
) {

434 
td
->
io_u_queued
++;

436 i‡(
	`ddú_rw
(
io_u
->
ddú
) ||

437 (
	`ddú_sync
(
io_u
->
ddú
Ë&& 
td
->
run°©e
 !
TD_FSYNCING
))

438 
td
->
ts
.
tŸÆ_io_u
[
io_u
->
ddú
]++;

440 i‡(
td
->
io_u_queued
 >td->
o
.
iodïth_b©ch
)

441 
	`td_io_commô
(
td
);

444 i‡(!
	`td_i€ngöe_Êagged
(
td
, 
FIO_SYNCIO
) &&

445 !
	`async_i€ngöe_sync_åim
(
td
, 
io_u
)) {

446 i‡(
	`fio_fûl_issue_time
(
td
) &&

447 !
	`td_i€ngöe_Êagged
(
td
, 
FIO_ASYNCIO_SETS_ISSUE_TIME
)) {

448 
	`fio_gëtime
(&
io_u
->
issue_time
, 
NULL
);

453 i‡(
td
->
o
.
ªad_iﬁog_fûe
)

454 
	`mem˝y
(&
td
->
œ°_issue
, &
io_u
->
issue_time
,

455 (
io_u
->
issue_time
));

459  
ªt
;

460 
	}
}

462 
	$td_io_öô
(
thªad_d©a
 *
td
)

464 
ªt
 = 0;

466 i‡(
td
->
io_›s
->
öô
) {

467 
ªt
 = 
td
->
io_›s
->
	`öô
(td);

468 i‡(
ªt
)

469 
	`log_îr
("fio: ioÉngine %s init failed.%s\n",

470 
td
->
io_›s
->
«me
,

471 
td
->
o
.
iodïth
 > 1 ?

474 
td
->
io_›s_öô
 = 1;

475 i‡(!
td
->
îr‹
)

476 
td
->
îr‹
 = 
ªt
;

479  
ªt
;

480 
	}
}

482 
	$td_io_commô
(
thªad_d©a
 *
td
)

484 
ªt
;

486 
	`d¥öt
(
FD_IO
, "ˇŒög ->commô(), dïth %d\n", 
td
->
cur_dïth
);

488 i‡(!
td
->
cur_dïth
 || !td->
io_u_queued
)

491 
	`io_u_m¨k_dïth
(
td
,Åd->
io_u_queued
);

493 i‡(
td
->
io_›s
->
commô
) {

494 
ªt
 = 
td
->
io_›s
->
	`commô
(td);

495 i‡(
ªt
)

496 
	`td_vîr‹
(
td
, -
ªt
, "io commit");

502 
td
->
io_u_ö_Êight
 +td->
io_u_queued
;

503 
td
->
io_u_queued
 = 0;

504 
	}
}

506 
	$td_io_›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

508 i‡(
	`fio_fûe_˛osög
(
f
)) {

512 
	`fio_fûe_˛ór_˛osög
(
f
);

513 
	`gë_fûe
(
f
);

516 
	`as£π
(!
	`fio_fûe_›í
(
f
));

517 
	`as£π
(
f
->
fd
 == -1);

518 
	`as£π
(
td
->
io_›s
->
›í_fûe
);

520 i‡(
td
->
io_›s
->
	`›í_fûe
—d, 
f
)) {

521 i‡(
td
->
îr‹
 =
EINVAL
 &&Åd->
o
.
odúe˘
)

522 
	`log_îr
("fio: destination doesÇot support O_DIRECT\n");

523 i‡(
td
->
îr‹
 =
EMFILE
) {

524 
	`log_îr
("fio:ÅryÑeducing/setting openfiles (failed"

525 "áà%u o‡%u)\n", 
td
->
ƒ_›í_fûes
,

526 
td
->
o
.
ƒ_fûes
);

529 
	`as£π
(
f
->
fd
 == -1);

530 
	`as£π
(!
	`fio_fûe_›í
(
f
));

534 
	`fio_fûe_ª£t
(
td
, 
f
);

535 
	`fio_fûe_£t_›í
(
f
);

536 
	`fio_fûe_˛ór_˛osög
(
f
);

537 
	`disk_utû_öc
(
f
->
du
);

539 
td
->
ƒ_›í_fûes
++;

540 
	`gë_fûe
(
f
);

542 i‡(
f
->
fûëy≥
 =
FIO_TYPE_PIPE
) {

543 i‡(
	`td_øndom
(
td
)) {

544 
	`log_îr
("fio: can't seek onÖipes (noÑandom io)\n");

545 
îr
;

549 i‡(
	`td_i€ngöe_Êagged
(
td
, 
FIO_DISKLESSIO
))

550 
d⁄e
;

552 i‡(
td
->
o
.
övÆid©e_ˇche
 && 
	`fûe_övÆid©e_ˇche
—d, 
f
))

553 
îr
;

555 i‡(
td
->
o
.
Ádvi£_höt
 !
F_ADV_NONE
 &&

556 (
f
->
fûëy≥
 =
FIO_TYPE_BLOCK
 || f->fûëy≥ =
FIO_TYPE_FILE
)) {

557 
Êags
;

559 i‡(
td
->
o
.
Ádvi£_höt
 =
F_ADV_TYPE
) {

560 i‡(
	`td_øndom
(
td
))

561 
Êags
 = 
POSIX_FADV_RANDOM
;

563 
Êags
 = 
POSIX_FADV_SEQUENTIAL
;

564 } i‡(
td
->
o
.
Ádvi£_höt
 =
F_ADV_RANDOM
)

565 
Êags
 = 
POSIX_FADV_RANDOM
;

566 i‡(
td
->
o
.
Ádvi£_höt
 =
F_ADV_SEQUENTIAL
)

567 
Êags
 = 
POSIX_FADV_SEQUENTIAL
;

569 
	`log_îr
("fio: unknown fadviseÅype %d\n",

570 
td
->
o
.
Ádvi£_höt
);

571 
Êags
 = 
POSIX_FADV_NORMAL
;

574 i‡(
	`posix_Ádvi£
(
f
->
fd
, f->
fûe_off£t
, f->
io_size
, 
Êags
) < 0) {

575 i‡(!
	`fio_did_w¨n
(
FIO_WARN_FADVISE
))

576 
	`log_îr
("fio: fadvise hint failed\n");

579 #ifde‡
FIO_HAVE_WRITE_HINT


580 i‡(
	`fio_›ti⁄_is_£t
(&
td
->
o
, 
wrôe_höt
) &&

581 (
f
->
fûëy≥
 =
FIO_TYPE_BLOCK
 || f->fûëy≥ =
FIO_TYPE_FILE
)) {

582 
uöt64_t
 
höt
 = 
td
->
o
.
wrôe_höt
;

583 
cmd
;

590 i‡(
td
->
o
.
odúe˘
)

591 
cmd
 = 
F_SET_FILE_RW_HINT
;

593 
cmd
 = 
F_SET_RW_HINT
;

595 i‡(
	`f˙é
(
f
->
fd
, 
cmd
, &
höt
) < 0) {

596 
	`td_vîr‹
(
td
, 
î∫o
, "fcntl write hint");

597 
îr
;

602 i‡(
td
->
o
.
odúe˘
 && !
OS_O_DIRECT
 && 
	`fio_£t_dúe˘io
—d, 
f
))

603 
îr
;

605 
d⁄e
:

606 
	`log_fûe
(
td
, 
f
, 
FIO_LOG_OPEN_FILE
);

608 
îr
:

609 
	`disk_utû_dec
(
f
->
du
);

610 i‡(
td
->
io_›s
->
˛o£_fûe
)

611 
td
->
io_›s
->
	`˛o£_fûe
—d, 
f
);

613 
	}
}

615 
	$td_io_˛o£_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

617 i‡(!
	`fio_fûe_˛osög
(
f
))

618 
	`log_fûe
(
td
, 
f
, 
FIO_LOG_CLOSE_FILE
);

623 
	`fio_fûe_£t_˛osög
(
f
);

625  
	`put_fûe
(
td
, 
f
);

626 
	}
}

628 
	$td_io_u∆ök_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

630 i‡(
td
->
io_›s
->
u∆ök_fûe
)

631  
td
->
io_›s
->
	`u∆ök_fûe
—d, 
f
);

633 
ªt
;

635 
ªt
 = 
	`u∆ök
(
f
->
fûe_«me
);

636 i‡(
ªt
 < 0)

637  
î∫o
;

641 
	}
}

643 
	$td_io_gë_fûe_size
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

645 i‡(!
td
->
io_›s
->
gë_fûe_size
)

648  
td
->
io_›s
->
	`gë_fûe_size
—d, 
f
);

649 
	}
}

651 #ifde‡
CONFIG_DYNAMIC_ENGINES


654 
	$fio_lﬂd_dy«mic_ígöes
(
thªad_d©a
 *
td
)

656 
DIR
 *
dúh™dÀ
 = 
NULL
;

657 
dúít
 *dúíà
NULL
;

658 
ígöe_∑th
[
PATH_MAX
];

660 
dúh™dÀ
 = 
	`›ídú
(
FIO_EXT_ENG_DIR
);

661 i‡(!
dúh™dÀ
)

664 (
dúít
 = 
	`ªaddú
(
dúh™dÀ
)Ë!
NULL
) {

665 i‡(!
	`°rcmp
(
dúít
->
d_«me
, ".") ||

666 !
	`°rcmp
(
dúít
->
d_«me
, ".."))

669 
	`•rötf
(
ígöe_∑th
, "%s/%s", 
FIO_EXT_ENG_DIR
, 
dúít
->
d_«me
);

670 
	`dl›í_i€ngöe
(
td
, 
ígöe_∑th
);

673 
	`˛o£dú
(
dúh™dÀ
);

674 
	}
}

676 
	#fio_lﬂd_dy«mic_ígöes
(
td
Ëdÿ{ } 0)

	)

679 
	$fio_show_i€ngöe_hñp
(c⁄° *
ígöe
)

681 
Êi°_hód
 *
íåy
;

682 
thªad_d©a
 
td
;

683 
i€ngöe_›s
 *
io_›s
;

684 *
£p
;

685 
ªt
 = 1;

687 
	`mem£t
(&
td
, 0, (
thªad_d©a
));

689 i‡(!
ígöe
 || !*engine) {

690 
	`log_öfo
("Available IOÉngines:\n");

691 
	`fio_lﬂd_dy«mic_ígöes
(&
td
);

692 
	`Êi°_f‹_óch
(
íåy
, &
ígöe_li°
) {

693 
io_›s
 = 
	`Êi°_íåy
(
íåy
, 
i€ngöe_›s
, 
li°
);

694 
	`log_öfo
("\t%s\n", 
io_›s
->
«me
);

698 
£p
 = 
	`°rchr
(
ígöe
, ',');

699 i‡(
£p
) {

700 *
£p
 = 0;

701 
£p
++;

704 
td
.
o
.
i€ngöe
 = (*)
ígöe
;

705 
td
.
io_›s
 = 
	`lﬂd_i€ngöe
(&td);

707 i‡(!
td
.
io_›s
) {

708 
	`log_öfo
("IOÉngöê%†nŸ found\n", 
ígöe
);

712 i‡(
td
.
io_›s
->
›ti⁄s
)

713 
ªt
 = 
	`show_cmd_hñp
(
td
.
io_›s
->
›ti⁄s
, 
£p
);

715 
	`log_öfo
("IOÉngöê%†ha†nÿ›ti⁄s\n", 
td
.
io_›s
->
«me
);

717 
	`‰ì_i€ngöe
(&
td
);

718  
ªt
;

719 
	}
}

	@ioengines.h

1 #i‚de‡
FIO_IOENGINE_H


2 
	#FIO_IOENGINE_H


	)

4 
	~<°ddef.h
>

6 
	~"compûî/compûî.h
"

7 
	~"Êi°.h
"

8 
	~"io_u.h
"

9 
	~"zbd_ty≥s.h
"

11 
	#FIO_IOOPS_VERSION
 31

	)

13 #i‚de‡
CONFIG_DYNAMIC_ENGINES


14 
	#FIO_STATIC
 

	)

16 
	#FIO_STATIC


	)

22 
	efio_q_°©us
 {

23 
	mFIO_Q_COMPLETED
 = 0,

24 
	mFIO_Q_QUEUED
 = 1,

25 
	mFIO_Q_BUSY
 = 2,

28 
	si€ngöe_›s
 {

29 
Êi°_hód
 
	mli°
;

30 c⁄° *
	m«me
;

31 
	mvîsi⁄
;

32 
	mÊags
;

33 *
	mdlh™dÀ
;

34 (*
	m£tup
)(
	mthªad_d©a
 *);

35 (*
	möô
)(
	mthªad_d©a
 *);

36 (*
	mpo°_öô
)(
	mthªad_d©a
 *);

37 (*
	m¥ï
)(
	mthªad_d©a
 *, 
	mio_u
 *);

38 
fio_q_°©us
 (*
queue
)(
	mthªad_d©a
 *, 
	mio_u
 *);

39 (*
	mcommô
)(
	mthªad_d©a
 *);

40 (*
	mgëevíts
)(
	mthªad_d©a
 *, , , c⁄° 
	mtime•ec
 *);

41 
	mio_u
 *(*
	mevít
)(
	mthªad_d©a
 *, );

42 *(*
	mîrdëaûs
)(
	mio_u
 *);

43 (*
	mˇn˚l
)(
	mthªad_d©a
 *, 
	mio_u
 *);

44 (*
	m˛ónup
)(
	mthªad_d©a
 *);

45 (*
	m›í_fûe
)(
	mthªad_d©a
 *, 
	mfio_fûe
 *);

46 (*
	m˛o£_fûe
)(
	mthªad_d©a
 *, 
	mfio_fûe
 *);

47 (*
	mövÆid©e
)(
	mthªad_d©a
 *, 
	mfio_fûe
 *);

48 (*
	mu∆ök_fûe
)(
	mthªad_d©a
 *, 
	mfio_fûe
 *);

49 (*
	mgë_fûe_size
)(
	mthªad_d©a
 *, 
	mfio_fûe
 *);

50 (*
	m¥ï›uœã_fûe
)(
	mthªad_d©a
 *, 
	mfio_fûe
 *);

51 (*
	mãrmö©e
)(
	mthªad_d©a
 *);

52 (*
	miomem_Æloc
)(
	mthªad_d©a
 *, 
	msize_t
);

53 (*
	miomem_‰ì
)(
	mthªad_d©a
 *);

54 (*
	mio_u_öô
)(
	mthªad_d©a
 *, 
	mio_u
 *);

55 (*
	mio_u_‰ì
)(
	mthªad_d©a
 *, 
	mio_u
 *);

56 (*
	mgë_z⁄ed_modñ
)(
thªad_d©a
 *
	mtd
,

57 
fio_fûe
 *
	mf
, 
	mzbd_z⁄ed_modñ
 *);

58 (*
	mªp‹t_z⁄es
)(
	mthªad_d©a
 *, 
	mfio_fûe
 *,

59 
	muöt64_t
, 
	mzbd_z⁄e
 *, );

60 (*
	mª£t_wp
)(
	mthªad_d©a
 *, 
	mfio_fûe
 *,

61 
	muöt64_t
, uint64_t);

62 (*
	mgë_max_›í_z⁄es
)(
	mthªad_d©a
 *, 
	mfio_fûe
 *,

64 
	m›ti⁄_°ru˘_size
;

65 
fio_›ti⁄
 *
	m›ti⁄s
;

68 
	efio_i€ngöe_Êags
 {

69 
	mFIO_SYNCIO
 = 1 << 0,

70 
	mFIO_RAWIO
 = 1 << 1,

71 
	mFIO_DISKLESSIO
 = 1 << 2,

72 
	mFIO_NOEXTEND
 = 1 << 3,

73 
	mFIO_NODISKUTIL
 = 1 << 4,

74 
	mFIO_UNIDIR
 = 1 << 5,

75 
	mFIO_NOIO
 = 1 << 6,

76 
	mFIO_PIPEIO
 = 1 << 7,

77 
	mFIO_BARRIER
 = 1 << 8,

78 
	mFIO_MEMALIGN
 = 1 << 9,

79 
	mFIO_BIT_BASED
 = 1 << 10,

80 
	mFIO_FAKEIO
 = 1 << 11,

81 
	mFIO_NOSTATS
 = 1 << 12,

82 
	mFIO_NOFILEHASH
 = 1 << 13,

83 
	mFIO_ASYNCIO_SYNC_TRIM


85 
	mFIO_NO_OFFLOAD
 = 1 << 15,

86 
	mFIO_ASYNCIO_SETS_ISSUE_TIME


93 (*
	tgë_i€ngöe_t
)(
	ti€ngöe_›s
 **);

98 
__mu°_check
 
	`td_io_öô
(
thªad_d©a
 *);

99 
__mu°_check
 
	`td_io_¥ï
(
thªad_d©a
 *, 
io_u
 *);

100 
fio_q_°©us
 
__mu°_check
 
	`td_io_queue
(
thªad_d©a
 *, 
io_u
 *);

101 
__mu°_check
 
	`td_io_gëevíts
(
thªad_d©a
 *, , , c⁄° 
time•ec
 *);

102 
	`td_io_commô
(
thªad_d©a
 *);

103 
__mu°_check
 
	`td_io_›í_fûe
(
thªad_d©a
 *, 
fio_fûe
 *);

104 
	`td_io_˛o£_fûe
(
thªad_d©a
 *, 
fio_fûe
 *);

105 
	`td_io_u∆ök_fûe
(
thªad_d©a
 *, 
fio_fûe
 *);

106 
__mu°_check
 
	`td_io_gë_fûe_size
(
thªad_d©a
 *, 
fio_fûe
 *);

108 
i€ngöe_›s
 *
	`lﬂd_i€ngöe
(
thªad_d©a
 *);

109 
	`ªgi°î_i€ngöe
(
i€ngöe_›s
 *);

110 
	`uƒegi°î_i€ngöe
(
i€ngöe_›s
 *);

111 
	`‰ì_i€ngöe
(
thªad_d©a
 *);

112 
	`˛o£_i€ngöe
(
thªad_d©a
 *);

114 
	`fio_show_i€ngöe_hñp
(c⁄° *
ígöe
);

	@iolog.c

5 
	~<°dio.h
>

6 
	~<°dlib.h
>

7 
	~<as£π.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/°©.h
>

10 
	~<uni°d.h
>

11 #ifde‡
CONFIG_ZLIB


12 
	~<zlib.h
>

15 
	~"Êi°.h
"

16 
	~"fio.h
"

17 
	~"åim.h
"

18 
	~"fûñock.h
"

19 
	~"smÆloc.h
"

20 
	~"blkåa˚.h
"

21 
	~"psh¨ed.h
"

22 
	~"lib/roundup.h
"

24 
	~<√töë/ö.h
>

25 
	~<√töë/t˝.h
>

26 
	~<¨∑/öë.h
>

27 
	~<sys/°©.h
>

28 
	~<sys/sockë.h
>

29 
	~<sys/un.h
>

31 
iﬁog_Êush
(
io_log
 *
log
);

33 c⁄° 
	giﬁog_vî2
[] = "fio version 2 iolog";

34 c⁄° 
	giﬁog_vî3
[] = "fio version 3 iolog";

36 
	$queue_io_põ˚
(
thªad_d©a
 *
td
, 
io_põ˚
 *
ùo
)

38 
	`Êi°_add_èû
(&
ùo
->
li°
, &
td
->
io_log_li°
);

39 
td
->
tŸÆ_io_size
 +
ùo
->
Àn
;

40 
	}
}

42 
	$log_io_u
(c⁄° 
thªad_d©a
 *
td
, c⁄° 
io_u
 *io_u)

44 
time•ec
 
now
;

46 i‡(!
td
->
o
.
wrôe_iﬁog_fûe
)

49 
	`fio_gëtime
(&
now
, 
NULL
);

50 
	`Ârötf
(
td
->
iﬁog_f
, "%llu %s %s %llu %llu\n",

51 (Ë
	`utime_sö˚_now
(&
td
->
io_log_°¨t_time
),

52 
io_u
->
fûe
->
fûe_«me
, 
	`io_ddú_«me
(io_u->
ddú
), io_u->
off£t
,

53 
io_u
->
buÊí
);

55 
	}
}

57 
	$log_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

58 
fûe_log_a˘
 
wh©
)

60 c⁄° *
a˘
[] = { "add", "open", "close" };

61 
time•ec
 
now
;

63 
	`as£π
(
wh©
 < 3);

65 i‡(!
td
->
o
.
wrôe_iﬁog_fûe
)

72 i‡(!
td
->
iﬁog_f
)

75 
	`fio_gëtime
(&
now
, 
NULL
);

76 
	`Ârötf
(
td
->
iﬁog_f
, "%llu %s %s\n",

77 (Ë
	`utime_sö˚_now
(&
td
->
io_log_°¨t_time
),

78 
f
->
fûe_«me
, 
a˘
[
wh©
]);

79 
	}
}

81 
	$iﬁog_dñay
(
thªad_d©a
 *
td
, 
dñay
)

83 
uöt64_t
 
u£c
 = 
	`utime_sö˚_now
(&
td
->
œ°_issue
);

84 
‹ig_dñay
 = 
dñay
;

85 
uöt64_t
 
this_dñay
;

86 
time•ec
 
ts
;

88 i‡(
dñay
 < 
td
->
time_off£t
) {

89 
td
->
time_off£t
 = 0;

93 
dñay
 -
td
->
time_off£t
;

94 i‡(
dñay
 < 
u£c
)

97 
dñay
 -
u£c
;

99 
	`fio_gëtime
(&
ts
, 
NULL
);

100 
dñay
 && !
td
->
ãrmö©e
) {

101 
this_dñay
 = 
dñay
;

102 i‡(
this_dñay
 > 500000)

103 
this_dñay
 = 500000;

105 
	`u£c_¶ìp
(
td
, 
this_dñay
);

106 
dñay
 -
this_dñay
;

109 
u£c
 = 
	`utime_sö˚_now
(&
ts
);

110 i‡(
u£c
 > 
‹ig_dñay
)

111 
td
->
time_off£t
 = 
u£c
 - 
‹ig_dñay
;

113 
td
->
time_off£t
 = 0;

114 
	}
}

116 
	$ùo_•ecül
(
thªad_d©a
 *
td
, 
io_põ˚
 *
ùo
)

118 
fio_fûe
 *
f
;

119 
ªt
;

124 i‡(
ùo
->
ddú
 !
DDIR_INVAL
)

127 
f
 = 
td
->
fûes
[
ùo
->
fûío
];

129 i‡(
ùo
->
dñay
)

130 
	`iﬁog_dñay
(
td
, 
ùo
->
dñay
);

131 i‡(
	`fio_fûl_issue_time
(
td
))

132 
	`fio_gëtime
(&
td
->
œ°_issue
, 
NULL
);

133 
ùo
->
fûe_a˘i⁄
) {

134 
FIO_LOG_OPEN_FILE
:

135 i‡(
td
->
o
.
ª∂ay_ªdúe˘
 && 
	`fio_fûe_›í
(
f
)) {

136 
	`d¥öt
(
FD_FILE
, "iolog: ignoringÑe-open of file %s\n",

137 
f
->
fûe_«me
);

140 
ªt
 = 
	`td_io_›í_fûe
(
td
, 
f
);

141 i‡(!
ªt
)

143 
	`td_vîr‹
(
td
, 
ªt
, "iolog open file");

145 
FIO_LOG_CLOSE_FILE
:

146 
	`td_io_˛o£_fûe
(
td
, 
f
);

148 
FIO_LOG_UNLINK_FILE
:

149 
	`td_io_u∆ök_fûe
(
td
, 
f
);

151 
FIO_LOG_ADD_FILE
:

157 
	`log_îr
("fio: bad fûêa˘i⁄ %d\n", 
ùo
->
fûe_a˘i⁄
);

162 
	}
}

164 
boﬁ
 
ªad_iﬁog
(
thªad_d©a
 *
td
);

166 
	$dñay_sö˚_âime
(c⁄° 
thªad_d©a
 *
td
,

167 
time
)

169 
tmp
;

170 
sˇÀ
;

171 c⁄° *
œ°_âime
 = &
td
->
io_log_œ°_âime
;

173 i‡(!*
œ°_âime
 || 
td
->
o
.
no_°Æl
 || 
time
 < *last_ttime)

175 i‡(
td
->
o
.
ª∂ay_time_sˇÀ
 == 100)

176  
time
 - *
œ°_âime
;

179 
sˇÀ
 = (Ë100.0 / (Ë
td
->
o
.
ª∂ay_time_sˇÀ
;

180 
tmp
 = 
time
 - *
œ°_âime
;

181  
tmp
 * 
sˇÀ
;

182 
	}
}

184 
	$ªad_iﬁog_gë
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

186 
io_põ˚
 *
ùo
;

187 
ñ≠£d
;

189 !
	`Êi°_em±y
(&
td
->
io_log_li°
)) {

190 
ªt
;

192 i‡(
td
->
o
.
ªad_iﬁog_chunked
) {

193 i‡(
td
->
io_log_checkm¨k
 =td->
io_log_cuºít
) {

194 i‡(
td
->
io_log_blkåa˚
) {

195 i‡(!
	`ªad_blkåa˚
(
td
))

198 i‡(!
	`ªad_iﬁog
(
td
))

202 
td
->
io_log_cuºít
--;

204 
ùo
 = 
	`Êi°_fú°_íåy
(&
td
->
io_log_li°
, 
io_põ˚
, 
li°
);

205 
	`Êi°_dñ
(&
ùo
->
li°
);

206 
	`ªmove_åim_íåy
(
td
, 
ùo
);

208 
ªt
 = 
	`ùo_•ecül
(
td
, 
ùo
);

209 i‡(
ªt
 < 0) {

210 
	`‰ì
(
ùo
);

212 } i‡(
ªt
 > 0) {

213 
	`‰ì
(
ùo
);

217 
io_u
->
ddú
 = 
ùo
->ddir;

218 i‡(
ùo
->
ddú
 !
DDIR_WAIT
) {

219 
io_u
->
off£t
 = 
ùo
->offset;

220 
io_u
->
vîify_off£t
 = 
ùo
->
off£t
;

221 
io_u
->
buÊí
 = 
ùo
->
Àn
;

222 
io_u
->
fûe
 = 
td
->
fûes
[
ùo
->
fûío
];

223 
	`gë_fûe
(
io_u
->
fûe
);

224 
	`d¥öt
(
FD_IO
, "iﬁog: gë %Œu/%Œu/%s\n", 
io_u
->
off£t
,

225 
io_u
->
buÊí
, io_u->
fûe
->
fûe_«me
);

226 i‡(
ùo
->
dñay
)

227 
	`iﬁog_dñay
(
td
, 
ùo
->
dñay
);

229 
ñ≠£d
 = 
	`mtime_sö˚_gíesis
();

230 i‡(
ùo
->
dñay
 > 
ñ≠£d
)

231 
	`u£c_¶ìp
(
td
, (
ùo
->
dñay
 - 
ñ≠£d
) * 1000);

234 
	`‰ì
(
ùo
);

236 i‡(
io_u
->
ddú
 !
DDIR_WAIT
)

240 
td
->
d⁄e
 = 1;

242 
	}
}

244 
	$¥u√_io_põ˚_log
(
thªad_d©a
 *
td
)

246 
io_põ˚
 *
ùo
;

247 
fio_rb_node
 *
n
;

249 (
n
 = 
	`rb_fú°
(&
td
->
io_hi°_åì
)Ë!
NULL
) {

250 
ùo
 = 
	`rb_íåy
(
n
, 
io_põ˚
, 
rb_node
);

251 
	`rb_îa£
(
n
, &
td
->
io_hi°_åì
);

252 
	`ªmove_åim_íåy
(
td
, 
ùo
);

253 
td
->
io_hi°_Àn
--;

254 
	`‰ì
(
ùo
);

257 !
	`Êi°_em±y
(&
td
->
io_hi°_li°
)) {

258 
ùo
 = 
	`Êi°_fú°_íåy
(&
td
->
io_hi°_li°
, 
io_põ˚
, 
li°
);

259 
	`Êi°_dñ
(&
ùo
->
li°
);

260 
	`ªmove_åim_íåy
(
td
, 
ùo
);

261 
td
->
io_hi°_Àn
--;

262 
	`‰ì
(
ùo
);

264 
	}
}

269 
	$log_io_põ˚
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

271 
fio_rb_node
 **
p
, *
∑ª¡
;

272 
io_põ˚
 *
ùo
, *
__ùo
;

274 
ùo
 = 
	`ˇŒoc
(1, (
io_põ˚
));

275 
	`öô_ùo
(
ùo
);

276 
ùo
->
fûe
 = 
io_u
->file;

277 
ùo
->
off£t
 = 
io_u
->offset;

278 
ùo
->
Àn
 = 
io_u
->
buÊí
;

279 
ùo
->
numbîio
 = 
io_u
->numberio;

280 
ùo
->
Êags
 = 
IP_F_IN_FLIGHT
;

282 
io_u
->
ùo
 = ipo;

284 i‡(
	`io_u_should_åim
(
td
, 
io_u
)) {

285 
	`Êi°_add_èû
(&
ùo
->
åim_li°
, &
td
->trim_list);

286 
td
->
åim_íåõs
++;

294 i‡(
	`fûe_øndomm≠
(
td
, 
ùo
->
fûe
)) {

295 
	`INIT_FLIST_HEAD
(&
ùo
->
li°
);

296 
	`Êi°_add_èû
(&
ùo
->
li°
, &
td
->
io_hi°_li°
);

297 
ùo
->
Êags
 |
IP_F_ONLIST
;

298 
td
->
io_hi°_Àn
++;

302 
	`RB_CLEAR_NODE
(&
ùo
->
rb_node
);

307 
ª°¨t
:

308 
p
 = &
td
->
io_hi°_åì
.
rb_node
;

309 
∑ª¡
 = 
NULL
;

310 *
p
) {

311 
ovîœp
 = 0;

312 
∑ª¡
 = *
p
;

314 
__ùo
 = 
	`rb_íåy
(
∑ª¡
, 
io_põ˚
, 
rb_node
);

315 i‡(
ùo
->
fûe
 < 
__ùo
->file)

316 
p
 = &(*p)->
rb_À·
;

317 i‡(
ùo
->
fûe
 > 
__ùo
->file)

318 
p
 = &(*p)->
rb_right
;

319 i‡(
ùo
->
off£t
 < 
__ùo
->offset) {

320 
p
 = &(*p)->
rb_À·
;

321 
ovîœp
 = 
ùo
->
off£t
 + ipo->
Àn
 > 
__ùo
->offset;

323 i‡(
ùo
->
off£t
 > 
__ùo
->offset) {

324 
p
 = &(*p)->
rb_right
;

325 
ovîœp
 = 
__ùo
->
off£t
 + __ùo->
Àn
 > 
ùo
->offset;

328 
ovîœp
 = 1;

330 i‡(
ovîœp
) {

331 
	`d¥öt
(
FD_IO
, "iolog: overlap %llu/%lu, %llu/%lu\n",

332 
__ùo
->
off£t
, __ùo->
Àn
,

333 
ùo
->
off£t
, ipo->
Àn
);

334 
td
->
io_hi°_Àn
--;

335 
	`rb_îa£
(
∑ª¡
, &
td
->
io_hi°_åì
);

336 
	`ªmove_åim_íåy
(
td
, 
__ùo
);

337 i‡(!(
__ùo
->
Êags
 & 
IP_F_IN_FLIGHT
))

338 
	`‰ì
(
__ùo
);

339 
ª°¨t
;

343 
	`rb_lök_node
(&
ùo
->
rb_node
, 
∑ª¡
, 
p
);

344 
	`rb_ö£π_cﬁ‹
(&
ùo
->
rb_node
, &
td
->
io_hi°_åì
);

345 
ùo
->
Êags
 |
IP_F_ONRB
;

346 
td
->
io_hi°_Àn
++;

347 
	}
}

349 
	$u∆og_io_põ˚
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

351 
io_põ˚
 *
ùo
 = 
io_u
->ipo;

353 i‡(
td
->
ts
.
ƒ_block_öfos
) {

354 
uöt32_t
 *
öfo
 = 
	`io_u_block_öfo
(
td
, 
io_u
);

355 i‡(
	`BLOCK_INFO_STATE
(*
öfo
Ë< 
BLOCK_STATE_TRIM_FAILURE
) {

356 i‡(
io_u
->
ddú
 =
DDIR_TRIM
)

357 *
öfo
 = 
	`BLOCK_INFO_SET_STATE
(*info,

358 
BLOCK_STATE_TRIM_FAILURE
);

359 i‡(
io_u
->
ddú
 =
DDIR_WRITE
)

360 *
öfo
 = 
	`BLOCK_INFO_SET_STATE
(*info,

361 
BLOCK_STATE_WRITE_FAILURE
);

365 i‡(!
ùo
)

368 i‡(
ùo
->
Êags
 & 
IP_F_ONRB
)

369 
	`rb_îa£
(&
ùo
->
rb_node
, &
td
->
io_hi°_åì
);

370 i‡(
ùo
->
Êags
 & 
IP_F_ONLIST
)

371 
	`Êi°_dñ
(&
ùo
->
li°
);

373 
	`‰ì
(
ùo
);

374 
io_u
->
ùo
 = 
NULL
;

375 
td
->
io_hi°_Àn
--;

376 
	}
}

378 
	$åim_io_põ˚
(c⁄° 
io_u
 *io_u)

380 
io_põ˚
 *
ùo
 = 
io_u
->ipo;

382 i‡(!
ùo
)

385 
ùo
->
Àn
 = 
io_u
->
x„r_buÊí
 - io_u->
ªsid
;

386 
	}
}

388 
	$wrôe_iﬁog_˛o£
(
thªad_d©a
 *
td
)

390 i‡(!
td
->
iﬁog_f
)

393 
	`fÊush
(
td
->
iﬁog_f
);

394 
	`f˛o£
(
td
->
iﬁog_f
);

395 
	`‰ì
(
td
->
iﬁog_buf
);

396 
td
->
iﬁog_f
 = 
NULL
;

397 
td
->
iﬁog_buf
 = 
NULL
;

398 
	}
}

400 
öt64_t
 
	$iﬁog_ôems_to_„tch
(
thªad_d©a
 *
td
)

402 
time•ec
 
now
;

403 
uöt64_t
 
ñ≠£d
;

404 
uöt64_t
 
f‹_1s
;

405 
öt64_t
 
ôems_to_„tch
;

407 i‡(!
td
->
io_log_highm¨k
)

411 
	`fio_gëtime
(&
now
, 
NULL
);

412 
ñ≠£d
 = 
	`¡ime_sö˚
(&
td
->
io_log_highm¨k_time
, &
now
);

413 i‡(
ñ≠£d
) {

414 
f‹_1s
 = (
td
->
io_log_highm¨k
 -Åd->
io_log_cuºít
Ë* 1000000000 / 
ñ≠£d
;

415 
ôems_to_„tch
 = 
f‹_1s
 - 
td
->
io_log_cuºít
;

416 i‡(
ôems_to_„tch
 < 0)

417 
ôems_to_„tch
 = 0;

419 
ôems_to_„tch
 = 0;

421 
td
->
io_log_highm¨k
 =Åd->
io_log_cuºít
 + 
ôems_to_„tch
;

422 
td
->
io_log_checkm¨k
 = (td->
io_log_highm¨k
 + 1) / 2;

423 
	`fio_gëtime
(&
td
->
io_log_highm¨k_time
, 
NULL
);

425  
ôems_to_„tch
;

426 
	}
}

428 
	#io_a˘
(
_td
, 
_r
Ë(((_td)->
io_log_vîsi⁄
 =3 && (
r
) == 5) || \

429 ((
_td
)->
io_log_vîsi⁄
 =2 && (
r
Ë=4))

	)

430 
	#fûe_a˘
(
_td
, 
_r
Ë(((_td)->
io_log_vîsi⁄
 =3 && (
r
) == 3) || \

431 ((
_td
)->
io_log_vîsi⁄
 =2 && (
r
Ë=2))

	)

437 
boﬁ
 
	$ªad_iﬁog
(
thªad_d©a
 *
td
)

439 
off£t
;

440 
byãs
;

441 
dñay
 = 0;

442 
ªads
, 
wrôes
, 
waôs
, 
fûío
 = 0, 
fûe_a˘i⁄
 = 0;

443 *
r‚ame
, *
‚ame
, *
a˘
;

444 *
°r
, *
p
;

445 
fio_ddú
 
rw
;

446 
boﬁ
 
ªÆloc
 = 
Ál£
;

447 
öt64_t
 
ôems_to_„tch
 = 0;

448 
syncs
;

450 i‡(
td
->
o
.
ªad_iﬁog_chunked
) {

451 
ôems_to_„tch
 = 
	`iﬁog_ôems_to_„tch
(
td
);

452 i‡(!
ôems_to_„tch
)

453  
åue
;

460 
°r
 = 
	`mÆloc
(4096);

461 
r‚ame
 = 
‚ame
 = 
	`mÆloc
(256+16);

462 
a˘
 = 
	`mÆloc
(256+16);

464 
syncs
 = 
ªads
 = 
wrôes
 = 
waôs
 = 0;

465 (
p
 = 
	`fgës
(
°r
, 4096, 
td
->
io_log_rfûe
)Ë!
NULL
) {

466 
io_põ˚
 *
ùo
;

467 
r
;

468 
âime
;

470 i‡(
td
->
io_log_vîsi⁄
 == 3) {

471 
r
 = 
	`ssˇnf
(
p
, "%Œu %256†%256†%Œu %u", &
âime
, 
r‚ame
, 
a˘
,

472 &
off£t
, &
byãs
);

473 
dñay
 = 
	`dñay_sö˚_âime
(
td
, 
âime
);

474 
td
->
io_log_œ°_âime
 = 
âime
;

478 i‡(!
	`°rcmp
(
a˘
, "wait")) {

479 
	`log_îr
("iolog: ignoring wait command with"

480 " vîsi⁄ 3 f‹ fûê%s\n", 
‚ame
);

484 
r
 = 
	`ssˇnf
(
p
, "%256†%256†%Œu %u", 
r‚ame
, 
a˘
, &
off£t
, &
byãs
);

486 i‡(
td
->
o
.
ª∂ay_ªdúe˘
)

487 
‚ame
 = 
td
->
o
.
ª∂ay_ªdúe˘
;

489 i‡(
	`io_a˘
(
td
, 
r
)) {

493 i‡(!
	`°rcmp
(
a˘
, "wait"))

494 
rw
 = 
DDIR_WAIT
;

495 i‡(!
	`°rcmp
(
a˘
, "read"))

496 
rw
 = 
DDIR_READ
;

497 i‡(!
	`°rcmp
(
a˘
, "write"))

498 
rw
 = 
DDIR_WRITE
;

499 i‡(!
	`°rcmp
(
a˘
, "sync"))

500 
rw
 = 
DDIR_SYNC
;

501 i‡(!
	`°rcmp
(
a˘
, "datasync"))

502 
rw
 = 
DDIR_DATASYNC
;

503 i‡(!
	`°rcmp
(
a˘
, "trim"))

504 
rw
 = 
DDIR_TRIM
;

506 
	`log_îr
("fio: bad iolog fileáction: %s\n",

507 
a˘
);

510 
fûío
 = 
	`gë_fûío
(
td
, 
‚ame
);

511 } i‡(
	`fûe_a˘
(
td
, 
r
)) {

512 
rw
 = 
DDIR_INVAL
;

513 i‡(!
	`°rcmp
(
a˘
, "add")) {

514 i‡(
td
->
o
.
ª∂ay_ªdúe˘
 &&

515 
	`gë_fûío
(
td
, 
‚ame
) != -1) {

516 
	`d¥öt
(
FD_FILE
, "iolog: ignoring"

517 "Ñe-add o‡fûê%s\n", 
‚ame
);

519 
fûío
 = 
	`add_fûe
(
td
, 
‚ame
,Åd->
subjob_numbî
, 1);

520 
fûe_a˘i⁄
 = 
FIO_LOG_ADD_FILE
;

522 } i‡(!
	`°rcmp
(
a˘
, "open")) {

523 
fûío
 = 
	`gë_fûío
(
td
, 
‚ame
);

524 
fûe_a˘i⁄
 = 
FIO_LOG_OPEN_FILE
;

525 } i‡(!
	`°rcmp
(
a˘
, "close")) {

526 
fûío
 = 
	`gë_fûío
(
td
, 
‚ame
);

527 
fûe_a˘i⁄
 = 
FIO_LOG_CLOSE_FILE
;

529 
	`log_îr
("fio: bad iolog fileáction: %s\n",

530 
a˘
);

534 
	`log_îr
("bad iﬁog%d: %s\n", 
td
->
io_log_vîsi⁄
, 
p
);

538 i‡(
rw
 =
DDIR_READ
)

539 
ªads
++;

540 i‡(
rw
 =
DDIR_WRITE
) {

544 i‡(
ªad_⁄ly
)

546 
wrôes
++;

547 } i‡(
rw
 =
DDIR_WAIT
) {

548 i‡(
td
->
o
.
no_°Æl
)

550 
waôs
++;

551 } i‡(
rw
 =
DDIR_INVAL
) {

552 } i‡(
	`ddú_sync
(
rw
)) {

553 
syncs
++;

555 
	`log_îr
("bad ddú: %d\n", 
rw
);

562 
ùo
 = 
	`ˇŒoc
(1, (*ipo));

563 
	`öô_ùo
(
ùo
);

564 
ùo
->
ddú
 = 
rw
;

565 i‡(
td
->
io_log_vîsi⁄
 == 3)

566 
ùo
->
dñay
 = delay;

567 i‡(
rw
 =
DDIR_WAIT
) {

568 
ùo
->
dñay
 = 
off£t
;

570 i‡(
td
->
o
.
ª∂ay_sˇÀ
)

571 
ùo
->
off£t
 = off£à/ 
td
->
o
.
ª∂ay_sˇÀ
;

573 
ùo
->
off£t
 = offset;

574 
	`ùo_byãs_Æign
(
td
->
o
.
ª∂ay_Æign
, 
ùo
);

576 
ùo
->
Àn
 = 
byãs
;

577 i‡(
rw
 !
DDIR_INVAL
 && 
byãs
 > 
td
->
o
.
max_bs
[rw]) {

578 
ªÆloc
 = 
åue
;

579 
td
->
o
.
max_bs
[
rw
] = 
byãs
;

581 
ùo
->
fûío
 = fileno;

582 
ùo
->
fûe_a˘i⁄
 = file_action;

583 
td
->
o
.
size
 +
byãs
;

586 
	`queue_io_põ˚
(
td
, 
ùo
);

588 i‡(
td
->
o
.
ªad_iﬁog_chunked
) {

589 
td
->
io_log_cuºít
++;

590 
ôems_to_„tch
--;

591 i‡(
ôems_to_„tch
 == 0)

596 
	`‰ì
(
°r
);

597 
	`‰ì
(
a˘
);

598 
	`‰ì
(
r‚ame
);

600 i‡(
td
->
o
.
ªad_iﬁog_chunked
) {

601 
td
->
io_log_highm¨k
 =Åd->
io_log_cuºít
;

602 
td
->
io_log_checkm¨k
 = (td->
io_log_highm¨k
 + 1) / 2;

603 
	`fio_gëtime
(&
td
->
io_log_highm¨k_time
, 
NULL
);

606 i‡(
wrôes
 && 
ªad_⁄ly
) {

607 
	`log_îr
("fio: <%s> skipsÑeplay of %d writes dueÅo"

608 "Ñód-⁄ly\n", 
td
->
o
.
«me
, 
wrôes
);

609 
wrôes
 = 0;

611 i‡(
syncs
)

612 
td
->
Êags
 |
TD_F_SYNCS
;

614 i‡(
td
->
o
.
ªad_iﬁog_chunked
) {

615 i‡(
td
->
io_log_cuºít
 == 0) {

616  
Ál£
;

618 
td
->
o
.
td_ddú
 = 
TD_DDIR_RW
;

619 i‡(
ªÆloc
 && 
td
->
‹ig_buf„r
)

621 
	`io_u_quõs˚
(
td
);

622 
	`‰ì_io_mem
(
td
);

623 
	`öô_io_u_buf„rs
(
td
);

625  
åue
;

628 i‡(!
ªads
 && !
wrôes
 && !
waôs
)

629  
Ál£
;

630 i‡(
ªads
 && !
wrôes
)

631 
td
->
o
.
td_ddú
 = 
TD_DDIR_READ
;

632 i‡(!
ªads
 && 
wrôes
)

633 
td
->
o
.
td_ddú
 = 
TD_DDIR_WRITE
;

635 
td
->
o
.
td_ddú
 = 
TD_DDIR_RW
;

637  
åue
;

638 
	}
}

640 
boﬁ
 
	$is_sockë
(c⁄° *
∑th
)

642 
°©
 
buf
;

643 
r
;

645 
r
 = 
	`°©
(
∑th
, &
buf
);

646 i‡(
r
 == -1)

647  
Ál£
;

649  
	`S_ISSOCK
(
buf
.
°_mode
);

650 
	}
}

652 
	$›í_sockë
(c⁄° *
∑th
)

654 
sockaddr_un
 
addr
;

655 
ªt
, 
fd
;

657 
fd
 = 
	`sockë
(
AF_UNIX
, 
SOCK_STREAM
, 0);

658 i‡(
fd
 < 0)

659  
fd
;

661 
addr
.
sun_Ámûy
 = 
AF_UNIX
;

662 i‡(
	`¢¥ötf
(
addr
.
sun_∑th
, ◊ddr.sun_∑th), "%s", 
∑th
) >=

663 (
addr
.
sun_∑th
)) {

664 
	`log_îr
("%s:ÖathÇame %s isÅooÜong forá Unix socket\n",

665 
__func__
, 
∑th
);

668 
ªt
 = 
	`c⁄√˘
(
fd
, (c⁄° 
sockaddr
 *)&
addr
, 
	`°æí
(
∑th
Ë+ ◊ddr.
sun_Ámûy
));

669 i‡(!
ªt
)

670  
fd
;

672 
	`˛o£
(
fd
);

674 
	}
}

679 
boﬁ
 
	$öô_iﬁog_ªad
(
thªad_d©a
 *
td
, *
‚ame
)

681 
buf„r
[256], *
p
;

682 
FILE
 *
f
 = 
NULL
;

684 
	`d¥öt
(
FD_IO
, "iﬁog:Çame=%s\n", 
‚ame
);

686 i‡(
	`is_sockë
(
‚ame
)) {

687 
fd
;

689 
fd
 = 
	`›í_sockë
(
‚ame
);

690 i‡(
fd
 >= 0)

691 
f
 = 
	`fd›í
(
fd
, "r");

692 } i‡(!
	`°rcmp
(
‚ame
, "-")) {

693 
f
 = 
°dö
;

695 
f
 = 
	`f›í
(
‚ame
, "r");

697 i‡(!
f
) {

698 
	`≥º‹
("fopenÑead iolog");

699  
Ál£
;

702 
p
 = 
	`fgës
(
buf„r
, (buf„r), 
f
);

703 i‡(!
p
) {

704 
	`td_vîr‹
(
td
, 
î∫o
, "iologÑead");

705 
	`log_îr
("fio: unableÅoÑead iolog\n");

706 
	`f˛o£
(
f
);

707  
Ál£
;

714 i‡(!
	`°∫cmp
(
iﬁog_vî2
, 
buf„r
, 
	`°æí
(iolog_ver2)))

715 
td
->
io_log_vîsi⁄
 = 2;

716 i‡(!
	`°∫cmp
(
iﬁog_vî3
, 
buf„r
, 
	`°æí
(iolog_ver3)))

717 
td
->
io_log_vîsi⁄
 = 3;

719 
	`log_îr
("fio: iolog version 1 isÇoÜonger supported\n");

720 
	`f˛o£
(
f
);

721  
Ál£
;

724 
	`‰ì_ªÀa£_fûes
(
td
);

725 
td
->
io_log_rfûe
 = 
f
;

726  
	`ªad_iﬁog
(
td
);

727 
	}
}

732 
boﬁ
 
	$öô_iﬁog_wrôe
(
thªad_d©a
 *
td
)

734 
fio_fûe
 *
ff
;

735 
FILE
 *
f
;

736 
i
;

738 
f
 = 
	`f›í
(
td
->
o
.
wrôe_iﬁog_fûe
, "a");

739 i‡(!
f
) {

740 
	`≥º‹
("fopen write iolog");

741  
Ál£
;

747 
td
->
iﬁog_f
 = 
f
;

748 
td
->
iﬁog_buf
 = 
	`mÆloc
(8192);

749 
	`£tvbuf
(
f
, 
td
->
iﬁog_buf
, 
_IOFBF
, 8192);

750 
	`fio_gëtime
(&
td
->
io_log_°¨t_time
, 
NULL
);

755 i‡(
	`Ârötf
(
f
, "%s\n", 
iﬁog_vî3
) < 0) {

756 
	`≥º‹
("iolog init\n");

757  
Ál£
;

763 
	`f‹_óch_fûe
(
td
, 
ff
, 
i
)

764 
	`log_fûe
(
td
, 
ff
, 
FIO_LOG_ADD_FILE
);

766  
åue
;

767 
	}
}

769 
boﬁ
 
	$öô_iﬁog
(
thªad_d©a
 *
td
)

771 
boﬁ
 
ªt
;

773 i‡(
td
->
o
.
ªad_iﬁog_fûe
) {

774 
√ed_sw≠
;

775 * 
‚ame
 = 
	`gë_«me_by_idx
(
td
->
o
.
ªad_iﬁog_fûe
,Åd->
subjob_numbî
);

781 i‡(
	`is_blkåa˚
(
‚ame
, &
√ed_sw≠
)) {

782 
td
->
io_log_blkåa˚
 = 1;

783 
ªt
 = 
	`öô_blkåa˚_ªad
(
td
, 
‚ame
, 
√ed_sw≠
);

785 
td
->
io_log_blkåa˚
 = 0;

786 
ªt
 = 
	`öô_iﬁog_ªad
(
td
, 
‚ame
);

788 
	`‰ì
(
‚ame
);

789 } i‡(
td
->
o
.
wrôe_iﬁog_fûe
)

790 
ªt
 = 
	`öô_iﬁog_wrôe
(
td
);

792 
ªt
 = 
åue
;

794 i‡(!
ªt
)

795 
	`td_vîr‹
(
td
, 
EINVAL
, "failed initializing iolog");

797  
ªt
;

798 
	}
}

800 
	$£tup_log
(
io_log
 **
log
, 
log_∑øms
 *
p
,

801 c⁄° *
fûíame
)

803 
io_log
 *
l
;

804 
i
;

805 
io_u_∂©_íåy
 *
íåy
;

806 
Êi°_hód
 *
li°
;

808 
l
 = 
	`sˇŒoc
(1, (*l));

809 
	`INIT_FLIST_HEAD
(&
l
->
io_logs
);

810 
l
->
log_ty≥
 = 
p
->log_type;

811 
l
->
log_off£t
 = 
p
->log_offset;

812 
l
->
log_¥io
 = 
p
->log_prio;

813 
l
->
log_gz
 = 
p
->log_gz;

814 
l
->
log_gz_°‹e
 = 
p
->log_gz_store;

815 
l
->
avg_m£c
 = 
p
->avg_msec;

816 
l
->
hi°_m£c
 = 
p
->hist_msec;

817 
l
->
hi°_cﬂr£√ss
 = 
p
->hist_coarseness;

818 
l
->
fûíame
 = 
	`°rdup
(filename);

819 
l
->
td
 = 
p
->td;

824 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

825 
li°
 = &
l
->
hi°_wödow
[
i
].list;

826 
	`INIT_FLIST_HEAD
(
li°
);

827 
íåy
 = 
	`ˇŒoc
(1, (
io_u_∂©_íåy
));

828 
	`Êi°_add
(&
íåy
->
li°
,Üist);

831 i‡(
l
->
td
 &&Ü->td->
o
.
io_submô_mode
 !
IO_MODE_OFFLOAD
) {

832 
def_ßm∂es
 = 
DEF_LOG_ENTRIES
;

833 
io_logs
 *
__p
;

835 
__p
 = 
	`ˇŒoc
(1, (*
l
->
≥ndög
));

836 i‡(
l
->
td
->
o
.
iodïth
 > 
DEF_LOG_ENTRIES
)

837 
def_ßm∂es
 = 
	`roundup_pow2
(
l
->
td
->
o
.
iodïth
);

838 
__p
->
max_ßm∂es
 = 
def_ßm∂es
;

839 
__p
->
log
 = 
	`ˇŒoc
(__p->
max_ßm∂es
, 
	`log_íåy_sz
(
l
));

840 
l
->
≥ndög
 = 
__p
;

843 i‡(
l
->
log_off£t
)

844 
l
->
log_ddú_mask
 = 
LOG_OFFSET_SAMPLE_BIT
;

845 i‡(
l
->
log_¥io
)

846 
l
->
log_ddú_mask
 |
LOG_PRIO_SAMPLE_BIT
;

848 
	`INIT_FLIST_HEAD
(&
l
->
chunk_li°
);

850 i‡(
l
->
log_gz
 && !
p
->
td
)

851 
l
->
log_gz
 = 0;

852 i‡(
l
->
log_gz
 ||Ü->
log_gz_°‹e
) {

853 
	`muãx_öô_psh¨ed
(&
l
->
chunk_lock
);

854 
	`muãx_öô_psh¨ed
(&
l
->
de„ºed_‰ì_lock
);

855 
p
->
td
->
Êags
 |
TD_F_COMPRESS_LOG
;

858 *
log
 = 
l
;

859 
	}
}

861 #ifde‡
CONFIG_SETVBUF


862 *
	$£t_fûe_buf„r
(
FILE
 *
f
)

864 
size_t
 
size
 = 1048576;

865 *
buf
;

867 
buf
 = 
	`mÆloc
(
size
);

868 
	`£tvbuf
(
f
, 
buf
, 
_IOFBF
, 
size
);

869  
buf
;

870 
	}
}

872 
	$˛ór_fûe_buf„r
(*
buf
)

874 
	`‰ì
(
buf
);

875 
	}
}

877 *
	$£t_fûe_buf„r
(
FILE
 *
f
)

879  
NULL
;

880 
	}
}

882 
	$˛ór_fûe_buf„r
(*
buf
)

884 
	}
}

887 
	$‰ì_log
(
io_log
 *
log
)

889 !
	`Êi°_em±y
(&
log
->
io_logs
)) {

890 
io_logs
 *
cur_log
;

892 
cur_log
 = 
	`Êi°_fú°_íåy
(&
log
->
io_logs
, io_logs, 
li°
);

893 
	`Êi°_dñ_öô
(&
cur_log
->
li°
);

894 
	`‰ì
(
cur_log
->
log
);

895 
	`s‰ì
(
cur_log
);

898 i‡(
log
->
≥ndög
) {

899 
	`‰ì
(
log
->
≥ndög
->log);

900 
	`‰ì
(
log
->
≥ndög
);

901 
log
->
≥ndög
 = 
NULL
;

904 
	`‰ì
(
log
->
≥ndög
);

905 
	`‰ì
(
log
->
fûíame
);

906 
	`s‰ì
(
log
);

907 
	}
}

909 
uöt64_t
 
	$hi°_sum
(
j
, 
°ride
, 
uöt64_t
 *
io_u_∂©
,

910 
uöt64_t
 *
io_u_∂©_œ°
)

912 
uöt64_t
 
sum
;

913 
k
;

915 i‡(
io_u_∂©_œ°
) {

916 
k
 = 
sum
 = 0; k < 
°ride
; k++)

917 
sum
 +
io_u_∂©
[
j
 + 
k
] - 
io_u_∂©_œ°
[j + k];

919 
k
 = 
sum
 = 0; k < 
°ride
; k++)

920 
sum
 +
io_u_∂©
[
j
 + 
k
];

923  
sum
;

924 
	}
}

926 
	$Êush_hi°_ßm∂es
(
FILE
 *
f
, 
hi°_cﬂr£√ss
, *
ßm∂es
,

927 
uöt64_t
 
ßm∂e_size
)

929 
io_ßm∂e
 *
s
;

930 
log_off£t
;

931 
uöt64_t
 
i
, 
j
, 
ƒ_ßm∂es
;

932 
io_u_∂©_íåy
 *
íåy
, *
íåy_bef‹e
;

933 
uöt64_t
 *
io_u_∂©
;

934 
uöt64_t
 *
io_u_∂©_bef‹e
;

936 
°ride
 = 1 << 
hi°_cﬂr£√ss
;

938 i‡(!
ßm∂e_size
)

941 
s
 = 
	`__gë_ßm∂e
(
ßm∂es
, 0, 0);

942 
log_off£t
 = (
s
->
__ddú
 & 
LOG_OFFSET_SAMPLE_BIT
) != 0;

944 
ƒ_ßm∂es
 = 
ßm∂e_size
 / 
	`__log_íåy_sz
(
log_off£t
);

946 
i
 = 0; i < 
ƒ_ßm∂es
; i++) {

947 
s
 = 
	`__gë_ßm∂e
(
ßm∂es
, 
log_off£t
, 
i
);

949 
íåy
 = 
s
->
d©a
.
∂©_íåy
;

950 
io_u_∂©
 = 
íåy
->io_u_plat;

952 
íåy_bef‹e
 = 
	`Êi°_fú°_íåy
(&
íåy
->
li°
, 
io_u_∂©_íåy
,Üist);

953 
io_u_∂©_bef‹e
 = 
íåy_bef‹e
->
io_u_∂©
;

955 
	`Ârötf
(
f
, "%lu, %u, %Œu, ", (Ë
s
->
time
,

956 
	`io_ßm∂e_ddú
(
s
), (Ës->
bs
);

957 
j
 = 0; j < 
FIO_IO_U_PLAT_NR
 - 
°ride
; j += stride) {

958 
	`Ârötf
(
f
, "%llu, ", ()

959 
	`hi°_sum
(
j
, 
°ride
, 
io_u_∂©
, 
io_u_∂©_bef‹e
));

961 
	`Ârötf
(
f
, "%llu\n", ()

962 
	`hi°_sum
(
FIO_IO_U_PLAT_NR
 - 
°ride
, såide, 
io_u_∂©
,

963 
io_u_∂©_bef‹e
));

965 
	`Êi°_dñ
(&
íåy_bef‹e
->
li°
);

966 
	`‰ì
(
íåy_bef‹e
);

968 
	}
}

970 
	$Êush_ßm∂es
(
FILE
 *
f
, *
ßm∂es
, 
uöt64_t
 
ßm∂e_size
)

972 
io_ßm∂e
 *
s
;

973 
log_off£t
, 
log_¥io
;

974 
uöt64_t
 
i
, 
ƒ_ßm∂es
;

975 
¥io_vÆ
;

976 c⁄° *
fmt
;

978 i‡(!
ßm∂e_size
)

981 
s
 = 
	`__gë_ßm∂e
(
ßm∂es
, 0, 0);

982 
log_off£t
 = (
s
->
__ddú
 & 
LOG_OFFSET_SAMPLE_BIT
) != 0;

983 
log_¥io
 = (
s
->
__ddú
 & 
LOG_PRIO_SAMPLE_BIT
) != 0;

985 i‡(
log_off£t
) {

986 i‡(
log_¥io
)

987 
fmt
 = "%lu, %" 
PRId64
 ", %u, %llu, %llu, 0x%04x\n";

989 
fmt
 = "%lu, %" 
PRId64
 ", %u, %llu, %llu, %u\n";

991 i‡(
log_¥io
)

992 
fmt
 = "%lu, %" 
PRId64
 ", %u, %llu, 0x%04x\n";

994 
fmt
 = "%lu, %" 
PRId64
 ", %u, %llu, %u\n";

997 
ƒ_ßm∂es
 = 
ßm∂e_size
 / 
	`__log_íåy_sz
(
log_off£t
);

999 
i
 = 0; i < 
ƒ_ßm∂es
; i++) {

1000 
s
 = 
	`__gë_ßm∂e
(
ßm∂es
, 
log_off£t
, 
i
);

1002 i‡(
log_¥io
)

1003 
¥io_vÆ
 = 
s
->
¥i‹ôy
;

1005 
¥io_vÆ
 = 
	`i›rio_vÆue_is_˛ass_π
(
s
->
¥i‹ôy
);

1007 i‡(!
log_off£t
) {

1008 
	`Ârötf
(
f
, 
fmt
,

1009 (Ë
s
->
time
,

1010 
s
->
d©a
.
vÆ
,

1011 
	`io_ßm∂e_ddú
(
s
), (Ës->
bs
,

1012 
¥io_vÆ
);

1014 
io_ßm∂e_off£t
 *
so
 = (*Ë
s
;

1016 
	`Ârötf
(
f
, 
fmt
,

1017 (Ë
s
->
time
,

1018 
s
->
d©a
.
vÆ
,

1019 
	`io_ßm∂e_ddú
(
s
), (Ës->
bs
,

1020 (Ë
so
->
off£t
,

1021 
¥io_vÆ
);

1024 
	}
}

1026 #ifde‡
CONFIG_ZLIB


1028 
	siﬁog_Êush_d©a
 {

1029 
w‹kqueue_w‹k
 
	mw‹k
;

1030 
io_log
 *
	mlog
;

1031 *
	mßm∂es
;

1032 
uöt32_t
 
	mƒ_ßm∂es
;

1033 
boﬁ
 
	m‰ì
;

1036 
	#GZ_CHUNK
 131072

	)

1038 
iﬁog_com¥ess
 *
	$gë_√w_chunk
(
£q
)

1040 
iﬁog_com¥ess
 *
c
;

1042 
c
 = 
	`mÆloc
((*c));

1043 
	`INIT_FLIST_HEAD
(&
c
->
li°
);

1044 
c
->
buf
 = 
	`mÆloc
(
GZ_CHUNK
);

1045 
c
->
Àn
 = 0;

1046 
c
->
£q
 = seq;

1047  
c
;

1048 
	}
}

1050 
	$‰ì_chunk
(
iﬁog_com¥ess
 *
ic
)

1052 
	`‰ì
(
ic
->
buf
);

1053 
	`‰ì
(
ic
);

1054 
	}
}

1056 
	$z_°ªam_öô
(
z_°ªam
 *
°ªam
, 
gz_hdr
)

1058 
wbôs
 = 15;

1060 
	`mem£t
(
°ªam
, 0, (*stream));

1061 
°ªam
->
zÆloc
 = 
Z_NULL
;

1062 
°ªam
->
z‰ì
 = 
Z_NULL
;

1063 
°ªam
->
›aque
 = 
Z_NULL
;

1064 
°ªam
->
√xt_ö
 = 
Z_NULL
;

1070 i‡(
gz_hdr
)

1071 
wbôs
 += 32;

1073 i‡(
	`öÊ©eInô2
(
°ªam
, 
wbôs
Ë!
Z_OK
)

1077 
	}
}

1079 
	söÊ©e_chunk_ôî
 {

1080 
	m£q
;

1081 
	mîr
;

1082 *
	mbuf
;

1083 
size_t
 
	mbuf_size
;

1084 
size_t
 
	mbuf_u£d
;

1085 
size_t
 
	mchunk_sz
;

1088 
	$föish_chunk
(
z_°ªam
 *
°ªam
, 
FILE
 *
f
,

1089 
öÊ©e_chunk_ôî
 *
ôî
)

1091 
ªt
;

1093 
ªt
 = 
	`öÊ©eEnd
(
°ªam
);

1094 i‡(
ªt
 !
Z_OK
)

1095 
	`log_îr
("fio: failedÅoÉndÜog inflation seq %d (%d)\n",

1096 
ôî
->
£q
, 
ªt
);

1098 
	`Êush_ßm∂es
(
f
, 
ôî
->
buf
, iãr->
buf_u£d
);

1099 
	`‰ì
(
ôî
->
buf
);

1100 
ôî
->
buf
 = 
NULL
;

1101 
ôî
->
buf_size
 = iãr->
buf_u£d
 = 0;

1102 
	}
}

1108 
size_t
 
	$öÊ©e_chunk
(
iﬁog_com¥ess
 *
ic
, 
gz_hdr
, 
FILE
 *
f
,

1109 
z_°ªam
 *
°ªam
, 
öÊ©e_chunk_ôî
 *
ôî
)

1111 
size_t
 
ªt
;

1113 
	`d¥öt
(
FD_COMPRESS
, "inflate chunk size=%lu, seq=%u\n",

1114 (Ë
ic
->
Àn
, ic->
£q
);

1116 i‡(
ic
->
£q
 !
ôî
->seq) {

1117 i‡(
ôî
->
£q
)

1118 
	`föish_chunk
(
°ªam
, 
f
, 
ôî
);

1120 
	`z_°ªam_öô
(
°ªam
, 
gz_hdr
);

1121 
ôî
->
£q
 = 
ic
->seq;

1124 
°ªam
->
avaû_ö
 = 
ic
->
Àn
;

1125 
°ªam
->
√xt_ö
 = 
ic
->
buf
;

1127 i‡(!
ôî
->
buf_size
) {

1128 
ôî
->
buf_size
 = iãr->
chunk_sz
;

1129 
ôî
->
buf
 = 
	`mÆloc
(ôî->
buf_size
);

1132 
°ªam
->
avaû_ö
) {

1133 
size_t
 
this_out
 = 
ôî
->
buf_size
 - iãr->
buf_u£d
;

1134 
îr
;

1136 
°ªam
->
avaû_out
 = 
this_out
;

1137 
°ªam
->
√xt_out
 = 
ôî
->
buf
 + iãr->
buf_u£d
;

1139 
îr
 = 
	`öÊ©e
(
°ªam
, 
Z_NO_FLUSH
);

1140 i‡(
îr
 < 0) {

1141 
	`log_îr
("fio: faûed inÊ©ögÜog: %d\n", 
îr
);

1142 
ôî
->
îr
 =Érr;

1146 
ôî
->
buf_u£d
 +
this_out
 - 
°ªam
->
avaû_out
;

1148 i‡(!
°ªam
->
avaû_out
) {

1149 
ôî
->
buf_size
 +ôî->
chunk_sz
;

1150 
ôî
->
buf
 = 
	`ªÆloc
(ôî->buf, iãr->
buf_size
);

1154 i‡(
îr
 =
Z_STREAM_END
)

1158 
ªt
 = (*Ë
°ªam
->
√xt_ö
 - 
ic
->
buf
;

1160 
	`d¥öt
(
FD_COMPRESS
, "öÊ©edÅÿsize=%lu\n", (Ë
ôî
->
buf_size
);

1162  
ªt
;

1163 
	}
}

1169 
	$öÊ©e_gz_chunks
(
io_log
 *
log
, 
FILE
 *
f
)

1171 
öÊ©e_chunk_ôî
 
ôî
 = { .
chunk_sz
 = 
log
->
log_gz
, };

1172 
z_°ªam
 
°ªam
;

1174 !
	`Êi°_em±y
(&
log
->
chunk_li°
)) {

1175 
iﬁog_com¥ess
 *
ic
;

1177 
ic
 = 
	`Êi°_fú°_íåy
(&
log
->
chunk_li°
, 
iﬁog_com¥ess
, 
li°
);

1178 
	`Êi°_dñ
(&
ic
->
li°
);

1180 i‡(
log
->
log_gz_°‹e
) {

1181 
size_t
 
ªt
;

1183 
	`d¥öt
(
FD_COMPRESS
, "log write chunk size=%lu, "

1184 "£q=%u\n", (Ë
ic
->
Àn
, ic->
£q
);

1186 
ªt
 = 
	`fwrôe
(
ic
->
buf
, ic->
Àn
, 1, 
f
);

1187 i‡(
ªt
 !1 || 
	`„º‹
(
f
)) {

1188 
ôî
.
îr
 = 
î∫o
;

1189 
	`log_îr
("fio:Érror writing compressedÜog\n");

1192 
	`öÊ©e_chunk
(
ic
, 
log
->
log_gz_°‹e
, 
f
, &
°ªam
, &
ôî
);

1194 
	`‰ì_chunk
(
ic
);

1197 i‡(
ôî
.
£q
) {

1198 
	`föish_chunk
(&
°ªam
, 
f
, &
ôî
);

1199 
	`‰ì
(
ôî
.
buf
);

1202  
ôî
.
îr
;

1203 
	}
}

1210 
	$iﬁog_fûe_öÊ©e
(c⁄° *
fûe
)

1212 
öÊ©e_chunk_ôî
 
ôî
 = { .
chunk_sz
 = 64 * 1024 * 1024, };

1213 
iﬁog_com¥ess
 
ic
;

1214 
z_°ªam
 
°ªam
;

1215 
°©
 
sb
;

1216 
size_t
 
ªt
;

1217 
size_t
 
tŸÆ
;

1218 *
buf
;

1219 
FILE
 *
f
;

1221 
f
 = 
	`f›í
(
fûe
, "rb");

1222 i‡(!
f
) {

1223 
	`≥º‹
("fopen");

1227 i‡(
	`°©
(
fûe
, &
sb
) < 0) {

1228 
	`f˛o£
(
f
);

1229 
	`≥º‹
("stat");

1233 
ic
.
buf
 = bu‡
	`mÆloc
(
sb
.
°_size
);

1234 
ic
.
Àn
 = 
sb
.
°_size
;

1235 
ic
.
£q
 = 1;

1237 
ªt
 = 
	`‰ód
(
ic
.
buf
, ic.
Àn
, 1, 
f
);

1238 i‡(
ªt
 =0 && 
	`„º‹
(
f
)) {

1239 
	`≥º‹
("fread");

1240 
	`f˛o£
(
f
);

1241 
	`‰ì
(
buf
);

1243 } i‡(
	`„º‹
(
f
Ë|| (!
	`„of
(fË&& 
ªt
 != 1)) {

1244 
	`log_îr
("fio: shortÑead onÑeadingÜog\n");

1245 
	`f˛o£
(
f
);

1246 
	`‰ì
(
buf
);

1250 
	`f˛o£
(
f
);

1258 
tŸÆ
 = 
ic
.
Àn
;

1260 
size_t
 
úë
;

1262 
úë
 = 
	`öÊ©e_chunk
(&
ic
, 1, 
°dout
, &
°ªam
, &
ôî
);

1263 
tŸÆ
 -
úë
;

1264 i‡(!
tŸÆ
)

1266 i‡(
ôî
.
îr
)

1269 
ic
.
£q
++;

1270 
ic
.
Àn
 -
úë
;

1271 
ic
.
buf
 +
úë
;

1274 i‡(
ôî
.
£q
) {

1275 
	`föish_chunk
(&
°ªam
, 
°dout
, &
ôî
);

1276 
	`‰ì
(
ôî
.
buf
);

1279 
	`‰ì
(
buf
);

1280  
ôî
.
îr
;

1281 
	}
}

1285 
	$öÊ©e_gz_chunks
(
io_log
 *
log
, 
FILE
 *
f
)

1288 
	}
}

1290 
	$iﬁog_fûe_öÊ©e
(c⁄° *
fûe
)

1292 
	`log_îr
("fio:Üog inflationÇotÖossible without zlib\n");

1294 
	}
}

1298 
	$Êush_log
(
io_log
 *
log
, 
boﬁ
 
do_≠≥nd
)

1300 *
buf
;

1301 
FILE
 *
f
;

1308 i‡(!
do_≠≥nd
)

1309 i‡(
log
->
log_gz_°‹e
)

1310 
f
 = 
	`f›í
(
log
->
fûíame
, "wb");

1312 
f
 = 
	`f›í
(
log
->
fûíame
, "w");

1314 i‡(
log
->
log_gz_°‹e
)

1315 
f
 = 
	`f›í
(
log
->
fûíame
, "ab");

1317 
f
 = 
	`f›í
(
log
->
fûíame
, "a");

1318 i‡(!
f
) {

1319 
	`≥º‹
("fopenÜog");

1323 
buf
 = 
	`£t_fûe_buf„r
(
f
);

1325 
	`öÊ©e_gz_chunks
(
log
, 
f
);

1327 !
	`Êi°_em±y
(&
log
->
io_logs
)) {

1328 
io_logs
 *
cur_log
;

1330 
cur_log
 = 
	`Êi°_fú°_íåy
(&
log
->
io_logs
, io_logs, 
li°
);

1331 
	`Êi°_dñ_öô
(&
cur_log
->
li°
);

1333 i‡(
log
->
td
 &&Üog =log->td->
˛©_hi°_log
)

1334 
	`Êush_hi°_ßm∂es
(
f
, 
log
->
hi°_cﬂr£√ss
, 
cur_log
->log,

1335 
	`log_ßm∂e_sz
(
log
, 
cur_log
));

1337 
	`Êush_ßm∂es
(
f
, 
cur_log
->
log
, 
	`log_ßm∂e_sz
(log, cur_log));

1339 
	`s‰ì
(
cur_log
);

1342 
	`f˛o£
(
f
);

1343 
	`˛ór_fûe_buf„r
(
buf
);

1344 
	}
}

1346 
	$föish_log
(
thªad_d©a
 *
td
, 
io_log
 *
log
, 
åylock
)

1348 i‡(
td
->
Êags
 & 
TD_F_COMPRESS_LOG
)

1349 
	`iﬁog_Êush
(
log
);

1351 i‡(
åylock
) {

1352 i‡(
	`fio_åylock_fûe
(
log
->
fûíame
))

1355 
	`fio_lock_fûe
(
log
->
fûíame
);

1357 i‡(
td
->
˛õ¡_ty≥
 =
FIO_CLIENT_TYPE_GUI
 || 
is_backíd
)

1358 
	`fio_£nd_iﬁog
(
td
, 
log
,Üog->
fûíame
);

1360 
	`Êush_log
(
log
, !
td
->
o
.
≥r_job_logs
);

1362 
	`fio_u∆ock_fûe
(
log
->
fûíame
);

1363 
	`‰ì_log
(
log
);

1365 
	}
}

1367 
size_t
 
	$log_chunk_sizes
(
io_log
 *
log
)

1369 
Êi°_hód
 *
íåy
;

1370 
size_t
 
ªt
;

1372 i‡(
	`Êi°_em±y
(&
log
->
chunk_li°
))

1375 
ªt
 = 0;

1376 
	`±hªad_muãx_lock
(&
log
->
chunk_lock
);

1377 
	`Êi°_f‹_óch
(
íåy
, &
log
->
chunk_li°
) {

1378 
iﬁog_com¥ess
 *
c
;

1380 
c
 = 
	`Êi°_íåy
(
íåy
, 
iﬁog_com¥ess
, 
li°
);

1381 
ªt
 +
c
->
Àn
;

1383 
	`±hªad_muãx_u∆ock
(&
log
->
chunk_lock
);

1384  
ªt
;

1385 
	}
}

1387 #ifde‡
CONFIG_ZLIB


1389 
	$iﬁog_put_de„ºed
(
io_log
 *
log
, *
±r
)

1391 i‡(!
±r
)

1394 
	`±hªad_muãx_lock
(&
log
->
de„ºed_‰ì_lock
);

1395 i‡(
log
->
de„ºed
 < 
IOLOG_MAX_DEFER
) {

1396 
log
->
de„ºed_ôems
[log->
de„ºed
] = 
±r
;

1397 
log
->
de„ºed
++;

1398 } i‡(!
	`fio_did_w¨n
(
FIO_WARN_IOLOG_DROP
))

1399 
	`log_îr
("fio: hadÅo dropÜogÉntry free\n");

1400 
	`±hªad_muãx_u∆ock
(&
log
->
de„ºed_‰ì_lock
);

1401 
	}
}

1403 
	$iﬁog_‰ì_de„ºed
(
io_log
 *
log
)

1405 
i
;

1407 i‡(!
log
->
de„ºed
)

1410 
	`±hªad_muãx_lock
(&
log
->
de„ºed_‰ì_lock
);

1412 
i
 = 0; i < 
log
->
de„ºed
; i++) {

1413 
	`‰ì
(
log
->
de„ºed_ôems
[
i
]);

1414 
log
->
de„ºed_ôems
[
i
] = 
NULL
;

1417 
log
->
de„ºed
 = 0;

1418 
	`±hªad_muãx_u∆ock
(&
log
->
de„ºed_‰ì_lock
);

1419 
	}
}

1421 
	$gz_w‹k
(
iﬁog_Êush_d©a
 *
d©a
)

1423 
iﬁog_com¥ess
 *
c
 = 
NULL
;

1424 
Êi°_hód
 
li°
;

1425 
£q
;

1426 
z_°ªam
 
°ªam
;

1427 
size_t
 
tŸÆ
 = 0;

1428 
ªt
;

1430 
	`INIT_FLIST_HEAD
(&
li°
);

1432 
	`mem£t
(&
°ªam
, 0, (stream));

1433 
°ªam
.
zÆloc
 = 
Z_NULL
;

1434 
°ªam
.
z‰ì
 = 
Z_NULL
;

1435 
°ªam
.
›aque
 = 
Z_NULL
;

1437 
ªt
 = 
	`deÊ©eInô
(&
°ªam
, 
Z_DEFAULT_COMPRESSION
);

1438 i‡(
ªt
 !
Z_OK
) {

1439 
	`log_îr
("fio: failedÅo init gz stream\n");

1440 
îr
;

1443 
£q
 = ++
d©a
->
log
->
chunk_£q
;

1445 
°ªam
.
√xt_ö
 = (*Ë
d©a
->
ßm∂es
;

1446 
°ªam
.
avaû_ö
 = 
d©a
->
ƒ_ßm∂es
 * 
	`log_íåy_sz
(d©a->
log
);

1448 
	`d¥öt
(
FD_COMPRESS
, "deflate input size=%lu, seq=%u,Üog=%s\n",

1449 (Ë
°ªam
.
avaû_ö
, 
£q
,

1450 
d©a
->
log
->
fûíame
);

1452 i‡(
c
)

1453 
	`d¥öt
(
FD_COMPRESS
, "£q=%d, chunk=%lu\n", 
£q
,

1454 (Ë
c
->
Àn
);

1455 
c
 = 
	`gë_√w_chunk
(
£q
);

1456 
°ªam
.
avaû_out
 = 
GZ_CHUNK
;

1457 
°ªam
.
√xt_out
 = 
c
->
buf
;

1458 
ªt
 = 
	`deÊ©e
(&
°ªam
, 
Z_NO_FLUSH
);

1459 i‡(
ªt
 < 0) {

1460 
	`log_îr
("fio: deÊ©êlog (%d)\n", 
ªt
);

1461 
	`‰ì_chunk
(
c
);

1462 
îr
;

1465 
c
->
Àn
 = 
GZ_CHUNK
 - 
°ªam
.
avaû_out
;

1466 
	`Êi°_add_èû
(&
c
->
li°
, &list);

1467 
tŸÆ
 +
c
->
Àn
;

1468 } 
°ªam
.
avaû_ö
);

1470 
°ªam
.
√xt_out
 = 
c
->
buf
 + c->
Àn
;

1471 
°ªam
.
avaû_out
 = 
GZ_CHUNK
 - 
c
->
Àn
;

1473 
ªt
 = 
	`deÊ©e
(&
°ªam
, 
Z_FINISH
);

1474 i‡(
ªt
 < 0) {

1480 i‡(
ªt
 !
Z_BUF_ERROR
) {

1481 
	`log_îr
("fio: deÊ©êlog (%d)\n", 
ªt
);

1482 
	`Êi°_dñ
(&
c
->
li°
);

1483 
	`‰ì_chunk
(
c
);

1484 
îr
;

1488 
tŸÆ
 -
c
->
Àn
;

1489 
c
->
Àn
 = 
GZ_CHUNK
 - 
°ªam
.
avaû_out
;

1490 
tŸÆ
 +
c
->
Àn
;

1491 
	`d¥öt
(
FD_COMPRESS
, "£q=%d, chunk=%lu\n", 
£q
, (Ë
c
->
Àn
);

1493 i‡(
ªt
 !
Z_STREAM_END
) {

1495 
c
 = 
	`gë_√w_chunk
(
£q
);

1496 
°ªam
.
avaû_out
 = 
GZ_CHUNK
;

1497 
°ªam
.
√xt_out
 = 
c
->
buf
;

1498 
ªt
 = 
	`deÊ©e
(&
°ªam
, 
Z_FINISH
);

1499 
c
->
Àn
 = 
GZ_CHUNK
 - 
°ªam
.
avaû_out
;

1500 
tŸÆ
 +
c
->
Àn
;

1501 
	`Êi°_add_èû
(&
c
->
li°
, &list);

1502 
	`d¥öt
(
FD_COMPRESS
, "£q=%d, chunk=%lu\n", 
£q
,

1503 (Ë
c
->
Àn
);

1504 } 
ªt
 !
Z_STREAM_END
);

1507 
	`d¥öt
(
FD_COMPRESS
, "deÊ©edÅÿsize=%lu\n", (Ë
tŸÆ
);

1509 
ªt
 = 
	`deÊ©eEnd
(&
°ªam
);

1510 i‡(
ªt
 !
Z_OK
)

1511 
	`log_îr
("fio: deÊ©eEnd %d\n", 
ªt
);

1513 
	`iﬁog_put_de„ºed
(
d©a
->
log
, d©a->
ßm∂es
);

1515 i‡(!
	`Êi°_em±y
(&
li°
)) {

1516 
	`±hªad_muãx_lock
(&
d©a
->
log
->
chunk_lock
);

1517 
	`Êi°_•li˚_èû
(&
li°
, &
d©a
->
log
->
chunk_li°
);

1518 
	`±hªad_muãx_u∆ock
(&
d©a
->
log
->
chunk_lock
);

1521 
ªt
 = 0;

1522 
d⁄e
:

1523 i‡(
d©a
->
‰ì
)

1524 
	`s‰ì
(
d©a
);

1525  
ªt
;

1526 
îr
:

1527 !
	`Êi°_em±y
(&
li°
)) {

1528 
c
 = 
	`Êi°_fú°_íåy
(
li°
.
√xt
, 
iﬁog_com¥ess
,Üist);

1529 
	`Êi°_dñ
(&
c
->
li°
);

1530 
	`‰ì_chunk
(
c
);

1532 
ªt
 = 1;

1533 
d⁄e
;

1534 
	}
}

1541 
	$gz_w‹k_async
(
submô_w‹kî
 *
sw
, 
w‹kqueue_w‹k
 *
w‹k
)

1543  
	`gz_w‹k
(
	`c⁄èöî_of
(
w‹k
, 
iﬁog_Êush_d©a
, work));

1544 
	}
}

1546 
	$gz_öô_w‹kî
(
submô_w‹kî
 *
sw
)

1548 
thªad_d©a
 *
td
 = 
sw
->
wq
->td;

1550 i‡(!
	`fio_›ti⁄_is_£t
(&
td
->
o
, 
log_gz_˝umask
))

1553 i‡(
	`fio_£èfföôy
(
	`gëtid
(), 
td
->
o
.
log_gz_˝umask
) == -1) {

1554 
	`log_îr
("gz: failedÅo set CPUáffinity\n");

1559 
	}
}

1561 
w‹kqueue_›s
 
	glog_com¥ess_wq_›s
 = {

1562 .
‚
 = 
gz_w‹k_async
,

1563 .
	göô_w‹kî_‚
 = 
gz_öô_w‹kî
,

1564 .
	gni˚
 = 1,

1567 
	$iﬁog_com¥ess_öô
(
thªad_d©a
 *
td
, 
sk_out
 *sk_out)

1569 i‡(!(
td
->
Êags
 & 
TD_F_COMPRESS_LOG
))

1572 
	`w‹kqueue_öô
(
td
, &td->
log_com¥ess_wq
, &
log_com¥ess_wq_›s
, 1, 
sk_out
);

1574 
	}
}

1576 
	$iﬁog_com¥ess_exô
(
thªad_d©a
 *
td
)

1578 i‡(!(
td
->
Êags
 & 
TD_F_COMPRESS_LOG
))

1581 
	`w‹kqueue_exô
(&
td
->
log_com¥ess_wq
);

1582 
	}
}

1591 
	$iﬁog_Êush
(
io_log
 *
log
)

1593 
iﬁog_Êush_d©a
 *
d©a
;

1595 
	`w‹kqueue_Êush
(&
log
->
td
->
log_com¥ess_wq
);

1596 
d©a
 = 
	`mÆloc
((*data));

1597 i‡(!
d©a
)

1600 
d©a
->
log
 =Üog;

1601 
d©a
->
‰ì
 = 
Ál£
;

1603 !
	`Êi°_em±y
(&
log
->
io_logs
)) {

1604 
io_logs
 *
cur_log
;

1606 
cur_log
 = 
	`Êi°_fú°_íåy
(&
log
->
io_logs
, io_logs, 
li°
);

1607 
	`Êi°_dñ_öô
(&
cur_log
->
li°
);

1609 
d©a
->
ßm∂es
 = 
cur_log
->
log
;

1610 
d©a
->
ƒ_ßm∂es
 = 
cur_log
->nr_samples;

1612 
	`s‰ì
(
cur_log
);

1614 
	`gz_w‹k
(
d©a
);

1617 
	`‰ì
(
d©a
);

1619 
	}
}

1621 
	$iﬁog_cur_Êush
(
io_log
 *
log
, 
io_logs
 *
cur_log
)

1623 
iﬁog_Êush_d©a
 *
d©a
;

1625 
d©a
 = 
	`smÆloc
((*data));

1626 i‡(!
d©a
)

1629 
d©a
->
log
 =Üog;

1631 
d©a
->
ßm∂es
 = 
cur_log
->
log
;

1632 
d©a
->
ƒ_ßm∂es
 = 
cur_log
->nr_samples;

1633 
d©a
->
‰ì
 = 
åue
;

1635 
cur_log
->
ƒ_ßm∂es
 = cur_log->
max_ßm∂es
 = 0;

1636 
cur_log
->
log
 = 
NULL
;

1638 
	`w‹kqueue_íqueue
(&
log
->
td
->
log_com¥ess_wq
, &
d©a
->
w‹k
);

1640 
	`iﬁog_‰ì_de„ºed
(
log
);

1643 
	}
}

1646 
	$iﬁog_Êush
(
io_log
 *
log
)

1649 
	}
}

1651 
	$iﬁog_cur_Êush
(
io_log
 *
log
, 
io_logs
 *
cur_log
)

1654 
	}
}

1656 
	$iﬁog_com¥ess_öô
(
thªad_d©a
 *
td
, 
sk_out
 *sk_out)

1659 
	}
}

1661 
	$iﬁog_com¥ess_exô
(
thªad_d©a
 *
td
)

1663 
	}
}

1667 
io_logs
 *
	$iﬁog_cur_log
(
io_log
 *
log
)

1669 i‡(
	`Êi°_em±y
(&
log
->
io_logs
))

1670  
NULL
;

1672  
	`Êi°_œ°_íåy
(&
log
->
io_logs
, io_logs, 
li°
);

1673 
	}
}

1675 
uöt64_t
 
	$iﬁog_ƒ_ßm∂es
(
io_log
 *
iﬁog
)

1677 
Êi°_hód
 *
íåy
;

1678 
uöt64_t
 
ªt
 = 0;

1680 
	`Êi°_f‹_óch
(
íåy
, &
iﬁog
->
io_logs
) {

1681 
io_logs
 *
cur_log
;

1683 
cur_log
 = 
	`Êi°_íåy
(
íåy
, 
io_logs
, 
li°
);

1684 
ªt
 +
cur_log
->
ƒ_ßm∂es
;

1687  
ªt
;

1688 
	}
}

1690 
	$__wrôe_log
(
thªad_d©a
 *
td
, 
io_log
 *
log
, 
åy
)

1692 i‡(
log
)

1693  
	`föish_log
(
td
, 
log
, 
åy
);

1696 
	}
}

1698 
	$wrôe_i›s_log
(
thªad_d©a
 *
td
, 
åy
, 
boﬁ
 
unô_log
)

1700 
ªt
;

1702 i‡(
	`≥r_unô_log
(
td
->
i›s_log
Ë!
unô_log
)

1705 
ªt
 = 
	`__wrôe_log
(
td
,Åd->
i›s_log
, 
åy
);

1706 i‡(!
ªt
)

1707 
td
->
i›s_log
 = 
NULL
;

1709  
ªt
;

1710 
	}
}

1712 
	$wrôe_¶©_log
(
thªad_d©a
 *
td
, 
åy
, 
boﬁ
 
unô_log
)

1714 
ªt
;

1716 i‡(!
unô_log
)

1719 
ªt
 = 
	`__wrôe_log
(
td
,Åd->
¶©_log
, 
åy
);

1720 i‡(!
ªt
)

1721 
td
->
¶©_log
 = 
NULL
;

1723  
ªt
;

1724 
	}
}

1726 
	$wrôe_˛©_log
(
thªad_d©a
 *
td
, 
åy
, 
boﬁ
 
unô_log
)

1728 
ªt
;

1730 i‡(!
unô_log
)

1733 
ªt
 = 
	`__wrôe_log
(
td
,Åd->
˛©_log
, 
åy
);

1734 i‡(!
ªt
)

1735 
td
->
˛©_log
 = 
NULL
;

1737  
ªt
;

1738 
	}
}

1740 
	$wrôe_˛©_hi°_log
(
thªad_d©a
 *
td
, 
åy
, 
boﬁ
 
unô_log
)

1742 
ªt
;

1744 i‡(!
unô_log
)

1747 
ªt
 = 
	`__wrôe_log
(
td
,Åd->
˛©_hi°_log
, 
åy
);

1748 i‡(!
ªt
)

1749 
td
->
˛©_hi°_log
 = 
NULL
;

1751  
ªt
;

1752 
	}
}

1754 
	$wrôe_œt_log
(
thªad_d©a
 *
td
, 
åy
, 
boﬁ
 
unô_log
)

1756 
ªt
;

1758 i‡(!
unô_log
)

1761 
ªt
 = 
	`__wrôe_log
(
td
,Åd->
œt_log
, 
åy
);

1762 i‡(!
ªt
)

1763 
td
->
œt_log
 = 
NULL
;

1765  
ªt
;

1766 
	}
}

1768 
	$wrôe_b™dw_log
(
thªad_d©a
 *
td
, 
åy
, 
boﬁ
 
unô_log
)

1770 
ªt
;

1772 i‡(
	`≥r_unô_log
(
td
->
bw_log
Ë!
unô_log
)

1775 
ªt
 = 
	`__wrôe_log
(
td
,Åd->
bw_log
, 
åy
);

1776 i‡(!
ªt
)

1777 
td
->
bw_log
 = 
NULL
;

1779  
ªt
;

1780 
	}
}

1783 
	mBW_LOG_MASK
 = 1,

1784 
	mLAT_LOG_MASK
 = 2,

1785 
	mSLAT_LOG_MASK
 = 4,

1786 
	mCLAT_LOG_MASK
 = 8,

1787 
	mIOPS_LOG_MASK
 = 16,

1788 
	mCLAT_HIST_LOG_MASK
 = 32,

1790 
	mALL_LOG_NR
 = 6,

1793 
	slog_ty≥
 {

1794 
	mmask
;

1795 (*
	m‚
)(
	mthªad_d©a
 *, , 
	mboﬁ
);

1798 
log_ty≥
 
	glog_ty≥s
[] = {

1800 .
mask
 = 
BW_LOG_MASK
,

1801 .
	g‚
 = 
wrôe_b™dw_log
,

1804 .
	gmask
 = 
LAT_LOG_MASK
,

1805 .
	g‚
 = 
wrôe_œt_log
,

1808 .
	gmask
 = 
SLAT_LOG_MASK
,

1809 .
	g‚
 = 
wrôe_¶©_log
,

1812 .
	gmask
 = 
CLAT_LOG_MASK
,

1813 .
	g‚
 = 
wrôe_˛©_log
,

1816 .
	gmask
 = 
IOPS_LOG_MASK
,

1817 .
	g‚
 = 
wrôe_i›s_log
,

1820 .
	gmask
 = 
CLAT_HIST_LOG_MASK
,

1821 .
	g‚
 = 
wrôe_˛©_hi°_log
,

1825 
	$td_wrôeout_logs
(
thªad_d©a
 *
td
, 
boﬁ
 
unô_logs
)

1827 
log_mask
 = 0;

1828 
log_À·
 = 
ALL_LOG_NR
;

1829 
ﬁd_°©e
, 
i
;

1831 
ﬁd_°©e
 = 
	`td_bump_run°©e
(
td
, 
TD_FINISHING
);

1833 
	`föÆize_logs
(
td
, 
unô_logs
);

1835 
log_À·
) {

1836 
¥ev_log_À·
 = 
log_À·
;

1838 
i
 = 0; i < 
ALL_LOG_NR
 && 
log_À·
; i++) {

1839 
log_ty≥
 *
…
 = &
log_ty≥s
[
i
];

1840 
ªt
;

1842 i‡(!(
log_mask
 & 
…
->
mask
)) {

1843 
ªt
 = 
…
->
	`‚
(
td
, 
log_À·
 !1, 
unô_logs
);

1844 i‡(!
ªt
) {

1845 
log_À·
--;

1846 
log_mask
 |
…
->
mask
;

1851 i‡(
¥ev_log_À·
 =
log_À·
)

1852 
	`u¶ìp
(5000);

1855 
	`td_ª°‹e_run°©e
(
td
, 
ﬁd_°©e
);

1856 
	}
}

1858 
	$fio_wrôeout_logs
(
boﬁ
 
unô_logs
)

1860 
thªad_d©a
 *
td
;

1861 
i
;

1863 
	`f‹_óch_td
(
td
, 
i
)

1864 
	`td_wrôeout_logs
(
td
, 
unô_logs
);

1865 
	}
}

	@iolog.h

1 #i‚de‡
FIO_IOLOG_H


2 
	#FIO_IOLOG_H


	)

4 
	~<°dio.h
>

6 
	~"lib/rbåì.h
"

7 
	~"lib/õì754.h
"

8 
	~"Êi°.h
"

9 
	~"i€ngöes.h
"

14 
	sio_°©
 {

15 
uöt64_t
 
	mmax_vÆ
;

16 
uöt64_t
 
	mmö_vÆ
;

17 
uöt64_t
 
	mßm∂es
;

19 
fio_Â64_t
 
	mmón
;

20 
fio_Â64_t
 
	mS
;

23 
	sio_hi°
 {

24 
uöt64_t
 
	mßm∂es
;

25 
	mhi°_œ°
;

26 
Êi°_hód
 
	mli°
;

30 
	uio_ßm∂e_d©a
 {

31 
uöt64_t
 
	mvÆ
;

32 
io_u_∂©_íåy
 *
	m∂©_íåy
;

35 
	#ßm∂e_vÆ
(
vÆue
Ë((
io_ßm∂e_d©a
Ë{ .
vÆ
 = vÆuê})

	)

36 
	#ßm∂e_∂©
(
∂©
Ë((
io_ßm∂e_d©a
Ë{ .
∂©_íåy
 =Öœà})

	)

41 
	sio_ßm∂e
 {

42 
uöt64_t
 
	mtime
;

43 
io_ßm∂e_d©a
 
	md©a
;

44 
uöt32_t
 
	m__ddú
;

45 
uöt16_t
 
	m¥i‹ôy
;

46 
uöt64_t
 
	mbs
;

49 
	sio_ßm∂e_off£t
 {

50 
io_ßm∂e
 
	ms
;

51 
uöt64_t
 
	moff£t
;

55 
	mIO_LOG_TYPE_LAT
 = 1,

56 
	mIO_LOG_TYPE_CLAT
,

57 
	mIO_LOG_TYPE_SLAT
,

58 
	mIO_LOG_TYPE_BW
,

59 
	mIO_LOG_TYPE_IOPS
,

60 
	mIO_LOG_TYPE_HIST
,

63 
	#DEF_LOG_ENTRIES
 1024

	)

64 
	#MAX_LOG_ENTRIES
 (1024 * 
DEF_LOG_ENTRIES
)

	)

66 
	sio_logs
 {

67 
Êi°_hód
 
	mli°
;

68 
uöt64_t
 
	mƒ_ßm∂es
;

69 
uöt64_t
 
	mmax_ßm∂es
;

70 *
	mlog
;

76 
	sio_log
 {

80 
Êi°_hód
 
	mio_logs
;

81 
uöt32_t
 
	mcur_log_max
;

87 
io_logs
 *
	m≥ndög
;

89 
	mlog_ddú_mask
;

91 *
	mfûíame
;

93 
thªad_d©a
 *
	mtd
;

95 
	mlog_ty≥
;

100 
boﬁ
 
	mdißbÀd
;

105 
	mlog_off£t
;

110 
	mlog_¥io
;

115 
	mlog_gz
;

120 
	mlog_gz_°‹e
;

126 
io_°©
 
	mavg_wödow
[
DDIR_RWDIR_CNT
];

127 
	mavg_m£c
;

128 
	mavg_œ°
[
DDIR_RWDIR_CNT
];

135 
io_hi°
 
	mhi°_wödow
[
DDIR_RWDIR_CNT
];

136 
	mhi°_m£c
;

137 
	mhi°_cﬂr£√ss
;

139 
±hªad_muãx_t
 
	mchunk_lock
;

140 
	mchunk_£q
;

141 
Êi°_hód
 
	mchunk_li°
;

143 
±hªad_muãx_t
 
	mde„ºed_‰ì_lock
;

144 
	#IOLOG_MAX_DEFER
 8

	)

145 *
	mde„ºed_ôems
[
IOLOG_MAX_DEFER
];

146 
	mde„ºed
;

152 
	#LOG_OFFSET_SAMPLE_BIT
 0x80000000U

	)

156 
	#LOG_PRIO_SAMPLE_BIT
 0x40000000U

	)

158 
	#LOG_SAMPLE_BITS
 (
LOG_OFFSET_SAMPLE_BIT
 | 
LOG_PRIO_SAMPLE_BIT
)

	)

159 
	#io_ßm∂e_ddú
(
io
Ë((io)->
__ddú
 & ~
LOG_SAMPLE_BITS
)

	)

161 
ölöe
 
	$io_ßm∂e_£t_ddú
(
io_log
 *
log
,

162 
io_ßm∂e
 *
io
,

163 
fio_ddú
 
ddú
)

165 
io
->
__ddú
 = 
ddú
 | 
log
->
log_ddú_mask
;

166 
	}
}

168 
ölöe
 
size_t
 
	$__log_íåy_sz
(
log_off£t
)

170 i‡(
log_off£t
)

171  (
io_ßm∂e_off£t
);

173  (
io_ßm∂e
);

174 
	}
}

176 
ölöe
 
size_t
 
	$log_íåy_sz
(
io_log
 *
log
)

178  
	`__log_íåy_sz
(
log
->
log_off£t
);

179 
	}
}

181 
ölöe
 
size_t
 
	$log_ßm∂e_sz
(
io_log
 *
log
, 
io_logs
 *
cur_log
)

183  
cur_log
->
ƒ_ßm∂es
 * 
	`log_íåy_sz
(
log
);

184 
	}
}

186 
ölöe
 
io_ßm∂e
 *
	$__gë_ßm∂e
(*
ßm∂es
, 
log_off£t
,

187 
uöt64_t
 
ßm∂e
)

189 
uöt64_t
 
ßm∂e_off£t
 = 
ßm∂e
 * 
	`__log_íåy_sz
(
log_off£t
);

190  (
io_ßm∂e
 *Ë((*Ë
ßm∂es
 + 
ßm∂e_off£t
);

191 
	}
}

193 
io_logs
 *
iﬁog_cur_log
(
io_log
 *);

194 
uöt64_t
 
iﬁog_ƒ_ßm∂es
(
io_log
 *);

195 
ªgrow_logs
(
thªad_d©a
 *);

196 
ªgrow_agg_logs
();

198 
ölöe
 
io_ßm∂e
 *
	$gë_ßm∂e
(
io_log
 *
iﬁog
,

199 
io_logs
 *
cur_log
,

200 
uöt64_t
 
ßm∂e
)

202  
	`__gë_ßm∂e
(
cur_log
->
log
, 
iﬁog
->
log_off£t
, 
ßm∂e
);

203 
	}
}

206 
	mIP_F_ONRB
 = 1,

207 
	mIP_F_ONLIST
 = 2,

208 
	mIP_F_TRIMMED
 = 4,

209 
	mIP_F_IN_FLIGHT
 = 8,

215 
	sio_põ˚
 {

217 
fio_rb_node
 
	mrb_node
;

218 
Êi°_hód
 
	mli°
;

220 
Êi°_hód
 
	måim_li°
;

222 
	mfûío
;

223 
fio_fûe
 *
	mfûe
;

225 
	moff£t
;

226 
	mnumbîio
;

227 
	mÀn
;

228 
	mÊags
;

229 
fio_ddú
 
	mddú
;

230 
	mdñay
;

231 
	mfûe_a˘i⁄
;

237 
	efûe_log_a˘
 {

238 
	mFIO_LOG_ADD_FILE
,

239 
	mFIO_LOG_OPEN_FILE
,

240 
	mFIO_LOG_CLOSE_FILE
,

241 
	mFIO_LOG_UNLINK_FILE
,

244 
	gio_u
;

245 
__mu°_check
 
ªad_iﬁog_gë
(
thªad_d©a
 *, 
io_u
 *);

246 
log_io_u
(c⁄° 
thªad_d©a
 *, c⁄° 
io_u
 *);

247 
log_fûe
(
thªad_d©a
 *, 
fio_fûe
 *, 
fûe_log_a˘
);

248 
boﬁ
 
__mu°_check
 
öô_iﬁog
(
thªad_d©a
 *
td
);

249 
log_io_põ˚
(
thªad_d©a
 *, 
io_u
 *);

250 
u∆og_io_põ˚
(
thªad_d©a
 *, 
io_u
 *);

251 
åim_io_põ˚
(c⁄° 
io_u
 *);

252 
queue_io_põ˚
(
thªad_d©a
 *, 
io_põ˚
 *);

253 
¥u√_io_põ˚_log
(
thªad_d©a
 *);

254 
wrôe_iﬁog_˛o£
(
thªad_d©a
 *);

255 
öt64_t
 
iﬁog_ôems_to_„tch
(
thªad_d©a
 *
td
);

256 
iﬁog_com¥ess_öô
(
thªad_d©a
 *, 
sk_out
 *);

257 
iﬁog_com¥ess_exô
(
thªad_d©a
 *);

258 
size_t
 
log_chunk_sizes
(
io_log
 *);

259 
öô_io_u_buf„rs
(
thªad_d©a
 *);

260 
dñay_sö˚_âime
(c⁄° 
thªad_d©a
 *,

263 #ifde‡
CONFIG_ZLIB


264 
iﬁog_fûe_öÊ©e
(const *);

270 
	slog_∑øms
 {

271 
thªad_d©a
 *
	mtd
;

272 
	mavg_m£c
;

273 
	mhi°_m£c
;

274 
	mhi°_cﬂr£√ss
;

275 
	mlog_ty≥
;

276 
	mlog_off£t
;

277 
	mlog_¥io
;

278 
	mlog_gz
;

279 
	mlog_gz_°‹e
;

280 
	mlog_com¥ess
;

283 
ölöe
 
boﬁ
 
	$≥r_unô_log
(
io_log
 *
log
)

285  
log
 && (!log->
avg_m£c
 ||Üog->
log_gz
 ||Üog->
log_gz_°‹e
);

286 
	}
}

288 
ölöe
 
boﬁ
 
	$ölöe_log
(
io_log
 *
log
)

290  
log
->
log_ty≥
 =
IO_LOG_TYPE_LAT
 ||

291 
log
->
log_ty≥
 =
IO_LOG_TYPE_CLAT
 ||

292 
log
->
log_ty≥
 =
IO_LOG_TYPE_SLAT
;

293 
	}
}

295 
ölöe
 
	$ùo_byãs_Æign
(
ª∂ay_Æign
, 
io_põ˚
 *
ùo
)

297 i‡(!
ª∂ay_Æign
)

300 
ùo
->
off£t
 &~(
ª∂ay_Æign
 - (
uöt64_t
)1);

301 
	}
}

303 
föÆize_logs
(
thªad_d©a
 *
td
, 
boﬁ
);

304 
£tup_log
(
io_log
 **, 
log_∑øms
 *, const *);

305 
Êush_log
(
io_log
 *, 
boﬁ
);

306 
Êush_ßm∂es
(
FILE
 *, *, 
uöt64_t
);

307 
uöt64_t
 
hi°_sum
(, , uint64_t *, uint64_t *);

308 
‰ì_log
(
io_log
 *);

309 
fio_wrôeout_logs
(
boﬁ
);

310 
td_wrôeout_logs
(
thªad_d©a
 *, 
boﬁ
);

311 
iﬁog_cur_Êush
(
io_log
 *, 
io_logs
 *);

313 
ölöe
 
	$öô_ùo
(
io_põ˚
 *
ùo
)

315 
	`INIT_FLIST_HEAD
(&
ùo
->
li°
);

316 
	`INIT_FLIST_HEAD
(&
ùo
->
åim_li°
);

317 
	}
}

319 
	siﬁog_com¥ess
 {

320 
Êi°_hód
 
	mli°
;

321 *
	mbuf
;

322 
size_t
 
	mÀn
;

323 
	m£q
;

	@json.c

1 
	~<°dlib.h
>

2 
	~<°rög.h
>

3 
	~<î∫o.h
>

4 
	~<°d¨g.h
>

5 
	~"js⁄.h
"

6 
	~"log.h
"

8 
js⁄_obje˘
 *
	$js⁄_¸óã_obje˘
()

10  
	`ˇŒoc
(1, (
js⁄_obje˘
));

11 
	}
}

13 
js⁄_¨øy
 *
	$js⁄_¸óã_¨øy
()

15  
	`ˇŒoc
(1, (
js⁄_¨øy
));

16 
	}
}

18 
js⁄_∑ú
 *
	$js⁄_¸óã_∑ú
(c⁄° *
«me
, 
js⁄_vÆue
 *
vÆue
)

20 
js⁄_∑ú
 *
∑ú
 = 
	`mÆloc
((json_pair));

21 i‡(
∑ú
) {

22 
∑ú
->
«me
 = 
	`°rdup
(name);

23 
∑ú
->
vÆue
 = value;

25 
vÆue
->
∑ª¡_ty≥
 = 
JSON_PARENT_TYPE_PAIR
;

26 
vÆue
->
∑ª¡_∑ú
 = 
∑ú
;

28  
∑ú
;

29 
	}
}

31 
js⁄_vÆue
 *
	$js⁄_¸óã_vÆue_öt
(
numbî
)

33 
js⁄_vÆue
 *
vÆue
 = 
	`mÆloc
((json_value));

35 i‡(
vÆue
) {

36 
vÆue
->
ty≥
 = 
JSON_TYPE_INTEGER
;

37 
vÆue
->
öãgî_numbî
 = 
numbî
;

39  
vÆue
;

40 
	}
}

42 
js⁄_vÆue
 *
	$js⁄_¸óã_vÆue_Êﬂt
(
numbî
)

44 
js⁄_vÆue
 *
vÆue
 = 
	`mÆloc
((json_value));

46 i‡(
vÆue
) {

47 
vÆue
->
ty≥
 = 
JSON_TYPE_FLOAT
;

48 
vÆue
->
Êﬂt_numbî
 = 
numbî
;

50  
vÆue
;

51 
	}
}

53 *
	$°rdup_esˇ≥
(c⁄° *
°r
)

55 c⁄° *
öput
 = 
°r
;

56 *
p
, *
ªt
;

57 
esˇ≥s
;

59 i‡(!
	`°æí
(
°r
))

60  
NULL
;

62 
esˇ≥s
 = 0;

63 (
öput
 = 
	`°Ωbrk
(öput, "\\\"")Ë!
NULL
) {

64 
esˇ≥s
++;

65 
öput
++;

68 
p
 = 
ªt
 = 
	`mÆloc
(
	`°æí
(
°r
Ë+ 
esˇ≥s
 + 1);

69 *
°r
) {

70 i‡(*
°r
 == '\\' || *str == '\"')

71 *
p
++ = '\\';

72 *
p
++ = *
°r
++;

74 *
p
 = '\0';

76  
ªt
;

77 
	}
}

82 
js⁄_vÆue
 *
	$js⁄_¸óã_vÆue_°rög
(c⁄° *
°r
)

84 
js⁄_vÆue
 *
vÆue
 = 
	`mÆloc
((json_value));

86 i‡(
vÆue
) {

87 
vÆue
->
ty≥
 = 
JSON_TYPE_STRING
;

88 
vÆue
->
°rög
 = 
	`°rdup_esˇ≥
(
°r
);

89 i‡(!
vÆue
->
°rög
) {

90 
	`‰ì
(
vÆue
);

91 
vÆue
 = 
NULL
;

94  
vÆue
;

95 
	}
}

97 
js⁄_vÆue
 *
	$js⁄_¸óã_vÆue_obje˘
(
js⁄_obje˘
 *
obj
)

99 
js⁄_vÆue
 *
vÆue
 = 
	`mÆloc
((json_value));

101 i‡(
vÆue
) {

102 
vÆue
->
ty≥
 = 
JSON_TYPE_OBJECT
;

103 
vÆue
->
obje˘
 = 
obj
;

104 
obj
->
∑ª¡
 = 
vÆue
;

106  
vÆue
;

107 
	}
}

109 
js⁄_vÆue
 *
	$js⁄_¸óã_vÆue_¨øy
(
js⁄_¨øy
 *
¨øy
)

111 
js⁄_vÆue
 *
vÆue
 = 
	`mÆloc
((json_value));

113 i‡(
vÆue
) {

114 
vÆue
->
ty≥
 = 
JSON_TYPE_ARRAY
;

115 
vÆue
->
¨øy
 =árray;

116 
¨øy
->
∑ª¡
 = 
vÆue
;

118  
vÆue
;

119 
	}
}

121 
js⁄_‰ì_∑ú
(
js⁄_∑ú
 *
∑ú
);

122 
js⁄_‰ì_vÆue
(
js⁄_vÆue
 *
vÆue
);

124 
	$js⁄_‰ì_obje˘
(
js⁄_obje˘
 *
obj
)

126 
i
;

128 
i
 = 0; i < 
obj
->
∑ú_˙t
; i++)

129 
	`js⁄_‰ì_∑ú
(
obj
->
∑ús
[
i
]);

130 
	`‰ì
(
obj
->
∑ús
);

131 
	`‰ì
(
obj
);

132 
	}
}

134 
	$js⁄_‰ì_¨øy
(
js⁄_¨øy
 *
¨øy
)

136 
i
;

138 
i
 = 0; i < 
¨øy
->
vÆue_˙t
; i++)

139 
	`js⁄_‰ì_vÆue
(
¨øy
->
vÆues
[
i
]);

140 
	`‰ì
(
¨øy
->
vÆues
);

141 
	`‰ì
(
¨øy
);

142 
	}
}

144 
	$js⁄_‰ì_∑ú
(
js⁄_∑ú
 *
∑ú
)

146 
	`js⁄_‰ì_vÆue
(
∑ú
->
vÆue
);

147 
	`‰ì
(
∑ú
->
«me
);

148 
	`‰ì
(
∑ú
);

149 
	}
}

151 
	$js⁄_‰ì_vÆue
(
js⁄_vÆue
 *
vÆue
)

153 
vÆue
->
ty≥
) {

154 
JSON_TYPE_STRING
:

155 
	`‰ì
(
vÆue
->
°rög
);

157 
JSON_TYPE_OBJECT
:

158 
	`js⁄_‰ì_obje˘
(
vÆue
->
obje˘
);

160 
JSON_TYPE_ARRAY
:

161 
	`js⁄_‰ì_¨øy
(
vÆue
->
¨øy
);

164 
	`‰ì
(
vÆue
);

165 
	}
}

167 
	$js⁄_¨øy_add_vÆue
(
js⁄_¨øy
 *
¨øy
, 
js⁄_vÆue
 *
vÆue
)

169 
js⁄_vÆue
 **
vÆues
 = 
	`ªÆloc
(
¨øy
->values,

170 (
js⁄_vÆue
 *Ë* (
¨øy
->
vÆue_˙t
 + 1));

172 i‡(!
vÆues
)

173  
ENOMEM
;

174 
vÆues
[
¨øy
->
vÆue_˙t
] = 
vÆue
;

175 
¨øy
->
vÆue_˙t
++;

176 
¨øy
->
vÆues
 = values;

178 
vÆue
->
∑ª¡_ty≥
 = 
JSON_PARENT_TYPE_ARRAY
;

179 
vÆue
->
∑ª¡_¨øy
 = 
¨øy
;

181 
	}
}

183 
	$js⁄_obje˘_add_∑ú
(
js⁄_obje˘
 *
obj
, 
js⁄_∑ú
 *
∑ú
)

185 
js⁄_∑ú
 **
∑ús
 = 
	`ªÆloc
(
obj
->pairs,

186 (
js⁄_∑ú
 *Ë* (
obj
->
∑ú_˙t
 + 1));

187 i‡(!
∑ús
)

188  
ENOMEM
;

189 
∑ús
[
obj
->
∑ú_˙t
] = 
∑ú
;

190 
obj
->
∑ú_˙t
++;

191 
obj
->
∑ús
 =Öairs;

193 
∑ú
->
∑ª¡
 = 
obj
;

195 
	}
}

197 
	$js⁄_obje˘_add_vÆue_ty≥
(
js⁄_obje˘
 *
obj
, c⁄° *
«me
,

198 c⁄° 
js⁄_vÆue
 *
¨g
)

200 
js⁄_vÆue
 *
vÆue
;

201 
js⁄_∑ú
 *
∑ú
;

202 
ªt
;

204 
¨g
->
ty≥
) {

205 
JSON_TYPE_STRING
:

206 
vÆue
 = 
	`js⁄_¸óã_vÆue_°rög
(
¨g
->
°rög
);

208 
JSON_TYPE_INTEGER
:

209 
vÆue
 = 
	`js⁄_¸óã_vÆue_öt
(
¨g
->
öãgî_numbî
);

211 
JSON_TYPE_FLOAT
:

212 
vÆue
 = 
	`js⁄_¸óã_vÆue_Êﬂt
(
¨g
->
Êﬂt_numbî
);

214 
JSON_TYPE_OBJECT
:

215 
vÆue
 = 
	`js⁄_¸óã_vÆue_obje˘
(
¨g
->
obje˘
);

218 
JSON_TYPE_ARRAY
:

219 
vÆue
 = 
	`js⁄_¸óã_vÆue_¨øy
(
¨g
->
¨øy
);

223 i‡(!
vÆue
)

224  
ENOMEM
;

226 
∑ú
 = 
	`js⁄_¸óã_∑ú
(
«me
, 
vÆue
);

227 i‡(!
∑ú
) {

228 
	`js⁄_‰ì_vÆue
(
vÆue
);

229  
ENOMEM
;

231 
ªt
 = 
	`js⁄_obje˘_add_∑ú
(
obj
, 
∑ú
);

232 i‡(
ªt
) {

233 
	`js⁄_‰ì_∑ú
(
∑ú
);

234  
ENOMEM
;

237 
	}
}

239 
	$js⁄_¨øy_add_vÆue_ty≥
(
js⁄_¨øy
 *
¨øy
,

240 c⁄° 
js⁄_vÆue
 *
¨g
)

242 
js⁄_vÆue
 *
vÆue
;

243 
ªt
;

245 
¨g
->
ty≥
) {

246 
JSON_TYPE_STRING
:

247 
vÆue
 = 
	`js⁄_¸óã_vÆue_°rög
(
¨g
->
°rög
);

249 
JSON_TYPE_INTEGER
:

250 
vÆue
 = 
	`js⁄_¸óã_vÆue_öt
(
¨g
->
öãgî_numbî
);

252 
JSON_TYPE_FLOAT
:

253 
vÆue
 = 
	`js⁄_¸óã_vÆue_Êﬂt
(
¨g
->
Êﬂt_numbî
);

255 
JSON_TYPE_OBJECT
:

256 
vÆue
 = 
	`js⁄_¸óã_vÆue_obje˘
(
¨g
->
obje˘
);

259 
JSON_TYPE_ARRAY
:

260 
vÆue
 = 
	`js⁄_¸óã_vÆue_¨øy
(
¨g
->
¨øy
);

264 i‡(!
vÆue
)

265  
ENOMEM
;

267 
ªt
 = 
	`js⁄_¨øy_add_vÆue
(
¨øy
, 
vÆue
);

268 i‡(
ªt
) {

269 
	`js⁄_‰ì_vÆue
(
vÆue
);

270  
ENOMEM
;

273 
	}
}

275 
js⁄_vÆue_Àvñ
(
js⁄_vÆue
 *
vÆue
);

276 
js⁄_∑ú_Àvñ
(
js⁄_∑ú
 *
∑ú
);

277 
js⁄_¨øy_Àvñ
(
js⁄_¨øy
 *
¨øy
);

278 
	$js⁄_obje˘_Àvñ
(
js⁄_obje˘
 *
obje˘
)

280 i‡(
obje˘
->
∑ª¡
 =
NULL
)

282  
	`js⁄_vÆue_Àvñ
(
obje˘
->
∑ª¡
);

283 
	}
}

285 
	$js⁄_∑ú_Àvñ
(
js⁄_∑ú
 *
∑ú
)

287  
	`js⁄_obje˘_Àvñ
(
∑ú
->
∑ª¡
) + 1;

288 
	}
}

290 
	$js⁄_¨øy_Àvñ
(
js⁄_¨øy
 *
¨øy
)

292  
	`js⁄_vÆue_Àvñ
(
¨øy
->
∑ª¡
);

293 
	}
}

295 
	$js⁄_vÆue_Àvñ
(
js⁄_vÆue
 *
vÆue
)

297 i‡(
vÆue
->
∑ª¡_ty≥
 =
JSON_PARENT_TYPE_PAIR
)

298  
	`js⁄_∑ú_Àvñ
(
vÆue
->
∑ª¡_∑ú
);

300  
	`js⁄_¨øy_Àvñ
(
vÆue
->
∑ª¡_¨øy
) + 1;

301 
	}
}

303 
	$js⁄_¥öt_Àvñ
(
Àvñ
, 
buf_ouçut
 *
out
)

305 
Àvñ
-- > 0)

306 
	`log_buf
(
out
, " ");

307 
	}
}

309 
js⁄_¥öt_∑ú
(
js⁄_∑ú
 *
∑ú
, 
buf_ouçut
 *);

310 
js⁄_¥öt_vÆue
(
js⁄_vÆue
 *
vÆue
, 
buf_ouçut
 *);

312 
	$js⁄_¥öt_obje˘
(
js⁄_obje˘
 *
obj
, 
buf_ouçut
 *
out
)

314 
i
;

316 
	`log_buf
(
out
, "{\n");

317 
i
 = 0; i < 
obj
->
∑ú_˙t
; i++) {

318 i‡(
i
 > 0)

319 
	`log_buf
(
out
, ",\n");

320 
	`js⁄_¥öt_∑ú
(
obj
->
∑ús
[
i
], 
out
);

322 
	`log_buf
(
out
, "\n");

323 
	`js⁄_¥öt_Àvñ
(
	`js⁄_obje˘_Àvñ
(
obj
), 
out
);

324 
	`log_buf
(
out
, "}");

325 
	}
}

327 
	$js⁄_¥öt_∑ú
(
js⁄_∑ú
 *
∑ú
, 
buf_ouçut
 *
out
)

329 
	`js⁄_¥öt_Àvñ
(
	`js⁄_∑ú_Àvñ
(
∑ú
), 
out
);

330 
	`log_buf
(
out
, "\"%s\" : ", 
∑ú
->
«me
);

331 
	`js⁄_¥öt_vÆue
(
∑ú
->
vÆue
, 
out
);

332 
	}
}

334 
	$js⁄_¥öt_¨øy
(
js⁄_¨øy
 *
¨øy
, 
buf_ouçut
 *
out
)

336 
i
;

338 
	`log_buf
(
out
, "[\n");

339 
i
 = 0; i < 
¨øy
->
vÆue_˙t
; i++) {

340 i‡(
i
 > 0)

341 
	`log_buf
(
out
, ",\n");

342 
	`js⁄_¥öt_Àvñ
(
	`js⁄_vÆue_Àvñ
(
¨øy
->
vÆues
[
i
]), 
out
);

343 
	`js⁄_¥öt_vÆue
(
¨øy
->
vÆues
[
i
], 
out
);

345 
	`log_buf
(
out
, "\n");

346 
	`js⁄_¥öt_Àvñ
(
	`js⁄_¨øy_Àvñ
(
¨øy
), 
out
);

347 
	`log_buf
(
out
, "]");

348 
	}
}

350 
	$js⁄_¥öt_vÆue
(
js⁄_vÆue
 *
vÆue
, 
buf_ouçut
 *
out
)

352 
vÆue
->
ty≥
) {

353 
JSON_TYPE_STRING
:

354 
	`log_buf
(
out
, "\"%s\"", 
vÆue
->
°rög
);

356 
JSON_TYPE_INTEGER
:

357 
	`log_buf
(
out
, "%Œd", 
vÆue
->
öãgî_numbî
);

359 
JSON_TYPE_FLOAT
:

360 
	`log_buf
(
out
, "%f", 
vÆue
->
Êﬂt_numbî
);

362 
JSON_TYPE_OBJECT
:

363 
	`js⁄_¥öt_obje˘
(
vÆue
->
obje˘
, 
out
);

365 
JSON_TYPE_ARRAY
:

366 
	`js⁄_¥öt_¨øy
(
vÆue
->
¨øy
, 
out
);

369 
	}
}

	@json.h

1 #i‚de‡
__JSON__H


2 
	#__JSON__H


	)

4 
	~"lib/ouçut_buf„r.h
"

6 
	#JSON_TYPE_STRING
 0

	)

7 
	#JSON_TYPE_INTEGER
 1

	)

8 
	#JSON_TYPE_FLOAT
 2

	)

9 
	#JSON_TYPE_OBJECT
 3

	)

10 
	#JSON_TYPE_ARRAY
 4

	)

11 
	#JSON_PARENT_TYPE_PAIR
 0

	)

12 
	#JSON_PARENT_TYPE_ARRAY
 1

	)

13 
	sjs⁄_vÆue
 {

14 
	mty≥
;

16 
	möãgî_numbî
;

17 
	mÊﬂt_numbî
;

18 *
	m°rög
;

19 
js⁄_obje˘
 *
	mobje˘
;

20 
js⁄_¨øy
 *
	m¨øy
;

22 
	m∑ª¡_ty≥
;

24 
js⁄_∑ú
 *
	m∑ª¡_∑ú
;

25 
js⁄_¨øy
 *
	m∑ª¡_¨øy
;

29 
	sjs⁄_¨øy
 {

30 
js⁄_vÆue
 **
	mvÆues
;

31 
	mvÆue_˙t
;

32 
js⁄_vÆue
 *
	m∑ª¡
;

35 
	sjs⁄_obje˘
 {

36 
js⁄_∑ú
 **
	m∑ús
;

37 
	m∑ú_˙t
;

38 
js⁄_vÆue
 *
	m∑ª¡
;

41 
	sjs⁄_∑ú
 {

42 *
	m«me
;

43 
js⁄_vÆue
 *
	mvÆue
;

44 
js⁄_obje˘
 *
	m∑ª¡
;

47 
js⁄_obje˘
 *
js⁄_¸óã_obje˘
();

48 
js⁄_¨øy
 *
js⁄_¸óã_¨øy
();

50 
js⁄_‰ì_obje˘
(
js⁄_obje˘
 *
obj
);

52 
js⁄_obje˘_add_vÆue_ty≥
(
js⁄_obje˘
 *
obj
, c⁄° *
«me
,

53 c⁄° 
js⁄_vÆue
 *
vÆ
);

55 
ölöe
 
	$js⁄_obje˘_add_vÆue_öt
(
js⁄_obje˘
 *
obj
,

56 c⁄° *
«me
, 
vÆ
)

58 
js⁄_vÆue
 
¨g
 = {

59 .
ty≥
 = 
JSON_TYPE_INTEGER
,

62 
¨g
.
öãgî_numbî
 = 
vÆ
;

63  
	`js⁄_obje˘_add_vÆue_ty≥
(
obj
, 
«me
, &
¨g
);

64 
	}
}

66 
ölöe
 
	$js⁄_obje˘_add_vÆue_Êﬂt
(
js⁄_obje˘
 *
obj
,

67 c⁄° *
«me
, 
vÆ
)

69 
js⁄_vÆue
 
¨g
 = {

70 .
ty≥
 = 
JSON_TYPE_FLOAT
,

73 
¨g
.
Êﬂt_numbî
 = 
vÆ
;

74  
	`js⁄_obje˘_add_vÆue_ty≥
(
obj
, 
«me
, &
¨g
);

75 
	}
}

77 
ölöe
 
	$js⁄_obje˘_add_vÆue_°rög
(
js⁄_obje˘
 *
obj
,

78 c⁄° *
«me
,

79 c⁄° *
vÆ
)

81 
js⁄_vÆue
 
¨g
 = {

82 .
ty≥
 = 
JSON_TYPE_STRING
,

85 c⁄° *
a
;

86 *
b
;

87 } 
°rög
;

89 
°rög
.
a
 = 
vÆ
 ? val : "";

90 
¨g
.
°rög
 = såög.
b
;

91  
	`js⁄_obje˘_add_vÆue_ty≥
(
obj
, 
«me
, &
¨g
);

92 
	}
}

94 
ölöe
 
	$js⁄_obje˘_add_vÆue_obje˘
(
js⁄_obje˘
 *
obj
,

95 c⁄° *
«me
,

96 
js⁄_obje˘
 *
vÆ
)

98 
js⁄_vÆue
 
¨g
 = {

99 .
ty≥
 = 
JSON_TYPE_OBJECT
,

102 
¨g
.
obje˘
 = 
vÆ
;

103  
	`js⁄_obje˘_add_vÆue_ty≥
(
obj
, 
«me
, &
¨g
);

104 
	}
}

106 
ölöe
 
	$js⁄_obje˘_add_vÆue_¨øy
(
js⁄_obje˘
 *
obj
,

107 c⁄° *
«me
,

108 
js⁄_¨øy
 *
vÆ
)

110 
js⁄_vÆue
 
¨g
 = {

111 .
ty≥
 = 
JSON_TYPE_ARRAY
,

114 
¨g
.
¨øy
 = 
vÆ
;

115  
	`js⁄_obje˘_add_vÆue_ty≥
(
obj
, 
«me
, &
¨g
);

116 
	}
}

118 
js⁄_¨øy_add_vÆue_ty≥
(
js⁄_¨øy
 *
¨øy
,

119 c⁄° 
js⁄_vÆue
 *
vÆ
);

121 
ölöe
 
	$js⁄_¨øy_add_vÆue_öt
(
js⁄_¨øy
 *
obj
,

122 
vÆ
)

124 
js⁄_vÆue
 
¨g
 = {

125 .
ty≥
 = 
JSON_TYPE_INTEGER
,

128 
¨g
.
öãgî_numbî
 = 
vÆ
;

129  
	`js⁄_¨øy_add_vÆue_ty≥
(
obj
, &
¨g
);

130 
	}
}

132 
ölöe
 
	$js⁄_¨øy_add_vÆue_Êﬂt
(
js⁄_¨øy
 *
obj
,

133 
vÆ
)

135 
js⁄_vÆue
 
¨g
 = {

136 .
ty≥
 = 
JSON_TYPE_FLOAT
,

139 
¨g
.
Êﬂt_numbî
 = 
vÆ
;

140  
	`js⁄_¨øy_add_vÆue_ty≥
(
obj
, &
¨g
);

141 
	}
}

143 
ölöe
 
	$js⁄_¨øy_add_vÆue_°rög
(
js⁄_¨øy
 *
obj
,

144 c⁄° *
vÆ
)

146 
js⁄_vÆue
 
¨g
 = {

147 .
ty≥
 = 
JSON_TYPE_STRING
,

150 
¨g
.
°rög
 = (*)
vÆ
;

151  
	`js⁄_¨øy_add_vÆue_ty≥
(
obj
, &
¨g
);

152 
	}
}

154 
ölöe
 
	$js⁄_¨øy_add_vÆue_obje˘
(
js⁄_¨øy
 *
obj
,

155 
js⁄_obje˘
 *
vÆ
)

157 
js⁄_vÆue
 
¨g
 = {

158 .
ty≥
 = 
JSON_TYPE_OBJECT
,

161 
¨g
.
obje˘
 = 
vÆ
;

162  
	`js⁄_¨øy_add_vÆue_ty≥
(
obj
, &
¨g
);

163 
	}
}

165 
ölöe
 
	$js⁄_¨øy_add_vÆue_¨øy
(
js⁄_¨øy
 *
obj
,

166 
js⁄_¨øy
 *
vÆ
)

168 
js⁄_vÆue
 
¨g
 = {

169 .
ty≥
 = 
JSON_TYPE_ARRAY
,

172 
¨g
.
¨øy
 = 
vÆ
;

173  
	`js⁄_¨øy_add_vÆue_ty≥
(
obj
, &
¨g
);

174 
	}
}

176 
	#js⁄_¨øy_œ°_vÆue_obje˘
(
obj
) \

177 (
obj
->
vÆues
[obj->
vÆue_˙t
 - 1]->
obje˘
)

	)

179 
js⁄_¥öt_obje˘
(
js⁄_obje˘
 *
obj
, 
buf_ouçut
 *
out
);

	@lex.yy.c

5 
	#YY_INT_ALIGNED
 

	)

9 
	#FLEX_SCANNER


	)

10 
	#YY_FLEX_MAJOR_VERSION
 2

	)

11 
	#YY_FLEX_MINOR_VERSION
 6

	)

12 
	#YY_FLEX_SUBMINOR_VERSION
 4

	)

13 #i‡
YY_FLEX_SUBMINOR_VERSION
 > 0

14 
	#FLEX_BETA


	)

20 
	~<°dio.h
>

21 
	~<°rög.h
>

22 
	~<î∫o.h
>

23 
	~<°dlib.h
>

29 #i‚de‡
FLEXINT_H


30 
	#FLEXINT_H


	)

34 #i‡
deföed
 (
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L

39 #i‚de‡
__STDC_LIMIT_MACROS


40 
	#__STDC_LIMIT_MACROS
 1

	)

43 
	~<öây≥s.h
>

44 
öt8_t
 
	tÊex_öt8_t
;

45 
uöt8_t
 
	tÊex_uöt8_t
;

46 
öt16_t
 
	tÊex_öt16_t
;

47 
uöt16_t
 
	tÊex_uöt16_t
;

48 
öt32_t
 
	tÊex_öt32_t
;

49 
uöt32_t
 
	tÊex_uöt32_t
;

51 sig√d 
	tÊex_öt8_t
;

52 
	tÊex_öt16_t
;

53 
	tÊex_öt32_t
;

54 
	tÊex_uöt8_t
;

55 
	tÊex_uöt16_t
;

56 
	tÊex_uöt32_t
;

59 #i‚de‡
INT8_MIN


60 
	#INT8_MIN
 (-128)

	)

62 #i‚de‡
INT16_MIN


63 
	#INT16_MIN
 (-32767-1)

	)

65 #i‚de‡
INT32_MIN


66 
	#INT32_MIN
 (-2147483647-1)

	)

68 #i‚de‡
INT8_MAX


69 
	#INT8_MAX
 (127)

	)

71 #i‚de‡
INT16_MAX


72 
	#INT16_MAX
 (32767)

	)

74 #i‚de‡
INT32_MAX


75 
	#INT32_MAX
 (2147483647)

	)

77 #i‚de‡
UINT8_MAX


78 
	#UINT8_MAX
 (255U)

	)

80 #i‚de‡
UINT16_MAX


81 
	#UINT16_MAX
 (65535U)

	)

83 #i‚de‡
UINT32_MAX


84 
	#UINT32_MAX
 (4294967295U)

	)

87 #i‚de‡
SIZE_MAX


88 
	#SIZE_MAX
 (~(
size_t
)0)

	)

98 
	#yyc⁄°
 c⁄°

	)

100 #i‡
deföed
(
__GNUC__
) && __GNUC__ >= 3

101 
	#yyn‹ëu∫
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

103 
	#yyn‹ëu∫


	)

107 
	#YY_NULL
 0

	)

112 
	#YY_SC_TO_UI
(
c
Ë((
YY_CHAR
Ë(c))

	)

118 
	#BEGIN
 (
yy_°¨t
Ë1 + 2 *

	)

123 
	#YY_START
 (((
yy_°¨t
Ë- 1Ë/ 2)

	)

124 
	#YYSTATE
 
YY_START


	)

126 
	#YY_STATE_EOF
(
°©e
Ë(
YY_END_OF_BUFFER
 + sèã + 1)

	)

128 
	#YY_NEW_FILE
 
	`yyª°¨t
–
yyö
 )

	)

129 
	#YY_END_OF_BUFFER_CHAR
 0

	)

132 #i‚de‡
YY_BUF_SIZE


133 #ifde‡
__ü64__


138 
	#YY_BUF_SIZE
 32768

	)

140 
	#YY_BUF_SIZE
 16384

	)

146 
	#YY_STATE_BUF_SIZE
 ((
YY_BUF_SIZE
 + 2Ë* (
yy_°©e_ty≥
))

	)

148 #i‚de‡
YY_TYPEDEF_YY_BUFFER_STATE


149 
	#YY_TYPEDEF_YY_BUFFER_STATE


	)

150 
yy_buf„r_°©e
 *
	tYY_BUFFER_STATE
;

153 #i‚de‡
YY_TYPEDEF_YY_SIZE_T


154 
	#YY_TYPEDEF_YY_SIZE_T


	)

155 
size_t
 
	tyy_size_t
;

158 
yyÀng
;

160 
FILE
 *
yyö
, *
yyout
;

162 
	#EOB_ACT_CONTINUE_SCAN
 0

	)

163 
	#EOB_ACT_END_OF_FILE
 1

	)

164 
	#EOB_ACT_LAST_MATCH
 2

	)

166 
	#YY_LESS_LINENO
(
n
)

	)

167 
	#YY_LINENO_REWIND_TO
(
±r
)

	)

170 
	#yyÀss
(
n
) \

174 
yyÀss_ma¸o_¨g
 = (
n
); \

175 
	`YY_LESS_LINENO
(
yyÀss_ma¸o_¨g
);\

176 *
yy_˝
 = (
yy_hﬁd_ch¨
); \

177 
YY_RESTORE_YY_MORE_OFFSET
 \

178 (
yy_c_buf_p
Ë
yy_˝
 = 
yy_bp
 + 
yyÀss_ma¸o_¨g
 - 
YY_MORE_ADJ
; \

179 
YY_DO_BEFORE_ACTION
; \

181  0 )

	)

182 
	#u≈ut
(
c
Ë
	`yyu≈ut
–c, (
yyãxt_±r
Ë)

	)

184 #i‚de‡
YY_STRUCT_YY_BUFFER_STATE


185 
	#YY_STRUCT_YY_BUFFER_STATE


	)

186 
	syy_buf„r_°©e


188 
FILE
 *
	myy_öput_fûe
;

190 *
	myy_ch_buf
;

191 *
	myy_buf_pos
;

196 
	myy_buf_size
;

201 
	myy_n_ch¨s
;

207 
	myy_is_our_buf„r
;

214 
	myy_is_öãø˘ive
;

220 
	myy_©_bﬁ
;

222 
	myy_bs_löío
;

223 
	myy_bs_cﬁumn
;

228 
	myy_fûl_buf„r
;

230 
	myy_buf„r_°©us
;

232 
	#YY_BUFFER_NEW
 0

	)

233 
	#YY_BUFFER_NORMAL
 1

	)

244 
	#YY_BUFFER_EOF_PENDING
 2

	)

250 
size_t
 
	gyy_buf„r_°ack_t›
 = 0;

251 
size_t
 
	gyy_buf„r_°ack_max
 = 0;

252 
YY_BUFFER_STATE
 * 
	gyy_buf„r_°ack
 = 
NULL
;

260 
	#YY_CURRENT_BUFFER
 ( (
yy_buf„r_°ack
) \

261 ? (
yy_buf„r_°ack
)[(
yy_buf„r_°ack_t›
)] \

262 : 
NULL
)

	)

266 
	#YY_CURRENT_BUFFER_LVALUE
 (
yy_buf„r_°ack
)[(
yy_buf„r_°ack_t›
)]

	)

269 
	gyy_hﬁd_ch¨
;

270 
	gyy_n_ch¨s
;

271 
	gyyÀng
;

274 *
	gyy_c_buf_p
 = 
NULL
;

275 
	gyy_öô
 = 0;

276 
	gyy_°¨t
 = 0;

281 
	gyy_did_buf„r_swôch_⁄_eof
;

283 
yyª°¨t
 ( 
FILE
 *
öput_fûe
 );

284 
yy_swôch_to_buf„r
 ( 
YY_BUFFER_STATE
 
√w_buf„r
 );

285 
YY_BUFFER_STATE
 
yy_¸óã_buf„r
 ( 
FILE
 *
fûe
, 
size
 );

286 
yy_dñëe_buf„r
 ( 
YY_BUFFER_STATE
 
b
 );

287 
yy_Êush_buf„r
 ( 
YY_BUFFER_STATE
 
b
 );

288 
yypush_buf„r_°©e
 ( 
YY_BUFFER_STATE
 
√w_buf„r
 );

289 
yyp›_buf„r_°©e
 ( );

291 
yyísuª_buf„r_°ack
 ( );

292 
yy_lﬂd_buf„r_°©e
 ( );

293 
yy_öô_buf„r
 ( 
YY_BUFFER_STATE
 
b
, 
FILE
 *
fûe
 );

294 
	#YY_FLUSH_BUFFER
 
	`yy_Êush_buf„r
–
YY_CURRENT_BUFFER
 )

	)

296 
YY_BUFFER_STATE
 
yy_sˇn_buf„r
 ( *
ba£
, 
yy_size_t
 
size
 );

297 
YY_BUFFER_STATE
 
yy_sˇn_°rög
 ( c⁄° *
yy_°r
 );

298 
YY_BUFFER_STATE
 
yy_sˇn_byãs
 ( c⁄° *
byãs
, 
Àn
 );

300 *
yyÆloc
 ( 
yy_size_t
 );

301 *
yyªÆloc
 ( *, 
yy_size_t
 );

302 
yy‰ì
 ( * );

304 
	#yy_√w_buf„r
 
yy_¸óã_buf„r


	)

305 
	#yy_£t_öãø˘ive
(
is_öãø˘ive
) \

307 i‡–! 
YY_CURRENT_BUFFER
 ){ \

308 
	`yyísuª_buf„r_°ack
 (); \

309 
YY_CURRENT_BUFFER_LVALUE
 = \

310 
	`yy_¸óã_buf„r
–
yyö
, 
YY_BUF_SIZE
 ); \

312 
YY_CURRENT_BUFFER_LVALUE
->
yy_is_öãø˘ive
 = 
is_öãø˘ive
; \

313 }

	)

314 
	#yy_£t_bﬁ
(
©_bﬁ
) \

316 i‡–! 
YY_CURRENT_BUFFER
 ){\

317 
	`yyísuª_buf„r_°ack
 (); \

318 
YY_CURRENT_BUFFER_LVALUE
 = \

319 
	`yy_¸óã_buf„r
–
yyö
, 
YY_BUF_SIZE
 ); \

321 
YY_CURRENT_BUFFER_LVALUE
->
yy_©_bﬁ
 = 
©_bﬁ
; \

322 }

	)

323 
	#YY_AT_BOL
(Ë(
YY_CURRENT_BUFFER_LVALUE
->
yy_©_bﬁ
)

	)

326 
Êex_uöt8_t
 
	tYY_CHAR
;

328 
FILE
 *
	gyyö
 = 
NULL
, *
	gyyout
 = NULL;

330 
	tyy_°©e_ty≥
;

332 
yylöío
;

333 
	gyylöío
 = 1;

335 *
yyãxt
;

336 #ifde‡
yyãxt_±r


337 #unde‡
yyãxt_±r


339 
	#yyãxt_±r
 
yyãxt


	)

341 
yy_°©e_ty≥
 
yy_gë_¥evious_°©e
 ( );

342 
yy_°©e_ty≥
 
yy_åy_NUL_å™s
 ( yy_°©e_ty≥ 
cuºít_°©e
 );

343 
yy_gë_√xt_buf„r
 ( );

344 
yyn‹ëu∫
 
yy_Áèl_îr‹
 ( c⁄° * 
msg
 );

349 
	#YY_DO_BEFORE_ACTION
 \

350 (
yyãxt_±r
Ë
yy_bp
; \

351 
yyÀng
 = (Ë(
yy_˝
 - 
yy_bp
); \

352 (
yy_hﬁd_ch¨
Ë*
yy_˝
; \

353 *
yy_˝
 = '\0'; \

354 (
yy_c_buf_p
Ë
yy_˝
;

	)

355 
	#YY_NUM_RULES
 24

	)

356 
	#YY_END_OF_BUFFER
 25

	)

359 
	syy_å™s_öfo


361 
Êex_öt32_t
 
	myy_vîify
;

362 
Êex_öt32_t
 
	myy_nxt
;

364 c⁄° 
Êex_öt16_t
 
	gyy_ac˚±
[47] =

373 c⁄° 
YY_CHAR
 
	gyy_ec
[256] =

405 c⁄° 
YY_CHAR
 
	gyy_mëa
[25] =

412 c⁄° 
Êex_öt16_t
 
	gyy_ba£
[49] =

421 c⁄° 
Êex_öt16_t
 
	gyy_def
[49] =

430 c⁄° 
Êex_öt16_t
 
	gyy_nxt
[90] =

443 c⁄° 
Êex_öt16_t
 
	gyy_chk
[90] =

456 
yy_°©e_ty≥
 
	gyy_œ°_ac˚±ög_°©e
;

457 *
	gyy_œ°_ac˚±ög_˝os
;

459 
yy_Êex_debug
;

460 
	gyy_Êex_debug
 = 0;

465 
	#REJECT
 
ªje˘_u£d_but_nŸ_dëe˘ed


	)

466 
	#yym‹e
(Ë
yym‹e_u£d_but_nŸ_dëe˘ed


	)

467 
	#YY_MORE_ADJ
 0

	)

468 
	#YY_RESTORE_YY_MORE_OFFSET


	)

469 *
	gyyãxt
;

491 
	~<°dio.h
>

492 
	~<°rög.h
>

493 
	~"y.èb.h
"

495 
	#YYSTYPE
 
PARSER_VALUE_TYPE


	)

497 
Àxî_öput
(*
buf„r
, *
nbyãs
, 
buf„rsize
);

499 #unde‡
YY_INPUT


500 
	#YY_INPUT
(
buf„r
, 
byãs_ªad
, 
byãs_ªque°ed
) \

502 
__ªt
; \

503 
__bªad
 = 
byãs_ªad
; \

504 
__ªt
 = 
	`Àxî_öput
((
buf„r
), &
__bªad
, (
byãs_ªque°ed
)); \

505 
byãs_ªad
 = 
__bªad
; \

506 
__ªt
; \

507 })

	)

509 
yyîr‹
(*
ªsu…
, *
dªsu…
,

510 *
has_îr‹
, *
unôs_•ecifõd
, c⁄° *
msg
);

512 
__©åibuã__
((
unu£d
)Ë
yyu≈ut
(
c
, *
buf_±r
);

513 
__©åibuã__
((
unu£d
)Ë
öput
();

516 
	gÀxî_vÆue_is_time
 = 0;

518 
	#£t_suffix_vÆue
(
yylvÆ
, 
i_vÆ
, 
d_vÆ
, 
has_d_vÆ
) \

519 (
yylvÆ
).
v
.
dvÆ
 = (
d_vÆ
); \

520 (
yylvÆ
).
v
.
ivÆ
 = (
i_vÆ
); \

521 (
yylvÆ
).
v
.
has_dvÆ
 = (
has_d_vÆ
); \

522 (
yylvÆ
).
v
.
has_îr‹
 = 0;

	)

527 
	#INITIAL
 0

	)

529 #i‚de‡
YY_NO_UNISTD_H


534 
	~<uni°d.h
>

537 #i‚de‡
YY_EXTRA_TYPE


538 
	#YY_EXTRA_TYPE
 *

	)

541 
yy_öô_globÆs
 ( );

546 
yyÀx_de°roy
 ( );

548 
yygë_debug
 ( );

550 
yy£t_debug
 ( 
debug_Êag
 );

552 
YY_EXTRA_TYPE
 
yygë_exåa
 ( );

554 
yy£t_exåa
 ( 
YY_EXTRA_TYPE
 
u£r_deföed
 );

556 
FILE
 *
yygë_ö
 ( );

558 
yy£t_ö
 ( 
FILE
 * 
_ö_°r
 );

560 
FILE
 *
yygë_out
 ( );

562 
yy£t_out
 ( 
FILE
 * 
_out_°r
 );

564 
yygë_Àng
 ( );

566 *
yygë_ãxt
 ( );

568 
yygë_löío
 ( );

570 
yy£t_löío
 ( 
_löe_numbî
 );

576 #i‚de‡
YY_SKIP_YYWRAP


577 #ifde‡
__˝lu•lus


578 "C" 
yywøp
 ( );

580 
yywøp
 ( );

584 #i‚de‡
YY_NO_UNPUT


586 
yyu≈ut
 ( 
c
, *
buf_±r
 );

590 #i‚de‡
yyãxt_±r


591 
yy_Êex_°∫˝y
 ( *, const *, );

594 #ifde‡
YY_NEED_STRLEN


595 
yy_Êex_°æí
 ( const * );

598 #i‚de‡
YY_NO_INPUT


599 #ifde‡
__˝lu•lus


600 
yyöput
 ( );

602 
öput
 ( );

608 #i‚de‡
YY_READ_BUF_SIZE


609 #ifde‡
__ü64__


611 
	#YY_READ_BUF_SIZE
 16384

	)

613 
	#YY_READ_BUF_SIZE
 8192

	)

618 #i‚de‡
ECHO


622 
	#ECHO
 dÿ{ i‡(
	`fwrôe
–
yyãxt
, (
size_t
Ë
yyÀng
, 1, 
yyout
 )Ë{} } 0)

	)

628 #i‚de‡
YY_INPUT


629 
	#YY_INPUT
(
buf
,
ªsu…
,
max_size
) \

630 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_is_öãø˘ive
 ) \

632 
c
 = '*'; \

633 
n
; \

634  
n
 = 0;Ç < 
max_size
 && \

635 (
c
 = 
	`gëc
–
yyö
 )Ë!
EOF
 && c !'\n'; ++
n
 ) \

636 
buf
[
n
] = (Ë
c
; \

637 i‡–
c
 == '\n' ) \

638 
buf
[
n
++] = (Ë
c
; \

639 i‡–
c
 =
EOF
 && 
	`„º‹
–
yyö
 ) ) \

640 
	`YY_FATAL_ERROR
( "input in flex scanner failed" ); \

641 
ªsu…
 = 
n
; \

645 
î∫o
=0; \

646  (
ªsu…
 = (Ë
	`‰ód
(
buf
, 1, (
yy_size_t
Ë
max_size
, 
yyö
)Ë=0 && 
	`„º‹
(yyin)) \

648 if–
î∫o
 !
EINTR
) \

650 
	`YY_FATAL_ERROR
( "input in flex scanner failed" ); \

653 
î∫o
=0; \

654 
	`˛óªº
(
yyö
); \

658 

	)

665 #i‚de‡
yyãrmö©e


666 
	#yyãrmö©e
(Ë 
YY_NULL


	)

670 #i‚de‡
YY_START_STACK_INCR


671 
	#YY_START_STACK_INCR
 25

	)

675 #i‚de‡
YY_FATAL_ERROR


676 
	#YY_FATAL_ERROR
(
msg
Ë
	`yy_Áèl_îr‹
–msg )

	)

684 #i‚de‡
YY_DECL


685 
	#YY_DECL_IS_OURS
 1

	)

687 
yyÀx
 ();

689 
	#YY_DECL
 
	`yyÀx
 ()

	)

695 #i‚de‡
YY_USER_ACTION


696 
	#YY_USER_ACTION


	)

700 #i‚de‡
YY_BREAK


701 
	#YY_BREAK
 ;

	)

704 
	#YY_RULE_SETUP
 \

705 
YY_USER_ACTION


	)

709 
	gYY_DECL


711 
yy_°©e_ty≥
 
	gyy_cuºít_°©e
;

712 *
	gyy_˝
, *
	gyy_bp
;

713 
	gyy_a˘
;

715 i‡–!(
	gyy_öô
) )

717 (
	gyy_öô
) = 1;

719 #ifde‡
YY_USER_INIT


720 
	gYY_USER_INIT
;

723 i‡–! (
	gyy_°¨t
) )

724 (
	gyy_°¨t
) = 1;

726 i‡–! 
	gyyö
 )

727 
	gyyö
 = 
°dö
;

729 i‡–! 
	gyyout
 )

730 
	gyyout
 = 
°dout
;

732 i‡–! 
	gYY_CURRENT_BUFFER
 ) {

733 
yyísuª_buf„r_°ack
 ();

734 
	gYY_CURRENT_BUFFER_LVALUE
 =

735 
yy_¸óã_buf„r
–
yyö
, 
YY_BUF_SIZE
 );

738 
yy_lﬂd_buf„r_°©e
( );

750 
	gyy_˝
 = (
yy_c_buf_p
);

753 *
	gyy_˝
 = (
yy_hﬁd_ch¨
);

758 
	gyy_bp
 = 
yy_˝
;

760 
	gyy_cuºít_°©e
 = (
yy_°¨t
);

761 
	gyy_m©ch
:

764 
YY_CHAR
 
yy_c
 = 
yy_ec
[
YY_SC_TO_UI
(*
yy_˝
)] ;

765 i‡–
	gyy_ac˚±
[
yy_cuºít_°©e
] )

767 (
	gyy_œ°_ac˚±ög_°©e
Ë
yy_cuºít_°©e
;

768 (
	gyy_œ°_ac˚±ög_˝os
Ë
yy_˝
;

770  
	gyy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
	gyy_c
] != yy_current_state )

772 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

773 i‡–
	gyy_cuºít_°©e
 >= 47 )

774 
yy_c
 = 
yy_mëa
[yy_c];

776 
	gyy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[
yy_cuºít_°©e
] + 
yy_c
];

777 ++
	gyy_˝
;

779  
	gyy_ba£
[
yy_cuºít_°©e
] != 65 );

781 
	gyy_föd_a˘i⁄
:

782 
yy_a˘
 = 
yy_ac˚±
[
yy_cuºít_°©e
];

783 i‡–
	gyy_a˘
 == 0 )

785 
yy_˝
 = (
yy_œ°_ac˚±ög_˝os
);

786 
	gyy_cuºít_°©e
 = (
yy_œ°_ac˚±ög_°©e
);

787 
	gyy_a˘
 = 
yy_ac˚±
[
yy_cuºít_°©e
];

790 
	gYY_DO_BEFORE_ACTION
;

792 
	gdo_a˘i⁄
:

794  
yy_a˘
 )

798 *
yy_˝
 = (
yy_hﬁd_ch¨
);

799 
	gyy_˝
 = (
yy_œ°_ac˚±ög_˝os
);

800 
	gyy_cuºít_°©e
 = (
yy_œ°_ac˚±ög_°©e
);

801 
	gyy_föd_a˘i⁄
;

804 
YY_RULE_SETUP


807 
£t_suffix_vÆue
(
yylvÆ
, 1024, 1024.0, 0);

808  
	gSUFFIX
;

810 
YY_BREAK


812 
YY_RULE_SETUP


815 
£t_suffix_vÆue
(
yylvÆ
, 1024 * 1024, 1024.0 * 1024.0, 0);

816  
	gSUFFIX
;

818 
YY_BREAK


820 
YY_RULE_SETUP


823 
£t_suffix_vÆue
(
yylvÆ
, 1000, 1000.0, 1);

824  
	gSUFFIX
;

826 
YY_BREAK


828 
YY_RULE_SETUP


831 
£t_suffix_vÆue
(
yylvÆ
, 1, 1.0, 1);

832  
	gSUFFIX
;

834 
YY_BREAK


836 
YY_RULE_SETUP


839 
£t_suffix_vÆue
(
yylvÆ
, 1024LL * 1024 * 1024, 1024.0 * 1024.0 * 1024, 0);

840  
	gSUFFIX
;

842 
YY_BREAK


844 
YY_RULE_SETUP


847 
£t_suffix_vÆue
(
yylvÆ
, 1024LL * 1024 * 1024 * 1024,

849  
	gSUFFIX
;

851 
YY_BREAK


853 
YY_RULE_SETUP


856 
£t_suffix_vÆue
(
yylvÆ
, 1024LL * 1024 * 1024 * 1024 * 1024,

858  
	gSUFFIX
;

860 
YY_BREAK


862 
YY_RULE_SETUP


865 
£t_suffix_vÆue
(
yylvÆ
, 1000LL, 1000.0, 0);

866  
	gSUFFIX
;

868 
YY_BREAK


870 
YY_RULE_SETUP


873 
£t_suffix_vÆue
(
yylvÆ
, 1000000LL, 1000000.0 , 0);

874  
	gSUFFIX
;

876 
YY_BREAK


878 
YY_RULE_SETUP


881 
£t_suffix_vÆue
(
yylvÆ
, 1000000000LL, 1000000000.0 , 0);

882  
	gSUFFIX
;

884 
YY_BREAK


886 
YY_RULE_SETUP


889 
£t_suffix_vÆue
(
yylvÆ
, 1000000000000LL, 1000000000000.0 , 0);

890  
	gSUFFIX
;

892 
YY_BREAK


894 
YY_RULE_SETUP


897 
£t_suffix_vÆue
(
yylvÆ
, 1000000LL, 1000000.0 , 0);

898  
	gSUFFIX
;

900 
YY_BREAK


902 
YY_RULE_SETUP


905 i‡(!
Àxî_vÆue_is_time
) {

906 
£t_suffix_vÆue
(
yylvÆ
, 1024 * 1024, 1024.0 * 1024.0, 0);

908 
£t_suffix_vÆue
(
yylvÆ
, 60LL * 1000000LL, 60.0 * 1000000.0, 0);

910  
	gSUFFIX
;

912 
YY_BREAK


914 
YY_RULE_SETUP


917 
£t_suffix_vÆue
(
yylvÆ
, 60LL * 60LL * 24LL * 1000000LL,

919  
	gSUFFIX
;

921 
YY_BREAK


923 
YY_RULE_SETUP


926 
£t_suffix_vÆue
(
yylvÆ
, 60LL * 60LL * 1000000LL,

928  
	gSUFFIX
;

930 
YY_BREAK


932 
YY_RULE_SETUP


935 
YY_BREAK


937 
YY_RULE_SETUP


940 
YY_BREAK


942 
YY_RULE_SETUP


945 
rc
;

946 
	gdvÆ
;

948 
	grc
 = 
ssˇnf
(
yyãxt
, "%lf", &
dvÆ
);

949 i‡(
	grc
 == 1) {

950 
yylvÆ
.
v
.
dvÆ
 = dval;

951 
	gyylvÆ
.
	gv
.
	givÆ
 = (Ë
dvÆ
;

952 
	gyylvÆ
.
	gv
.
	ghas_dvÆ
 = 1;

953 
	gyylvÆ
.
	gv
.
	ghas_îr‹
 = 0;

954  
	gNUMBER
;

956 
yyîr‹
(0, 0, 0, 0, "badÇumber\n");

957 
	gyylvÆ
.
	gv
.
	ghas_îr‹
 = 1;

958  
	gNUMBER
;

961 
YY_BREAK


963 
YY_RULE_SETUP


966 
rc
, 
	götvÆ
;

967 
	grc
 = 
ssˇnf
(
yyãxt
, "%x", &
ötvÆ
);

968 i‡(
	grc
 == 1) {

969 
yylvÆ
.
v
.
ivÆ
 = 
ötvÆ
;

970 
	gyylvÆ
.
	gv
.
	gdvÆ
 = (Ë
ötvÆ
;

971 
	gyylvÆ
.
	gv
.
	ghas_dvÆ
 = 0;

972 
	gyylvÆ
.
	gv
.
	ghas_îr‹
 = 0;

973  
	gNUMBER
;

975 
yyîr‹
(0, 0, 0, 0, "badÇumber\n");

976 
	gyylvÆ
.
	gv
.
	ghas_îr‹
 = 1;

977  
	gNUMBER
;

980 
YY_BREAK


982 
YY_RULE_SETUP


985 
rc
, 
	götvÆ
;

986 
	grc
 = 
ssˇnf
(
yyãxt
, "%d", &
ötvÆ
);

987 i‡(
	grc
 == 1) {

988 
yylvÆ
.
v
.
ivÆ
 = 
ötvÆ
;

989 
	gyylvÆ
.
	gv
.
	gdvÆ
 = (Ë
ötvÆ
;

990 
	gyylvÆ
.
	gv
.
	ghas_dvÆ
 = 0;

991 
	gyylvÆ
.
	gv
.
	ghas_îr‹
 = 0;

992  
	gNUMBER
;

994 
yyîr‹
(0, 0, 0, 0, "badÇumber\n");

995 
	gyylvÆ
.
	gv
.
	ghas_îr‹
 = 1;

996  
	gNUMBER
;

999 
YY_BREAK


1002 
YY_RULE_SETUP


1005 
YY_BREAK


1007 
YY_RULE_SETUP


1009  
yyãxt
[0];

1010 
YY_BREAK


1012 
YY_RULE_SETUP


1015 
yylvÆ
.
v
.
has_îr‹
 = 1;

1016  
	gNUMBER
;

1018 
YY_BREAK


1020 
YY_RULE_SETUP


1022 
ECHO
;

1023 
	gYY_BREAK


1025 
YY_STATE_EOF
(
INITIAL
):

1026 
yyãrmö©e
();

1028 
	gYY_END_OF_BUFFER
:

1031 
yy_amou¡_of_m©ched_ãxt
 = (Ë(
yy_˝
 - (
yyãxt_±r
)) - 1;

1034 *
	gyy_˝
 = (
yy_hﬁd_ch¨
);

1035 
YY_RESTORE_YY_MORE_OFFSET


1037 i‡–
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_buf„r_°©us
 =
YY_BUFFER_NEW
 )

1048 (
yy_n_ch¨s
Ë
YY_CURRENT_BUFFER_LVALUE
->yy_n_chars;

1049 
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_öput_fûe
 = 
yyö
;

1050 
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_buf„r_°©us
 = 
YY_BUFFER_NORMAL
;

1060 i‡–(
	gyy_c_buf_p
Ë<&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)] )

1062 
yy_°©e_ty≥
 
yy_√xt_°©e
;

1064 (
	gyy_c_buf_p
Ë(
yyãxt_±r
Ë+ 
yy_amou¡_of_m©ched_ãxt
;

1066 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
( );

1077 
	gyy_√xt_°©e
 = 
yy_åy_NUL_å™s
–
yy_cuºít_°©e
 );

1079 
	gyy_bp
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

1081 i‡–
	gyy_√xt_°©e
 )

1084 
	gyy_˝
 = ++(
yy_c_buf_p
);

1085 
	gyy_cuºít_°©e
 = 
yy_√xt_°©e
;

1086 
	gyy_m©ch
;

1091 
	gyy_˝
 = (
yy_c_buf_p
);

1092 
	gyy_föd_a˘i⁄
;

1096  
yy_gë_√xt_buf„r
( ) )

1098 
	gEOB_ACT_END_OF_FILE
:

1100 (
yy_did_buf„r_swôch_⁄_eof
) = 0;

1102 i‡–
yywøp
( ) )

1113 (
	gyy_c_buf_p
Ë(
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

1115 
	gyy_a˘
 = 
YY_STATE_EOF
(
YY_START
);

1116 
	gdo_a˘i⁄
;

1121 i‡–! (
	gyy_did_buf„r_swôch_⁄_eof
) )

1122 
	gYY_NEW_FILE
;

1127 
	gEOB_ACT_CONTINUE_SCAN
:

1128 (
yy_c_buf_p
) =

1129 (
yyãxt_±r
Ë+ 
yy_amou¡_of_m©ched_ãxt
;

1131 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
( );

1133 
	gyy_˝
 = (
yy_c_buf_p
);

1134 
	gyy_bp
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

1135 
	gyy_m©ch
;

1137 
	gEOB_ACT_LAST_MATCH
:

1138 (
yy_c_buf_p
) =

1139 &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)];

1141 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
( );

1143 
	gyy_˝
 = (
yy_c_buf_p
);

1144 
	gyy_bp
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

1145 
	gyy_föd_a˘i⁄
;

1151 
YY_FATAL_ERROR
(

1165 
	$yy_gë_√xt_buf„r
 ()

1167 *
de°
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
;

1168 *
sour˚
 = (
yyãxt_±r
);

1169 
numbî_to_move
, 
i
;

1170 
ªt_vÆ
;

1172 i‡–(
yy_c_buf_p
Ë> &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
) + 1] )

1173 
	`YY_FATAL_ERROR
(

1176 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_fûl_buf„r
 == 0 )

1178 i‡–(
yy_c_buf_p
Ë- (
yyãxt_±r
Ë- 
YY_MORE_ADJ
 == 1 )

1183  
EOB_ACT_END_OF_FILE
;

1191  
EOB_ACT_LAST_MATCH
;

1198 
numbî_to_move
 = (Ë((
yy_c_buf_p
Ë- (
yyãxt_±r
) - 1);

1200  
i
 = 0; i < 
numbî_to_move
; ++i )

1201 *(
de°
++Ë*(
sour˚
++);

1203 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_buf„r_°©us
 =
YY_BUFFER_EOF_PENDING
 )

1207 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars) = 0;

1211 
num_to_ªad
 =

1212 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 - 
numbî_to_move
 - 1;

1214  
num_to_ªad
 <= 0 )

1218 
YY_BUFFER_STATE
 
b
 = 
YY_CURRENT_BUFFER_LVALUE
;

1220 
yy_c_buf_p_off£t
 =

1221 (Ë((
yy_c_buf_p
Ë- 
b
->
yy_ch_buf
);

1223 i‡–
b
->
yy_is_our_buf„r
 )

1225 
√w_size
 = 
b
->
yy_buf_size
 * 2;

1227 i‡–
√w_size
 <= 0 )

1228 
b
->
yy_buf_size
 += b->yy_buf_size / 8;

1230 
b
->
yy_buf_size
 *= 2;

1232 
b
->
yy_ch_buf
 = (*)

1234 
	`yyªÆloc
–(*Ë
b
->
yy_ch_buf
,

1235 (
yy_size_t
Ë(
b
->
yy_buf_size
 + 2) );

1239 
b
->
yy_ch_buf
 = 
NULL
;

1241 i‡–! 
b
->
yy_ch_buf
 )

1242 
	`YY_FATAL_ERROR
(

1245 (
yy_c_buf_p
Ë&
b
->
yy_ch_buf
[
yy_c_buf_p_off£t
];

1247 
num_to_ªad
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 -

1248 
numbî_to_move
 - 1;

1252 i‡–
num_to_ªad
 > 
YY_READ_BUF_SIZE
 )

1253 
num_to_ªad
 = 
YY_READ_BUF_SIZE
;

1256 
	`YY_INPUT
–(&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[
numbî_to_move
]),

1257 (
yy_n_ch¨s
), 
num_to_ªad
 );

1259 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars);

1262 i‡–(
yy_n_ch¨s
) == 0 )

1264 i‡–
numbî_to_move
 =
YY_MORE_ADJ
 )

1266 
ªt_vÆ
 = 
EOB_ACT_END_OF_FILE
;

1267 
	`yyª°¨t
–
yyö
 );

1272 
ªt_vÆ
 = 
EOB_ACT_LAST_MATCH
;

1273 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf„r_°©us
 =

1274 
YY_BUFFER_EOF_PENDING
;

1279 
ªt_vÆ
 = 
EOB_ACT_CONTINUE_SCAN
;

1281 i‡(((
yy_n_ch¨s
Ë+ 
numbî_to_move
Ë> 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
) {

1283 
√w_size
 = (
yy_n_ch¨s
Ë+ 
numbî_to_move
 + ((yy_n_chars) >> 1);

1284 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 = (*Ë
	`yyªÆloc
(

1285 (*Ë
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
, (
yy_size_t
Ë
√w_size
 );

1286 i‡–! 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 )

1287 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_get_next_buffer()" );

1289 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 = (Ë(
√w_size
 - 2);

1292 (
yy_n_ch¨s
Ë+
numbî_to_move
;

1293 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)] = 
YY_END_OF_BUFFER_CHAR
;

1294 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
Ë+ 1] = 
YY_END_OF_BUFFER_CHAR
;

1296 (
yyãxt_±r
Ë&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[0];

1298  
ªt_vÆ
;

1299 
	}
}

1303 
yy_°©e_ty≥
 
	$yy_gë_¥evious_°©e
 ()

1305 
yy_°©e_ty≥
 
yy_cuºít_°©e
;

1306 *
yy_˝
;

1308 
yy_cuºít_°©e
 = (
yy_°¨t
);

1310  
yy_˝
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
; yy_˝ < (
yy_c_buf_p
); ++yy_cp )

1312 
YY_CHAR
 
yy_c
 = (*
yy_˝
 ? 
yy_ec
[
	`YY_SC_TO_UI
(*yy_cp)] : 1);

1313 i‡–
yy_ac˚±
[
yy_cuºít_°©e
] )

1315 (
yy_œ°_ac˚±ög_°©e
Ë
yy_cuºít_°©e
;

1316 (
yy_œ°_ac˚±ög_˝os
Ë
yy_˝
;

1318  
yy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
yy_c
] != yy_current_state )

1320 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

1321 i‡–
yy_cuºít_°©e
 >= 47 )

1322 
yy_c
 = 
yy_mëa
[yy_c];

1324 
yy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[yy_cuºít_°©e] + 
yy_c
];

1327  
yy_cuºít_°©e
;

1328 
	}
}

1335 
yy_°©e_ty≥
 
	$yy_åy_NUL_å™s
 (
yy_°©e_ty≥
 
yy_cuºít_°©e
 )

1337 
yy_is_jam
;

1338 *
yy_˝
 = (
yy_c_buf_p
);

1340 
YY_CHAR
 
yy_c
 = 1;

1341 i‡–
yy_ac˚±
[
yy_cuºít_°©e
] )

1343 (
yy_œ°_ac˚±ög_°©e
Ë
yy_cuºít_°©e
;

1344 (
yy_œ°_ac˚±ög_˝os
Ë
yy_˝
;

1346  
yy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
yy_c
] != yy_current_state )

1348 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

1349 i‡–
yy_cuºít_°©e
 >= 47 )

1350 
yy_c
 = 
yy_mëa
[yy_c];

1352 
yy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[yy_cuºít_°©e] + 
yy_c
];

1353 
yy_is_jam
 = (
yy_cuºít_°©e
 == 46);

1355  
yy_is_jam
 ? 0 : 
yy_cuºít_°©e
;

1356 
	}
}

1358 #i‚de‡
YY_NO_UNPUT


1360 
	$yyu≈ut
 (
c
, * 
yy_bp
 )

1362 *
yy_˝
;

1364 
yy_˝
 = (
yy_c_buf_p
);

1367 *
yy_˝
 = (
yy_hﬁd_ch¨
);

1369 i‡–
yy_˝
 < 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 + 2 )

1372 
numbî_to_move
 = (
yy_n_ch¨s
) + 2;

1373 *
de°
 = &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[

1374 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 + 2];

1375 *
sour˚
 =

1376 &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[
numbî_to_move
];

1378  
sour˚
 > 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 )

1379 *--
de°
 = *--
sour˚
;

1381 
yy_˝
 +(Ë(
de°
 - 
sour˚
);

1382 
yy_bp
 +(Ë(
de°
 - 
sour˚
);

1383 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 =

1384 (
yy_n_ch¨s
Ë(Ë
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
;

1386 i‡–
yy_˝
 < 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 + 2 )

1387 
	`YY_FATAL_ERROR
( "flex scannerÖush-back overflow" );

1390 *--
yy_˝
 = (Ë
c
;

1392 (
yyãxt_±r
Ë
yy_bp
;

1393 (
yy_hﬁd_ch¨
Ë*
yy_˝
;

1394 (
yy_c_buf_p
Ë
yy_˝
;

1395 
	}
}

1399 #i‚de‡
YY_NO_INPUT


1400 #ifde‡
__˝lu•lus


1401 
	$yyöput
 ()

1403 
	$öput
 ()

1407 
c
;

1409 *(
yy_c_buf_p
Ë(
yy_hﬁd_ch¨
);

1411 i‡–*(
yy_c_buf_p
Ë=
YY_END_OF_BUFFER_CHAR
 )

1417 i‡–(
yy_c_buf_p
Ë< &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)] )

1419 *(
yy_c_buf_p
) = '\0';

1423 
off£t
 = (Ë((
yy_c_buf_p
Ë- (
yyãxt_±r
));

1424 ++(
yy_c_buf_p
);

1426  
	`yy_gë_√xt_buf„r
( ) )

1428 
EOB_ACT_LAST_MATCH
:

1440 
	`yyª°¨t
–
yyö
 );

1444 
EOB_ACT_END_OF_FILE
:

1446 i‡–
	`yywøp
( ) )

1449 i‡–! (
yy_did_buf„r_swôch_⁄_eof
) )

1450 
YY_NEW_FILE
;

1451 #ifde‡
__˝lu•lus


1452  
	`yyöput
();

1454  
	`öput
();

1458 
EOB_ACT_CONTINUE_SCAN
:

1459 (
yy_c_buf_p
Ë(
yyãxt_±r
Ë+ 
off£t
;

1465 
c
 = *(*Ë(
yy_c_buf_p
);

1466 *(
yy_c_buf_p
) = '\0';

1467 (
yy_hﬁd_ch¨
Ë*++(
yy_c_buf_p
);

1469  
c
;

1470 
	}
}

1478 
	$yyª°¨t
 (
FILE
 * 
öput_fûe
 )

1481 i‡–! 
YY_CURRENT_BUFFER
 ){

1482 
	`yyísuª_buf„r_°ack
 ();

1483 
YY_CURRENT_BUFFER_LVALUE
 =

1484 
	`yy_¸óã_buf„r
–
yyö
, 
YY_BUF_SIZE
 );

1487 
	`yy_öô_buf„r
–
YY_CURRENT_BUFFER
, 
öput_fûe
 );

1488 
	`yy_lﬂd_buf„r_°©e
( );

1489 
	}
}

1495 
	$yy_swôch_to_buf„r
 (
YY_BUFFER_STATE
 
√w_buf„r
 )

1503 
	`yyísuª_buf„r_°ack
 ();

1504 i‡–
YY_CURRENT_BUFFER
 =
√w_buf„r
 )

1507 i‡–
YY_CURRENT_BUFFER
 )

1510 *(
yy_c_buf_p
Ë(
yy_hﬁd_ch¨
);

1511 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
 = (
yy_c_buf_p
);

1512 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars);

1515 
YY_CURRENT_BUFFER_LVALUE
 = 
√w_buf„r
;

1516 
	`yy_lﬂd_buf„r_°©e
( );

1523 (
yy_did_buf„r_swôch_⁄_eof
) = 1;

1524 
	}
}

1526 
	$yy_lﬂd_buf„r_°©e
 ()

1528 (
yy_n_ch¨s
Ë
YY_CURRENT_BUFFER_LVALUE
->yy_n_chars;

1529 (
yyãxt_±r
Ë(
yy_c_buf_p
Ë
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
;

1530 
yyö
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_öput_fûe
;

1531 (
yy_hﬁd_ch¨
Ë*(
yy_c_buf_p
);

1532 
	}
}

1540 
YY_BUFFER_STATE
 
	$yy_¸óã_buf„r
 (
FILE
 * 
fûe
, 
size
 )

1542 
YY_BUFFER_STATE
 
b
;

1544 
b
 = (
YY_BUFFER_STATE
Ë
	`yyÆloc
––
yy_buf„r_°©e
 ) );

1545 i‡–! 
b
 )

1546 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_create_buffer()" );

1548 
b
->
yy_buf_size
 = 
size
;

1553 
b
->
yy_ch_buf
 = (*Ë
	`yyÆloc
–(
yy_size_t
Ë(b->
yy_buf_size
 + 2) );

1554 i‡–! 
b
->
yy_ch_buf
 )

1555 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_create_buffer()" );

1557 
b
->
yy_is_our_buf„r
 = 1;

1559 
	`yy_öô_buf„r
–
b
, 
fûe
 );

1561  
b
;

1562 
	}
}

1568 
	$yy_dñëe_buf„r
 (
YY_BUFFER_STATE
 
b
 )

1571 i‡–! 
b
 )

1574 i‡–
b
 =
YY_CURRENT_BUFFER
 )

1575 
YY_CURRENT_BUFFER_LVALUE
 = (
YY_BUFFER_STATE
) 0;

1577 i‡–
b
->
yy_is_our_buf„r
 )

1578 
	`yy‰ì
–(*Ë
b
->
yy_ch_buf
 );

1580 
	`yy‰ì
–(*Ë
b
 );

1581 
	}
}

1587 
	$yy_öô_buf„r
 (
YY_BUFFER_STATE
 
b
, 
FILE
 * 
fûe
 )

1590 
€ºno
 = 
î∫o
;

1592 
	`yy_Êush_buf„r
–
b
 );

1594 
b
->
yy_öput_fûe
 = 
fûe
;

1595 
b
->
yy_fûl_buf„r
 = 1;

1601 i‡(
b
 !
YY_CURRENT_BUFFER
){

1602 
b
->
yy_bs_löío
 = 1;

1603 
b
->
yy_bs_cﬁumn
 = 0;

1606 
b
->
yy_is_öãø˘ive
 = 
fûe
 ? (
	`ißây
–
	`fûío
(file) ) > 0) : 0;

1608 
î∫o
 = 
€ºno
;

1609 
	}
}

1615 
	$yy_Êush_buf„r
 (
YY_BUFFER_STATE
 
b
 )

1617 i‡–! 
b
 )

1620 
b
->
yy_n_ch¨s
 = 0;

1626 
b
->
yy_ch_buf
[0] = 
YY_END_OF_BUFFER_CHAR
;

1627 
b
->
yy_ch_buf
[1] = 
YY_END_OF_BUFFER_CHAR
;

1629 
b
->
yy_buf_pos
 = &b->
yy_ch_buf
[0];

1631 
b
->
yy_©_bﬁ
 = 1;

1632 
b
->
yy_buf„r_°©us
 = 
YY_BUFFER_NEW
;

1634 i‡–
b
 =
YY_CURRENT_BUFFER
 )

1635 
	`yy_lﬂd_buf„r_°©e
( );

1636 
	}
}

1644 
	$yypush_buf„r_°©e
 (
YY_BUFFER_STATE
 
√w_buf„r
 )

1646 i‡(
√w_buf„r
 =
NULL
)

1649 
	`yyísuª_buf„r_°ack
();

1652 i‡–
YY_CURRENT_BUFFER
 )

1655 *(
yy_c_buf_p
Ë(
yy_hﬁd_ch¨
);

1656 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
 = (
yy_c_buf_p
);

1657 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars);

1661 i‡(
YY_CURRENT_BUFFER
)

1662 (
yy_buf„r_°ack_t›
)++;

1663 
YY_CURRENT_BUFFER_LVALUE
 = 
√w_buf„r
;

1666 
	`yy_lﬂd_buf„r_°©e
( );

1667 (
yy_did_buf„r_swôch_⁄_eof
) = 1;

1668 
	}
}

1674 
	$yyp›_buf„r_°©e
 ()

1676 i‡(!
YY_CURRENT_BUFFER
)

1679 
	`yy_dñëe_buf„r
(
YY_CURRENT_BUFFER
 );

1680 
YY_CURRENT_BUFFER_LVALUE
 = 
NULL
;

1681 i‡((
yy_buf„r_°ack_t›
) > 0)

1682 --(
yy_buf„r_°ack_t›
);

1684 i‡(
YY_CURRENT_BUFFER
) {

1685 
	`yy_lﬂd_buf„r_°©e
( );

1686 (
yy_did_buf„r_swôch_⁄_eof
) = 1;

1688 
	}
}

1693 
	$yyísuª_buf„r_°ack
 ()

1695 
yy_size_t
 
num_to_Æloc
;

1697 i‡(!(
yy_buf„r_°ack
)) {

1703 
num_to_Æloc
 = 1;

1704 (
yy_buf„r_°ack
Ë(
yy_buf„r_°©e
**)
yyÆloc


1705 (
num_to_Æloc
 * (
yy_buf„r_°©e
*)

1707 i‡–! (
yy_buf„r_°ack
) )

1708 
	`YY_FATAL_ERROR
( "out of dynamic memory in yyensure_buffer_stack()" );

1710 
	`mem£t
((
yy_buf„r_°ack
), 0, 
num_to_Æloc
 * (
yy_buf„r_°©e
*));

1712 (
yy_buf„r_°ack_max
Ë
num_to_Æloc
;

1713 (
yy_buf„r_°ack_t›
) = 0;

1717 i‡((
yy_buf„r_°ack_t›
Ë>((
yy_buf„r_°ack_max
)) - 1){

1720 
yy_size_t
 
grow_size
 = 8 ;

1722 
num_to_Æloc
 = (
yy_buf„r_°ack_max
Ë+ 
grow_size
;

1723 (
yy_buf„r_°ack
Ë(
yy_buf„r_°©e
**)
yyªÆloc


1724 ((
yy_buf„r_°ack
),

1725 
num_to_Æloc
 * (
yy_buf„r_°©e
*)

1727 i‡–! (
yy_buf„r_°ack
) )

1728 
	`YY_FATAL_ERROR
( "out of dynamic memory in yyensure_buffer_stack()" );

1731 
	`mem£t
((
yy_buf„r_°ack
Ë+ (
yy_buf„r_°ack_max
), 0, 
grow_size
 * (
yy_buf„r_°©e
*));

1732 (
yy_buf„r_°ack_max
Ë
num_to_Æloc
;

1734 
	}
}

1742 
YY_BUFFER_STATE
 
	$yy_sˇn_buf„r
 (* 
ba£
, 
yy_size_t
 
size
 )

1744 
YY_BUFFER_STATE
 
b
;

1746 i‡–
size
 < 2 ||

1747 
ba£
[
size
-2] !
YY_END_OF_BUFFER_CHAR
 ||

1748 
ba£
[
size
-1] !
YY_END_OF_BUFFER_CHAR
 )

1750  
NULL
;

1752 
b
 = (
YY_BUFFER_STATE
Ë
	`yyÆloc
––
yy_buf„r_°©e
 ) );

1753 i‡–! 
b
 )

1754 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_scan_buffer()" );

1756 
b
->
yy_buf_size
 = (Ë(
size
 - 2);

1757 
b
->
yy_buf_pos
 = b->
yy_ch_buf
 = 
ba£
;

1758 
b
->
yy_is_our_buf„r
 = 0;

1759 
b
->
yy_öput_fûe
 = 
NULL
;

1760 
b
->
yy_n_ch¨s
 = b->
yy_buf_size
;

1761 
b
->
yy_is_öãø˘ive
 = 0;

1762 
b
->
yy_©_bﬁ
 = 1;

1763 
b
->
yy_fûl_buf„r
 = 0;

1764 
b
->
yy_buf„r_°©us
 = 
YY_BUFFER_NEW
;

1766 
	`yy_swôch_to_buf„r
–
b
 );

1768  
b
;

1769 
	}
}

1779 
YY_BUFFER_STATE
 
	$yy_sˇn_°rög
 (c⁄° * 
yy°r
 )

1782  
	`yy_sˇn_byãs
–
yy°r
, (Ë
	`°æí
(yystr) );

1783 
	}
}

1792 
YY_BUFFER_STATE
 
	$yy_sˇn_byãs
 (c⁄° * 
yybyãs
, 
_yybyãs_Àn
 )

1794 
YY_BUFFER_STATE
 
b
;

1795 *
buf
;

1796 
yy_size_t
 
n
;

1797 
i
;

1800 
n
 = (
yy_size_t
Ë(
_yybyãs_Àn
 + 2);

1801 
buf
 = (*Ë
	`yyÆloc
–
n
 );

1802 i‡–! 
buf
 )

1803 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_scan_bytes()" );

1805  
i
 = 0; i < 
_yybyãs_Àn
; ++i )

1806 
buf
[
i
] = 
yybyãs
[i];

1808 
buf
[
_yybyãs_Àn
] = buf[_yybyãs_Àn+1] = 
YY_END_OF_BUFFER_CHAR
;

1810 
b
 = 
	`yy_sˇn_buf„r
–
buf
, 
n
 );

1811 i‡–! 
b
 )

1812 
	`YY_FATAL_ERROR
( "bad buffer in yy_scan_bytes()" );

1817 
b
->
yy_is_our_buf„r
 = 1;

1819  
b
;

1820 
	}
}

1822 #i‚de‡
YY_EXIT_FAILURE


1823 
	#YY_EXIT_FAILURE
 2

	)

1826 
yyn‹ëu∫
 
	$yy_Áèl_îr‹
 (c⁄° * 
msg
 )

1828 
	`Ârötf
–
°dîr
, "%s\n", 
msg
 );

1829 
	`exô
–
YY_EXIT_FAILURE
 );

1830 
	}
}

1834 #unde‡
yyÀss


1835 
	#yyÀss
(
n
) \

1839 
yyÀss_ma¸o_¨g
 = (
n
); \

1840 
	`YY_LESS_LINENO
(
yyÀss_ma¸o_¨g
);\

1841 
yyãxt
[
yyÀng
] = (
yy_hﬁd_ch¨
); \

1842 (
yy_c_buf_p
Ë
yyãxt
 + 
yyÀss_ma¸o_¨g
; \

1843 (
yy_hﬁd_ch¨
Ë*(
yy_c_buf_p
); \

1844 *(
yy_c_buf_p
) = '\0'; \

1845 
yyÀng
 = 
yyÀss_ma¸o_¨g
; \

1847  0 )

	)

1854 
	$yygë_löío
 ()

1857  
yylöío
;

1858 
	}
}

1863 
FILE
 *
	$yygë_ö
 ()

1865  
yyö
;

1866 
	}
}

1871 
FILE
 *
	$yygë_out
 ()

1873  
yyout
;

1874 
	}
}

1879 
	$yygë_Àng
 ()

1881  
yyÀng
;

1882 
	}
}

1888 *
	$yygë_ãxt
 ()

1890  
yyãxt
;

1891 
	}
}

1897 
	$yy£t_löío
 (
_löe_numbî
 )

1900 
yylöío
 = 
_löe_numbî
;

1901 
	}
}

1909 
	$yy£t_ö
 (
FILE
 * 
_ö_°r
 )

1911 
yyö
 = 
_ö_°r
 ;

1912 
	}
}

1914 
	$yy£t_out
 (
FILE
 * 
_out_°r
 )

1916 
yyout
 = 
_out_°r
 ;

1917 
	}
}

1919 
	$yygë_debug
 ()

1921  
yy_Êex_debug
;

1922 
	}
}

1924 
	$yy£t_debug
 (
_bdebug
 )

1926 
yy_Êex_debug
 = 
_bdebug
 ;

1927 
	}
}

1929 
	$yy_öô_globÆs
 ()

1935 (
yy_buf„r_°ack
Ë
NULL
;

1936 (
yy_buf„r_°ack_t›
) = 0;

1937 (
yy_buf„r_°ack_max
) = 0;

1938 (
yy_c_buf_p
Ë
NULL
;

1939 (
yy_öô
) = 0;

1940 (
yy_°¨t
) = 0;

1943 #ifde‡
YY_STDINIT


1944 
yyö
 = 
°dö
;

1945 
yyout
 = 
°dout
;

1947 
yyö
 = 
NULL
;

1948 
yyout
 = 
NULL
;

1955 
	}
}

1958 
	$yyÀx_de°roy
 ()

1962 
YY_CURRENT_BUFFER
){

1963 
	`yy_dñëe_buf„r
–
YY_CURRENT_BUFFER
 );

1964 
YY_CURRENT_BUFFER_LVALUE
 = 
NULL
;

1965 
	`yyp›_buf„r_°©e
();

1969 
	`yy‰ì
((
yy_buf„r_°ack
) );

1970 (
yy_buf„r_°ack
Ë
NULL
;

1974 
	`yy_öô_globÆs
( );

1977 
	}
}

1983 #i‚de‡
yyãxt_±r


1984 
	$yy_Êex_°∫˝y
 (* 
s1
, c⁄° * 
s2
, 
n
 )

1987 
i
;

1988  
i
 = 0; i < 
n
; ++i )

1989 
s1
[
i
] = 
s2
[i];

1990 
	}
}

1993 #ifde‡
YY_NEED_STRLEN


1994 
	$yy_Êex_°æí
 (c⁄° * 
s
 )

1996 
n
;

1997  
n
 = 0; 
s
[n]; ++n )

2000  
n
;

2001 
	}
}

2004 *
	$yyÆloc
 (
yy_size_t
 
size
 )

2006  
	`mÆloc
(
size
);

2007 
	}
}

2009 *
	$yyªÆloc
 (* 
±r
, 
yy_size_t
 
size
 )

2019  
	`ªÆloc
(
±r
, 
size
);

2020 
	}
}

2022 
	$yy‰ì
 (* 
±r
 )

2024 
	`‰ì
–(*Ë
±r
 );

2025 
	}
}

2027 
	#YYTABLES_NAME
 "yyèbÀs"

	)

	@lib/axmap.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<as£π.h
>

23 
	~"../¨ch/¨ch.h
"

24 
	~"axm≠.h
"

25 
	~"../mömax.h
"

27 #i‡
BITS_PER_LONG
 == 64

28 
	#UNIT_SHIFT
 6

	)

29 #ñi‡
BITS_PER_LONG
 == 32

30 
	#UNIT_SHIFT
 5

	)

35 
	#BLOCKS_PER_UNIT
 (1U << 
UNIT_SHIFT
)

	)

36 
	#BLOCKS_PER_UNIT_MASK
 (
BLOCKS_PER_UNIT
 - 1)

	)

38 c⁄° 
	gbô_masks
[] = {

48 #i‡
BITS_PER_LONG
 == 64

67 
	saxm≠_Àvñ
 {

68 
	mÀvñ
;

69 
	mm≠_size
;

70 *
	mm≠
;

80 
	saxm≠
 {

81 
	mƒ_Àvñs
;

82 
axm≠_Àvñ
 *
	mÀvñs
;

83 
uöt64_t
 
	mƒ_bôs
;

87 
	$axm≠_ª£t
(
axm≠
 *axmap)

89 
i
;

91 
i
 = 0; i < 
axm≠
->
ƒ_Àvñs
; i++) {

92 
axm≠_Àvñ
 *
Æ
 = &
axm≠
->
Àvñs
[
i
];

94 
	`mem£t
(
Æ
->
m≠
, 0,ál->
m≠_size
 * ());

96 
	}
}

98 
	$axm≠_‰ì
(
axm≠
 *axmap)

100 
i
;

102 i‡(!
axm≠
)

105 
i
 = 0; i < 
axm≠
->
ƒ_Àvñs
; i++)

106 
	`‰ì
(
axm≠
->
Àvñs
[
i
].
m≠
);

108 
	`‰ì
(
axm≠
->
Àvñs
);

109 
	`‰ì
(
axm≠
);

110 
	}
}

113 
axm≠
 *
	$axm≠_√w
(
uöt64_t
 
ƒ_bôs
)

115 
axm≠
 *axmap;

116 
i
, 
Àvñs
;

118 
axm≠
 = 
	`mÆloc
((*axmap));

119 i‡(!
axm≠
)

120  
NULL
;

122 
Àvñs
 = 1;

123 
i
 = (
ƒ_bôs
 + 
BLOCKS_PER_UNIT
 - 1Ë>> 
UNIT_SHIFT
;

124 
i
 > 1) {

125 
i
 = (ò+ 
BLOCKS_PER_UNIT
 - 1Ë>> 
UNIT_SHIFT
;

126 
Àvñs
++;

129 
axm≠
->
ƒ_Àvñs
 = 
Àvñs
;

130 
axm≠
->
Àvñs
 = 
	`ˇŒoc
◊xm≠->
ƒ_Àvñs
, (
axm≠_Àvñ
));

131 i‡(!
axm≠
->
Àvñs
)

132 
‰ì_axm≠
;

133 
axm≠
->
ƒ_bôs
 =Çr_bits;

135 
i
 = 0; i < 
axm≠
->
ƒ_Àvñs
; i++) {

136 
axm≠_Àvñ
 *
Æ
 = &
axm≠
->
Àvñs
[
i
];

138 
ƒ_bôs
 = (ƒ_bô†+ 
BLOCKS_PER_UNIT
 - 1Ë>> 
UNIT_SHIFT
;

140 
Æ
->
Àvñ
 = 
i
;

141 
Æ
->
m≠_size
 = 
ƒ_bôs
;

142 
Æ
->
m≠
 = 
	`mÆloc
◊l->
m≠_size
 * ());

143 i‡(!
Æ
->
m≠
)

144 
‰ì_Àvñs
;

148 
	`axm≠_ª£t
(
axm≠
);

149  
axm≠
;

151 
‰ì_Àvñs
:

152 
i
 = 0; i < 
axm≠
->
ƒ_Àvñs
; i++)

153 
	`‰ì
(
axm≠
->
Àvñs
[
i
].
m≠
);

155 
	`‰ì
(
axm≠
->
Àvñs
);

157 
‰ì_axm≠
:

158 
	`‰ì
(
axm≠
);

159  
NULL
;

160 
	}
}

167 
boﬁ
 
	$axm≠_h™dÀr
(
axm≠
 *axm≠, 
uöt64_t
 
bô_ƒ
,

168 
	$boﬁ
 (*
func
)(
axm≠_Àvñ
 *, 
uöt64_t
, ,

169 *), *
d©a
)

171 
axm≠_Àvñ
 *
Æ
;

172 
uöt64_t
 
ödex
 = 
bô_ƒ
;

173 
i
;

175 
i
 = 0; i < 
axm≠
->
ƒ_Àvñs
; i++) {

176 
off£t
 = 
ödex
 >> 
UNIT_SHIFT
;

177 
bô
 = 
ödex
 & 
BLOCKS_PER_UNIT_MASK
;

179 
Æ
 = &
axm≠
->
Àvñs
[
i
];

181 i‡(
	`func
(
Æ
, 
off£t
, 
bô
, 
d©a
))

182  
åue
;

184 i‡(
ödex
)

185 
ödex
 >>
UNIT_SHIFT
;

188  
Ál£
;

189 
	}
}

196 
boﬁ
 
	$axm≠_h™dÀr_t›down
(
axm≠
 *axm≠, 
uöt64_t
 
bô_ƒ
,

197 
	$boﬁ
 (*
func
)(
axm≠_Àvñ
 *, 
uöt64_t
, , *))

199 
i
;

201 
i
 = 
axm≠
->
ƒ_Àvñs
 - 1; i >= 0; i--) {

202 
uöt64_t
 
ödex
 = 
bô_ƒ
 >> (
UNIT_SHIFT
 * 
i
);

203 
off£t
 = 
ödex
 >> 
UNIT_SHIFT
;

204 
bô
 = 
ödex
 & 
BLOCKS_PER_UNIT_MASK
;

206 i‡(
	`func
(&
axm≠
->
Àvñs
[
i
], 
off£t
, 
bô
, 
NULL
))

207  
åue
;

210  
Ál£
;

211 
	}
}

213 
	saxm≠_£t_d©a
 {

214 
	mƒ_bôs
;

215 
	m£t_bôs
;

223 
boﬁ
 
	$axm≠_£t_‚
(
axm≠_Àvñ
 *
Æ
, 
uöt64_t
 
off£t
,

224 
bô
, *
__d©a
)

226 
axm≠_£t_d©a
 *
d©a
 = 
__d©a
;

227 
mask
, 
ovîœp
;

228 
ƒ_bôs
;

230 
ƒ_bôs
 = 
	`mö
(
d©a
->ƒ_bôs, 
BLOCKS_PER_UNIT
 - 
bô
);

232 
mask
 = 
bô_masks
[
ƒ_bôs
] << 
bô
;

237 
ovîœp
 = 
Æ
->
m≠
[
off£t
] & 
mask
;

238 i‡(
ovîœp
 =
mask
) {

239 
d©a
->
£t_bôs
 = 0;

240  
åue
;

243 i‡(
ovîœp
) {

244 
ƒ_bôs
 = 
	`ffz
(~
ovîœp
Ë- 
bô
;

245 i‡(!
ƒ_bôs
)

246  
åue
;

247 
mask
 = 
bô_masks
[
ƒ_bôs
] << 
bô
;

250 
	`as£π
(
mask
);

251 
	`as£π
(!(
Æ
->
m≠
[
off£t
] & 
mask
));

252 
Æ
->
m≠
[
off£t
] |
mask
;

254 i‡(!
Æ
->
Àvñ
)

255 
d©a
->
£t_bôs
 = 
ƒ_bôs
;

258 
d©a
->
ƒ_bôs
 = 1;

260  
Æ
->
m≠
[
off£t
] != -1UL;

261 
	}
}

271 
	$__axm≠_£t
(
axm≠
 *axm≠, 
uöt64_t
 
bô_ƒ
,

272 
axm≠_£t_d©a
 *
d©a
)

274 
ƒ_bôs
 = 
d©a
->nr_bits;

276 i‡(
bô_ƒ
 > 
axm≠
->
ƒ_bôs
)

278 i‡(
bô_ƒ
 + 
ƒ_bôs
 > 
axm≠
->nr_bits)

279 
ƒ_bôs
 = 
axm≠
->ƒ_bô†- 
bô_ƒ
;

281 
	`as£π
(
ƒ_bôs
 <
BLOCKS_PER_UNIT
);

283 
	`axm≠_h™dÀr
(
axm≠
, 
bô_ƒ
, 
axm≠_£t_‚
, 
d©a
);

284 
	}
}

286 
	$axm≠_£t
(
axm≠
 *axm≠, 
uöt64_t
 
bô_ƒ
)

288 
axm≠_£t_d©a
 
d©a
 = { .
ƒ_bôs
 = 1, };

290 
	`__axm≠_£t
(
axm≠
, 
bô_ƒ
, &
d©a
);

291 
	}
}

299 
	$axm≠_£t_ƒ
(
axm≠
 *axm≠, 
uöt64_t
 
bô_ƒ
,

300 
ƒ_bôs
)

302 
£t_bôs
 = 0;

305 
axm≠_£t_d©a
 
d©a
 = { .
ƒ_bôs
 =Çr_bits, };

306 
max_bôs
, 
this_£t
;

308 
max_bôs
 = 
BLOCKS_PER_UNIT
 - (
bô_ƒ
 & 
BLOCKS_PER_UNIT_MASK
);

309 i‡(
ƒ_bôs
 > 
max_bôs
)

310 
d©a
.
ƒ_bôs
 = 
max_bôs
;

312 
this_£t
 = 
d©a
.
ƒ_bôs
;

313 
	`__axm≠_£t
(
axm≠
, 
bô_ƒ
, &
d©a
);

314 
£t_bôs
 +
d©a
.set_bits;

315 i‡(
d©a
.
£t_bôs
 !
this_£t
)

318 
ƒ_bôs
 -
d©a
.
£t_bôs
;

319 
bô_ƒ
 +
d©a
.
£t_bôs
;

320 } 
ƒ_bôs
);

322  
£t_bôs
;

323 
	}
}

325 
boﬁ
 
	$axm≠_is£t_‚
(
axm≠_Àvñ
 *
Æ
, 
uöt64_t
 
off£t
,

326 
bô
, *
unu£d
)

328  (
Æ
->
m≠
[
off£t
] & (1ULL << 
bô
)) != 0;

329 
	}
}

331 
boﬁ
 
	$axm≠_is£t
(
axm≠
 *axm≠, 
uöt64_t
 
bô_ƒ
)

333 i‡(
bô_ƒ
 <
axm≠
->
ƒ_bôs
)

334  
	`axm≠_h™dÀr_t›down
(
axm≠
, 
bô_ƒ
, 
axm≠_is£t_‚
);

336  
Ál£
;

337 
	}
}

343 
uöt64_t
 
	$axm≠_föd_fú°_‰ì
(
axm≠
 *axm≠, 
uöt64_t
 
bô_ƒ
)

345 
i
;

346 
ãmp
;

347 
bô
;

348 
uöt64_t
 
off£t
, 
ba£_ödex
, 
ödex
;

349 
axm≠_Àvñ
 *
Æ
;

351 
ödex
 = 0;

352 
i
 = 
axm≠
->
ƒ_Àvñs
 - 1; i >= 0; i--) {

353 
Æ
 = &
axm≠
->
Àvñs
[
i
];

356 
ödex
 <<
UNIT_SHIFT
;

362 
ba£_ödex
 = 
bô_ƒ
 >> (
UNIT_SHIFT
 * 
i
);

363 i‡(
ödex
 < 
ba£_ödex
)

364 
ödex
 = 
ba£_ödex
;

367 
off£t
 = 
ödex
 >> 
UNIT_SHIFT
;

368 
bô
 = 
ödex
 & 
BLOCKS_PER_UNIT_MASK
;

376 i‡(
off£t
 >
Æ
->
m≠_size
)

380 
ãmp
 = ~
bô_masks
[
bô
] & ~
Æ
->
m≠
[
off£t
];

381 i‡(
ãmp
)

382 
found
;

388 
off£t
++; off£à< 
Æ
->
m≠_size
; offset++) {

389 
ãmp
 = ~
Æ
->
m≠
[
off£t
];

390 i‡(
ãmp
)

391 
found
;

397 
found
:

399 
ödex
 = (
off£t
 << 
UNIT_SHIFT
Ë+ 
	`ffz
(~
ãmp
);

403 i‡(
ödex
 >
axm≠
->
ƒ_bôs
)

406  
ödex
;

407 
	}
}

413 
uöt64_t
 
	$axm≠_√xt_‰ì
(
axm≠
 *axm≠, 
uöt64_t
 
bô_ƒ
)

415 
uöt64_t
 
ªt
;

416 
uöt64_t
 
√xt_bô
 = 
bô_ƒ
 + 1;

417 
ãmp
;

418 
uöt64_t
 
off£t
;

419 
bô
;

421 i‡(
bô_ƒ
 >
axm≠
->
ƒ_bôs
)

425 i‡(
√xt_bô
 =
axm≠
->
ƒ_bôs
)

426 
√xt_bô
 = 0;

428 
off£t
 = 
√xt_bô
 >> 
UNIT_SHIFT
;

429 
bô
 = 
√xt_bô
 & 
BLOCKS_PER_UNIT_MASK
;

436 
ãmp
 = ~
bô_masks
[
bô
] & ~
axm≠
->
Àvñs
[0].
m≠
[
off£t
];

437 i‡(
ãmp
) {

438 
ªt
 = (
off£t
 << 
UNIT_SHIFT
Ë+ 
	`ffz
(~
ãmp
);

441 i‡(
ªt
 >
axm≠
->
ƒ_bôs
)

442 
ªt
 = -1ULL;

444 
ªt
 = 
	`axm≠_föd_fú°_‰ì
(
axm≠
, 
√xt_bô
);

451 i‡(
ªt
 =-1ULL && 
√xt_bô
 != 0)

452 
ªt
 = 
	`axm≠_föd_fú°_‰ì
(
axm≠
, 0);

453  
ªt
;

454 
	}
}

	@lib/axmap.h

1 #i‚de‡
FIO_BITMAP_H


2 
	#FIO_BITMAP_H


	)

4 
	~<öây≥s.h
>

5 
	~"ty≥s.h
"

7 
	gaxm≠
;

8 
axm≠
 *
axm≠_√w
(
uöt64_t
 
ƒ_bôs
);

9 
axm≠_‰ì
(
axm≠
 *
bm
);

11 
axm≠_£t
(
axm≠
 *axm≠, 
uöt64_t
 
bô_ƒ
);

12 
axm≠_£t_ƒ
(
axm≠
 *axm≠, 
uöt64_t
 
bô_ƒ
, 
ƒ_bôs
);

13 
boﬁ
 
axm≠_is£t
(
axm≠
 *axm≠, 
uöt64_t
 
bô_ƒ
);

14 
uöt64_t
 
axm≠_√xt_‰ì
(
axm≠
 *axm≠, uöt64_à
bô_ƒ
);

15 
axm≠_ª£t
(
axm≠
 *axmap);

	@lib/bloom.c

1 
	~<°dlib.h
>

3 
	~"bloom.h
"

4 
	~"../hash.h
"

5 
	~"../¸c/xxhash.h
"

6 
	~"../¸c/murmur3.h
"

7 
	~"../¸c/¸c32c.h
"

8 
	~"../¸c/‚v.h
"

10 
	sbloom
 {

11 
uöt64_t
 
	m√¡rõs
;

13 
uöt32_t
 *
	mm≠
;

16 
	#BITS_PER_INDEX
 ((
uöt32_t
Ë* 8)

	)

17 
	#BITS_INDEX_MASK
 (
BITS_PER_INDEX
 - 1)

	)

19 
	sbloom_hash
 {

20 
	m£ed
;

21 
uöt32_t
 (*
‚
)(c⁄° *, 
	muöt32_t
, uint32_t);

24 
uöt32_t
 
	$bloom_¸c32c
(c⁄° *
buf
, 
uöt32_t
 
Àn
, uöt32_à
£ed
)

26  
	`fio_¸c32c
(
buf
, 
Àn
);

27 
	}
}

29 
uöt32_t
 
	$bloom_‚v
(c⁄° *
buf
, 
uöt32_t
 
Àn
, uöt32_à
£ed
)

31  
	`‚v
(
buf
, 
Àn
, 
£ed
);

32 
	}
}

34 
	#BLOOM_SEED
 0x8989

	)

36 
bloom_hash
 
	ghashes
[] = {

38 .
£ed
 = 
BLOOM_SEED
,

39 .
	g‚
 = 
jhash
,

42 .
	g£ed
 = 
BLOOM_SEED
,

43 .
	g‚
 = 
XXH32
,

46 .
	g£ed
 = 
BLOOM_SEED
,

47 .
	g‚
 = 
murmurhash3
,

50 .
	g£ed
 = 
BLOOM_SEED
,

51 .
	g‚
 = 
bloom_¸c32c
,

54 .
	g£ed
 = 
BLOOM_SEED
,

55 .
	g‚
 = 
bloom_‚v
,

59 
	#N_HASHES
 5

	)

61 
bloom
 *
	$bloom_√w
(
uöt64_t
 
íåõs
)

63 
bloom
 *
b
;

64 
size_t
 
no_uöts
;

66 
	`¸c32c_¨m64_¥obe
();

67 
	`¸c32c_öãl_¥obe
();

69 
b
 = 
	`mÆloc
((*b));

70 
b
->
√¡rõs
 = 
íåõs
;

71 
no_uöts
 = (
íåõs
 + 
BITS_PER_INDEX
 - 1) / BITS_PER_INDEX;

72 
b
->
m≠
 = 
	`ˇŒoc
(
no_uöts
, (
uöt32_t
));

73 i‡(!
b
->
m≠
) {

74 
	`‰ì
(
b
);

75  
NULL
;

78  
b
;

79 
	}
}

81 
	$bloom_‰ì
(
bloom
 *
b
)

83 
	`‰ì
(
b
->
m≠
);

84 
	`‰ì
(
b
);

85 
	}
}

87 
boﬁ
 
	$__bloom_check
(
bloom
 *
b
, c⁄° *
d©a
, 
Àn
,

88 
boﬁ
 
£t
)

90 
uöt32_t
 
hash
[
N_HASHES
];

91 
i
, 
was_£t
;

93 
i
 = 0; i < 
N_HASHES
; i++) {

94 
hash
[
i
] = 
hashes
[i].
	`‚
(
d©a
, 
Àn
, hashes[i].
£ed
);

95 
hash
[
i
] = hash[i] % 
b
->
√¡rõs
;

98 
was_£t
 = 0;

99 
i
 = 0; i < 
N_HASHES
; i++) {

100 c⁄° 
ödex
 = 
hash
[
i
] / 
BITS_PER_INDEX
;

101 c⁄° 
bô
 = 
hash
[
i
] & 
BITS_INDEX_MASK
;

103 i‡(
b
->
m≠
[
ödex
] & (1U << 
bô
))

104 
was_£t
++;

105 i‡(
£t
)

106 
b
->
m≠
[
ödex
] |1U << 
bô
;

111  
was_£t
 =
N_HASHES
;

112 
	}
}

114 
boﬁ
 
	$bloom_£t
(
bloom
 *
b
, 
uöt32_t
 *
d©a
, 
nw‹ds
)

116  
	`__bloom_check
(
b
, 
d©a
, 
nw‹ds
 * (
uöt32_t
), 
åue
);

117 
	}
}

119 
boﬁ
 
	$bloom_°rög
(
bloom
 *
b
, c⁄° *
d©a
, 
Àn
,

120 
boﬁ
 
£t
)

122  
	`__bloom_check
(
b
, 
d©a
, 
Àn
, 
£t
);

123 
	}
}

	@lib/bloom.h

1 #i‚de‡
FIO_BLOOM_H


2 
	#FIO_BLOOM_H


	)

4 
	~<öây≥s.h
>

5 
	~"../lib/ty≥s.h
"

7 
	gbloom
;

9 
bloom
 *
bloom_√w
(
uöt64_t
 
íåõs
);

10 
bloom_‰ì
(
bloom
 *
b
);

11 
boﬁ
 
bloom_£t
(
bloom
 *
b
, 
uöt32_t
 *
d©a
, 
nw‹ds
);

12 
boﬁ
 
bloom_°rög
(
bloom
 *
b
, c⁄° *
d©a
, 
Àn
, bool);

	@lib/bswap.h

1 #i‚de‡
FIO_BSWAP_H


2 
	#FIO_BSWAP_H


	)

4 
	~<öây≥s.h
>

6 #ifde‡
CONFIG_LITTLE_ENDIAN


7 
ölöe
 
uöt32_t
 
	$__be32_to_˝u
(
uöt32_t
 
vÆ
)

9 
uöt32_t
 
c1
, 
c2
, 
c3
, 
c4
;

11 
c1
 = (
vÆ
 >> 24) & 0xff;

12 
c2
 = (
vÆ
 >> 16) & 0xff;

13 
c3
 = (
vÆ
 >> 8) & 0xff;

14 
c4
 = 
vÆ
 & 0xff;

16  
c1
 | 
c2
 << 8 | 
c3
 << 16 | 
c4
 << 24;

17 
	}
}

19 
ölöe
 
uöt64_t
 
	$__be64_to_˝u
(
uöt64_t
 
vÆ
)

21 
uöt64_t
 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
, 
c8
;

23 
c1
 = (
vÆ
 >> 56) & 0xff;

24 
c2
 = (
vÆ
 >> 48) & 0xff;

25 
c3
 = (
vÆ
 >> 40) & 0xff;

26 
c4
 = (
vÆ
 >> 32) & 0xff;

27 
c5
 = (
vÆ
 >> 24) & 0xff;

28 
c6
 = (
vÆ
 >> 16) & 0xff;

29 
c7
 = (
vÆ
 >> 8) & 0xff;

30 
c8
 = 
vÆ
 & 0xff;

32  
c1
 | 
c2
 << 8 | 
c3
 << 16 | 
c4
 << 24 | 
c5
 << 32 | 
c6
 << 40 | 
c7
 << 48 | 
c8
 << 56;

33 
	}
}

35 
ölöe
 
uöt64_t
 
	$__be64_to_˝u
(
uöt64_t
 
vÆ
)

37  
vÆ
;

38 
	}
}

40 
ölöe
 
uöt32_t
 
	$__be32_to_˝u
(
uöt32_t
 
vÆ
)

42  
vÆ
;

43 
	}
}

	@lib/ffz.h

1 #i‚de‡
FIO_FFZ_H


2 
	#FIO_FFZ_H


	)

4 
	~<öây≥s.h
>

6 
ölöe
 
	$ffs64
(
uöt64_t
 
w‹d
)

8 
r
 = 0;

10 i‡((
w‹d
 & 0xffffffff) == 0) {

11 
r
 += 32;

12 
w‹d
 >>= 32;

14 i‡(!(
w‹d
 & 0xffff)) {

15 
w‹d
 >>= 16;

16 
r
 += 16;

18 i‡(!(
w‹d
 & 0xff)) {

19 
w‹d
 >>= 8;

20 
r
 += 8;

22 i‡(!(
w‹d
 & 0xf)) {

23 
w‹d
 >>= 4;

24 
r
 += 4;

26 i‡(!(
w‹d
 & 3)) {

27 
w‹d
 >>= 2;

28 
r
 += 2;

30 i‡(!(
w‹d
 & 1))

31 
r
 += 1;

33  
r
;

34 
	}
}

36 #i‚de‡
ARCH_HAVE_FFZ


38 
ölöe
 
	$ffz
(
bômask
)

40  
	`ffs64
(~
bômask
);

41 
	}
}

44 
	#ffz
(
bômask
Ë
	`¨ch_ffz
(bômask)

	)

47 
ölöe
 
	$ffz64
(
uöt64_t
 
bômask
)

49  
	`ffs64
(~
bômask
);

50 
	}
}

	@lib/flist_sort.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~"../Êi°.h
"

4 
	~"../log.h
"

6 
	#MAX_LIST_LENGTH_BITS
 20

	)

13 
Êi°_hód
 *
	$mîge
(*
¥iv
,

14 (*
cmp
)(*
¥iv
, 
Êi°_hód
 *
a
,

15 
Êi°_hód
 *
b
),

16 
Êi°_hód
 *
a
, Êi°_hód *
b
)

18 
Êi°_hód
 
hód
, *
èû
 = &head;

20 
a
 && 
b
) {

22 i‡((*
cmp
)(
¥iv
, 
a
, 
b
) <= 0) {

23 
èû
->
√xt
 = 
a
;

24 
a
 =á->
√xt
;

26 
èû
->
√xt
 = 
b
;

27 
b
 = b->
√xt
;

29 
èû
 =Åaû->
√xt
;

31 
èû
->
√xt
 = 
a
?:
b
;

32  
hód
.
√xt
;

33 
	}
}

42 
	$mîge_™d_ª°‹e_back_löks
(*
¥iv
,

43 (*
cmp
)(*
¥iv
, 
Êi°_hód
 *
a
,

44 
Êi°_hód
 *
b
),

45 
Êi°_hód
 *
hód
,

46 
Êi°_hód
 *
a
, Êi°_hód *
b
)

48 
Êi°_hód
 *
èû
 = 
hód
;

50 
a
 && 
b
) {

52 i‡((*
cmp
)(
¥iv
, 
a
, 
b
) <= 0) {

53 
èû
->
√xt
 = 
a
;

54 
a
->
¥ev
 = 
èû
;

55 
a
 =á->
√xt
;

57 
èû
->
√xt
 = 
b
;

58 
b
->
¥ev
 = 
èû
;

59 
b
 = b->
√xt
;

61 
èû
 =Åaû->
√xt
;

63 
èû
->
√xt
 = 
a
 ? : 
b
;

72 (*
cmp
)(
¥iv
, 
èû
->
√xt
,Åail->next);

74 
èû
->
√xt
->
¥ev
 =Åail;

75 
èû
 =Åaû->
√xt
;

76 } 
èû
->
√xt
);

78 
èû
->
√xt
 = 
hód
;

79 
hód
->
¥ev
 = 
èû
;

80 
	}
}

96 
	$Êi°_s‹t
(*
¥iv
, 
Êi°_hód
 *
hód
,

97 (*
cmp
)(*
¥iv
, 
Êi°_hód
 *
a
,

98 
Êi°_hód
 *
b
))

100 
Êi°_hód
 *
∑π
[
MAX_LIST_LENGTH_BITS
+1];

102 
Àv
;

103 
max_Àv
 = 0;

104 
Êi°_hód
 *
li°
;

106 i‡(
	`Êi°_em±y
(
hód
))

109 
	`mem£t
(
∑π
, 0, (part));

111 
hód
->
¥ev
->
√xt
 = 
NULL
;

112 
li°
 = 
hód
->
√xt
;

114 
li°
) {

115 
Êi°_hód
 *
cur
 = 
li°
;

116 
li°
 =Üi°->
√xt
;

117 
cur
->
√xt
 = 
NULL
;

119 
Àv
 = 0; 
∑π
[lev];Üev++) {

120 
cur
 = 
	`mîge
(
¥iv
, 
cmp
, 
∑π
[
Àv
], cur);

121 
∑π
[
Àv
] = 
NULL
;

123 i‡(
Àv
 > 
max_Àv
) {

124 i‡(
Àv
 >
MAX_LIST_LENGTH_BITS
) {

125 
	`log_îr
("fio:ÜistÖassedÅo"

128 
Àv
--;

130 
max_Àv
 = 
Àv
;

132 
∑π
[
Àv
] = 
cur
;

135 
Àv
 = 0;Üev < 
max_Àv
;Üev++)

136 i‡(
∑π
[
Àv
])

137 
li°
 = 
	`mîge
(
¥iv
, 
cmp
, 
∑π
[
Àv
],Üist);

139 
	`mîge_™d_ª°‹e_back_löks
(
¥iv
, 
cmp
, 
hód
, 
∑π
[
max_Àv
], 
li°
);

140 
	}
}

	@lib/fls.h

1 #i‚de‡
_ASM_GENERIC_BITOPS_FLS_H_


2 
	#_ASM_GENERIC_BITOPS_FLS_H_


	)

12 
ölöe
 
	$__Ês
(
x
)

14 
r
 = 32;

16 i‡(!
x
)

18 i‡(!(
x
 & 0xffff0000u)) {

19 
x
 <<= 16;

20 
r
 -= 16;

22 i‡(!(
x
 & 0xff000000u)) {

23 
x
 <<= 8;

24 
r
 -= 8;

26 i‡(!(
x
 & 0xf0000000u)) {

27 
x
 <<= 4;

28 
r
 -= 4;

30 i‡(!(
x
 & 0xc0000000u)) {

31 
x
 <<= 2;

32 
r
 -= 2;

34 i‡(!(
x
 & 0x80000000u)) {

35 
r
 -= 1;

37  
r
;

38 
	}
}

	@lib/gauss.c

1 
	~<m©h.h
>

2 
	~<°rög.h
>

3 
	~"../hash.h
"

4 
	~"gauss.h
"

6 
	#GAUSS_ITERS
 12

	)

8 
	$gauss_dev
(
gauss_°©e
 *
gs
)

10 
r
;

11 
vr
;

13 i‡(!
gs
->
°ddev
)

16 
r
 = 
	`__ønd
(&
gs
->r);

17 
vr
 = 
gs
->
°ddev
 * (
r
 / (
FRAND32_MAX
 + 1.0));

19  
vr
 - 
gs
->
°ddev
 / 2;

20 
	}
}

22 
	$gauss_√xt
(
gauss_°©e
 *
gs
)

24 
sum
 = 0;

25 
i
;

27 
i
 = 0; i < 
GAUSS_ITERS
; i++)

28 
sum
 +
	`__ønd
(&
gs
->
r
Ë% (gs->
ƒ™ges
 + 1);

30 
sum
 = (sum + 
GAUSS_ITERS
 - 1) / GAUSS_ITERS;

32 i‡(
gs
->
°ddev
) {

33 
dev
 = 
	`gauss_dev
(
gs
);

35 
dev
 + 
sum
 >
gs
->
ƒ™ges
)

36 
dev
 /= 2;

37 
sum
 +
dev
;

40 i‡(!
gs
->
dißbÀ_hash
)

41 
sum
 = 
	`__hash_u64
(sum);

43  (
sum
 + 
gs
->
ønd_off
Ë% gs->
ƒ™ges
;

44 
	}
}

46 
	$gauss_öô
(
gauss_°©e
 *
gs
, 
ƒ™ges
, 
dev
,

47 
˚¡î
, 
£ed
)

49 
	`mem£t
(
gs
, 0, (*gs));

50 
	`öô_ønd_£ed
(&
gs
->
r
, 
£ed
, 0);

51 
gs
->
ƒ™ges
 =Çranges;

53 i‡(
dev
 != 0.0) {

54 
gs
->
°ddev
 = 
	`˚û
(()(
ƒ™ges
 * 
dev
) / 100.0);

55 i‡(
gs
->
°ddev
 > 
ƒ™ges
 / 2)

56 
gs
->
°ddev
 = 
ƒ™ges
 / 2;

58 i‡(
˚¡î
 == -1)

59 
gs
->
ønd_off
 = 0;

61 
gs
->
ønd_off
 = 
ƒ™ges
 * (
˚¡î
 - 0.5);

62 
	}
}

64 
	$gauss_dißbÀ_hash
(
gauss_°©e
 *
gs
)

66 
gs
->
dißbÀ_hash
 = 
åue
;

67 
	}
}

	@lib/gauss.h

1 #i‚de‡
FIO_GAUSS_H


2 
	#FIO_GAUSS_H


	)

4 
	~<öây≥s.h
>

5 
	~"ønd.h
"

7 
	sgauss_°©e
 {

8 
‰™d_°©e
 
	mr
;

9 
uöt64_t
 
	mƒ™ges
;

10 
	m°ddev
;

11 
	mønd_off
;

12 
boﬁ
 
	mdißbÀ_hash
;

15 
gauss_öô
(
gauss_°©e
 *
gs
, 
ƒ™ges
, 
dev
,

16 
˚¡î
, 
£ed
);

17 
gauss_√xt
(
gauss_°©e
 *
gs
);

18 
gauss_dißbÀ_hash
(
gauss_°©e
 *
gs
);

	@lib/getrusage.c

1 
	~<î∫o.h
>

2 
	~"gërußge.h
"

4 
	$fio_gërußge
(
rußge
 *
ru
)

6 #ifde‡
CONFIG_RUSAGE_THREAD


7 i‡(!
	`gërußge
(
RUSAGE_THREAD
, 
ru
))

9 i‡(
î∫o
 !
EINVAL
)

13  
	`gërußge
(
RUSAGE_SELF
, 
ru
);

14 
	}
}

	@lib/getrusage.h

1 #i‚de‡
FIO_GETRUSAGE_H


2 
	#FIO_GETRUSAGE_H


	)

4 
	~<sys/time.h
>

5 
	~<sys/ªsour˚.h
>

7 
fio_gërußge
(
rußge
 *
ru
);

	@lib/hweight.c

1 
	~"hweight.h
"

3 
	$hweight8
(
uöt8_t
 
w
)

5 
ªs
 = 
w
 - ((w >> 1) & 0x55);

7 
ªs
 = (res & 0x33) + ((res >> 2) & 0x33);

8  (
ªs
 + (res >> 4)) & 0x0F;

9 
	}
}

11 
	$hweight32
(
uöt32_t
 
w
)

13 
ªs
 = 
w
 - ((w >> 1) & 0x55555555);

15 
ªs
 = (res & 0x33333333) + ((res >> 2) & 0x33333333);

16 
ªs
 = (res + (res >> 4)) & 0x0F0F0F0F;

17 
ªs
 =Ñes + (res >> 8);

18  (
ªs
 + (res >> 16)) & 0x000000FF;

19 
	}
}

21 
	$hweight64
(
uöt64_t
 
w
)

23 #i‡
BITS_PER_LONG
 == 32

24  
	`hweight32
(()(
w
 >> 32)) + hweight32(()w);

26 
uöt64_t
 
ªs
 = 
w
 - ((w >> 1) & 0x5555555555555555ULL);

27 
ªs
 = (res & 0x3333333333333333ULL) + ((res >> 2) & 0x3333333333333333ULL);

28 
ªs
 = (res + (res >> 4)) & 0x0F0F0F0F0F0F0F0FULL;

29 
ªs
 =Ñes + (res >> 8);

30 
ªs
 =Ñes + (res >> 16);

31  (
ªs
 + (res >> 32)) & 0x00000000000000FFULL;

33 
	}
}

	@lib/hweight.h

1 #i‚de‡
FIO_HWEIGHT_H


2 
	#FIO_HWEIGHT_H


	)

4 
	~<öây≥s.h
>

6 
hweight8
(
uöt8_t
 
w
);

7 
hweight32
(
uöt32_t
 
w
);

8 
hweight64
(
uöt64_t
 
w
);

	@lib/ieee754.c

8 
	~"õì754.h
"

10 
uöt64_t
 
	$∑ck754
(
f
, 
bôs
, 
expbôs
)

12 
‚‹m
;

13 
shi·
;

14 
sign
, 
exp
, 
signifiˇnd
;

15 
signifiˇndbôs
 = 
bôs
 - 
expbôs
 - 1;

18 i‡(
f
 == 0.0)

22 i‡(
f
 < 0) {

23 
sign
 = 1;

24 
‚‹m
 = -
f
;

26 
sign
 = 0;

27 
‚‹m
 = 
f
;

31 
shi·
 = 0;

32 
‚‹m
 >= 2.0) {

33 
‚‹m
 /= 2.0;

34 
shi·
++;

36 
‚‹m
 < 1.0) {

37 
‚‹m
 *= 2.0;

38 
shi·
--;

40 
‚‹m
 = fnorm - 1.0;

43 
signifiˇnd
 = 
‚‹m
 * ((1LL << 
signifiˇndbôs
) + 0.5f);

46 
exp
 = 
shi·
 + ((1 << (
expbôs
 - 1)) - 1);

49  (
sign
 << (
bôs
 - 1)Ë| (
exp
 << (bôs-
expbôs
 - 1)Ë| 
signifiˇnd
;

50 
	}
}

52 
	$u≈ack754
(
uöt64_t
 
i
, 
bôs
, 
expbôs
)

54 
ªsu…
;

55 
shi·
;

56 
büs
;

57 
signifiˇndbôs
 = 
bôs
 - 
expbôs
 - 1;

59 i‡(
i
 == 0)

63 
ªsu…
 = (
i
 & ((1LL << 
signifiˇndbôs
) - 1));

64 
ªsu…
 /(1LL << 
signifiˇndbôs
);

65 
ªsu…
 += 1.0f;

68 
büs
 = (1 << (
expbôs
 - 1)) - 1;

69 
shi·
 = ((
i
 >> 
signifiˇndbôs
Ë& ((1LL << 
expbôs
Ë- 1)Ë- 
büs
;

70 
shi·
 > 0) {

71 
ªsu…
 *= 2.0;

72 
shi·
--;

74 
shi·
 < 0) {

75 
ªsu…
 /= 2.0;

76 
shi·
++;

80 
ªsu…
 *(
i
 >> (
bôs
 - 1)) & 1 ? -1.0 : 1.0;

82  
ªsu…
;

83 
	}
}

	@lib/ieee754.h

1 #i‚de‡
FIO_IEEE754_H


2 
	#FIO_IEEE754_H


	)

4 
	~<öây≥s.h
>

6 
uöt64_t
 
∑ck754
(
f
, 
bôs
, 
expbôs
);

7 
u≈ack754
(
uöt64_t
 
i
, 
bôs
, 
expbôs
);

9 
	#fio_doubÀ_to_uöt64
(
vÆ
Ë
	`∑ck754
((vÆ), 64, 11)

	)

10 
	#fio_uöt64_to_doubÀ
(
vÆ
Ë
	`u≈ack754
((vÆ), 64, 11)

	)

12 
	sfio_Â64
 {

14 
uöt64_t
 
	mi
;

15 
	mf
;

16 
uöt8_t
 
	mfûÀr
[16];

17 } 
	mu
;

18 } 
	tfio_Â64_t
;

	@lib/lfsr.c

1 
	~<°dio.h
>

3 
	~"lf§.h
"

4 
	~"../compûî/compûî.h
"

13 
uöt8_t
 
	glf§_èps
[64][
FIO_MAX_TAPS
] =

79 
	#__LFSR_NEXT
(
__Ê
, 
__v
) \

80 
__v
 = ((__v >> 1Ë| 
__Ê
->
ˇched_bô
) ^ \

81 (((
__v
 & 1ULLË- 1ULLË& 
__Ê
->
x‹mask
);

	)

83 
ölöe
 
	$__lf§_√xt
(
fio_lf§
 *
Ê
, 
•ö
)

89 
•ö
) {

90 15: 
	`__LFSR_NEXT
(
Ê
, fl->
œ°_vÆ
);

91 
fio_ÁŒthrough
;

92 14: 
	`__LFSR_NEXT
(
Ê
, fl->
œ°_vÆ
);

93 
fio_ÁŒthrough
;

94 13: 
	`__LFSR_NEXT
(
Ê
, fl->
œ°_vÆ
);

95 
fio_ÁŒthrough
;

96 12: 
	`__LFSR_NEXT
(
Ê
, fl->
œ°_vÆ
);

97 
fio_ÁŒthrough
;

98 11: 
	`__LFSR_NEXT
(
Ê
, fl->
œ°_vÆ
);

99 
fio_ÁŒthrough
;

100 10: 
	`__LFSR_NEXT
(
Ê
, fl->
œ°_vÆ
);

101 
fio_ÁŒthrough
;

102 9: 
	`__LFSR_NEXT
(
Ê
, fl->
œ°_vÆ
);

103 
fio_ÁŒthrough
;

104 8: 
	`__LFSR_NEXT
(
Ê
, fl->
œ°_vÆ
);

105 
fio_ÁŒthrough
;

106 7: 
	`__LFSR_NEXT
(
Ê
, fl->
œ°_vÆ
);

107 
fio_ÁŒthrough
;

108 6: 
	`__LFSR_NEXT
(
Ê
, fl->
œ°_vÆ
);

109 
fio_ÁŒthrough
;

110 5: 
	`__LFSR_NEXT
(
Ê
, fl->
œ°_vÆ
);

111 
fio_ÁŒthrough
;

112 4: 
	`__LFSR_NEXT
(
Ê
, fl->
œ°_vÆ
);

113 
fio_ÁŒthrough
;

114 3: 
	`__LFSR_NEXT
(
Ê
, fl->
œ°_vÆ
);

115 
fio_ÁŒthrough
;

116 2: 
	`__LFSR_NEXT
(
Ê
, fl->
œ°_vÆ
);

117 
fio_ÁŒthrough
;

118 1: 
	`__LFSR_NEXT
(
Ê
, fl->
œ°_vÆ
);

119 
fio_ÁŒthrough
;

120 0: 
	`__LFSR_NEXT
(
Ê
, fl->
œ°_vÆ
);

121 
fio_ÁŒthrough
;

124 
	}
}

142 
	$lf§_√xt
(
fio_lf§
 *
Ê
, 
uöt64_t
 *
off
)

144 i‡(
Ê
->
num_vÆs
++ > fl->
max_vÆ
)

148 i‡(
Ê
->
cy˛e_Àngth
 && !--fl->cycle_length) {

149 
	`__lf§_√xt
(
Ê
, fl->
•ö
 + 1);

150 
Ê
->
cy˛e_Àngth
 = fl->
ˇched_cy˛e_Àngth
;

152 
	`__lf§_√xt
(
Ê
, fl->
•ö
);

153 } 
	`fio_u∆ikñy
(
Ê
->
œ°_vÆ
 > fl->
max_vÆ
));

155 *
off
 = 
Ê
->
œ°_vÆ
;

157 
	}
}

159 
uöt64_t
 
	$lf§_¸óã_x‹mask
(
uöt8_t
 *
èps
)

161 
i
;

162 
uöt64_t
 
x‹mask
 = 0;

164 
i
 = 0; i < 
FIO_MAX_TAPS
 && 
èps
[i] != 0; i++)

165 
x‹mask
 |1ULL << (
èps
[
i
] - 1);

167  
x‹mask
;

168 
	}
}

170 
uöt8_t
 *
	$föd_lf§
(
uöt64_t
 
size
)

172 
i
;

179 
i
 = 3; i < 64; i++)

180 i‡((1ULL << 
i
Ë> 
size
)

181  
lf§_èps
[
i
];

183  
NULL
;

184 
	}
}

204 
	$¥ï¨e_•ö
(
fio_lf§
 *
Ê
, 
•ö
)

206 
uöt64_t
 
max
 = (
Ê
->
ˇched_bô
 << 1) - 1;

207 
uöt64_t
 
x
, 
y
;

208 
i
;

210 i‡(
•ö
 > 15)

213 
x
 = 
max
 / (
•ö
 + 1);

214 
y
 = 
max
 % (
•ö
 + 1);

215 
Ê
->
cy˛e_Àngth
 = 0;

216 
Ê
->
•ö
 = spin;

218 
i
 = 1; i <
•ö
; i++) {

219 i‡((
y
 * 
i
Ë% (
•ö
 + 1) == 0) {

220 
Ê
->
cy˛e_Àngth
 = (
x
 * 
i
Ë+ (
y
 * iË/ (
•ö
 + 1);

224 
Ê
->
ˇched_cy˛e_Àngth
 = fl->
cy˛e_Àngth
;

230 
Ê
->
cy˛e_Àngth
++;

233 
	}
}

235 
	$lf§_ª£t
(
fio_lf§
 *
Ê
, 
uöt64_t
 
£ed
)

237 
uöt64_t
 
bômask
 = (
Ê
->
ˇched_bô
 << 1) - 1;

239 
Ê
->
num_vÆs
 = 0;

240 
Ê
->
œ°_vÆ
 = 
£ed
 & 
bômask
;

243 i‡(
Ê
->
œ°_vÆ
 =
bômask
)

247 
	}
}

249 
	$lf§_öô
(
fio_lf§
 *
Ê
, 
uöt64_t
 
nums
, uöt64_à
£ed
,

250 
•ö
)

252 
uöt8_t
 *
èps
;

254 
èps
 = 
	`föd_lf§
(
nums
);

255 i‡(!
èps
)

258 
Ê
->
max_vÆ
 = 
nums
 - 1;

259 
Ê
->
x‹mask
 = 
	`lf§_¸óã_x‹mask
(
èps
);

260 
Ê
->
ˇched_bô
 = 1ULL << (
èps
[0] - 1);

262 i‡(
	`¥ï¨e_•ö
(
Ê
, 
•ö
))

265 i‡(
	`lf§_ª£t
(
Ê
, 
£ed
))

269 
	}
}

	@lib/lfsr.h

1 #i‚de‡
FIO_LFSR_H


2 
	#FIO_LFSR_H


	)

4 
	~<öây≥s.h
>

6 
	#FIO_MAX_TAPS
 6

	)

8 
	slf§_èps
 {

9 
	mÀngth
;

10 
	mèps
[
FIO_MAX_TAPS
];

14 
	sfio_lf§
 {

15 
uöt64_t
 
	mx‹mask
;

16 
uöt64_t
 
	mœ°_vÆ
;

17 
uöt64_t
 
	mˇched_bô
;

18 
uöt64_t
 
	mmax_vÆ
;

19 
uöt64_t
 
	mnum_vÆs
;

20 
uöt64_t
 
	mcy˛e_Àngth
;

21 
uöt64_t
 
	mˇched_cy˛e_Àngth
;

22 
	m•ö
;

25 
lf§_√xt
(
fio_lf§
 *
Ê
, 
uöt64_t
 *
off
);

26 
lf§_öô
(
fio_lf§
 *
Ê
, 
uöt64_t
 
size
,

27 
uöt64_t
 
£ed
, 
•ö
);

28 
lf§_ª£t
(
fio_lf§
 *
Ê
, 
uöt64_t
 
£ed
);

	@lib/memalign.c

1 
	~<as£π.h
>

2 
	~<°dlib.h
>

4 
	~"memÆign.h
"

5 
	~"smÆloc.h
"

7 
	#PTR_ALIGN
(
±r
, 
mask
) \

8 (*)((
uöçå_t
)((
±r
Ë+ (
mask
)Ë& ~(mask))

	)

10 
	sÆign_foŸî
 {

11 
	moff£t
;

14 *
	$__fio_memÆign
(
size_t
 
Æignmít
, size_à
size
, 
mÆloc_‚
 
‚
)

16 
Æign_foŸî
 *
f
;

17 *
±r
, *
ªt
 = 
NULL
;

19 
	`as£π
(!(
Æignmít
 & (alignment - 1)));

21 
±r
 = 
	`‚
(
size
 + 
Æignmít
 + (*
f
) - 1);

22 i‡(
±r
) {

23 
ªt
 = 
	`PTR_ALIGN
(
±r
, 
Æignmít
 - 1);

24 
f
 = 
ªt
 + 
size
;

25 
f
->
off£t
 = (
uöçå_t
Ë
ªt
 - (uöçå_tË
±r
;

28  
ªt
;

29 
	}
}

31 
	$__fio_mem‰ì
(*
±r
, 
size_t
 
size
, 
‰ì_‚
 
‚
)

33 
Æign_foŸî
 *
f
 = 
±r
 + 
size
;

35 
	`‚
(
±r
 - 
f
->
off£t
);

36 
	}
}

	@lib/memalign.h

1 #i‚de‡
FIO_MEMALIGN_H


2 
	#FIO_MEMALIGN_H


	)

4 
	~<öây≥s.h
>

5 
	~<°dboﬁ.h
>

7 * (*
	tmÆloc_‚
)(
	tsize_t
);

8 (*
	t‰ì_‚
)(*);

10 *
	`__fio_memÆign
(
size_t
 
Æignmít
, size_à
size
, 
mÆloc_‚
 
‚
);

11 
	`__fio_mem‰ì
(*
±r
, 
size_t
 
size
, 
‰ì_‚
 
‚
);

	@lib/memcpy.c

1 
	~<öây≥s.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

6 
	~"mem˝y.h
"

7 
	~"ønd.h
"

8 
	~"../fio_time.h
"

9 
	~"../gëtime.h
"

10 
	~"../os/os.h
"

12 
	#BUF_SIZE
 32 * 1024 * 1024ULL

	)

14 
	#NR_ITERS
 64

	)

16 
	smem˝y_ã°
 {

17 c⁄° *
	m«me
;

18 *
	m§c
;

19 *
	md°
;

20 
size_t
 
	msize
;

23 
mem˝y_ã°
 
	gã°s
[] = {

25 .
«me
 = "8 bytes",

26 .
	gsize
 = 8,

29 .
	g«me
 = "16 bytes",

30 .
	gsize
 = 16,

33 .
	g«me
 = "96 bytes",

34 .
	gsize
 = 96,

37 .
	g«me
 = "128 bytes",

38 .
	gsize
 = 128,

41 .
	g«me
 = "256 bytes",

42 .
	gsize
 = 256,

45 .
	g«me
 = "512 bytes",

46 .
	gsize
 = 512,

49 .
	g«me
 = "2048 bytes",

50 .
	gsize
 = 2048,

53 .
	g«me
 = "8192 bytes",

54 .
	gsize
 = 8192,

57 .
	g«me
 = "131072 bytes",

58 .
	gsize
 = 131072,

61 .
	g«me
 = "262144 bytes",

62 .
	gsize
 = 262144,

65 .
	g«me
 = "524288 bytes",

66 .
	gsize
 = 524288,

69 .
	g«me
 = 
NULL
,

73 
	smem˝y_ty≥
 {

74 c⁄° *
	m«me
;

75 
	mmask
;

76 (*
	m‚
)(
	mmem˝y_ã°
 *);

80 
	mT_MEMCPY
 = 1U << 0,

81 
	mT_MEMMOVE
 = 1U << 1,

82 
	mT_SIMPLE
 = 1U << 2,

83 
	mT_HYBRID
 = 1U << 3,

86 
	#do_ã°
(
ã°
, 
‚
) do { \

87 
size_t
 
À·
, 
this
; \

88 *
§c
, *
d°
; \

89 
i
; \

91 
i
 = 0; i < 
NR_ITERS
; i++) { \

92 
À·
 = 
BUF_SIZE
; \

93 
§c
 = 
ã°
->src; \

94 
d°
 = 
ã°
->dst; \

95 
À·
) { \

96 
this
 = 
ã°
->
size
; \

97 i‡(
this
 > 
À·
) \

98 
this
 = 
À·
; \

99 (
‚
)(
d°
, 
§c
, 
this
); \

100 
À·
 -
this
; \

101 
§c
 +
this
; \

102 
d°
 +
this
; \

105 } 0)

	)

107 
	$t_mem˝y
(
mem˝y_ã°
 *
ã°
)

109 
	`do_ã°
(
ã°
, 
mem˝y
);

110 
	}
}

112 
	$t_memmove
(
mem˝y_ã°
 *
ã°
)

114 
	`do_ã°
(
ã°
, 
memmove
);

115 
	}
}

117 
	$sim∂e_mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
Àn
)

119 *
d
 = 
d°
;

120 c⁄° *
s
 = 
§c
;

122 
Àn
--)

123 *
d
++ = *
s
++;

124 
	}
}

126 
	$t_sim∂e
(
mem˝y_ã°
 *
ã°
)

128 
	`do_ã°
(
ã°
, 
sim∂e_mem˝y
);

129 
	}
}

131 
	$t_hybrid
(
mem˝y_ã°
 *
ã°
)

133 i‡(
ã°
->
size
 >= 64)

134 
	`do_ã°
(
ã°
, 
sim∂e_mem˝y
);

136 
	`do_ã°
(
ã°
, 
mem˝y
);

137 
	}
}

139 
mem˝y_ty≥
 
	gt
[] = {

141 .
«me
 = "memcpy",

142 .
	gmask
 = 
T_MEMCPY
,

143 .
	g‚
 = 
t_mem˝y
,

146 .
	g«me
 = "memmove",

147 .
	gmask
 = 
T_MEMMOVE
,

148 .
	g‚
 = 
t_memmove
,

151 .
	g«me
 = "simple",

152 .
	gmask
 = 
T_SIMPLE
,

153 .
	g‚
 = 
t_sim∂e
,

156 .
	g«me
 = "hybrid",

157 .
	gmask
 = 
T_HYBRID
,

158 .
	g‚
 = 
t_hybrid
,

161 .
	g«me
 = 
NULL
,

165 
	$gë_ã°_mask
(c⁄° *
ty≥
)

167 *
o°r
, *
°r
 = 
	`°rdup
(
ty≥
);

168 
mask
;

169 *
«me
;

170 
i
;

172 
o°r
 = 
°r
;

173 
mask
 = 0;

174 (
«me
 = 
	`°r£p
(&
°r
, ",")Ë!
NULL
) {

175 
i
 = 0; 
t
[i].
«me
; i++) {

176 i‡(!
	`°rcmp
(
t
[
i
].
«me
,Çame)) {

177 
mask
 |
t
[
i
].mask;

183 
	`‰ì
(
o°r
);

184  
mask
;

185 
	}
}

187 
	$li°_ty≥s
()

189 
i
;

191 
i
 = 0; 
t
[i].
«me
; i++)

192 
	`¥ötf
("%s\n", 
t
[
i
].
«me
);

195 
	}
}

197 
	$£tup_ã°s
()

199 
mem˝y_ã°
 *
ã°
;

200 
‰™d_°©e
 
°©e
;

201 *
§c
, *
d°
;

202 
i
;

204 i‡(!
ã°s
[0].
«me
)

207 
§c
 = 
	`mÆloc
(
BUF_SIZE
);

208 
d°
 = 
	`mÆloc
(
BUF_SIZE
);

209 i‡(!
§c
 || !
d°
) {

210 
	`‰ì
(
§c
);

211 
	`‰ì
(
d°
);

215 
	`öô_ønd_£ed
(&
°©e
, 0x8989, 0);

216 
	`fûl_øndom_buf
(&
°©e
, 
§c
, 
BUF_SIZE
);

218 
i
 = 0; 
ã°s
[i].
«me
; i++) {

219 
ã°
 = &
ã°s
[
i
];

220 
ã°
->
§c
 = src;

221 
ã°
->
d°
 = dst;

225 
	}
}

227 
	$‰ì_ã°s
()

229 
	`‰ì
(
ã°s
[0].
§c
);

230 
	`‰ì
(
ã°s
[0].
d°
);

231 
	}
}

233 
	$fio_mem˝y_ã°
(c⁄° *
ty≥
)

235 
ã°_mask
 = 0;

236 
j
, 
i
;

238 i‡(!
ty≥
)

239 
ã°_mask
 = ~0U;

240 i‡(!
	`°rcmp
(
ty≥
, "help") || !strcmp(type, "list"))

241  
	`li°_ty≥s
();

243 
ã°_mask
 = 
	`gë_ã°_mask
(
ty≥
);

245 i‡(!
ã°_mask
) {

246 
	`Ârötf
(
°dîr
, "fio: unknow¿hash `%s`. AvaûabÀ:\n", 
ty≥
);

247  
	`li°_ty≥s
();

250 i‡(
	`£tup_ã°s
()) {

251 
	`Ârötf
(
°dîr
, "setting up memÑegions failed\n");

255 
i
 = 0; 
t
[i].
«me
; i++) {

256 
time•ec
 
ts
;

257 
mb_£c
;

258 
uöt64_t
 
u£c
;

260 i‡(!(
t
[
i
].
mask
 & 
ã°_mask
))

267 
	`u£c_•ö
(100000);

268 
t
[
i
].
	`‚
(&
ã°s
[0]);

270 
	`¥ötf
("%s\n", 
t
[
i
].
«me
);

272 
j
 = 0; 
ã°s
[j].
«me
; j++) {

273 
	`fio_gëtime
(&
ts
, 
NULL
);

274 
t
[
i
].
	`‚
(&
ã°s
[
j
]);

275 
u£c
 = 
	`utime_sö˚_now
(&
ts
);

277 i‡(
u£c
) {

278 
mb
 = 
NR_ITERS
 * 
BUF_SIZE
;

280 
mb_£c
 = (Ë
mb
 / (Ë
u£c
;

281 
mb_£c
 /= (1.024 * 1.024);

282 
	`¥ötf
("\t%s:\t%8.2‡MiB/£c\n", 
ã°s
[
j
].
«me
, 
mb_£c
);

284 
	`¥ötf
("\t%s:ö‡MiB/£c\n", 
ã°s
[
j
].
«me
);

288 
	`‰ì_ã°s
();

290 
	}
}

	@lib/memcpy.h

1 #i‚de‡
FIO_MEMCPY_H


2 
	#FIO_MEMCPY_H


	)

4 
fio_mem˝y_ã°
(c⁄° *
ty≥
);

	@lib/mountcheck.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

4 #ifde‡
CONFIG_GETMNTENT


5 
	~<m¡ít.h
>

7 
	~"mou¡check.h
"

9 
	#MTAB
 "/ëc/mèb"

	)

11 
	$devi˚_is_mou¡ed
(c⁄° *
dev
)

13 
FILE
 *
mèb
;

14 
m¡ít
 *
m¡
;

15 
ªt
 = 0;

17 
mèb
 = 
	`£tm¡ít
(
MTAB
, "r");

18 i‡(!
mèb
)

21 (
m¡
 = 
	`gëm¡ít
(
mèb
)Ë!
NULL
) {

22 i‡(!
m¡
->
m¡_f¢ame
)

24 i‡(!
	`°rcmp
(
m¡
->
m¡_f¢ame
, 
dev
)) {

25 
ªt
 = 1;

30 
	`ídm¡ít
(
mèb
);

31  
ªt
;

32 
	}
}

34 #ñi‡
deföed
(
CONFIG_GETMNTINFO
)

36 
	~<sys/∑øm.h
>

37 
	~<sys/mou¡.h
>

39 
	$devi˚_is_mou¡ed
(c⁄° *
dev
)

41 
°©fs
 *
°
;

42 
i
, 
ªt
;

44 
ªt
 = 
	`gëm¡öfo
(&
°
, 
MNT_NOWAIT
);

45 i‡(
ªt
 <= 0)

48 
i
 = 0; i < 
ªt
; i++) {

49 i‡(!
	`°rcmp
(
°
[
i
].
f_m¡‰om«me
, 
dev
))

54 
	}
}

56 #ñi‡
deföed
(
CONFIG_GETMNTINFO_STATVFS
)

58 
	~<sys/°©vfs.h
>

60 
	$devi˚_is_mou¡ed
(c⁄° *
dev
)

62 
°©vfs
 *
°
;

63 
i
, 
ªt
;

65 
ªt
 = 
	`gëm¡öfo
(&
°
, 
MNT_NOWAIT
);

66 i‡(
ªt
 <= 0)

69 
i
 = 0; i < 
ªt
; i++) {

70 i‡(!
	`°rcmp
(
°
[
i
].
f_m¡‰om«me
, 
dev
))

75 
	}
}

80 
	$devi˚_is_mou¡ed
(c⁄° *
dev
)

83 
	}
}

	@lib/mountcheck.h

1 #i‚de‡
FIO_MOUNT_CHECK_H


2 
	#FIO_MOUNT_CHECK_H


	)

4 
devi˚_is_mou¡ed
(const *);

	@lib/nowarn_snprintf.h

1 #i‚de‡
_NOWARN_SNPRINTF_H_


2 
	#_NOWARN_SNPRINTF_H_


	)

4 
	~<°dio.h
>

5 
	~<°d¨g.h
>

7 
ölöe
 
	$now¨n_¢¥ötf
(*
°r
, 
size_t
 
size
, c⁄° *
f‹m©
,

10 
va_li°
 
¨gs
;

11 
ªs
;

13 
	`va_°¨t
(
¨gs
, 
f‹m©
);

14 #i‡
__GNUC__
 -0 >= 8

15 #¥agm®
GCC
 
dügno°ic
 
push
 "-Wformat-truncation"

16 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wformat-truncation"

18 
ªs
 = 
	`v¢¥ötf
(
°r
, 
size
, 
f‹m©
, 
¨gs
);

19 #i‡
__GNUC__
 -0 >= 8

20 #¥agm®
GCC
 
dügno°ic
 
p›
 "-Wformat-truncation"

22 
	`va_íd
(
¨gs
);

24  
ªs
;

25 
	}
}

	@lib/num2str.c

1 
	~<as£π.h
>

2 
	~<°dlib.h
>

3 
	~<°dio.h
>

4 
	~<°rög.h
>

6 
	~"../compûî/compûî.h
"

7 
	~"../o¶ib/a•rötf.h
"

8 
	~"num2°r.h
"

19 *
	$num2°r
(
uöt64_t
 
num
, 
maxÀn
, 
ba£
, 
pow2
, 
n2s_unô
 
unôs
)

21 c⁄° *
si°r
[] = { "", "k", "M", "G", "T", "P", "E" };

22 c⁄° *
õc°r
[] = { "", "Ki", "Mi", "Gi", "Ti", "Pi", "Ei" };

23 c⁄° **
unô¥efix
;

24 c⁄° *c⁄° 
unô°r
[] = {

25 [
N2S_NONE
] = "",

26 [
N2S_PERSEC
] = "/s",

27 [
N2S_BYTE
] = "B",

28 [
N2S_BIT
] = "bit",

29 [
N2S_BYTEPERSEC
]= "B/s",

30 [
N2S_BITPERSEC
] = "bit/s"

32 c⁄° 
thoußnd
 = 
pow2
 ? 1024 : 1000;

33 
modulo
;

34 
po°_ödex
, 
ˇºy
 = 0;

35 
tmp
[32];

36 *
buf
;

38 
	`compûëime_as£π
((
si°r
Ë=(
õc°r
), "unitÖrefixárrays must be identical sizes");

39 
	`as£π
(
unôs
 < 
	`FIO_ARRAY_SIZE
(
unô°r
));

41 i‡(
pow2
)

42 
unô¥efix
 = 
õc°r
;

44 
unô¥efix
 = 
si°r
;

46 
po°_ödex
 = 0; 
ba£
 > 1;Öost_index++)

47 
ba£
 /
thoußnd
;

49 
unôs
) {

50 
N2S_NONE
:

52 
N2S_PERSEC
:

54 
N2S_BYTE
:

56 
N2S_BIT
:

57 
num
 *= 8;

59 
N2S_BYTEPERSEC
:

61 
N2S_BITPERSEC
:

62 
num
 *= 8;

69 
modulo
 = -1U;

70 
po°_ödex
 < 
	`FIO_ARRAY_SIZE
(
si°r
)) {

71 
	`•rötf
(
tmp
, "%Œu", (Ë
num
);

72 i‡(
	`°æí
(
tmp
Ë<
maxÀn
)

75 
modulo
 = 
num
 % 
thoußnd
;

76 
num
 /
thoußnd
;

77 
ˇºy
 = 
modulo
 >
thoußnd
 / 2;

78 
po°_ödex
++;

81 i‡(
po°_ödex
 >
	`FIO_ARRAY_SIZE
(
si°r
))

82 
po°_ödex
 = 0;

87 i‡(
modulo
 == -1U) {

88 
d⁄e
:

89 i‡(
	`a•rötf
(&
buf
, "%Œu%s%s", (Ë
num
,

90 
unô¥efix
[
po°_ödex
], 
unô°r
[
unôs
]) < 0)

91 
buf
 = 
NULL
;

92  
buf
;

98 
	`•rötf
(
tmp
, "%Œu", (Ë
num
);

99 i‡(()(
maxÀn
 - 
	`°æí
(
tmp
)) <= 1) {

100 i‡(
ˇºy
)

101 
num
++;

102 
d⁄e
;

108 
	`as£π
(
maxÀn
 - 
	`°æí
(
tmp
) - 1 > 0);

109 
	`as£π
(
modulo
 < 
thoußnd
);

110 
	`•rötf
(
tmp
, "%.*f", ()(
maxÀn
 - 
	`°æí
(tmp) - 1),

111 ()
modulo
 / ()
thoußnd
);

113 i‡(
tmp
[0] == '1')

114 
num
++;

116 i‡(
	`a•rötf
(&
buf
, "%Œu.%s%s%s", (Ë
num
, &
tmp
[2],

117 
unô¥efix
[
po°_ödex
], 
unô°r
[
unôs
]) < 0)

118 
buf
 = 
NULL
;

119  
buf
;

120 
	}
}

	@lib/num2str.h

1 #i‚de‡
FIO_NUM2STR_H


2 
	#FIO_NUM2STR_H


	)

4 
	~<öây≥s.h
>

6 
	en2s_unô
 {

7 
	mN2S_NONE
 = 0,

8 
	mN2S_PERSEC
 = 1,

9 
	mN2S_BYTE
 = 2,

10 
	mN2S_BIT
 = 3,

11 
	mN2S_BYTEPERSEC
 = 4,

12 
	mN2S_BITPERSEC
 = 5,

15 *
num2°r
(
uöt64_t
, , , , 
n2s_unô
);

	@lib/output_buffer.c

1 
	~<°rög.h
>

2 
	~<°dlib.h
>

4 
	~"ouçut_buf„r.h
"

5 
	~"../mömax.h
"

7 
	#BUF_INC
 1024

	)

9 
	$buf_ouçut_öô
(
buf_ouçut
 *
out
)

11 
out
->
max_buÊí
 = 0;

12 
out
->
buÊí
 = 0;

13 
out
->
buf
 = 
NULL
;

14 
	}
}

16 
	$buf_ouçut_‰ì
(
buf_ouçut
 *
out
)

18 
	`‰ì
(
out
->
buf
);

19 
	`buf_ouçut_öô
(
out
);

20 
	}
}

22 
size_t
 
	$buf_ouçut_add
(
buf_ouçut
 *
out
, c⁄° *
buf
, 
size_t
 
Àn
)

24 i‡(
out
->
max_buÊí
 - out->
buÊí
 < 
Àn
) {

25 
size_t
 
√ed
 = 
Àn
 - (
out
->
max_buÊí
 - out->
buÊí
);

26 
size_t
 
ﬁd_max
 = 
out
->
max_buÊí
;

28 
√ed
 = 
	`max
((
size_t
Ë
BUF_INC
,Çeed);

29 
out
->
max_buÊí
 +
√ed
;

30 
out
->
buf
 = 
	`ªÆloc
(out->buf, out->
max_buÊí
);

32 
ﬁd_max
 = 
	`max
(ﬁd_max, 
out
->
buÊí
 + 
Àn
);

33 i‡(
ﬁd_max
 + 
√ed
 > 
out
->
max_buÊí
)

34 
√ed
 = 
out
->
max_buÊí
 - 
ﬁd_max
;

35 
	`mem£t
(&
out
->
buf
[
ﬁd_max
], 0, 
√ed
);

38 
	`mem˝y
(&
out
->
buf
[out->
buÊí
], buf, 
Àn
);

39 
out
->
buÊí
 +
Àn
;

40  
Àn
;

41 
	}
}

	@lib/output_buffer.h

1 #i‚de‡
FIO_OUTPUT_BUFFER_H


2 
	#FIO_OUTPUT_BUFFER_H


	)

4 
	~<°ddef.h
>

6 
	sbuf_ouçut
 {

7 *
	mbuf
;

8 
size_t
 
	mbuÊí
;

9 
size_t
 
	mmax_buÊí
;

12 
buf_ouçut_öô
(
buf_ouçut
 *
out
);

13 
buf_ouçut_‰ì
(
buf_ouçut
 *
out
);

14 
size_t
 
buf_ouçut_add
(
buf_ouçut
 *
out
, c⁄° *
buf
, size_à
Àn
);

	@lib/pattern.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<limôs.h
>

5 
	~<î∫o.h
>

6 
	~<as£π.h
>

7 
	~<f˙é.h
>

8 
	~<uni°d.h
>

10 
	~"°∫tﬁ.h
"

11 
	~"∑âîn.h
"

12 
	~"../mömax.h
"

13 
	~"../o¶ib/°rˇ£°r.h
"

14 
	~"../o¶ib/°∫dup.h
"

28 c⁄° *
	$∑r£_fûe
(c⁄° *
beg
, *
out
,

29 
out_Àn
,

30 *
fûÀd
)

32 c⁄° *
íd
;

33 *
fûe
;

34 
fd
;

35 
ssize_t
 
cou¡
;

37 i‡(!
out_Àn
)

38 
îr_out
;

40 
	`as£π
(*
beg
 == '\'');

41 
beg
++;

42 
íd
 = 
	`°rchr
(
beg
, '\'');

43 i‡(!
íd
)

44 
îr_out
;

46 
fûe
 = 
	`°∫dup
(
beg
, 
íd
 - beg);

47 i‡(
fûe
 =
NULL
)

48 
îr_out
;

50 
fd
 = 
	`›í
(
fûe
, 
O_RDONLY
);

51 i‡(
fd
 < 0)

52 
îr_‰ì_out
;

54 
cou¡
 = 
	`ªad
(
fd
, 
out
, 
out_Àn
);

55 i‡(
cou¡
 == -1)

56 
îr_‰ì_˛o£_out
;

58 *
fûÀd
 = 
cou¡
;

59 
	`˛o£
(
fd
);

60 
	`‰ì
(
fûe
);

63  
íd
 + 1;

65 
îr_‰ì_˛o£_out
:

66 
	`˛o£
(
fd
);

67 
îr_‰ì_out
:

68 
	`‰ì
(
fûe
);

69 
îr_out
:

70  
NULL
;

72 
	}
}

86 c⁄° *
	$∑r£_°rög
(c⁄° *
beg
, *
out
,

87 
out_Àn
,

88 *
fûÀd
)

90 c⁄° *
íd
;

92 i‡(!
out_Àn
)

93  
NULL
;

95 
	`as£π
(*
beg
 == '"');

96 
beg
++;

97 
íd
 = 
	`°rchr
(
beg
, '"');

98 i‡(!
íd
)

99  
NULL
;

100 i‡(
íd
 - 
beg
 > 
out_Àn
)

101  
NULL
;

103 
	`mem˝y
(
out
, 
beg
, 
íd
 - beg);

104 *
fûÀd
 = 
íd
 - 
beg
;

107  
íd
 + 1;

108 
	}
}

126 c⁄° *
	$∑r£_numbî
(c⁄° *
beg
, *
out
,

127 
out_Àn
,

128 *
fûÀd
)

130 c⁄° *
íd
;

131 
vÆ
;

132 
lvÆ
;

133 
num
, 
i
;

135 i‡(!
out_Àn
)

136  
NULL
;

138 
num
 = 0;

139 
	`ssˇnf
(
beg
, "0%*[xX]%*[0-9a-fA-F]%n", &
num
);

140 i‡(
num
 == 0) {

143 *
_íd
;

146 
_íd
 = 
	`°rˇ£°r
(
beg
, "0x");

147 i‡(
_íd
)

148 
num
 = 
_íd
 - 
beg
;

149 i‡(
num
)

150 
lvÆ
 = 
	`°∫tﬁ
(
beg
, 
num
, &
_íd
, 10);

152 
lvÆ
 = 
	`°πﬁ
(
beg
, &
_íd
, 10);

153 i‡(
beg
 =
_íd
 || 
lvÆ
 > 
INT_MAX
 ||ÜvÆ < 
INT_MIN
)

154  
NULL
;

155 
íd
 = 
_íd
;

156 
i
 = 0;

157 i‡(!
lvÆ
) {

158 
num
 = 0;

159 
out
[
i
] = 0x00;

160 
i
 = 1;

162 
vÆ
 = ()
lvÆ
;

163 ; 
vÆ
 && 
out_Àn
; out_Àn--, 
i
++, val >>= 8)

164 
out
[
i
] = 
vÆ
 & 0xff;

165 i‡(
vÆ
)

166  
NULL
;

169 
	`as£π
(
num
 > 2);

172 
num
 -= 2;

173 
beg
 += 2;

176 i‡(
beg
[
num
] && !
	`°∫ˇ£cmp
(&beg[num - 1], "0x", 2))

177 
num
--;

179 
íd
 = 
beg
 + 
num
;

181 
i
 = 0; 
num
 && 
out_Àn
;

182 
out_Àn
--, 
i
++, 
num
 -2, 
beg
 += 2) {

183 c⁄° *
fmt
;

185 
fmt
 = (
num
 & 1 ? "%1hhx" : "%2hhx");

186 
	`ssˇnf
(
beg
, 
fmt
, &
out
[
i
]);

187 i‡(
num
 & 1) {

188 
num
++;

189 
beg
--;

192 i‡(
num
)

193  
NULL
;

196 *
fûÀd
 = 
i
;

197  
íd
;

199 
	}
}

222 c⁄° *
	$∑r£_f‹m©
(c⁄° *
ö
, *
out
, 
∑r£d
,

223 
out_Àn
, *
fûÀd
,

224 c⁄° 
∑âîn_fmt_desc
 *
fmt_desc
,

225 
∑âîn_fmt
 *
fmt
, 
fmt_sz
)

227 
i
;

228 
∑âîn_fmt
 *
f
 = 
NULL
;

229 
Àn
 = 0;

231 i‡(!
out_Àn
 || !
fmt_desc
 || !
fmt
 || !
fmt_sz
)

232  
NULL
;

234 
	`as£π
(*
ö
 == '%');

236 
i
 = 0; 
fmt_desc
[i].
fmt
; i++) {

237 c⁄° 
∑âîn_fmt_desc
 *
desc
;

239 
desc
 = &
fmt_desc
[
i
];

240 
Àn
 = 
	`°æí
(
desc
->
fmt
);

241 i‡(0 =
	`°∫cmp
(
ö
, 
desc
->
fmt
, 
Àn
)) {

242 
fmt
->
desc
 = desc;

243 
fmt
->
off
 = 
∑r£d
;

244 
f
 = 
fmt
;

249 i‡(!
f
)

250  
NULL
;

251 i‡(
f
->
desc
->
Àn
 > 
out_Àn
)

252  
NULL
;

254 
	`mem£t
(
out
, '\0', 
f
->
desc
->
Àn
);

255 *
fûÀd
 = 
f
->
desc
->
Àn
;

257  
ö
 + 
Àn
;

258 
	}
}

308 
	$∑r£_™d_fûl_∑âîn
(c⁄° *
ö
, 
ö_Àn
,

309 *
out
, 
out_Àn
,

310 c⁄° 
∑âîn_fmt_desc
 *
fmt_desc
,

311 
∑âîn_fmt
 *
fmt
,

312 *
fmt_sz_out
)

314 c⁄° *
beg
, *
íd
, *
out_beg
 = 
out
;

315 
tŸÆ
 = 0, 
fmt_ªm
 = 0;

317 i‡(!
ö
 || !
ö_Àn
 || !
out
 || !
out_Àn
)

318  -
EINVAL
;

319 i‡(
fmt_sz_out
)

320 
fmt_ªm
 = *
fmt_sz_out
;

322 
beg
 = 
ö
;

324 
fûÀd
;

325 
∑r£d_fmt
;

327 
fûÀd
 = 0;

328 
∑r£d_fmt
 = 0;

330 *
beg
) {

332 
íd
 = 
	`∑r£_fûe
(
beg
, 
out
, 
out_Àn
, &
fûÀd
);

335 
íd
 = 
	`∑r£_°rög
(
beg
, 
out
, 
out_Àn
, &
fûÀd
);

338 
íd
 = 
	`∑r£_f‹m©
(
beg
, 
out
, ouà- 
out_beg
, 
out_Àn
,

339 &
fûÀd
, 
fmt_desc
, 
fmt
, 
fmt_ªm
);

340 
∑r£d_fmt
 = 1;

343 
íd
 = 
	`∑r£_numbî
(
beg
, 
out
, 
out_Àn
, &
fûÀd
);

347 i‡(!
íd
)

348  -
EINVAL
;

350 i‡(
∑r£d_fmt
) {

351 
	`as£π
(
fmt_ªm
);

352 
fmt_ªm
--;

353 
fmt
++;

356 
	`as£π
(
íd
 - 
beg
 <
ö_Àn
);

357 
ö_Àn
 -
íd
 - 
beg
;

358 
beg
 = 
íd
;

360 
	`as£π
(
fûÀd
);

361 
	`as£π
(
fûÀd
 <
out_Àn
);

362 
out_Àn
 -
fûÀd
;

363 
out
 +
fûÀd
;

364 
tŸÆ
 +
fûÀd
;

366 } 
ö_Àn
);

368 i‡(
fmt_sz_out
)

369 *
fmt_sz_out
 -
fmt_ªm
;

370  
tŸÆ
;

371 
	}
}

378 
	$dup_∑âîn
(*
out
, 
out_Àn
, 
∑âîn_Àn
)

380 
À·
, 
Àn
, 
off
;

382 i‡(
out_Àn
 <
∑âîn_Àn
)

386 
off
 = 
∑âîn_Àn
;

387 
À·
 = (
out_Àn
 - 
off
);

388 
Àn
 = 
	`mö
(
À·
, 
off
);

391 
À·
) {

392 
	`mem˝y
(
out
 + 
off
, out, 
Àn
);

393 
À·
 -
Àn
;

394 
off
 <<= 1;

395 
Àn
 = 
	`mö
(
À·
, 
off
);

399 
	}
}

408 
	$˝y_∑âîn
(c⁄° *
∑âîn
, 
∑âîn_Àn
,

409 *
out
, 
out_Àn
)

411 
Àn
;

413 i‡(!
∑âîn
 || !
∑âîn_Àn
 || !
out
 || !
out_Àn
)

414  -
EINVAL
;

417 
Àn
 = 
	`mö
(
∑âîn_Àn
, 
out_Àn
);

418 
	`mem˝y
(
out
, 
∑âîn
, 
Àn
);

421  
	`dup_∑âîn
(
out
, 
out_Àn
, 
∑âîn_Àn
);

422 
	}
}

436 
	$cmp_∑âîn
(c⁄° *
∑âîn
, 
∑âîn_size
,

437 
off
, c⁄° *
buf
, 
Àn
)

439 
rc
;

440 
size
;

443 i‡(
Àn
 > 
∑âîn_size
) {

444 
rc
 = 
	`memcmp
(
buf
, bu‡+ 
∑âîn_size
, 
Àn
 -Öattern_size);

445 i‡(
rc
)

446  -
EILSEQ
;

449 i‡(
off
) {

450 
size
 = 
	`mö
(
Àn
, 
∑âîn_size
 - 
off
);

451 
rc
 = 
	`memcmp
(
buf
, 
∑âîn
 + 
off
, 
size
);

452 i‡(
rc
)

453  -
EILSEQ
;

454 
buf
 +
size
;

455 
Àn
 -
size
;

459 i‡(
Àn
) {

460 
size
 = 
	`mö
(
Àn
, (
off
 ? of‡: 
∑âîn_size
));

461 
rc
 = 
	`memcmp
(
buf
, 
∑âîn
, 
size
);

462 i‡(
rc
)

463  -
EILSEQ
;

467 
	}
}

477 
	$∑°e_f‹m©_ö∂a˚
(*
∑âîn
, 
∑âîn_Àn
,

478 
∑âîn_fmt
 *
fmt
, 
fmt_sz
,

479 *
¥iv
)

481 
i
, 
rc
;

482 
Àn
;

484 i‡(!
∑âîn
 || !
∑âîn_Àn
 || !
fmt
)

485  -
EINVAL
;

488 
i
 = 0; i < 
fmt_sz
; i++) {

489 
∑âîn_fmt
 *
f
;

491 
f
 = &
fmt
[
i
];

492 i‡(
∑âîn_Àn
 <
f
->
off
)

494 
Àn
 = 
	`mö
(
∑âîn_Àn
 - 
f
->
off
, f->
desc
->len);

495 
rc
 = 
f
->
desc
->
	`∑°e
(
∑âîn
 + f->
off
, 
Àn
, 
¥iv
);

496 i‡(
rc
)

497  
rc
;

501 
	}
}

511 
	$∑°e_f‹m©
(c⁄° *
∑âîn
, 
∑âîn_Àn
,

512 
∑âîn_fmt
 *
fmt
, 
fmt_sz
,

513 *
out
, 
out_Àn
, *
¥iv
)

515 
rc
;

516 
Àn
;

518 i‡(!
∑âîn
 || !
∑âîn_Àn
 || !
out
 || !
out_Àn
)

519  -
EINVAL
;

522 
Àn
 = 
	`mö
(
∑âîn_Àn
, 
out_Àn
);

523 
	`mem˝y
(
out
, 
∑âîn
, 
Àn
);

525 
rc
 = 
	`∑°e_f‹m©_ö∂a˚
(
out
, 
Àn
, 
fmt
, 
fmt_sz
, 
¥iv
);

526 i‡(
rc
)

527  
rc
;

530  
	`dup_∑âîn
(
out
, 
out_Àn
, 
∑âîn_Àn
);

531 
	}
}

	@lib/pattern.h

1 #i‚de‡
FIO_PARSE_PATTERN_H


2 
	#FIO_PARSE_PATTERN_H


	)

9 
	s∑âîn_fmt_desc
 {

10 c⁄° *
	mfmt
;

11 
	mÀn
;

12 (*
	m∑°e
)(*
	mbuf
, 
	mÀn
, *
	m¥iv
);

19 
	s∑âîn_fmt
 {

20 
	moff
;

21 c⁄° 
∑âîn_fmt_desc
 *
	mdesc
;

24 
∑r£_™d_fûl_∑âîn
(c⁄° *
ö
, 
ö_Àn
,

25 *
out
, 
out_Àn
,

26 c⁄° 
∑âîn_fmt_desc
 *
fmt_desc
,

27 
∑âîn_fmt
 *
fmt
,

28 *
fmt_sz_out
);

30 
∑°e_f‹m©_ö∂a˚
(*
∑âîn
, 
∑âîn_Àn
,

31 
∑âîn_fmt
 *
fmt
, 
fmt_sz
,

32 *
¥iv
);

34 
∑°e_f‹m©
(c⁄° *
∑âîn
, 
∑âîn_Àn
,

35 
∑âîn_fmt
 *
fmt
, 
fmt_sz
,

36 *
out
, 
out_Àn
, *
¥iv
);

38 
˝y_∑âîn
(c⁄° *
∑âîn
, 
∑âîn_Àn
,

39 *
out
, 
out_Àn
);

41 
cmp_∑âîn
(c⁄° *
∑âîn
, 
∑âîn_size
,

42 
off
, c⁄° *
buf
, 
Àn
);

	@lib/pow2.h

1 #i‚de‡
FIO_POW2_H


2 
	#FIO_POW2_H


	)

4 
	~<öây≥s.h
>

5 
	~"ty≥s.h
"

7 
ölöe
 
boﬁ
 
	$is_powî_of_2
(
uöt64_t
 
vÆ
)

9  (
vÆ
 != 0 && ((val & (val - 1)) == 0));

10 
	}
}

	@lib/prio_tree.c

14 
	~<as£π.h
>

15 
	~<°dlib.h
>

16 
	~<limôs.h
>

18 
	~"../compûî/compûî.h
"

19 
	~"¥io_åì.h
"

45 
	$gë_ödex
(c⁄° 
¥io_åì_node
 *
node
,

46 *
ødix
, *
hóp
)

48 *
ødix
 = 
node
->
°¨t
;

49 *
hóp
 = 
node
->
œ°
;

50 
	}
}

52 
	gödex_bôs_to_maxödex
[
BITS_PER_LONG
];

54 
fio_öô
 
	$¥io_åì_öô
()

56 
i
;

58 
i
 = 0; i < 
	`FIO_ARRAY_SIZE
(
ödex_bôs_to_maxödex
) - 1; i++)

59 
ödex_bôs_to_maxödex
[
i
] = (1UL << (i + 1)) - 1;

60 
ödex_bôs_to_maxödex
[
	`FIO_ARRAY_SIZE
(index_bits_to_maxindex) - 1] = ~0UL;

61 
	}
}

66 
ölöe
 
	$¥io_åì_maxödex
(
bôs
)

68  
ödex_bôs_to_maxödex
[
bôs
 - 1];

69 
	}
}

77 
¥io_åì_node
 *
	$¥io_åì_ex∑nd
(
¥io_åì_roŸ
 *
roŸ
,

78 
¥io_åì_node
 *
node
, 
max_hóp_ödex
)

80 
¥io_åì_node
 *
fú°
 = 
NULL
, *
¥ev
, *
œ°
 = NULL;

82 i‡(
max_hóp_ödex
 > 
	`¥io_åì_maxödex
(
roŸ
->
ödex_bôs
))

83 
roŸ
->
ödex_bôs
++;

85 
max_hóp_ödex
 > 
	`¥io_åì_maxödex
(
roŸ
->
ödex_bôs
)) {

86 
roŸ
->
ödex_bôs
++;

88 i‡(
	`¥io_åì_em±y
(
roŸ
))

91 i‡(
fú°
 =
NULL
) {

92 
fú°
 = 
roŸ
->
¥io_åì_node
;

93 
	`¥io_åì_ªmove
(
roŸ
,ÑoŸ->
¥io_åì_node
);

94 
	`INIT_PRIO_TREE_NODE
(
fú°
);

95 
œ°
 = 
fú°
;

97 
¥ev
 = 
œ°
;

98 
œ°
 = 
roŸ
->
¥io_åì_node
;

99 
	`¥io_åì_ªmove
(
roŸ
,ÑoŸ->
¥io_åì_node
);

100 
	`INIT_PRIO_TREE_NODE
(
œ°
);

101 
¥ev
->
À·
 = 
œ°
;

102 
œ°
->
∑ª¡
 = 
¥ev
;

106 
	`INIT_PRIO_TREE_NODE
(
node
);

108 i‡(
fú°
) {

109 
node
->
À·
 = 
fú°
;

110 
fú°
->
∑ª¡
 = 
node
;

112 
œ°
 = 
node
;

114 i‡(!
	`¥io_åì_em±y
(
roŸ
)) {

115 
œ°
->
À·
 = 
roŸ
->
¥io_åì_node
;

116 
œ°
->
À·
->
∑ª¡
 =Üast;

119 
roŸ
->
¥io_åì_node
 = 
node
;

120  
node
;

121 
	}
}

126 
¥io_åì_node
 *
	$¥io_åì_ª∂a˚
(
¥io_åì_roŸ
 *
roŸ
,

127 
¥io_åì_node
 *
ﬁd
, ¥io_åì_nodê*
node
)

129 
	`INIT_PRIO_TREE_NODE
(
node
);

131 i‡(
	`¥io_åì_roŸ
(
ﬁd
)) {

132 
	`as£π
(
roŸ
->
¥io_åì_node
 =
ﬁd
);

137 
node
->
∑ª¡
 =Çode;

138 
roŸ
->
¥io_åì_node
 = 
node
;

140 
node
->
∑ª¡
 = 
ﬁd
->parent;

141 i‡(
ﬁd
->
∑ª¡
->
À·
 == old)

142 
ﬁd
->
∑ª¡
->
À·
 = 
node
;

144 
ﬁd
->
∑ª¡
->
right
 = 
node
;

147 i‡(!
	`¥io_åì_À·_em±y
(
ﬁd
)) {

148 
node
->
À·
 = 
ﬁd
->left;

149 
ﬁd
->
À·
->
∑ª¡
 = 
node
;

152 i‡(!
	`¥io_åì_right_em±y
(
ﬁd
)) {

153 
node
->
right
 = 
ﬁd
->right;

154 
ﬁd
->
right
->
∑ª¡
 = 
node
;

157  
ﬁd
;

158 
	}
}

170 
¥io_åì_node
 *
	$¥io_åì_ö£π
(
¥io_åì_roŸ
 *
roŸ
,

171 
¥io_åì_node
 *
node
)

173 
¥io_åì_node
 *
cur
, *
ªs
 = 
node
;

174 
ødix_ödex
, 
hóp_ödex
;

175 
r_ödex
, 
h_ödex
, 
ödex
, 
mask
;

176 
size_Êag
 = 0;

178 
	`gë_ödex
(
node
, &
ødix_ödex
, &
hóp_ödex
);

180 i‡(
	`¥io_åì_em±y
(
roŸ
) ||

181 
hóp_ödex
 > 
	`¥io_åì_maxödex
(
roŸ
->
ödex_bôs
))

182  
	`¥io_åì_ex∑nd
(
roŸ
, 
node
, 
hóp_ödex
);

184 
cur
 = 
roŸ
->
¥io_åì_node
;

185 
mask
 = 1UL << (
roŸ
->
ödex_bôs
 - 1);

187 
mask
) {

188 
	`gë_ödex
(
cur
, &
r_ödex
, &
h_ödex
);

190 i‡(
r_ödex
 =
ødix_ödex
 && 
h_ödex
 =
hóp_ödex
)

191  
cur
;

193 i‡(
h_ödex
 < 
hóp_ödex
 ||

194 (
h_ödex
 =
hóp_ödex
 && 
r_ödex
 > 
ødix_ödex
)) {

195 
¥io_åì_node
 *
tmp
 = 
node
;

196 
node
 = 
	`¥io_åì_ª∂a˚
(
roŸ
, 
cur
,Çode);

197 
cur
 = 
tmp
;

199 
ödex
 = 
r_ödex
;

200 
r_ödex
 = 
ødix_ödex
;

201 
ødix_ödex
 = 
ödex
;

202 
ödex
 = 
h_ödex
;

203 
h_ödex
 = 
hóp_ödex
;

204 
hóp_ödex
 = 
ödex
;

207 i‡(
size_Êag
)

208 
ödex
 = 
hóp_ödex
 - 
ødix_ödex
;

210 
ödex
 = 
ødix_ödex
;

212 i‡(
ödex
 & 
mask
) {

213 i‡(
	`¥io_åì_right_em±y
(
cur
)) {

214 
	`INIT_PRIO_TREE_NODE
(
node
);

215 
cur
->
right
 = 
node
;

216 
node
->
∑ª¡
 = 
cur
;

217  
ªs
;

219 
cur
 = cur->
right
;

221 i‡(
	`¥io_åì_À·_em±y
(
cur
)) {

222 
	`INIT_PRIO_TREE_NODE
(
node
);

223 
cur
->
À·
 = 
node
;

224 
node
->
∑ª¡
 = 
cur
;

225  
ªs
;

227 
cur
 = cur->
À·
;

230 
mask
 >>= 1;

232 i‡(!
mask
) {

233 
mask
 = 1UL << (
BITS_PER_LONG
 - 1);

234 
size_Êag
 = 1;

238 
	`as£π
(0);

239  
NULL
;

240 
	}
}

247 
	$¥io_åì_ªmove
(
¥io_åì_roŸ
 *
roŸ
, 
¥io_åì_node
 *
node
)

249 
¥io_åì_node
 *
cur
;

250 
r_ödex
, 
h_ödex_right
, 
h_ödex_À·
;

252 
cur
 = 
node
;

254 !
	`¥io_åì_À·_em±y
(
cur
Ë|| !
	`¥io_åì_right_em±y
(cur)) {

255 i‡(!
	`¥io_åì_À·_em±y
(
cur
))

256 
	`gë_ödex
(
cur
->
À·
, &
r_ödex
, &
h_ödex_À·
);

258 
cur
 = cur->
right
;

262 i‡(!
	`¥io_åì_right_em±y
(
cur
))

263 
	`gë_ödex
(
cur
->
right
, &
r_ödex
, &
h_ödex_right
);

265 
cur
 = cur->
À·
;

270 i‡(
h_ödex_À·
 >
h_ödex_right
)

271 
cur
 = cur->
À·
;

273 
cur
 = cur->
right
;

276 i‡(
	`¥io_åì_roŸ
(
cur
)) {

277 
	`as£π
(
roŸ
->
¥io_åì_node
 =
cur
);

278 
	`INIT_PRIO_TREE_ROOT
(
roŸ
);

282 i‡(
cur
->
∑ª¡
->
right
 == cur)

283 
cur
->
∑ª¡
->
right
 = cur->parent;

285 
cur
->
∑ª¡
->
À·
 = cur->parent;

287 
cur
 !
node
)

288 
cur
 = 
	`¥io_åì_ª∂a˚
(
roŸ
, cur->
∑ª¡
, cur);

289 
	}
}

299 
¥io_åì_node
 *
	$¥io_åì_À·
(
¥io_åì_ôî
 *
ôî
,

300 *
r_ödex
, *
h_ödex
)

302 i‡(
	`¥io_åì_À·_em±y
(
ôî
->
cur
))

303  
NULL
;

305 
	`gë_ödex
(
ôî
->
cur
->
À·
, 
r_ödex
, 
h_ödex
);

307 i‡(
ôî
->
r_ödex
 <*
h_ödex
) {

308 
ôî
->
cur
 = iãr->cur->
À·
;

309 
ôî
->
mask
 >>= 1;

310 i‡(
ôî
->
mask
) {

311 i‡(
ôî
->
size_Àvñ
)

312 
ôî
->
size_Àvñ
++;

314 i‡(
ôî
->
size_Àvñ
) {

315 
	`as£π
(
	`¥io_åì_À·_em±y
(
ôî
->
cur
));

316 
	`as£π
(
	`¥io_åì_right_em±y
(
ôî
->
cur
));

317 
ôî
->
size_Àvñ
++;

318 
ôî
->
mask
 = 
ULONG_MAX
;

320 
ôî
->
size_Àvñ
 = 1;

321 
ôî
->
mask
 = 1UL << (
BITS_PER_LONG
 - 1);

324  
ôî
->
cur
;

327  
NULL
;

328 
	}
}

330 
¥io_åì_node
 *
	$¥io_åì_right
(
¥io_åì_ôî
 *
ôî
,

331 *
r_ödex
, *
h_ödex
)

333 
vÆue
;

335 i‡(
	`¥io_åì_right_em±y
(
ôî
->
cur
))

336  
NULL
;

338 i‡(
ôî
->
size_Àvñ
)

339 
vÆue
 = 
ôî
->value;

341 
vÆue
 = 
ôî
->vÆuê| iãr->
mask
;

343 i‡(
ôî
->
h_ödex
 < 
vÆue
)

344  
NULL
;

346 
	`gë_ödex
(
ôî
->
cur
->
right
, 
r_ödex
, 
h_ödex
);

348 i‡(
ôî
->
r_ödex
 <*
h_ödex
) {

349 
ôî
->
cur
 = iãr->cur->
right
;

350 
ôî
->
mask
 >>= 1;

351 
ôî
->
vÆue
 = value;

352 i‡(
ôî
->
mask
) {

353 i‡(
ôî
->
size_Àvñ
)

354 
ôî
->
size_Àvñ
++;

356 i‡(
ôî
->
size_Àvñ
) {

357 
	`as£π
(
	`¥io_åì_À·_em±y
(
ôî
->
cur
));

358 
	`as£π
(
	`¥io_åì_right_em±y
(
ôî
->
cur
));

359 
ôî
->
size_Àvñ
++;

360 
ôî
->
mask
 = 
ULONG_MAX
;

362 
ôî
->
size_Àvñ
 = 1;

363 
ôî
->
mask
 = 1UL << (
BITS_PER_LONG
 - 1);

366  
ôî
->
cur
;

369  
NULL
;

370 
	}
}

372 
¥io_åì_node
 *
	$¥io_åì_∑ª¡
(
¥io_åì_ôî
 *
ôî
)

374 
ôî
->
cur
 = iãr->cur->
∑ª¡
;

375 i‡(
ôî
->
mask
 =
ULONG_MAX
)

376 
ôî
->
mask
 = 1UL;

377 i‡(
ôî
->
size_Àvñ
 == 1)

378 
ôî
->
mask
 = 1UL;

380 
ôî
->
mask
 <<= 1;

381 i‡(
ôî
->
size_Àvñ
)

382 
ôî
->
size_Àvñ
--;

383 i‡(!
ôî
->
size_Àvñ
 && (ôî->
vÆue
 & iãr->
mask
))

384 
ôî
->
vÆue
 ^ôî->
mask
;

385  
ôî
->
cur
;

386 
	}
}

388 
ölöe
 
	$ovîœp
(
¥io_åì_ôî
 *
ôî
,

389 
r_ödex
, 
h_ödex
)

391  
ôî
->
h_ödex
 >
r_ödex
 && iter->r_index <= h_index;

392 
	}
}

401 
¥io_åì_node
 *
	$¥io_åì_fú°
(
¥io_åì_ôî
 *
ôî
)

403 
¥io_åì_roŸ
 *
roŸ
;

404 
r_ödex
, 
h_ödex
;

406 
	`INIT_PRIO_TREE_ITER
(
ôî
);

408 
roŸ
 = 
ôî
->root;

409 i‡(
	`¥io_åì_em±y
(
roŸ
))

410  
NULL
;

412 
	`gë_ödex
(
roŸ
->
¥io_åì_node
, &
r_ödex
, &
h_ödex
);

414 i‡(
ôî
->
r_ödex
 > 
h_ödex
)

415  
NULL
;

417 
ôî
->
mask
 = 1UL << (
roŸ
->
ödex_bôs
 - 1);

418 
ôî
->
cur
 = 
roŸ
->
¥io_åì_node
;

421 i‡(
	`ovîœp
(
ôî
, 
r_ödex
, 
h_ödex
))

422  
ôî
->
cur
;

424 i‡(
	`¥io_åì_À·
(
ôî
, &
r_ödex
, &
h_ödex
))

427 i‡(
	`¥io_åì_right
(
ôî
, &
r_ödex
, &
h_ödex
))

432  
NULL
;

433 
	}
}

440 
¥io_åì_node
 *
	$¥io_åì_√xt
(
¥io_åì_ôî
 *
ôî
)

442 
r_ödex
, 
h_ödex
;

444 i‡(
ôî
->
cur
 =
NULL
)

445  
	`¥io_åì_fú°
(
ôî
);

447 
ª≥©
:

448 
	`¥io_åì_À·
(
ôî
, &
r_ödex
, &
h_ödex
))

449 i‡(
	`ovîœp
(
ôî
, 
r_ödex
, 
h_ödex
))

450  
ôî
->
cur
;

452 !
	`¥io_åì_right
(
ôî
, &
r_ödex
, &
h_ödex
)) {

453 !
	`¥io_åì_roŸ
(
ôî
->
cur
) &&

454 
ôî
->
cur
->
∑ª¡
->
right
 == iter->cur)

455 
	`¥io_åì_∑ª¡
(
ôî
);

457 i‡(
	`¥io_åì_roŸ
(
ôî
->
cur
))

458  
NULL
;

460 
	`¥io_åì_∑ª¡
(
ôî
);

463 i‡(
	`ovîœp
(
ôî
, 
r_ödex
, 
h_ödex
))

464  
ôî
->
cur
;

466 
ª≥©
;

467 
	}
}

	@lib/prio_tree.h

1 #i‚de‡
_LINUX_PRIO_TREE_H


2 
	#_LINUX_PRIO_TREE_H


	)

4 
	~<öây≥s.h
>

6 
	s¥io_åì_node
 {

7 
¥io_åì_node
 *
	mÀ·
;

8 
¥io_åì_node
 *
	mright
;

9 
¥io_åì_node
 *
	m∑ª¡
;

10 
uöt64_t
 
	m°¨t
;

11 
uöt64_t
 
	mœ°
;

14 
	s¥io_åì_roŸ
 {

15 
¥io_åì_node
 *
	m¥io_åì_node
;

16 
	mödex_bôs
;

19 
	s¥io_åì_ôî
 {

20 
¥io_åì_node
 *
	mcur
;

21 
	mmask
;

22 
	mvÆue
;

23 
	msize_Àvñ
;

25 
¥io_åì_roŸ
 *
	mroŸ
;

26 
uöt64_t
 
	mr_ödex
;

27 
uöt64_t
 
	mh_ödex
;

30 
ölöe
 
	$¥io_åì_ôî_öô
(
¥io_åì_ôî
 *
ôî
,

31 
¥io_åì_roŸ
 *
roŸ
, 
uöt64_t
 
r_ödex
, uöt64_à
h_ödex
)

33 
ôî
->
roŸ
 =Ñoot;

34 
ôî
->
r_ödex
 =Ñ_index;

35 
ôî
->
h_ödex
 = h_index;

36 
ôî
->
cur
 = 
NULL
;

37 
	}
}

39 
	#INIT_PRIO_TREE_ROOT
(
±r
) \

41 (
±r
)->
¥io_åì_node
 = 
NULL
; \

42 (
±r
)->
ödex_bôs
 = 1; \

43 } 0)

	)

45 
	#INIT_PRIO_TREE_NODE
(
±r
) \

47 (
±r
)->
À·
 = (±r)->
right
 = (±r)->
∑ª¡
 = (ptr); \

48 } 0)

	)

50 
	#INIT_PRIO_TREE_ITER
(
±r
) \

52 (
±r
)->
cur
 = 
NULL
; \

53 (
±r
)->
mask
 = 0UL; \

54 (
±r
)->
vÆue
 = 0UL; \

55 (
±r
)->
size_Àvñ
 = 0; \

56 } 0)

	)

58 
	#¥io_åì_íåy
(
±r
, 
ty≥
, 
membî
) \

59 ((
ty≥
 *)((*)(
±r
)-()(&(—y≥ *)0)->
membî
)))

	)

61 
ölöe
 
	$¥io_åì_em±y
(c⁄° 
¥io_åì_roŸ
 *
roŸ
)

63  
roŸ
->
¥io_åì_node
 =
NULL
;

64 
	}
}

66 
ölöe
 
	$¥io_åì_roŸ
(c⁄° 
¥io_åì_node
 *
node
)

68  
node
->
∑ª¡
 ==Çode;

69 
	}
}

71 
ölöe
 
	$¥io_åì_À·_em±y
(c⁄° 
¥io_åì_node
 *
node
)

73  
node
->
À·
 ==Çode;

74 
	}
}

76 
ölöe
 
	$¥io_åì_right_em±y
(c⁄° 
¥io_åì_node
 *
node
)

78  
node
->
right
 ==Çode;

79 
	}
}

82 
¥io_åì_node
 *
¥io_åì_ª∂a˚
(
¥io_åì_roŸ
 *
roŸ
,

83 
¥io_åì_node
 *
ﬁd
, ¥io_åì_nodê*
node
);

84 
¥io_åì_node
 *
¥io_åì_ö£π
(
¥io_åì_roŸ
 *
roŸ
,

85 
¥io_åì_node
 *
node
);

86 
¥io_åì_ªmove
(
¥io_åì_roŸ
 *
roŸ
, 
¥io_åì_node
 *
node
);

87 
¥io_åì_node
 *
¥io_åì_√xt
(
¥io_åì_ôî
 *
ôî
);

	@lib/rand.c

36 
	~<°rög.h
>

37 
	~"ønd.h
"

38 
	~"∑âîn.h
"

39 
	~"../hash.h
"

41 
	g¨ch_øndom
;

43 
ölöe
 
uöt64_t
 
	$__£ed
(
uöt64_t
 
x
, uöt64_à
m
)

45  (
x
 < 
m
) ? x + m : x;

46 
	}
}

48 
	$__öô_ønd32
(
èus88_°©e
 *
°©e
, 
£ed
)

50 
¸™ks
 = 6;

52 
	#LCG
(
x
, 
£ed
Ë((xË* 69069 ^ (£ed))

	)

54 
°©e
->
s1
 = 
	`__£ed
(
	`LCG
((2^31Ë+ (2^17Ë+ (2^7), 
£ed
), 1);

55 
°©e
->
s2
 = 
	`__£ed
(
	`LCG
(°©e->
s1
, 
£ed
), 7);

56 
°©e
->
s3
 = 
	`__£ed
(
	`LCG
(°©e->
s2
, 
£ed
), 15);

58 
¸™ks
--)

59 
	`__ønd32
(
°©e
);

60 
	}
}

62 
	$__öô_ønd64
(
èus258_°©e
 *
°©e
, 
uöt64_t
 
£ed
)

64 
¸™ks
 = 6;

66 
	#LCG64
(
x
, 
£ed
Ë((xË* 6906969069ULL ^ (£ed))

	)

68 
°©e
->
s1
 = 
	`__£ed
(
	`LCG64
((2^31Ë+ (2^17Ë+ (2^7), 
£ed
), 1);

69 
°©e
->
s2
 = 
	`__£ed
(
	`LCG64
(°©e->
s1
, 
£ed
), 7);

70 
°©e
->
s3
 = 
	`__£ed
(
	`LCG64
(°©e->
s2
, 
£ed
), 15);

71 
°©e
->
s4
 = 
	`__£ed
(
	`LCG64
(°©e->
s3
, 
£ed
), 33);

72 
°©e
->
s5
 = 
	`__£ed
(
	`LCG64
(°©e->
s4
, 
£ed
), 49);

74 
¸™ks
--)

75 
	`__ønd64
(
°©e
);

76 
	}
}

78 
	$öô_ønd
(
‰™d_°©e
 *
°©e
, 
boﬁ
 
u£64
)

80 
°©e
->
u£64
 = use64;

82 i‡(!
u£64
)

83 
	`__öô_ønd32
(&
°©e
->
°©e32
, 1);

85 
	`__öô_ønd64
(&
°©e
->
°©e64
, 1);

86 
	}
}

88 
	$öô_ønd_£ed
(
‰™d_°©e
 *
°©e
, 
uöt64_t
 
£ed
, 
boﬁ
 
u£64
)

90 
°©e
->
u£64
 = use64;

92 i‡(!
u£64
)

93 
	`__öô_ønd32
(&
°©e
->
°©e32
, (Ë
£ed
);

95 
	`__öô_ønd64
(&
°©e
->
°©e64
, 
£ed
);

96 
	}
}

98 
	$__fûl_øndom_buf_smÆl
(*
buf
, 
Àn
, 
uöt64_t
 
£ed
)

100 
uöt64_t
 *
b
 = 
buf
;

101 
uöt64_t
 *
e
 = 
b
 + 
Àn
 / (*b);

102 
ª°
 = 
Àn
 % (*
b
);

104 ; 
b
 !
e
; ++b) {

105 *
b
 = 
£ed
;

106 
£ed
 = 
	`__hash_u64
(seed);

109 i‡(
	`fio_u∆ikñy
(
ª°
))

110 
	`__buûtö_mem˝y
(
e
, &
£ed
, 
ª°
);

111 
	}
}

113 
	$__fûl_øndom_buf
(*
buf
, 
Àn
, 
uöt64_t
 
£ed
)

115 
uöt64_t
 
¥ime
[] = {1, 2, 3, 5, 7, 11, 13, 17,

117 
uöt64_t
 *
b
, *
e
, 
s
[
CONFIG_SEED_BUCKETS
];

118 
ª°
;

119 
p
;

124 
ª°
 = (
Àn
 / (*
b
Ë/ 
CONFIG_SEED_BUCKETS
) * CONFIG_SEED_BUCKETS;

126 
b
 = 
buf
;

127 
e
 = 
b
 + 
ª°
;

129 
ª°
 = 
Àn
 - (ª° * (*
b
));

131 
p
 = 0;Ö < 
CONFIG_SEED_BUCKETS
;Ö++)

132 
s
[
p
] = 
£ed
 * 
¥ime
[p];

134 ; 
b
 !
e
; b +
CONFIG_SEED_BUCKETS
) {

135 
p
 = 0;Ö < 
CONFIG_SEED_BUCKETS
; ++p) {

136 
b
[
p
] = 
s
[p];

137 
s
[
p
] = 
	`__hash_u64
(s[p]);

141 
	`__fûl_øndom_buf_smÆl
(
b
, 
ª°
, 
s
[0]);

142 
	}
}

144 
uöt64_t
 
	$fûl_øndom_buf
(
‰™d_°©e
 *
fs
, *
buf
,

145 
Àn
)

147 
uöt64_t
 
r
 = 
	`__gë_√xt_£ed
(
fs
);

149 
	`__fûl_øndom_buf
(
buf
, 
Àn
, 
r
);

150  
r
;

151 
	}
}

153 
	$__fûl_øndom_buf_≥r˚¡age
(
uöt64_t
 
£ed
, *
buf
,

154 
≥r˚¡age
,

155 
£gmít
, 
Àn
,

156 *
∑âîn
, 
pbyãs
)

158 
this_Àn
;

160 i‡(
≥r˚¡age
 == 100) {

161 i‡(
pbyãs
)

162 ()
	`˝y_∑âîn
(
∑âîn
, 
pbyãs
, 
buf
, 
Àn
);

164 
	`mem£t
(
buf
, 0, 
Àn
);

168 i‡(
£gmít
 > 
Àn
)

169 
£gmít
 = 
Àn
;

171 
Àn
) {

175 
this_Àn
 = (()
£gmít
 * (100 - 
≥r˚¡age
)) / 100;

176 i‡(
this_Àn
 > 
Àn
)

177 
this_Àn
 = 
Àn
;

179 
	`__fûl_øndom_buf
(
buf
, 
this_Àn
, 
£ed
);

181 
Àn
 -
this_Àn
;

182 i‡(!
Àn
)

184 
buf
 +
this_Àn
;

185 
this_Àn
 = 
£gmít
 -Åhis_len;

187 i‡(
this_Àn
 > 
Àn
)

188 
this_Àn
 = 
Àn
;

189 i‡(
Àn
 - 
this_Àn
 <= ())

190 
this_Àn
 = 
Àn
;

192 i‡(
pbyãs
)

193 ()
	`˝y_∑âîn
(
∑âîn
, 
pbyãs
, 
buf
, 
this_Àn
);

195 
	`mem£t
(
buf
, 0, 
this_Àn
);

197 
Àn
 -
this_Àn
;

198 
buf
 +
this_Àn
;

200 
	}
}

202 
uöt64_t
 
	$fûl_øndom_buf_≥r˚¡age
(
‰™d_°©e
 *
fs
, *
buf
,

203 
≥r˚¡age
,

204 
£gmít
, 
Àn
,

205 *
∑âîn
, 
pbyãs
)

207 
uöt64_t
 
r
 = 
	`__gë_√xt_£ed
(
fs
);

209 
	`__fûl_øndom_buf_≥r˚¡age
(
r
, 
buf
, 
≥r˚¡age
, 
£gmít
, 
Àn
,

210 
∑âîn
, 
pbyãs
);

211  
r
;

212 
	}
}

	@lib/rand.h

1 #i‚de‡
FIO_RAND_H


2 
	#FIO_RAND_H


	)

4 
	~<öây≥s.h
>

5 
	~<as£π.h
>

6 
	~"ty≥s.h
"

8 
	#FRAND32_MAX
 (-1U)

	)

9 
	#FRAND32_MAX_PLUS_ONE
 (1.0 * (1ULL << 32))

	)

10 
	#FRAND64_MAX
 (-1ULL)

	)

11 
	#FRAND64_MAX_PLUS_ONE
 (1.0 * (1ULL << 32Ë* (1ULL << 32))

	)

13 
	sèus88_°©e
 {

14 
	ms1
, 
	ms2
, 
	ms3
;

17 
	sèus258_°©e
 {

18 
uöt64_t
 
	ms1
, 
	ms2
, 
	ms3
, 
	ms4
, 
	ms5
;

21 
	s‰™d_°©e
 {

22 
	mu£64
;

24 
èus88_°©e
 
	m°©e32
;

25 
èus258_°©e
 
	m°©e64
;

29 
ölöe
 
uöt64_t
 
	$ønd_max
(
‰™d_°©e
 *
°©e
)

31 i‡(
°©e
->
u£64
)

32  
FRAND64_MAX
;

34  
FRAND32_MAX
;

35 
	}
}

37 
ölöe
 
	$__‰™d32_c›y
(
èus88_°©e
 *
d°
,

38 
èus88_°©e
 *
§c
)

40 
d°
->
s1
 = 
§c
->s1;

41 
d°
->
s2
 = 
§c
->s2;

42 
d°
->
s3
 = 
§c
->s3;

43 
	}
}

45 
ölöe
 
	$__‰™d64_c›y
(
èus258_°©e
 *
d°
,

46 
èus258_°©e
 *
§c
)

48 
d°
->
s1
 = 
§c
->s1;

49 
d°
->
s2
 = 
§c
->s2;

50 
d°
->
s3
 = 
§c
->s3;

51 
d°
->
s4
 = 
§c
->s4;

52 
d°
->
s5
 = 
§c
->s5;

53 
	}
}

55 
ölöe
 
	$‰™d_c›y
(
‰™d_°©e
 *
d°
, ‰™d_°©ê*
§c
)

57 i‡(
§c
->
u£64
)

58 
	`__‰™d64_c›y
(&
d°
->
°©e64
, &
§c
->state64);

60 
	`__‰™d32_c›y
(&
d°
->
°©e32
, &
§c
->state32);

62 
d°
->
u£64
 = 
§c
->use64;

63 
	}
}

65 
ölöe
 
	$__ønd32
(
èus88_°©e
 *
°©e
)

67 
	#TAUSWORTHE
(
s
,
a
,
b
,
c
,
d
Ë((s&c)<<dË^ (((†<<aË^ s)>>b)

	)

69 
°©e
->
s1
 = 
	`TAUSWORTHE
(state->s1, 13, 19, 4294967294UL, 12);

70 
°©e
->
s2
 = 
	`TAUSWORTHE
(state->s2, 2, 25, 4294967288UL, 4);

71 
°©e
->
s3
 = 
	`TAUSWORTHE
(state->s3, 3, 11, 4294967280UL, 17);

73  (
°©e
->
s1
 ^ sèã->
s2
 ^ sèã->
s3
);

74 
	}
}

76 
ölöe
 
uöt64_t
 
	$__ønd64
(
èus258_°©e
 *
°©e
)

78 
uöt64_t
 
xvÆ
;

80 
xvÆ
 = ((
°©e
->
s1
 << 1) ^ state->s1) >> 53;

81 
°©e
->
s1
 = ((°©e->s1 & 18446744073709551614ULLË<< 10Ë^ 
xvÆ
;

83 
xvÆ
 = ((
°©e
->
s2
 << 24) ^ state->s2) >> 50;

84 
°©e
->
s2
 = ((°©e->s2 & 18446744073709551104ULLË<< 5Ë^ 
xvÆ
;

86 
xvÆ
 = ((
°©e
->
s3
 << 3) ^ state->s3) >> 23;

87 
°©e
->
s3
 = ((°©e->s3 & 18446744073709547520ULLË<< 29Ë^ 
xvÆ
;

89 
xvÆ
 = ((
°©e
->
s4
 << 5) ^ state->s4) >> 24;

90 
°©e
->
s4
 = ((°©e->s4 & 18446744073709420544ULLË<< 23Ë^ 
xvÆ
;

92 
xvÆ
 = ((
°©e
->
s5
 << 3) ^ state->s5) >> 33;

93 
°©e
->
s5
 = ((°©e->s5 & 18446744073701163008ULLË<< 8Ë^ 
xvÆ
;

95  (
°©e
->
s1
 ^ sèã->
s2
 ^ sèã->
s3
 ^ sèã->
s4
 ^ sèã->
s5
);

96 
	}
}

98 
ölöe
 
uöt64_t
 
	$__ønd
(
‰™d_°©e
 *
°©e
)

100 i‡(
°©e
->
u£64
)

101  
	`__ønd64
(&
°©e
->
°©e64
);

103  
	`__ønd32
(&
°©e
->
°©e32
);

104 
	}
}

106 
ölöe
 
	$__ønd_0_1
(
‰™d_°©e
 *
°©e
)

108 i‡(
°©e
->
u£64
) {

109 
uöt64_t
 
vÆ
 = 
	`__ønd64
(&
°©e
->
°©e64
);

111  (
vÆ
 + 1.0Ë/ 
FRAND64_MAX_PLUS_ONE
;

113 
uöt32_t
 
vÆ
 = 
	`__ønd32
(&
°©e
->
°©e32
);

115  (
vÆ
 + 1.0Ë/ 
FRAND32_MAX_PLUS_ONE
;

117 
	}
}

119 
ölöe
 
uöt32_t
 
	$ønd32_u±o
(
‰™d_°©e
 *
°©e
, 
uöt32_t
 
íd
)

121 
uöt32_t
 
r
;

123 
	`as£π
(!
°©e
->
u£64
);

125 
r
 = 
	`__ønd32
(&
°©e
->
°©e32
);

126 
íd
++;

127  (Ë(()
íd
 * (
r
 / 
FRAND32_MAX_PLUS_ONE
));

128 
	}
}

130 
ölöe
 
uöt64_t
 
	$ønd64_u±o
(
‰™d_°©e
 *
°©e
, 
uöt64_t
 
íd
)

132 
uöt64_t
 
r
;

134 
	`as£π
(
°©e
->
u£64
);

136 
r
 = 
	`__ønd64
(&
°©e
->
°©e64
);

137 
íd
++;

138  (
uöt64_t
Ë(()
íd
 * (
r
 / 
FRAND64_MAX_PLUS_ONE
));

139 
	}
}

144 
ölöe
 
uöt64_t
 
	$ønd_bëwìn
(
‰™d_°©e
 *
°©e
, 
uöt64_t
 
°¨t
,

145 
uöt64_t
 
íd
)

147 i‡(
°©e
->
u£64
)

148  
°¨t
 + 
	`ønd64_u±o
(
°©e
, 
íd
 - start);

150  
°¨t
 + 
	`ønd32_u±o
(
°©e
, 
íd
 - start);

151 
	}
}

153 
ölöe
 
uöt64_t
 
	$__gë_√xt_£ed
(
‰™d_°©e
 *
fs
)

155 
uöt64_t
 
r
 = 
	`__ønd
(
fs
);

158 
r
 *(Ë
	`__ønd
(
fs
);

160  
r
;

161 
	}
}

163 
öô_ønd
(
‰™d_°©e
 *, 
boﬁ
);

164 
öô_ønd_£ed
(
‰™d_°©e
 *, 
uöt64_t
 
£ed
, 
boﬁ
);

165 
__öô_ønd64
(
èus258_°©e
 *
°©e
, 
uöt64_t
 
£ed
);

166 
__fûl_øndom_buf
(*
buf
, 
Àn
, 
uöt64_t
 
£ed
);

167 
uöt64_t
 
fûl_øndom_buf
(
‰™d_°©e
 *, *
buf
, 
Àn
);

168 
__fûl_øndom_buf_≥r˚¡age
(
uöt64_t
, *, , , , *, );

169 
uöt64_t
 
fûl_øndom_buf_≥r˚¡age
(
‰™d_°©e
 *, *, , , , *, );

	@lib/rbtree.c

23 
	~"rbåì.h
"

25 
	$__rb_rŸ©e_À·
(
fio_rb_node
 *
node
, 
rb_roŸ
 *
roŸ
)

27 
fio_rb_node
 *
right
 = 
node
->
rb_right
;

28 
fio_rb_node
 *
∑ª¡
 = 
	`rb_∑ª¡
(
node
);

30 i‡((
node
->
rb_right
 = 
right
->
rb_À·
))

31 
	`rb_£t_∑ª¡
(
right
->
rb_À·
, 
node
);

32 
right
->
rb_À·
 = 
node
;

34 
	`rb_£t_∑ª¡
(
right
, 
∑ª¡
);

36 i‡(
∑ª¡
)

38 i‡(
node
 =
∑ª¡
->
rb_À·
)

39 
∑ª¡
->
rb_À·
 = 
right
;

41 
∑ª¡
->
rb_right
 = 
right
;

44 
roŸ
->
rb_node
 = 
right
;

45 
	`rb_£t_∑ª¡
(
node
, 
right
);

46 
	}
}

48 
	$__rb_rŸ©e_right
(
fio_rb_node
 *
node
, 
rb_roŸ
 *
roŸ
)

50 
fio_rb_node
 *
À·
 = 
node
->
rb_À·
;

51 
fio_rb_node
 *
∑ª¡
 = 
	`rb_∑ª¡
(
node
);

53 i‡((
node
->
rb_À·
 = 
À·
->
rb_right
))

54 
	`rb_£t_∑ª¡
(
À·
->
rb_right
, 
node
);

55 
À·
->
rb_right
 = 
node
;

57 
	`rb_£t_∑ª¡
(
À·
, 
∑ª¡
);

59 i‡(
∑ª¡
)

61 i‡(
node
 =
∑ª¡
->
rb_right
)

62 
∑ª¡
->
rb_right
 = 
À·
;

64 
∑ª¡
->
rb_À·
 = 
À·
;

67 
roŸ
->
rb_node
 = 
À·
;

68 
	`rb_£t_∑ª¡
(
node
, 
À·
);

69 
	}
}

71 
	$rb_ö£π_cﬁ‹
(
fio_rb_node
 *
node
, 
rb_roŸ
 *
roŸ
)

73 
fio_rb_node
 *
∑ª¡
, *
g∑ª¡
;

75 (
∑ª¡
 = 
	`rb_∑ª¡
(
node
)Ë&& 
	`rb_is_ªd
(parent))

77 
g∑ª¡
 = 
	`rb_∑ª¡
(
∑ª¡
);

79 i‡(
∑ª¡
 =
g∑ª¡
->
rb_À·
)

82 
fio_rb_node
 *
un˛e
 = 
g∑ª¡
->
rb_right
;

83 i‡(
un˛e
 && 
	`rb_is_ªd
(uncle))

85 
	`rb_£t_bœck
(
un˛e
);

86 
	`rb_£t_bœck
(
∑ª¡
);

87 
	`rb_£t_ªd
(
g∑ª¡
);

88 
node
 = 
g∑ª¡
;

93 i‡(
∑ª¡
->
rb_right
 =
node
)

95 
fio_rb_node
 *
tmp
;

96 
	`__rb_rŸ©e_À·
(
∑ª¡
, 
roŸ
);

97 
tmp
 = 
∑ª¡
;

98 
∑ª¡
 = 
node
;

99 
node
 = 
tmp
;

102 
	`rb_£t_bœck
(
∑ª¡
);

103 
	`rb_£t_ªd
(
g∑ª¡
);

104 
	`__rb_rŸ©e_right
(
g∑ª¡
, 
roŸ
);

107 
fio_rb_node
 *
un˛e
 = 
g∑ª¡
->
rb_À·
;

108 i‡(
un˛e
 && 
	`rb_is_ªd
(uncle))

110 
	`rb_£t_bœck
(
un˛e
);

111 
	`rb_£t_bœck
(
∑ª¡
);

112 
	`rb_£t_ªd
(
g∑ª¡
);

113 
node
 = 
g∑ª¡
;

118 i‡(
∑ª¡
->
rb_À·
 =
node
)

120 
fio_rb_node
 *
tmp
;

121 
	`__rb_rŸ©e_right
(
∑ª¡
, 
roŸ
);

122 
tmp
 = 
∑ª¡
;

123 
∑ª¡
 = 
node
;

124 
node
 = 
tmp
;

127 
	`rb_£t_bœck
(
∑ª¡
);

128 
	`rb_£t_ªd
(
g∑ª¡
);

129 
	`__rb_rŸ©e_À·
(
g∑ª¡
, 
roŸ
);

133 
	`rb_£t_bœck
(
roŸ
->
rb_node
);

134 
	}
}

136 
	$__rb_îa£_cﬁ‹
(
fio_rb_node
 *
node
,

137 
fio_rb_node
 *
∑ª¡
,

138 
rb_roŸ
 *
roŸ
)

140 
fio_rb_node
 *
Ÿhî
;

142 (!
node
 || 
	`rb_is_bœck
“ode)Ë&&Çodê!
roŸ
->
rb_node
)

144 i‡(
∑ª¡
->
rb_À·
 =
node
)

146 
Ÿhî
 = 
∑ª¡
->
rb_right
;

147 i‡(
	`rb_is_ªd
(
Ÿhî
))

149 
	`rb_£t_bœck
(
Ÿhî
);

150 
	`rb_£t_ªd
(
∑ª¡
);

151 
	`__rb_rŸ©e_À·
(
∑ª¡
, 
roŸ
);

152 
Ÿhî
 = 
∑ª¡
->
rb_right
;

154 i‡((!
Ÿhî
->
rb_À·
 || 
	`rb_is_bœck
(other->rb_left)) &&

155 (!
Ÿhî
->
rb_right
 || 
	`rb_is_bœck
(other->rb_right)))

157 
	`rb_£t_ªd
(
Ÿhî
);

158 
node
 = 
∑ª¡
;

159 
∑ª¡
 = 
	`rb_∑ª¡
(
node
);

163 i‡(!
Ÿhî
->
rb_right
 || 
	`rb_is_bœck
(other->rb_right))

165 
fio_rb_node
 *
o_À·
;

166 i‡((
o_À·
 = 
Ÿhî
->
rb_À·
))

167 
	`rb_£t_bœck
(
o_À·
);

168 
	`rb_£t_ªd
(
Ÿhî
);

169 
	`__rb_rŸ©e_right
(
Ÿhî
, 
roŸ
);

170 
Ÿhî
 = 
∑ª¡
->
rb_right
;

172 
	`rb_£t_cﬁ‹
(
Ÿhî
, 
	`rb_cﬁ‹
(
∑ª¡
));

173 
	`rb_£t_bœck
(
∑ª¡
);

174 i‡(
Ÿhî
->
rb_right
)

175 
	`rb_£t_bœck
(
Ÿhî
->
rb_right
);

176 
	`__rb_rŸ©e_À·
(
∑ª¡
, 
roŸ
);

177 
node
 = 
roŸ
->
rb_node
;

183 
Ÿhî
 = 
∑ª¡
->
rb_À·
;

184 i‡(
	`rb_is_ªd
(
Ÿhî
))

186 
	`rb_£t_bœck
(
Ÿhî
);

187 
	`rb_£t_ªd
(
∑ª¡
);

188 
	`__rb_rŸ©e_right
(
∑ª¡
, 
roŸ
);

189 
Ÿhî
 = 
∑ª¡
->
rb_À·
;

191 i‡((!
Ÿhî
->
rb_À·
 || 
	`rb_is_bœck
(other->rb_left)) &&

192 (!
Ÿhî
->
rb_right
 || 
	`rb_is_bœck
(other->rb_right)))

194 
	`rb_£t_ªd
(
Ÿhî
);

195 
node
 = 
∑ª¡
;

196 
∑ª¡
 = 
	`rb_∑ª¡
(
node
);

200 i‡(!
Ÿhî
->
rb_À·
 || 
	`rb_is_bœck
(other->rb_left))

202 
fio_rb_node
 *
o_right
;

203 i‡((
o_right
 = 
Ÿhî
->
rb_right
))

204 
	`rb_£t_bœck
(
o_right
);

205 
	`rb_£t_ªd
(
Ÿhî
);

206 
	`__rb_rŸ©e_À·
(
Ÿhî
, 
roŸ
);

207 
Ÿhî
 = 
∑ª¡
->
rb_À·
;

209 
	`rb_£t_cﬁ‹
(
Ÿhî
, 
	`rb_cﬁ‹
(
∑ª¡
));

210 
	`rb_£t_bœck
(
∑ª¡
);

211 i‡(
Ÿhî
->
rb_À·
)

212 
	`rb_£t_bœck
(
Ÿhî
->
rb_À·
);

213 
	`__rb_rŸ©e_right
(
∑ª¡
, 
roŸ
);

214 
node
 = 
roŸ
->
rb_node
;

219 i‡(
node
)

220 
	`rb_£t_bœck
(
node
);

221 
	}
}

223 
	$rb_îa£
(
fio_rb_node
 *
node
, 
rb_roŸ
 *
roŸ
)

225 
fio_rb_node
 *
chûd
, *
∑ª¡
;

226 
cﬁ‹
;

228 i‡(!
node
->
rb_À·
)

229 
chûd
 = 
node
->
rb_right
;

230 i‡(!
node
->
rb_right
)

231 
chûd
 = 
node
->
rb_À·
;

234 
fio_rb_node
 *
ﬁd
 = 
node
, *
À·
;

236 
node
 =Çode->
rb_right
;

237 (
À·
 = 
node
->
rb_À·
Ë!
NULL
)

238 
node
 = 
À·
;

239 
chûd
 = 
node
->
rb_right
;

240 
∑ª¡
 = 
	`rb_∑ª¡
(
node
);

241 
cﬁ‹
 = 
	`rb_cﬁ‹
(
node
);

243 i‡(
chûd
)

244 
	`rb_£t_∑ª¡
(
chûd
, 
∑ª¡
);

245 i‡(
∑ª¡
 =
ﬁd
) {

246 
∑ª¡
->
rb_right
 = 
chûd
;

247 
∑ª¡
 = 
node
;

249 
∑ª¡
->
rb_À·
 = 
chûd
;

251 
node
->
rb_∑ª¡_cﬁ‹
 = 
ﬁd
->rb_parent_color;

252 
node
->
rb_right
 = 
ﬁd
->rb_right;

253 
node
->
rb_À·
 = 
ﬁd
->rb_left;

255 i‡(
	`rb_∑ª¡
(
ﬁd
))

257 i‡(
	`rb_∑ª¡
(
ﬁd
)->
rb_À·
 == old)

258 
	`rb_∑ª¡
(
ﬁd
)->
rb_À·
 = 
node
;

260 
	`rb_∑ª¡
(
ﬁd
)->
rb_right
 = 
node
;

262 
roŸ
->
rb_node
 = 
node
;

264 
	`rb_£t_∑ª¡
(
ﬁd
->
rb_À·
, 
node
);

265 i‡(
ﬁd
->
rb_right
)

266 
	`rb_£t_∑ª¡
(
ﬁd
->
rb_right
, 
node
);

267 
cﬁ‹
;

270 
∑ª¡
 = 
	`rb_∑ª¡
(
node
);

271 
cﬁ‹
 = 
	`rb_cﬁ‹
(
node
);

273 i‡(
chûd
)

274 
	`rb_£t_∑ª¡
(
chûd
, 
∑ª¡
);

275 i‡(
∑ª¡
)

277 i‡(
∑ª¡
->
rb_À·
 =
node
)

278 
∑ª¡
->
rb_À·
 = 
chûd
;

280 
∑ª¡
->
rb_right
 = 
chûd
;

283 
roŸ
->
rb_node
 = 
chûd
;

285 
cﬁ‹
:

286 i‡(
cﬁ‹
 =
RB_BLACK
)

287 
	`__rb_îa£_cﬁ‹
(
chûd
, 
∑ª¡
, 
roŸ
);

288 
	}
}

293 
fio_rb_node
 *
	$rb_fú°
(
rb_roŸ
 *
roŸ
)

295 
fio_rb_node
 *
n
;

297 
n
 = 
roŸ
->
rb_node
;

298 i‡(!
n
)

299  
NULL
;

300 
n
->
rb_À·
)

301 
n
 =Ç->
rb_À·
;

302  
n
;

303 
	}
}

305 
fio_rb_node
 *
	$rb_√xt
(c⁄° 
fio_rb_node
 *
node
)

307 
fio_rb_node
 *
∑ª¡
;

309 i‡(
	`RB_EMPTY_NODE
(
node
))

310  
NULL
;

316 i‡(
node
->
rb_right
) {

317 
node
 =Çode->
rb_right
;

318 
node
->
rb_À·
)

319 
node
Úode->
rb_À·
;

320  (
fio_rb_node
 *)
node
;

330 (
∑ª¡
 = 
	`rb_∑ª¡
(
node
)Ë&&Çodê=∑ª¡->
rb_right
)

331 
node
 = 
∑ª¡
;

333  
∑ª¡
;

334 
	}
}

	@lib/rbtree.h

94 #i‚def 
_LINUX_RBTREE_H


95 
	#_LINUX_RBTREE_H


	)

97 
	~<°dlib.h
>

98 
	~<öây≥s.h
>

100 
	sfio_rb_node


102 
öçå_t
 
	mrb_∑ª¡_cﬁ‹
;

103 
	#RB_RED
 0

	)

104 
	#RB_BLACK
 1

	)

105 
fio_rb_node
 *
	mrb_right
;

106 
fio_rb_node
 *
	mrb_À·
;

107 } 
__©åibuã__
((
Æig√d
(())));

110 
	srb_roŸ


112 
fio_rb_node
 *
	mrb_node
;

116 
	#rb_∑ª¡
(
r
Ë((
fio_rb_node
 *)(‘)->
rb_∑ª¡_cﬁ‹
 & ~3))

	)

117 
	#rb_cﬁ‹
(
r
Ë(‘)->
rb_∑ª¡_cﬁ‹
 & 1)

	)

118 
	#rb_is_ªd
(
r
Ë(!
	`rb_cﬁ‹
‘))

	)

119 
	#rb_is_bœck
(
r
Ë
	`rb_cﬁ‹
‘)

	)

120 
	#rb_£t_ªd
(
r
Ëdÿ{ (r)->
rb_∑ª¡_cﬁ‹
 &~1; } 0)

	)

121 
	#rb_£t_bœck
(
r
Ëdÿ{ (r)->
rb_∑ª¡_cﬁ‹
 |1; } 0)

	)

123 
ölöe
 
	$rb_£t_∑ª¡
(
fio_rb_node
 *
rb
, fio_rb_nodê*
p
)

125 
rb
->
rb_∑ª¡_cﬁ‹
 = (rb->rb_∑ª¡_cﬁ‹ & 3Ë| (
uöçå_t
)
p
;

126 
	}
}

127 
ölöe
 
	$rb_£t_cﬁ‹
(
fio_rb_node
 *
rb
, 
cﬁ‹
)

129 
rb
->
rb_∑ª¡_cﬁ‹
 = (rb->rb_∑ª¡_cﬁ‹ & ~1Ë| 
cﬁ‹
;

130 
	}
}

132 
	#RB_ROOT
 (
rb_roŸ
Ë{ 
NULL
, }

	)

133 
	#rb_íåy
(
±r
, 
ty≥
, 
membî
Ë
	`c⁄èöî_of
’å,Åy≥, membî)

	)

135 
	#RB_EMPTY_ROOT
(
roŸ
Ë(‘oŸ)->
rb_node
 =
NULL
)

	)

136 
	#RB_EMPTY_NODE
(
node
Ë(
	`rb_∑ª¡
“odeË=node)

	)

137 
	#RB_CLEAR_NODE
(
node
Ë(
	`rb_£t_∑ª¡
“ode,Çode))

	)

139 
rb_ö£π_cﬁ‹
(
fio_rb_node
 *, 
rb_roŸ
 *);

140 
rb_îa£
(
fio_rb_node
 *, 
rb_roŸ
 *);

143 
fio_rb_node
 *
rb_fú°
(
rb_roŸ
 *);

144 
fio_rb_node
 *
rb_√xt
(const fio_rb_node *);

146 
ölöe
 
	$rb_lök_node
(
fio_rb_node
 * 
node
,

147 
fio_rb_node
 * 
∑ª¡
,

148 
fio_rb_node
 ** 
rb_lök
)

150 
node
->
rb_∑ª¡_cﬁ‹
 = (
uöçå_t
)
∑ª¡
;

151 
node
->
rb_À·
 =Çode->
rb_right
 = 
NULL
;

153 *
rb_lök
 = 
node
;

154 
	}
}

	@lib/roundup.h

1 #i‚de‡
FIO_ROUNDUP_H


2 
	#FIO_ROUNDUP_H


	)

4 
	~"lib/Ês.h
"

6 
ölöe
 
	$roundup_pow2
(
dïth
)

8  1UL << 
	`__Ês
(
dïth
 - 1);

9 
	}
}

	@lib/seqlock.h

1 #i‚de‡
FIO_SEQLOCK_H


2 
	#FIO_SEQLOCK_H


	)

4 
	~"ty≥s.h
"

5 
	~"../¨ch/¨ch.h
"

7 
	s£qlock
 {

8 #ifde‡
__˝lu•lus


9 
	m°d
::
©omic
<> 
£quí˚
;

11 vﬁ©ûê
	m£quí˚
;

15 
ölöe
 
	$£qlock_öô
(
£qlock
 *
s
)

17 
s
->
£quí˚
 = 0;

18 
	}
}

20 
ölöe
 
	$ªad_£qlock_begö
(
£qlock
 *
s
)

22 
£q
;

25 
£q
 = 
	`©omic_lﬂd_acquúe
(&
s
->
£quí˚
);

26 i‡(!(
£q
 & 1))

28 
n›
;

31  
£q
;

32 
	}
}

34 
ölöe
 
boﬁ
 
	$ªad_£qlock_ªåy
(
£qlock
 *
s
, 
£q
)

36 
	`ªad_b¨rõr
();

37  
s
->
£quí˚
 !
£q
;

38 
	}
}

40 
ölöe
 
	$wrôe_£qlock_begö
(
£qlock
 *
s
)

42 
s
->
£quí˚
 = 
	`©omic_lﬂd_acquúe
(&s->sequence) + 1;

43 
	}
}

45 
ölöe
 
	$wrôe_£qlock_íd
(
£qlock
 *
s
)

47 
	`©omic_°‹e_ªÀa£
(&
s
->
£quí˚
, s->sequence + 1);

48 
	}
}

	@lib/strntol.c

1 
	~<°rög.h
>

2 
	~<°dlib.h
>

3 
	~<limôs.h
>

5 
	~"°∫tﬁ.h
"

7 
	$°∫tﬁ
(c⁄° *
°r
, 
size_t
 
sz
, **
íd
, 
ba£
)

11 
buf
[24];

12 
ªt
;

13 c⁄° *
beg
 = 
°r
;

16 ; 
beg
 && 
sz
 && *beg == ' '; beg++, sz--)

19 i‡(!
sz
 || sz >(
buf
)) {

20 i‡(
íd
)

21 *
íd
 = (*)
°r
;

25 
	`mem˝y
(
buf
, 
beg
, 
sz
);

26 
buf
[
sz
] = '\0';

27 
ªt
 = 
	`°πﬁ
(
buf
, 
íd
, 
ba£
);

28 i‡(
ªt
 =
LONG_MIN
 ||Ñë =
LONG_MAX
)

29  
ªt
;

30 i‡(
íd
)

31 *
íd
 = (*)
beg
 + (*íd - 
buf
);

32  
ªt
;

33 
	}
}

	@lib/strntol.h

1 #i‚de‡
FIO_STRNTOL_H


2 
	#FIO_STRNTOL_H


	)

4 
	~<°döt.h
>

6 
°∫tﬁ
(c⁄° *
°r
, 
size_t
 
sz
, **
íd
, 
ba£
);

	@lib/types.h

1 #i‚de‡
FIO_TYPES_H


2 
	#FIO_TYPES_H


	)

4 #i‡!
deföed
(
CONFIG_HAVE_BOOL
Ë&& !deföed(
__˝lu•lus
)

5 
	tboﬁ
;

6 #i‚de‡
Ál£


7 
	#Ál£
 0

	)

9 #i‚de‡
åue


10 
	#åue
 1

	)

13 
	~<°dboﬁ.h
>

16 #i‡!
deföed
(
CONFIG_HAVE_KERNEL_RWF_T
)

17 
	t__kî√l_rwf_t
;

	@lib/zipf.c

1 
	~<m©h.h
>

2 
	~<°rög.h
>

3 
	~"zùf.h
"

4 
	~"../mömax.h
"

5 
	~"../hash.h
"

7 
	#ZIPF_MAX_GEN
 10000000UL

	)

9 
	$zùf_upd©e
(
zùf_°©e
 *
zs
)

11 
uöt64_t
 
to_gí
;

12 
i
;

19 
to_gí
 = 
	`mö
(
zs
->
ƒ™ges
, (
uöt64_t
Ë
ZIPF_MAX_GEN
);

21 
i
 = 0; i < 
to_gí
; i++)

22 
zs
->
zë™
 +
	`pow
(1.0 / (Ë(
i
 + 1), zs->
thëa
);

23 
	}
}

25 
	$sh¨ed_ønd_öô
(
zùf_°©e
 *
zs
, 
uöt64_t
 
ƒ™ges
,

26 
˚¡î
, 
£ed
)

28 
	`mem£t
(
zs
, 0, (*zs));

29 
zs
->
ƒ™ges
 =Çranges;

31 
	`öô_ønd_£ed
(&
zs
->
ønd
, 
£ed
, 0);

32 
zs
->
ønd_off
 = 
	`__ønd
(&zs->
ønd
);

33 i‡(
˚¡î
 != -1)

34 
zs
->
ønd_off
 = 
ƒ™ges
 * 
˚¡î
;

35 
	}
}

37 
	$zùf_öô
(
zùf_°©e
 *
zs
, 
uöt64_t
 
ƒ™ges
, 
thëa
,

38 
˚¡î
, 
£ed
)

40 
	`sh¨ed_ønd_öô
(
zs
, 
ƒ™ges
, 
˚¡î
, 
£ed
);

42 
zs
->
thëa
 =Åheta;

43 
zs
->
zëa2
 = 
	`pow
(1.0, zs->
thëa
) +Öow(0.5, zs->theta);

45 
	`zùf_upd©e
(
zs
);

46 
	}
}

48 
uöt64_t
 
	$zùf_√xt
(
zùf_°©e
 *
zs
)

50 
Æpha
, 
ëa
, 
ønd_uni
, 
ønd_z
;

51 
n
 = 
zs
->
ƒ™ges
;

52 
vÆ
;

54 
Æpha
 = 1.0 / (1.0 - 
zs
->
thëa
);

55 
ëa
 = (1.0 - 
	`pow
(2.0 / 
n
, 1.0 - 
zs
->
thëa
)Ë/ (1.0 - zs->
zëa2
 / zs->
zë™
);

57 
ønd_uni
 = (Ë
	`__ønd
(&
zs
->
ønd
Ë/ (Ë
FRAND32_MAX
;

58 
ønd_z
 = 
ønd_uni
 * 
zs
->
zë™
;

60 i‡(
ønd_z
 < 1.0)

61 
vÆ
 = 1;

62 i‡(
ønd_z
 < (1.0 + 
	`pow
(0.5, 
zs
->
thëa
)))

63 
vÆ
 = 2;

65 
vÆ
 = 1 + ()(
n
 * 
	`pow
(
ëa
*
ønd_uni
 -Éè + 1.0, 
Æpha
));

67 
vÆ
--;

69 i‡(!
zs
->
dißbÀ_hash
)

70 
vÆ
 = 
	`__hash_u64
(val);

72  (
vÆ
 + 
zs
->
ønd_off
Ë% zs->
ƒ™ges
;

73 
	}
}

75 
	$∑ªto_öô
(
zùf_°©e
 *
zs
, 
uöt64_t
 
ƒ™ges
, 
h
,

76 
˚¡î
, 
£ed
)

78 
	`sh¨ed_ønd_öô
(
zs
, 
ƒ™ges
, 
˚¡î
, 
£ed
);

79 
zs
->
∑ªto_pow
 = 
	`log
(
h
) /Üog(1.0 - h);

80 
	}
}

82 
uöt64_t
 
	$∑ªto_√xt
(
zùf_°©e
 *
zs
)

84 
ønd
 = (Ë
	`__ønd
(&
zs
->øndË/ (Ë
FRAND32_MAX
;

85 
n
;

87 
n
 = (
zs
->
ƒ™ges
 - 1Ë* 
	`pow
(
ønd
, zs->
∑ªto_pow
);

89 i‡(!
zs
->
dißbÀ_hash
)

90 
n
 = 
	`__hash_u64
(n);

92  (
n
 + 
zs
->
ønd_off
Ë% zs->
ƒ™ges
;

93 
	}
}

95 
	$zùf_dißbÀ_hash
(
zùf_°©e
 *
zs
)

97 
zs
->
dißbÀ_hash
 = 
åue
;

98 
	}
}

	@lib/zipf.h

1 #i‚de‡
FIO_ZIPF_H


2 
	#FIO_ZIPF_H


	)

4 
	~<öây≥s.h
>

5 
	~"ønd.h
"

6 
	~"ty≥s.h
"

8 
	szùf_°©e
 {

9 
uöt64_t
 
	mƒ™ges
;

10 
	mthëa
;

11 
	mzëa2
;

12 
	mzë™
;

13 
	m∑ªto_pow
;

14 
‰™d_°©e
 
	mønd
;

15 
uöt64_t
 
	mønd_off
;

16 
boﬁ
 
	mdißbÀ_hash
;

19 
zùf_öô
(
zùf_°©e
 *
zs
, 
uöt64_t
 
ƒ™ges
, 
thëa
,

20 
˚¡î
, 
£ed
);

21 
uöt64_t
 
zùf_√xt
(
zùf_°©e
 *
zs
);

23 
∑ªto_öô
(
zùf_°©e
 *
zs
, 
uöt64_t
 
ƒ™ges
, 
h
,

24 
˚¡î
, 
£ed
);

25 
uöt64_t
 
∑ªto_√xt
(
zùf_°©e
 *
zs
);

26 
zùf_dißbÀ_hash
(
zùf_°©e
 *
zs
);

	@libfio.c

25 
	~<°rög.h
>

26 
	~<sig«l.h
>

27 
	~<°döt.h
>

28 
	~<loˇÀ.h
>

29 
	~<f˙é.h
>

31 
	~"fio.h
"

32 
	~"smÆloc.h
"

33 
	~"os/os.h
"

34 
	~"fûñock.h
"

35 
	~"hñ≥r_thªad.h
"

36 
	~"fûehash.h
"

38 
FLIST_HEAD
(
disk_li°
);

40 
	g¨ch_Êags
 = 0;

42 
uöçå_t
 
	g∑ge_mask
 = 0;

43 
uöçå_t
 
	g∑ge_size
 = 0;

46 c⁄° *
	gfio_os_°rögs
[
os_ƒ
] = {

62 c⁄° *
	gfio_¨ch_°rögs
[
¨ch_ƒ
] = {

80 
	$ª£t_io_cou¡îs
(
thªad_d©a
 *
td
, 
Æl
)

82 
ddú
;

84 i‡(
Æl
) {

85 
ddú
 = 0; ddú < 
DDIR_RWDIR_CNT
; ddir++) {

86 
td
->
°©_io_byãs
[
ddú
] = 0;

87 
td
->
this_io_byãs
[
ddú
] = 0;

88 
td
->
°©_io_blocks
[
ddú
] = 0;

89 
td
->
this_io_blocks
[
ddú
] = 0;

90 
td
->
œ°_øã_check_byãs
[
ddú
] = 0;

91 
td
->
œ°_øã_check_blocks
[
ddú
] = 0;

92 
td
->
byãs_d⁄e
[
ddú
] = 0;

93 
td
->
øã_io_issue_byãs
[
ddú
] = 0;

94 
td
->
øã_√xt_io_time
[
ddú
] = 0;

95 
td
->
œ°_u£c
[
ddú
] = 0;

99 
td
->
z⁄e_byãs
 = 0;

101 
td
->
œ°_was_sync
 = 
Ál£
;

102 
td
->
rwmix_issues
 = 0;

107 i‡(
td
->
o
.
time_ba£d
 ||Åd->
lo›s
 > 1 ||Åd->o.
do_vîify
)

108 
td
->
ƒ_d⁄e_fûes
 = 0;

109 
	}
}

111 
	$˛ór_io_°©e
(
thªad_d©a
 *
td
, 
Æl
)

113 
fio_fûe
 *
f
;

114 
i
;

116 
	`ª£t_io_cou¡îs
(
td
, 
Æl
);

118 
	`˛o£_fûes
(
td
);

119 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

120 
	`fio_fûe_˛ór_d⁄e
(
f
);

121 
f
->
fûe_off£t
 = 
	`gë_°¨t_off£t
(
td
, f);

127 i‡(
td
->
o
.
ønd_ª≥©abÀ
)

128 
	`td_fûl_ønd_£eds
(
td
);

129 
	}
}

131 
	$ª£t_Æl_°©s
(
thªad_d©a
 *
td
)

133 
i
;

135 
	`ª£t_io_cou¡îs
(
td
, 1);

137 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

138 
td
->
io_byãs
[
i
] = 0;

139 
td
->
io_blocks
[
i
] = 0;

140 
td
->
io_issues
[
i
] = 0;

141 
td
->
ts
.
tŸÆ_io_u
[
i
] = 0;

142 
td
->
ts
.
ru¡ime
[
i
] = 0;

145 
	`£t_ïoch_time
(
td
,Åd->
o
.
log_unix_ïoch
 |Åd->o.
log_Æã∫©e_ïoch
,Åd->o.
log_Æã∫©e_ïoch_˛ock_id
);

146 
	`mem˝y
(&
td
->
°¨t
, &td->
ïoch
, (td->epoch));

147 
	`mem˝y
(&
td
->
i›s_ßm∂e_time
, &td->
ïoch
, (td->epoch));

148 
	`mem˝y
(&
td
->
bw_ßm∂e_time
, &td->
ïoch
, (td->epoch));

149 
	`mem˝y
(&
td
->
ss
.
¥ev_time
, &td->
ïoch
, (td->epoch));

151 
	`œt_èrgë_ª£t
(
td
);

152 
	`˛ór_rußge_°©
(
td
);

153 
	`hñ≥r_ª£t
();

154 
	}
}

156 
	$ª£t_fio_°©e
()

158 
i
;

160 
groupid
 = 0;

161 
thªad_numbî
 = 0;

162 
cur_£gmít
 = 0;

163 
i
 = 0; i < 
ƒ_£gmíts
; i++)

164 
£gmíts
[
i
].
ƒ_thªads
 = 0;

165 
°©_numbî
 = 0;

166 
d⁄e_£cs
 = 0;

167 
	}
}

169 c⁄° *
	$fio_gë_os_°rög
(
ƒ
)

171 i‡(
ƒ
 < 
os_ƒ
)

172  
fio_os_°rögs
[
ƒ
];

174  
NULL
;

175 
	}
}

177 c⁄° *
	$fio_gë_¨ch_°rög
(
ƒ
)

179 i‡(
ƒ
 < 
¨ch_ƒ
)

180  
fio_¨ch_°rögs
[
ƒ
];

182  
NULL
;

183 
	}
}

185 c⁄° *
	gtd_run°©es
[] = {

200 c⁄° *
	$run°©e_to_«me
(
run°©e
)

202 
	`compûëime_as£π
(
TD_LAST
 == 12, "tdÑunstateÜist");

203 i‡(
run°©e
 >0 &&Ñun°©ê< 
TD_LAST
)

204  
td_run°©es
[
run°©e
];

207 
	}
}

209 
	$td_£t_run°©e
(
thªad_d©a
 *
td
, 
run°©e
)

211 i‡(
td
->
run°©e
 ==Ñunstate)

214 
	`d¥öt
(
FD_PROCESS
, "pid=%d:Ñun°©ê%†-> %s\n", (Ë
td
->
pid
,

215 
	`run°©e_to_«me
(
td
->
run°©e
),

216 
	`run°©e_to_«me
(
run°©e
));

217 
td
->
run°©e
 =Ñunstate;

218 
	}
}

220 
	$td_bump_run°©e
(
thªad_d©a
 *
td
, 
√w_°©e
)

222 
ﬁd_°©e
 = 
td
->
run°©e
;

224 
	`td_£t_run°©e
(
td
, 
√w_°©e
);

225  
ﬁd_°©e
;

226 
	}
}

228 
	$td_ª°‹e_run°©e
(
thªad_d©a
 *
td
, 
ﬁd_°©e
)

230 
	`td_£t_run°©e
(
td
, 
ﬁd_°©e
);

231 
	}
}

233 
	$fio_m¨k_td_ãrmö©e
(
thªad_d©a
 *
td
)

235 
	`fio_gëtime
(&
td
->
ãrmö©e_time
, 
NULL
);

236 
	`wrôe_b¨rõr
();

237 
td
->
ãrmö©e
 = 
åue
;

238 
	}
}

240 
	$fio_ãrmö©e_thªads
(
group_id
, 
ãrmö©e
)

242 
thªad_d©a
 *
td
;

243 
pid_t
 
pid
 = 
	`gëpid
();

244 
i
;

246 
	`d¥öt
(
FD_PROCESS
, "ãrmö©êgroup_id=%d\n", 
group_id
);

248 
	`f‹_óch_td
(
td
, 
i
) {

249 i‡((
ãrmö©e
 =
TERMINATE_GROUP
 && 
group_id
 =
TERMINATE_ALL
) ||

250 (
ãrmö©e
 =
TERMINATE_GROUP
 && 
group_id
 =
td
->
groupid
) ||

251 (
ãrmö©e
 =
TERMINATE_STONEWALL
 && 
td
->
run°©e
 >
TD_RUNNING
) ||

252 (
ãrmö©e
 =
TERMINATE_ALL
)) {

253 
	`d¥öt
(
FD_PROCESS
, "settingÅerminate on %s/%d\n",

254 
td
->
o
.
«me
, (Ëtd->
pid
);

256 i‡(
td
->
ãrmö©e
)

259 
	`fio_m¨k_td_ãrmö©e
(
td
);

260 
td
->
o
.
°¨t_dñay
 = 0;

265 i‡(!
td
->
pid
 ||Öid ==Åd->pid)

267 i‡(
td
->
run°©e
 < 
TD_RAMP
)

268 
	`kûl
(
td
->
pid
, 
SIGTERM
);

270 
i€ngöe_›s
 *
›s
 = 
td
->
io_›s
;

272 i‡(
›s
 && ops->
ãrmö©e
)

273 
›s
->
	`ãrmö©e
(
td
);

277 
	}
}

279 
	$fio_ru¬ög_‹_≥ndög_io_thªads
()

281 
thªad_d©a
 *
td
;

282 
i
;

283 
ƒ_io_thªads
 = 0;

285 
	`f‹_óch_td
(
td
, 
i
) {

286 i‡(
td
->
io_›s_öô
 && 
	`td_i€ngöe_Êagged
—d, 
FIO_NOIO
))

288 
ƒ_io_thªads
++;

289 i‡(
td
->
run°©e
 < 
TD_EXITED
)

293 i‡(!
ƒ_io_thªads
)

296 
	}
}

298 
	$fio_£t_fd_n⁄blockög
(
fd
, c⁄° *
who
)

300 
Êags
;

302 
Êags
 = 
	`f˙é
(
fd
, 
F_GETFL
);

303 i‡(
Êags
 < 0)

304 
	`log_îr
("fio: %†ÁûedÅÿgë fûêÊags: %s\n", 
who
, 
	`°ªº‹
(
î∫o
));

306 
√w_Êags
 = 
Êags
 | 
O_NONBLOCK
;

308 
√w_Êags
 = 
	`f˙é
(
fd
, 
F_SETFL
,Çew_flags);

309 i‡(
√w_Êags
 < 0)

310 
	`log_îr
("fio: %†ÁûedÅÿgë fûêÊags: %s\n", 
who
, 
	`°ªº‹
(
î∫o
));

313  
Êags
;

314 
	}
}

317 
	mENDIAN_INVALID_BE
 = 1,

318 
	mENDIAN_INVALID_LE
,

319 
	mENDIAN_INVALID_CONFIG
,

320 
	mENDIAN_BROKEN
,

323 
	$ídün_check
()

326 
uöt8_t
 
c
[8];

327 
uöt64_t
 
v
;

328 } 
u
;

329 
À
 = 0, 
be
 = 0;

331 
u
.
v
 = 0x12;

332 i‡(
u
.
c
[7] == 0x12)

333 
be
 = 1;

334 i‡(
u
.
c
[0] == 0x12)

335 
À
 = 1;

337 #i‡
	`deföed
(
CONFIG_LITTLE_ENDIAN
)

338 i‡(
be
)

339  
ENDIAN_INVALID_BE
;

340 #ñi‡
	`deföed
(
CONFIG_BIG_ENDIAN
)

341 i‡(
À
)

342  
ENDIAN_INVALID_LE
;

344  
ENDIAN_INVALID_CONFIG
;

347 i‡(!
À
 && !
be
)

348  
ENDIAN_BROKEN
;

351 
	}
}

353 
	$öôülize_fio
(*
ívp
[])

355 
ps
;

356 
îr
;

363 
	`compûëime_as£π
((
	`off£tof
(
thªad_d©a
, 
ts
) % (*)) == 0, "ts");

364 
	`compûëime_as£π
((
	`off£tof
(
thªad_°©
, 
≥r˚¡ûe_li°
) % 8) == 0, "statÖercentile_list");

365 
	`compûëime_as£π
((
	`off£tof
(
thªad_°©
, 
tŸÆ_run_time
) % 8) == 0, "total_run_time");

366 
	`compûëime_as£π
((
	`off£tof
(
thªad_°©
, 
tŸÆ_îr_cou¡
) % 8) == 0, "total_err_count");

367 
	`compûëime_as£π
((
	`off£tof
(
thªad_°©
, 
œãncy_≥r˚¡ûe
) % 8) == 0, "statÜatency_percentile");

368 
	`compûëime_as£π
((
	`off£tof
(
thªad_d©a
, 
ts
.
˛©_°©
) % 8) == 0, "ts.clat_stat");

369 
	`compûëime_as£π
((
	`off£tof
(
thªad_›ti⁄s_∑ck
, 
zùf_thëa
) % 8) == 0, "zipf_theta");

370 
	`compûëime_as£π
((
	`off£tof
(
thªad_›ti⁄s_∑ck
, 
∑ªto_h
) % 8) == 0, "pareto_h");

371 
	`compûëime_as£π
((
	`off£tof
(
thªad_›ti⁄s_∑ck
, 
≥r˚¡ûe_li°
) % 8) == 0, "percentile_list");

372 
	`compûëime_as£π
((
	`off£tof
(
thªad_›ti⁄s_∑ck
, 
œãncy_≥r˚¡ûe
) % 8) == 0, "latency_percentile");

373 
	`compûëime_as£π
((
	`off£tof
(
jobs_ëa
, 
m_øã
) % 8) == 0, "m_rate");

375 
	`compûëime_as£π
(
__TD_F_LAST
 <
TD_ENG_FLAG_SHIFT
, "TD_ENG_FLAG_SHIFT");

376 
	`compûëime_as£π
(
BSSPLIT_MAX
 <
ZONESPLIT_MAX
, "bsssplit/zone max");

378 
îr
 = 
	`ídün_check
();

379 i‡(
îr
) {

380 
	`log_îr
("fio:Éndianness settingsáppear wrong.\n");

381 
îr
) {

382 
ENDIAN_INVALID_BE
:

383 
	`log_îr
("fio: got big-endian when configured forÜittle\n");

385 
ENDIAN_INVALID_LE
:

386 
	`log_îr
("fio: gotÜittle-endian when configured for big\n");

388 
ENDIAN_INVALID_CONFIG
:

389 
	`log_îr
("fio:Çot configuredÅoányÉndianness\n");

391 
ENDIAN_BROKEN
:

392 
	`log_îr
("fio: failedÅo detectÉndianness\n");

395 
	`as£π
(0);

398 
	`log_îr
("fio:ÖleaseÑeportÅhisÅo fio@vger.kernel.org\n");

402 #i‡!
	`deföed
(
CONFIG_GETTIMEOFDAY
Ë&& !deföed(
CONFIG_CLOCK_GETTIME
)

406 
	`¨ch_öô
(
ívp
);

408 
	`söô
();

410 i‡(
	`fio_fûñock_öô
()) {

411 
	`log_îr
("fio: failed initializing filelock subsys\n");

415 
	`fûe_hash_öô
();

421 i‡(!
	`gëív
("LC_NUMERIC"))

422 
	`£éoˇÀ
(
LC_NUMERIC
, "en_US");

424 
ps
 = 
	`sysc⁄f
(
_SC_PAGESIZE
);

425 i‡(
ps
 < 0) {

426 
	`log_îr
("FailedÅo getÖage size\n");

430 
∑ge_size
 = 
ps
;

431 
∑ge_mask
 = 
ps
 - 1;

433 
	`fio_keyw‹ds_öô
();

435 
	}
}

437 
	$deöôülize_fio
()

439 
	`fio_keyw‹ds_exô
();

440 
	}
}

	@log.c

1 
	~<uni°d.h
>

2 
	~<°rög.h
>

3 
	~<°d¨g.h
>

4 
	~<sy¶og.h
>

6 
	~"fio.h
"

7 
	~"o¶ib/a•rötf.h
"

9 
size_t
 
	$log_öfo_buf
(c⁄° *
buf
, 
size_t
 
Àn
)

14 i‡(!
buf
)

17 i‡(
is_backíd
) {

18 
ssize_t
 
ªt
 = 
	`fio_£rvî_ãxt_ouçut
(
FIO_LOG_INFO
, 
buf
, 
Àn
);

19 i‡(
ªt
 != -1)

20  
ªt
;

23 i‡(
log_sy¶og
) {

24 
	`sy¶og
(
LOG_INFO
, "%s", 
buf
);

25  
Àn
;

27  
	`fwrôe
(
buf
, 
Àn
, 1, 
f_out
);

28 
	}
}

30 
size_t
 
	$log_vÆi°
(c⁄° *
fmt
, 
va_li°
 
¨gs
)

32 *
buf„r
;

33 
Àn
;

35 
Àn
 = 
	`va•rötf
(&
buf„r
, 
fmt
, 
¨gs
);

36 i‡(
Àn
 < 0)

38 
Àn
 = 
	`log_öfo_buf
(
buf„r
,Üen);

39 
	`‰ì
(
buf„r
);

41  
Àn
;

42 
	}
}

45 #ifde‡
FIO_INC_DEBUG


46 
	$log_¥evÆi°
(
ty≥
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

48 *
buf1
, *
buf2
;

49 
Àn
;

50 
pid_t
 
pid
;

52 
pid
 = 
	`gëtid
();

53 i‡(
fio_debug_jobp
 && *fio_debug_jobp != -1U

54 && 
pid
 !*
fio_debug_jobp
)

57 
Àn
 = 
	`va•rötf
(&
buf1
, 
fmt
, 
¨gs
);

58 i‡(
Àn
 < 0)

60 
Àn
 = 
	`a•rötf
(&
buf2
, "%-8†%-5u %s", 
debug_Àvñs
[
ty≥
].
«me
,

61 (Ë
pid
, 
buf1
);

62 
	`‰ì
(
buf1
);

63 i‡(
Àn
 < 0)

65 
	`log_öfo_buf
(
buf2
, 
Àn
);

66 
	`‰ì
(
buf2
);

67 
	}
}

70 
ssize_t
 
	$log_öfo
(c⁄° *
f‹m©
, ...)

72 
va_li°
 
¨gs
;

73 
ssize_t
 
ªt
;

75 
	`va_°¨t
(
¨gs
, 
f‹m©
);

76 
ªt
 = 
	`log_vÆi°
(
f‹m©
, 
¨gs
);

77 
	`va_íd
(
¨gs
);

79  
ªt
;

80 
	}
}

82 
size_t
 
	$__log_buf
(
buf_ouçut
 *
buf
, c⁄° *
f‹m©
, ...)

84 *
buf„r
;

85 
va_li°
 
¨gs
;

86 
Àn
;

88 
	`va_°¨t
(
¨gs
, 
f‹m©
);

89 
Àn
 = 
	`va•rötf
(&
buf„r
, 
f‹m©
, 
¨gs
);

90 
	`va_íd
(
¨gs
);

91 i‡(
Àn
 < 0)

93 
Àn
 = 
	`buf_ouçut_add
(
buf
, 
buf„r
,Üen);

94 
	`‰ì
(
buf„r
);

96  
Àn
;

97 
	}
}

99 
	$log_öfo_Êush
()

101 i‡(
is_backíd
 || 
log_sy¶og
)

104  
	`fÊush
(
f_out
);

105 
	}
}

107 
ssize_t
 
	$log_îr
(c⁄° *
f‹m©
, ...)

109 
ssize_t
 
ªt
;

110 
Àn
;

111 *
buf„r
;

112 
va_li°
 
¨gs
;

114 
	`va_°¨t
(
¨gs
, 
f‹m©
);

115 
Àn
 = 
	`va•rötf
(&
buf„r
, 
f‹m©
, 
¨gs
);

116 
	`va_íd
(
¨gs
);

117 i‡(
Àn
 < 0)

118  
Àn
;

120 i‡(
is_backíd
) {

121 
ªt
 = 
	`fio_£rvî_ãxt_ouçut
(
FIO_LOG_ERR
, 
buf„r
, 
Àn
);

122 i‡(
ªt
 != -1)

123 
d⁄e
;

126 i‡(
log_sy¶og
) {

127 
	`sy¶og
(
LOG_INFO
, "%s", 
buf„r
);

128 
ªt
 = 
Àn
;

130 i‡(
f_îr
 !
°dîr
)

131 
ªt
 = 
	`fwrôe
(
buf„r
, 
Àn
, 1, 
°dîr
);

133 
ªt
 = 
	`fwrôe
(
buf„r
, 
Àn
, 1, 
f_îr
);

136 
d⁄e
:

137 
	`‰ì
(
buf„r
);

138  
ªt
;

139 
	}
}

141 c⁄° *
	$log_gë_Àvñ
(
Àvñ
)

143 c⁄° *
Àvñs
[] = { "Unknown", "Debug", "Info", "Error",

146 i‡(
Àvñ
 >
FIO_LOG_NR
)

147 
Àvñ
 = 
FIO_LOG_NR
;

149  
Àvñs
[
Àvñ
];

150 
	}
}

	@log.h

1 #i‚de‡
FIO_LOG_H


2 
	#FIO_LOG_H


	)

4 
	~<°dio.h
>

5 
	~<°d¨g.h
>

6 
	~<uni°d.h
>

8 
	~"lib/ouçut_buf„r.h
"

10 
FILE
 *
f_out
;

11 
FILE
 *
f_îr
;

13 
ssize_t
 
	$log_îr
(c⁄° *
f‹m©
, ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 2)));

14 
ssize_t
 
	$log_öfo
(c⁄° *
f‹m©
, ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 2)));

15 
size_t
 
	$__log_buf
(
buf_ouçut
 *, c⁄° *
f‹m©
, ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

16 
size_t
 
	`log_vÆi°
(c⁄° *
°r
, 
va_li°
);

17 
	`log_¥evÆi°
(
ty≥
, c⁄° *
°r
, 
va_li°
);

18 
size_t
 
	`log_öfo_buf
(c⁄° *
buf
, size_à
Àn
);

19 
	`log_öfo_Êush
();

21 
	#log_buf
(
buf
, 
f‹m©
, 
¨gs
...) \

23 
size_t
 
__ªt
; \

24 i‡((
buf
Ë!
NULL
) \

25 
__ªt
 = 
	`__log_buf
(
buf
, 
f‹m©
, ##
¨gs
); \

27 
__ªt
 = 
	`log_öfo
(
f‹m©
, ##
¨gs
); \

28 
__ªt
; \

29 
	}
})

	)

32 
	mFIO_LOG_DEBUG
 = 1,

33 
	mFIO_LOG_INFO
 = 2,

34 
	mFIO_LOG_ERR
 = 3,

35 
	mFIO_LOG_NR
 = 4,

38 c⁄° *
log_gë_Àvñ
(
Àvñ
);

	@memory.c

4 
	~<f˙é.h
>

5 
	~<uni°d.h
>

6 
	~<sys/mm™.h
>

7 
	~<sys/°©.h
>

9 
	~"fio.h
"

10 #i‚de‡
FIO_NO_HAVE_SHM_H


11 
	~<sys/shm.h
>

14 
	$fio_u≈ö_mem‹y
(
thªad_d©a
 *
td
)

16 i‡(
td
->
pö√d_mem
) {

17 
	`d¥öt
(
FD_MEM
, "u≈önög %Œu byãs\n", 
td
->
o
.
lockmem
);

18 i‡(
	`mu∆ock
(
td
->
pö√d_mem
,Åd->
o
.
lockmem
) < 0)

19 
	`≥º‹
("munlock");

20 
	`munm≠
(
td
->
pö√d_mem
,Åd->
o
.
lockmem
);

21 
td
->
pö√d_mem
 = 
NULL
;

23 
	}
}

25 
	$fio_pö_mem‹y
(
thªad_d©a
 *
td
)

27 
phys_mem
;

29 i‡(!
td
->
o
.
lockmem
)

32 
	`d¥öt
(
FD_MEM
, "pönög %Œu byãs\n", 
td
->
o
.
lockmem
);

37 
phys_mem
 = 
	`os_phys_mem
();

38 i‡(
phys_mem
) {

39 i‡((
td
->
o
.
lockmem
 + 128 * 1024 * 1024Ë> 
phys_mem
) {

40 
td
->
o
.
lockmem
 = 
phys_mem
 - 128 * 1024 * 1024;

41 
	`log_öfo
("fio:Üimiting mlocked memoryÅo %lluMiB\n",

42 
td
->
o
.
lockmem
 >> 20);

46 
td
->
pö√d_mem
 = 
	`mm≠
(
NULL
,Åd->
o
.
lockmem
, 
PROT_READ
 | 
PROT_WRITE
,

47 
MAP_PRIVATE
 | 
OS_MAP_ANON
, -1, 0);

48 i‡(
td
->
pö√d_mem
 =
MAP_FAILED
) {

49 
	`≥º‹
("mallocÜocked mem");

50 
td
->
pö√d_mem
 = 
NULL
;

53 i‡(
	`mlock
(
td
->
pö√d_mem
,Åd->
o
.
lockmem
) < 0) {

54 
	`≥º‹
("mlock");

55 
	`munm≠
(
td
->
pö√d_mem
,Åd->
o
.
lockmem
);

56 
td
->
pö√d_mem
 = 
NULL
;

61 
	}
}

63 
	$Æloc_mem_shm
(
thªad_d©a
 *
td
, 
tŸÆ_mem
)

65 #i‚de‡
CONFIG_NO_SHM


66 
Êags
 = 
IPC_CREAT
 | 
S_IRUSR
 | 
S_IWUSR
;

68 i‡(
td
->
o
.
mem_ty≥
 =
MEM_SHMHUGE
) {

69 
mask
 = 
td
->
o
.
hugïage_size
 - 1;

71 
Êags
 |
SHM_HUGETLB
;

72 
tŸÆ_mem
 = (tŸÆ_mem + 
mask
) & ~mask;

75 
td
->
shm_id
 = 
	`shmgë
(
IPC_PRIVATE
, 
tŸÆ_mem
, 
Êags
);

76 
	`d¥öt
(
FD_MEM
, "shmgë %u, %d\n", 
tŸÆ_mem
, 
td
->
shm_id
);

77 i‡(
td
->
shm_id
 < 0) {

78 
	`td_vîr‹
(
td
, 
î∫o
, "shmget");

79 i‡(
	`gëeuid
(Ë!0 && (
î∫o
 =
ENOMEM
 ||Éºnÿ=
EPERM
))

80 
	`log_îr
("fio: you mayÇeedÅoÑunÅhis jobásÑoot\n");

81 i‡(
td
->
o
.
mem_ty≥
 =
MEM_SHMHUGE
) {

82 i‡(
î∫o
 =
EINVAL
) {

83 
	`log_îr
("fio: checkÅhat you have free huge"

86 } i‡(
î∫o
 =
ENOSYS
) {

87 
	`log_îr
("fio: your system doesÇotáppearÅo"

89 } i‡(
î∫o
 =
ENOMEM
) {

90 
	`log_îr
("fio:Ço hugeÖagesávailable, do you"

98 
td
->
‹ig_buf„r
 = 
	`shm©
—d->
shm_id
, 
NULL
, 0);

99 
	`d¥öt
(
FD_MEM
, "shm© %d, %p\n", 
td
->
shm_id
,Åd->
‹ig_buf„r
);

100 i‡(
td
->
‹ig_buf„r
 == (*) -1) {

101 
	`td_vîr‹
(
td
, 
î∫o
, "shmat");

102 
td
->
‹ig_buf„r
 = 
NULL
;

108 
	`log_îr
("fio: shmÇot supported\n");

111 
	}
}

113 
	$‰ì_mem_shm
(
thªad_d©a
 *
td
)

115 #i‚de‡
CONFIG_NO_SHM


116 
shmid_ds
 
sbuf
;

118 
	`d¥öt
(
FD_MEM
, "shmdt/˘»%d %p\n", 
td
->
shm_id
,Åd->
‹ig_buf„r
);

119 
	`shmdt
(
td
->
‹ig_buf„r
);

120 
	`shm˘l
(
td
->
shm_id
, 
IPC_RMID
, &
sbuf
);

122 
	}
}

124 
	$Æloc_mem_mm≠
(
thªad_d©a
 *
td
, 
size_t
 
tŸÆ_mem
)

126 
Êags
 = 0;

128 
td
->
mm≠fd
 = -1;

130 i‡(
td
->
o
.
mem_ty≥
 =
MEM_MMAPHUGE
) {

131 
mask
 = 
td
->
o
.
hugïage_size
 - 1;

134 i‡(!
td
->
o
.
mm≠fûe
)

135 
Êags
 |
MAP_HUGETLB
;

136 
tŸÆ_mem
 = (tŸÆ_mem + 
mask
) & ~mask;

139 i‡(
td
->
o
.
mm≠fûe
) {

140 i‡(
	`ac˚ss
(
td
->
o
.
mm≠fûe
, 
F_OK
) == 0)

141 
td
->
Êags
 |
TD_F_MMAP_KEEP
;

143 
td
->
mm≠fd
 = 
	`›í
—d->
o
.
mm≠fûe
, 
O_RDWR
|
O_CREAT
, 0644);

145 i‡(
td
->
mm≠fd
 < 0) {

146 
	`td_vîr‹
(
td
, 
î∫o
, "open mmap file");

147 
td
->
‹ig_buf„r
 = 
NULL
;

150 i‡(
td
->
o
.
mem_ty≥
 !
MEM_MMAPHUGE
 &&

151 
td
->
o
.
mem_ty≥
 !
MEM_MMAPSHARED
 &&

152 
	`·runˇã
(
td
->
mm≠fd
, 
tŸÆ_mem
) < 0) {

153 
	`td_vîr‹
(
td
, 
î∫o
, "truncate mmap file");

154 
td
->
‹ig_buf„r
 = 
NULL
;

157 i‡(
td
->
o
.
mem_ty≥
 =
MEM_MMAPHUGE
 ||

158 
td
->
o
.
mem_ty≥
 =
MEM_MMAPSHARED
)

159 
Êags
 |
MAP_SHARED
;

161 
Êags
 |
MAP_PRIVATE
;

163 
Êags
 |
OS_MAP_ANON
 | 
MAP_PRIVATE
;

165 
td
->
‹ig_buf„r
 = 
	`mm≠
(
NULL
, 
tŸÆ_mem
, 
PROT_READ
 | 
PROT_WRITE
, 
Êags
,

166 
td
->
mm≠fd
, 0);

167 
	`d¥öt
(
FD_MEM
, "mm≠ %Œu/%d %p\n", (Ë
tŸÆ_mem
,

168 
td
->
mm≠fd
,Åd->
‹ig_buf„r
);

169 i‡(
td
->
‹ig_buf„r
 =
MAP_FAILED
) {

170 
	`td_vîr‹
(
td
, 
î∫o
, "mmap");

171 
td
->
‹ig_buf„r
 = 
NULL
;

172 i‡(
td
->
mm≠fd
 != 1 &&Åd->mmapfd != -1) {

173 
	`˛o£
(
td
->
mm≠fd
);

174 i‡(
td
->
o
.
mm≠fûe
 && !—d->
Êags
 & 
TD_F_MMAP_KEEP
))

175 
	`u∆ök
(
td
->
o
.
mm≠fûe
);

182 
	}
}

184 
	$‰ì_mem_mm≠
(
thªad_d©a
 *
td
, 
size_t
 
tŸÆ_mem
)

186 
	`d¥öt
(
FD_MEM
, "munm≠ %Œu %p\n", (Ë
tŸÆ_mem
,

187 
td
->
‹ig_buf„r
);

188 
	`munm≠
(
td
->
‹ig_buf„r
,Åd->
‹ig_buf„r_size
);

189 i‡(
td
->
o
.
mm≠fûe
) {

190 i‡(
td
->
mm≠fd
 != -1)

191 
	`˛o£
(
td
->
mm≠fd
);

192 i‡(!(
td
->
Êags
 & 
TD_F_MMAP_KEEP
))

193 
	`u∆ök
(
td
->
o
.
mm≠fûe
);

194 
	`‰ì
(
td
->
o
.
mm≠fûe
);

196 
	}
}

198 
	$Æloc_mem_mÆloc
(
thªad_d©a
 *
td
, 
size_t
 
tŸÆ_mem
)

200 
td
->
‹ig_buf„r
 = 
	`mÆloc
(
tŸÆ_mem
);

201 
	`d¥öt
(
FD_MEM
, "mÆlo¯%Œu %p\n", (Ë
tŸÆ_mem
,

202 
td
->
‹ig_buf„r
);

204  
td
->
‹ig_buf„r
 =
NULL
;

205 
	}
}

207 
	$‰ì_mem_mÆloc
(
thªad_d©a
 *
td
)

209 
	`d¥öt
(
FD_MEM
, "‰ì mÆlo¯mem %p\n", 
td
->
‹ig_buf„r
);

210 
	`‰ì
(
td
->
‹ig_buf„r
);

211 
	}
}

213 
	$Æloc_mem_cudamÆloc
(
thªad_d©a
 *
td
, 
size_t
 
tŸÆ_mem
)

215 #ifde‡
CONFIG_CUDA


216 
CUªsu…
 
ªt
;

217 
«me
[128];

219 
ªt
 = 
	`cuInô
(0);

220 i‡(
ªt
 !
CUDA_SUCCESS
) {

221 
	`log_îr
("fio: failed initialize cuda driverápi\n");

225 
ªt
 = 
	`cuDevi˚GëCou¡
(&
td
->
gpu_dev_˙t
);

226 i‡(
ªt
 !
CUDA_SUCCESS
) {

227 
	`log_îr
("fio: failed get device count\n");

230 
	`d¥öt
(
FD_MEM
, "found %d GPU devi˚s\n", 
td
->
gpu_dev_˙t
);

232 i‡(
td
->
gpu_dev_˙t
 == 0) {

233 
	`log_îr
("fio:Ço GPU device found. "

238 
td
->
gpu_dev_id
 =Åd->
o
.gpu_dev_id;

239 
ªt
 = 
	`cuDevi˚Gë
(&
td
->
cu_dev
,Åd->
gpu_dev_id
);

240 i‡(
ªt
 !
CUDA_SUCCESS
) {

241 
	`log_îr
("fio: failed get GPU device\n");

245 
ªt
 = 
	`cuDevi˚GëName
(
«me
, “ame), 
td
->
gpu_dev_id
);

246 i‡(
ªt
 !
CUDA_SUCCESS
) {

247 
	`log_îr
("fio: failed get deviceÇame\n");

250 
	`d¥öt
(
FD_MEM
, "dev_id = [%d], deviceÇame = [%s]\n", \

251 
td
->
gpu_dev_id
, 
«me
);

253 
ªt
 = 
	`cuCtxCª©e
(&
td
->
cu_˘x
, 
CU_CTX_MAP_HOST
,Åd->
cu_dev
);

254 i‡(
ªt
 !
CUDA_SUCCESS
) {

255 
	`log_îr
("fio: faûedÅÿ¸óã cud®c⁄ãxt: %d\n", 
ªt
);

259 
ªt
 = 
	`cuMemAŒoc
(&
td
->
dev_mem_±r
, 
tŸÆ_mem
);

260 i‡(
ªt
 !
CUDA_SUCCESS
) {

261 
	`log_îr
("fio: cuMemAŒo¯%zu byã†Áûed\n", 
tŸÆ_mem
);

264 
td
->
‹ig_buf„r
 = (*Ëtd->
dev_mem_±r
;

266 
	`d¥öt
(
FD_MEM
, "cudaMalloc %llu %p\n", \

267 (Ë
tŸÆ_mem
, 
td
->
‹ig_buf„r
);

270  -
EINVAL
;

272 
	}
}

274 
	$‰ì_mem_cudamÆloc
(
thªad_d©a
 *
td
)

276 #ifde‡
CONFIG_CUDA


277 i‡(
td
->
dev_mem_±r
)

278 
	`cuMemFªe
(
td
->
dev_mem_±r
);

280 i‡(
	`cuCtxDe°roy
(
td
->
cu_˘x
Ë!
CUDA_SUCCESS
)

281 
	`log_îr
("fio: failedÅo destroy cuda context\n");

283 
	}
}

288 
	$Æloˇã_io_mem
(
thªad_d©a
 *
td
)

290 
size_t
 
tŸÆ_mem
;

291 
ªt
 = 0;

293 i‡(
	`td_i€ngöe_Êagged
(
td
, 
FIO_NOIO
))

296 
tŸÆ_mem
 = 
td
->
‹ig_buf„r_size
;

298 i‡(
td
->
o
.
odúe˘
 ||Åd->o.
mem_Æign
 ||Åd->o.
ﬂtomic
 ||

299 
	`td_i€ngöe_Êagged
(
td
, 
FIO_MEMALIGN
)) {

300 
tŸÆ_mem
 +
∑ge_mask
;

301 i‡(
td
->
o
.
mem_Æign
 &&Åd->o.mem_Æig¿> 
∑ge_size
)

302 
tŸÆ_mem
 +
td
->
o
.
mem_Æign
 - 
∑ge_size
;

305 
	`d¥öt
(
FD_MEM
, "AŒo¯%Œu f‹ buf„rs\n", (Ë
tŸÆ_mem
);

311 i‡(
td
->
io_›s
->
iomem_Æloc
) {

312 i‡(
	`fio_›ti⁄_is_£t
(&
td
->
o
, 
mem_ty≥
)) {

313 
	`log_îr
("fio: option 'mem/iomem' conflicts with specified IOÉngine\n");

314 
ªt
 = 1;

316 
ªt
 = 
td
->
io_›s
->
	`iomem_Æloc
—d, 
tŸÆ_mem
);

317 } i‡(
td
->
o
.
mem_ty≥
 =
MEM_MALLOC
)

318 
ªt
 = 
	`Æloc_mem_mÆloc
(
td
, 
tŸÆ_mem
);

319 i‡(
td
->
o
.
mem_ty≥
 =
MEM_SHM
 ||Åd->o.mem_ty≥ =
MEM_SHMHUGE
)

320 
ªt
 = 
	`Æloc_mem_shm
(
td
, 
tŸÆ_mem
);

321 i‡(
td
->
o
.
mem_ty≥
 =
MEM_MMAP
 ||Åd->o.mem_ty≥ =
MEM_MMAPHUGE
 ||

322 
td
->
o
.
mem_ty≥
 =
MEM_MMAPSHARED
)

323 
ªt
 = 
	`Æloc_mem_mm≠
(
td
, 
tŸÆ_mem
);

324 i‡(
td
->
o
.
mem_ty≥
 =
MEM_CUDA_MALLOC
)

325 
ªt
 = 
	`Æloc_mem_cudamÆloc
(
td
, 
tŸÆ_mem
);

327 
	`log_îr
("fio: bad memÅy≥: %d\n", 
td
->
o
.
mem_ty≥
);

328 
ªt
 = 1;

331 i‡(
ªt
)

332 
	`td_vîr‹
(
td
, 
ENOMEM
, "iomemállocation");

334  
ªt
;

335 
	}
}

337 
	$‰ì_io_mem
(
thªad_d©a
 *
td
)

339 
tŸÆ_mem
;

341 
tŸÆ_mem
 = 
td
->
‹ig_buf„r_size
;

342 i‡(
td
->
o
.
odúe˘
 ||Åd->o.
ﬂtomic
)

343 
tŸÆ_mem
 +
∑ge_mask
;

345 i‡(
td
->
io_›s
->
iomem_Æloc
) {

346 i‡(
td
->
io_›s
->
iomem_‰ì
)

347 
td
->
io_›s
->
	`iomem_‰ì
(td);

348 } i‡(
td
->
o
.
mem_ty≥
 =
MEM_MALLOC
)

349 
	`‰ì_mem_mÆloc
(
td
);

350 i‡(
td
->
o
.
mem_ty≥
 =
MEM_SHM
 ||Åd->o.mem_ty≥ =
MEM_SHMHUGE
)

351 
	`‰ì_mem_shm
(
td
);

352 i‡(
td
->
o
.
mem_ty≥
 =
MEM_MMAP
 ||Åd->o.mem_ty≥ =
MEM_MMAPHUGE
 ||

353 
td
->
o
.
mem_ty≥
 =
MEM_MMAPSHARED
)

354 
	`‰ì_mem_mm≠
(
td
, 
tŸÆ_mem
);

355 i‡(
td
->
o
.
mem_ty≥
 =
MEM_CUDA_MALLOC
)

356 
	`‰ì_mem_cudamÆloc
(
td
);

358 
	`log_îr
("Bad mem‹yÅy≥ %u\n", 
td
->
o
.
mem_ty≥
);

360 
td
->
‹ig_buf„r
 = 
NULL
;

361 
td
->
‹ig_buf„r_size
 = 0;

362 
	}
}

	@minmax.h

1 #i‚de‡
FIO_MIN_MAX_H


2 
	#FIO_MIN_MAX_H


	)

4 #i‚de‡
mö


5 
	#mö
(
x
,
y
) ({ \

6 
	`__ty≥of__
(
x
Ë
_x
 = (x); \

7 
	`__ty≥of__
(
y
Ë
_y
 = (y); \

8 (Ë(&
_x
 =&
_y
); \

9 
_x
 < 
_y
 ? _x : _y; })

	)

12 #i‚de‡
max


13 
	#max
(
x
,
y
) ({ \

14 
	`__ty≥of__
(
x
Ë
_x
 = (x); \

15 
	`__ty≥of__
(
y
Ë
_y
 = (y); \

16 (Ë(&
_x
 =&
_y
); \

17 
_x
 > 
_y
 ? _x : _y; })

	)

20 
	#mö_nŸ_zîo
(
x
, 
y
) ({ \

21 
	`__ty≥of__
(
x
Ë
__x
 = (x); \

22 
	`__ty≥of__
(
y
Ë
__y
 = (y); \

23 
__x
 =0 ? 
__y
 : ((__y =0Ë? __x : 
	`mö
(__x, __y)); })

	)

	@optgroup.c

1 
	~<°dio.h
>

2 
	~<öây≥s.h
>

3 
	~"›tgroup.h
"

4 
	~"compûî/compûî.h
"

9 c⁄° 
›t_group
 
	gfio_›t_groups
[] = {

11 .
«me
 = "General",

12 .
	gmask
 = 
FIO_OPT_C_GENERAL
,

15 .
	g«me
 = "I/O",

16 .
	gmask
 = 
FIO_OPT_C_IO
,

19 .
	g«me
 = "File",

20 .
	gmask
 = 
FIO_OPT_C_FILE
,

23 .
	g«me
 = "Statistics",

24 .
	gmask
 = 
FIO_OPT_C_STAT
,

27 .
	g«me
 = "Logging",

28 .
	gmask
 = 
FIO_OPT_C_LOG
,

31 .
	g«me
 = "Profiles",

32 .
	gmask
 = 
FIO_OPT_C_PROFILE
,

35 .
	g«me
 = "I/OÉngines",

36 .
	gmask
 = 
FIO_OPT_C_ENGINE
,

39 .
	g«me
 = 
NULL
,

43 c⁄° 
›t_group
 
	gfio_›t_ˇt_groups
[] = {

45 .
«me
 = "Rate",

46 .
	gmask
 = 
FIO_OPT_G_RATE
,

49 .
	g«me
 = "Zone",

50 .
	gmask
 = 
FIO_OPT_G_ZONE
,

53 .
	g«me
 = "Read/write mix",

54 .
	gmask
 = 
FIO_OPT_G_RWMIX
,

57 .
	g«me
 = "Verify",

58 .
	gmask
 = 
FIO_OPT_G_VERIFY
,

61 .
	g«me
 = "Trim",

62 .
	gmask
 = 
FIO_OPT_G_TRIM
,

65 .
	g«me
 = "I/O Logging",

66 .
	gmask
 = 
FIO_OPT_G_IOLOG
,

69 .
	g«me
 = "I/O Depth",

70 .
	gmask
 = 
FIO_OPT_G_IO_DEPTH
,

73 .
	g«me
 = "I/O Flow",

74 .
	gmask
 = 
FIO_OPT_G_IO_FLOW
,

77 .
	g«me
 = "Description",

78 .
	gmask
 = 
FIO_OPT_G_DESC
,

81 .
	g«me
 = "Filename",

82 .
	gmask
 = 
FIO_OPT_G_FILENAME
,

85 .
	g«me
 = "General I/O",

86 .
	gmask
 = 
FIO_OPT_G_IO_BASIC
,

89 .
	g«me
 = "Cgroups",

90 .
	gmask
 = 
FIO_OPT_G_CGROUP
,

93 .
	g«me
 = "Runtime",

94 .
	gmask
 = 
FIO_OPT_G_RUNTIME
,

97 .
	g«me
 = "Process",

98 .
	gmask
 = 
FIO_OPT_G_PROCESS
,

101 .
	g«me
 = "Job credentials /Öriority",

102 .
	gmask
 = 
FIO_OPT_G_CRED
,

105 .
	g«me
 = "Clock settings",

106 .
	gmask
 = 
FIO_OPT_G_CLOCK
,

109 .
	g«me
 = "I/O Type",

110 .
	gmask
 = 
FIO_OPT_G_IO_TYPE
,

113 .
	g«me
 = "I/O Thinktime",

114 .
	gmask
 = 
FIO_OPT_G_THINKTIME
,

117 .
	g«me
 = "Randomizations",

118 .
	gmask
 = 
FIO_OPT_G_RANDOM
,

121 .
	g«me
 = "I/O buffers",

122 .
	gmask
 = 
FIO_OPT_G_IO_BUF
,

125 .
	g«me
 = "TiobenchÖrofile",

126 .
	gmask
 = 
FIO_OPT_G_TIOBENCH
,

129 .
	g«me
 = "Error handling",

130 .
	gmask
 = 
FIO_OPT_G_ERR
,

133 .
	g«me
 = "Ext4 defrag I/OÉngine",

134 .
	gmask
 = 
FIO_OPT_G_E4DEFRAG
,

137 .
	g«me
 = "Network I/OÉngine",

138 .
	gmask
 = 
FIO_OPT_G_NETIO
,

141 .
	g«me
 = "RDMA I/OÉngine",

142 .
	gmask
 = 
FIO_OPT_G_RDMA
,

145 .
	g«me
 = "librpma I/OÉngines",

146 .
	gmask
 = 
FIO_OPT_G_LIBRPMA
,

149 .
	g«me
 = "libaio I/OÉngine",

150 .
	gmask
 = 
FIO_OPT_G_LIBAIO
,

153 .
	g«me
 = "ACT AerospikeÜike benchmarkÖrofile",

154 .
	gmask
 = 
FIO_OPT_G_ACT
,

157 .
	g«me
 = "LatencyÖrofiling",

158 .
	gmask
 = 
FIO_OPT_G_LATPROF
,

161 .
	g«me
 = "RBD I/OÉngine",

162 .
	gmask
 = 
FIO_OPT_G_RBD
,

165 .
	g«me
 = "GlusterFS I/OÉngine",

166 .
	gmask
 = 
FIO_OPT_G_GFAPI
,

169 .
	g«me
 = "MTD I/OÉngine",

170 .
	gmask
 = 
FIO_OPT_G_MTD
,

173 .
	g«me
 = "libhdfs I/OÉngine",

174 .
	gmask
 = 
FIO_OPT_G_HDFS
,

177 .
	g«me
 = "NBD I/OÉngine",

178 .
	gmask
 = 
FIO_OPT_G_NBD
,

181 .
	g«me
 = "libcufile I/OÉngine",

182 .
	gmask
 = 
FIO_OPT_G_LIBCUFILE
,

185 .
	g«me
 = "DAOS File System (dfs) I/OÉngine",

186 .
	gmask
 = 
FIO_OPT_G_DFS
,

189 .
	g«me
 = "NFS I/OÉngine",

190 .
	gmask
 = 
FIO_OPT_G_NFS
,

193 .
	g«me
 = 
NULL
,

197 c⁄° 
›t_group
 *
	$group_‰om_mask
(c⁄° 
›t_group
 *
ogs
,

198 
uöt64_t
 *
mask
,

199 
uöt64_t
 
öv_mask
)

201 
i
;

203 i‡(*
mask
 =
öv_mask
 || !*mask)

204  
NULL
;

206 
i
 = 0; 
ogs
[i].
«me
; i++) {

207 c⁄° 
›t_group
 *
og
 = &
ogs
[
i
];

209 i‡(*
mask
 & 
og
->mask) {

210 *
mask
 &~(
og
->mask);

211  
og
;

215  
NULL
;

216 
	}
}

218 c⁄° 
›t_group
 *
	$›t_group_‰om_mask
(
uöt64_t
 *
mask
)

220  
	`group_‰om_mask
(
fio_›t_groups
, 
mask
, 
FIO_OPT_C_INVALID
);

221 
	}
}

223 c⁄° 
›t_group
 *
	$›t_group_ˇt_‰om_mask
(
uöt64_t
 *
mask
)

225 
	`compûëime_as£π
(
__FIO_OPT_G_NR
 <8 * (
uöt64_t
),

228  
	`group_‰om_mask
(
fio_›t_ˇt_groups
, 
mask
, 
FIO_OPT_G_INVALID
);

229 
	}
}

	@optgroup.h

1 #i‚de‡
FIO_OPT_GROUP_H


2 
	#FIO_OPT_GROUP_H


	)

4 
	s›t_group
 {

5 c⁄° *
	m«me
;

6 
uöt64_t
 
	mmask
;

9 
	e›t_ˇãg‹y
 {

10 
	m__FIO_OPT_C_GENERAL
 = 0,

11 
	m__FIO_OPT_C_IO
,

12 
	m__FIO_OPT_C_FILE
,

13 
	m__FIO_OPT_C_STAT
,

14 
	m__FIO_OPT_C_LOG
,

15 
	m__FIO_OPT_C_PROFILE
,

16 
	m__FIO_OPT_C_ENGINE
,

17 
	m__FIO_OPT_C_NR
,

19 
	mFIO_OPT_C_GENERAL
 = (1ULL << 
__FIO_OPT_C_GENERAL
),

20 
	mFIO_OPT_C_IO
 = (1ULL << 
__FIO_OPT_C_IO
),

21 
	mFIO_OPT_C_FILE
 = (1ULL << 
__FIO_OPT_C_FILE
),

22 
	mFIO_OPT_C_STAT
 = (1ULL << 
__FIO_OPT_C_STAT
),

23 
	mFIO_OPT_C_LOG
 = (1ULL << 
__FIO_OPT_C_LOG
),

24 
	mFIO_OPT_C_PROFILE
 = (1ULL << 
__FIO_OPT_C_PROFILE
),

25 
	mFIO_OPT_C_ENGINE
 = (1ULL << 
__FIO_OPT_C_ENGINE
),

26 
	mFIO_OPT_C_INVALID
 = (1ULL << 
__FIO_OPT_C_NR
),

29 
	e›t_ˇãg‹y_group
 {

30 
	m__FIO_OPT_G_RATE
 = 0,

31 
	m__FIO_OPT_G_ZONE
,

32 
	m__FIO_OPT_G_RWMIX
,

33 
	m__FIO_OPT_G_VERIFY
,

34 
	m__FIO_OPT_G_TRIM
,

35 
	m__FIO_OPT_G_IOLOG
,

36 
	m__FIO_OPT_G_IO_DEPTH
,

37 
	m__FIO_OPT_G_IO_FLOW
,

38 
	m__FIO_OPT_G_DESC
,

39 
	m__FIO_OPT_G_FILENAME
,

40 
	m__FIO_OPT_G_IO_BASIC
,

41 
	m__FIO_OPT_G_CGROUP
,

42 
	m__FIO_OPT_G_RUNTIME
,

43 
	m__FIO_OPT_G_PROCESS
,

44 
	m__FIO_OPT_G_CRED
,

45 
	m__FIO_OPT_G_CLOCK
,

46 
	m__FIO_OPT_G_IO_TYPE
,

47 
	m__FIO_OPT_G_THINKTIME
,

48 
	m__FIO_OPT_G_RANDOM
,

49 
	m__FIO_OPT_G_IO_BUF
,

50 
	m__FIO_OPT_G_TIOBENCH
,

51 
	m__FIO_OPT_G_ERR
,

52 
	m__FIO_OPT_G_E4DEFRAG
,

53 
	m__FIO_OPT_G_NETIO
,

54 
	m__FIO_OPT_G_RDMA
,

55 
	m__FIO_OPT_G_LIBRPMA
,

56 
	m__FIO_OPT_G_LIBAIO
,

57 
	m__FIO_OPT_G_ACT
,

58 
	m__FIO_OPT_G_LATPROF
,

59 
	m__FIO_OPT_G_RBD
,

60 
	m__FIO_OPT_G_HTTP
,

61 
	m__FIO_OPT_G_GFAPI
,

62 
	m__FIO_OPT_G_MTD
,

63 
	m__FIO_OPT_G_HDFS
,

64 
	m__FIO_OPT_G_SG
,

65 
	m__FIO_OPT_G_MMAP
,

66 
	m__FIO_OPT_G_ISCSI
,

67 
	m__FIO_OPT_G_NBD
,

68 
	m__FIO_OPT_G_IOURING
,

69 
	m__FIO_OPT_G_FILESTAT
,

70 
	m__FIO_OPT_G_NR
,

71 
	m__FIO_OPT_G_LIBCUFILE
,

72 
	m__FIO_OPT_G_DFS
,

73 
	m__FIO_OPT_G_NFS
,

74 
	m__FIO_OPT_G_WINDOWSAIO
,

75 
	m__FIO_OPT_G_XNVME
,

77 
	mFIO_OPT_G_RATE
 = (1ULL << 
__FIO_OPT_G_RATE
),

78 
	mFIO_OPT_G_ZONE
 = (1ULL << 
__FIO_OPT_G_ZONE
),

79 
	mFIO_OPT_G_RWMIX
 = (1ULL << 
__FIO_OPT_G_RWMIX
),

80 
	mFIO_OPT_G_VERIFY
 = (1ULL << 
__FIO_OPT_G_VERIFY
),

81 
	mFIO_OPT_G_TRIM
 = (1ULL << 
__FIO_OPT_G_TRIM
),

82 
	mFIO_OPT_G_IOLOG
 = (1ULL << 
__FIO_OPT_G_IOLOG
),

83 
	mFIO_OPT_G_IO_DEPTH
 = (1ULL << 
__FIO_OPT_G_IO_DEPTH
),

84 
	mFIO_OPT_G_IO_FLOW
 = (1ULL << 
__FIO_OPT_G_IO_FLOW
),

85 
	mFIO_OPT_G_DESC
 = (1ULL << 
__FIO_OPT_G_DESC
),

86 
	mFIO_OPT_G_FILENAME
 = (1ULL << 
__FIO_OPT_G_FILENAME
),

87 
	mFIO_OPT_G_IO_BASIC
 = (1ULL << 
__FIO_OPT_G_IO_BASIC
),

88 
	mFIO_OPT_G_CGROUP
 = (1ULL << 
__FIO_OPT_G_CGROUP
),

89 
	mFIO_OPT_G_RUNTIME
 = (1ULL << 
__FIO_OPT_G_RUNTIME
),

90 
	mFIO_OPT_G_PROCESS
 = (1ULL << 
__FIO_OPT_G_PROCESS
),

91 
	mFIO_OPT_G_CRED
 = (1ULL << 
__FIO_OPT_G_CRED
),

92 
	mFIO_OPT_G_CLOCK
 = (1ULL << 
__FIO_OPT_G_CLOCK
),

93 
	mFIO_OPT_G_IO_TYPE
 = (1ULL << 
__FIO_OPT_G_IO_TYPE
),

94 
	mFIO_OPT_G_THINKTIME
 = (1ULL << 
__FIO_OPT_G_THINKTIME
),

95 
	mFIO_OPT_G_RANDOM
 = (1ULL << 
__FIO_OPT_G_RANDOM
),

96 
	mFIO_OPT_G_IO_BUF
 = (1ULL << 
__FIO_OPT_G_IO_BUF
),

97 
	mFIO_OPT_G_TIOBENCH
 = (1ULL << 
__FIO_OPT_G_TIOBENCH
),

98 
	mFIO_OPT_G_ERR
 = (1ULL << 
__FIO_OPT_G_ERR
),

99 
	mFIO_OPT_G_E4DEFRAG
 = (1ULL << 
__FIO_OPT_G_E4DEFRAG
),

100 
	mFIO_OPT_G_NETIO
 = (1ULL << 
__FIO_OPT_G_NETIO
),

101 
	mFIO_OPT_G_RDMA
 = (1ULL << 
__FIO_OPT_G_RDMA
),

102 
	mFIO_OPT_G_LIBRPMA
 = (1ULL << 
__FIO_OPT_G_LIBRPMA
),

103 
	mFIO_OPT_G_LIBAIO
 = (1ULL << 
__FIO_OPT_G_LIBAIO
),

104 
	mFIO_OPT_G_ACT
 = (1ULL << 
__FIO_OPT_G_ACT
),

105 
	mFIO_OPT_G_LATPROF
 = (1ULL << 
__FIO_OPT_G_LATPROF
),

106 
	mFIO_OPT_G_RBD
 = (1ULL << 
__FIO_OPT_G_RBD
),

107 
	mFIO_OPT_G_HTTP
 = (1ULL << 
__FIO_OPT_G_HTTP
),

108 
	mFIO_OPT_G_GFAPI
 = (1ULL << 
__FIO_OPT_G_GFAPI
),

109 
	mFIO_OPT_G_MTD
 = (1ULL << 
__FIO_OPT_G_MTD
),

110 
	mFIO_OPT_G_HDFS
 = (1ULL << 
__FIO_OPT_G_HDFS
),

111 
	mFIO_OPT_G_SG
 = (1ULL << 
__FIO_OPT_G_SG
),

112 
	mFIO_OPT_G_MMAP
 = (1ULL << 
__FIO_OPT_G_MMAP
),

113 
	mFIO_OPT_G_INVALID
 = (1ULL << 
__FIO_OPT_G_NR
),

114 
	mFIO_OPT_G_ISCSI
 = (1ULL << 
__FIO_OPT_G_ISCSI
),

115 
	mFIO_OPT_G_NBD
 = (1ULL << 
__FIO_OPT_G_NBD
),

116 
	mFIO_OPT_G_NFS
 = (1ULL << 
__FIO_OPT_G_NFS
),

117 
	mFIO_OPT_G_IOURING
 = (1ULL << 
__FIO_OPT_G_IOURING
),

118 
	mFIO_OPT_G_FILESTAT
 = (1ULL << 
__FIO_OPT_G_FILESTAT
),

119 
	mFIO_OPT_G_LIBCUFILE
 = (1ULL << 
__FIO_OPT_G_LIBCUFILE
),

120 
	mFIO_OPT_G_DFS
 = (1ULL << 
__FIO_OPT_G_DFS
),

121 
	mFIO_OPT_G_WINDOWSAIO
 = (1ULL << 
__FIO_OPT_G_WINDOWSAIO
),

122 
	mFIO_OPT_G_XNVME
 = (1ULL << 
__FIO_OPT_G_XNVME
),

125 c⁄° 
›t_group
 *
›t_group_‰om_mask
(
uöt64_t
 *
mask
);

126 c⁄° 
›t_group
 *
›t_group_ˇt_‰om_mask
(
uöt64_t
 *
mask
);

	@options.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<uni°d.h
>

4 
	~<˘y≥.h
>

5 
	~<°rög.h
>

6 
	~<as£π.h
>

7 
	~<sys/°©.h
>

8 
	~<√töë/ö.h
>

10 
	~"fio.h
"

11 
	~"vîify.h
"

12 
	~"∑r£.h
"

13 
	~"lib/∑âîn.h
"

14 
	~"›ti⁄s.h
"

15 
	~"›tgroup.h
"

16 
	~"zbd.h
"

18 
	g˛õ¡_sockaddr_°r
[
INET6_ADDRSTRLEN
] = { 0 };

20 
	#cb_d©a_to_td
(
d©a
Ë
	`c⁄èöî_of
(d©a, 
thªad_d©a
, 
o
)

	)

22 c⁄° 
∑âîn_fmt_desc
 
	gfmt_desc
[] = {

24 .
fmt
 = "%o",

25 .
	gÀn
 = 
FIO_FIELD_SIZE
(
io_u
 *, 
off£t
),

26 .
	g∑°e
 = 
∑°e_blockoff


34 *
	$gë_›t_po°fix
(c⁄° *
°r
)

36 *
p
 = 
	`°r°r
(
°r
, ":");

38 i‡(!
p
)

39  
NULL
;

41 
p
++;

42 
	`°rù_bœnk_‰⁄t
(&
p
);

43 
	`°rù_bœnk_íd
(
p
);

44  
	`°rdup
(
p
);

45 
	}
}

47 
boﬁ
 
	$•lô_∑r£_di°r
(c⁄° *
°r
, *
vÆ
, *
˚¡î
)

49 *
˝
, *
p
;

50 
boﬁ
 
r
;

52 
p
 = 
	`°rdup
(
°r
);

53 i‡(!
p
)

54  
Ál£
;

56 
˝
 = 
	`°r°r
(
p
, ":");

57 
r
 = 
åue
;

58 i‡(
˝
) {

59 *
˝
 = '\0';

60 
˝
++;

61 
r
 = 
	`°r_to_Êﬂt
(
˝
, 
˚¡î
, 0);

63 
r
 =Ñ && 
	`°r_to_Êﬂt
(
p
, 
vÆ
, 0);

64 
	`‰ì
(
p
);

65  
r
;

66 
	}
}

68 
	$bs_cmp
(c⁄° *
p1
, c⁄° *
p2
)

70 c⁄° 
bs•lô
 *
b•1
 = 
p1
;

71 c⁄° 
bs•lô
 *
b•2
 = 
p2
;

73  (Ë
b•1
->
≥rc
 - (Ë
b•2
->perc;

74 
	}
}

76 
	$•lô_∑r£_ddú
(
thªad_›ti⁄s
 *
o
, 
•lô
 *split,

77 *
°r
, 
boﬁ
 
absﬁuã
, 
max_•lôs
)

79 
≥rc
;

80 
i
;

81 
vÆ
;

82 *
‚ame
;

84 
•lô
->
ƒ
 = 0;

86 
i
 = 0;

87 (
‚ame
 = 
	`°r£p
(&
°r
, ":")Ë!
NULL
) {

88 *
≥rc_°r
;

90 i‡(!
	`°æí
(
‚ame
))

93 
≥rc_°r
 = 
	`°r°r
(
‚ame
, "/");

94 i‡(
≥rc_°r
) {

95 *
≥rc_°r
 = '\0';

96 
≥rc_°r
++;

97 i‡(
absﬁuã
) {

98 i‡(
	`°r_to_decimÆ
(
≥rc_°r
, &
vÆ
, 1, 
o
, 0, 0)) {

99 
	`log_îr
("fio: split conversion failed\n");

102 
≥rc
 = 
vÆ
;

104 
≥rc
 = 
	`©oi
(
≥rc_°r
);

105 i‡(
≥rc
 > 100)

106 
≥rc
 = 100;

107 i‡(!
≥rc
)

108 
≥rc
 = -1U;

111 i‡(
absﬁuã
)

112 
≥rc
 = 0;

114 
≥rc
 = -1U;

117 i‡(
	`°r_to_decimÆ
(
‚ame
, &
vÆ
, 1, 
o
, 0, 0)) {

118 
	`log_îr
("fio: split conversion failed\n");

122 
•lô
->
vÆ1
[
i
] = 
vÆ
;

123 
•lô
->
vÆ2
[
i
] = 
≥rc
;

124 
i
++;

125 i‡(
i
 =
max_•lôs
) {

126 
	`log_îr
("fio: hô max o‡%d s∂ôÉ¡rõs\n", 
i
);

131 
•lô
->
ƒ
 = 
i
;

133 
	}
}

135 
	$bs•lô_ddú
(
thªad_›ti⁄s
 *
o
, *
eo
,

136 
fio_ddú
 
ddú
, *
°r
, 
boﬁ
 
d©a
)

138 
i
, 
≥rc
, 
≥rc_missög
;

139 
max_bs
, 
mö_bs
;

140 
•lô
 split;

142 
	`mem£t
(&
•lô
, 0, (split));

144 i‡(
	`•lô_∑r£_ddú
(
o
, &
•lô
, 
°r
, 
d©a
, 
BSSPLIT_MAX
))

146 i‡(!
•lô
.
ƒ
)

149 
max_bs
 = 0;

150 
mö_bs
 = -1;

151 
o
->
bs•lô
[
ddú
] = 
	`mÆloc
(
•lô
.
ƒ
 * (bssplit));

152 
o
->
bs•lô_ƒ
[
ddú
] = 
•lô
.
ƒ
;

153 
i
 = 0; i < 
•lô
.
ƒ
; i++) {

154 i‡(
•lô
.
vÆ1
[
i
] > 
max_bs
)

155 
max_bs
 = 
•lô
.
vÆ1
[
i
];

156 i‡(
•lô
.
vÆ1
[
i
] < 
mö_bs
)

157 
mö_bs
 = 
•lô
.
vÆ1
[
i
];

159 
o
->
bs•lô
[
ddú
][
i
].
bs
 = 
•lô
.
vÆ1
[i];

160 
o
->
bs•lô
[
ddú
][
i
].
≥rc
 =
•lô
.
vÆ2
[i];

166 
≥rc
 = 
≥rc_missög
 = 0;

167 
i
 = 0; i < 
o
->
bs•lô_ƒ
[
ddú
]; i++) {

168 
bs•lô
 *
b•
 = &
o
->bs•lô[
ddú
][
i
];

170 i‡(
b•
->
≥rc
 == -1U)

171 
≥rc_missög
++;

173 
≥rc
 +
b•
->perc;

176 i‡(
≥rc
 > 100 && 
≥rc_missög
 > 1) {

177 
	`log_îr
("fio: bssplitÖercentagesáddÅo moreÅhan 100%%\n");

178 
	`‰ì
(
o
->
bs•lô
[
ddú
]);

179 
o
->
bs•lô
[
ddú
] = 
NULL
;

187 i‡(
≥rc_missög
) {

188 i‡(
≥rc_missög
 =1 && 
o
->
bs•lô_ƒ
[
ddú
] == 1)

189 
≥rc
 = 100;

190 
i
 = 0; i < 
o
->
bs•lô_ƒ
[
ddú
]; i++) {

191 
bs•lô
 *
b•
 = &
o
->bs•lô[
ddú
][
i
];

193 i‡(
b•
->
≥rc
 == -1U)

194 
b•
->
≥rc
 = (100 -ÖîcË/ 
≥rc_missög
;

198 
o
->
mö_bs
[
ddú
] = min_bs;

199 
o
->
max_bs
[
ddú
] = max_bs;

204 
	`qs‹t
(
o
->
bs•lô
[
ddú
], o->
bs•lô_ƒ
[ddú], (bs•lô), 
bs_cmp
);

206 
	}
}

208 
	$°r_•lô_∑r£
(
thªad_d©a
 *
td
, *
°r
,

209 
•lô_∑r£_‚
 *
‚
, *
eo
, 
boﬁ
 
d©a
)

211 *
odú
, *
ddú
;

212 
ªt
 = 0;

214 
odú
 = 
	`°rchr
(
°r
, ',');

215 i‡(
odú
) {

216 
ddú
 = 
	`°rchr
(
odú
 + 1, ',');

217 i‡(
ddú
) {

218 
ªt
 = 
	`‚
(&
td
->
o
, 
eo
, 
DDIR_TRIM
, 
ddú
 + 1, 
d©a
);

219 i‡(!
ªt
)

220 *
ddú
 = '\0';

222 *
›
;

224 
›
 = 
	`°rdup
(
odú
 + 1);

225 
ªt
 = 
	`‚
(&
td
->
o
, 
eo
, 
DDIR_TRIM
, 
›
, 
d©a
);

227 
	`‰ì
(
›
);

229 i‡(!
ªt
)

230 
ªt
 = 
	`‚
(&
td
->
o
, 
eo
, 
DDIR_WRITE
, 
odú
 + 1, 
d©a
);

231 i‡(!
ªt
) {

232 *
odú
 = '\0';

233 
ªt
 = 
	`‚
(&
td
->
o
, 
eo
, 
DDIR_READ
, 
°r
, 
d©a
);

236 *
›
;

238 
›
 = 
	`°rdup
(
°r
);

239 
ªt
 = 
	`‚
(&
td
->
o
, 
eo
, 
DDIR_WRITE
, 
›
, 
d©a
);

240 
	`‰ì
(
›
);

242 i‡(!
ªt
) {

243 
›
 = 
	`°rdup
(
°r
);

244 
ªt
 = 
	`‚
(&
td
->
o
, 
eo
, 
DDIR_TRIM
, 
›
, 
d©a
);

245 
	`‰ì
(
›
);

247 i‡(!
ªt
)

248 
ªt
 = 
	`‚
(&
td
->
o
, 
eo
, 
DDIR_READ
, 
°r
, 
d©a
);

251  
ªt
;

252 
	}
}

254 
	$°r_bs•lô_cb
(*
d©a
, c⁄° *
öput
)

256 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

257 *
°r
, *
p
;

258 
ªt
 = 0;

260 
p
 = 
°r
 = 
	`°rdup
(
öput
);

262 
	`°rù_bœnk_‰⁄t
(&
°r
);

263 
	`°rù_bœnk_íd
(
°r
);

265 
ªt
 = 
	`°r_•lô_∑r£
(
td
, 
°r
, 
bs•lô_ddú
, 
NULL
, 
Ál£
);

267 i‡(
	`∑r£_dryrun
()) {

268 
i
;

270 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

271 
	`‰ì
(
td
->
o
.
bs•lô
[
i
]);

272 
td
->
o
.
bs•lô
[
i
] = 
NULL
;

273 
td
->
o
.
bs•lô_ƒ
[
i
] = 0;

277 
	`‰ì
(
p
);

278  
ªt
;

279 
	}
}

281 
	$∑r£_cmd¥io_bs•lô_íåy
(
thªad_›ti⁄s
 *
o
,

282 
•lô_¥io
 *
íåy
, *
°r
)

284 
m©ches
 = 0;

285 *
bs_°r
 = 
NULL
;

286 
bs_vÆ
;

287 
≥rc
 = 0, 
˛ass
, 
Àvñ
;

295 
m©ches
 = 
	`ssˇnf
(
°r
, "%m[^/]/%u/%u/%u", &
bs_°r
, &
≥rc
, &
˛ass
, &
Àvñ
);

296 i‡(
m©ches
 < 1) {

297 
	`log_îr
("fio: invalid cmdprio_bssplit format\n");

301 i‡(
	`°r_to_decimÆ
(
bs_°r
, &
bs_vÆ
, 1, 
o
, 0, 0)) {

302 
	`log_îr
("fio: split conversion failed\n");

303 
	`‰ì
(
bs_°r
);

306 
	`‰ì
(
bs_°r
);

308 
íåy
->
bs
 = 
bs_vÆ
;

309 
íåy
->
≥rc
 = 
	`mö
(perc, 100u);

310 
íåy
->
¥io
 = -1;

311 
m©ches
) {

316 
˛ass
 = 
	`mö
(˛ass, (Ë
IOPRIO_MAX_PRIO_CLASS
);

317 
Àvñ
 = 
	`mö
÷evñ, (Ë
IOPRIO_MAX_PRIO
);

318 
íåy
->
¥io
 = 
	`i›rio_vÆue
(
˛ass
, 
Àvñ
);

321 
	`log_îr
("fio: invalid cmdprio_bssplit format\n");

326 
	}
}

333 
	$fio_•lô_¥io_cmp
(c⁄° *
p1
, c⁄° *
p2
)

335 c⁄° 
•lô_¥io
 *
tmp1
 = 
p1
;

336 c⁄° 
•lô_¥io
 *
tmp2
 = 
p2
;

338 i‡(
tmp1
->
bs
 > 
tmp2
->bs)

340 i‡(
tmp1
->
bs
 < 
tmp2
->bs)

343 
	}
}

345 
	$•lô_∑r£_¥io_ddú
(
thªad_›ti⁄s
 *
o
, 
•lô_¥io
 **
íåõs
,

346 *
ƒ_íåõs
, *
°r
)

348 
•lô_¥io
 *
tmp_íåõs
;

349 
ƒ_bs•lôs
;

350 *
°r_˝y
, *
p
, *
‚ame
;

353 
p
 = 
°r_˝y
 = 
	`°rdup
(
°r
);

354 i‡(!
p
)

357 
ƒ_bs•lôs
 = 0;

358 (
‚ame
 = 
	`°r£p
(&
°r_˝y
, ":")Ë!
NULL
) {

359 i‡(!
	`°æí
(
‚ame
))

361 
ƒ_bs•lôs
++;

363 
	`‰ì
(
p
);

365 i‡(
ƒ_bs•lôs
 > 
BSSPLIT_MAX
) {

366 
	`log_îr
("fio:Åoo many cmdprio_bssplitÉntries\n");

370 
tmp_íåõs
 = 
	`ˇŒoc
(
ƒ_bs•lôs
, (*tmp_entries));

371 i‡(!
tmp_íåõs
)

374 
ƒ_bs•lôs
 = 0;

375 (
‚ame
 = 
	`°r£p
(&
°r
, ":")Ë!
NULL
) {

376 
•lô_¥io
 *
íåy
;

378 i‡(!
	`°æí
(
‚ame
))

381 
íåy
 = &
tmp_íåõs
[
ƒ_bs•lôs
];

383 i‡(
	`∑r£_cmd¥io_bs•lô_íåy
(
o
, 
íåy
, 
‚ame
)) {

384 
	`log_îr
("fio: failedÅoÖarse cmdprio_bssplitÉntry\n");

385 
	`‰ì
(
tmp_íåõs
);

390 i‡(
íåy
->
≥rc
)

391 
ƒ_bs•lôs
++;

394 
	`qs‹t
(
tmp_íåõs
, 
ƒ_bs•lôs
, (*tmp_entries),

395 
fio_•lô_¥io_cmp
);

397 *
íåõs
 = 
tmp_íåõs
;

398 *
ƒ_íåõs
 = 
ƒ_bs•lôs
;

401 
	}
}

403 
	$°r2îr‹
(*
°r
)

405 c⁄° *
îr
[] = { "EPERM", "ENOENT", "ESRCH", "EINTR", "EIO",

413 
i
 = 0, 
num
 = (
îr
) / (*);

415 
i
 < 
num
) {

416 i‡(!
	`°rcmp
(
îr
[
i
], 
°r
))

417  
i
 + 1;

418 
i
++;

421 
	}
}

423 
	$ign‹e_îr‹_ty≥
(
thªad_d©a
 *
td
, 
îr‹_ty≥_bô
 
ëy≥
,

424 *
°r
)

426 
i
;

427 *
îr‹
;

428 *
‚ame
;

430 i‡(
ëy≥
 >
ERROR_TYPE_CNT
) {

431 
	`log_îr
("IllegalÉrrorÅype\n");

435 
td
->
o
.
ign‹e_îr‹_ƒ
[
ëy≥
] = 4;

436 
îr‹
 = 
	`ˇŒoc
(4, ());

438 
i
 = 0;

439 (
‚ame
 = 
	`°r£p
(&
°r
, ":")Ë!
NULL
) {

441 i‡(!
	`°æí
(
‚ame
))

447 i‡(
i
 =
td
->
o
.
ign‹e_îr‹_ƒ
[
ëy≥
]) {

448 
td
->
o
.
ign‹e_îr‹_ƒ
[
ëy≥
] <<= 1;

449 
îr‹
 = 
	`ªÆloc
”º‹, 
td
->
o
.
ign‹e_îr‹_ƒ
[
ëy≥
]

452 i‡(
‚ame
[0] == 'E') {

453 
îr‹
[
i
] = 
	`°r2îr‹
(
‚ame
);

455 
îr‹
[
i
] = 
	`©oi
(
‚ame
);

456 i‡(
îr‹
[
i
] < 0)

457 
îr‹
[
i
] = -error[i];

459 i‡(!
îr‹
[
i
]) {

460 
	`log_îr
("UnknownÉrror %s,Ölease useÇumber value\n",

461 
‚ame
);

462 
td
->
o
.
ign‹e_îr‹_ƒ
[
ëy≥
] = 0;

463 
	`‰ì
(
îr‹
);

466 
i
++;

468 i‡(
i
) {

469 
td
->
o
.
c⁄töue_⁄_îr‹
 |1 << 
ëy≥
;

470 
td
->
o
.
ign‹e_îr‹_ƒ
[
ëy≥
] = 
i
;

471 
td
->
o
.
ign‹e_îr‹
[
ëy≥
] = 
îr‹
;

473 
td
->
o
.
ign‹e_îr‹_ƒ
[
ëy≥
] = 0;

474 
	`‰ì
(
îr‹
);

479 
	}
}

481 
	$°r_ª∂ay_skù_cb
(*
d©a
, c⁄° *
öput
)

483 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

484 *
°r
, *
p
, *
n
;

485 
ªt
 = 0;

487 i‡(
	`∑r£_dryrun
())

490 
p
 = 
°r
 = 
	`°rdup
(
öput
);

492 
	`°rù_bœnk_‰⁄t
(&
°r
);

493 
	`°rù_bœnk_íd
(
°r
);

495 
p
) {

496 
n
 = 
	`°rchr
(
p
, ',');

497 i‡(
n
)

498 *
n
++ = '\0';

499 i‡(!
	`°rcmp
(
p
, "read"))

500 
td
->
o
.
ª∂ay_skù
 |1u << 
DDIR_READ
;

501 i‡(!
	`°rcmp
(
p
, "write"))

502 
td
->
o
.
ª∂ay_skù
 |1u << 
DDIR_WRITE
;

503 i‡(!
	`°rcmp
(
p
, "trim"))

504 
td
->
o
.
ª∂ay_skù
 |1u << 
DDIR_TRIM
;

505 i‡(!
	`°rcmp
(
p
, "sync"))

506 
td
->
o
.
ª∂ay_skù
 |1u << 
DDIR_SYNC
;

508 
	`log_îr
("Unknow¿skùÅy≥: %s\n", 
p
);

509 
ªt
 = 1;

512 
p
 = 
n
;

514 
	`‰ì
(
°r
);

515  
ªt
;

516 
	}
}

518 
	$°r_ign‹e_îr‹_cb
(*
d©a
, c⁄° *
öput
)

520 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

521 *
°r
, *
p
, *
n
;

522 
ªt
 = 1;

523 
îr‹_ty≥_bô
 
ty≥
 = 0;

525 i‡(
	`∑r£_dryrun
())

528 
p
 = 
°r
 = 
	`°rdup
(
öput
);

530 
	`°rù_bœnk_‰⁄t
(&
°r
);

531 
	`°rù_bœnk_íd
(
°r
);

533 
p
) {

534 
n
 = 
	`°rchr
(
p
, ',');

535 i‡(
n
)

536 *
n
++ = '\0';

537 
ªt
 = 
	`ign‹e_îr‹_ty≥
(
td
, 
ty≥
, 
p
);

538 i‡(
ªt
)

540 
p
 = 
n
;

541 
ty≥
++;

543 
	`‰ì
(
°r
);

544  
ªt
;

545 
	}
}

547 
	$°r_rw_cb
(*
d©a
, c⁄° *
°r
)

549 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

550 
thªad_›ti⁄s
 *
o
 = &
td
->o;

551 *
ƒ
;

553 i‡(
	`∑r£_dryrun
())

556 
o
->
ddú_£q_ƒ
 = 1;

557 
o
->
ddú_£q_add
 = 0;

559 
ƒ
 = 
	`gë_›t_po°fix
(
°r
);

560 i‡(!
ƒ
)

563 i‡(
	`td_øndom
(
td
))

564 
o
->
ddú_£q_ƒ
 = 
	`©oi
(
ƒ
);

566 
vÆ
;

568 i‡(
	`°r_to_decimÆ
(
ƒ
, &
vÆ
, 1, 
o
, 0, 0)) {

569 
	`log_îr
("fio:ÑwÖostfixÖarsing failed\n");

570 
	`‰ì
(
ƒ
);

574 
o
->
ddú_£q_add
 = 
vÆ
;

577 
	`‰ì
(
ƒ
);

579 
	}
}

581 
	$°r_mem_cb
(*
d©a
, c⁄° *
mem
)

583 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

585 i‡(
td
->
o
.
mem_ty≥
 =
MEM_MMAPHUGE
 ||Åd->o.mem_ty≥ =
MEM_MMAP
 ||

586 
td
->
o
.
mem_ty≥
 =
MEM_MMAPSHARED
)

587 
td
->
o
.
mm≠fûe
 = 
	`gë_›t_po°fix
(
mem
);

590 
	}
}

592 
	$fio_˛ock_sour˚_cb
(*
d©a
, c⁄° *
°r
)

594 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

596 
fio_˛ock_sour˚
 = 
td
->
o
.
˛ocksour˚
;

597 
fio_˛ock_sour˚_£t
 = 1;

598 
	`fio_˛ock_öô
();

600 
	}
}

602 
	$°r_rwmix_ªad_cb
(*
d©a
, *
vÆ
)

604 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

606 
td
->
o
.
rwmix
[
DDIR_READ
] = *
vÆ
;

607 
td
->
o
.
rwmix
[
DDIR_WRITE
] = 100 - *
vÆ
;

609 
	}
}

611 
	$°r_rwmix_wrôe_cb
(*
d©a
, *
vÆ
)

613 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

615 
td
->
o
.
rwmix
[
DDIR_WRITE
] = *
vÆ
;

616 
td
->
o
.
rwmix
[
DDIR_READ
] = 100 - *
vÆ
;

618 
	}
}

620 
	$°r_exôÆl_cb
()

622 
exôÆl_⁄_ãrmö©e
 = 
åue
;

624 
	}
}

626 #ifde‡
FIO_HAVE_CPU_AFFINITY


627 
	$fio_˝us_•lô
(
os_˝u_mask_t
 *
mask
, 
˝u_ödex
)

629 
i
, 
ödex
, 
˝us_ö_mask
;

630 c⁄° 
max_˝u
 = 
	`˝us_⁄löe
();

632 
˝us_ö_mask
 = 
	`fio_˝u_cou¡
(
mask
);

633 i‡(!
˝us_ö_mask
)

636 
˝u_ödex
 = cpu_ödex % 
˝us_ö_mask
;

638 
ödex
 = 0;

639 
i
 = 0; i < 
max_˝u
; i++) {

640 i‡(!
	`fio_˝u_is£t
(
mask
, 
i
))

643 i‡(
˝u_ödex
 !
ödex
)

644 
	`fio_˝u_˛ór
(
mask
, 
i
);

646 
ödex
++;

649  
	`fio_˝u_cou¡
(
mask
);

650 
	}
}

652 
	$°r_˝umask_cb
(*
d©a
, *
vÆ
)

654 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

655 
i
;

656 
max_˝u
;

657 
ªt
;

659 i‡(
	`∑r£_dryrun
())

662 
ªt
 = 
	`fio_˝u£t_öô
(&
td
->
o
.
˝umask
);

663 i‡(
ªt
 < 0) {

664 
	`log_îr
("fio: cpuset_init failed\n");

665 
	`td_vîr‹
(
td
, 
ªt
, "fio_cpuset_init");

669 
max_˝u
 = 
	`˝us_⁄löe
();

671 
i
 = 0; i < () * 8; i++) {

672 i‡((1 << 
i
Ë& *
vÆ
) {

673 i‡(
i
 >
max_˝u
) {

674 
	`log_îr
("fio: CPU %dÅoÿœrgê(max=%ld)\n", 
i
,

675 
max_˝u
 - 1);

678 
	`d¥öt
(
FD_PARSE
, "£à˝uáŒowed %d\n", 
i
);

679 
	`fio_˝u_£t
(&
td
->
o
.
˝umask
, 
i
);

684 
	}
}

686 
	$£t_˝us_Ælowed
(
thªad_d©a
 *
td
, 
os_˝u_mask_t
 *
mask
,

687 c⁄° *
öput
)

689 *
˝u
, *
°r
, *
p
;

690 
max_˝u
;

691 
ªt
 = 0;

693 
ªt
 = 
	`fio_˝u£t_öô
(
mask
);

694 i‡(
ªt
 < 0) {

695 
	`log_îr
("fio: cpuset_init failed\n");

696 
	`td_vîr‹
(
td
, 
ªt
, "fio_cpuset_init");

700 
p
 = 
°r
 = 
	`°rdup
(
öput
);

702 
	`°rù_bœnk_‰⁄t
(&
°r
);

703 
	`°rù_bœnk_íd
(
°r
);

705 
max_˝u
 = 
	`˝us_⁄löe
();

707 (
˝u
 = 
	`°r£p
(&
°r
, ",")Ë!
NULL
) {

708 *
°r2
, *
˝u2
;

709 
i˝u
, 
i˝u2
;

711 i‡(!
	`°æí
(
˝u
))

714 
°r2
 = 
˝u
;

715 
i˝u2
 = -1;

716 (
˝u2
 = 
	`°r£p
(&
°r2
, "-")Ë!
NULL
) {

717 i‡(!
	`°æí
(
˝u2
))

720 
i˝u2
 = 
	`©oi
(
˝u2
);

723 
i˝u
 = 
	`©oi
(
˝u
);

724 i‡(
i˝u2
 == -1)

725 
i˝u2
 = 
i˝u
;

726 
i˝u
 <
i˝u2
) {

727 i‡(
i˝u
 >
FIO_MAX_CPUS
) {

728 
	`log_îr
("fio: your OS only supports upÅo"

729 " %d CPUs\n", (Ë
FIO_MAX_CPUS
);

730 
ªt
 = 1;

733 i‡(
i˝u
 >
max_˝u
) {

734 
	`log_îr
("fio: CPU %dÅooÜarge (max=%ld)\n",

735 
i˝u
, 
max_˝u
 - 1);

736 
ªt
 = 1;

740 
	`d¥öt
(
FD_PARSE
, "£à˝uáŒowed %d\n", 
i˝u
);

741 
	`fio_˝u_£t
(
mask
, 
i˝u
);

742 
i˝u
++;

744 i‡(
ªt
)

748 
	`‰ì
(
p
);

749  
ªt
;

750 
	}
}

752 
	$°r_˝us_Ælowed_cb
(*
d©a
, c⁄° *
öput
)

754 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

756 i‡(
	`∑r£_dryrun
())

759  
	`£t_˝us_Ælowed
(
td
, &td->
o
.
˝umask
, 
öput
);

760 
	}
}

762 
	$°r_vîify_˝us_Ælowed_cb
(*
d©a
, c⁄° *
öput
)

764 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

766 i‡(
	`∑r£_dryrun
())

769  
	`£t_˝us_Ælowed
(
td
, &td->
o
.
vîify_˝umask
, 
öput
);

770 
	}
}

772 #ifde‡
CONFIG_ZLIB


773 
	$°r_log_˝us_Ælowed_cb
(*
d©a
, c⁄° *
öput
)

775 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

777 i‡(
	`∑r£_dryrun
())

780  
	`£t_˝us_Ælowed
(
td
, &td->
o
.
log_gz_˝umask
, 
öput
);

781 
	}
}

786 #ifde‡
CONFIG_LIBNUMA


787 
	$°r_numa_˝unodes_cb
(*
d©a
, *
öput
)

789 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

790 
bômask
 *
vîify_bômask
;

792 i‡(
	`∑r£_dryrun
())

800 
vîify_bômask
 = 
	`numa_∑r£_node°rög
(
öput
);

801 i‡(
vîify_bômask
 =
NULL
) {

802 
	`log_îr
("fio:Çuma_parse_nodestring failed\n");

803 
	`td_vîr‹
(
td
, 1, "str_numa_cpunodes_cb");

806 
	`numa_‰ì_nodemask
(
vîify_bômask
);

808 
td
->
o
.
numa_˝unodes
 = 
	`°rdup
(
öput
);

810 
	}
}

812 
	$°r_numa_mpﬁ_cb
(*
d©a
, *
öput
)

814 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

815 c⁄° * c⁄° 
pﬁicy_ty≥s
[] =

816 { "deÁu…", "¥e„r", "böd", "öãæóve", "loˇl", 
NULL
 };

817 
i
;

818 *
nodñi°
;

819 
bômask
 *
vîify_bômask
;

821 i‡(
	`∑r£_dryrun
())

824 
nodñi°
 = 
	`°rchr
(
öput
, ':');

825 i‡(
nodñi°
) {

827 *
nodñi°
++ = '\0';

830 
i
 = 0; i <
MPOL_LOCAL
; i++) {

831 i‡(!
	`°rcmp
(
öput
, 
pﬁicy_ty≥s
[
i
])) {

832 
td
->
o
.
numa_mem_mode
 = 
i
;

836 i‡(
i
 > 
MPOL_LOCAL
) {

837 
	`log_îr
("fio: memoryÖolicy should be: default,Örefer, bind, interleave,Üocal\n");

838 
out
;

841 
td
->
o
.
numa_mem_mode
) {

842 
MPOL_PREFERRED
:

846 i‡(
nodñi°
) {

847 *
ª°
 = 
nodñi°
;

848 
	`isdigô
(*
ª°
))

849 
ª°
++;

850 i‡(*
ª°
) {

851 
	`log_îr
("fio: oneÇode only for \'prefer\'\n");

852 
out
;

855 
	`log_îr
("fio: oneÇode isÇeeded for \'prefer\'\n");

856 
out
;

859 
MPOL_INTERLEAVE
:

863 i‡(!
nodñi°
)

864 
nodñi°
 = 
	`°rdup
("all");

866 
MPOL_LOCAL
:

867 
MPOL_DEFAULT
:

871 i‡(
nodñi°
) {

872 
	`log_îr
("fio: NOÇodelist for \'local\'\n");

873 
out
;

876 
MPOL_BIND
:

880 i‡(!
nodñi°
) {

881 
	`log_îr
("fio:áÇodelist isÇeeded for \'bind\'\n");

882 
out
;

893 
td
->
o
.
numa_mem_mode
) {

894 
MPOL_PREFERRED
:

895 
td
->
o
.
numa_mem_¥e„r_node
 = 
	`©oi
(
nodñi°
);

897 
MPOL_INTERLEAVE
:

898 
MPOL_BIND
:

899 
vîify_bômask
 = 
	`numa_∑r£_node°rög
(
nodñi°
);

900 i‡(
vîify_bômask
 =
NULL
) {

901 
	`log_îr
("fio:Çuma_parse_nodestring failed\n");

902 
	`td_vîr‹
(
td
, 1, "str_numa_memnodes_cb");

905 
td
->
o
.
numa_memnodes
 = 
	`°rdup
(
nodñi°
);

906 
	`numa_‰ì_nodemask
(
vîify_bômask
);

909 
MPOL_LOCAL
:

910 
MPOL_DEFAULT
:

916 
out
:

918 
	}
}

921 
	$°r_f°_cb
(*
d©a
, c⁄° *
°r
)

923 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

924 
vÆ
;

925 
˚¡î
 = -1;

926 
boﬁ
 
d⁄e
 = 
Ál£
;

927 *
ƒ
;

929 
td
->
fûe_£rvi˚_ƒ
 = 1;

931 
td
->
o
.
fûe_£rvi˚_ty≥
) {

932 
FIO_FSERVICE_RANDOM
:

933 
FIO_FSERVICE_RR
:

934 
FIO_FSERVICE_SEQ
:

935 
ƒ
 = 
	`gë_›t_po°fix
(
°r
);

936 i‡(
ƒ
) {

937 
td
->
fûe_£rvi˚_ƒ
 = 
	`©oi
(
ƒ
);

938 
	`‰ì
(
ƒ
);

940 
d⁄e
 = 
åue
;

942 
FIO_FSERVICE_ZIPF
:

943 
vÆ
 = 
FIO_DEF_ZIPF
;

945 
FIO_FSERVICE_PARETO
:

946 
vÆ
 = 
FIO_DEF_PARETO
;

948 
FIO_FSERVICE_GAUSS
:

949 
vÆ
 = 0.0;

952 
	`log_îr
("fio: bad fûê£rvi˚Åy≥: %d\n", 
td
->
o
.
fûe_£rvi˚_ty≥
);

956 i‡(
d⁄e
)

959 
ƒ
 = 
	`gë_›t_po°fix
(
°r
);

960 i‡(
ƒ
 && !
	`•lô_∑r£_di°r
“r, &
vÆ
, &
˚¡î
)) {

961 
	`log_îr
("fio: file serviceÅypeÑandomÖostfixÖarsing failed\n");

962 
	`‰ì
(
ƒ
);

966 
	`‰ì
(
ƒ
);

968 i‡(
˚¡î
 != -1 && (center < 0.00 || center > 1.00)) {

969 
	`log_îr
("fio: distribution center out ofÑange (0 <= center <= 1.0)\n");

972 
td
->
øndom_˚¡î
 = 
˚¡î
;

974 
td
->
o
.
fûe_£rvi˚_ty≥
) {

975 
FIO_FSERVICE_ZIPF
:

976 i‡(
vÆ
 == 1.00) {

977 
	`log_îr
("fio: zipfÅheta must be differentÅhan 1.0\n");

980 i‡(
	`∑r£_dryrun
())

982 
td
->
zùf_thëa
 = 
vÆ
;

984 
FIO_FSERVICE_PARETO
:

985 i‡(
vÆ
 <= 0.00 || val >= 1.00) {

986 
	`log_îr
("fio:Öareto input out ofÑange (0 < input < 1.0)\n");

989 i‡(
	`∑r£_dryrun
())

991 
td
->
∑ªto_h
 = 
vÆ
;

993 
FIO_FSERVICE_GAUSS
:

994 i‡(
vÆ
 < 0.00 || val >= 100.00) {

995 
	`log_îr
("fio:Çormal deviation out ofÑange (0 <= input < 100.0)\n");

998 i‡(
	`∑r£_dryrun
())

1000 
td
->
gauss_dev
 = 
vÆ
;

1005 
	}
}

1007 #ifde‡
CONFIG_SYNC_FILE_RANGE


1008 
	$°r_s‰_cb
(*
d©a
, c⁄° *
°r
)

1010 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

1011 *
ƒ
 = 
	`gë_›t_po°fix
(
°r
);

1013 
td
->
sync_fûe_ønge_ƒ
 = 1;

1014 i‡(
ƒ
) {

1015 
td
->
sync_fûe_ønge_ƒ
 = 
	`©oi
(
ƒ
);

1016 
	`‰ì
(
ƒ
);

1020 
	}
}

1023 
	$z⁄e_•lô_ddú
(
thªad_›ti⁄s
 *
o
, *
eo
,

1024 
fio_ddú
 
ddú
, *
°r
, 
boﬁ
 
absﬁuã
)

1026 
i
, 
≥rc
, 
≥rc_missög
, 
•îc
, 
•îc_missög
;

1027 
•lô
 split;

1029 
	`mem£t
(&
•lô
, 0, (split));

1031 i‡(
	`•lô_∑r£_ddú
(
o
, &
•lô
, 
°r
, 
absﬁuã
, 
ZONESPLIT_MAX
))

1033 i‡(!
•lô
.
ƒ
)

1036 
o
->
z⁄e_•lô
[
ddú
] = 
	`mÆloc
(
•lô
.
ƒ
 * (zone_split));

1037 
o
->
z⁄e_•lô_ƒ
[
ddú
] = 
•lô
.
ƒ
;

1038 
i
 = 0; i < 
•lô
.
ƒ
; i++) {

1039 
o
->
z⁄e_•lô
[
ddú
][
i
].
ac˚ss_≥rc
 = 
•lô
.
vÆ1
[i];

1040 i‡(
absﬁuã
)

1041 
o
->
z⁄e_•lô
[
ddú
][
i
].
size
 = 
•lô
.
vÆ2
[i];

1043 
o
->
z⁄e_•lô
[
ddú
][
i
].
size_≥rc
 = 
•lô
.
vÆ2
[i];

1049 
≥rc
 = 
≥rc_missög
 = 0;

1050 
•îc
 = 
•îc_missög
 = 0;

1051 
i
 = 0; i < 
o
->
z⁄e_•lô_ƒ
[
ddú
]; i++) {

1052 
z⁄e_•lô
 *
z•
 = &
o
->z⁄e_•lô[
ddú
][
i
];

1054 i‡(
z•
->
ac˚ss_≥rc
 =(
uöt8_t
) -1U)

1055 
≥rc_missög
++;

1057 
≥rc
 +
z•
->
ac˚ss_≥rc
;

1059 i‡(!
absﬁuã
) {

1060 i‡(
z•
->
size_≥rc
 =(
uöt8_t
) -1U)

1061 
•îc_missög
++;

1063 
•îc
 +
z•
->
size_≥rc
;

1067 i‡(
≥rc
 > 100 || 
•îc
 > 100) {

1068 
	`log_îr
("fio: zone_splitÖercentagesáddÅo moreÅhan 100%%\n");

1069 
	`‰ì
(
o
->
z⁄e_•lô
[
ddú
]);

1070 
o
->
z⁄e_•lô
[
ddú
] = 
NULL
;

1073 i‡(
≥rc
 < 100) {

1074 
	`log_îr
("fio:áccessÖercentage don'tádd upÅo 100 for zoned "

1075 "øndom di°ributi⁄ (gŸ=%u)\n", 
≥rc
);

1076 
	`‰ì
(
o
->
z⁄e_•lô
[
ddú
]);

1077 
o
->
z⁄e_•lô
[
ddú
] = 
NULL
;

1085 i‡(
≥rc_missög
) {

1086 i‡(
≥rc_missög
 =1 && 
o
->
z⁄e_•lô_ƒ
[
ddú
] == 1)

1087 
≥rc
 = 100;

1088 
i
 = 0; i < 
o
->
z⁄e_•lô_ƒ
[
ddú
]; i++) {

1089 
z⁄e_•lô
 *
z•
 = &
o
->z⁄e_•lô[
ddú
][
i
];

1091 i‡(
z•
->
ac˚ss_≥rc
 =(
uöt8_t
) -1U)

1092 
z•
->
ac˚ss_≥rc
 = (100 - 
≥rc
Ë/ 
≥rc_missög
;

1095 i‡(
•îc_missög
) {

1096 i‡(
•îc_missög
 =1 && 
o
->
z⁄e_•lô_ƒ
[
ddú
] == 1)

1097 
•îc
 = 100;

1098 
i
 = 0; i < 
o
->
z⁄e_•lô_ƒ
[
ddú
]; i++) {

1099 
z⁄e_•lô
 *
z•
 = &
o
->z⁄e_•lô[
ddú
][
i
];

1101 i‡(
z•
->
size_≥rc
 =(
uöt8_t
) -1U)

1102 
z•
->
size_≥rc
 = (100 - 
•îc
Ë/ 
•îc_missög
;

1107 
	}
}

1109 
	$∑r£_z⁄ed_di°ributi⁄
(
thªad_d©a
 *
td
, c⁄° *
öput
,

1110 
boﬁ
 
absﬁuã
)

1112 c⁄° *
¥e
 = 
absﬁuã
 ? "zoned_abs:" : "zoned:";

1113 *
°r
, *
p
;

1114 
i
, 
ªt
 = 0;

1116 
p
 = 
°r
 = 
	`°rdup
(
öput
);

1118 
	`°rù_bœnk_‰⁄t
(&
°r
);

1119 
	`°rù_bœnk_íd
(
°r
);

1122 i‡(
	`°∫cmp
(
°r
, 
¥e
, 
	`°æí
(pre))) {

1123 
	`log_îr
("fio: mism©ch i¿z⁄ed i≈uà<%s>\n", 
°r
);

1124 
	`‰ì
(
p
);

1127 
°r
 +
	`°æí
(
¥e
);

1129 
ªt
 = 
	`°r_•lô_∑r£
(
td
, 
°r
, 
z⁄e_•lô_ddú
, 
NULL
, 
absﬁuã
);

1131 
	`‰ì
(
p
);

1133 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

1134 
j
;

1136 
	`d¥öt
(
FD_PARSE
, "z⁄êddú %d (ƒ=%u): \n", 
i
, 
td
->
o
.
z⁄e_•lô_ƒ
[i]);

1138 
j
 = 0; j < 
td
->
o
.
z⁄e_•lô_ƒ
[
i
]; j++) {

1139 
z⁄e_•lô
 *
z•
 = &
td
->
o
.z⁄e_•lô[
i
][
j
];

1141 i‡(
absﬁuã
) {

1142 
	`d¥öt
(
FD_PARSE
, "\t%d: %u/%Œu\n", 
j
,

1143 
z•
->
ac˚ss_≥rc
,

1144 (Ë
z•
->
size
);

1146 
	`d¥öt
(
FD_PARSE
, "\t%d: %u/%u\n", 
j
,

1147 
z•
->
ac˚ss_≥rc
,

1148 
z•
->
size_≥rc
);

1153 i‡(
	`∑r£_dryrun
()) {

1154 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

1155 
	`‰ì
(
td
->
o
.
z⁄e_•lô
[
i
]);

1156 
td
->
o
.
z⁄e_•lô
[
i
] = 
NULL
;

1157 
td
->
o
.
z⁄e_•lô_ƒ
[
i
] = 0;

1160  
ªt
;

1163 i‡(
ªt
) {

1164 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++)

1165 
td
->
o
.
z⁄e_•lô_ƒ
[
i
] = 0;

1168  
ªt
;

1169 
	}
}

1171 
	$°r_øndom_di°ributi⁄_cb
(*
d©a
, c⁄° *
°r
)

1173 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

1174 
vÆ
;

1175 
˚¡î
 = -1;

1176 *
ƒ
;

1178 i‡(
td
->
o
.
øndom_di°ributi⁄
 =
FIO_RAND_DIST_ZIPF
)

1179 
vÆ
 = 
FIO_DEF_ZIPF
;

1180 i‡(
td
->
o
.
øndom_di°ributi⁄
 =
FIO_RAND_DIST_PARETO
)

1181 
vÆ
 = 
FIO_DEF_PARETO
;

1182 i‡(
td
->
o
.
øndom_di°ributi⁄
 =
FIO_RAND_DIST_GAUSS
)

1183 
vÆ
 = 0.0;

1184 i‡(
td
->
o
.
øndom_di°ributi⁄
 =
FIO_RAND_DIST_ZONED
)

1185  
	`∑r£_z⁄ed_di°ributi⁄
(
td
, 
°r
, 
Ál£
);

1186 i‡(
td
->
o
.
øndom_di°ributi⁄
 =
FIO_RAND_DIST_ZONED_ABS
)

1187  
	`∑r£_z⁄ed_di°ributi⁄
(
td
, 
°r
, 
åue
);

1191 
ƒ
 = 
	`gë_›t_po°fix
(
°r
);

1192 i‡(
ƒ
 && !
	`•lô_∑r£_di°r
“r, &
vÆ
, &
˚¡î
)) {

1193 
	`log_îr
("fio:ÑandomÖostfixÖarsing failed\n");

1194 
	`‰ì
(
ƒ
);

1198 
	`‰ì
(
ƒ
);

1200 i‡(
˚¡î
 != -1 && (center < 0.00 || center > 1.00)) {

1201 
	`log_îr
("fio: distribution center out ofÑange (0 <= center <= 1.0)\n");

1204 
td
->
o
.
øndom_˚¡î
.
u
.
f
 = 
˚¡î
;

1206 i‡(
td
->
o
.
øndom_di°ributi⁄
 =
FIO_RAND_DIST_ZIPF
) {

1207 i‡(
vÆ
 == 1.00) {

1208 
	`log_îr
("fio: zipfÅheta must differentÅhan 1.0\n");

1211 i‡(
	`∑r£_dryrun
())

1213 
td
->
o
.
zùf_thëa
.
u
.
f
 = 
vÆ
;

1214 } i‡(
td
->
o
.
øndom_di°ributi⁄
 =
FIO_RAND_DIST_PARETO
) {

1215 i‡(
vÆ
 <= 0.00 || val >= 1.00) {

1216 
	`log_îr
("fio:Öareto input out ofÑange (0 < input < 1.0)\n");

1219 i‡(
	`∑r£_dryrun
())

1221 
td
->
o
.
∑ªto_h
.
u
.
f
 = 
vÆ
;

1223 i‡(
vÆ
 < 0.00 || val >= 100.0) {

1224 
	`log_îr
("fio:Çormal deviation out ofÑange (0 <= input < 100.0)\n");

1227 i‡(
	`∑r£_dryrun
())

1229 
td
->
o
.
gauss_dev
.
u
.
f
 = 
vÆ
;

1233 
	}
}

1235 
	$°r_°ódy°©e_cb
(*
d©a
, c⁄° *
°r
)

1237 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

1238 
vÆ
;

1239 *
ƒ
;

1240 *
p˘
;

1241 
Œ
;

1243 i‡(
td
->
o
.
ss_°©e
 !
FIO_SS_IOPS
 &&Åd->o.ss_°©ê!
FIO_SS_IOPS_SLOPE
 &&

1244 
td
->
o
.
ss_°©e
 !
FIO_SS_BW
 &&Åd->o.ss_°©ê!
FIO_SS_BW_SLOPE
) {

1246 
	`log_îr
("fio: unknown steady state criterion\n");

1250 
ƒ
 = 
	`gë_›t_po°fix
(
°r
);

1251 i‡(!
ƒ
) {

1252 
	`log_îr
("fio: steadystateÅhreshold must be specified inádditionÅo criterion\n");

1253 
	`‰ì
(
ƒ
);

1258 
p˘
 = 
	`°r°r
(
ƒ
, "%");

1259 i‡(
p˘
) {

1260 *
p˘
 = '\0';

1261 
	`°rù_bœnk_íd
(
ƒ
);

1262 i‡(!
	`°r_to_Êﬂt
(
ƒ
, &
vÆ
, 0)) {

1263 
	`log_îr
("fio: couldÇotÖarse steadystateÅhresholdÖercentage\n");

1264 
	`‰ì
(
ƒ
);

1268 
	`d¥öt
(
FD_PARSE
, "£à°ódy sèãÅhªshﬁdÅÿ%f%%\n", 
vÆ
);

1269 
	`‰ì
(
ƒ
);

1270 i‡(
	`∑r£_dryrun
())

1273 
td
->
o
.
ss_°©e
 |
FIO_SS_PCT
;

1274 
td
->
o
.
ss_limô
.
u
.
f
 = 
vÆ
;

1275 } i‡(
td
->
o
.
ss_°©e
 & 
FIO_SS_IOPS
) {

1276 i‡(!
	`°r_to_Êﬂt
(
ƒ
, &
vÆ
, 0)) {

1277 
	`log_îr
("fio: steadystate IOPSÅhresholdÖostfixÖarsing failed\n");

1278 
	`‰ì
(
ƒ
);

1282 
	`d¥öt
(
FD_PARSE
, "£à°ódy sèã IOPSÅhªshﬁdÅÿ%f\n", 
vÆ
);

1283 
	`‰ì
(
ƒ
);

1284 i‡(
	`∑r£_dryrun
())

1287 
td
->
o
.
ss_limô
.
u
.
f
 = 
vÆ
;

1289 i‡(
	`°r_to_decimÆ
(
ƒ
, &
Œ
, 1, 
td
, 0, 0)) {

1290 
	`log_îr
("fio: steadystate BWÅhresholdÖostfixÖarsing failed\n");

1291 
	`‰ì
(
ƒ
);

1295 
	`d¥öt
(
FD_PARSE
, "£à°ódy sèã BWÅhªshﬁdÅÿ%Œd\n", 
Œ
);

1296 
	`‰ì
(
ƒ
);

1297 i‡(
	`∑r£_dryrun
())

1300 
td
->
o
.
ss_limô
.
u
.
f
 = (Ë
Œ
;

1303 
td
->
ss
.
°©e
 =Åd->
o
.
ss_°©e
;

1305 
	}
}

1312 *
	$gë_√xt_°r
(**
±r
)

1314 *
°r
 = *
±r
;

1315 *
p
, *
°¨t
;

1317 i‡(!
°r
 || !
	`°æí
(str))

1318  
NULL
;

1320 
°¨t
 = 
°r
;

1325 
p
 = 
	`°rchr
(
°r
, ':');

1326 i‡(!
p
) {

1327 *
±r
 = 
NULL
;

1335 i‡(
p
 =
°¨t
) {

1336 
°r
 = ++
°¨t
;

1340 i‡(*(
p
 - 1) != '\\') {

1341 *
p
 = '\0';

1342 *
±r
 = 
p
 + 1;

1346 
	`memmove
(
p
 - 1,Ö, 
	`°æí
(p) + 1);

1347 
°r
 = 
p
;

1350  
°¨t
;

1351 
	}
}

1354 
	$gë_max_°r_idx
(*
öput
)

1356 
cur_idx
;

1357 *
°r
, *
p
;

1359 
p
 = 
°r
 = 
	`°rdup
(
öput
);

1360 
cur_idx
 = 0; ; cur_idx++)

1361 i‡(
	`gë_√xt_°r
(&
°r
Ë=
NULL
)

1364 
	`‰ì
(
p
);

1365  
cur_idx
;

1366 
	}
}

1372 
	$£t_«me_idx
(*
èrgë
, 
size_t
 
éí
, *
öput
, 
ödex
,

1373 
boﬁ
 
unique_fûíame
)

1375 
cur_idx
;

1376 
Àn
;

1377 *
‚ame
, *
°r
, *
p
;

1379 
p
 = 
°r
 = 
	`°rdup
(
öput
);

1381 
ödex
 %
	`gë_max_°r_idx
(
öput
);

1382 
cur_idx
 = 0; cur_idx <
ödex
; cur_idx++)

1383 
‚ame
 = 
	`gë_√xt_°r
(&
°r
);

1385 i‡(
˛õ¡_sockaddr_°r
[0] && 
unique_fûíame
) {

1386 
Àn
 = 
	`¢¥ötf
(
èrgë
, 
éí
, "%s/%s.", 
‚ame
,

1387 
˛õ¡_sockaddr_°r
);

1389 
Àn
 = 
	`¢¥ötf
(
èrgë
, 
éí
, "%s%c", 
‚ame
,

1390 
FIO_OS_PATH_SEPARATOR
);

1392 
èrgë
[
éí
 - 1] = '\0';

1393 
	`‰ì
(
p
);

1395  
Àn
;

1396 
	}
}

1398 * 
	$gë_«me_by_idx
(*
öput
, 
ödex
)

1400 
cur_idx
;

1401 *
‚ame
, *
°r
, *
p
;

1403 
p
 = 
°r
 = 
	`°rdup
(
öput
);

1405 
ödex
 %
	`gë_max_°r_idx
(
öput
);

1406 
cur_idx
 = 0; cur_idx <
ödex
; cur_idx++)

1407 
‚ame
 = 
	`gë_√xt_°r
(&
°r
);

1409 
‚ame
 = 
	`°rdup
(fname);

1410 
	`‰ì
(
p
);

1412  
‚ame
;

1413 
	}
}

1415 
	$°r_fûíame_cb
(*
d©a
, c⁄° *
öput
)

1417 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

1418 *
‚ame
, *
°r
, *
p
;

1420 
p
 = 
°r
 = 
	`°rdup
(
öput
);

1422 
	`°rù_bœnk_‰⁄t
(&
°r
);

1423 
	`°rù_bœnk_íd
(
°r
);

1428 i‡(!
td
->
fûes_ödex
)

1429 
td
->
o
.
ƒ_fûes
 = 0;

1431 (
‚ame
 = 
	`gë_√xt_°r
(&
°r
)Ë!
NULL
) {

1432 i‡(!
	`°æí
(
‚ame
))

1434 
	`add_fûe
(
td
, 
‚ame
, 0, 1);

1437 
	`‰ì
(
p
);

1439 
	}
}

1441 
	$°r_dúe˘‹y_cb
(*
d©a
, c⁄° 
fio_unu£d
 *
unu£d
)

1443 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

1444 
°©
 
sb
;

1445 *
dú«me
, *
°r
, *
p
;

1446 
ªt
 = 0;

1448 i‡(
	`∑r£_dryrun
())

1451 
p
 = 
°r
 = 
	`°rdup
(
td
->
o
.
dúe˘‹y
);

1452 (
dú«me
 = 
	`gë_√xt_°r
(&
°r
)Ë!
NULL
) {

1453 i‡(
	`l°©
(
dú«me
, &
sb
) < 0) {

1454 
ªt
 = 
î∫o
;

1456 
	`log_îr
("fio: %†i†nŸá dúe˘‹y\n", 
dú«me
);

1457 
	`td_vîr‹
(
td
, 
ªt
, "lstat");

1458 
out
;

1460 i‡(!
	`S_ISDIR
(
sb
.
°_mode
)) {

1461 
	`log_îr
("fio: %†i†nŸá dúe˘‹y\n", 
dú«me
);

1462 
ªt
 = 1;

1463 
out
;

1467 
out
:

1468 
	`‰ì
(
p
);

1469  
ªt
;

1470 
	}
}

1472 
	$°r_›ídú_cb
(*
d©a
, c⁄° 
fio_unu£d
 *
°r
)

1474 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

1476 i‡(
	`∑r£_dryrun
())

1479 i‡(!
td
->
fûes_ödex
)

1480 
td
->
o
.
ƒ_fûes
 = 0;

1482  
	`add_dú_fûes
(
td
,Åd->
o
.
›ídú
);

1483 
	}
}

1485 
	$°r_buf„r_∑âîn_cb
(*
d©a
, c⁄° *
öput
)

1487 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

1488 
ªt
;

1491 
ªt
 = 
	`∑r£_™d_fûl_∑âîn
(
öput
, 
	`°æí
(öput), 
td
->
o
.
buf„r_∑âîn
,

1492 
MAX_PATTERN_SIZE
, 
NULL
, NULL, NULL);

1493 i‡(
ªt
 < 0)

1496 
	`as£π
(
ªt
 != 0);

1497 
td
->
o
.
buf„r_∑âîn_byãs
 = 
ªt
;

1504 i‡(!
td
->
o
.
com¥ess_≥r˚¡age
 && !
	`td_ªad
(td))

1505 
td
->
o
.
ªfûl_buf„rs
 = 0;

1507 
td
->
o
.
ªfûl_buf„rs
 = 1;

1509 
td
->
o
.
s¸ambÀ_buf„rs
 = 0;

1510 
td
->
o
.
zîo_buf„rs
 = 0;

1513 
	}
}

1515 
	$°r_buf„r_com¥ess_cb
(*
d©a
, *
û
)

1517 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

1519 
td
->
Êags
 |
TD_F_COMPRESS
;

1520 
td
->
o
.
com¥ess_≥r˚¡age
 = *
û
;

1522 
	}
}

1524 
	$°r_dedu≥_cb
(*
d©a
, *
û
)

1526 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

1528 
td
->
Êags
 |
TD_F_COMPRESS
;

1529 
td
->
o
.
dedu≥_≥r˚¡age
 = *
û
;

1530 
td
->
o
.
ªfûl_buf„rs
 = 1;

1532 
	}
}

1534 
	$°r_vîify_∑âîn_cb
(*
d©a
, c⁄° *
öput
)

1536 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

1537 
ªt
;

1539 
td
->
o
.
vîify_fmt_sz
 = 
	`FIO_ARRAY_SIZE
—d->o.
vîify_fmt
);

1540 
ªt
 = 
	`∑r£_™d_fûl_∑âîn
(
öput
, 
	`°æí
(öput), 
td
->
o
.
vîify_∑âîn
,

1541 
MAX_PATTERN_SIZE
, 
fmt_desc
,

1542 
td
->
o
.
vîify_fmt
, &td->o.
vîify_fmt_sz
);

1543 i‡(
ªt
 < 0)

1546 
	`as£π
(
ªt
 != 0);

1547 
td
->
o
.
vîify_∑âîn_byãs
 = 
ªt
;

1551 i‡(!
	`fio_›ti⁄_is_£t
(&
td
->
o
, 
vîify
))

1552 
td
->
o
.
vîify
 = 
VERIFY_PATTERN
;

1555 
	}
}

1557 
	$°r_gtod_ªdu˚_cb
(*
d©a
, *
û
)

1559 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

1560 
vÆ
 = *
û
;

1566 i‡(
vÆ
) {

1567 
td
->
o
.
dißbÀ_œt
 = 1;

1568 
td
->
o
.
dißbÀ_˛©
 = 1;

1569 
td
->
o
.
dißbÀ_¶©
 = 1;

1570 
td
->
o
.
dißbÀ_bw
 = 1;

1571 
td
->
o
.
˛©_≥r˚¡ûes
 = 0;

1572 
td
->
o
.
œt_≥r˚¡ûes
 = 0;

1573 
td
->
o
.
¶©_≥r˚¡ûes
 = 0;

1574 
td
->
ts_ˇche_mask
 = 63;

1578 
	}
}

1580 
	$°r_off£t_cb
(*
d©a
, *
__vÆ
)

1582 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

1583 
v
 = *
__vÆ
;

1585 i‡(
	`∑r£_is_≥r˚¡
(
v
)) {

1586 
td
->
o
.
°¨t_off£t
 = 0;

1587 
td
->
o
.
°¨t_off£t_≥r˚¡
 = -1ULL - 
v
;

1588 
td
->
o
.
°¨t_off£t_nz
 = 0;

1589 
	`d¥öt
(
FD_PARSE
, "SET start_offset_percent %d\n",

1590 
td
->
o
.
°¨t_off£t_≥r˚¡
);

1591 } i‡(
	`∑r£_is_z⁄e
(
v
)) {

1592 
td
->
o
.
°¨t_off£t
 = 0;

1593 
td
->
o
.
°¨t_off£t_≥r˚¡
 = 0;

1594 
td
->
o
.
°¨t_off£t_nz
 = 
v
 - 
ZONE_BASE_VAL
;

1596 
td
->
o
.
°¨t_off£t
 = 
v
;

1599 
	}
}

1601 
	$°r_off£t_ö¸emít_cb
(*
d©a
, *
__vÆ
)

1603 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

1604 
v
 = *
__vÆ
;

1606 i‡(
	`∑r£_is_≥r˚¡
(
v
)) {

1607 
td
->
o
.
off£t_ö¸emít
 = 0;

1608 
td
->
o
.
off£t_ö¸emít_≥r˚¡
 = -1ULL - 
v
;

1609 
td
->
o
.
off£t_ö¸emít_nz
 = 0;

1610 
	`d¥öt
(
FD_PARSE
, "SET offset_increment_percent %d\n",

1611 
td
->
o
.
off£t_ö¸emít_≥r˚¡
);

1612 } i‡(
	`∑r£_is_z⁄e
(
v
)) {

1613 
td
->
o
.
off£t_ö¸emít
 = 0;

1614 
td
->
o
.
off£t_ö¸emít_≥r˚¡
 = 0;

1615 
td
->
o
.
off£t_ö¸emít_nz
 = 
v
 - 
ZONE_BASE_VAL
;

1617 
td
->
o
.
off£t_ö¸emít
 = 
v
;

1620 
	}
}

1622 
	$°r_size_cb
(*
d©a
, *
__vÆ
)

1624 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

1625 
v
 = *
__vÆ
;

1627 i‡(
	`∑r£_is_≥r˚¡
(
v
)) {

1628 
td
->
o
.
size
 = 0;

1629 
td
->
o
.
size_≥r˚¡
 = -1ULL - 
v
;

1630 
	`d¥öt
(
FD_PARSE
, "SET size_percent %d\n",

1631 
td
->
o
.
size_≥r˚¡
);

1632 } i‡(
	`∑r£_is_z⁄e
(
v
)) {

1633 
td
->
o
.
size
 = 0;

1634 
td
->
o
.
size_≥r˚¡
 = 0;

1635 
td
->
o
.
size_nz
 = 
v
 - 
ZONE_BASE_VAL
;

1637 
td
->
o
.
size
 = 
v
;

1640 
	}
}

1642 
	$°r_io_size_cb
(*
d©a
, *
__vÆ
)

1644 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

1645 
v
 = *
__vÆ
;

1647 i‡(
	`∑r£_is_≥r˚¡_unˇµed
(
v
)) {

1648 
td
->
o
.
io_size
 = 0;

1649 
td
->
o
.
io_size_≥r˚¡
 = -1ULL - 
v
;

1650 i‡(
td
->
o
.
io_size_≥r˚¡
 > 100) {

1651 
	`log_îr
("fio: io_size values greaterÅhan 100%%áren't supported\n");

1654 
	`d¥öt
(
FD_PARSE
, "SET io_size_percent %d\n",

1655 
td
->
o
.
io_size_≥r˚¡
);

1656 } i‡(
	`∑r£_is_z⁄e
(
v
)) {

1657 
td
->
o
.
io_size
 = 0;

1658 
td
->
o
.
io_size_≥r˚¡
 = 0;

1659 
td
->
o
.
io_size_nz
 = 
v
 - 
ZONE_BASE_VAL
;

1661 
td
->
o
.
io_size
 = 
v
;

1664 
	}
}

1666 
	$°r_z⁄eskù_cb
(*
d©a
, *
__vÆ
)

1668 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

1669 
v
 = *
__vÆ
;

1671 i‡(
	`∑r£_is_z⁄e
(
v
)) {

1672 
td
->
o
.
z⁄e_skù
 = 0;

1673 
td
->
o
.
z⁄e_skù_nz
 = 
v
 - 
ZONE_BASE_VAL
;

1675 
td
->
o
.
z⁄e_skù
 = 
v
;

1678 
	}
}

1680 
	$°r_wrôe_bw_log_cb
(*
d©a
, c⁄° *
°r
)

1682 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

1684 i‡(
°r
)

1685 
td
->
o
.
bw_log_fûe
 = 
	`°rdup
(
°r
);

1687 
td
->
o
.
wrôe_bw_log
 = 1;

1689 
	}
}

1691 
	$°r_wrôe_œt_log_cb
(*
d©a
, c⁄° *
°r
)

1693 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

1695 i‡(
°r
)

1696 
td
->
o
.
œt_log_fûe
 = 
	`°rdup
(
°r
);

1698 
td
->
o
.
wrôe_œt_log
 = 1;

1700 
	}
}

1702 
	$°r_wrôe_i›s_log_cb
(*
d©a
, c⁄° *
°r
)

1704 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

1706 i‡(
°r
)

1707 
td
->
o
.
i›s_log_fûe
 = 
	`°rdup
(
°r
);

1709 
td
->
o
.
wrôe_i›s_log
 = 1;

1711 
	}
}

1713 
	$°r_wrôe_hi°_log_cb
(*
d©a
, c⁄° *
°r
)

1715 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

1717 i‡(
°r
)

1718 
td
->
o
.
hi°_log_fûe
 = 
	`°rdup
(
°r
);

1720 
td
->
o
.
wrôe_hi°_log
 = 1;

1722 
	}
}

1733 
	$°r_i€ngöe_exã∫Æ_cb
(*
d©a
, c⁄° *
°r
)

1735 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

1736 
°©
 
sb
;

1737 *
p
;

1739 i‡(!
°r
) {

1740 
	`log_îr
("fio:ÇullÉxternal ioengineÖath\n");

1744 
p
 = (*)
°r
;

1745 
	`°rù_bœnk_‰⁄t
(&
p
);

1746 
	`°rù_bœnk_íd
(
p
);

1748 i‡(
	`°©
(
p
, &
sb
Ë|| !
	`S_ISREG
(sb.
°_mode
)) {

1749 
	`log_îr
("fio: invÆidÉxã∫Æ i€ngöê∑th \"%s\"\n", 
p
);

1753 
td
->
o
.
i€ngöe_so_∑th
 = 
p
;

1755 
	}
}

1757 
	$rw_vîify
(c⁄° 
fio_›ti⁄
 *
o
, *
d©a
)

1759 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

1761 i‡(
ªad_⁄ly
 && (
	`td_wrôe
(
td
Ë|| 
	`td_åim
(td))) {

1762 
	`log_îr
("fio: job <%s> has write orÅrim bit set, but"

1763 " fiÿi†öÑód-⁄ly mode\n", 
td
->
o
.
«me
);

1768 
	}
}

1770 
	$gtod_˝u_vîify
(c⁄° 
fio_›ti⁄
 *
o
, *
d©a
)

1772 #i‚de‡
FIO_HAVE_CPU_AFFINITY


1773 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

1775 i‡(
td
->
o
.
gtod_˝u
) {

1776 
	`log_îr
("fio:Ölatform must support CPUáffinity for"

1783 
	}
}

1788 
fio_›ti⁄
 
	gfio_›ti⁄s
[
FIO_MAX_OPTS
] = {

1790 .
«me
 = "description",

1791 .
	g ame
 = "Description of job",

1792 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

1793 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
des¸ùti⁄
),

1794 .
	ghñp
 = "Text job description",

1795 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

1796 .
	ggroup
 = 
FIO_OPT_G_DESC
,

1799 .
	g«me
 = "name",

1800 .
	g ame
 = "JobÇame",

1801 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

1802 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
«me
),

1803 .
	ghñp
 = "Name ofÅhis job",

1804 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

1805 .
	ggroup
 = 
FIO_OPT_G_DESC
,

1808 .
	g«me
 = "wait_for",

1809 .
	g ame
 = "WaiteeÇame",

1810 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

1811 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
waô_f‹
),

1812 .
	ghñp
 = "Name ofÅhe jobÅhis one wantsÅo wait for before starting",

1813 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

1814 .
	ggroup
 = 
FIO_OPT_G_DESC
,

1817 .
	g«me
 = "filename",

1818 .
	g ame
 = "Filename(s)",

1819 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

1820 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
fûíame
),

1821 .
	gmaxÀn
 = 
PATH_MAX
,

1822 .
	gcb
 = 
°r_fûíame_cb
,

1823 .
	g¥io
 = -1,

1824 .
	ghñp
 = "File(s)Åo use forÅhe workload",

1825 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

1826 .
	ggroup
 = 
FIO_OPT_G_FILENAME
,

1829 .
	g«me
 = "directory",

1830 .
	g ame
 = "Directory",

1831 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

1832 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
dúe˘‹y
),

1833 .
	gcb
 = 
°r_dúe˘‹y_cb
,

1834 .
	ghñp
 = "DirectoryÅo store files in",

1835 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

1836 .
	ggroup
 = 
FIO_OPT_G_FILENAME
,

1839 .
	g«me
 = "filename_format",

1840 .
	g ame
 = "Filename Format",

1841 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

1842 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
fûíame_f‹m©
),

1843 .
	g¥io
 = -1,

1844 .
	ghñp
 = "Override default $jobname.$jobnum.$filenumÇaming",

1845 .
	gdef
 = "$jobname.$jobnum.$filenum",

1846 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

1847 .
	ggroup
 = 
FIO_OPT_G_FILENAME
,

1850 .
	g«me
 = "unique_filename",

1851 .
	g ame
 = "Unique Filename",

1852 .
	gty≥
 = 
FIO_OPT_BOOL
,

1853 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
unique_fûíame
),

1854 .
	ghñp
 = "ForÇetwork clients,Örefix file with source IP",

1855 .
	gdef
 = "1",

1856 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

1857 .
	ggroup
 = 
FIO_OPT_G_FILENAME
,

1860 .
	g«me
 = "lockfile",

1861 .
	g ame
 = "Lockfile",

1862 .
	gty≥
 = 
FIO_OPT_STR
,

1863 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
fûe_lock_mode
),

1864 .
	ghñp
 = "Lock file when doing IOÅo it",

1865 .
	g¥io
 = 1,

1866 .
	g∑ª¡
 = "filename",

1867 .
	ghide
 = 0,

1868 .
	gdef
 = "none",

1869 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

1870 .
	ggroup
 = 
FIO_OPT_G_FILENAME
,

1871 .
	gposvÆ
 = {

1872 { .
ivÆ
 = "none",

1873 .
	govÆ
 = 
FILE_LOCK_NONE
,

1874 .
	ghñp
 = "No fileÜocking",

1876 { .
	givÆ
 = "exclusive",

1877 .
	govÆ
 = 
FILE_LOCK_EXCLUSIVE
,

1878 .
	ghñp
 = "Exclusive fileÜock",

1881 .
	givÆ
 = "readwrite",

1882 .
	govÆ
 = 
FILE_LOCK_READWRITE
,

1883 .
	ghñp
 = "Read vs writeÜock",

1888 .
	g«me
 = "opendir",

1889 .
	g ame
 = "Open directory",

1890 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

1891 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
›ídú
),

1892 .
	gcb
 = 
°r_›ídú_cb
,

1893 .
	ghñp
 = "Recursivelyádd files fromÅhis directoryánd down",

1894 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

1895 .
	ggroup
 = 
FIO_OPT_G_FILENAME
,

1898 .
	g«me
 = "rw",

1899 .
	g ame
 = "Read/write",

1900 .
	gÆüs
 = "readwrite",

1901 .
	gty≥
 = 
FIO_OPT_STR
,

1902 .
	gcb
 = 
°r_rw_cb
,

1903 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
td_ddú
),

1904 .
	ghñp
 = "IO direction",

1905 .
	gdef
 = "read",

1906 .
	gvîify
 = 
rw_vîify
,

1907 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

1908 .
	ggroup
 = 
FIO_OPT_G_IO_BASIC
,

1909 .
	gposvÆ
 = {

1910 { .
ivÆ
 = "read",

1911 .
	govÆ
 = 
TD_DDIR_READ
,

1912 .
	ghñp
 = "SequentialÑead",

1914 { .
	givÆ
 = "write",

1915 .
	govÆ
 = 
TD_DDIR_WRITE
,

1916 .
	ghñp
 = "Sequential write",

1918 { .
	givÆ
 = "trim",

1919 .
	govÆ
 = 
TD_DDIR_TRIM
,

1920 .
	ghñp
 = "SequentialÅrim",

1922 { .
	givÆ
 = "randread",

1923 .
	govÆ
 = 
TD_DDIR_RANDREAD
,

1924 .
	ghñp
 = "RandomÑead",

1926 { .
	givÆ
 = "randwrite",

1927 .
	govÆ
 = 
TD_DDIR_RANDWRITE
,

1928 .
	ghñp
 = "Random write",

1930 { .
	givÆ
 = "randtrim",

1931 .
	govÆ
 = 
TD_DDIR_RANDTRIM
,

1932 .
	ghñp
 = "RandomÅrim",

1934 { .
	givÆ
 = "rw",

1935 .
	govÆ
 = 
TD_DDIR_RW
,

1936 .
	ghñp
 = "SequentialÑeadánd write mix",

1938 { .
	givÆ
 = "readwrite",

1939 .
	govÆ
 = 
TD_DDIR_RW
,

1940 .
	ghñp
 = "SequentialÑeadánd write mix",

1942 { .
	givÆ
 = "randrw",

1943 .
	govÆ
 = 
TD_DDIR_RANDRW
,

1944 .
	ghñp
 = "RandomÑeadánd write mix"

1946 { .
	givÆ
 = "trimwrite",

1947 .
	govÆ
 = 
TD_DDIR_TRIMWRITE
,

1948 .
	ghñp
 = "Trimánd write mix,ÅrimsÖreceding writes"

1950 { .
	givÆ
 = "randtrimwrite",

1951 .
	govÆ
 = 
TD_DDIR_RANDTRIMWRITE
,

1952 .
	ghñp
 = "RandomlyÅrimánd write mix,ÅrimsÖreceding writes"

1957 .
	g«me
 = "rw_sequencer",

1958 .
	g ame
 = "RW Sequencer",

1959 .
	gty≥
 = 
FIO_OPT_STR
,

1960 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
rw_£q
),

1961 .
	ghñp
 = "IO offset generator modifier",

1962 .
	gdef
 = "sequential",

1963 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

1964 .
	ggroup
 = 
FIO_OPT_G_IO_BASIC
,

1965 .
	gposvÆ
 = {

1966 { .
ivÆ
 = "sequential",

1967 .
	govÆ
 = 
RW_SEQ_SEQ
,

1968 .
	ghñp
 = "Generate sequential offsets",

1970 { .
	givÆ
 = "identical",

1971 .
	govÆ
 = 
RW_SEQ_IDENT
,

1972 .
	ghñp
 = "Generate identical offsets",

1978 .
	g«me
 = "ioengine",

1979 .
	g ame
 = "IO Engine",

1980 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

1981 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
i€ngöe
),

1982 .
	ghñp
 = "IOÉngineÅo use",

1983 .
	gdef
 = 
FIO_PREFERRED_ENGINE
,

1984 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

1985 .
	ggroup
 = 
FIO_OPT_G_IO_BASIC
,

1986 .
	gposvÆ
 = {

1987 { .
ivÆ
 = "sync",

1988 .
	ghñp
 = "UseÑead/write",

1990 { .
	givÆ
 = "psync",

1991 .
	ghñp
 = "UseÖread/pwrite",

1993 { .
	givÆ
 = "vsync",

1994 .
	ghñp
 = "UseÑeadv/writev",

1996 #ifde‡
CONFIG_PWRITEV


1997 { .
	givÆ
 = "pvsync",

1998 .
	ghñp
 = "UseÖreadv/pwritev",

2001 #ifde‡
FIO_HAVE_PWRITEV2


2002 { .
	givÆ
 = "pvsync2",

2003 .
	ghñp
 = "UseÖreadv2/pwritev2",

2006 #ifde‡
CONFIG_LIBAIO


2007 { .
	givÆ
 = "libaio",

2008 .
	ghñp
 = "LinuxÇativeásynchronous IO",

2011 #ifde‡
ARCH_HAVE_IOURING


2012 { .
	givÆ
 = "io_uring",

2013 .
	ghñp
 = "Fast LinuxÇativeáio",

2016 #ifde‡
CONFIG_POSIXAIO


2017 { .
	givÆ
 = "posixaio",

2018 .
	ghñp
 = "POSIXásynchronous IO",

2021 #ifde‡
CONFIG_SOLARISAIO


2022 { .
	givÆ
 = "solarisaio",

2023 .
	ghñp
 = "SolarisÇativeásynchronous IO",

2026 #ifde‡
CONFIG_WINDOWSAIO


2027 { .
	givÆ
 = "windowsaio",

2028 .
	ghñp
 = "WindowsÇativeásynchronous IO"

2031 #ifde‡
CONFIG_RBD


2032 { .
	givÆ
 = "rbd",

2033 .
	ghñp
 = "Rados Block Deviceásynchronous IO"

2036 { .
	givÆ
 = "mmap",

2037 .
	ghñp
 = "Memory mapped IO"

2039 #ifde‡
CONFIG_LINUX_SPLICE


2040 { .
	givÆ
 = "splice",

2041 .
	ghñp
 = "splice/vmsplice based IO",

2043 { .
	givÆ
 = "netsplice",

2044 .
	ghñp
 = "splice/vmspliceÅo/fromÅheÇetwork",

2047 #ifde‡
FIO_HAVE_SGIO


2048 { .
	givÆ
 = "sg",

2049 .
	ghñp
 = "SCSI generic v3 IO",

2052 { .
	givÆ
 = "null",

2053 .
	ghñp
 = "TestingÉngine (no dataÅransfer)",

2055 { .
	givÆ
 = "net",

2056 .
	ghñp
 = "Network IO",

2058 { .
	givÆ
 = "cpuio",

2059 .
	ghñp
 = "CPU cycle burnerÉngine",

2061 #ifde‡
CONFIG_RDMA


2062 { .
	givÆ
 = "rdma",

2063 .
	ghñp
 = "RDMA IOÉngine",

2066 #ifde‡
CONFIG_LIBRPMA_APM


2067 { .
	givÆ
 = "librpma_apm",

2068 .
	ghñp
 = "librpma IOÉngine in APM mode",

2071 #ifde‡
CONFIG_LIBRPMA_GPSPM


2072 { .
	givÆ
 = "librpma_gpspm",

2073 .
	ghñp
 = "librpma IOÉngine in GPSPM mode",

2076 #ifde‡
CONFIG_LINUX_EXT4_MOVE_EXTENT


2077 { .
	givÆ
 = "e4defrag",

2078 .
	ghñp
 = "ext4 defragÉngine",

2081 #ifde‡
CONFIG_LINUX_FALLOCATE


2082 { .
	givÆ
 = "falloc",

2083 .
	ghñp
 = "fallocate() file basedÉngine",

2086 #ifde‡
CONFIG_GFAPI


2087 { .
	givÆ
 = "gfapi",

2088 .
	ghñp
 = "GlusterfsÜibgfapi(sync) basedÉngine"

2090 { .
	givÆ
 = "gfapi_async",

2091 .
	ghñp
 = "GlusterfsÜibgfapi(async) basedÉngine"

2094 #ifde‡
CONFIG_LIBHDFS


2095 { .
	givÆ
 = "libhdfs",

2096 .
	ghñp
 = "Hadoop Distributed Filesystem (HDFS)Éngine"

2099 #ifde‡
CONFIG_PMEMBLK


2100 { .
	givÆ
 = "pmemblk",

2101 .
	ghñp
 = "PMDKÜibpmemblk based IOÉngine",

2105 #ifde‡
CONFIG_IME


2106 { .
	givÆ
 = "ime_psync",

2107 .
	ghñp
 = "DDN's IME synchronous IOÉngine",

2109 { .
	givÆ
 = "ime_psyncv",

2110 .
	ghñp
 = "DDN's IME synchronous IOÉngine using iovecs",

2112 { .
	givÆ
 = "ime_aio",

2113 .
	ghñp
 = "DDN's IMEásynchronous IOÉngine",

2116 #ifde‡
CONFIG_LINUX_DEVDAX


2117 { .
	givÆ
 = "dev-dax",

2118 .
	ghñp
 = "DAX Device based IOÉngine",

2122 .
	givÆ
 = "filecreate",

2123 .
	ghñp
 = "File creationÉngine",

2125 { .
	givÆ
 = "external",

2126 .
	ghñp
 = "LoadÉxternalÉngine (appendÇame)",

2127 .
	gcb
 = 
°r_i€ngöe_exã∫Æ_cb
,

2129 #ifde‡
CONFIG_LIBPMEM


2130 { .
	givÆ
 = "libpmem",

2131 .
	ghñp
 = "PMDKÜibpmem based IOÉngine",

2134 #ifde‡
CONFIG_HTTP


2135 { .
	givÆ
 = "http",

2136 .
	ghñp
 = "HTTP (WebDAV/S3) IOÉngine",

2139 { .
	givÆ
 = "nbd",

2140 .
	ghñp
 = "Network Block Device (NBD) IOÉngine"

2142 #ifde‡
CONFIG_DFS


2143 { .
	givÆ
 = "dfs",

2144 .
	ghñp
 = "DAOS File System (dfs) IOÉngine",

2147 #ifde‡
CONFIG_LIBNFS


2148 { .
	givÆ
 = "nfs",

2149 .
	ghñp
 = "NFS IOÉngine",

2152 #ifde‡
CONFIG_LIBXNVME


2153 { .
	givÆ
 = "xnvme",

2154 .
	ghñp
 = "XNVME IOÉngine",

2160 .
	g«me
 = "iodepth",

2161 .
	g ame
 = "IO Depth",

2162 .
	gty≥
 = 
FIO_OPT_INT
,

2163 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
iodïth
),

2164 .
	ghñp
 = "Number of IO buffersÅo keep in flight",

2165 .
	gmövÆ
 = 1,

2166 .
	göãrvÆ
 = 1,

2167 .
	gdef
 = "1",

2168 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2169 .
	ggroup
 = 
FIO_OPT_G_IO_BASIC
,

2172 .
	g«me
 = "iodepth_batch",

2173 .
	g ame
 = "IO Depth batch",

2174 .
	gÆüs
 = "iodepth_batch_submit",

2175 .
	gty≥
 = 
FIO_OPT_INT
,

2176 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
iodïth_b©ch
),

2177 .
	ghñp
 = "Number of IO buffersÅo submit in one go",

2178 .
	g∑ª¡
 = "iodepth",

2179 .
	ghide
 = 1,

2180 .
	göãrvÆ
 = 1,

2181 .
	gdef
 = "1",

2182 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2183 .
	ggroup
 = 
FIO_OPT_G_IO_BASIC
,

2186 .
	g«me
 = "iodepth_batch_complete_min",

2187 .
	g ame
 = "Min IO depth batch complete",

2188 .
	gÆüs
 = "iodepth_batch_complete",

2189 .
	gty≥
 = 
FIO_OPT_INT
,

2190 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
iodïth_b©ch_com∂ëe_mö
),

2191 .
	ghñp
 = "MinÇumber of IO buffersÅoÑetrieve in one go",

2192 .
	g∑ª¡
 = "iodepth",

2193 .
	ghide
 = 1,

2194 .
	gmövÆ
 = 0,

2195 .
	göãrvÆ
 = 1,

2196 .
	gdef
 = "1",

2197 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2198 .
	ggroup
 = 
FIO_OPT_G_IO_BASIC
,

2201 .
	g«me
 = "iodepth_batch_complete_max",

2202 .
	g ame
 = "Max IO depth batch complete",

2203 .
	gty≥
 = 
FIO_OPT_INT
,

2204 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
iodïth_b©ch_com∂ëe_max
),

2205 .
	ghñp
 = "MaxÇumber of IO buffersÅoÑetrieve in one go",

2206 .
	g∑ª¡
 = "iodepth",

2207 .
	ghide
 = 1,

2208 .
	gmövÆ
 = 0,

2209 .
	göãrvÆ
 = 1,

2210 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2211 .
	ggroup
 = 
FIO_OPT_G_IO_BASIC
,

2214 .
	g«me
 = "iodepth_low",

2215 .
	g ame
 = "IO Depth batchÜow",

2216 .
	gty≥
 = 
FIO_OPT_INT
,

2217 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
iodïth_low
),

2218 .
	ghñp
 = "Low water mark for queuing depth",

2219 .
	g∑ª¡
 = "iodepth",

2220 .
	ghide
 = 1,

2221 .
	göãrvÆ
 = 1,

2222 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2223 .
	ggroup
 = 
FIO_OPT_G_IO_BASIC
,

2226 .
	g«me
 = "serialize_overlap",

2227 .
	g ame
 = "Serialize overlap",

2228 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
£rülize_ovîœp
),

2229 .
	gty≥
 = 
FIO_OPT_BOOL
,

2230 .
	ghñp
 = "Wait for in-flight IOsÅhat collideÅo complete",

2231 .
	g∑ª¡
 = "iodepth",

2232 .
	gdef
 = "0",

2233 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2234 .
	ggroup
 = 
FIO_OPT_G_IO_BASIC
,

2237 .
	g«me
 = "io_submit_mode",

2238 .
	g ame
 = "IO submit mode",

2239 .
	gty≥
 = 
FIO_OPT_STR
,

2240 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
io_submô_mode
),

2241 .
	ghñp
 = "How IO submissionsánd completionsáre done",

2242 .
	gdef
 = "inline",

2243 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2244 .
	ggroup
 = 
FIO_OPT_G_IO_BASIC
,

2245 .
	gposvÆ
 = {

2246 { .
ivÆ
 = "inline",

2247 .
	govÆ
 = 
IO_MODE_INLINE
,

2248 .
	ghñp
 = "Submitánd complete IO inline",

2250 { .
	givÆ
 = "offload",

2251 .
	govÆ
 = 
IO_MODE_OFFLOAD
,

2252 .
	ghñp
 = "Offload submitánd completeÅoÅhreads",

2257 .
	g«me
 = "size",

2258 .
	g ame
 = "Size",

2259 .
	gty≥
 = 
FIO_OPT_STR_VAL_ZONE
,

2260 .
	gcb
 = 
°r_size_cb
,

2261 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
size
),

2262 .
	ghñp
 = "Total size of device or files",

2263 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2264 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2267 .
	g«me
 = "io_size",

2268 .
	gÆüs
 = "io_limit",

2269 .
	g ame
 = "IO Size",

2270 .
	gty≥
 = 
FIO_OPT_STR_VAL_ZONE
,

2271 .
	gcb
 = 
°r_io_size_cb
,

2272 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
io_size
),

2273 .
	ghñp
 = "Total size of I/OÅo beÖerformed",

2274 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2275 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2278 .
	g«me
 = "fill_device",

2279 .
	g ame
 = "Fill device",

2280 .
	gÆüs
 = "fill_fs",

2281 .
	gty≥
 = 
FIO_OPT_BOOL
,

2282 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
fûl_devi˚
),

2283 .
	ghñp
 = "Write untilán ENOSPCÉrror occurs",

2284 .
	gdef
 = "0",

2285 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

2286 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2289 .
	g«me
 = "filesize",

2290 .
	g ame
 = "File size",

2291 .
	gty≥
 = 
FIO_OPT_STR_VAL
,

2292 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
fûe_size_low
),

2293 .
	goff2
 = 
off£tof
(
thªad_›ti⁄s
, 
fûe_size_high
),

2294 .
	gmövÆ
 = 1,

2295 .
	ghñp
 = "Size of individual files",

2296 .
	göãrvÆ
 = 1024 * 1024,

2297 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

2298 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2301 .
	g«me
 = "file_append",

2302 .
	g ame
 = "Fileáppend",

2303 .
	gty≥
 = 
FIO_OPT_BOOL
,

2304 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
fûe_≠≥nd
),

2305 .
	ghñp
 = "IO will startátÅheÉnd ofÅhe file(s)",

2306 .
	gdef
 = "0",

2307 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

2308 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2311 .
	g«me
 = "offset",

2312 .
	g ame
 = "IO offset",

2313 .
	gÆüs
 = "fileoffset",

2314 .
	gty≥
 = 
FIO_OPT_STR_VAL_ZONE
,

2315 .
	gcb
 = 
°r_off£t_cb
,

2316 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
°¨t_off£t
),

2317 .
	ghñp
 = "Start IO fromÅhis offset",

2318 .
	gdef
 = "0",

2319 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2320 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2323 .
	g«me
 = "offset_align",

2324 .
	g ame
 = "IO offsetálignment",

2325 .
	gty≥
 = 
FIO_OPT_INT
,

2326 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
°¨t_off£t_Æign
),

2327 .
	ghñp
 = "Start IO fromÅhis offsetálignment",

2328 .
	gdef
 = "0",

2329 .
	göãrvÆ
 = 512,

2330 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2331 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2334 .
	g«me
 = "offset_increment",

2335 .
	g ame
 = "IO offset increment",

2336 .
	gty≥
 = 
FIO_OPT_STR_VAL_ZONE
,

2337 .
	gcb
 = 
°r_off£t_ö¸emít_cb
,

2338 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
off£t_ö¸emít
),

2339 .
	ghñp
 = "What isÅhe increment from one offsetÅoÅheÇext",

2340 .
	g∑ª¡
 = "offset",

2341 .
	ghide
 = 1,

2342 .
	gdef
 = "0",

2343 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2344 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2347 .
	g«me
 = "number_ios",

2348 .
	g ame
 = "Number of IOsÅoÖerform",

2349 .
	gty≥
 = 
FIO_OPT_STR_VAL
,

2350 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
numbî_ios
),

2351 .
	ghñp
 = "Force job completionáfterÅhisÇumber of IOs",

2352 .
	gdef
 = "0",

2353 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2354 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2357 .
	g«me
 = "bs",

2358 .
	g ame
 = "Block size",

2359 .
	gÆüs
 = "blocksize",

2360 .
	gty≥
 = 
FIO_OPT_ULL
,

2361 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
bs
[
DDIR_READ
]),

2362 .
	goff2
 = 
off£tof
(
thªad_›ti⁄s
, 
bs
[
DDIR_WRITE
]),

2363 .
	goff3
 = 
off£tof
(
thªad_›ti⁄s
, 
bs
[
DDIR_TRIM
]),

2364 .
	gmövÆ
 = 1,

2365 .
	ghñp
 = "Block size unit",

2366 .
	gdef
 = "4096",

2367 .
	g∑ª¡
 = "rw",

2368 .
	ghide
 = 1,

2369 .
	göãrvÆ
 = 512,

2370 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2371 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2374 .
	g«me
 = "ba",

2375 .
	g ame
 = "Block sizeálign",

2376 .
	gÆüs
 = "blockalign",

2377 .
	gty≥
 = 
FIO_OPT_ULL
,

2378 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
ba
[
DDIR_READ
]),

2379 .
	goff2
 = 
off£tof
(
thªad_›ti⁄s
, 
ba
[
DDIR_WRITE
]),

2380 .
	goff3
 = 
off£tof
(
thªad_›ti⁄s
, 
ba
[
DDIR_TRIM
]),

2381 .
	gmövÆ
 = 1,

2382 .
	ghñp
 = "IO block offsetálignment",

2383 .
	g∑ª¡
 = "rw",

2384 .
	ghide
 = 1,

2385 .
	göãrvÆ
 = 512,

2386 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2387 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2390 .
	g«me
 = "bsrange",

2391 .
	g ame
 = "Block sizeÑange",

2392 .
	gÆüs
 = "blocksize_range",

2393 .
	gty≥
 = 
FIO_OPT_RANGE
,

2394 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
mö_bs
[
DDIR_READ
]),

2395 .
	goff2
 = 
off£tof
(
thªad_›ti⁄s
, 
max_bs
[
DDIR_READ
]),

2396 .
	goff3
 = 
off£tof
(
thªad_›ti⁄s
, 
mö_bs
[
DDIR_WRITE
]),

2397 .
	goff4
 = 
off£tof
(
thªad_›ti⁄s
, 
max_bs
[
DDIR_WRITE
]),

2398 .
	goff5
 = 
off£tof
(
thªad_›ti⁄s
, 
mö_bs
[
DDIR_TRIM
]),

2399 .
	goff6
 = 
off£tof
(
thªad_›ti⁄s
, 
max_bs
[
DDIR_TRIM
]),

2400 .
	gmövÆ
 = 1,

2401 .
	ghñp
 = "Set block sizeÑange (in more detailÅhan bs)",

2402 .
	g∑ª¡
 = "rw",

2403 .
	ghide
 = 1,

2404 .
	göãrvÆ
 = 4096,

2405 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2406 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2409 .
	g«me
 = "bssplit",

2410 .
	g ame
 = "Block size split",

2411 .
	gty≥
 = 
FIO_OPT_STR_ULL
,

2412 .
	gcb
 = 
°r_bs•lô_cb
,

2413 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
bs•lô
),

2414 .
	ghñp
 = "Setá specific mix of block sizes",

2415 .
	g∑ª¡
 = "rw",

2416 .
	ghide
 = 1,

2417 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2418 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2421 .
	g«me
 = "bs_unaligned",

2422 .
	g ame
 = "Block size unaligned",

2423 .
	gÆüs
 = "blocksize_unaligned",

2424 .
	gty≥
 = 
FIO_OPT_STR_SET
,

2425 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
bs_u«lig√d
),

2426 .
	ghñp
 = "Don't sectorálign IO buffer sizes",

2427 .
	g∑ª¡
 = "rw",

2428 .
	ghide
 = 1,

2429 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2430 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2433 .
	g«me
 = "bs_is_seq_rand",

2434 .
	g ame
 = "Block size division is seq/random (notÑead/write)",

2435 .
	gty≥
 = 
FIO_OPT_BOOL
,

2436 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
bs_is_£q_ønd
),

2437 .
	ghñp
 = "Considerány blocksize settingÅo be sequential,random",

2438 .
	gdef
 = "0",

2439 .
	g∑ª¡
 = "blocksize",

2440 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2441 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2444 .
	g«me
 = "randrepeat",

2445 .
	g ame
 = "RandomÑepeatable",

2446 .
	gty≥
 = 
FIO_OPT_BOOL
,

2447 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
ønd_ª≥©abÀ
),

2448 .
	ghñp
 = "UseÑepeatableÑandom IOÖattern",

2449 .
	gdef
 = "1",

2450 .
	g∑ª¡
 = "rw",

2451 .
	ghide
 = 1,

2452 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2453 .
	ggroup
 = 
FIO_OPT_G_RANDOM
,

2456 .
	g«me
 = "randseed",

2457 .
	g ame
 = "TheÑandom generator seed",

2458 .
	gty≥
 = 
FIO_OPT_STR_VAL
,

2459 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
ønd_£ed
),

2460 .
	ghñp
 = "SetÅheÑandom generator seed value",

2461 .
	gdef
 = "0x89",

2462 .
	g∑ª¡
 = "rw",

2463 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2464 .
	ggroup
 = 
FIO_OPT_G_RANDOM
,

2467 .
	g«me
 = "norandommap",

2468 .
	g ame
 = "NoÑandommap",

2469 .
	gty≥
 = 
FIO_OPT_STR_SET
,

2470 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
n‹™domm≠
),

2471 .
	ghñp
 = "AcceptÖotential duplicateÑandom blocks",

2472 .
	g∑ª¡
 = "rw",

2473 .
	ghide
 = 1,

2474 .
	ghide_⁄_£t
 = 1,

2475 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2476 .
	ggroup
 = 
FIO_OPT_G_RANDOM
,

2479 .
	g«me
 = "softrandommap",

2480 .
	g ame
 = "SoftÑandommap",

2481 .
	gty≥
 = 
FIO_OPT_BOOL
,

2482 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
so·øndomm≠
),

2483 .
	ghñp
 = "SetÇorandommap ifÑandommapállocation fails",

2484 .
	g∑ª¡
 = "norandommap",

2485 .
	ghide
 = 1,

2486 .
	gdef
 = "0",

2487 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2488 .
	ggroup
 = 
FIO_OPT_G_RANDOM
,

2491 .
	g«me
 = "random_generator",

2492 .
	g ame
 = "Random Generator",

2493 .
	gty≥
 = 
FIO_OPT_STR
,

2494 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
øndom_gíî©‹
),

2495 .
	ghñp
 = "Type ofÑandomÇumber generatorÅo use",

2496 .
	gdef
 = "tausworthe",

2497 .
	gposvÆ
 = {

2498 { .
ivÆ
 = "tausworthe",

2499 .
	govÆ
 = 
FIO_RAND_GEN_TAUSWORTHE
,

2500 .
	ghñp
 = "Strong Tausworthe generator",

2502 { .
	givÆ
 = "lfsr",

2503 .
	govÆ
 = 
FIO_RAND_GEN_LFSR
,

2504 .
	ghñp
 = "VariableÜength LFSR",

2507 .
	givÆ
 = "tausworthe64",

2508 .
	govÆ
 = 
FIO_RAND_GEN_TAUSWORTHE64
,

2509 .
	ghñp
 = "64-bit Tausworthe variant",

2512 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2513 .
	ggroup
 = 
FIO_OPT_G_RANDOM
,

2516 .
	g«me
 = "random_distribution",

2517 .
	g ame
 = "Random Distribution",

2518 .
	gty≥
 = 
FIO_OPT_STR
,

2519 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
øndom_di°ributi⁄
),

2520 .
	gcb
 = 
°r_øndom_di°ributi⁄_cb
,

2521 .
	ghñp
 = "Random offset distribution generator",

2522 .
	gdef
 = "random",

2523 .
	gposvÆ
 = {

2524 { .
ivÆ
 = "random",

2525 .
	govÆ
 = 
FIO_RAND_DIST_RANDOM
,

2526 .
	ghñp
 = "CompletelyÑandom",

2528 { .
	givÆ
 = "zipf",

2529 .
	govÆ
 = 
FIO_RAND_DIST_ZIPF
,

2530 .
	ghñp
 = "Zipf distribution",

2532 { .
	givÆ
 = "pareto",

2533 .
	govÆ
 = 
FIO_RAND_DIST_PARETO
,

2534 .
	ghñp
 = "Pareto distribution",

2536 { .
	givÆ
 = "normal",

2537 .
	govÆ
 = 
FIO_RAND_DIST_GAUSS
,

2538 .
	ghñp
 = "Normal (Gaussian) distribution",

2540 { .
	givÆ
 = "zoned",

2541 .
	govÆ
 = 
FIO_RAND_DIST_ZONED
,

2542 .
	ghñp
 = "ZonedÑandom distribution",

2544 { .
	givÆ
 = "zoned_abs",

2545 .
	govÆ
 = 
FIO_RAND_DIST_ZONED_ABS
,

2546 .
	ghñp
 = "ZonedábsoluteÑandom distribution",

2549 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2550 .
	ggroup
 = 
FIO_OPT_G_RANDOM
,

2553 .
	g«me
 = "percentage_random",

2554 .
	g ame
 = "Percentage Random",

2555 .
	gty≥
 = 
FIO_OPT_INT
,

2556 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
≥rc_ønd
[
DDIR_READ
]),

2557 .
	goff2
 = 
off£tof
(
thªad_›ti⁄s
, 
≥rc_ønd
[
DDIR_WRITE
]),

2558 .
	goff3
 = 
off£tof
(
thªad_›ti⁄s
, 
≥rc_ønd
[
DDIR_TRIM
]),

2559 .
	gmaxvÆ
 = 100,

2560 .
	ghñp
 = "Percentage of seq/random mixÅhat should beÑandom",

2561 .
	gdef
 = "100,100,100",

2562 .
	göãrvÆ
 = 5,

2563 .
	gövî£
 = "percentage_sequential",

2564 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2565 .
	ggroup
 = 
FIO_OPT_G_RANDOM
,

2568 .
	g«me
 = "percentage_sequential",

2569 .
	g ame
 = "Percentage Sequential",

2570 .
	gty≥
 = 
FIO_OPT_DEPRECATED
,

2571 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2572 .
	ggroup
 = 
FIO_OPT_G_RANDOM
,

2575 .
	g«me
 = "allrandrepeat",

2576 .
	g ame
 = "All Random Repeat",

2577 .
	gty≥
 = 
FIO_OPT_BOOL
,

2578 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
ÆÃ™d_ª≥©abÀ
),

2579 .
	ghñp
 = "UseÑepeatableÑandomÇumbers forÉverything",

2580 .
	gdef
 = "0",

2581 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2582 .
	ggroup
 = 
FIO_OPT_G_RANDOM
,

2585 .
	g«me
 = "nrfiles",

2586 .
	g ame
 = "Number of files",

2587 .
	gÆüs
 = "nr_files",

2588 .
	gty≥
 = 
FIO_OPT_INT
,

2589 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
ƒ_fûes
),

2590 .
	ghñp
 = "Split job workload betweenÅhisÇumber of files",

2591 .
	gdef
 = "1",

2592 .
	göãrvÆ
 = 1,

2593 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

2594 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2597 .
	g«me
 = "openfiles",

2598 .
	g ame
 = "Number of open files",

2599 .
	gty≥
 = 
FIO_OPT_INT
,

2600 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
›í_fûes
),

2601 .
	ghñp
 = "Number of filesÅo keep openátÅhe sameÅime",

2602 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

2603 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2606 .
	g«me
 = "file_service_type",

2607 .
	g ame
 = "File serviceÅype",

2608 .
	gty≥
 = 
FIO_OPT_STR
,

2609 .
	gcb
 = 
°r_f°_cb
,

2610 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
fûe_£rvi˚_ty≥
),

2611 .
	ghñp
 = "HowÅo select which fileÅo serviceÇext",

2612 .
	gdef
 = "roundrobin",

2613 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

2614 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2615 .
	gposvÆ
 = {

2616 { .
ivÆ
 = "random",

2617 .
	govÆ
 = 
FIO_FSERVICE_RANDOM
,

2618 .
	ghñp
 = "Chooseá fileátÑandom (uniform)",

2620 { .
	givÆ
 = "zipf",

2621 .
	govÆ
 = 
FIO_FSERVICE_ZIPF
,

2622 .
	ghñp
 = "ZipfÑandomized",

2624 { .
	givÆ
 = "pareto",

2625 .
	govÆ
 = 
FIO_FSERVICE_PARETO
,

2626 .
	ghñp
 = "ParetoÑandomized",

2628 { .
	givÆ
 = "normal",

2629 .
	govÆ
 = 
FIO_FSERVICE_GAUSS
,

2630 .
	ghñp
 = "Normal (Gaussian)Ñandomized",

2632 { .
	givÆ
 = "gauss",

2633 .
	govÆ
 = 
FIO_FSERVICE_GAUSS
,

2634 .
	ghñp
 = "Alias forÇormal",

2636 { .
	givÆ
 = "roundrobin",

2637 .
	govÆ
 = 
FIO_FSERVICE_RR
,

2638 .
	ghñp
 = "RoundÑobin select files",

2640 { .
	givÆ
 = "sequential",

2641 .
	govÆ
 = 
FIO_FSERVICE_SEQ
,

2642 .
	ghñp
 = "Finish one file before movingÅoÅheÇext",

2645 .
	g∑ª¡
 = "nrfiles",

2646 .
	ghide
 = 1,

2649 .
	g«me
 = "fallocate",

2650 .
	g ame
 = "Fallocate",

2651 .
	gty≥
 = 
FIO_OPT_STR
,

2652 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
ÁŒoˇã_mode
),

2653 .
	ghñp
 = "WhetherÖre-allocation isÖerformed whenÜaying out files",

2654 #ifde‡
FIO_HAVE_DEFAULT_FALLOCATE


2655 .
	gdef
 = "native",

2657 .
	gdef
 = "none",

2659 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

2660 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2661 .
	gposvÆ
 = {

2662 { .
ivÆ
 = "none",

2663 .
	govÆ
 = 
FIO_FALLOCATE_NONE
,

2664 .
	ghñp
 = "DoÇotÖre-allocate space",

2666 { .
	givÆ
 = "native",

2667 .
	govÆ
 = 
FIO_FALLOCATE_NATIVE
,

2668 .
	ghñp
 = "UseÇativeÖre-allocation ifÖossible",

2670 #ifde‡
CONFIG_POSIX_FALLOCATE


2671 { .
	givÆ
 = "posix",

2672 .
	govÆ
 = 
FIO_FALLOCATE_POSIX
,

2673 .
	ghñp
 = "UseÖosix_fallocate()",

2676 #ifde‡
CONFIG_LINUX_FALLOCATE


2677 { .
	givÆ
 = "keep",

2678 .
	govÆ
 = 
FIO_FALLOCATE_KEEP_SIZE
,

2679 .
	ghñp
 = "Use fallocate(..., FALLOC_FL_KEEP_SIZE, ...)",

2682 { .
	givÆ
 = "truncate",

2683 .
	govÆ
 = 
FIO_FALLOCATE_TRUNCATE
,

2684 .
	ghñp
 = "Truncate fileÅo final size instead ofállocating"

2687 { .
	givÆ
 = "0",

2688 .
	govÆ
 = 
FIO_FALLOCATE_NONE
,

2689 .
	ghñp
 = "Alias for 'none'",

2691 #ifde‡
CONFIG_POSIX_FALLOCATE


2692 { .
	givÆ
 = "1",

2693 .
	govÆ
 = 
FIO_FALLOCATE_POSIX
,

2694 .
	ghñp
 = "Alias for 'posix'",

2700 .
	g«me
 = "fadvise_hint",

2701 .
	g ame
 = "Fadvise hint",

2702 .
	gty≥
 = 
FIO_OPT_STR
,

2703 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
Ádvi£_höt
),

2704 .
	gposvÆ
 = {

2705 { .
ivÆ
 = "0",

2706 .
	govÆ
 = 
F_ADV_NONE
,

2707 .
	ghñp
 = "Don't issue fadvise/madvise",

2709 { .
	givÆ
 = "1",

2710 .
	govÆ
 = 
F_ADV_TYPE
,

2711 .
	ghñp
 = "Advise using fio IOÖattern",

2713 { .
	givÆ
 = "random",

2714 .
	govÆ
 = 
F_ADV_RANDOM
,

2715 .
	ghñp
 = "Advise using FADV_RANDOM",

2717 { .
	givÆ
 = "sequential",

2718 .
	govÆ
 = 
F_ADV_SEQUENTIAL
,

2719 .
	ghñp
 = "Advise using FADV_SEQUENTIAL",

2722 .
	ghñp
 = "Use fadvise()ÅoádviseÅhe kernel on IOÖattern",

2723 .
	gdef
 = "1",

2724 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

2725 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2728 .
	g«me
 = "fsync",

2729 .
	g ame
 = "Fsync",

2730 .
	gty≥
 = 
FIO_OPT_INT
,

2731 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
fsync_blocks
),

2732 .
	ghñp
 = "Issue fsync for writesÉvery givenÇumber of blocks",

2733 .
	gdef
 = "0",

2734 .
	göãrvÆ
 = 1,

2735 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

2736 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2739 .
	g«me
 = "fdatasync",

2740 .
	g ame
 = "Fdatasync",

2741 .
	gty≥
 = 
FIO_OPT_INT
,

2742 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
fd©async_blocks
),

2743 .
	ghñp
 = "Issue fdatasync for writesÉvery givenÇumber of blocks",

2744 .
	gdef
 = "0",

2745 .
	göãrvÆ
 = 1,

2746 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

2747 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2750 .
	g«me
 = "write_barrier",

2751 .
	g ame
 = "Write barrier",

2752 .
	gty≥
 = 
FIO_OPT_INT
,

2753 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
b¨rõr_blocks
),

2754 .
	ghñp
 = "MakeÉvery Nth writeá barrier write",

2755 .
	gdef
 = "0",

2756 .
	göãrvÆ
 = 1,

2757 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2758 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2760 #ifde‡
CONFIG_SYNC_FILE_RANGE


2762 .
	g«me
 = "sync_file_range",

2763 .
	g ame
 = "Sync fileÑange",

2764 .
	gposvÆ
 = {

2765 { .
ivÆ
 = "wait_before",

2766 .
	govÆ
 = 
SYNC_FILE_RANGE_WAIT_BEFORE
,

2767 .
	ghñp
 = "SYNC_FILE_RANGE_WAIT_BEFORE",

2768 .
	g‹vÆ
 = 1,

2770 { .
	givÆ
 = "write",

2771 .
	govÆ
 = 
SYNC_FILE_RANGE_WRITE
,

2772 .
	ghñp
 = "SYNC_FILE_RANGE_WRITE",

2773 .
	g‹vÆ
 = 1,

2776 .
	givÆ
 = "wait_after",

2777 .
	govÆ
 = 
SYNC_FILE_RANGE_WAIT_AFTER
,

2778 .
	ghñp
 = "SYNC_FILE_RANGE_WAIT_AFTER",

2779 .
	g‹vÆ
 = 1,

2782 .
	gty≥
 = 
FIO_OPT_STR_MULTI
,

2783 .
	gcb
 = 
°r_s‰_cb
,

2784 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
sync_fûe_ønge
),

2785 .
	ghñp
 = "Use sync_file_range()",

2786 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

2787 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2791 .
	g«me
 = "sync_file_range",

2792 .
	g ame
 = "Sync fileÑange",

2793 .
	gty≥
 = 
FIO_OPT_UNSUPPORTED
,

2794 .
	ghñp
 = "YourÖlatform doesÇot support sync_file_range",

2798 .
	g«me
 = "direct",

2799 .
	g ame
 = "Direct I/O",

2800 .
	gty≥
 = 
FIO_OPT_BOOL
,

2801 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
odúe˘
),

2802 .
	ghñp
 = "Use O_DIRECT IO (negates buffered)",

2803 .
	gdef
 = "0",

2804 .
	gövî£
 = "buffered",

2805 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2806 .
	ggroup
 = 
FIO_OPT_G_IO_TYPE
,

2809 .
	g«me
 = "atomic",

2810 .
	g ame
 = "Atomic I/O",

2811 .
	gty≥
 = 
FIO_OPT_BOOL
,

2812 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
ﬂtomic
),

2813 .
	ghñp
 = "Use Atomic IO with O_DIRECT (implies O_DIRECT)",

2814 .
	gdef
 = "0",

2815 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2816 .
	ggroup
 = 
FIO_OPT_G_IO_TYPE
,

2819 .
	g«me
 = "buffered",

2820 .
	g ame
 = "Buffered I/O",

2821 .
	gty≥
 = 
FIO_OPT_BOOL
,

2822 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
odúe˘
),

2823 .
	g√g
 = 1,

2824 .
	ghñp
 = "Use buffered IO (negates direct)",

2825 .
	gdef
 = "1",

2826 .
	gövî£
 = "direct",

2827 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2828 .
	ggroup
 = 
FIO_OPT_G_IO_TYPE
,

2831 .
	g«me
 = "overwrite",

2832 .
	g ame
 = "Overwrite",

2833 .
	gty≥
 = 
FIO_OPT_BOOL
,

2834 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
ovîwrôe
),

2835 .
	ghñp
 = "When writing, set whetherÅo overwrite current data",

2836 .
	gdef
 = "0",

2837 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

2838 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2841 .
	g«me
 = "loops",

2842 .
	g ame
 = "Loops",

2843 .
	gty≥
 = 
FIO_OPT_INT
,

2844 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
lo›s
),

2845 .
	ghñp
 = "Number ofÅimesÅoÑunÅhe job",

2846 .
	gdef
 = "1",

2847 .
	göãrvÆ
 = 1,

2848 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

2849 .
	ggroup
 = 
FIO_OPT_G_RUNTIME
,

2852 .
	g«me
 = "numjobs",

2853 .
	g ame
 = "Number of jobs",

2854 .
	gty≥
 = 
FIO_OPT_INT
,

2855 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
numjobs
),

2856 .
	ghñp
 = "DuplicateÅhis jobÅhis manyÅimes",

2857 .
	gdef
 = "1",

2858 .
	göãrvÆ
 = 1,

2859 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

2860 .
	ggroup
 = 
FIO_OPT_G_RUNTIME
,

2863 .
	g«me
 = "startdelay",

2864 .
	g ame
 = "Start delay",

2865 .
	gty≥
 = 
FIO_OPT_STR_VAL_TIME
,

2866 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
°¨t_dñay
),

2867 .
	goff2
 = 
off£tof
(
thªad_›ti⁄s
, 
°¨t_dñay_high
),

2868 .
	ghñp
 = "Only start job whenÅhisÖeriod hasÖassed",

2869 .
	gdef
 = "0",

2870 .
	gis_£c⁄ds
 = 1,

2871 .
	gis_time
 = 1,

2872 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

2873 .
	ggroup
 = 
FIO_OPT_G_RUNTIME
,

2876 .
	g«me
 = "runtime",

2877 .
	g ame
 = "Runtime",

2878 .
	gÆüs
 = "timeout",

2879 .
	gty≥
 = 
FIO_OPT_STR_VAL_TIME
,

2880 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
timeout
),

2881 .
	ghñp
 = "Stop workload whenÅhisámount ofÅime hasÖassed",

2882 .
	gdef
 = "0",

2883 .
	gis_£c⁄ds
 = 1,

2884 .
	gis_time
 = 1,

2885 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

2886 .
	ggroup
 = 
FIO_OPT_G_RUNTIME
,

2889 .
	g«me
 = "time_based",

2890 .
	g ame
 = "Time based",

2891 .
	gty≥
 = 
FIO_OPT_STR_SET
,

2892 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
time_ba£d
),

2893 .
	ghñp
 = "KeepÑunning untilÑuntime/timeout is met",

2894 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

2895 .
	ggroup
 = 
FIO_OPT_G_RUNTIME
,

2898 .
	g«me
 = "verify_only",

2899 .
	g ame
 = "Verify only",

2900 .
	gty≥
 = 
FIO_OPT_STR_SET
,

2901 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
vîify_⁄ly
),

2902 .
	ghñp
 = "VerifiesÖreviously written data is still valid",

2903 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

2904 .
	ggroup
 = 
FIO_OPT_G_RUNTIME
,

2907 .
	g«me
 = "ramp_time",

2908 .
	g ame
 = "RampÅime",

2909 .
	gty≥
 = 
FIO_OPT_STR_VAL_TIME
,

2910 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
ømp_time
),

2911 .
	ghñp
 = "Ramp upÅime before measuringÖerformance",

2912 .
	gis_£c⁄ds
 = 1,

2913 .
	gis_time
 = 1,

2914 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

2915 .
	ggroup
 = 
FIO_OPT_G_RUNTIME
,

2918 .
	g«me
 = "clocksource",

2919 .
	g ame
 = "Clock source",

2920 .
	gty≥
 = 
FIO_OPT_STR
,

2921 .
	gcb
 = 
fio_˛ock_sour˚_cb
,

2922 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
˛ocksour˚
),

2923 .
	ghñp
 = "WhatÅype ofÅiming sourceÅo use",

2924 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

2925 .
	ggroup
 = 
FIO_OPT_G_CLOCK
,

2926 .
	gposvÆ
 = {

2927 #ifde‡
CONFIG_GETTIMEOFDAY


2928 { .
ivÆ
 = "gettimeofday",

2929 .
	govÆ
 = 
CS_GTOD
,

2930 .
	ghñp
 = "Use gettimeofday(2) forÅiming",

2933 #ifde‡
CONFIG_CLOCK_GETTIME


2934 { .
	givÆ
 = "clock_gettime",

2935 .
	govÆ
 = 
CS_CGETTIME
,

2936 .
	ghñp
 = "Use clock_gettime(2) forÅiming",

2939 #ifde‡
ARCH_HAVE_CPU_CLOCK


2940 { .
	givÆ
 = "cpu",

2941 .
	govÆ
 = 
CS_CPUCLOCK
,

2942 .
	ghñp
 = "Use CPUÖrivate clock",

2948 .
	g«me
 = "mem",

2949 .
	gÆüs
 = "iomem",

2950 .
	g ame
 = "I/O Memory",

2951 .
	gty≥
 = 
FIO_OPT_STR
,

2952 .
	gcb
 = 
°r_mem_cb
,

2953 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
mem_ty≥
),

2954 .
	ghñp
 = "BackingÅype for IO buffers",

2955 .
	gdef
 = "malloc",

2956 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2957 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2958 .
	gposvÆ
 = {

2959 { .
ivÆ
 = "malloc",

2960 .
	govÆ
 = 
MEM_MALLOC
,

2961 .
	ghñp
 = "Use malloc(3) for IO buffers",

2963 #i‚de‡
CONFIG_NO_SHM


2964 { .
	givÆ
 = "shm",

2965 .
	govÆ
 = 
MEM_SHM
,

2966 .
	ghñp
 = "Use shared memory segments for IO buffers",

2968 #ifde‡
FIO_HAVE_HUGETLB


2969 { .
	givÆ
 = "shmhuge",

2970 .
	govÆ
 = 
MEM_SHMHUGE
,

2971 .
	ghñp
 = "Like shm, but use hugeÖages",

2975 { .
	givÆ
 = "mmap",

2976 .
	govÆ
 = 
MEM_MMAP
,

2977 .
	ghñp
 = "Use mmap(2) (file oránon) for IO buffers",

2979 { .
	givÆ
 = "mmapshared",

2980 .
	govÆ
 = 
MEM_MMAPSHARED
,

2981 .
	ghñp
 = "Like mmap, but useÅhe shared flag",

2983 #ifde‡
FIO_HAVE_HUGETLB


2984 { .
	givÆ
 = "mmaphuge",

2985 .
	govÆ
 = 
MEM_MMAPHUGE
,

2986 .
	ghñp
 = "Like mmap, but use hugeÖages",

2989 #ifde‡
CONFIG_CUDA


2990 { .
	givÆ
 = "cudamalloc",

2991 .
	govÆ
 = 
MEM_CUDA_MALLOC
,

2992 .
	ghñp
 = "Allocate GPU device memory for GPUDirect RDMA",

2998 .
	g«me
 = "iomem_align",

2999 .
	gÆüs
 = "mem_align",

3000 .
	g ame
 = "I/O memoryálignment",

3001 .
	gty≥
 = 
FIO_OPT_INT
,

3002 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
mem_Æign
),

3003 .
	gmövÆ
 = 0,

3004 .
	ghñp
 = "IO memory buffer offsetálignment",

3005 .
	gdef
 = "0",

3006 .
	g∑ª¡
 = "iomem",

3007 .
	ghide
 = 1,

3008 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3009 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3012 .
	g«me
 = "verify",

3013 .
	g ame
 = "Verify",

3014 .
	gty≥
 = 
FIO_OPT_STR
,

3015 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
vîify
),

3016 .
	ghñp
 = "Verify data written",

3017 .
	gdef
 = "0",

3018 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3019 .
	ggroup
 = 
FIO_OPT_G_VERIFY
,

3020 .
	gposvÆ
 = {

3021 { .
ivÆ
 = "0",

3022 .
	govÆ
 = 
VERIFY_NONE
,

3023 .
	ghñp
 = "Don't do IO verification",

3025 { .
	givÆ
 = "md5",

3026 .
	govÆ
 = 
VERIFY_MD5
,

3027 .
	ghñp
 = "Use md5 checksums for verification",

3029 { .
	givÆ
 = "crc64",

3030 .
	govÆ
 = 
VERIFY_CRC64
,

3031 .
	ghñp
 = "Use crc64 checksums for verification",

3033 { .
	givÆ
 = "crc32",

3034 .
	govÆ
 = 
VERIFY_CRC32
,

3035 .
	ghñp
 = "Use crc32 checksums for verification",

3037 { .
	givÆ
 = "crc32c-intel",

3038 .
	govÆ
 = 
VERIFY_CRC32C
,

3039 .
	ghñp
 = "Use crc32c checksums for verification (hwássisted, ifávailable)",

3041 { .
	givÆ
 = "crc32c",

3042 .
	govÆ
 = 
VERIFY_CRC32C
,

3043 .
	ghñp
 = "Use crc32c checksums for verification (hwássisted, ifávailable)",

3045 { .
	givÆ
 = "crc16",

3046 .
	govÆ
 = 
VERIFY_CRC16
,

3047 .
	ghñp
 = "Use crc16 checksums for verification",

3049 { .
	givÆ
 = "crc7",

3050 .
	govÆ
 = 
VERIFY_CRC7
,

3051 .
	ghñp
 = "Use crc7 checksums for verification",

3053 { .
	givÆ
 = "sha1",

3054 .
	govÆ
 = 
VERIFY_SHA1
,

3055 .
	ghñp
 = "Use sha1 checksums for verification",

3057 { .
	givÆ
 = "sha256",

3058 .
	govÆ
 = 
VERIFY_SHA256
,

3059 .
	ghñp
 = "Use sha256 checksums for verification",

3061 { .
	givÆ
 = "sha512",

3062 .
	govÆ
 = 
VERIFY_SHA512
,

3063 .
	ghñp
 = "Use sha512 checksums for verification",

3065 { .
	givÆ
 = "sha3-224",

3066 .
	govÆ
 = 
VERIFY_SHA3_224
,

3067 .
	ghñp
 = "Use sha3-224 checksums for verification",

3069 { .
	givÆ
 = "sha3-256",

3070 .
	govÆ
 = 
VERIFY_SHA3_256
,

3071 .
	ghñp
 = "Use sha3-256 checksums for verification",

3073 { .
	givÆ
 = "sha3-384",

3074 .
	govÆ
 = 
VERIFY_SHA3_384
,

3075 .
	ghñp
 = "Use sha3-384 checksums for verification",

3077 { .
	givÆ
 = "sha3-512",

3078 .
	govÆ
 = 
VERIFY_SHA3_512
,

3079 .
	ghñp
 = "Use sha3-512 checksums for verification",

3081 { .
	givÆ
 = "xxhash",

3082 .
	govÆ
 = 
VERIFY_XXHASH
,

3083 .
	ghñp
 = "Use xxhash checksums for verification",

3087 { .
	givÆ
 = "meta",

3088 .
	govÆ
 = 
VERIFY_HDR_ONLY
,

3089 .
	ghñp
 = "Use io information for verification. "

3093 { .
	givÆ
 = "pattern",

3094 .
	govÆ
 = 
VERIFY_PATTERN_NO_HDR
,

3095 .
	ghñp
 = "Verify strictÖattern",

3098 .
	givÆ
 = "null",

3099 .
	govÆ
 = 
VERIFY_NULL
,

3100 .
	ghñp
 = "PretendÅo verify",

3105 .
	g«me
 = "do_verify",

3106 .
	g ame
 = "Perform verify step",

3107 .
	gty≥
 = 
FIO_OPT_BOOL
,

3108 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
do_vîify
),

3109 .
	ghñp
 = "Run verification stageáfter write",

3110 .
	gdef
 = "1",

3111 .
	g∑ª¡
 = "verify",

3112 .
	ghide
 = 1,

3113 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3114 .
	ggroup
 = 
FIO_OPT_G_VERIFY
,

3117 .
	g«me
 = "verifysort",

3118 .
	g ame
 = "Verify sort",

3119 .
	gty≥
 = 
FIO_OPT_SOFT_DEPRECATED
,

3120 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3121 .
	ggroup
 = 
FIO_OPT_G_VERIFY
,

3124 .
	g«me
 = "verifysort_nr",

3125 .
	g ame
 = "Verify Sort Nr",

3126 .
	gty≥
 = 
FIO_OPT_SOFT_DEPRECATED
,

3127 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3128 .
	ggroup
 = 
FIO_OPT_G_VERIFY
,

3131 .
	g«me
 = "verify_interval",

3132 .
	g ame
 = "Verify interval",

3133 .
	gty≥
 = 
FIO_OPT_INT
,

3134 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
vîify_öãrvÆ
),

3135 .
	gmövÆ
 = 2 * (
vîify_hódî
),

3136 .
	ghñp
 = "Store verify buffer headerÉvery N bytes",

3137 .
	g∑ª¡
 = "verify",

3138 .
	ghide
 = 1,

3139 .
	göãrvÆ
 = 2 * (
vîify_hódî
),

3140 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3141 .
	ggroup
 = 
FIO_OPT_G_VERIFY
,

3144 .
	g«me
 = "verify_offset",

3145 .
	g ame
 = "Verify offset",

3146 .
	gty≥
 = 
FIO_OPT_INT
,

3147 .
	ghñp
 = "Offset verify headerÜocation by N bytes",

3148 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
vîify_off£t
),

3149 .
	gmövÆ
 = (
vîify_hódî
),

3150 .
	g∑ª¡
 = "verify",

3151 .
	ghide
 = 1,

3152 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3153 .
	ggroup
 = 
FIO_OPT_G_VERIFY
,

3156 .
	g«me
 = "verify_pattern",

3157 .
	g ame
 = "VerifyÖattern",

3158 .
	gty≥
 = 
FIO_OPT_STR
,

3159 .
	gcb
 = 
°r_vîify_∑âîn_cb
,

3160 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
vîify_∑âîn
),

3161 .
	ghñp
 = "FillÖattern for IO buffers",

3162 .
	g∑ª¡
 = "verify",

3163 .
	ghide
 = 1,

3164 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3165 .
	ggroup
 = 
FIO_OPT_G_VERIFY
,

3168 .
	g«me
 = "verify_fatal",

3169 .
	g ame
 = "Verify fatal",

3170 .
	gty≥
 = 
FIO_OPT_BOOL
,

3171 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
vîify_Áèl
),

3172 .
	gdef
 = "0",

3173 .
	ghñp
 = "Exit oná single verify failure, don't continue",

3174 .
	g∑ª¡
 = "verify",

3175 .
	ghide
 = 1,

3176 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3177 .
	ggroup
 = 
FIO_OPT_G_VERIFY
,

3180 .
	g«me
 = "verify_dump",

3181 .
	g ame
 = "Verify dump",

3182 .
	gty≥
 = 
FIO_OPT_BOOL
,

3183 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
vîify_dump
),

3184 .
	gdef
 = "0",

3185 .
	ghñp
 = "Dump contents of goodánd bad blocks on failure",

3186 .
	g∑ª¡
 = "verify",

3187 .
	ghide
 = 1,

3188 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3189 .
	ggroup
 = 
FIO_OPT_G_VERIFY
,

3192 .
	g«me
 = "verify_async",

3193 .
	g ame
 = "Verifyásynchronously",

3194 .
	gty≥
 = 
FIO_OPT_INT
,

3195 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
vîify_async
),

3196 .
	gdef
 = "0",

3197 .
	ghñp
 = "Number ofásync verifierÅhreadsÅo use",

3198 .
	g∑ª¡
 = "verify",

3199 .
	ghide
 = 1,

3200 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3201 .
	ggroup
 = 
FIO_OPT_G_VERIFY
,

3204 .
	g«me
 = "verify_backlog",

3205 .
	g ame
 = "Verify backlog",

3206 .
	gty≥
 = 
FIO_OPT_STR_VAL
,

3207 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
vîify_backlog
),

3208 .
	ghñp
 = "VerifyáfterÅhisÇumber of blocksáre written",

3209 .
	g∑ª¡
 = "verify",

3210 .
	ghide
 = 1,

3211 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3212 .
	ggroup
 = 
FIO_OPT_G_VERIFY
,

3215 .
	g«me
 = "verify_backlog_batch",

3216 .
	g ame
 = "Verify backlog batch",

3217 .
	gty≥
 = 
FIO_OPT_INT
,

3218 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
vîify_b©ch
),

3219 .
	ghñp
 = "VerifyÅhisÇumber of IO blocks",

3220 .
	g∑ª¡
 = "verify",

3221 .
	ghide
 = 1,

3222 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3223 .
	ggroup
 = 
FIO_OPT_G_VERIFY
,

3225 #ifde‡
FIO_HAVE_CPU_AFFINITY


3227 .
	g«me
 = "verify_async_cpus",

3228 .
	g ame
 = "Async verify CPUs",

3229 .
	gty≥
 = 
FIO_OPT_STR
,

3230 .
	gcb
 = 
°r_vîify_˝us_Ælowed_cb
,

3231 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
vîify_˝umask
),

3232 .
	ghñp
 = "Set CPUsállowed forásync verifyÅhreads",

3233 .
	g∑ª¡
 = "verify_async",

3234 .
	ghide
 = 1,

3235 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3236 .
	ggroup
 = 
FIO_OPT_G_VERIFY
,

3240 .
	g«me
 = "verify_async_cpus",

3241 .
	g ame
 = "Async verify CPUs",

3242 .
	gty≥
 = 
FIO_OPT_UNSUPPORTED
,

3243 .
	ghñp
 = "YourÖlatform doesÇot support CPUáffinities",

3247 .
	g«me
 = "experimental_verify",

3248 .
	g ame
 = "Experimental Verify",

3249 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
ex≥rimíèl_vîify
),

3250 .
	gty≥
 = 
FIO_OPT_BOOL
,

3251 .
	ghñp
 = "EnableÉxperimental verification",

3252 .
	g∑ª¡
 = "verify",

3253 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3254 .
	ggroup
 = 
FIO_OPT_G_VERIFY
,

3257 .
	g«me
 = "verify_state_load",

3258 .
	g ame
 = "Load verify state",

3259 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
vîify_°©e
),

3260 .
	gty≥
 = 
FIO_OPT_BOOL
,

3261 .
	ghñp
 = "Load verifyÅermination state",

3262 .
	g∑ª¡
 = "verify",

3263 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3264 .
	ggroup
 = 
FIO_OPT_G_VERIFY
,

3267 .
	g«me
 = "verify_state_save",

3268 .
	g ame
 = "Save verify state",

3269 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
vîify_°©e_ßve
),

3270 .
	gty≥
 = 
FIO_OPT_BOOL
,

3271 .
	gdef
 = "1",

3272 .
	ghñp
 = "Save verify state onÅermination",

3273 .
	g∑ª¡
 = "verify",

3274 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3275 .
	ggroup
 = 
FIO_OPT_G_VERIFY
,

3277 #ifde‡
FIO_HAVE_TRIM


3279 .
	g«me
 = "trim_percentage",

3280 .
	g ame
 = "TrimÖercentage",

3281 .
	gty≥
 = 
FIO_OPT_INT
,

3282 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
åim_≥r˚¡age
),

3283 .
	gmövÆ
 = 0,

3284 .
	gmaxvÆ
 = 100,

3285 .
	ghñp
 = "Number of verify blocksÅoÅrim (i.e., discard)",

3286 .
	g∑ª¡
 = "verify",

3287 .
	gdef
 = "0",

3288 .
	göãrvÆ
 = 1,

3289 .
	ghide
 = 1,

3290 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3291 .
	ggroup
 = 
FIO_OPT_G_TRIM
,

3294 .
	g«me
 = "trim_verify_zero",

3295 .
	g ame
 = "VerifyÅrim zero",

3296 .
	gty≥
 = 
FIO_OPT_BOOL
,

3297 .
	ghñp
 = "VerifyÅhatÅrimmed (i.e., discarded) blocksáreÑeturnedás zeroes",

3298 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
åim_zîo
),

3299 .
	g∑ª¡
 = "trim_percentage",

3300 .
	ghide
 = 1,

3301 .
	gdef
 = "1",

3302 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3303 .
	ggroup
 = 
FIO_OPT_G_TRIM
,

3306 .
	g«me
 = "trim_backlog",

3307 .
	g ame
 = "Trim backlog",

3308 .
	gty≥
 = 
FIO_OPT_STR_VAL
,

3309 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
åim_backlog
),

3310 .
	ghñp
 = "TrimáfterÅhisÇumber of blocksáre written",

3311 .
	g∑ª¡
 = "trim_percentage",

3312 .
	ghide
 = 1,

3313 .
	göãrvÆ
 = 1,

3314 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3315 .
	ggroup
 = 
FIO_OPT_G_TRIM
,

3318 .
	g«me
 = "trim_backlog_batch",

3319 .
	g ame
 = "Trim backlog batch",

3320 .
	gty≥
 = 
FIO_OPT_INT
,

3321 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
åim_b©ch
),

3322 .
	ghñp
 = "TrimÅhisÇumber of IO blocks",

3323 .
	g∑ª¡
 = "trim_percentage",

3324 .
	ghide
 = 1,

3325 .
	göãrvÆ
 = 1,

3326 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3327 .
	ggroup
 = 
FIO_OPT_G_TRIM
,

3331 .
	g«me
 = "trim_percentage",

3332 .
	g ame
 = "TrimÖercentage",

3333 .
	gty≥
 = 
FIO_OPT_UNSUPPORTED
,

3334 .
	ghñp
 = "Fio doesÇot support TRIM on yourÖlatform",

3337 .
	g«me
 = "trim_verify_zero",

3338 .
	g ame
 = "VerifyÅrim zero",

3339 .
	gty≥
 = 
FIO_OPT_UNSUPPORTED
,

3340 .
	ghñp
 = "Fio doesÇot support TRIM on yourÖlatform",

3343 .
	g«me
 = "trim_backlog",

3344 .
	g ame
 = "Trim backlog",

3345 .
	gty≥
 = 
FIO_OPT_UNSUPPORTED
,

3346 .
	ghñp
 = "Fio doesÇot support TRIM on yourÖlatform",

3349 .
	g«me
 = "trim_backlog_batch",

3350 .
	g ame
 = "Trim backlog batch",

3351 .
	gty≥
 = 
FIO_OPT_UNSUPPORTED
,

3352 .
	ghñp
 = "Fio doesÇot support TRIM on yourÖlatform",

3356 .
	g«me
 = "write_iolog",

3357 .
	g ame
 = "Write I/OÜog",

3358 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

3359 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
wrôe_iﬁog_fûe
),

3360 .
	ghñp
 = "Store IOÖatternÅo file",

3361 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3362 .
	ggroup
 = 
FIO_OPT_G_IOLOG
,

3365 .
	g«me
 = "read_iolog",

3366 .
	g ame
 = "Read I/OÜog",

3367 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

3368 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
ªad_iﬁog_fûe
),

3369 .
	ghñp
 = "Playback IOÖattern from file",

3370 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3371 .
	ggroup
 = 
FIO_OPT_G_IOLOG
,

3374 .
	g«me
 = "read_iolog_chunked",

3375 .
	g ame
 = "Read I/OÜog inÖarts",

3376 .
	gty≥
 = 
FIO_OPT_BOOL
,

3377 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
ªad_iﬁog_chunked
),

3378 .
	gdef
 = "0",

3379 .
	g∑ª¡
 = "read_iolog",

3380 .
	ghñp
 = "Parse IOÖattern in chunks",

3381 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3382 .
	ggroup
 = 
FIO_OPT_G_IOLOG
,

3385 .
	g«me
 = "replay_no_stall",

3386 .
	g ame
 = "Don't stall onÑeplay",

3387 .
	gty≥
 = 
FIO_OPT_BOOL
,

3388 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
no_°Æl
),

3389 .
	gdef
 = "0",

3390 .
	g∑ª¡
 = "read_iolog",

3391 .
	ghide
 = 1,

3392 .
	ghñp
 = "Playback IOÖattern fileás fastásÖossible without stalls",

3393 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3394 .
	ggroup
 = 
FIO_OPT_G_IOLOG
,

3397 .
	g«me
 = "replay_redirect",

3398 .
	g ame
 = "Redirect device forÑeplay",

3399 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

3400 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
ª∂ay_ªdúe˘
),

3401 .
	g∑ª¡
 = "read_iolog",

3402 .
	ghide
 = 1,

3403 .
	ghñp
 = "Replayáll I/O ontoÅhis device,Ñegardless ofÅrace device",

3404 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3405 .
	ggroup
 = 
FIO_OPT_G_IOLOG
,

3408 .
	g«me
 = "replay_scale",

3409 .
	g ame
 = "Replace offset scale factor",

3410 .
	gty≥
 = 
FIO_OPT_INT
,

3411 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
ª∂ay_sˇÀ
),

3412 .
	g∑ª¡
 = "read_iolog",

3413 .
	gdef
 = "1",

3414 .
	ghñp
 = "Align offsetsÅoÅhis blocksize",

3415 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3416 .
	ggroup
 = 
FIO_OPT_G_IOLOG
,

3419 .
	g«me
 = "replay_align",

3420 .
	g ame
 = "Replaceálignment",

3421 .
	gty≥
 = 
FIO_OPT_INT
,

3422 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
ª∂ay_Æign
),

3423 .
	g∑ª¡
 = "read_iolog",

3424 .
	ghñp
 = "Scale offset down byÅhis factor",

3425 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3426 .
	ggroup
 = 
FIO_OPT_G_IOLOG
,

3427 .
	gpow2
 = 1,

3430 .
	g«me
 = "replay_time_scale",

3431 .
	g ame
 = "Replay Time Scale",

3432 .
	gty≥
 = 
FIO_OPT_INT
,

3433 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
ª∂ay_time_sˇÀ
),

3434 .
	gdef
 = "100",

3435 .
	gmövÆ
 = 1,

3436 .
	g∑ª¡
 = "read_iolog",

3437 .
	ghide
 = 1,

3438 .
	ghñp
 = "ScaleÅime forÑeplayÉvents",

3439 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3440 .
	ggroup
 = 
FIO_OPT_G_IOLOG
,

3443 .
	g«me
 = "replay_skip",

3444 .
	g ame
 = "Replay Skip",

3445 .
	gty≥
 = 
FIO_OPT_STR
,

3446 .
	gcb
 = 
°r_ª∂ay_skù_cb
,

3447 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
ª∂ay_skù
),

3448 .
	g∑ª¡
 = "read_iolog",

3449 .
	ghñp
 = "Skip certain IOÅypes (read,write,trim,flush)",

3450 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3451 .
	ggroup
 = 
FIO_OPT_G_IOLOG
,

3454 .
	g«me
 = "merge_blktrace_file",

3455 .
	g ame
 = "Merged blktrace output filename",

3456 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

3457 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
mîge_blkåa˚_fûe
),

3458 .
	ghñp
 = "Merged blktrace output filename",

3459 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3460 .
	ggroup
 = 
FIO_OPT_G_IOLOG
,

3463 .
	g«me
 = "merge_blktrace_scalars",

3464 .
	g ame
 = "PercentageÅo scaleÉachÅrace",

3465 .
	gty≥
 = 
FIO_OPT_FLOAT_LIST
,

3466 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
mîge_blkåa˚_sˇœrs
),

3467 .
	gmaxÀn
 = 
FIO_IO_U_LIST_MAX_LEN
,

3468 .
	ghñp
 = "PercentageÅo scaleÉachÅrace",

3469 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3470 .
	ggroup
 = 
FIO_OPT_G_IOLOG
,

3473 .
	g«me
 = "merge_blktrace_iters",

3474 .
	g ame
 = "Number of iterationsÅoÑunÖerÅrace",

3475 .
	gty≥
 = 
FIO_OPT_FLOAT_LIST
,

3476 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
mîge_blkåa˚_ôîs
),

3477 .
	gmaxÀn
 = 
FIO_IO_U_LIST_MAX_LEN
,

3478 .
	ghñp
 = "Number of iterationsÅoÑunÖerÅrace",

3479 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3480 .
	ggroup
 = 
FIO_OPT_G_IOLOG
,

3483 .
	g«me
 = "exec_prerun",

3484 .
	g ame
 = "Pre-executeÑunnable",

3485 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

3486 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
exec_¥îun
),

3487 .
	ghñp
 = "ExecuteÅhis fileÖriorÅoÑunning job",

3488 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

3489 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3492 .
	g«me
 = "exec_postrun",

3493 .
	g ame
 = "Post-executeÑunnable",

3494 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

3495 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
exec_po°run
),

3496 .
	ghñp
 = "ExecuteÅhis fileáfterÑunning job",

3497 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

3498 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3500 #ifde‡
FIO_HAVE_IOSCHED_SWITCH


3502 .
	g«me
 = "ioscheduler",

3503 .
	g ame
 = "I/O scheduler",

3504 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

3505 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
ioscheduÀr
),

3506 .
	ghñp
 = "UseÅhis IO scheduler onÅhe backing device",

3507 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

3508 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3512 .
	g«me
 = "ioscheduler",

3513 .
	g ame
 = "I/O scheduler",

3514 .
	gty≥
 = 
FIO_OPT_UNSUPPORTED
,

3515 .
	ghñp
 = "YourÖlatform doesÇot support IO scheduler switching",

3519 .
	g«me
 = "zonemode",

3520 .
	g ame
 = "Zone mode",

3521 .
	ghñp
 = "Mode forÅhe zonesize, zonerangeánd zoneskipÖarameters",

3522 .
	gty≥
 = 
FIO_OPT_STR
,

3523 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
z⁄e_mode
),

3524 .
	gdef
 = "none",

3525 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3526 .
	ggroup
 = 
FIO_OPT_G_ZONE
,

3527 .
	gposvÆ
 = {

3528 { .
ivÆ
 = "none",

3529 .
	govÆ
 = 
ZONE_MODE_NONE
,

3530 .
	ghñp
 = "no zoning",

3532 { .
	givÆ
 = "strided",

3533 .
	govÆ
 = 
ZONE_MODE_STRIDED
,

3534 .
	ghñp
 = "strided mode -Ñandom I/O isÑestrictedÅoá single zone",

3536 { .
	givÆ
 = "zbd",

3537 .
	govÆ
 = 
ZONE_MODE_ZBD
,

3538 .
	ghñp
 = "zoned block device mode -Ñandom I/O selects one of multiple zonesÑandomly",

3543 .
	g«me
 = "zonesize",

3544 .
	g ame
 = "Zone size",

3545 .
	gty≥
 = 
FIO_OPT_STR_VAL
,

3546 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
z⁄e_size
),

3547 .
	ghñp
 = "Amount of dataÅoÑeadÖer zone",

3548 .
	gdef
 = "0",

3549 .
	göãrvÆ
 = 1024 * 1024,

3550 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3551 .
	ggroup
 = 
FIO_OPT_G_ZONE
,

3554 .
	g«me
 = "zonecapacity",

3555 .
	g ame
 = "Zone capacity",

3556 .
	gty≥
 = 
FIO_OPT_STR_VAL
,

3557 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
z⁄e_ˇ∑côy
),

3558 .
	ghñp
 = "CapacityÖer zone",

3559 .
	gdef
 = "0",

3560 .
	göãrvÆ
 = 1024 * 1024,

3561 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3562 .
	ggroup
 = 
FIO_OPT_G_ZONE
,

3565 .
	g«me
 = "zonerange",

3566 .
	g ame
 = "ZoneÑange",

3567 .
	gty≥
 = 
FIO_OPT_STR_VAL
,

3568 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
z⁄e_ønge
),

3569 .
	ghñp
 = "Give size ofán IO zone",

3570 .
	gdef
 = "0",

3571 .
	göãrvÆ
 = 1024 * 1024,

3572 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3573 .
	ggroup
 = 
FIO_OPT_G_ZONE
,

3576 .
	g«me
 = "zoneskip",

3577 .
	g ame
 = "Zone skip",

3578 .
	gty≥
 = 
FIO_OPT_STR_VAL_ZONE
,

3579 .
	gcb
 = 
°r_z⁄eskù_cb
,

3580 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
z⁄e_skù
),

3581 .
	ghñp
 = "Space between IO zones",

3582 .
	gdef
 = "0",

3583 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3584 .
	ggroup
 = 
FIO_OPT_G_ZONE
,

3587 .
	g«me
 = "read_beyond_wp",

3588 .
	g ame
 = "AllowÑeads beyondÅhe zone writeÖointer",

3589 .
	gty≥
 = 
FIO_OPT_BOOL
,

3590 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
ªad_bey⁄d_wp
),

3591 .
	ghñp
 = "AllowÑeads beyondÅhe zone writeÖointer",

3592 .
	gdef
 = "0",

3593 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3594 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3597 .
	g«me
 = "max_open_zones",

3598 .
	g ame
 = "Per device/file maximumÇumber of open zones",

3599 .
	gty≥
 = 
FIO_OPT_INT
,

3600 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
max_›í_z⁄es
),

3601 .
	gmaxvÆ
 = 
ZBD_MAX_OPEN_ZONES
,

3602 .
	ghñp
 = "Limit onÅheÇumber of simultaneously opened sequential write zones with zonemode=zbd",

3603 .
	gdef
 = "0",

3604 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3605 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3608 .
	g«me
 = "job_max_open_zones",

3609 .
	g ame
 = "Job maximumÇumber of open zones",

3610 .
	gty≥
 = 
FIO_OPT_INT
,

3611 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
job_max_›í_z⁄es
),

3612 .
	gmaxvÆ
 = 
ZBD_MAX_OPEN_ZONES
,

3613 .
	ghñp
 = "Limit onÅheÇumber of simultaneously opened sequential write zones with zonemode=zbd by oneÅhread/process",

3614 .
	gdef
 = "0",

3615 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3616 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3619 .
	g«me
 = "ignore_zone_limits",

3620 .
	g ame
 = "Ignore zoneÑesourceÜimits",

3621 .
	gty≥
 = 
FIO_OPT_BOOL
,

3622 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
ign‹e_z⁄e_limôs
),

3623 .
	gdef
 = "0",

3624 .
	ghñp
 = "IgnoreÅhe zoneÑesourceÜimits (max open/active zones)Ñeported byÅhe device",

3625 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3626 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3629 .
	g«me
 = "zone_reset_threshold",

3630 .
	g ame
 = "ZoneÑesetÅhreshold",

3631 .
	ghñp
 = "Zoned block deviceÑesetÅhreshold",

3632 .
	gty≥
 = 
FIO_OPT_FLOAT_LIST
,

3633 .
	gmaxÀn
 = 1,

3634 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
zπ
),

3635 .
	gmöÂ
 = 0,

3636 .
	gmaxÂ
 = 1,

3637 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3638 .
	ggroup
 = 
FIO_OPT_G_ZONE
,

3641 .
	g«me
 = "zone_reset_frequency",

3642 .
	g ame
 = "ZoneÑeset frequency",

3643 .
	ghñp
 = "Zoned block device zoneÑeset frequency in HZ",

3644 .
	gty≥
 = 
FIO_OPT_FLOAT_LIST
,

3645 .
	gmaxÀn
 = 1,

3646 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
zrf
),

3647 .
	gmöÂ
 = 0,

3648 .
	gmaxÂ
 = 1,

3649 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3650 .
	ggroup
 = 
FIO_OPT_G_ZONE
,

3653 .
	g«me
 = "lockmem",

3654 .
	g ame
 = "Lock memory",

3655 .
	gty≥
 = 
FIO_OPT_STR_VAL
,

3656 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
lockmem
),

3657 .
	ghñp
 = "Lock downÅhisámount of memory (per worker)",

3658 .
	gdef
 = "0",

3659 .
	göãrvÆ
 = 1024 * 1024,

3660 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

3661 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3664 .
	g«me
 = "rwmixread",

3665 .
	g ame
 = "Read/write mixÑead",

3666 .
	gty≥
 = 
FIO_OPT_INT
,

3667 .
	gcb
 = 
°r_rwmix_ªad_cb
,

3668 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
rwmix
[
DDIR_READ
]),

3669 .
	gmaxvÆ
 = 100,

3670 .
	ghñp
 = "Percentage of mixed workloadÅhat isÑeads",

3671 .
	gdef
 = "50",

3672 .
	göãrvÆ
 = 5,

3673 .
	gövî£
 = "rwmixwrite",

3674 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3675 .
	ggroup
 = 
FIO_OPT_G_RWMIX
,

3678 .
	g«me
 = "rwmixwrite",

3679 .
	g ame
 = "Read/write mix write",

3680 .
	gty≥
 = 
FIO_OPT_INT
,

3681 .
	gcb
 = 
°r_rwmix_wrôe_cb
,

3682 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
rwmix
[
DDIR_WRITE
]),

3683 .
	gmaxvÆ
 = 100,

3684 .
	ghñp
 = "Percentage of mixed workloadÅhat is writes",

3685 .
	gdef
 = "50",

3686 .
	göãrvÆ
 = 5,

3687 .
	gövî£
 = "rwmixread",

3688 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3689 .
	ggroup
 = 
FIO_OPT_G_RWMIX
,

3692 .
	g«me
 = "rwmixcycle",

3693 .
	g ame
 = "Read/write mix cycle",

3694 .
	gty≥
 = 
FIO_OPT_DEPRECATED
,

3695 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3696 .
	ggroup
 = 
FIO_OPT_G_RWMIX
,

3699 .
	g«me
 = "nice",

3700 .
	g ame
 = "Nice",

3701 .
	gty≥
 = 
FIO_OPT_INT
,

3702 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
ni˚
),

3703 .
	ghñp
 = "Set job CPUÇice value",

3704 .
	gmövÆ
 = -20,

3705 .
	gmaxvÆ
 = 19,

3706 .
	gdef
 = "0",

3707 .
	göãrvÆ
 = 1,

3708 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

3709 .
	ggroup
 = 
FIO_OPT_G_CRED
,

3711 #ifde‡
FIO_HAVE_IOPRIO


3713 .
	g«me
 = "prio",

3714 .
	g ame
 = "I/OÇiceÖriority",

3715 .
	gty≥
 = 
FIO_OPT_INT
,

3716 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
i›rio
),

3717 .
	ghñp
 = "Set job IOÖriority value",

3718 .
	gmövÆ
 = 
IOPRIO_MIN_PRIO
,

3719 .
	gmaxvÆ
 = 
IOPRIO_MAX_PRIO
,

3720 .
	göãrvÆ
 = 1,

3721 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

3722 .
	ggroup
 = 
FIO_OPT_G_CRED
,

3726 .
	g«me
 = "prio",

3727 .
	g ame
 = "I/OÇiceÖriority",

3728 .
	gty≥
 = 
FIO_OPT_UNSUPPORTED
,

3729 .
	ghñp
 = "YourÖlatform doesÇot support IOÖriorities",

3732 #ifde‡
FIO_HAVE_IOPRIO_CLASS


3733 #i‚de‡
FIO_HAVE_IOPRIO


3737 .
	g«me
 = "prioclass",

3738 .
	g ame
 = "I/OÇiceÖriority class",

3739 .
	gty≥
 = 
FIO_OPT_INT
,

3740 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
i›rio_˛ass
),

3741 .
	ghñp
 = "Set job IOÖriority class",

3742 .
	gmövÆ
 = 
IOPRIO_MIN_PRIO_CLASS
,

3743 .
	gmaxvÆ
 = 
IOPRIO_MAX_PRIO_CLASS
,

3744 .
	göãrvÆ
 = 1,

3745 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

3746 .
	ggroup
 = 
FIO_OPT_G_CRED
,

3750 .
	g«me
 = "prioclass",

3751 .
	g ame
 = "I/OÇiceÖriority class",

3752 .
	gty≥
 = 
FIO_OPT_UNSUPPORTED
,

3753 .
	ghñp
 = "YourÖlatform doesÇot support IOÖriority classes",

3757 .
	g«me
 = "thinktime",

3758 .
	g ame
 = "Thinktime",

3759 .
	gty≥
 = 
FIO_OPT_INT
,

3760 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
thöktime
),

3761 .
	ghñp
 = "IdleÅime between IO buffers (usec)",

3762 .
	gdef
 = "0",

3763 .
	gis_time
 = 1,

3764 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3765 .
	ggroup
 = 
FIO_OPT_G_THINKTIME
,

3768 .
	g«me
 = "thinktime_spin",

3769 .
	g ame
 = "Thinktime spin",

3770 .
	gty≥
 = 
FIO_OPT_INT
,

3771 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
thöktime_•ö
),

3772 .
	ghñp
 = "StartÅhinkÅime by spinningÅhisámount (usec)",

3773 .
	gdef
 = "0",

3774 .
	gis_time
 = 1,

3775 .
	g∑ª¡
 = "thinktime",

3776 .
	ghide
 = 1,

3777 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3778 .
	ggroup
 = 
FIO_OPT_G_THINKTIME
,

3781 .
	g«me
 = "thinktime_blocks",

3782 .
	g ame
 = "Thinktime blocks",

3783 .
	gty≥
 = 
FIO_OPT_INT
,

3784 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
thöktime_blocks
),

3785 .
	ghñp
 = "IO bufferÖeriod between 'thinktime'",

3786 .
	gdef
 = "1",

3787 .
	g∑ª¡
 = "thinktime",

3788 .
	ghide
 = 1,

3789 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3790 .
	ggroup
 = 
FIO_OPT_G_THINKTIME
,

3793 .
	g«me
 = "thinktime_blocks_type",

3794 .
	g ame
 = "Thinktime blocksÅype",

3795 .
	gty≥
 = 
FIO_OPT_STR
,

3796 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
thöktime_blocks_ty≥
),

3797 .
	ghñp
 = "HowÅhinktime_blocksÅakesÉffect",

3798 .
	gdef
 = "complete",

3799 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3800 .
	ggroup
 = 
FIO_OPT_G_THINKTIME
,

3801 .
	gposvÆ
 = {

3802 { .
ivÆ
 = "complete",

3803 .
	govÆ
 = 
THINKTIME_BLOCKS_TYPE_COMPLETE
,

3804 .
	ghñp
 = "thinktime_blocksÅakesÉffectátÅhe completion side",

3807 .
	givÆ
 = "issue",

3808 .
	govÆ
 = 
THINKTIME_BLOCKS_TYPE_ISSUE
,

3809 .
	ghñp
 = "thinktime_blocksÅakesÉffectátÅhe issue side",

3812 .
	g∑ª¡
 = "thinktime",

3815 .
	g«me
 = "thinktime_iotime",

3816 .
	g ame
 = "Thinktime interval",

3817 .
	gty≥
 = 
FIO_OPT_INT
,

3818 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
thöktime_iŸime
),

3819 .
	ghñp
 = "IOÅime interval between 'thinktime'",

3820 .
	gdef
 = "0",

3821 .
	g∑ª¡
 = "thinktime",

3822 .
	ghide
 = 1,

3823 .
	gis_£c⁄ds
 = 1,

3824 .
	gis_time
 = 1,

3825 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3826 .
	ggroup
 = 
FIO_OPT_G_THINKTIME
,

3829 .
	g«me
 = "rate",

3830 .
	g ame
 = "I/OÑate",

3831 .
	gty≥
 = 
FIO_OPT_ULL
,

3832 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
øã
[
DDIR_READ
]),

3833 .
	goff2
 = 
off£tof
(
thªad_›ti⁄s
, 
øã
[
DDIR_WRITE
]),

3834 .
	goff3
 = 
off£tof
(
thªad_›ti⁄s
, 
øã
[
DDIR_TRIM
]),

3835 .
	ghñp
 = "Set bandwidthÑate",

3836 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3837 .
	ggroup
 = 
FIO_OPT_G_RATE
,

3840 .
	g«me
 = "rate_min",

3841 .
	gÆüs
 = "ratemin",

3842 .
	g ame
 = "I/O minÑate",

3843 .
	gty≥
 = 
FIO_OPT_ULL
,

3844 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
øãmö
[
DDIR_READ
]),

3845 .
	goff2
 = 
off£tof
(
thªad_›ti⁄s
, 
øãmö
[
DDIR_WRITE
]),

3846 .
	goff3
 = 
off£tof
(
thªad_›ti⁄s
, 
øãmö
[
DDIR_TRIM
]),

3847 .
	ghñp
 = "Job must meetÅhisÑate or it will be shutdown",

3848 .
	g∑ª¡
 = "rate",

3849 .
	ghide
 = 1,

3850 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3851 .
	ggroup
 = 
FIO_OPT_G_RATE
,

3854 .
	g«me
 = "rate_iops",

3855 .
	g ame
 = "I/OÑate IOPS",

3856 .
	gty≥
 = 
FIO_OPT_INT
,

3857 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
øã_i›s
[
DDIR_READ
]),

3858 .
	goff2
 = 
off£tof
(
thªad_›ti⁄s
, 
øã_i›s
[
DDIR_WRITE
]),

3859 .
	goff3
 = 
off£tof
(
thªad_›ti⁄s
, 
øã_i›s
[
DDIR_TRIM
]),

3860 .
	ghñp
 = "Limit IO usedÅoÅhisÇumber of IO operations/sec",

3861 .
	ghide
 = 1,

3862 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3863 .
	ggroup
 = 
FIO_OPT_G_RATE
,

3866 .
	g«me
 = "rate_iops_min",

3867 .
	g ame
 = "I/O minÑate IOPS",

3868 .
	gty≥
 = 
FIO_OPT_INT
,

3869 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
øã_i›s_mö
[
DDIR_READ
]),

3870 .
	goff2
 = 
off£tof
(
thªad_›ti⁄s
, 
øã_i›s_mö
[
DDIR_WRITE
]),

3871 .
	goff3
 = 
off£tof
(
thªad_›ti⁄s
, 
øã_i›s_mö
[
DDIR_TRIM
]),

3872 .
	ghñp
 = "Job must meetÅhisÑate or it will be shut down",

3873 .
	g∑ª¡
 = "rate_iops",

3874 .
	ghide
 = 1,

3875 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3876 .
	ggroup
 = 
FIO_OPT_G_RATE
,

3879 .
	g«me
 = "rate_process",

3880 .
	g ame
 = "Rate Process",

3881 .
	gty≥
 = 
FIO_OPT_STR
,

3882 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
øã_¥o˚ss
),

3883 .
	ghñp
 = "WhatÖrocess controls howÑated IO is managed",

3884 .
	gdef
 = "linear",

3885 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3886 .
	ggroup
 = 
FIO_OPT_G_RATE
,

3887 .
	gposvÆ
 = {

3888 { .
ivÆ
 = "linear",

3889 .
	govÆ
 = 
RATE_PROCESS_LINEAR
,

3890 .
	ghñp
 = "LinearÑate of IO",

3893 .
	givÆ
 = "poisson",

3894 .
	govÆ
 = 
RATE_PROCESS_POISSON
,

3895 .
	ghñp
 = "Rate follows PoissonÖrocess",

3898 .
	g∑ª¡
 = "rate",

3901 .
	g«me
 = "rate_cycle",

3902 .
	gÆüs
 = "ratecycle",

3903 .
	g ame
 = "I/OÑate cycle",

3904 .
	gty≥
 = 
FIO_OPT_INT
,

3905 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
øãcy˛e
),

3906 .
	ghñp
 = "Windowáverage forÑateÜimits (msec)",

3907 .
	gdef
 = "1000",

3908 .
	g∑ª¡
 = "rate",

3909 .
	ghide
 = 1,

3910 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3911 .
	ggroup
 = 
FIO_OPT_G_RATE
,

3914 .
	g«me
 = "rate_ignore_thinktime",

3915 .
	g ame
 = "Rate ignoreÅhinktime",

3916 .
	gty≥
 = 
FIO_OPT_BOOL
,

3917 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
øã_ign_thök
),

3918 .
	ghñp
 = "Rated IO ignoresÅhinktime settings",

3919 .
	g∑ª¡
 = "rate",

3920 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3921 .
	ggroup
 = 
FIO_OPT_G_RATE
,

3924 .
	g«me
 = "max_latency",

3925 .
	g ame
 = "Max Latency (usec)",

3926 .
	gty≥
 = 
FIO_OPT_ULL
,

3927 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
max_œãncy
[
DDIR_READ
]),

3928 .
	goff2
 = 
off£tof
(
thªad_›ti⁄s
, 
max_œãncy
[
DDIR_WRITE
]),

3929 .
	goff3
 = 
off£tof
(
thªad_›ti⁄s
, 
max_œãncy
[
DDIR_TRIM
]),

3930 .
	ghñp
 = "MaximumÅolerated IOÜatency (usec)",

3931 .
	gis_time
 = 1,

3932 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3933 .
	ggroup
 = 
FIO_OPT_G_LATPROF
,

3936 .
	g«me
 = "latency_target",

3937 .
	g ame
 = "Latency Target (usec)",

3938 .
	gty≥
 = 
FIO_OPT_STR_VAL_TIME
,

3939 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
œãncy_èrgë
),

3940 .
	ghñp
 = "RampÅo max queue depth supportingÅhisÜatency",

3941 .
	gis_time
 = 1,

3942 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3943 .
	ggroup
 = 
FIO_OPT_G_LATPROF
,

3946 .
	g«me
 = "latency_window",

3947 .
	g ame
 = "Latency Window (usec)",

3948 .
	gty≥
 = 
FIO_OPT_STR_VAL_TIME
,

3949 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
œãncy_wödow
),

3950 .
	ghñp
 = "TimeÅo sustainÜatency_target",

3951 .
	gis_time
 = 1,

3952 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3953 .
	ggroup
 = 
FIO_OPT_G_LATPROF
,

3956 .
	g«me
 = "latency_percentile",

3957 .
	g ame
 = "Latency Percentile",

3958 .
	gty≥
 = 
FIO_OPT_FLOAT_LIST
,

3959 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
œãncy_≥r˚¡ûe
),

3960 .
	ghñp
 = "Percentile of IOs must be belowÜatency_target",

3961 .
	gdef
 = "100",

3962 .
	gmaxÀn
 = 1,

3963 .
	gmöÂ
 = 0.0,

3964 .
	gmaxÂ
 = 100.0,

3965 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3966 .
	ggroup
 = 
FIO_OPT_G_LATPROF
,

3969 .
	g«me
 = "latency_run",

3970 .
	g ame
 = "Latency Run",

3971 .
	gty≥
 = 
FIO_OPT_BOOL
,

3972 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
œãncy_run
),

3973 .
	ghñp
 = "Keepádjusting queue depthÅo matchÜatency_target",

3974 .
	gdef
 = "0",

3975 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3976 .
	ggroup
 = 
FIO_OPT_G_LATPROF
,

3979 .
	g«me
 = "invalidate",

3980 .
	g ame
 = "Cache invalidate",

3981 .
	gty≥
 = 
FIO_OPT_BOOL
,

3982 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
övÆid©e_ˇche
),

3983 .
	ghñp
 = "Invalidate buffer/page cacheÖriorÅoÑunning job",

3984 .
	gdef
 = "1",

3985 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3986 .
	ggroup
 = 
FIO_OPT_G_IO_TYPE
,

3989 .
	g«me
 = "sync",

3990 .
	g ame
 = "Synchronous I/O",

3991 .
	gty≥
 = 
FIO_OPT_STR
,

3992 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
sync_io
),

3993 .
	ghñp
 = "Use synchronous write IO",

3994 .
	gdef
 = "none",

3995 .
	ghide
 = 1,

3996 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3997 .
	ggroup
 = 
FIO_OPT_G_IO_TYPE
,

3998 .
	gposvÆ
 = {

3999 { .
ivÆ
 = "none",

4000 .
	govÆ
 = 0,

4002 { .
	givÆ
 = "0",

4003 .
	govÆ
 = 0,

4005 { .
	givÆ
 = "sync",

4006 .
	govÆ
 = 
O_SYNC
,

4008 { .
	givÆ
 = "1",

4009 .
	govÆ
 = 
O_SYNC
,

4011 #ifde‡
O_DSYNC


4012 { .
	givÆ
 = "dsync",

4013 .
	govÆ
 = 
O_DSYNC
,

4018 #ifde‡
FIO_HAVE_WRITE_HINT


4020 .
	g«me
 = "write_hint",

4021 .
	g ame
 = "Write hint",

4022 .
	gty≥
 = 
FIO_OPT_STR
,

4023 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
wrôe_höt
),

4024 .
	ghñp
 = "SetÉxpected writeÜifeÅime",

4025 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

4026 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4027 .
	gposvÆ
 = {

4028 { .
ivÆ
 = "none",

4029 .
	govÆ
 = 
RWH_WRITE_LIFE_NONE
,

4031 { .
	givÆ
 = "short",

4032 .
	govÆ
 = 
RWH_WRITE_LIFE_SHORT
,

4034 { .
	givÆ
 = "medium",

4035 .
	govÆ
 = 
RWH_WRITE_LIFE_MEDIUM
,

4037 { .
	givÆ
 = "long",

4038 .
	govÆ
 = 
RWH_WRITE_LIFE_LONG
,

4040 { .
	givÆ
 = "extreme",

4041 .
	govÆ
 = 
RWH_WRITE_LIFE_EXTREME
,

4047 .
	g«me
 = "create_serialize",

4048 .
	g ame
 = "Create serialize",

4049 .
	gty≥
 = 
FIO_OPT_BOOL
,

4050 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
¸óã_£rülize
),

4051 .
	ghñp
 = "Serialize creation of job files",

4052 .
	gdef
 = "1",

4053 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

4054 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4057 .
	g«me
 = "create_fsync",

4058 .
	g ame
 = "Create fsync",

4059 .
	gty≥
 = 
FIO_OPT_BOOL
,

4060 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
¸óã_fsync
),

4061 .
	ghñp
 = "fsync fileáfter creation",

4062 .
	gdef
 = "1",

4063 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

4064 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4067 .
	g«me
 = "create_on_open",

4068 .
	g ame
 = "Create on open",

4069 .
	gty≥
 = 
FIO_OPT_BOOL
,

4070 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
¸óã_⁄_›í
),

4071 .
	ghñp
 = "Create files whenÅheyáre opened for IO",

4072 .
	gdef
 = "0",

4073 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

4074 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4077 .
	g«me
 = "create_only",

4078 .
	g ame
 = "Create Only",

4079 .
	gty≥
 = 
FIO_OPT_BOOL
,

4080 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
¸óã_⁄ly
),

4081 .
	ghñp
 = "OnlyÖerform file creationÖhase",

4082 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

4083 .
	gdef
 = "0",

4086 .
	g«me
 = "allow_file_create",

4087 .
	g ame
 = "Allow file create",

4088 .
	gty≥
 = 
FIO_OPT_BOOL
,

4089 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
Ælow_¸óã
),

4090 .
	ghñp
 = "Permit fioÅo create files, ifÅhey don'tÉxist",

4091 .
	gdef
 = "1",

4092 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

4093 .
	ggroup
 = 
FIO_OPT_G_FILENAME
,

4096 .
	g«me
 = "allow_mounted_write",

4097 .
	g ame
 = "Allow mounted write",

4098 .
	gty≥
 = 
FIO_OPT_BOOL
,

4099 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
Ælow_mou¡ed_wrôe
),

4100 .
	ghñp
 = "Allow writesÅoá mountedÖartition",

4101 .
	gdef
 = "0",

4102 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

4103 .
	ggroup
 = 
FIO_OPT_G_FILENAME
,

4106 .
	g«me
 = "pre_read",

4107 .
	g ame
 = "Pre-read files",

4108 .
	gty≥
 = 
FIO_OPT_BOOL
,

4109 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
¥e_ªad
),

4110 .
	ghñp
 = "Pre-read files before starting officialÅesting",

4111 .
	gdef
 = "0",

4112 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

4113 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4115 #ifde‡
FIO_HAVE_CPU_AFFINITY


4117 .
	g«me
 = "cpumask",

4118 .
	g ame
 = "CPU mask",

4119 .
	gty≥
 = 
FIO_OPT_INT
,

4120 .
	gcb
 = 
°r_˝umask_cb
,

4121 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
˝umask
),

4122 .
	ghñp
 = "CPUáffinity mask",

4123 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

4124 .
	ggroup
 = 
FIO_OPT_G_CRED
,

4127 .
	g«me
 = "cpus_allowed",

4128 .
	g ame
 = "CPUsállowed",

4129 .
	gty≥
 = 
FIO_OPT_STR
,

4130 .
	gcb
 = 
°r_˝us_Ælowed_cb
,

4131 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
˝umask
),

4132 .
	ghñp
 = "Set CPUsállowed",

4133 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

4134 .
	ggroup
 = 
FIO_OPT_G_CRED
,

4137 .
	g«me
 = "cpus_allowed_policy",

4138 .
	g ame
 = "CPUsállowed distributionÖolicy",

4139 .
	gty≥
 = 
FIO_OPT_STR
,

4140 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
˝us_Ælowed_pﬁicy
),

4141 .
	ghñp
 = "DistributionÖolicy for cpus_allowed",

4142 .
	g∑ª¡
 = "cpus_allowed",

4143 .
	g¥io
 = 1,

4144 .
	gposvÆ
 = {

4145 { .
ivÆ
 = "shared",

4146 .
	govÆ
 = 
FIO_CPUS_SHARED
,

4147 .
	ghñp
 = "Mask shared betweenÅhreads",

4149 { .
	givÆ
 = "split",

4150 .
	govÆ
 = 
FIO_CPUS_SPLIT
,

4151 .
	ghñp
 = "Mask split betweenÅhreads",

4154 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

4155 .
	ggroup
 = 
FIO_OPT_G_CRED
,

4159 .
	g«me
 = "cpumask",

4160 .
	g ame
 = "CPU mask",

4161 .
	gty≥
 = 
FIO_OPT_UNSUPPORTED
,

4162 .
	ghñp
 = "YourÖlatform doesÇot support CPUáffinities",

4165 .
	g«me
 = "cpus_allowed",

4166 .
	g ame
 = "CPUsállowed",

4167 .
	gty≥
 = 
FIO_OPT_UNSUPPORTED
,

4168 .
	ghñp
 = "YourÖlatform doesÇot support CPUáffinities",

4171 .
	g«me
 = "cpus_allowed_policy",

4172 .
	g ame
 = "CPUsállowed distributionÖolicy",

4173 .
	gty≥
 = 
FIO_OPT_UNSUPPORTED
,

4174 .
	ghñp
 = "YourÖlatform doesÇot support CPUáffinities",

4177 #ifde‡
CONFIG_LIBNUMA


4179 .
	g«me
 = "numa_cpu_nodes",

4180 .
	g ame
 = "NUMA CPU Nodes",

4181 .
	gty≥
 = 
FIO_OPT_STR
,

4182 .
	gcb
 = 
°r_numa_˝unodes_cb
,

4183 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
numa_˝unodes
),

4184 .
	ghñp
 = "NUMA CPUÇodes bind",

4185 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

4186 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4189 .
	g«me
 = "numa_mem_policy",

4190 .
	g ame
 = "NUMA Memory Policy",

4191 .
	gty≥
 = 
FIO_OPT_STR
,

4192 .
	gcb
 = 
°r_numa_mpﬁ_cb
,

4193 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
numa_memnodes
),

4194 .
	ghñp
 = "NUMA memoryÖolicy setup",

4195 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

4196 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4200 .
	g«me
 = "numa_cpu_nodes",

4201 .
	g ame
 = "NUMA CPU Nodes",

4202 .
	gty≥
 = 
FIO_OPT_UNSUPPORTED
,

4203 .
	ghñp
 = "Build fio withÜibnuma-dev(el)ÅoÉnableÅhis option",

4206 .
	g«me
 = "numa_mem_policy",

4207 .
	g ame
 = "NUMA Memory Policy",

4208 .
	gty≥
 = 
FIO_OPT_UNSUPPORTED
,

4209 .
	ghñp
 = "Build fio withÜibnuma-dev(el)ÅoÉnableÅhis option",

4212 #ifde‡
CONFIG_CUDA


4214 .
	g«me
 = "gpu_dev_id",

4215 .
	g ame
 = "GPU device ID",

4216 .
	gty≥
 = 
FIO_OPT_INT
,

4217 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
gpu_dev_id
),

4218 .
	ghñp
 = "Set GPU device ID for GPUDirect RDMA",

4219 .
	gdef
 = "0",

4220 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

4221 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4225 .
	g«me
 = "end_fsync",

4226 .
	g ame
 = "End fsync",

4227 .
	gty≥
 = 
FIO_OPT_BOOL
,

4228 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
íd_fsync
),

4229 .
	ghñp
 = "Include fsyncátÅheÉnd of job",

4230 .
	gdef
 = "0",

4231 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

4232 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4235 .
	g«me
 = "fsync_on_close",

4236 .
	g ame
 = "Fsync on close",

4237 .
	gty≥
 = 
FIO_OPT_BOOL
,

4238 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
fsync_⁄_˛o£
),

4239 .
	ghñp
 = "fsync files on close",

4240 .
	gdef
 = "0",

4241 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

4242 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4245 .
	g«me
 = "unlink",

4246 .
	g ame
 = "Unlink file",

4247 .
	gty≥
 = 
FIO_OPT_BOOL
,

4248 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
u∆ök
),

4249 .
	ghñp
 = "Unlink created filesáfter job has completed",

4250 .
	gdef
 = "0",

4251 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

4252 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4255 .
	g«me
 = "unlink_each_loop",

4256 .
	g ame
 = "Unlink fileáfterÉachÜoop ofá job",

4257 .
	gty≥
 = 
FIO_OPT_BOOL
,

4258 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
u∆ök_óch_lo›
),

4259 .
	ghñp
 = "Unlink created filesáfterÉachÜoop iná job has completed",

4260 .
	gdef
 = "0",

4261 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

4262 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4265 .
	g«me
 = "exitall",

4266 .
	g ame
 = "Exit-all onÅerminate",

4267 .
	gty≥
 = 
FIO_OPT_STR_SET
,

4268 .
	gcb
 = 
°r_exôÆl_cb
,

4269 .
	ghñp
 = "Terminateáll jobs when oneÉxits",

4270 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

4271 .
	ggroup
 = 
FIO_OPT_G_PROCESS
,

4274 .
	g«me
 = "exit_what",

4275 .
	g ame
 = "What jobsÅo quit onÅerminate",

4276 .
	gty≥
 = 
FIO_OPT_STR
,

4277 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
exô_wh©
),

4278 .
	ghñp
 = "Fine-grained control forÉxitall",

4279 .
	gdef
 = "group",

4280 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

4281 .
	ggroup
 = 
FIO_OPT_G_PROCESS
,

4282 .
	gposvÆ
 = {

4283 { .
ivÆ
 = "group",

4284 .
	govÆ
 = 
TERMINATE_GROUP
,

4285 .
	ghñp
 = "exit_all=1 default behaviour",

4287 { .
	givÆ
 = "stonewall",

4288 .
	govÆ
 = 
TERMINATE_STONEWALL
,

4289 .
	ghñp
 = "quitáll currentlyÑunning jobs; continue withÇext stonewall",

4291 { .
	givÆ
 = "all",

4292 .
	govÆ
 = 
TERMINATE_ALL
,

4293 .
	ghñp
 = "QuitÉverything",

4298 .
	g«me
 = "exitall_on_error",

4299 .
	g ame
 = "Exit-all onÅerminate inÉrror",

4300 .
	gty≥
 = 
FIO_OPT_STR_SET
,

4301 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
exôÆl_îr‹
),

4302 .
	ghñp
 = "Terminateáll jobs when oneÉxits inÉrror",

4303 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

4304 .
	ggroup
 = 
FIO_OPT_G_PROCESS
,

4307 .
	g«me
 = "stonewall",

4308 .
	g ame
 = "Wait forÖrevious",

4309 .
	gÆüs
 = "wait_for_previous",

4310 .
	gty≥
 = 
FIO_OPT_STR_SET
,

4311 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
°⁄ewÆl
),

4312 .
	ghñp
 = "Insertá hard barrier betweenÅhis jobándÖrevious",

4313 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

4314 .
	ggroup
 = 
FIO_OPT_G_PROCESS
,

4317 .
	g«me
 = "new_group",

4318 .
	g ame
 = "New group",

4319 .
	gty≥
 = 
FIO_OPT_STR_SET
,

4320 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
√w_group
),

4321 .
	ghñp
 = "MarkÅhe start ofáÇew group (forÑeporting)",

4322 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

4323 .
	ggroup
 = 
FIO_OPT_G_PROCESS
,

4326 .
	g«me
 = "thread",

4327 .
	g ame
 = "Thread",

4328 .
	gty≥
 = 
FIO_OPT_STR_SET
,

4329 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
u£_thªad
),

4330 .
	ghñp
 = "UseÅhreads instead ofÖrocesses",

4331 #ifde‡
CONFIG_NO_SHM


4332 .
	gdef
 = "1",

4333 .
	gno_w¨n_def
 = 1,

4335 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

4336 .
	ggroup
 = 
FIO_OPT_G_PROCESS
,

4339 .
	g«me
 = "per_job_logs",

4340 .
	g ame
 = "Per Job Logs",

4341 .
	gty≥
 = 
FIO_OPT_BOOL
,

4342 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
≥r_job_logs
),

4343 .
	ghñp
 = "Include jobÇumber in generatedÜog files orÇot",

4344 .
	gdef
 = "1",

4345 .
	gˇãg‹y
 = 
FIO_OPT_C_LOG
,

4346 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4349 .
	g«me
 = "write_bw_log",

4350 .
	g ame
 = "Write bandwidthÜog",

4351 .
	gty≥
 = 
FIO_OPT_STR
,

4352 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
bw_log_fûe
),

4353 .
	gcb
 = 
°r_wrôe_bw_log_cb
,

4354 .
	ghñp
 = "WriteÜog of bandwidth duringÑun",

4355 .
	gˇãg‹y
 = 
FIO_OPT_C_LOG
,

4356 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4359 .
	g«me
 = "write_lat_log",

4360 .
	g ame
 = "WriteÜatencyÜog",

4361 .
	gty≥
 = 
FIO_OPT_STR
,

4362 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
œt_log_fûe
),

4363 .
	gcb
 = 
°r_wrôe_œt_log_cb
,

4364 .
	ghñp
 = "WriteÜog ofÜatency duringÑun",

4365 .
	gˇãg‹y
 = 
FIO_OPT_C_LOG
,

4366 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4369 .
	g«me
 = "write_iops_log",

4370 .
	g ame
 = "Write IOPSÜog",

4371 .
	gty≥
 = 
FIO_OPT_STR
,

4372 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
i›s_log_fûe
),

4373 .
	gcb
 = 
°r_wrôe_i›s_log_cb
,

4374 .
	ghñp
 = "WriteÜog of IOPS duringÑun",

4375 .
	gˇãg‹y
 = 
FIO_OPT_C_LOG
,

4376 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4379 .
	g«me
 = "log_entries",

4380 .
	g ame
 = "LogÉntries",

4381 .
	gty≥
 = 
FIO_OPT_INT
,

4382 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
log_íåõs
),

4383 .
	ghñp
 = "InitialÇumber ofÉntries iná job IOÜog",

4384 .
	gdef
 = 
__fio_°rögify
(
DEF_LOG_ENTRIES
),

4385 .
	gmövÆ
 = 
DEF_LOG_ENTRIES
,

4386 .
	gmaxvÆ
 = 
MAX_LOG_ENTRIES
,

4387 .
	gˇãg‹y
 = 
FIO_OPT_C_LOG
,

4388 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4391 .
	g«me
 = "log_avg_msec",

4392 .
	g ame
 = "Logáveraging (msec)",

4393 .
	gty≥
 = 
FIO_OPT_INT
,

4394 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
log_avg_m£c
),

4395 .
	ghñp
 = "Average bw/iops/latÜogs overÅhisÖeriod ofÅime",

4396 .
	gdef
 = "0",

4397 .
	gˇãg‹y
 = 
FIO_OPT_C_LOG
,

4398 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4401 .
	g«me
 = "log_hist_msec",

4402 .
	g ame
 = "Log histograms (msec)",

4403 .
	gty≥
 = 
FIO_OPT_INT
,

4404 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
log_hi°_m£c
),

4405 .
	ghñp
 = "Dump completionÜatency histogramsát frequency ofÅhisÅime value",

4406 .
	gdef
 = "0",

4407 .
	gˇãg‹y
 = 
FIO_OPT_C_LOG
,

4408 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4411 .
	g«me
 = "log_hist_coarseness",

4412 .
	g ame
 = "HistogramÜogs coarseness",

4413 .
	gty≥
 = 
FIO_OPT_INT
,

4414 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
log_hi°_cﬂr£√ss
),

4415 .
	ghñp
 = "Integer inÑange [0,6]. Higher coarseness outputs"

4418 .
	gdef
 = "0",

4419 .
	gˇãg‹y
 = 
FIO_OPT_C_LOG
,

4420 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4423 .
	g«me
 = "write_hist_log",

4424 .
	g ame
 = "WriteÜatency histogramÜogs",

4425 .
	gty≥
 = 
FIO_OPT_STR
,

4426 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
hi°_log_fûe
),

4427 .
	gcb
 = 
°r_wrôe_hi°_log_cb
,

4428 .
	ghñp
 = "WriteÜog ofÜatency histograms duringÑun",

4429 .
	gˇãg‹y
 = 
FIO_OPT_C_LOG
,

4430 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4433 .
	g«me
 = "log_max_value",

4434 .
	g ame
 = "Log maximum instead ofáverage",

4435 .
	gty≥
 = 
FIO_OPT_BOOL
,

4436 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
log_max
),

4437 .
	ghñp
 = "Log max sample iná window instead ofáverage",

4438 .
	gdef
 = "0",

4439 .
	gˇãg‹y
 = 
FIO_OPT_C_LOG
,

4440 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4443 .
	g«me
 = "log_offset",

4444 .
	g ame
 = "Log offset of IO",

4445 .
	gty≥
 = 
FIO_OPT_BOOL
,

4446 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
log_off£t
),

4447 .
	ghñp
 = "Include offset of IO forÉachÜogÉntry",

4448 .
	gdef
 = "0",

4449 .
	gˇãg‹y
 = 
FIO_OPT_C_LOG
,

4450 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4453 .
	g«me
 = "log_prio",

4454 .
	g ame
 = "LogÖriority of IO",

4455 .
	gty≥
 = 
FIO_OPT_BOOL
,

4456 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
log_¥io
),

4457 .
	ghñp
 = "IncludeÖriority value of IO forÉachÜogÉntry",

4458 .
	gdef
 = "0",

4459 .
	gˇãg‹y
 = 
FIO_OPT_C_LOG
,

4460 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4462 #ifde‡
CONFIG_ZLIB


4464 .
	g«me
 = "log_compression",

4465 .
	g ame
 = "Log compression",

4466 .
	gty≥
 = 
FIO_OPT_INT
,

4467 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
log_gz
),

4468 .
	ghñp
 = "Log in compressed chunks ofÅhis size",

4469 .
	gmövÆ
 = 1024ULL,

4470 .
	gmaxvÆ
 = 512 * 1024 * 1024ULL,

4471 .
	gˇãg‹y
 = 
FIO_OPT_C_LOG
,

4472 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4474 #ifde‡
FIO_HAVE_CPU_AFFINITY


4476 .
	g«me
 = "log_compression_cpus",

4477 .
	g ame
 = "Log Compression CPUs",

4478 .
	gty≥
 = 
FIO_OPT_STR
,

4479 .
	gcb
 = 
°r_log_˝us_Ælowed_cb
,

4480 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
log_gz_˝umask
),

4481 .
	g∑ª¡
 = "log_compression",

4482 .
	ghñp
 = "LimitÜog compressionÅoÅhese CPUs",

4483 .
	gˇãg‹y
 = 
FIO_OPT_C_LOG
,

4484 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4488 .
	g«me
 = "log_compression_cpus",

4489 .
	g ame
 = "Log Compression CPUs",

4490 .
	gty≥
 = 
FIO_OPT_UNSUPPORTED
,

4491 .
	ghñp
 = "YourÖlatform doesÇot support CPUáffinities",

4495 .
	g«me
 = "log_store_compressed",

4496 .
	g ame
 = "Log store compressed",

4497 .
	gty≥
 = 
FIO_OPT_BOOL
,

4498 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
log_gz_°‹e
),

4499 .
	ghñp
 = "StoreÜogs iná compressed format",

4500 .
	gˇãg‹y
 = 
FIO_OPT_C_LOG
,

4501 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4505 .
	g«me
 = "log_compression",

4506 .
	g ame
 = "Log compression",

4507 .
	gty≥
 = 
FIO_OPT_UNSUPPORTED
,

4508 .
	ghñp
 = "InstallÜibz-dev(el)Åo get compression support",

4511 .
	g«me
 = "log_store_compressed",

4512 .
	g ame
 = "Log store compressed",

4513 .
	gty≥
 = 
FIO_OPT_UNSUPPORTED
,

4514 .
	ghñp
 = "InstallÜibz-dev(el)Åo get compression support",

4518 .
	g«me
 = "log_unix_epoch",

4519 .
	g ame
 = "LogÉpoch unix",

4520 .
	gty≥
 = 
FIO_OPT_BOOL
,

4521 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
log_unix_ïoch
),

4522 .
	ghñp
 = "Use UnixÅime inÜog files",

4523 .
	gˇãg‹y
 = 
FIO_OPT_C_LOG
,

4524 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4527 .
	g«me
 = "log_alternate_epoch",

4528 .
	g ame
 = "LogÉpochálternate",

4529 .
	gty≥
 = 
FIO_OPT_BOOL
,

4530 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
log_Æã∫©e_ïoch
),

4531 .
	ghñp
 = "UseálternateÉpochÅime inÜog files. UsesÅhe sameÉpochásÅhat is used by clock_gettime with specifiedÜog_alternate_epoch_clock_id.",

4532 .
	gˇãg‹y
 = 
FIO_OPT_C_LOG
,

4533 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4536 .
	g«me
 = "log_alternate_epoch_clock_id",

4537 .
	g ame
 = "LogálternateÉpoch clock_id",

4538 .
	gty≥
 = 
FIO_OPT_INT
,

4539 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
log_Æã∫©e_ïoch_˛ock_id
),

4540 .
	ghñp
 = "IfÜog_alternate_epoch orÜog_unix_epoch isÅrue,Åhis option specifiesÅhe clock_id from clock_gettime whoseÉpoch should be used. IfÇeither ofÅhose isÅrue,Åhis option hasÇoÉffect. Default value is 0, or CLOCK_REALTIME",

4541 .
	gˇãg‹y
 = 
FIO_OPT_C_LOG
,

4542 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4545 .
	g«me
 = "block_error_percentiles",

4546 .
	g ame
 = "BlockÉrrorÖercentiles",

4547 .
	gty≥
 = 
FIO_OPT_BOOL
,

4548 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
block_îr‹_hi°
),

4549 .
	ghñp
 = "RecordÅrim blockÉrrorsánd makeá histogram",

4550 .
	gdef
 = "0",

4551 .
	gˇãg‹y
 = 
FIO_OPT_C_LOG
,

4552 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4555 .
	g«me
 = "bwavgtime",

4556 .
	g ame
 = "BandwidtháverageÅime",

4557 .
	gty≥
 = 
FIO_OPT_INT
,

4558 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
bw_avg_time
),

4559 .
	ghñp
 = "Time window over whichÅo calculate bandwidth"

4561 .
	gdef
 = "500",

4562 .
	g∑ª¡
 = "write_bw_log",

4563 .
	ghide
 = 1,

4564 .
	göãrvÆ
 = 100,

4565 .
	gˇãg‹y
 = 
FIO_OPT_C_LOG
,

4566 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4569 .
	g«me
 = "iopsavgtime",

4570 .
	g ame
 = "IOPSáverageÅime",

4571 .
	gty≥
 = 
FIO_OPT_INT
,

4572 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
i›s_avg_time
),

4573 .
	ghñp
 = "Time window over whichÅo calculate IOPS (msec)",

4574 .
	gdef
 = "500",

4575 .
	g∑ª¡
 = "write_iops_log",

4576 .
	ghide
 = 1,

4577 .
	göãrvÆ
 = 100,

4578 .
	gˇãg‹y
 = 
FIO_OPT_C_LOG
,

4579 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4582 .
	g«me
 = "group_reporting",

4583 .
	g ame
 = "GroupÑeporting",

4584 .
	gty≥
 = 
FIO_OPT_STR_SET
,

4585 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
group_ªp‹tög
),

4586 .
	ghñp
 = "DoÑeporting onáÖer-group basis",

4587 .
	gˇãg‹y
 = 
FIO_OPT_C_STAT
,

4588 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4591 .
	g«me
 = "stats",

4592 .
	g ame
 = "Stats",

4593 .
	gty≥
 = 
FIO_OPT_BOOL
,

4594 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
°©s
),

4595 .
	ghñp
 = "Enable collection of stats",

4596 .
	gdef
 = "1",

4597 .
	gˇãg‹y
 = 
FIO_OPT_C_STAT
,

4598 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4601 .
	g«me
 = "zero_buffers",

4602 .
	g ame
 = "Zero I/O buffers",

4603 .
	gty≥
 = 
FIO_OPT_STR_SET
,

4604 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
zîo_buf„rs
),

4605 .
	ghñp
 = "Init IO buffersÅoáll zeroes",

4606 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

4607 .
	ggroup
 = 
FIO_OPT_G_IO_BUF
,

4610 .
	g«me
 = "refill_buffers",

4611 .
	g ame
 = "Refill I/O buffers",

4612 .
	gty≥
 = 
FIO_OPT_STR_SET
,

4613 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
ªfûl_buf„rs
),

4614 .
	ghñp
 = "Refill IO buffers onÉvery IO submit",

4615 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

4616 .
	ggroup
 = 
FIO_OPT_G_IO_BUF
,

4619 .
	g«me
 = "scramble_buffers",

4620 .
	g ame
 = "Scramble I/O buffers",

4621 .
	gty≥
 = 
FIO_OPT_BOOL
,

4622 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
s¸ambÀ_buf„rs
),

4623 .
	ghñp
 = "Slightly scramble buffers onÉvery IO submit",

4624 .
	gdef
 = "1",

4625 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

4626 .
	ggroup
 = 
FIO_OPT_G_IO_BUF
,

4629 .
	g«me
 = "buffer_pattern",

4630 .
	g ame
 = "BufferÖattern",

4631 .
	gty≥
 = 
FIO_OPT_STR
,

4632 .
	gcb
 = 
°r_buf„r_∑âîn_cb
,

4633 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
buf„r_∑âîn
),

4634 .
	ghñp
 = "FillÖattern for IO buffers",

4635 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

4636 .
	ggroup
 = 
FIO_OPT_G_IO_BUF
,

4639 .
	g«me
 = "buffer_compress_percentage",

4640 .
	g ame
 = "Buffer compressionÖercentage",

4641 .
	gty≥
 = 
FIO_OPT_INT
,

4642 .
	gcb
 = 
°r_buf„r_com¥ess_cb
,

4643 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
com¥ess_≥r˚¡age
),

4644 .
	gmaxvÆ
 = 100,

4645 .
	gmövÆ
 = 0,

4646 .
	ghñp
 = "How compressibleÅhe buffer is (approximately)",

4647 .
	göãrvÆ
 = 5,

4648 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

4649 .
	ggroup
 = 
FIO_OPT_G_IO_BUF
,

4652 .
	g«me
 = "buffer_compress_chunk",

4653 .
	g ame
 = "Buffer compression chunk size",

4654 .
	gty≥
 = 
FIO_OPT_INT
,

4655 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
com¥ess_chunk
),

4656 .
	g∑ª¡
 = "buffer_compress_percentage",

4657 .
	ghide
 = 1,

4658 .
	ghñp
 = "Size of compressibleÑegion in buffer",

4659 .
	gdef
 = "512",

4660 .
	göãrvÆ
 = 256,

4661 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

4662 .
	ggroup
 = 
FIO_OPT_G_IO_BUF
,

4665 .
	g«me
 = "dedupe_percentage",

4666 .
	g ame
 = "DedupeÖercentage",

4667 .
	gty≥
 = 
FIO_OPT_INT
,

4668 .
	gcb
 = 
°r_dedu≥_cb
,

4669 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
dedu≥_≥r˚¡age
),

4670 .
	gmaxvÆ
 = 100,

4671 .
	gmövÆ
 = 0,

4672 .
	ghñp
 = "Percentage of buffersÅhatáre dedupable",

4673 .
	göãrvÆ
 = 1,

4674 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

4675 .
	ggroup
 = 
FIO_OPT_G_IO_BUF
,

4678 .
	g«me
 = "dedupe_global",

4679 .
	g ame
 = "Global deduplication",

4680 .
	gty≥
 = 
FIO_OPT_BOOL
,

4681 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
dedu≥_globÆ
),

4682 .
	ghñp
 = "Share deduplication buffersácross jobs",

4683 .
	gdef
 = "0",

4684 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

4685 .
	ggroup
 = 
FIO_OPT_G_IO_BUF
,

4688 .
	g«me
 = "dedupe_mode",

4689 .
	g ame
 = "Dedupe mode",

4690 .
	ghñp
 = "Mode forÅhe deduplication buffer generation",

4691 .
	gty≥
 = 
FIO_OPT_STR
,

4692 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
dedu≥_mode
),

4693 .
	g∑ª¡
 = "dedupe_percentage",

4694 .
	gdef
 = "repeat",

4695 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

4696 .
	ggroup
 = 
FIO_OPT_G_IO_BUF
,

4697 .
	gposvÆ
 = {

4698 { .
ivÆ
 = "repeat",

4699 .
	govÆ
 = 
DEDUPE_MODE_REPEAT
,

4700 .
	ghñp
 = "repeatÖreviousÖage",

4702 { .
	givÆ
 = "working_set",

4703 .
	govÆ
 = 
DEDUPE_MODE_WORKING_SET
,

4704 .
	ghñp
 = "chooseáÖageÑandomly fromÜimited working set defined in dedupe_working_set_percentage",

4709 .
	g«me
 = "dedupe_working_set_percentage",

4710 .
	g ame
 = "Dedupe working setÖercentage",

4711 .
	ghñp
 = "Dedupe working set size inÖercentages from file or device size usedÅo generate dedupeÖatterns from",

4712 .
	gty≥
 = 
FIO_OPT_INT
,

4713 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
dedu≥_w‹kög_£t_≥r˚¡age
),

4714 .
	g∑ª¡
 = "dedupe_percentage",

4715 .
	gdef
 = "5",

4716 .
	gmaxvÆ
 = 100,

4717 .
	gmövÆ
 = 0,

4718 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

4719 .
	ggroup
 = 
FIO_OPT_G_IO_BUF
,

4722 .
	g«me
 = "clat_percentiles",

4723 .
	g ame
 = "CompletionÜatencyÖercentiles",

4724 .
	gty≥
 = 
FIO_OPT_BOOL
,

4725 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
˛©_≥r˚¡ûes
),

4726 .
	ghñp
 = "EnableÅheÑeporting of completionÜatencyÖercentiles",

4727 .
	gdef
 = "1",

4728 .
	gˇãg‹y
 = 
FIO_OPT_C_STAT
,

4729 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4732 .
	g«me
 = "lat_percentiles",

4733 .
	g ame
 = "IOÜatencyÖercentiles",

4734 .
	gty≥
 = 
FIO_OPT_BOOL
,

4735 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
œt_≥r˚¡ûes
),

4736 .
	ghñp
 = "EnableÅheÑeporting of IOÜatencyÖercentiles",

4737 .
	gdef
 = "0",

4738 .
	gˇãg‹y
 = 
FIO_OPT_C_STAT
,

4739 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4742 .
	g«me
 = "slat_percentiles",

4743 .
	g ame
 = "SubmissionÜatencyÖercentiles",

4744 .
	gty≥
 = 
FIO_OPT_BOOL
,

4745 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
¶©_≥r˚¡ûes
),

4746 .
	ghñp
 = "EnableÅheÑeporting of submissionÜatencyÖercentiles",

4747 .
	gdef
 = "0",

4748 .
	gˇãg‹y
 = 
FIO_OPT_C_STAT
,

4749 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4752 .
	g«me
 = "percentile_list",

4753 .
	g ame
 = "PercentileÜist",

4754 .
	gty≥
 = 
FIO_OPT_FLOAT_LIST
,

4755 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
≥r˚¡ûe_li°
),

4756 .
	goff2
 = 
off£tof
(
thªad_›ti⁄s
, 
≥r˚¡ûe_¥ecisi⁄
),

4757 .
	ghñp
 = "Specifyá customÜist ofÖercentilesÅoÑeport for "

4759 .
	gdef
 = "1:5:10:20:30:40:50:60:70:80:90:95:99:99.5:99.9:99.95:99.99",

4760 .
	gmaxÀn
 = 
FIO_IO_U_LIST_MAX_LEN
,

4761 .
	gmöÂ
 = 0.0,

4762 .
	gmaxÂ
 = 100.0,

4763 .
	gˇãg‹y
 = 
FIO_OPT_C_STAT
,

4764 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4767 .
	g«me
 = "significant_figures",

4768 .
	g ame
 = "Significant figures",

4769 .
	gty≥
 = 
FIO_OPT_INT
,

4770 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
sig_figs
),

4771 .
	gmaxvÆ
 = 10,

4772 .
	gmövÆ
 = 1,

4773 .
	ghñp
 = "Significant figures for output-format setÅoÇormal",

4774 .
	gdef
 = "4",

4775 .
	göãrvÆ
 = 1,

4776 .
	gˇãg‹y
 = 
FIO_OPT_C_STAT
,

4777 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4780 #ifde‡
FIO_HAVE_DISK_UTIL


4782 .
	g«me
 = "disk_util",

4783 .
	g ame
 = "Disk utilization",

4784 .
	gty≥
 = 
FIO_OPT_BOOL
,

4785 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
do_disk_utû
),

4786 .
	ghñp
 = "Log disk utilization statistics",

4787 .
	gdef
 = "1",

4788 .
	gˇãg‹y
 = 
FIO_OPT_C_STAT
,

4789 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4793 .
	g«me
 = "disk_util",

4794 .
	g ame
 = "Disk utilization",

4795 .
	gty≥
 = 
FIO_OPT_UNSUPPORTED
,

4796 .
	ghñp
 = "YourÖlatform doesÇot support disk utilization",

4800 .
	g«me
 = "gtod_reduce",

4801 .
	g ame
 = "Reduce gettimeofday() calls",

4802 .
	gty≥
 = 
FIO_OPT_BOOL
,

4803 .
	ghñp
 = "GreatlyÑeduceÇumber of gettimeofday() calls",

4804 .
	gcb
 = 
°r_gtod_ªdu˚_cb
,

4805 .
	gdef
 = "0",

4806 .
	ghide_⁄_£t
 = 1,

4807 .
	gˇãg‹y
 = 
FIO_OPT_C_STAT
,

4808 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4811 .
	g«me
 = "disable_lat",

4812 .
	g ame
 = "DisableállÜatency stats",

4813 .
	gty≥
 = 
FIO_OPT_BOOL
,

4814 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
dißbÀ_œt
),

4815 .
	ghñp
 = "DisableÜatencyÇumbers",

4816 .
	g∑ª¡
 = "gtod_reduce",

4817 .
	ghide
 = 1,

4818 .
	gdef
 = "0",

4819 .
	gˇãg‹y
 = 
FIO_OPT_C_STAT
,

4820 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4823 .
	g«me
 = "disable_clat",

4824 .
	g ame
 = "Disable completionÜatency stats",

4825 .
	gty≥
 = 
FIO_OPT_BOOL
,

4826 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
dißbÀ_˛©
),

4827 .
	ghñp
 = "Disable completionÜatencyÇumbers",

4828 .
	g∑ª¡
 = "gtod_reduce",

4829 .
	ghide
 = 1,

4830 .
	gdef
 = "0",

4831 .
	gˇãg‹y
 = 
FIO_OPT_C_STAT
,

4832 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4835 .
	g«me
 = "disable_slat",

4836 .
	g ame
 = "Disable submissionÜatency stats",

4837 .
	gty≥
 = 
FIO_OPT_BOOL
,

4838 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
dißbÀ_¶©
),

4839 .
	ghñp
 = "Disable submissionÜatencyÇumbers",

4840 .
	g∑ª¡
 = "gtod_reduce",

4841 .
	ghide
 = 1,

4842 .
	gdef
 = "0",

4843 .
	gˇãg‹y
 = 
FIO_OPT_C_STAT
,

4844 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4847 .
	g«me
 = "disable_bw_measurement",

4848 .
	gÆüs
 = "disable_bw",

4849 .
	g ame
 = "Disable bandwidth stats",

4850 .
	gty≥
 = 
FIO_OPT_BOOL
,

4851 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
dißbÀ_bw
),

4852 .
	ghñp
 = "Disable bandwidthÜogging",

4853 .
	g∑ª¡
 = "gtod_reduce",

4854 .
	ghide
 = 1,

4855 .
	gdef
 = "0",

4856 .
	gˇãg‹y
 = 
FIO_OPT_C_STAT
,

4857 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4860 .
	g«me
 = "gtod_cpu",

4861 .
	g ame
 = "Dedicated gettimeofday() CPU",

4862 .
	gty≥
 = 
FIO_OPT_INT
,

4863 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
gtod_˝u
),

4864 .
	ghñp
 = "Set up dedicated gettimeofday()Åhread onÅhis CPU",

4865 .
	gvîify
 = 
gtod_˝u_vîify
,

4866 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

4867 .
	ggroup
 = 
FIO_OPT_G_CLOCK
,

4870 .
	g«me
 = "unified_rw_reporting",

4871 .
	g ame
 = "Unified RW Reporting",

4872 .
	gty≥
 = 
FIO_OPT_STR
,

4873 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
unifõd_rw_ªp
),

4874 .
	ghñp
 = "UnifyÑeportingácross data direction",

4875 .
	gdef
 = "none",

4876 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

4877 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4878 .
	gposvÆ
 = {

4879 { .
ivÆ
 = "none",

4880 .
	govÆ
 = 
UNIFIED_SPLIT
,

4881 .
	ghñp
 = "Normal statisticsÑeporting",

4883 { .
	givÆ
 = "mixed",

4884 .
	govÆ
 = 
UNIFIED_MIXED
,

4885 .
	ghñp
 = "Statisticsáre summedÖer data directionándÑeportedÅogether",

4887 { .
	givÆ
 = "both",

4888 .
	govÆ
 = 
UNIFIED_BOTH
,

4889 .
	ghñp
 = "StatisticsáreÑeportedÇormally, followed byÅhe mixed statistics"

4892 { .
	givÆ
 = "0",

4893 .
	govÆ
 = 
UNIFIED_SPLIT
,

4894 .
	ghñp
 = "Alias for 'none'",

4896 { .
	givÆ
 = "1",

4897 .
	govÆ
 = 
UNIFIED_MIXED
,

4898 .
	ghñp
 = "Alias for 'mixed'",

4900 { .
	givÆ
 = "2",

4901 .
	govÆ
 = 
UNIFIED_BOTH
,

4902 .
	ghñp
 = "Alias for 'both'",

4907 .
	g«me
 = "continue_on_error",

4908 .
	g ame
 = "Continue onÉrror",

4909 .
	gty≥
 = 
FIO_OPT_STR
,

4910 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
c⁄töue_⁄_îr‹
),

4911 .
	ghñp
 = "Continue onÇon-fatalÉrrors during IO",

4912 .
	gdef
 = "none",

4913 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

4914 .
	ggroup
 = 
FIO_OPT_G_ERR
,

4915 .
	gposvÆ
 = {

4916 { .
ivÆ
 = "none",

4917 .
	govÆ
 = 
ERROR_TYPE_NONE
,

4918 .
	ghñp
 = "Exit whenánÉrror isÉncountered",

4920 { .
	givÆ
 = "read",

4921 .
	govÆ
 = 
ERROR_TYPE_READ
,

4922 .
	ghñp
 = "Continue onÑeadÉrrors only",

4924 { .
	givÆ
 = "write",

4925 .
	govÆ
 = 
ERROR_TYPE_WRITE
,

4926 .
	ghñp
 = "Continue on writeÉrrors only",

4928 { .
	givÆ
 = "io",

4929 .
	govÆ
 = 
ERROR_TYPE_READ
 | 
ERROR_TYPE_WRITE
,

4930 .
	ghñp
 = "Continue onány IOÉrrors",

4932 { .
	givÆ
 = "verify",

4933 .
	govÆ
 = 
ERROR_TYPE_VERIFY
,

4934 .
	ghñp
 = "Continue on verifyÉrrors only",

4936 { .
	givÆ
 = "all",

4937 .
	govÆ
 = 
ERROR_TYPE_ANY
,

4938 .
	ghñp
 = "Continue onáll ioánd verifyÉrrors",

4940 { .
	givÆ
 = "0",

4941 .
	govÆ
 = 
ERROR_TYPE_NONE
,

4942 .
	ghñp
 = "Alias for 'none'",

4944 { .
	givÆ
 = "1",

4945 .
	govÆ
 = 
ERROR_TYPE_ANY
,

4946 .
	ghñp
 = "Alias for 'all'",

4951 .
	g«me
 = "ignore_error",

4952 .
	g ame
 = "Ignore Error",

4953 .
	gty≥
 = 
FIO_OPT_STR
,

4954 .
	gcb
 = 
°r_ign‹e_îr‹_cb
,

4955 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
ign‹e_îr‹_ƒ
),

4956 .
	ghñp
 = "Setá specificÜist ofÉrrorsÅo ignore",

4957 .
	g∑ª¡
 = "rw",

4958 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

4959 .
	ggroup
 = 
FIO_OPT_G_ERR
,

4962 .
	g«me
 = "error_dump",

4963 .
	g ame
 = "Error Dump",

4964 .
	gty≥
 = 
FIO_OPT_BOOL
,

4965 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
îr‹_dump
),

4966 .
	gdef
 = "0",

4967 .
	ghñp
 = "Dump info onÉachÉrror",

4968 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

4969 .
	ggroup
 = 
FIO_OPT_G_ERR
,

4972 .
	g«me
 = "profile",

4973 .
	g ame
 = "Profile",

4974 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

4975 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
¥ofûe
),

4976 .
	ghñp
 = "Selectá specific builtinÖerformanceÅest",

4977 .
	gˇãg‹y
 = 
FIO_OPT_C_PROFILE
,

4978 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

4981 .
	g«me
 = "cgroup",

4982 .
	g ame
 = "Cgroup",

4983 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

4984 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
cgroup
),

4985 .
	ghñp
 = "Add jobÅo cgroup ofÅhisÇame",

4986 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

4987 .
	ggroup
 = 
FIO_OPT_G_CGROUP
,

4990 .
	g«me
 = "cgroup_nodelete",

4991 .
	g ame
 = "CgroupÇo-delete",

4992 .
	gty≥
 = 
FIO_OPT_BOOL
,

4993 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
cgroup_nodñëe
),

4994 .
	ghñp
 = "DoÇot delete cgroupsáfter job completion",

4995 .
	gdef
 = "0",

4996 .
	g∑ª¡
 = "cgroup",

4997 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

4998 .
	ggroup
 = 
FIO_OPT_G_CGROUP
,

5001 .
	g«me
 = "cgroup_weight",

5002 .
	g ame
 = "Cgroup weight",

5003 .
	gty≥
 = 
FIO_OPT_INT
,

5004 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
cgroup_weight
),

5005 .
	ghñp
 = "Use given weight for cgroup",

5006 .
	gmövÆ
 = 100,

5007 .
	gmaxvÆ
 = 1000,

5008 .
	g∑ª¡
 = "cgroup",

5009 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

5010 .
	ggroup
 = 
FIO_OPT_G_CGROUP
,

5013 .
	g«me
 = "uid",

5014 .
	g ame
 = "User ID",

5015 .
	gty≥
 = 
FIO_OPT_INT
,

5016 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
uid
),

5017 .
	ghñp
 = "Run job withÅhis user ID",

5018 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

5019 .
	ggroup
 = 
FIO_OPT_G_CRED
,

5022 .
	g«me
 = "gid",

5023 .
	g ame
 = "Group ID",

5024 .
	gty≥
 = 
FIO_OPT_INT
,

5025 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
gid
),

5026 .
	ghñp
 = "Run job withÅhis group ID",

5027 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

5028 .
	ggroup
 = 
FIO_OPT_G_CRED
,

5031 .
	g«me
 = "kb_base",

5032 .
	g ame
 = "KB Base",

5033 .
	gty≥
 = 
FIO_OPT_STR
,

5034 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
kb_ba£
),

5035 .
	g¥io
 = 1,

5036 .
	gdef
 = "1024",

5037 .
	gposvÆ
 = {

5038 { .
ivÆ
 = "1024",

5039 .
	govÆ
 = 1024,

5040 .
	ghñp
 = "Inputs invert IECánd SIÖrefixes (for compatibility); outputsÖrefer binary",

5042 { .
	givÆ
 = "1000",

5043 .
	govÆ
 = 1000,

5044 .
	ghñp
 = "Inputs use IECánd SIÖrefixes; outputsÖrefer SI",

5047 .
	ghñp
 = "UnitÖrefix interpretation for quantities of data (IECánd SI)",

5048 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

5049 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

5052 .
	g«me
 = "unit_base",

5053 .
	g ame
 = "Unit for quantities of data (Bits or Bytes)",

5054 .
	gty≥
 = 
FIO_OPT_STR
,

5055 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
unô_ba£
),

5056 .
	g¥io
 = 1,

5057 .
	gposvÆ
 = {

5058 { .
ivÆ
 = "0",

5059 .
	govÆ
 = 
N2S_NONE
,

5060 .
	ghñp
 = "Auto-detect",

5062 { .
	givÆ
 = "8",

5063 .
	govÆ
 = 
N2S_BYTEPERSEC
,

5064 .
	ghñp
 = "Normal (byte based)",

5066 { .
	givÆ
 = "1",

5067 .
	govÆ
 = 
N2S_BITPERSEC
,

5068 .
	ghñp
 = "Bit based",

5071 .
	ghñp
 = "Bit multiple ofÑesult summary data (8 for byte, 1 for bit)",

5072 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

5073 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

5076 .
	g«me
 = "hugepage-size",

5077 .
	g ame
 = "Hugepage size",

5078 .
	gty≥
 = 
FIO_OPT_INT
,

5079 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
hugïage_size
),

5080 .
	ghñp
 = "When using hugepages, specify size ofÉachÖage",

5081 .
	gdef
 = 
__fio_°rögify
(
FIO_HUGE_PAGE
),

5082 .
	göãrvÆ
 = 1024 * 1024,

5083 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

5084 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

5087 .
	g«me
 = "flow_id",

5088 .
	g ame
 = "I/O flow ID",

5089 .
	gty≥
 = 
FIO_OPT_INT
,

5090 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
Êow_id
),

5091 .
	ghñp
 = "The flow index IDÅo use",

5092 .
	gdef
 = "0",

5093 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

5094 .
	ggroup
 = 
FIO_OPT_G_IO_FLOW
,

5097 .
	g«me
 = "flow",

5098 .
	g ame
 = "I/O flow weight",

5099 .
	gty≥
 = 
FIO_OPT_INT
,

5100 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
Êow
),

5101 .
	ghñp
 = "Weight for flow control ofÅhis job",

5102 .
	g∑ª¡
 = "flow_id",

5103 .
	ghide
 = 1,

5104 .
	gdef
 = "0",

5105 .
	gmaxvÆ
 = 
FLOW_MAX_WEIGHT
,

5106 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

5107 .
	ggroup
 = 
FIO_OPT_G_IO_FLOW
,

5110 .
	g«me
 = "flow_watermark",

5111 .
	g ame
 = "I/O flow watermark",

5112 .
	gty≥
 = 
FIO_OPT_SOFT_DEPRECATED
,

5113 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

5114 .
	ggroup
 = 
FIO_OPT_G_IO_FLOW
,

5117 .
	g«me
 = "flow_sleep",

5118 .
	g ame
 = "I/O flow sleep",

5119 .
	gty≥
 = 
FIO_OPT_INT
,

5120 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
Êow_¶ìp
),

5121 .
	ghñp
 = "How many microsecondsÅo sleepáfter being held"

5123 .
	g∑ª¡
 = "flow_id",

5124 .
	ghide
 = 1,

5125 .
	gdef
 = "0",

5126 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

5127 .
	ggroup
 = 
FIO_OPT_G_IO_FLOW
,

5130 .
	g«me
 = "steadystate",

5131 .
	g ame
 = "Steady stateÅhreshold",

5132 .
	gÆüs
 = "ss",

5133 .
	gty≥
 = 
FIO_OPT_STR
,

5134 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
ss_°©e
),

5135 .
	gcb
 = 
°r_°ódy°©e_cb
,

5136 .
	ghñp
 = "DefineÅhe criterionándÜimitÅo judge whená job hasÑeached steady state",

5137 .
	gdef
 = "iops_slope:0.01%",

5138 .
	gposvÆ
 = {

5139 { .
ivÆ
 = "iops",

5140 .
	govÆ
 = 
FIO_SS_IOPS
,

5141 .
	ghñp
 = "maximum mean deviation of IOPS measurements",

5143 { .
	givÆ
 = "iops_slope",

5144 .
	govÆ
 = 
FIO_SS_IOPS_SLOPE
,

5145 .
	ghñp
 = "slope calculated from IOPS measurements",

5147 { .
	givÆ
 = "bw",

5148 .
	govÆ
 = 
FIO_SS_BW
,

5149 .
	ghñp
 = "maximum mean deviation of bandwidth measurements",

5152 .
	givÆ
 = "bw_slope",

5153 .
	govÆ
 = 
FIO_SS_BW_SLOPE
,

5154 .
	ghñp
 = "slope calculated from bandwidth measurements",

5157 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

5158 .
	ggroup
 = 
FIO_OPT_G_RUNTIME
,

5161 .
	g«me
 = "steadystate_duration",

5162 .
	g ame
 = "Steady state duration",

5163 .
	gÆüs
 = "ss_dur",

5164 .
	g∑ª¡
 = "steadystate",

5165 .
	gty≥
 = 
FIO_OPT_STR_VAL_TIME
,

5166 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
ss_dur
),

5167 .
	ghñp
 = "Stop workload uponáttaining steady state for specified duration",

5168 .
	gdef
 = "0",

5169 .
	gis_£c⁄ds
 = 1,

5170 .
	gis_time
 = 1,

5171 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

5172 .
	ggroup
 = 
FIO_OPT_G_RUNTIME
,

5175 .
	g«me
 = "steadystate_ramp_time",

5176 .
	g ame
 = "Steady stateÑampÅime",

5177 .
	gÆüs
 = "ss_ramp",

5178 .
	g∑ª¡
 = "steadystate",

5179 .
	gty≥
 = 
FIO_OPT_STR_VAL_TIME
,

5180 .
	goff1
 = 
off£tof
(
thªad_›ti⁄s
, 
ss_ømp_time
),

5181 .
	ghñp
 = "Delay before initiation of data collection for steady state jobÅerminationÅesting",

5182 .
	gdef
 = "0",

5183 .
	gis_£c⁄ds
 = 1,

5184 .
	gis_time
 = 1,

5185 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

5186 .
	ggroup
 = 
FIO_OPT_G_RUNTIME
,

5189 .
	g«me
 = 
NULL
,

5193 
	$add_to_l›t
(
›ti⁄
 *
l›t
, 
fio_›ti⁄
 *
o
,

5194 c⁄° *
«me
, 
vÆ
)

5196 
l›t
->
«me
 = (*)Çame;

5197 
l›t
->
vÆ
 = val;

5198 i‡(
o
->
ty≥
 =
FIO_OPT_STR_SET
)

5199 
l›t
->
has_¨g
 = 
›ti⁄Æ_¨gumít
;

5201 
l›t
->
has_¨g
 = 
ªquúed_¨gumít
;

5202 
	}
}

5204 
	$›ti⁄s_to_l›ts
(
fio_›ti⁄
 *
›ts
,

5205 
›ti⁄
 *
l⁄g_›ti⁄s
,

5206 
i
, 
›ti⁄_ty≥
)

5208 
fio_›ti⁄
 *
o
 = &
›ts
[0];

5209 
o
->
«me
) {

5210 
	`add_to_l›t
(&
l⁄g_›ti⁄s
[
i
], 
o
, o->
«me
, 
›ti⁄_ty≥
);

5211 i‡(
o
->
Æüs
) {

5212 
i
++;

5213 
	`add_to_l›t
(&
l⁄g_›ti⁄s
[
i
], 
o
, o->
Æüs
, 
›ti⁄_ty≥
);

5216 
i
++;

5217 
o
++;

5218 
	`as£π
(
i
 < 
FIO_NR_OPTIONS
);

5220 
	}
}

5222 
	$fio_›ti⁄s_£t_i€ngöe_›ts
(
›ti⁄
 *
l⁄g_›ti⁄s
,

5223 
thªad_d©a
 *
td
)

5225 
i
;

5227 
i
 = 0;

5228 
l⁄g_›ti⁄s
[
i
].
«me
) {

5229 i‡(
l⁄g_›ti⁄s
[
i
].
vÆ
 =
FIO_GETOPT_IOENGINE
) {

5230 
	`mem£t
(&
l⁄g_›ti⁄s
[
i
], 0, (*long_options));

5233 
i
++;

5239 i‡(!
td
 || !td->
eo
)

5242 
	`›ti⁄s_to_l›ts
(
td
->
io_›s
->
›ti⁄s
, 
l⁄g_›ti⁄s
, 
i
,

5243 
FIO_GETOPT_IOENGINE
);

5244 
	}
}

5246 
	$fio_›ti⁄s_dup_™d_öô
(
›ti⁄
 *
l⁄g_›ti⁄s
)

5248 
i
;

5250 
	`›ti⁄s_öô
(
fio_›ti⁄s
);

5252 
i
 = 0;

5253 
l⁄g_›ti⁄s
[
i
].
«me
)

5254 
i
++;

5256 
	`›ti⁄s_to_l›ts
(
fio_›ti⁄s
, 
l⁄g_›ti⁄s
, 
i
, 
FIO_GETOPT_JOB
);

5257 
	}
}

5259 
	sfio_keyw‹d
 {

5260 c⁄° *
	mw‹d
;

5261 c⁄° *
	mdesc
;

5262 *
	mª∂a˚
;

5265 
fio_keyw‹d
 
	gfio_keyw‹ds
[] = {

5267 .
w‹d
 = "$pagesize",

5268 .
	gdesc
 = "Page size inÅhe system",

5271 .
	gw‹d
 = "$mb_memory",

5272 .
	gdesc
 = "Megabytes of memory online",

5275 .
	gw‹d
 = "$ncpus",

5276 .
	gdesc
 = "Number of CPUs online inÅhe system",

5279 .
	gw‹d
 = 
NULL
,

5283 
	$fio_keyw‹ds_exô
()

5285 
fio_keyw‹d
 *
kw
;

5287 
kw
 = &
fio_keyw‹ds
[0];

5288 
kw
->
w‹d
) {

5289 
	`‰ì
(
kw
->
ª∂a˚
);

5290 
kw
->
ª∂a˚
 = 
NULL
;

5291 
kw
++;

5293 
	}
}

5295 
	$fio_keyw‹ds_öô
()

5297 
mb_mem‹y
;

5298 
buf
[128];

5299 
l
;

5301 
	`•rötf
(
buf
, "%lu", (Ë
∑ge_size
);

5302 
fio_keyw‹ds
[0].
ª∂a˚
 = 
	`°rdup
(
buf
);

5304 
mb_mem‹y
 = 
	`os_phys_mem
() / (1024 * 1024);

5305 
	`•rötf
(
buf
, "%Œu", 
mb_mem‹y
);

5306 
fio_keyw‹ds
[1].
ª∂a˚
 = 
	`°rdup
(
buf
);

5308 
l
 = 
	`˝us_⁄löe
();

5309 
	`•rötf
(
buf
, "%lu", 
l
);

5310 
fio_keyw‹ds
[2].
ª∂a˚
 = 
	`°rdup
(
buf
);

5311 
	}
}

5313 
	#BC_APP
 "bc"

	)

5315 *
	$bc_ˇlc
(*
°r
)

5317 
buf
[128], *
tmp
;

5318 
FILE
 *
f
;

5319 
ªt
;

5324 i‡((!
	`°rchr
(
°r
, '+') && !strchr(str, '-') && !strchr(str, '*') &&

5325 !
	`°rchr
(
°r
, '/')) || strchr(str, '\''))

5326  
°r
;

5331 
tmp
 = 
	`°rchr
(
°r
, '=');

5332 i‡(!
tmp
)

5333  
°r
;

5335 
tmp
++;

5340 i‡(
	`°æí
(
°r
Ë>128 || såÀn(
tmp
) > 100)

5341  
°r
;

5343 
	`•rötf
(
buf
, "which %†> /dev/nuŒ", 
BC_APP
);

5344 i‡(
	`sy°em
(
buf
)) {

5345 
	`log_îr
("fio: bc isÇeeded forÖerforming math\n");

5346  
NULL
;

5349 
	`•rötf
(
buf
, "echÿ'%s' | %s", 
tmp
, 
BC_APP
);

5350 
f
 = 
	`p›í
(
buf
, "r");

5351 i‡(!
f
)

5352  
NULL
;

5354 
ªt
 = 
	`‰ód
(&
buf
[
tmp
 - 
°r
], 1, 128 - (tm∞- så), 
f
);

5355 i‡(
ªt
 <= 0) {

5356 
	`p˛o£
(
f
);

5357  
NULL
;

5360 
	`p˛o£
(
f
);

5361 
buf
[(
tmp
 - 
°r
Ë+ 
ªt
 - 1] = '\0';

5362 
	`mem˝y
(
buf
, 
°r
, 
tmp
 - str);

5363 
	`‰ì
(
°r
);

5364  
	`°rdup
(
buf
);

5365 
	}
}

5373 *
	$fio_›ti⁄_dup_subs
(c⁄° *
›t
)

5375 
out
[
OPT_LEN_MAX
+1];

5376 
ö
[
OPT_LEN_MAX
+1];

5377 *
ouçå
 = 
out
;

5378 *
ö±r
 = 
ö
;

5379 *
ch1
, *
ch2
, *
ív
;

5380 
ssize_t
 
nchr
 = 
OPT_LEN_MAX
;

5381 
size_t
 
ívÀn
;

5383 i‡(
	`°æí
(
›t
Ë+ 1 > 
OPT_LEN_MAX
) {

5384 
	`log_îr
("OPT_LEN_MAX (%dËi†toÿsmÆl\n", 
OPT_LEN_MAX
);

5385  
NULL
;

5388 
	`¢¥ötf
(
ö
, (ö), "%s", 
›t
);

5390 *
ö±r
 && 
nchr
 > 0) {

5391 i‡(
ö±r
[0] == '$' && inptr[1] == '{') {

5392 
ch2
 = 
	`°rchr
(
ö±r
, '}');

5393 i‡(
ch2
 && 
ö±r
+1 < ch2) {

5394 
ch1
 = 
ö±r
+2;

5395 
ö±r
 = 
ch2
+1;

5396 *
ch2
 = '\0';

5398 
ív
 = 
	`gëív
(
ch1
);

5399 i‡(
ív
) {

5400 
ívÀn
 = 
	`°æí
(
ív
);

5401 i‡(
ívÀn
 <
nchr
) {

5402 
	`mem˝y
(
ouçå
, 
ív
, 
ívÀn
);

5403 
ouçå
 +
ívÀn
;

5404 
nchr
 -
ívÀn
;

5412 *
ouçå
++ = *
ö±r
++;

5413 --
nchr
;

5416 *
ouçå
 = '\0';

5417  
	`°rdup
(
out
);

5418 
	}
}

5423 *
	$fio_keyw‹d_ª∂a˚
(*
›t
)

5425 *
s
;

5426 
i
;

5427 
doˇlc
 = 0;

5429 
i
 = 0; 
fio_keyw‹ds
[i].
w‹d
 !
NULL
; i++) {

5430 
fio_keyw‹d
 *
kw
 = &
fio_keyw‹ds
[
i
];

5432 (
s
 = 
	`°r°r
(
›t
, 
kw
->
w‹d
)Ë!
NULL
) {

5433 *
√w
 = 
	`ˇŒoc
(
	`°æí
(
›t
) + 1, 1);

5434 *
o_‹g
 = 
›t
;

5435 
ﬁí
 = 
s
 - 
›t
;

5436 
Àn
;

5442 
	`mem˝y
(
√w
, 
›t
, 
ﬁí
);

5443 
Àn
 = 
	`•rötf
(
√w
 + 
ﬁí
, "%s", 
kw
->
ª∂a˚
);

5449 
›t
 +
ﬁí
 + 
	`°æí
(
kw
->
w‹d
);

5451 i‡(
	`°æí
(
›t
))

5452 
	`mem˝y
(
√w
 + 
ﬁí
 + 
Àn
, 
›t
, 
	`°æí
(opt));

5457 
›t
 = 
√w
;

5458 
	`‰ì
(
o_‹g
);

5460 
doˇlc
 = 1;

5467 i‡(
doˇlc
)

5468 
›t
 = 
	`bc_ˇlc
(opt);

5470  
›t
;

5471 
	}
}

5473 **
	$dup_™d_sub_›ti⁄s
(**
›ts
, 
num_›ts
)

5475 
i
;

5476 **
›ts_c›y
 = 
	`mÆloc
(
num_›ts
 * (*
›ts
));

5477 
i
 = 0; i < 
num_›ts
; i++) {

5478 
›ts_c›y
[
i
] = 
	`fio_›ti⁄_dup_subs
(
›ts
[i]);

5479 i‡(!
›ts_c›y
[
i
])

5481 
›ts_c›y
[
i
] = 
	`fio_keyw‹d_ª∂a˚
(opts_copy[i]);

5483  
›ts_c›y
;

5484 
	}
}

5486 
	$show_˛o£°_›ti⁄
(c⁄° *
›t
)

5488 
be°_›ti⁄
, 
be°_di°™˚
;

5489 
i
, 
di°™˚
;

5490 *
«me
;

5492 i‡(!
	`°æí
(
›t
))

5495 
«me
 = 
	`°rdup
(
›t
);

5496 
i
 = 0;

5497 
«me
[
i
] != '\0' &&Çame[i] != '=')

5498 
i
++;

5499 
«me
[
i
] = '\0';

5501 
be°_›ti⁄
 = -1;

5502 
be°_di°™˚
 = 
INT_MAX
;

5503 
i
 = 0;

5504 
fio_›ti⁄s
[
i
].
«me
) {

5505 
di°™˚
 = 
	`°rög_di°™˚
(
«me
, 
fio_›ti⁄s
[
i
].name);

5506 i‡(
di°™˚
 < 
be°_di°™˚
) {

5507 
be°_di°™˚
 = 
di°™˚
;

5508 
be°_›ti⁄
 = 
i
;

5510 
i
++;

5513 i‡(
be°_›ti⁄
 !-1 && 
	`°rög_di°™˚_ok
(
«me
, 
be°_di°™˚
) &&

5514 
fio_›ti⁄s
[
be°_›ti⁄
].
ty≥
 !
FIO_OPT_UNSUPPORTED
)

5515 
	`log_îr
("Did you mó¿%s?\n", 
fio_›ti⁄s
[
be°_›ti⁄
].
«me
);

5517 
	`‰ì
(
«me
);

5518 
	}
}

5520 
	$fio_›ti⁄s_∑r£
(
thªad_d©a
 *
td
, **
›ts
, 
num_›ts
)

5522 
i
, 
ªt
, 
unknown
;

5523 **
›ts_c›y
;

5525 
	`s‹t_›ti⁄s
(
›ts
, 
fio_›ti⁄s
, 
num_›ts
);

5526 
›ts_c›y
 = 
	`dup_™d_sub_›ti⁄s
(
›ts
, 
num_›ts
);

5528 
ªt
 = 0, 
i
 = 0, 
unknown
 = 0; i < 
num_›ts
; i++) {

5529 c⁄° 
fio_›ti⁄
 *
o
;

5530 
√wªt
 = 
	`∑r£_›ti⁄
(
›ts_c›y
[
i
], 
›ts
[i], 
fio_›ti⁄s
,

5531 &
o
, &
td
->o, &td->
›t_li°
);

5533 i‡(!
√wªt
 && 
o
)

5534 
	`fio_›ti⁄_m¨k_£t
(&
td
->
o
, o);

5536 i‡(
›ts_c›y
[
i
]) {

5537 i‡(
√wªt
 && !
o
) {

5538 
unknown
++;

5541 
	`‰ì
(
›ts_c›y
[
i
]);

5542 
›ts_c›y
[
i
] = 
NULL
;

5545 
ªt
 |
√wªt
;

5548 i‡(
unknown
) {

5549 
ªt
 |
	`i€ngöe_lﬂd
(
td
);

5550 i‡(
td
->
eo
) {

5551 
	`s‹t_›ti⁄s
(
›ts_c›y
, 
td
->
io_›s
->
›ti⁄s
, 
num_›ts
);

5552 
›ts
 = 
›ts_c›y
;

5554 
i
 = 0; i < 
num_›ts
; i++) {

5555 c⁄° 
fio_›ti⁄
 *
o
 = 
NULL
;

5556 
√wªt
 = 1;

5558 i‡(!
›ts_c›y
[
i
])

5561 i‡(
td
->
eo
)

5562 
√wªt
 = 
	`∑r£_›ti⁄
(
›ts_c›y
[
i
], 
›ts
[i],

5563 
td
->
io_›s
->
›ti⁄s
, &
o
,

5564 
td
->
eo
, &td->
›t_li°
);

5566 
ªt
 |
√wªt
;

5567 i‡(!
o
) {

5568 
	`log_îr
("Bad o±i⁄ <%s>\n", 
›ts
[
i
]);

5569 
	`show_˛o£°_›ti⁄
(
›ts
[
i
]);

5571 
	`‰ì
(
›ts_c›y
[
i
]);

5572 
›ts_c›y
[
i
] = 
NULL
;

5576 
	`‰ì
(
›ts_c›y
);

5577  
ªt
;

5578 
	}
}

5580 
	$fio_cmd_›ti⁄_∑r£
(
thªad_d©a
 *
td
, c⁄° *
›t
, *
vÆ
)

5582 
ªt
;

5584 
ªt
 = 
	`∑r£_cmd_›ti⁄
(
›t
, 
vÆ
, 
fio_›ti⁄s
, &
td
->
o
, &td->
›t_li°
);

5585 i‡(!
ªt
) {

5586 c⁄° 
fio_›ti⁄
 *
o
;

5588 
o
 = 
	`föd_›ti⁄_c
(
fio_›ti⁄s
, 
›t
);

5589 i‡(
o
)

5590 
	`fio_›ti⁄_m¨k_£t
(&
td
->
o
, o);

5593  
ªt
;

5594 
	}
}

5596 
	$fio_cmd_i€ngöe_›ti⁄_∑r£
(
thªad_d©a
 *
td
, c⁄° *
›t
,

5597 *
vÆ
)

5599  
	`∑r£_cmd_›ti⁄
(
›t
, 
vÆ
, 
td
->
io_›s
->
›ti⁄s
,Åd->
eo
,

5600 &
td
->
›t_li°
);

5601 
	}
}

5603 
	$fio_fûl_deÁu…_›ti⁄s
(
thªad_d©a
 *
td
)

5605 
td
->
o
.
magic
 = 
OPT_MAGIC
;

5606 
	`fûl_deÁu…_›ti⁄s
(&
td
->
o
, 
fio_›ti⁄s
);

5607 
	}
}

5609 
	$fio_show_›ti⁄_hñp
(c⁄° *
›t
)

5611  
	`show_cmd_hñp
(
fio_›ti⁄s
, 
›t
);

5612 
	}
}

5617 
	$fio_›ti⁄s_mem_du≥
(
thªad_d©a
 *
td
)

5619 
	`›ti⁄s_mem_du≥
(
fio_›ti⁄s
, &
td
->
o
);

5621 i‡(
td
->
eo
 &&Åd->
io_›s
) {

5622 *
ﬁdeo
 = 
td
->
eo
;

5624 
td
->
eo
 = 
	`mÆloc
—d->
io_›s
->
›ti⁄_°ru˘_size
);

5625 
	`mem˝y
(
td
->
eo
, 
ﬁdeo
,Åd->
io_›s
->
›ti⁄_°ru˘_size
);

5626 
	`›ti⁄s_mem_du≥
(
td
->
io_›s
->
›ti⁄s
,Åd->
eo
);

5628 
	}
}

5630 
	$fio_gë_kb_ba£
(*
d©a
)

5632 
thªad_d©a
 *
td
 = 
	`cb_d©a_to_td
(
d©a
);

5633 
thªad_›ti⁄s
 *
o
 = &
td
->o;

5634 
kb_ba£
 = 0;

5645 i‡(
o
 && o->
magic
 =
OPT_MAGIC
)

5646 
kb_ba£
 = 
o
->kb_base;

5647 i‡(!
kb_ba£
)

5648 
kb_ba£
 = 1024;

5650  
kb_ba£
;

5651 
	}
}

5653 
	$add_›ti⁄
(c⁄° 
fio_›ti⁄
 *
o
)

5655 
fio_›ti⁄
 *
__o
;

5656 
›t_ödex
 = 0;

5658 
__o
 = 
fio_›ti⁄s
;

5659 
__o
->
«me
) {

5660 
›t_ödex
++;

5661 
__o
++;

5664 i‡(
›t_ödex
 + 1 =
FIO_MAX_OPTS
) {

5665 
	`log_îr
("fio: FIO_MAX_OPTS isÅoo small\n");

5669 
	`mem˝y
(&
fio_›ti⁄s
[
›t_ödex
], 
o
, (*o));

5670 
fio_›ti⁄s
[
›t_ödex
 + 1].
«me
 = 
NULL
;

5672 
	}
}

5674 
	$övÆid©e_¥ofûe_›ti⁄s
(c⁄° *
¥of_«me
)

5676 
fio_›ti⁄
 *
o
;

5678 
o
 = 
fio_›ti⁄s
;

5679 
o
->
«me
) {

5680 i‡(
o
->
¥of_«me
 && !
	`°rcmp
(o->prof_name,Örof_name)) {

5681 
o
->
ty≥
 = 
FIO_OPT_INVALID
;

5682 
o
->
¥of_«me
 = 
NULL
;

5684 
o
++;

5686 
	}
}

5688 
	$add_›t_posvÆ
(c⁄° *
›äame
, c⁄° *
ivÆ
, c⁄° *
hñp
)

5690 
fio_›ti⁄
 *
o
;

5691 
i
;

5693 
o
 = 
	`föd_›ti⁄
(
fio_›ti⁄s
, 
›äame
);

5694 i‡(!
o
)

5697 
i
 = 0; i < 
PARSE_MAX_VP
; i++) {

5698 i‡(
o
->
posvÆ
[
i
].
ivÆ
)

5701 
o
->
posvÆ
[
i
].
ivÆ
 = ival;

5702 
o
->
posvÆ
[
i
].
hñp
 = help;

5705 
	}
}

5707 
	$dñ_›t_posvÆ
(c⁄° *
›äame
, c⁄° *
ivÆ
)

5709 
fio_›ti⁄
 *
o
;

5710 
i
;

5712 
o
 = 
	`föd_›ti⁄
(
fio_›ti⁄s
, 
›äame
);

5713 i‡(!
o
)

5716 
i
 = 0; i < 
PARSE_MAX_VP
; i++) {

5717 i‡(!
o
->
posvÆ
[
i
].
ivÆ
)

5719 i‡(
	`°rcmp
(
o
->
posvÆ
[
i
].
ivÆ
, ival))

5722 
o
->
posvÆ
[
i
].
ivÆ
 = 
NULL
;

5723 
o
->
posvÆ
[
i
].
hñp
 = 
NULL
;

5725 
	}
}

5727 
	$fio_›ti⁄s_‰ì
(
thªad_d©a
 *
td
)

5729 
	`›ti⁄s_‰ì
(
fio_›ti⁄s
, &
td
->
o
);

5730 i‡(
td
->
eo
 &&Åd->
io_›s
 &&Åd->io_›s->
›ti⁄s
) {

5731 
	`›ti⁄s_‰ì
(
td
->
io_›s
->
›ti⁄s
,Åd->
eo
);

5732 
	`‰ì
(
td
->
eo
);

5733 
td
->
eo
 = 
NULL
;

5735 
	}
}

5737 
	$fio_dump_›ti⁄s_‰ì
(
thªad_d©a
 *
td
)

5739 !
	`Êi°_em±y
(&
td
->
›t_li°
)) {

5740 
¥öt_›ti⁄
 *
p
;

5742 
p
 = 
	`Êi°_fú°_íåy
(&
td
->
›t_li°
, 
¥öt_›ti⁄
, 
li°
);

5743 
	`Êi°_dñ_öô
(&
p
->
li°
);

5744 
	`‰ì
(
p
->
«me
);

5745 
	`‰ì
(
p
->
vÆue
);

5746 
	`‰ì
(
p
);

5748 
	}
}

5750 
fio_›ti⁄
 *
	$fio_›ti⁄_föd
(c⁄° *
«me
)

5752  
	`föd_›ti⁄
(
fio_›ti⁄s
, 
«me
);

5753 
	}
}

5755 
fio_›ti⁄
 *
	$föd_√xt_›t
(
fio_›ti⁄
 *
‰om
,

5756 
off1
)

5758 
fio_›ti⁄
 *
›t
;

5760 i‡(!
‰om
)

5761 
‰om
 = &
fio_›ti⁄s
[0];

5763 
‰om
++;

5765 
›t
 = 
NULL
;

5767 i‡(
off1
 =
‰om
->off1) {

5768 
›t
 = 
‰om
;

5771 
‰om
++;

5772 } 
‰om
->
«me
);

5774  
›t
;

5775 
	}
}

5777 
	$›t_is_£t
(
thªad_›ti⁄s
 *
o
, 
fio_›ti⁄
 *
›t
)

5779 
›t_off
, 
ödex
, 
off£t
;

5781 
›t_off
 = 
›t
 - &
fio_›ti⁄s
[0];

5782 
ödex
 = 
›t_off
 / (8 * (
uöt64_t
));

5783 
off£t
 = 
›t_off
 & ((8 * (
uöt64_t
)) - 1);

5784  (
o
->
£t_›ti⁄s
[
ödex
] & ((
uöt64_t
)1 << 
off£t
)) != 0;

5785 
	}
}

5787 
boﬁ
 
	$__fio_›ti⁄_is_£t
(
thªad_›ti⁄s
 *
o
, 
off1
)

5789 
fio_›ti⁄
 *
›t
, *
√xt
;

5791 
√xt
 = 
NULL
;

5792 (
›t
 = 
	`föd_√xt_›t
(
√xt
, 
off1
)Ë!
NULL
) {

5793 i‡(
	`›t_is_£t
(
o
, 
›t
))

5794  
åue
;

5796 
√xt
 = 
›t
;

5799  
Ál£
;

5800 
	}
}

5802 
	$fio_›ti⁄_m¨k_£t
(
thªad_›ti⁄s
 *
o
, c⁄° 
fio_›ti⁄
 *
›t
)

5804 
›t_off
, 
ödex
, 
off£t
;

5806 
›t_off
 = 
›t
 - &
fio_›ti⁄s
[0];

5807 
ödex
 = 
›t_off
 / (8 * (
uöt64_t
));

5808 
off£t
 = 
›t_off
 & ((8 * (
uöt64_t
)) - 1);

5809 
o
->
£t_›ti⁄s
[
ödex
] |(
uöt64_t
)1 << 
off£t
;

5810 
	}
}

	@options.h

1 #i‚de‡
FIO_OPTION_H


2 
	#FIO_OPTION_H


	)

4 
	#FIO_MAX_OPTS
 512

	)

6 
	~<°rög.h
>

7 
	~<öây≥s.h
>

8 
	~"∑r£.h
"

9 
	~"lib/ty≥s.h
"

11 
add_›ti⁄
(c⁄° 
fio_›ti⁄
 *);

12 
övÆid©e_¥ofûe_›ti⁄s
(const *);

13 *
exec_¥ofûe
;

15 
add_›t_posvÆ
(const *, const *, const *);

16 
dñ_›t_posvÆ
(const *, const *);

17 
	gthªad_d©a
;

18 
fio_›ti⁄s_‰ì
(
thªad_d©a
 *);

19 
fio_dump_›ti⁄s_‰ì
(
thªad_d©a
 *);

20 *
gë_√xt_°r
(**
±r
);

21 
gë_max_°r_idx
(*
öput
);

22 * 
gë_«me_by_idx
(*
öput
, 
ödex
);

23 
£t_«me_idx
(*, 
size_t
, *, , 
boﬁ
);

25 
˛õ¡_sockaddr_°r
[];

27 
fio_›ti⁄
 
fio_›ti⁄s
[
FIO_MAX_OPTS
];

29 
boﬁ
 
__fio_›ti⁄_is_£t
(
thªad_›ti⁄s
 *, 
off
);

31 
	#fio_›ti⁄_is_£t
(
__td
, 
«me
) \

33 c⁄° 
off
 = 
	`off£tof
(
thªad_›ti⁄s
, 
«me
); \

34 
boﬁ
 
__r
 = 
	`__fio_›ti⁄_is_£t
((
__td
), 
off
); \

35 
__r
; \

36 })

	)

38 
fio_›ti⁄_m¨k_£t
(
thªad_›ti⁄s
 *,

39 c⁄° 
fio_›ti⁄
 *);

41 
ölöe
 
boﬁ
 
	$o_m©ch
(c⁄° 
fio_›ti⁄
 *
o
, c⁄° *
›t
)

43 i‡(!
	`°rcmp
(
o
->
«me
, 
›t
))

44  
åue
;

45 i‡(
o
->
Æüs
 && !
	`°rcmp
(o->Æüs, 
›t
))

46  
åue
;

48  
Ál£
;

49 
	}
}

51 
fio_›ti⁄
 *
föd_›ti⁄
(fio_option *, const *);

52 c⁄° 
fio_›ti⁄
 *

53 
föd_›ti⁄_c
(c⁄° 
fio_›ti⁄
 *, const *);

54 
fio_›ti⁄
 *
fio_›ti⁄_föd
(const *);

55 
fio_gë_kb_ba£
(*);

	@os/kcompat.h

1 #i‚de‡
_KCOMPAT_H_


2 
	#_KCOMPAT_H_


	)

4 
	~<°döt.h
>

6 
	#u64
 
uöt64_t


	)

7 
	#u32
 
uöt32_t


	)

	@os/linux/io_uring.h

8 #i‚de‡
LINUX_IO_URING_H


9 
	#LINUX_IO_URING_H


	)

11 
	~<löux/fs.h
>

12 
	~<löux/ty≥s.h
>

17 
	sio_urög_sqe
 {

18 
__u8
 
	m›code
;

19 
__u8
 
	mÊags
;

20 
__u16
 
	mi›rio
;

21 
__s32
 
	mfd
;

23 
__u64
 
	moff
;

24 
__u64
 
	maddr2
;

25 
__u32
 
	mcmd_›
;

28 
__u64
 
	maddr
;

29 
__u64
 
	m•li˚_off_ö
;

31 
__u32
 
	mÀn
;

33 
__kî√l_rwf_t
 
	mrw_Êags
;

34 
__u32
 
	mfsync_Êags
;

35 
__u16
 
	mpﬁl_evíts
;

36 
__u32
 
	mpﬁl32_evíts
;

37 
__u32
 
	msync_ønge_Êags
;

38 
__u32
 
	mmsg_Êags
;

39 
__u32
 
	mtimeout_Êags
;

40 
__u32
 
	mac˚±_Êags
;

41 
__u32
 
	mˇn˚l_Êags
;

42 
__u32
 
	m›í_Êags
;

43 
__u32
 
	m°©x_Êags
;

44 
__u32
 
	mÁdvi£_advi˚
;

45 
__u32
 
	m•li˚_Êags
;

46 
__u32
 
	mª«me_Êags
;

47 
__u32
 
	mu∆ök_Êags
;

48 
__u32
 
	mh¨dlök_Êags
;

49 
__u32
 
	murög_cmd_Êags
;

51 
__u64
 
	mu£r_d©a
;

55 
__u16
 
	mbuf_ödex
;

57 
__u16
 
	mbuf_group
;

58 } 
__©åibuã__
((
∑cked
));

60 
__u16
 
	m≥rs⁄Æôy
;

62 
__s32
 
	m•li˚_fd_ö
;

63 
__u32
 
	mfûe_ödex
;

67 
__u64
 
	maddr3
;

68 
__u64
 
	m__∑d2
[1];

74 
__u8
 
	mcmd
[0];

79 
	mIOSQE_FIXED_FILE_BIT
,

80 
	mIOSQE_IO_DRAIN_BIT
,

81 
	mIOSQE_IO_LINK_BIT
,

82 
	mIOSQE_IO_HARDLINK_BIT
,

83 
	mIOSQE_ASYNC_BIT
,

84 
	mIOSQE_BUFFER_SELECT_BIT
,

85 
	mIOSQE_CQE_SKIP_SUCCESS_BIT
,

92 
	#IOSQE_FIXED_FILE
 (1U << 
IOSQE_FIXED_FILE_BIT
)

	)

94 
	#IOSQE_IO_DRAIN
 (1U << 
IOSQE_IO_DRAIN_BIT
)

	)

96 
	#IOSQE_IO_LINK
 (1U << 
IOSQE_IO_LINK_BIT
)

	)

98 
	#IOSQE_IO_HARDLINK
 (1U << 
IOSQE_IO_HARDLINK_BIT
)

	)

100 
	#IOSQE_ASYNC
 (1U << 
IOSQE_ASYNC_BIT
)

	)

102 
	#IOSQE_BUFFER_SELECT
 (1U << 
IOSQE_BUFFER_SELECT_BIT
)

	)

104 
	#IOSQE_CQE_SKIP_SUCCESS
 (1U << 
IOSQE_CQE_SKIP_SUCCESS_BIT
)

	)

109 
	#IORING_SETUP_IOPOLL
 (1U << 0Ë

	)

110 
	#IORING_SETUP_SQPOLL
 (1U << 1Ë

	)

111 
	#IORING_SETUP_SQ_AFF
 (1U << 2Ë

	)

112 
	#IORING_SETUP_CQSIZE
 (1U << 3Ë

	)

113 
	#IORING_SETUP_CLAMP
 (1U << 4Ë

	)

114 
	#IORING_SETUP_ATTACH_WQ
 (1U << 5Ë

	)

115 
	#IORING_SETUP_R_DISABLED
 (1U << 6Ë

	)

116 
	#IORING_SETUP_SUBMIT_ALL
 (1U << 7Ë

	)

124 
	#IORING_SETUP_COOP_TASKRUN
 (1U << 8)

	)

130 
	#IORING_SETUP_TASKRUN_FLAG
 (1U << 9)

	)

132 
	#IORING_SETUP_SQE128
 (1U << 10Ë

	)

133 
	#IORING_SETUP_CQE32
 (1U << 11Ë

	)

138 
	#IORING_SETUP_SINGLE_ISSUER
 (1U << 12)

	)

145 
	#IORING_SETUP_DEFER_TASKRUN
 (1U << 13)

	)

148 
	mIORING_OP_NOP
,

149 
	mIORING_OP_READV
,

150 
	mIORING_OP_WRITEV
,

151 
	mIORING_OP_FSYNC
,

152 
	mIORING_OP_READ_FIXED
,

153 
	mIORING_OP_WRITE_FIXED
,

154 
	mIORING_OP_POLL_ADD
,

155 
	mIORING_OP_POLL_REMOVE
,

156 
	mIORING_OP_SYNC_FILE_RANGE
,

157 
	mIORING_OP_SENDMSG
,

158 
	mIORING_OP_RECVMSG
,

159 
	mIORING_OP_TIMEOUT
,

160 
	mIORING_OP_TIMEOUT_REMOVE
,

161 
	mIORING_OP_ACCEPT
,

162 
	mIORING_OP_ASYNC_CANCEL
,

163 
	mIORING_OP_LINK_TIMEOUT
,

164 
	mIORING_OP_CONNECT
,

165 
	mIORING_OP_FALLOCATE
,

166 
	mIORING_OP_OPENAT
,

167 
	mIORING_OP_CLOSE
,

168 
	mIORING_OP_FILES_UPDATE
,

169 
	mIORING_OP_STATX
,

170 
	mIORING_OP_READ
,

171 
	mIORING_OP_WRITE
,

172 
	mIORING_OP_FADVISE
,

173 
	mIORING_OP_MADVISE
,

174 
	mIORING_OP_SEND
,

175 
	mIORING_OP_RECV
,

176 
	mIORING_OP_OPENAT2
,

177 
	mIORING_OP_EPOLL_CTL
,

178 
	mIORING_OP_SPLICE
,

179 
	mIORING_OP_PROVIDE_BUFFERS
,

180 
	mIORING_OP_REMOVE_BUFFERS
,

181 
	mIORING_OP_TEE
,

182 
	mIORING_OP_SHUTDOWN
,

183 
	mIORING_OP_RENAMEAT
,

184 
	mIORING_OP_UNLINKAT
,

185 
	mIORING_OP_MKDIRAT
,

186 
	mIORING_OP_SYMLINKAT
,

187 
	mIORING_OP_LINKAT
,

188 
	mIORING_OP_MSG_RING
,

189 
	mIORING_OP_FSETXATTR
,

190 
	mIORING_OP_SETXATTR
,

191 
	mIORING_OP_FGETXATTR
,

192 
	mIORING_OP_GETXATTR
,

193 
	mIORING_OP_SOCKET
,

194 
	mIORING_OP_URING_CMD
,

198 
	mIORING_OP_LAST
,

206 
	#IORING_URING_CMD_FIXED
 (1U << 0)

	)

211 
	#IORING_FSYNC_DATASYNC
 (1U << 0)

	)

216 
	#IORING_TIMEOUT_ABS
 (1U << 0)

	)

217 
	#IORING_TIMEOUT_UPDATE
 (1U << 1)

	)

218 
	#IORING_TIMEOUT_BOOTTIME
 (1U << 2)

	)

219 
	#IORING_TIMEOUT_REALTIME
 (1U << 3)

	)

220 
	#IORING_LINK_TIMEOUT_UPDATE
 (1U << 4)

	)

221 
	#IORING_TIMEOUT_ETIME_SUCCESS
 (1U << 5)

	)

222 
	#IORING_TIMEOUT_CLOCK_MASK
 (
IORING_TIMEOUT_BOOTTIME
 | 
IORING_TIMEOUT_REALTIME
)

	)

223 
	#IORING_TIMEOUT_UPDATE_MASK
 (
IORING_TIMEOUT_UPDATE
 | 
IORING_LINK_TIMEOUT_UPDATE
)

	)

228 
	#SPLICE_F_FD_IN_FIXED
 (1U << 31Ë

	)

241 
	#IORING_POLL_ADD_MULTI
 (1U << 0)

	)

242 
	#IORING_POLL_UPDATE_EVENTS
 (1U << 1)

	)

243 
	#IORING_POLL_UPDATE_USER_DATA
 (1U << 2)

	)

248 
	sio_urög_cqe
 {

249 
__u64
 
	mu£r_d©a
;

250 
__s32
 
	mªs
;

251 
__u32
 
	mÊags
;

257 
__u64
 
	mbig_cqe
[];

266 
	#IORING_CQE_F_BUFFER
 (1U << 0)

	)

267 
	#IORING_CQE_F_MORE
 (1U << 1)

	)

270 
	mIORING_CQE_BUFFER_SHIFT
 = 16,

276 
	#IORING_OFF_SQ_RING
 0ULL

	)

277 
	#IORING_OFF_CQ_RING
 0x8000000ULL

	)

278 
	#IORING_OFF_SQES
 0x10000000ULL

	)

283 
	sio_sqrög_off£ts
 {

284 
__u32
 
	mhód
;

285 
__u32
 
	mèû
;

286 
__u32
 
	mrög_mask
;

287 
__u32
 
	mrög_íåõs
;

288 
__u32
 
	mÊags
;

289 
__u32
 
	mdr›≥d
;

290 
__u32
 
	m¨øy
;

291 
__u32
 
	mªsv1
;

292 
__u64
 
	mªsv2
;

298 
	#IORING_SQ_NEED_WAKEUP
 (1U << 0Ë

	)

299 
	#IORING_SQ_CQ_OVERFLOW
 (1U << 1Ë

	)

301 
	sio_cqrög_off£ts
 {

302 
__u32
 
	mhód
;

303 
__u32
 
	mèû
;

304 
__u32
 
	mrög_mask
;

305 
__u32
 
	mrög_íåõs
;

306 
__u32
 
	movîÊow
;

307 
__u32
 
	mcqes
;

308 
__u32
 
	mÊags
;

309 
__u32
 
	mªsv1
;

310 
__u64
 
	mªsv2
;

318 
	#IORING_CQ_EVENTFD_DISABLED
 (1U << 0)

	)

323 
	#IORING_ENTER_GETEVENTS
 (1U << 0)

	)

324 
	#IORING_ENTER_SQ_WAKEUP
 (1U << 1)

	)

325 
	#IORING_ENTER_SQ_WAIT
 (1U << 2)

	)

326 
	#IORING_ENTER_EXT_ARG
 (1U << 3)

	)

327 
	#IORING_ENTER_REGISTERED_RING
 (1U << 4)

	)

332 
	sio_urög_∑øms
 {

333 
__u32
 
	msq_íåõs
;

334 
__u32
 
	mcq_íåõs
;

335 
__u32
 
	mÊags
;

336 
__u32
 
	msq_thªad_˝u
;

337 
__u32
 
	msq_thªad_idÀ
;

338 
__u32
 
	m„©uªs
;

339 
__u32
 
	mwq_fd
;

340 
__u32
 
	mªsv
[3];

341 
io_sqrög_off£ts
 
	msq_off
;

342 
io_cqrög_off£ts
 
	mcq_off
;

348 
	#IORING_FEAT_SINGLE_MMAP
 (1U << 0)

	)

349 
	#IORING_FEAT_NODROP
 (1U << 1)

	)

350 
	#IORING_FEAT_SUBMIT_STABLE
 (1U << 2)

	)

351 
	#IORING_FEAT_RW_CUR_POS
 (1U << 3)

	)

352 
	#IORING_FEAT_CUR_PERSONALITY
 (1U << 4)

	)

353 
	#IORING_FEAT_FAST_POLL
 (1U << 5)

	)

354 
	#IORING_FEAT_POLL_32BITS
 (1U << 6)

	)

355 
	#IORING_FEAT_SQPOLL_NONFIXED
 (1U << 7)

	)

356 
	#IORING_FEAT_EXT_ARG
 (1U << 8)

	)

357 
	#IORING_FEAT_NATIVE_WORKERS
 (1U << 9)

	)

358 
	#IORING_FEAT_RSRC_TAGS
 (1U << 10)

	)

359 
	#IORING_FEAT_CQE_SKIP
 (1U << 11)

	)

365 
	mIORING_REGISTER_BUFFERS
 = 0,

366 
	mIORING_UNREGISTER_BUFFERS
 = 1,

367 
	mIORING_REGISTER_FILES
 = 2,

368 
	mIORING_UNREGISTER_FILES
 = 3,

369 
	mIORING_REGISTER_EVENTFD
 = 4,

370 
	mIORING_UNREGISTER_EVENTFD
 = 5,

371 
	mIORING_REGISTER_FILES_UPDATE
 = 6,

372 
	mIORING_REGISTER_EVENTFD_ASYNC
 = 7,

373 
	mIORING_REGISTER_PROBE
 = 8,

374 
	mIORING_REGISTER_PERSONALITY
 = 9,

375 
	mIORING_UNREGISTER_PERSONALITY
 = 10,

376 
	mIORING_REGISTER_RESTRICTIONS
 = 11,

377 
	mIORING_REGISTER_ENABLE_RINGS
 = 12,

380 
	mIORING_REGISTER_FILES2
 = 13,

381 
	mIORING_REGISTER_FILES_UPDATE2
 = 14,

382 
	mIORING_REGISTER_BUFFERS2
 = 15,

383 
	mIORING_REGISTER_BUFFERS_UPDATE
 = 16,

386 
	mIORING_REGISTER_IOWQ_AFF
 = 17,

387 
	mIORING_UNREGISTER_IOWQ_AFF
 = 18,

390 
	mIORING_REGISTER_IOWQ_MAX_WORKERS
 = 19,

393 
	mIORING_REGISTER_RING_FDS
 = 20,

394 
	mIORING_UNREGISTER_RING_FDS
 = 21,

397 
	mIORING_REGISTER_LAST


402 
	mIO_WQ_BOUND
,

403 
	mIO_WQ_UNBOUND
,

407 
	sio_urög_fûes_upd©e
 {

408 
__u32
 
	moff£t
;

409 
__u32
 
	mªsv
;

410 
__Æig√d_u64
 
	mfds
;

413 
	sio_urög_r§c_ªgi°î
 {

414 
__u32
 
	mƒ
;

415 
__u32
 
	mªsv
;

416 
__u64
 
	mªsv2
;

417 
__Æig√d_u64
 
	md©a
;

418 
__Æig√d_u64
 
	mègs
;

421 
	sio_urög_r§c_upd©e
 {

422 
__u32
 
	moff£t
;

423 
__u32
 
	mªsv
;

424 
__Æig√d_u64
 
	md©a
;

427 
	sio_urög_r§c_upd©e2
 {

428 
__u32
 
	moff£t
;

429 
__u32
 
	mªsv
;

430 
__Æig√d_u64
 
	md©a
;

431 
__Æig√d_u64
 
	mègs
;

432 
__u32
 
	mƒ
;

433 
__u32
 
	mªsv2
;

437 
	#IORING_REGISTER_FILES_SKIP
 (-2)

	)

439 
	#IO_URING_OP_SUPPORTED
 (1U << 0)

	)

441 
	sio_urög_¥obe_›
 {

442 
__u8
 
	m›
;

443 
__u8
 
	mªsv
;

444 
__u16
 
	mÊags
;

445 
__u32
 
	mªsv2
;

448 
	sio_urög_¥obe
 {

449 
__u8
 
	mœ°_›
;

450 
__u8
 
	m›s_Àn
;

451 
__u16
 
	mªsv
;

452 
__u32
 
	mªsv2
[3];

453 
io_urög_¥obe_›
 
	m›s
[0];

456 
	sio_urög_ª°ri˘i⁄
 {

457 
__u16
 
	m›code
;

459 
__u8
 
	mªgi°î_›
;

460 
__u8
 
	msqe_›
;

461 
__u8
 
	msqe_Êags
;

463 
__u8
 
	mªsv
;

464 
__u32
 
	mªsv2
[3];

472 
	mIORING_RESTRICTION_REGISTER_OP
 = 0,

475 
	mIORING_RESTRICTION_SQE_OP
 = 1,

478 
	mIORING_RESTRICTION_SQE_FLAGS_ALLOWED
 = 2,

481 
	mIORING_RESTRICTION_SQE_FLAGS_REQUIRED
 = 3,

483 
	mIORING_RESTRICTION_LAST


486 
	sio_urög_gëevíts_¨g
 {

487 
__u64
 
	msigmask
;

488 
__u32
 
	msigmask_sz
;

489 
__u32
 
	m∑d
;

490 
__u64
 
	mts
;

	@os/os-aix.h

1 #i‚de‡
FIO_OS_AIX_H


2 
	#FIO_OS_AIX_H


	)

4 
	#FIO_OS
 
os_aix


	)

6 
	~<î∫o.h
>

7 
	~<uni°d.h
>

8 
	~<sys/devöfo.h
>

9 
	~<sys/io˘l.h
>

11 
	~"../fûe.h
"

13 
	#FIO_HAVE_ODIRECT


	)

14 
	#FIO_USE_GENERIC_INIT_RANDOM_STATE


	)

16 
	#OS_MAP_ANON
 
MAP_ANON


	)

17 
	#OS_MSG_DONTWAIT
 0

	)

19 
	#FIO_USE_GENERIC_SWAP


	)

21 #ifde‡
CONFIG_PTHREAD_GETAFFINITY


22 
	#FIO_HAVE_GET_THREAD_AFFINITY


	)

23 
	#fio_gë_thªad_afföôy
(
mask
) \

24 
	`±hªad_gëafföôy_≈
(
	`±hªad_£lf
(), (
mask
), &(mask))

	)

27 
ölöe
 
	$blockdev_övÆid©e_ˇche
(
fio_fûe
 *
f
)

29  
ENOTSUP
;

30 
	}
}

32 
ölöe
 
	$blockdev_size
(
fio_fûe
 *
f
, *
byãs
)

34 
devöfo
 
öfo
;

36 i‡(!
	`io˘l
(
f
->
fd
, 
IOCINFO
, &
öfo
)) {

37 *
byãs
 = ()
öfo
.
un
.
scdk
.
numblks
 *

38 
öfo
.
un
.
scdk
.
blksize
;

42  
î∫o
;

43 
	}
}

45 
ölöe
 
	$os_phys_mem
()

47 
mem
 = 
	`sysc⁄f
(
_SC_AIX_REALMEM
);

49 i‡(
mem
 == -1)

52  (Ë
mem
 * 1024;

53 
	}
}

	@os/os-ashmem.h

1 #i‚de‡
CONFIG_NO_SHM


5 
	~<°dio.h
>

6 
	~<löux/ashmem.h
>

7 
	~<löux/shm.h
>

8 
	~<™droid/≠i-Àvñ.h
>

9 #i‡
__ANDROID_API__
 >
__ANDROID_API_O__


10 
	~<™droid/sh¨edmem.h
>

12 
	#ASHMEM_DEVICE
 "/dev/ashmem"

	)

14 
	#shmid_ds
 
shmid64_ds


	)

15 
	#SHM_HUGETLB
 04000

	)

17 
ölöe
 
	$shm˘l
(
__shmid
, 
__cmd
, 
shmid_ds
 *
__buf
)

19 
ªt
=0;

20 i‡(
__cmd
 =
IPC_RMID
)

22 
Àngth
 = 
	`io˘l
(
__shmid
, 
ASHMEM_GET_SIZE
, 
NULL
);

23 
ashmem_pö
 
pö
 = {0 , 
Àngth
};

24 
ªt
 = 
	`io˘l
(
__shmid
, 
ASHMEM_UNPIN
, &
pö
);

25 
	`˛o£
(
__shmid
);

27  
ªt
;

28 
	}
}

30 #i‡
__ANDROID_API__
 >
__ANDROID_API_O__


31 
ölöe
 
	$shmgë
(
key_t
 
__key
, 
size_t
 
__size
, 
__shmÊg
)

33 
keybuf
[11];

35 
	`•rötf
(
keybuf
, "%d", 
__key
);

37  
	`ASh¨edMem‹y_¸óã
(
keybuf
, 
__size
 + (
uöt64_t
));

38 
	}
}

40 
ölöe
 
	$shmgë
(
key_t
 
__key
, 
size_t
 
__size
, 
__shmÊg
)

42 
fd
,
ªt
;

43 
keybuf
[11];

45 
fd
 = 
	`›í
(
ASHMEM_DEVICE
, 
O_RDWR
);

46 i‡(
fd
 < 0)

47  
fd
;

49 
	`•rötf
(
keybuf
,"%d",
__key
);

50 
ªt
 = 
	`io˘l
(
fd
, 
ASHMEM_SET_NAME
, 
keybuf
);

51 i‡(
ªt
 < 0)

52 
îr‹
;

55 
ªt
 = 
	`io˘l
(
fd
, 
ASHMEM_SET_SIZE
, 
__size
 + (
uöt64_t
));

56 i‡(
ªt
 < 0)

57 
îr‹
;

59  
fd
;

61 
îr‹
:

62 
	`˛o£
(
fd
);

63  
ªt
;

64 
	}
}

67 
ölöe
 *
	$shm©
(
__shmid
, c⁄° *
__shmaddr
, 
__shmÊg
)

69 
size_t
 
size
 = 
	`io˘l
(
__shmid
, 
ASHMEM_GET_SIZE
, 
NULL
);

71 
uöt64_t
 *
±r
 = 
	`mm≠
(
NULL
, 
size
, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
__shmid
, 0);

73 *
±r
 = 
size
;

74  
±r
 + 1;

75 
	}
}

77 
ölöe
 
	$shmdt
 (c⁄° *
__shmaddr
)

80 
uöt64_t
 *
±r
 = (uöt64_à*)
__shmaddr
 - 1;

81 
size_t
 
size
 = *
±r
;

82  
	`munm≠
(
±r
, 
size
);

83 
	}
}

	@os/os-dragonfly.h

1 #i‚de‡
FIO_OS_DRAGONFLY_H


2 
	#FIO_OS_DRAGONFLY_H


	)

4 
	#FIO_OS
 
os_døg⁄Êy


	)

6 
	~<î∫o.h
>

7 
	~<uni°d.h
>

8 
	~<sys/ídün.h
>

9 
	~<sys/∑øm.h
>

10 
	~<sys/sys˘l.h
>

11 
	~<sys/°©vfs.h
>

12 
	~<sys/disk¶i˚.h
>

13 
	~<sys/usched.h
>

14 
	~<sys/ªsour˚.h
>

17 #i‡
__Døg⁄Fly_vîsi⁄
 < 500302

18 
	~<sys/io˘l_com∑t.h
>

19 
	#DAIOCTRIM
 
IOCTLTRIM


	)

21 
	~<bus/ˇm/scsi/scsi_daio.h
>

24 
	~"../fûe.h
"

25 
	~"../lib/ty≥s.h
"

27 
	#FIO_HAVE_ODIRECT


	)

28 
	#FIO_USE_GENERIC_INIT_RANDOM_STATE


	)

29 
	#FIO_HAVE_FS_STAT


	)

30 
	#FIO_HAVE_TRIM


	)

31 
	#FIO_HAVE_CHARDEV_SIZE


	)

32 
	#FIO_HAVE_GETTID


	)

33 
	#FIO_HAVE_CPU_AFFINITY


	)

34 
	#FIO_HAVE_IOPRIO


	)

35 
	#FIO_HAVE_SHM_ATTACH_REMOVED


	)

37 
	#OS_MAP_ANON
 
MAP_ANON


	)

39 #i‚de‡
PTHREAD_STACK_MIN


40 
	#PTHREAD_STACK_MIN
 4096

	)

43 
	#fio_sw≠16
(
x
Ë
	`bsw≠16
(x)

	)

44 
	#fio_sw≠32
(
x
Ë
	`bsw≠32
(x)

	)

45 
	#fio_sw≠64
(
x
Ë
	`bsw≠64
(x)

	)

48 
	#FIO_MAX_CPUS
 
SMP_MAXCPU


	)

50 
˝umask_t
 
	tos_˝u_mask_t
;

63 #i‚de‡
CPUMASK_SIMPLE


64 
	#CPUMASK_SIMPLE
(
˝u
Ë((
uöt64_t
)1 << (˝u))

	)

65 
	#CPUMASK_TESTBIT
(
vÆ
, 
i
Ë((vÆ).
¨y
[((i) >> 6) & 3] & \

66 
	`CPUMASK_SIMPLE
((
i
Ë& 63))

	)

67 
	#CPUMASK_ORBIT
(
mask
, 
i
Ë((mask).
¨y
[((i) >> 6) & 3] |= \

68 
	`CPUMASK_SIMPLE
((
i
Ë& 63))

	)

69 
	#CPUMASK_NANDBIT
(
mask
, 
i
Ë((mask).
¨y
[((i) >> 6) & 3] &= \

70 ~
	`CPUMASK_SIMPLE
((
i
Ë& 63))

	)

71 
	#CPUMASK_ASSZERO
(
mask
) do { \

72 (
mask
).
¨y
[0] = 0; \

73 (
mask
).
¨y
[1] = 0; \

74 (
mask
).
¨y
[2] = 0; \

75 (
mask
).
¨y
[3] = 0; \

76 } 0)

	)

88 #i‚de‡
USCHED_GET_CPUMASK


89 
	#USCHED_GET_CPUMASK
 5

	)

93 
	#fio_˝u_cou¡
(
mask
Ë
	`CPU_COUNT
((mask))

	)

95 #ifde‡
CONFIG_PTHREAD_GETAFFINITY


96 
	#FIO_HAVE_GET_THREAD_AFFINITY


	)

97 
	#fio_gë_thªad_afföôy
(
mask
) \

98 
	`±hªad_gëafföôy_≈
(
	`±hªad_£lf
(), (
mask
), &(mask))

	)

101 
ölöe
 
	$fio_˝u£t_öô
(
os_˝u_mask_t
 *
mask
)

103 
	`CPUMASK_ASSZERO
(*
mask
);

105 
	}
}

107 
ölöe
 
	$fio_˝u£t_exô
(
os_˝u_mask_t
 *
mask
)

110 
	}
}

112 
ölöe
 
	$fio_˝u_˛ór
(
os_˝u_mask_t
 *
mask
, 
˝u
)

114 
	`CPUMASK_NANDBIT
(*
mask
, 
˝u
);

115 
	}
}

117 
ölöe
 
	$fio_˝u_£t
(
os_˝u_mask_t
 *
mask
, 
˝u
)

119 
	`CPUMASK_ORBIT
(*
mask
, 
˝u
);

120 
	}
}

122 
ölöe
 
boﬁ
 
	$fio_˝u_is£t
(
os_˝u_mask_t
 *
mask
, 
˝u
)

124  
	`CPUMASK_TESTBIT
(*
mask
, 
˝u
) != 0;

125 
	}
}

127 
ölöe
 
	$fio_£èfföôy
(
pid
, 
os_˝u_mask_t
 
mask
)

129 
i
, 
fú°ˇŒ
 = 1;

132 
pid
 = 0;

134 
i
 = 0; i < 
FIO_MAX_CPUS
; i++) {

135 i‡(!
	`CPUMASK_TESTBIT
(
mask
, 
i
))

137 i‡(
fú°ˇŒ
) {

138 i‡(
	`usched_£t
(
pid
, 
USCHED_SET_CPU
, &
i
, ()))

140 
fú°ˇŒ
 = 0;

142 i‡(
	`usched_£t
(
pid
, 
USCHED_ADD_CPU
, &
i
, ()))

148 
	}
}

150 
ölöe
 
	$fio_gëafföôy
(
pid
, 
os_˝u_mask_t
 *
mask
)

153 
pid
 = 0;

155 i‡(
	`usched_£t
(
pid
, 
USCHED_GET_CPUMASK
, 
mask
, (*mask)))

159 
	}
}

162 
	#IOPRIO_WHO_PROCESS
 
PRIO_PROCESS


	)

163 
	#IOPRIO_WHO_PGRP
 
PRIO_PGRP


	)

164 
	#IOPRIO_WHO_USER
 
PRIO_USER


	)

166 
	#IOPRIO_MIN_PRIO
 1

	)

167 
	#IOPRIO_MAX_PRIO
 10

	)

174 
	#i›rio_vÆue
(
i›rio_˛ass
, 
i›rio
Ë(i›rio)

	)

175 
	#i›rio_£t
(
which
, 
who
, 
i›rio_˛ass
, 
i›rio
) \

176 
	`i›rio_£t
(
which
, 
who
, 
i›rio
)

	)

178 
ölöe
 
	$blockdev_size
(
fio_fûe
 *
f
, *
byãs
)

180 
∑πöfo
 
pi
;

182 i‡(!
	`io˘l
(
f
->
fd
, 
DIOCGPART
, &
pi
)) {

183 *
byãs
 = (Ë
pi
.
medü_size
;

187 *
byãs
 = 0;

188  
î∫o
;

189 
	}
}

191 
ölöe
 
	$ch¨dev_size
(
fio_fûe
 *
f
, *
byãs
)

193  
	`blockdev_size
(
f
, 
byãs
);

194 
	}
}

196 
ölöe
 
	$blockdev_övÆid©e_ˇche
(
fio_fûe
 *
f
)

198  
ENOTSUP
;

199 
	}
}

201 
ölöe
 
	$os_phys_mem
()

203 
mib
[2] = { 
CTL_HW
, 
HW_PHYSMEM
 };

204 
uöt64_t
 
mem
;

205 
size_t
 
Àn
 = (
mem
);

207 
	`sys˘l
(
mib
, 2, &
mem
, &
Àn
, 
NULL
, 0);

208  
mem
;

209 
	}
}

211 #i‚de‡
CONFIG_HAVE_GETTID


212 
ölöe
 
	$gëtid
()

214  (Ë
	`lwp_gëtid
();

215 
	}
}

218 
ölöe
 
	$gë_fs_‰ì_size
(c⁄° *
∑th
)

220 
ªt
;

221 
°©vfs
 
s
;

223 i‡(
	`°©vfs
(
∑th
, &
s
) < 0)

226 
ªt
 = 
s
.
f_‰size
;

227 
ªt
 *(Ë
s
.
f_b‰ì
;

228  
ªt
;

229 
	}
}

231 
ölöe
 
	$os_åim
(
fio_fûe
 *
f
, 
°¨t
,

232 
Àn
)

234 
off_t
 
ønge
[2];

236 
ønge
[0] = 
°¨t
;

237 
ønge
[1] = 
Àn
;

239 i‡(!
	`io˘l
(
f
->
fd
, 
DAIOCTRIM
, 
ønge
))

242  
î∫o
;

243 
	}
}

245 #ifde‡
MADV_FREE


246 
	#FIO_MADV_FREE
 
MADV_FREE


	)

249 
ölöe
 
	$shm_©èch_to_›í_ªmoved
()

251 
x
;

252 
size_t
 
Àn
 = (
x
);

254 i‡(
	`sys˘lby«me
("kîn.ùc.shm_Ælow_ªmoved", &
x
, &
Àn
, 
NULL
, 0) < 0)

257  
x
 > 0 ? 1 : 0;

258 
	}
}

	@os/os-freebsd.h

1 #i‚de‡
FIO_OS_FREEBSD_H


2 
	#FIO_OS_FREEBSD_H


	)

4 
	#FIO_OS
 
os_‰ìbsd


	)

6 
	~<î∫o.h
>

7 
	~<sys/sys˘l.h
>

8 
	~<sys/disk.h
>

9 
	~<sys/ídün.h
>

10 
	~<sys/thr.h
>

11 
	~<sys/sockë.h
>

12 
	~<sys/∑øm.h
>

13 
	~<sys/˝u£t.h
>

14 
	~<sys/°©vfs.h
>

16 
	~"../fûe.h
"

18 
	#FIO_HAVE_ODIRECT


	)

19 
	#FIO_USE_GENERIC_INIT_RANDOM_STATE


	)

20 
	#FIO_HAVE_CHARDEV_SIZE


	)

21 
	#FIO_HAVE_FS_STAT


	)

22 
	#FIO_HAVE_TRIM


	)

23 
	#FIO_HAVE_GETTID


	)

24 
	#FIO_HAVE_CPU_AFFINITY


	)

25 
	#FIO_HAVE_SHM_ATTACH_REMOVED


	)

27 
	#OS_MAP_ANON
 
MAP_ANON


	)

29 
	#fio_sw≠16
(
x
Ë
	`bsw≠16
(x)

	)

30 
	#fio_sw≠32
(
x
Ë
	`bsw≠32
(x)

	)

31 
	#fio_sw≠64
(
x
Ë
	`bsw≠64
(x)

	)

33 
˝u£t_t
 
	tos_˝u_mask_t
;

35 
	#fio_˝u_˛ór
(
mask
, 
˝u
Ë(Ë
	`CPU_CLR
((˝u), (mask))

	)

36 
	#fio_˝u_£t
(
mask
, 
˝u
Ë(Ë
	`CPU_SET
((˝u), (mask))

	)

37 
	#fio_˝u_is£t
(
mask
, 
˝u
Ë(
	`CPU_ISSET
((˝u), (mask)Ë!0)

	)

38 
	#fio_˝u_cou¡
(
mask
Ë
	`CPU_COUNT
((mask))

	)

40 #ifde‡
CONFIG_PTHREAD_GETAFFINITY


41 
	#FIO_HAVE_GET_THREAD_AFFINITY


	)

42 
	#fio_gë_thªad_afföôy
(
mask
) \

43 
	`±hªad_gëafföôy_≈
(
	`±hªad_£lf
(), (
mask
), &(mask))

	)

46 
ölöe
 
	$fio_˝u£t_öô
(
os_˝u_mask_t
 *
mask
)

48 
	`CPU_ZERO
(
mask
);

50 
	}
}

52 
ölöe
 
	$fio_˝u£t_exô
(
os_˝u_mask_t
 *
mask
)

55 
	}
}

57 
ölöe
 
	$fio_£èfföôy
(
pid
, 
os_˝u_mask_t
 
˝umask
)

59  
	`˝u£t_£èfföôy
(
CPU_LEVEL_WHICH
, 
CPU_WHICH_TID
, 
pid
, (
˝umask
), &cpumask);

60 
	}
}

62 
ölöe
 
	$fio_gëafföôy
(
pid
, 
os_˝u_mask_t
 *
˝umask
)

64  
	`˝u£t_gëafföôy
(
CPU_LEVEL_WHICH
, 
CPU_WHICH_PID
, 
pid
, (
˝umask
), cpumask);

65 
	}
}

67 
	#FIO_MAX_CPUS
 
CPU_SETSIZE


	)

69 
ölöe
 
	$blockdev_size
(
fio_fûe
 *
f
, *
byãs
)

71 
off_t
 
size
;

73 i‡(!
	`io˘l
(
f
->
fd
, 
DIOCGMEDIASIZE
, &
size
)) {

74 *
byãs
 = 
size
;

78 *
byãs
 = 0;

79  
î∫o
;

80 
	}
}

82 
ölöe
 
	$ch¨dev_size
(
fio_fûe
 *
f
, *
byãs
)

84  
	`blockdev_size
(
f
, 
byãs
);

85 
	}
}

87 
ölöe
 
	$blockdev_övÆid©e_ˇche
(
fio_fûe
 *
f
)

89  
ENOTSUP
;

90 
	}
}

92 
ölöe
 
	$os_phys_mem
()

94 
mib
[2] = { 
CTL_HW
, 
HW_PHYSMEM
 };

95 
mem
;

96 
size_t
 
Àn
 = (
mem
);

98 
	`sys˘l
(
mib
, 2, &
mem
, &
Àn
, 
NULL
, 0);

99  
mem
;

100 
	}
}

102 
ölöe
 
	$gëtid
()

104 
lwpid
;

106 
	`thr_£lf
(&
lwpid
);

107  (Ë
lwpid
;

108 
	}
}

110 
ölöe
 
	$gë_fs_‰ì_size
(c⁄° *
∑th
)

112 
ªt
;

113 
°©vfs
 
s
;

115 i‡(
	`°©vfs
(
∑th
, &
s
) < 0)

118 
ªt
 = 
s
.
f_‰size
;

119 
ªt
 *(Ë
s
.
f_b‰ì
;

120  
ªt
;

121 
	}
}

123 
ölöe
 
	$os_åim
(
fio_fûe
 *
f
, 
°¨t
,

124 
Àn
)

126 
off_t
 
ønge
[2];

128 
ønge
[0] = 
°¨t
;

129 
ønge
[1] = 
Àn
;

131 i‡(!
	`io˘l
(
f
->
fd
, 
DIOCGDELETE
, 
ønge
))

134  
î∫o
;

135 
	}
}

137 #ifde‡
MADV_FREE


138 
	#FIO_MADV_FREE
 
MADV_FREE


	)

141 
ölöe
 
	$shm_©èch_to_›í_ªmoved
()

143 
x
;

144 
size_t
 
Àn
 = (
x
);

146 i‡(
	`sys˘lby«me
("kîn.ùc.shm_Ælow_ªmoved", &
x
, &
Àn
, 
NULL
, 0) < 0)

149  
x
 > 0 ? 1 : 0;

150 
	}
}

	@os/os-hpux.h

1 #i‚de‡
FIO_OS_HPUX_H


2 
	#FIO_OS_HPUX_H


	)

4 
	#FIO_OS
 
os_hpux


	)

6 
	~<î∫o.h
>

7 
	~<uni°d.h
>

8 
	~<sys/io˘l.h
>

9 
	~<f˙é.h
>

10 
	~<sys/Ádvi£.h
>

11 
	~<sys/mm™.h
>

12 
	~<sys/mp˘l.h
>

13 
	~<sys/diskio.h
>

14 
	~<sys/∑øm.h
>

15 
	~<sys/p°©.h
>

16 
	~<time.h
>

17 
	~<aio.h
>

18 
	~<¨m.h
>

20 
	~"../fûe.h
"

22 
	#FIO_HAVE_ODIRECT


	)

23 
	#FIO_USE_GENERIC_INIT_RANDOM_STATE


	)

24 
	#FIO_HAVE_CHARDEV_SIZE


	)

26 
	#OS_MAP_ANON
 
MAP_ANONYMOUS


	)

27 
	#OS_MSG_DONTWAIT
 0

	)

29 
	#POSIX_MADV_DONTNEED
 
MADV_DONTNEED


	)

30 
	#POSIX_MADV_SEQUENTIAL
 
MADV_SEQUENTIAL


	)

31 
	#POSIX_MADV_RANDOM
 
MADV_RANDOM


	)

32 
	#posix_madvi£
(
±r
, 
sz
, 
höt
Ë
	`madvi£
(’å), (sz), (höt))

	)

34 #i‚de‡
MSG_WAITALL


35 
	#MSG_WAITALL
 0x40

	)

38 
	#FIO_USE_GENERIC_SWAP


	)

40 
	#FIO_OS_HAVE_AIOCB_TYPEDEF


	)

42 #ifde‡
CONFIG_PTHREAD_GETAFFINITY


43 
	#FIO_HAVE_GET_THREAD_AFFINITY


	)

44 
	#fio_gë_thªad_afföôy
(
mask
) \

45 
	`±hªad_gëafföôy_≈
(
	`±hªad_£lf
(), (
mask
), &(mask))

	)

48 
aiocb64
 
	tos_aiocb_t
;

50 
ölöe
 
	$blockdev_övÆid©e_ˇche
(
fio_fûe
 *
f
)

52  
ENOTSUP
;

53 
	}
}

55 
ölöe
 
	$blockdev_size
(
fio_fûe
 *
f
, *
byãs
)

57 
disk_des¸ibe_ty≥_ext_t
 
dext
;

59 i‡(!
	`io˘l
(
f
->
fd
, 
DIOC_DESCRIBE_EXT
, &
dext
)) {

60 
lba
;

62 
lba
 = ((
uöt64_t
Ë
dext
.
maxsva_high
 << 32Ë| dext.
maxsva_low
;

63 *
byãs
 = 
lba
 * 
dext
.
lgblksz
;

67 *
byãs
 = 0;

68  
î∫o
;

69 
	}
}

71 
ölöe
 
	$ch¨dev_size
(
fio_fûe
 *
f
, *
byãs
)

73  
	`blockdev_size
(
f
, 
byãs
);

74 
	}
}

76 
ölöe
 
	$os_phys_mem
()

78 
ªt
;

79 
p°_°©ic
 
p°
;

80 
p°un
 
pu
;

82 
pu
.
p°_°©ic
 = &
p°
;

83 i‡(
	`p°©
(
PSTAT_STATIC
, 
pu
, (
p°
), 0, 0) == -1)

86 
ªt
 = 
p°
.
physiˇl_mem‹y
;

87 
ªt
 *
p°
.
∑ge_size
;

88  
ªt
;

89 
	}
}

91 
	#FIO_HAVE_CPU_ONLINE_SYSCONF


	)

93 
ölöe
 
	$˝us_⁄löe
()

95  
	`mp˘l
(
MPC_GETNUMSPUS
, 0, 
NULL
);

96 
	}
}

	@os/os-linux-syscall.h

1 #i‚de‡
FIO_OS_LINUX_SYSCALL_H


2 
	#FIO_OS_LINUX_SYSCALL_H


	)

4 
	~"../¨ch/¨ch.h
"

7 #i‡
deföed
(
ARCH_X86_H
)

8 #i‚de‡
__NR_i›rio_£t


9 
	#__NR_i›rio_£t
 289

	)

10 
	#__NR_i›rio_gë
 290

	)

13 #i‚de‡
__NR_Ádvi£64


14 
	#__NR_Ádvi£64
 250

	)

17 #i‚de‡
__NR_sys_•li˚


18 
	#__NR_sys_•li˚
 313

	)

19 
	#__NR_sys_ãe
 315

	)

20 
	#__NR_sys_vm•li˚
 316

	)

23 #i‚de‡
__NR_¥ódv2


24 
	#__NR_¥ódv2
 378

	)

26 #i‚de‡
__NR_pwrôev2


27 
	#__NR_pwrôev2
 379

	)

31 #ñi‡
deföed
(
ARCH_X86_64_H
)

32 #i‚de‡
__NR_i›rio_£t


33 
	#__NR_i›rio_£t
 251

	)

34 
	#__NR_i›rio_gë
 252

	)

37 #i‚de‡
__NR_Ádvi£64


38 
	#__NR_Ádvi£64
 221

	)

41 #i‚de‡
__NR_sys_•li˚


42 
	#__NR_sys_•li˚
 275

	)

43 
	#__NR_sys_ãe
 276

	)

44 
	#__NR_sys_vm•li˚
 278

	)

47 #i‚de‡
__NR_shmgë


48 
	#__NR_shmgë
 29

	)

49 
	#__NR_shm©
 30

	)

50 
	#__NR_shm˘l
 31

	)

51 
	#__NR_shmdt
 67

	)

54 #i‚de‡
__NR_¥ódv2


55 
	#__NR_¥ódv2
 327

	)

57 #i‚de‡
__NR_pwrôev2


58 
	#__NR_pwrôev2
 328

	)

62 #ñi‡
deföed
(
ARCH_PPC_H
)

63 #i‚de‡
__NR_i›rio_£t


64 
	#__NR_i›rio_£t
 273

	)

65 
	#__NR_i›rio_gë
 274

	)

68 #i‚de‡
__NR_Ádvi£64


69 
	#__NR_Ádvi£64
 233

	)

72 #i‚de‡
__NR_sys_•li˚


73 
	#__NR_sys_•li˚
 283

	)

74 
	#__NR_sys_ãe
 284

	)

75 
	#__NR_sys_vm•li˚
 285

	)

79 #ñi‡
deföed
(
ARCH_IA64_H
)

80 #i‚de‡
__NR_i›rio_£t


81 
	#__NR_i›rio_£t
 1274

	)

82 
	#__NR_i›rio_gë
 1275

	)

85 #i‚de‡
__NR_Ádvi£64


86 
	#__NR_Ádvi£64
 1234

	)

89 #i‚de‡
__NR_sys_•li˚


90 
	#__NR_sys_•li˚
 1297

	)

91 
	#__NR_sys_ãe
 1301

	)

92 
	#__NR_sys_vm•li˚
 1302

	)

95 #i‚de‡
__NR_¥ódv2


96 
	#__NR_¥ódv2
 1348

	)

98 #i‚de‡
__NR_pwrôev2


99 
	#__NR_pwrôev2
 1349

	)

103 #ñi‡
deföed
(
ARCH_ALPHA_H
)

104 #i‚de‡
__NR_i›rio_£t


105 
	#__NR_i›rio_£t
 442

	)

106 
	#__NR_i›rio_gë
 443

	)

109 #i‚de‡
__NR_Ádvi£64


110 
	#__NR_Ádvi£64
 413

	)

113 #i‚de‡
__NR_sys_•li˚


114 
	#__NR_sys_•li˚
 468

	)

115 
	#__NR_sys_ãe
 470

	)

116 
	#__NR_sys_vm•li˚
 471

	)

120 #ñi‡
deföed
(
ARCH_S390_H
)

121 #i‚de‡
__NR_i›rio_£t


122 
	#__NR_i›rio_£t
 282

	)

123 
	#__NR_i›rio_gë
 283

	)

126 #i‚de‡
__NR_Ádvi£64


127 
	#__NR_Ádvi£64
 253

	)

130 #i‚de‡
__NR_sys_•li˚


131 
	#__NR_sys_•li˚
 306

	)

132 
	#__NR_sys_ãe
 308

	)

133 
	#__NR_sys_vm•li˚
 309

	)

136 #i‚de‡
__NR_¥ódv2


137 
	#__NR_¥ódv2
 376

	)

139 #i‚de‡
__NR_pwrôev2


140 
	#__NR_pwrôev2
 377

	)

144 #ñi‡
deföed
(
ARCH_SPARC_H
)

145 #i‚de‡
__NR_i›rio_£t


146 
	#__NR_i›rio_£t
 196

	)

147 
	#__NR_i›rio_gë
 218

	)

150 #i‚de‡
__NR_Ádvi£64


151 
	#__NR_Ádvi£64
 209

	)

154 #i‚de‡
__NR_sys_•li˚


155 
	#__NR_sys_•li˚
 232

	)

156 
	#__NR_sys_ãe
 280

	)

157 
	#__NR_sys_vm•li˚
 25

	)

160 #i‚de‡
__NR_¥ódv2


161 
	#__NR_¥ódv2
 358

	)

163 #i‚de‡
__NR_pwrôev2


164 
	#__NR_pwrôev2
 359

	)

168 #ñi‡
deföed
(
ARCH_SPARC64_H
)

169 #i‚de‡
__NR_i›rio_£t


170 
	#__NR_i›rio_£t
 196

	)

171 
	#__NR_i›rio_gë
 218

	)

174 #i‚de‡
__NR_Ádvi£64


175 
	#__NR_Ádvi£64
 209

	)

178 #i‚de‡
__NR_sys_•li˚


179 
	#__NR_sys_•li˚
 232

	)

180 
	#__NR_sys_ãe
 280

	)

181 
	#__NR_sys_vm•li˚
 25

	)

184 #i‚de‡
__NR_¥ódv2


185 
	#__NR_¥ódv2
 358

	)

187 #i‚de‡
__NR_pwrôev2


188 
	#__NR_pwrôev2
 359

	)

192 #ñi‡
deföed
(
ARCH_ARM_H
)

193 #i‚de‡
__NR_i›rio_£t


194 
	#__NR_i›rio_£t
 314

	)

195 
	#__NR_i›rio_gë
 315

	)

198 #i‚de‡
__NR_Ádvi£64


199 
	#__NR_Ádvi£64
 270

	)

202 #i‚de‡
__NR_sys_•li˚


203 
	#__NR_sys_•li˚
 340

	)

204 
	#__NR_sys_ãe
 342

	)

205 
	#__NR_sys_vm•li˚
 343

	)

208 #i‚de‡
__NR_¥ódv2


209 
	#__NR_¥ódv2
 392

	)

211 #i‚de‡
__NR_pwrôev2


212 
	#__NR_pwrôev2
 393

	)

216 #ñi‡
deföed
(
ARCH_MIPS64_H
)

217 #i‚de‡
__NR_i›rio_£t


218 
	#__NR_i›rio_£t
 314

	)

219 
	#__NR_i›rio_gë
 315

	)

222 #i‚de‡
__NR_Ádvi£64


223 
	#__NR_Ádvi£64
 215

	)

226 #i‚de‡
__NR_sys_•li˚


227 
	#__NR_sys_•li˚
 263

	)

228 
	#__NR_sys_ãe
 265

	)

229 
	#__NR_sys_vm•li˚
 266

	)

233 #ñi‡
deföed
(
ARCH_SH_H
)

234 #i‚de‡
__NR_i›rio_£t


235 
	#__NR_i›rio_£t
 288

	)

236 
	#__NR_i›rio_gë
 289

	)

239 #i‚de‡
__NR_Ádvi£64


240 
	#__NR_Ádvi£64
 250

	)

243 #i‚de‡
__NR_sys_•li˚


244 
	#__NR_sys_•li˚
 313

	)

245 
	#__NR_sys_ãe
 315

	)

246 
	#__NR_sys_vm•li˚
 316

	)

250 #ñi‡
deföed
(
ARCH_HPPA_H
)

251 #i‚de‡
__NR_i›rio_£t


252 
	#__NR_i›rio_£t
 267

	)

253 
	#__NR_i›rio_gë
 268

	)

256 #i‚de‡
__NR_Ádvi£64


257 
	#__NR_Ádvi£64
 236

	)

260 #i‚de‡
__NR_sys_•li˚


261 
	#__NR_sys_•li˚
 291

	)

262 
	#__NR_sys_ãe
 293

	)

263 
	#__NR_sys_vm•li˚
 294

	)

267 #ñi‡
deföed
(
ARCH_AARCH64_H
)

268 #i‚de‡
__NR_i›rio_£t


269 
	#__NR_i›rio_£t
 30

	)

270 
	#__NR_i›rio_gë
 31

	)

	@os/os-linux.h

1 #i‚de‡
FIO_OS_LINUX_H


2 
	#FIO_OS_LINUX_H


	)

4 #ifde‡
__ANDROID__


5 
	#FIO_OS
 
os_™droid


	)

7 
	#FIO_OS
 
os_löux


	)

10 
	~<sys/io˘l.h
>

11 
	~<sys/uio.h
>

12 
	~<sys/sysˇŒ.h
>

13 
	~<sys/sysma¸os.h
>

14 
	~<sys/vfs.h
>

15 
	~<sys/mm™.h
>

16 
	~<uni°d.h
>

17 
	~<f˙é.h
>

18 
	~<î∫o.h
>

19 
	~<sched.h
>

20 
	~<löux/uni°d.h
>

21 
	~<löux/maj‹.h
>

22 
	~<löux/fs.h
>

23 
	~<scsi/sg.h
>

24 
	~<asm/byã‹dî.h
>

25 #ifde‡
__ANDROID__


26 
	~"os-ashmem.h
"

27 
	#FIO_NO_HAVE_SHM_H


	)

30 #ifde‡
ARCH_HAVE_CRC_CRYPTO


31 
	~<sys/auxv.h
>

32 #i‚de‡
HWCAP_PMULL


33 
	#HWCAP_PMULL
 (1 << 4)

	)

35 #i‚de‡
HWCAP_CRC32


36 
	#HWCAP_CRC32
 (1 << 7)

	)

40 
	~"os-löux-sysˇŒ.h
"

41 
	~"../fûe.h
"

43 #i‚de‡
__has_buûtö


44 
	#__has_buûtö
(
x
) 0

46 

	)

47 
	#FIO_HAVE_CPU_AFFINITY


	)

48 
	#FIO_HAVE_DISK_UTIL


	)

49 
	#FIO_HAVE_SGIO


	)

50 
	#FIO_HAVE_IOPRIO


	)

51 
	#FIO_HAVE_IOPRIO_CLASS


	)

52 
	#FIO_HAVE_IOSCHED_SWITCH


	)

53 
	#FIO_HAVE_ODIRECT


	)

54 
	#FIO_HAVE_HUGETLB


	)

55 
	#FIO_HAVE_BLKTRACE


	)

56 
	#FIO_HAVE_CL_SIZE


	)

57 
	#FIO_HAVE_CGROUPS


	)

58 
	#FIO_HAVE_FS_STAT


	)

59 
	#FIO_HAVE_TRIM


	)

60 
	#FIO_HAVE_GETTID


	)

61 
	#FIO_USE_GENERIC_INIT_RANDOM_STATE


	)

62 
	#FIO_HAVE_BYTEORDER_FUNCS


	)

63 
	#FIO_HAVE_PWRITEV2


	)

64 
	#FIO_HAVE_SHM_ATTACH_REMOVED


	)

66 #ifde‡
MAP_HUGETLB


67 
	#FIO_HAVE_MMAP_HUGE


	)

70 
	#OS_MAP_ANON
 
MAP_ANONYMOUS


	)

72 
	#FIO_EXT_ENG_DIR
 "/u§/loˇl/lib/fio"

	)

74 
˝u_£t_t
 
	tos_˝u_mask_t
;

76 #ifde‡
CONFIG_3ARG_AFFINITY


77 
	#fio_£èfföôy
(
pid
, 
˝umask
) \

78 
	`sched_£èfföôy
((
pid
), (
˝umask
), &(˝umask))

	)

79 
	#fio_gëafföôy
(
pid
, 
±r
) \

80 
	`sched_gëafföôy
((
pid
), (
˝u_£t_t
), (
±r
))

	)

81 #ñi‡
deföed
(
CONFIG_2ARG_AFFINITY
)

82 
	#fio_£èfföôy
(
pid
, 
˝umask
) \

83 
	`sched_£èfföôy
((
pid
), &(
˝umask
))

	)

84 
	#fio_gëafföôy
(
pid
, 
±r
) \

85 
	`sched_gëafföôy
((
pid
), (
±r
))

	)

88 #ifde‡
CONFIG_PTHREAD_GETAFFINITY


89 
	#FIO_HAVE_GET_THREAD_AFFINITY


	)

90 
	#fio_gë_thªad_afföôy
(
mask
) \

91 
	`±hªad_gëafföôy_≈
(
	`±hªad_£lf
(), (
mask
), &(mask))

	)

94 
	#fio_˝u_˛ór
(
mask
, 
˝u
Ë
	`CPU_CLR
((˝u), (mask))

	)

95 
	#fio_˝u_£t
(
mask
, 
˝u
Ë
	`CPU_SET
((˝u), (mask))

	)

96 
	#fio_˝u_is£t
(
mask
, 
˝u
Ë(
	`CPU_ISSET
((˝u), (mask)Ë!0)

	)

97 
	#fio_˝u_cou¡
(
mask
Ë
	`CPU_COUNT
((mask))

	)

99 
ölöe
 
	$fio_˝u£t_öô
(
os_˝u_mask_t
 *
mask
)

101 
	`CPU_ZERO
(
mask
);

103 
	}
}

105 
ölöe
 
	$fio_˝u£t_exô
(
os_˝u_mask_t
 *
mask
)

108 
	}
}

110 
	#FIO_MAX_CPUS
 
CPU_SETSIZE


	)

113 
	mIOPRIO_CLASS_NONE
,

114 
	mIOPRIO_CLASS_RT
,

115 
	mIOPRIO_CLASS_BE
,

116 
	mIOPRIO_CLASS_IDLE
,

120 
	mIOPRIO_WHO_PROCESS
 = 1,

121 
	mIOPRIO_WHO_PGRP
,

122 
	mIOPRIO_WHO_USER
,

125 
	#IOPRIO_BITS
 16

	)

126 
	#IOPRIO_CLASS_SHIFT
 13

	)

128 
	#IOPRIO_MIN_PRIO
 0

	)

129 
	#IOPRIO_MAX_PRIO
 7

	)

131 
	#IOPRIO_MIN_PRIO_CLASS
 0

	)

132 
	#IOPRIO_MAX_PRIO_CLASS
 3

	)

134 
ölöe
 
	$i›rio_vÆue
(
i›rio_˛ass
, 
i›rio
)

139 i‡(!
i›rio_˛ass
)

140 
i›rio_˛ass
 = 
IOPRIO_CLASS_BE
;

142  (
i›rio_˛ass
 << 
IOPRIO_CLASS_SHIFT
Ë| 
i›rio
;

143 
	}
}

145 
ölöe
 
boﬁ
 
	$i›rio_vÆue_is_˛ass_π
(
¥i‹ôy
)

147  (
¥i‹ôy
 >> 
IOPRIO_CLASS_SHIFT
Ë=
IOPRIO_CLASS_RT
;

148 
	}
}

150 
ölöe
 
	$i›rio_£t
(
which
, 
who
, 
i›rio_˛ass
, 
i›rio
)

152  
	`sysˇŒ
(
__NR_i›rio_£t
, 
which
, 
who
,

153 
	`i›rio_vÆue
(
i›rio_˛ass
, 
i›rio
));

154 
	}
}

156 #i‚de‡
CONFIG_HAVE_GETTID


157 
ölöe
 
	$gëtid
()

159  
	`sysˇŒ
(
__NR_gëtid
);

160 
	}
}

163 
	#SPLICE_DEF_SIZE
 (64*1024)

	)

165 #i‚de‡
BLKGETSIZE64


166 
	#BLKGETSIZE64
 
	`_IOR
(0x12,114,
size_t
)

	)

169 #i‚de‡
BLKFLSBUF


170 
	#BLKFLSBUF
 
	`_IO
(0x12,97)

	)

173 #i‚de‡
BLKDISCARD


174 
	#BLKDISCARD
 
	`_IO
(0x12,119)

	)

177 
ölöe
 
	$blockdev_övÆid©e_ˇche
(
fio_fûe
 *
f
)

179  
	`io˘l
(
f
->
fd
, 
BLKFLSBUF
);

180 
	}
}

182 
ölöe
 
	$blockdev_size
(
fio_fûe
 *
f
, *
byãs
)

184 i‡(!
	`io˘l
(
f
->
fd
, 
BLKGETSIZE64
, 
byãs
))

187  
î∫o
;

188 
	}
}

190 
ölöe
 
	$os_phys_mem
()

192 
∑gesize
, 
∑ges
;

194 
∑gesize
 = 
	`sysc⁄f
(
_SC_PAGESIZE
);

195 
∑ges
 = 
	`sysc⁄f
(
_SC_PHYS_PAGES
);

196 i‡(
∑ges
 =-1 || 
∑gesize
 == -1)

199  (Ë
∑ges
 * (Ë
∑gesize
;

200 
	}
}

202 #ifde‡
O_NOATIME


203 
	#FIO_O_NOATIME
 
O_NOATIME


	)

205 
	#FIO_O_NOATIME
 0

	)

208 #ifde‡
O_ATOMIC


209 
	#OS_O_ATOMIC
 
O_ATOMIC


	)

211 
	#OS_O_ATOMIC
 040000000

	)

214 #ifde‡
MADV_REMOVE


215 
	#FIO_MADV_FREE
 
MADV_REMOVE


	)

219 #i‡(
__has_buûtö
(
__buûtö_bsw≠16
Ë&& __has_buûtö(
__buûtö_bsw≠32
) \

220 && 
__has_buûtö
(
__buûtö_bsw≠64
)Ë|| (
	g__GNUC__
 > 4 \

221 || (
	g__GNUC__
 =4 && 
__GNUC_MINOR__
 >= 8))

222 
	#fio_sw≠16
(
x
Ë
	`__buûtö_bsw≠16
(x)

	)

223 
	#fio_sw≠32
(
x
Ë
	`__buûtö_bsw≠32
(x)

	)

224 
	#fio_sw≠64
(
x
Ë
	`__buûtö_bsw≠64
(x)

	)

226 
	~<byãsw≠.h
>

227 
	#fio_sw≠16
(
x
Ë
	`bsw≠_16
(x)

	)

228 
	#fio_sw≠32
(
x
Ë
	`bsw≠_32
(x)

	)

229 
	#fio_sw≠64
(
x
Ë
	`bsw≠_64
(x)

	)

232 
	#CACHE_LINE_FILE
 \

233 "/sys/devi˚s/sy°em/˝u/˝u0/ˇche/ödex0/cohîícy_löe_size"

	)

235 
ölöe
 
	$¨ch_ˇche_löe_size
()

237 
size
[32];

238 
fd
, 
ªt
;

240 
fd
 = 
	`›í
(
CACHE_LINE_FILE
, 
O_RDONLY
);

241 i‡(
fd
 < 0)

244 
ªt
 = 
	`ªad
(
fd
, 
size
, (size));

246 
	`˛o£
(
fd
);

248 i‡(
ªt
 <= 0)

251  
	`©oi
(
size
);

252 
	}
}

254 #ifde‡
__powîpc64__


255 
	#FIO_HAVE_CPU_ONLINE_SYSCONF


	)

256 
ölöe
 
	$˝us_⁄löe
()

258  
	`sysc⁄f
(
_SC_NPROCESSORS_CONF
);

259 
	}
}

262 
ölöe
 
	$gë_fs_‰ì_size
(c⁄° *
∑th
)

264 
ªt
;

265 
°©fs
 
s
;

267 i‡(
	`°©fs
(
∑th
, &
s
) < 0)

270 
ªt
 = 
s
.
f_bsize
;

271 
ªt
 *(Ë
s
.
f_b‰ì
;

272  
ªt
;

273 
	}
}

275 
ölöe
 
	$os_åim
(
fio_fûe
 *
f
, 
°¨t
,

276 
Àn
)

278 
uöt64_t
 
ønge
[2];

280 
ønge
[0] = 
°¨t
;

281 
ønge
[1] = 
Àn
;

283 i‡(!
	`io˘l
(
f
->
fd
, 
BLKDISCARD
, 
ønge
))

286  
î∫o
;

287 
	}
}

289 #ifde‡
CONFIG_SCHED_IDLE


290 
ölöe
 
	$fio_£t_sched_idÀ
()

292 
sched_∑øm
 
p
 = { .
sched_¥i‹ôy
 = 0, };

293  
	`sched_£tscheduÀr
(
	`gëtid
(), 
SCHED_IDLE
, &
p
);

294 
	}
}

297 #i‚de‡
F_GET_RW_HINT


298 #i‚de‡
F_LINUX_SPECIFIC_BASE


299 
	#F_LINUX_SPECIFIC_BASE
 1024

	)

301 
	#F_GET_RW_HINT
 (
F_LINUX_SPECIFIC_BASE
 + 11)

	)

302 
	#F_SET_RW_HINT
 (
F_LINUX_SPECIFIC_BASE
 + 12)

	)

303 
	#F_GET_FILE_RW_HINT
 (
F_LINUX_SPECIFIC_BASE
 + 13)

	)

304 
	#F_SET_FILE_RW_HINT
 (
F_LINUX_SPECIFIC_BASE
 + 14)

	)

307 #i‚de‡
RWH_WRITE_LIFE_NONE


308 
	#RWH_WRITE_LIFE_NOT_SET
 0

	)

309 
	#RWH_WRITE_LIFE_NONE
 1

	)

310 
	#RWH_WRITE_LIFE_SHORT
 2

	)

311 
	#RWH_WRITE_LIFE_MEDIUM
 3

	)

312 
	#RWH_WRITE_LIFE_LONG
 4

	)

313 
	#RWH_WRITE_LIFE_EXTREME
 5

	)

316 
	#FIO_HAVE_WRITE_HINT


	)

318 #i‚de‡
RWF_HIPRI


319 
	#RWF_HIPRI
 0x00000001

	)

321 #i‚de‡
RWF_DSYNC


322 
	#RWF_DSYNC
 0x00000002

	)

324 #i‚de‡
RWF_SYNC


325 
	#RWF_SYNC
 0x00000004

	)

327 #i‚de‡
RWF_NOWAIT


328 
	#RWF_NOWAIT
 0x00000008

	)

331 #i‚de‡
RWF_UNCACHED


332 
	#RWF_UNCACHED
 0x00000040

	)

335 #i‚de‡
RWF_WRITE_LIFE_SHIFT


336 
	#RWF_WRITE_LIFE_SHIFT
 4

	)

337 
	#RWF_WRITE_LIFE_SHORT
 (1 << 
RWF_WRITE_LIFE_SHIFT
)

	)

338 
	#RWF_WRITE_LIFE_MEDIUM
 (2 << 
RWF_WRITE_LIFE_SHIFT
)

	)

339 
	#RWF_WRITE_LIFE_LONG
 (3 << 
RWF_WRITE_LIFE_SHIFT
)

	)

340 
	#RWF_WRITE_LIFE_EXTREME
 (4 << 
RWF_WRITE_LIFE_SHIFT
)

	)

343 #i‚de‡
CONFIG_PWRITEV2


344 #ifde‡
__NR_¥ódv2


345 
ölöe
 
	$make_pos_h_l
(*
pos_h
, *
pos_l
,

346 
off_t
 
off£t
)

348 #i‡
BITS_PER_LONG
 == 64

349 *
pos_l
 = 
off£t
;

350 *
pos_h
 = 0;

352 *
pos_l
 = 
off£t
 & 0xffffffff;

353 *
pos_h
 = ((
uöt64_t
Ë
off£t
) >> 32;

355 
	}
}

356 
ölöe
 
ssize_t
 
	$¥ódv2
(
fd
, c⁄° 
iovec
 *
iov
, 
iov˙t
,

357 
off_t
 
off£t
, 
Êags
)

359 
pos_l
, 
pos_h
;

361 
	`make_pos_h_l
(&
pos_h
, &
pos_l
, 
off£t
);

362  
	`sysˇŒ
(
__NR_¥ódv2
, 
fd
, 
iov
, 
iov˙t
, 
pos_l
, 
pos_h
, 
Êags
);

363 
	}
}

364 
ölöe
 
ssize_t
 
	$pwrôev2
(
fd
, c⁄° 
iovec
 *
iov
, 
iov˙t
,

365 
off_t
 
off£t
, 
Êags
)

367 
pos_l
, 
pos_h
;

369 
	`make_pos_h_l
(&
pos_h
, &
pos_l
, 
off£t
);

370  
	`sysˇŒ
(
__NR_pwrôev2
, 
fd
, 
iov
, 
iov˙t
, 
pos_l
, 
pos_h
, 
Êags
);

371 
	}
}

373 
ölöe
 
ssize_t
 
	$¥ódv2
(
fd
, c⁄° 
iovec
 *
iov
, 
iov˙t
,

374 
off_t
 
off£t
, 
Êags
)

376 
î∫o
 = 
ENOSYS
;

378 
	}
}

379 
ölöe
 
ssize_t
 
	$pwrôev2
(
fd
, c⁄° 
iovec
 *
iov
, 
iov˙t
,

380 
off_t
 
off£t
, 
Êags
)

382 
î∫o
 = 
ENOSYS
;

384 
	}
}

388 
ölöe
 
	$shm_©èch_to_›í_ªmoved
()

391 
	}
}

393 #ifde‡
CONFIG_LINUX_FALLOCATE


394 
	#FIO_HAVE_NATIVE_FALLOCATE


	)

395 
ölöe
 
boﬁ
 
	$fio_ÁŒoˇã
(
fio_fûe
 *
f
, 
uöt64_t
 
off£t
,

396 
uöt64_t
 
Àn
)

398 
ªt
;

399 
ªt
 = 
	`ÁŒoˇã
(
f
->
fd
, 0, 
off£t
, 
Àn
);

400 i‡(
ªt
 == 0)

401  
åue
;

404 i‡(
ªt
 > 0)

405 
î∫o
 = 
ªt
;

407  
Ál£
;

408 
	}
}

411 
	#FIO_HAVE_CPU_HAS


	)

412 
ölöe
 
boﬁ
 
	$os_˝u_has
(
˝u_„©uªs
 
„©uª
)

414 
boﬁ
 
have_„©uª
;

415 
fio_unu£d
 
hwˇp
;

417 
„©uª
) {

418 #ifde‡
ARCH_HAVE_CRC_CRYPTO


419 
CPU_ARM64_CRC32C
:

420 
hwˇp
 = 
	`gëauxvÆ
(
AT_HWCAP
);

421 
have_„©uª
 = (
hwˇp
 & (
HWCAP_PMULL
 | 
HWCAP_CRC32
)) ==

422 (
HWCAP_PMULL
 | 
HWCAP_CRC32
);

426 
have_„©uª
 = 
Ál£
;

429  
have_„©uª
;

430 
	}
}

	@os/os-mac.h

1 #i‚de‡
FIO_OS_APPLE_H


2 
	#FIO_OS_APPLE_H


	)

4 
	#FIO_OS
 
os_mac


	)

6 
	~<î∫o.h
>

7 
	~<f˙é.h
>

8 
	~<sys/disk.h
>

9 
	~<sys/sys˘l.h
>

10 
	~<sys/time.h
>

11 
	~<uni°d.h
>

12 
	~<sig«l.h
>

13 
	~<mach/mach_öô.h
>

14 
	~<machöe/ídün.h
>

15 
	~<libkîn/OSByãOrdî.h
>

17 
	~"../fûe.h
"

19 
	#FIO_USE_GENERIC_INIT_RANDOM_STATE


	)

20 
	#FIO_HAVE_GETTID


	)

21 
	#FIO_HAVE_CHARDEV_SIZE


	)

22 
	#FIO_HAVE_NATIVE_FALLOCATE


	)

24 
	#OS_MAP_ANON
 
MAP_ANON


	)

26 
	#fio_sw≠16
(
x
Ë
	`OSSw≠I¡16
(x)

	)

27 
	#fio_sw≠32
(
x
Ë
	`OSSw≠I¡32
(x)

	)

28 
	#fio_sw≠64
(
x
Ë
	`OSSw≠I¡64
(x)

	)

30 #ifde‡
CONFIG_PTHREAD_GETAFFINITY


31 
	#FIO_HAVE_GET_THREAD_AFFINITY


	)

32 
	#fio_gë_thªad_afföôy
(
mask
) \

33 
	`±hªad_gëafföôy_≈
(
	`±hªad_£lf
(), (
mask
), &(mask))

	)

36 #i‚de‡
CONFIG_CLOCKID_T


37 
	t˛ockid_t
;

40 
	#FIO_OS_DIRECTIO


	)

41 
ölöe
 
	$fio_£t_odúe˘
(
fio_fûe
 *
f
)

43 i‡(
	`f˙é
(
f
->
fd
, 
F_NOCACHE
, 1) == -1)

44  
î∫o
;

46 
	}
}

48 
ölöe
 
	$blockdev_size
(
fio_fûe
 *
f
, *
byãs
)

50 
uöt32_t
 
block_size
;

51 
uöt64_t
 
block_cou¡
;

53 i‡(
	`io˘l
(
f
->
fd
, 
DKIOCGETBLOCKCOUNT
, &
block_cou¡
) == -1)

54  
î∫o
;

55 i‡(
	`io˘l
(
f
->
fd
, 
DKIOCGETBLOCKSIZE
, &
block_size
) == -1)

56  
î∫o
;

58 *
byãs
 = 
block_size
;

59 *
byãs
 *
block_cou¡
;

61 
	}
}

63 
ölöe
 
	$ch¨dev_size
(
fio_fûe
 *
f
, *
byãs
)

69 i‡(!
	`blockdev_size
(
f
, 
byãs
))

72 *
byãs
 = -1ULL;

74 
	}
}

76 
ölöe
 
	$blockdev_övÆid©e_ˇche
(
fio_fûe
 *
f
)

78  
ENOTSUP
;

79 
	}
}

81 
ölöe
 
	$os_phys_mem
()

83 
mib
[2] = { 
CTL_HW
, 
HW_PHYSMEM
 };

84 
mem
;

85 
size_t
 
Àn
 = (
mem
);

87 
	`sys˘l
(
mib
, 2, &
mem
, &
Àn
, 
NULL
, 0);

88  
mem
;

89 
	}
}

91 #i‚de‡
CONFIG_HAVE_GETTID


92 
ölöe
 
	$gëtid
()

94  
	`mach_thªad_£lf
();

95 
	}
}

98 
ölöe
 
boﬁ
 
	$fio_ÁŒoˇã
(
fio_fûe
 *
f
, 
uöt64_t
 
off£t
, uöt64_à
Àn
)

100 
f°‹e_t
 
°‹e
 = {
F_ALLOCATEALL
, 
F_PEOFPOSMODE
, 
off£t
, 
Àn
};

101 i‡(
	`f˙é
(
f
->
fd
, 
F_PREALLOCATE
, &
°‹e
) != -1) {

102 i‡(
	`·runˇã
(
f
->
fd
, 
Àn
) == 0)

103  
åue
;

106  
Ál£
;

107 
	}
}

	@os/os-netbsd.h

1 #i‚de‡
FIO_OS_NETBSD_H


2 
	#FIO_OS_NETBSD_H


	)

4 
	#FIO_OS
 
os_√tbsd


	)

6 
	~<î∫o.h
>

7 
	~<lwp.h
>

8 
	~<sys/∑øm.h
>

9 
	~<sys/°©vfs.h
>

10 
	~<sys/io˘l.h
>

11 
	~<sys/dkio.h
>

12 
	~<sys/diskœbñ.h
>

13 
	~<sys/ídün.h
>

14 
	~<sys/sys˘l.h
>

17 #unde‡
rb_node


18 #unde‡
rb_À·


19 #unde‡
rb_right


21 
	~"../fûe.h
"

23 
	#FIO_HAVE_ODIRECT


	)

24 
	#FIO_USE_GENERIC_INIT_RANDOM_STATE


	)

25 
	#FIO_HAVE_FS_STAT


	)

26 
	#FIO_HAVE_GETTID


	)

28 
	#OS_MAP_ANON
 
MAP_ANON


	)

30 #i‚de‡
PTHREAD_STACK_MIN


31 
	#PTHREAD_STACK_MIN
 4096

	)

34 
	#fio_sw≠16
(
x
Ë
	`bsw≠16
(x)

	)

35 
	#fio_sw≠32
(
x
Ë
	`bsw≠32
(x)

	)

36 
	#fio_sw≠64
(
x
Ë
	`bsw≠64
(x)

	)

38 #ifde‡
CONFIG_PTHREAD_GETAFFINITY


39 
	#FIO_HAVE_GET_THREAD_AFFINITY


	)

40 
	#fio_gë_thªad_afföôy
(
mask
) \

41 
	`±hªad_gëafföôy_≈
(
	`±hªad_£lf
(), (
mask
), &(mask))

	)

44 
ölöe
 
	$blockdev_size
(
fio_fûe
 *
f
, *
byãs
)

46 
diskœbñ
 
dl
;

48 i‡(!
	`io˘l
(
f
->
fd
, 
DIOCGDINFO
, &
dl
)) {

49 *
byãs
 = (()
dl
.
d_£˝îunô
Ë* dl.
d_£csize
;

53 *
byãs
 = 0;

54  
î∫o
;

55 
	}
}

57 
ölöe
 
	$blockdev_övÆid©e_ˇche
(
fio_fûe
 *
f
)

59  
ENOTSUP
;

60 
	}
}

62 
ölöe
 
	$os_phys_mem
()

64 
mib
[2] = { 
CTL_HW
, 
HW_PHYSMEM64
 };

65 
uöt64_t
 
mem
;

66 
size_t
 
Àn
 = (
mem
);

68 
	`sys˘l
(
mib
, 2, &
mem
, &
Àn
, 
NULL
, 0);

69  
mem
;

70 
	}
}

72 #i‚de‡
CONFIG_HAVE_GETTID


73 
ölöe
 
	$gëtid
()

75  (Ë
	`_lwp_£lf
();

76 
	}
}

79 
ölöe
 
	$gë_fs_‰ì_size
(c⁄° *
∑th
)

81 
ªt
;

82 
°©vfs
 
s
;

84 i‡(
	`°©vfs
(
∑th
, &
s
) < 0)

87 
ªt
 = 
s
.
f_‰size
;

88 
ªt
 *(Ë
s
.
f_b‰ì
;

89  
ªt
;

90 
	}
}

92 #ifde‡
MADV_FREE


93 
	#FIO_MADV_FREE
 
MADV_FREE


	)

	@os/os-openbsd.h

1 #i‚de‡
FIO_OS_OPENBSD_H


2 
	#FIO_OS_OPENBSD_H


	)

4 
	#FIO_OS
 
os_›íbsd


	)

6 
	~<î∫o.h
>

7 
	~<sys/∑øm.h
>

8 
	~<sys/°©vfs.h
>

9 
	~<sys/io˘l.h
>

10 
	~<sys/dkio.h
>

11 
	~<sys/diskœbñ.h
>

12 
	~<sys/ídün.h
>

13 
	~<sys/ut¢ame.h
>

14 
	~<sys/sys˘l.h
>

17 #unde‡
RB_BLACK


18 #unde‡
RB_RED


19 #unde‡
RB_ROOT


21 
	~"../fûe.h
"

23 
	#FIO_USE_GENERIC_INIT_RANDOM_STATE


	)

24 
	#FIO_HAVE_FS_STAT


	)

25 
	#FIO_HAVE_GETTID


	)

26 
	#FIO_HAVE_SHM_ATTACH_REMOVED


	)

28 
	#OS_MAP_ANON
 
MAP_ANON


	)

30 #i‚de‡
PTHREAD_STACK_MIN


31 
	#PTHREAD_STACK_MIN
 4096

	)

34 
	#fio_sw≠16
(
x
Ë
	`sw≠16
(x)

	)

35 
	#fio_sw≠32
(
x
Ë
	`sw≠32
(x)

	)

36 
	#fio_sw≠64
(
x
Ë
	`sw≠64
(x)

	)

38 #ifde‡
CONFIG_PTHREAD_GETAFFINITY


39 
	#FIO_HAVE_GET_THREAD_AFFINITY


	)

40 
	#fio_gë_thªad_afföôy
(
mask
) \

41 
	`±hªad_gëafföôy_≈
(
	`±hªad_£lf
(), (
mask
), &(mask))

	)

44 
ölöe
 
	$blockdev_size
(
fio_fûe
 *
f
, *
byãs
)

46 
diskœbñ
 
dl
;

48 i‡(!
	`io˘l
(
f
->
fd
, 
DIOCGDINFO
, &
dl
)) {

49 *
byãs
 = (()
dl
.
d_£˝îunô
Ë* dl.
d_£csize
;

53 *
byãs
 = 0;

54  
î∫o
;

55 
	}
}

57 
ölöe
 
	$blockdev_övÆid©e_ˇche
(
fio_fûe
 *
f
)

59  
ENOTSUP
;

60 
	}
}

62 
ölöe
 
	$os_phys_mem
()

64 
mib
[2] = { 
CTL_HW
, 
HW_PHYSMEM64
 };

65 
uöt64_t
 
mem
;

66 
size_t
 
Àn
 = (
mem
);

68 
	`sys˘l
(
mib
, 2, &
mem
, &
Àn
, 
NULL
, 0);

69  
mem
;

70 
	}
}

72 #i‚de‡
CONFIG_HAVE_GETTID


73 
ölöe
 
	$gëtid
()

75  ()(
öçå_t
Ë
	`±hªad_£lf
();

76 
	}
}

79 
ölöe
 
	$gë_fs_‰ì_size
(c⁄° *
∑th
)

81 
ªt
;

82 
°©vfs
 
s
;

84 i‡(
	`°©vfs
(
∑th
, &
s
) < 0)

87 
ªt
 = 
s
.
f_‰size
;

88 
ªt
 *(Ë
s
.
f_b‰ì
;

89  
ªt
;

90 
	}
}

92 #ifde‡
MADV_FREE


93 
	#FIO_MADV_FREE
 
MADV_FREE


	)

96 
ölöe
 
	$shm_©èch_to_›í_ªmoved
()

98 
ut¢ame
 
uts
;

99 
maj‹
, 
mö‹
;

101 i‡(
	`u«me
(&
uts
) == -1)

108 i‡(
uts
.
ªÀa£
[0] > '9' || uts.release[0] < '0')

110 i‡(
uts
.
ªÀa£
[1] != '.')

112 i‡(
uts
.
ªÀa£
[2] > '9' || uts.release[2] < '0')

115 
maj‹
 = 
uts
.
ªÀa£
[0] - '0';

116 
mö‹
 = 
uts
.
ªÀa£
[2] - '0';

118 i‡(
maj‹
 > 5)

120 i‡(
maj‹
 =5 && 
mö‹
 >= 1)

124 
	}
}

	@os/os-solaris.h

1 #i‚de‡
FIO_OS_SOLARIS_H


2 
	#FIO_OS_SOLARIS_H


	)

4 
	#FIO_OS
 
os_sﬁ¨is


	)

6 
	~<î∫o.h
>

7 
	~<mÆloc.h
>

8 
	~<uni°d.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<f˙é.h
>

11 
	~<sys/p£t.h
>

12 
	~<sys/mm™.h
>

13 
	~<sys/dkio.h
>

14 
	~<sys/byã‹dî.h
>

15 
	~<sys/°©vfs.h
>

16 
	~<±hªad.h
>

18 
	~"../fûe.h
"

19 
	~"../lib/ty≥s.h
"

21 
	#FIO_HAVE_CPU_AFFINITY


	)

22 
	#FIO_HAVE_CHARDEV_SIZE


	)

23 
	#FIO_USE_GENERIC_BDEV_SIZE


	)

24 
	#FIO_HAVE_FS_STAT


	)

25 
	#FIO_USE_GENERIC_INIT_RANDOM_STATE


	)

26 
	#FIO_HAVE_GETTID


	)

28 
	#OS_MAP_ANON
 
MAP_ANON


	)

29 
	#OS_RAND_MAX
 2147483648UL

	)

31 
	#fio_sw≠16
(
x
Ë
	`BSWAP_16
(x)

	)

32 
	#fio_sw≠32
(
x
Ë
	`BSWAP_32
(x)

	)

33 
	#fio_sw≠64
(
x
Ë
	`BSWAP_64
(x)

	)

35 
	ssﬁ¨is_ønd_£ed
 {

36 
	mr
[3];

39 #i‚de‡
POSIX_MADV_SEQUENTIAL


40 
	#posix_madvi£
 
madvi£


	)

41 
	#POSIX_MADV_SEQUENTIAL
 
MADV_SEQUENTIAL


	)

42 
	#POSIX_MADV_DONTNEED
 
MADV_DONTNEED


	)

43 
	#POSIX_MADV_RANDOM
 
MADV_RANDOM


	)

46 
	#os_˘ime_r
(
x
, 
y
, 
z
Ë
	`˘ime_r
((x), (y), (z))

	)

47 
	#FIO_OS_HAS_CTIME_R


	)

49 #ifde‡
CONFIG_PTHREAD_GETAFFINITY


50 
	#FIO_HAVE_GET_THREAD_AFFINITY


	)

51 
	#fio_gë_thªad_afföôy
(
mask
) \

52 
	`±hªad_gëafföôy_≈
(
	`±hªad_£lf
(), (
mask
), &(mask))

	)

55 
p£tid_t
 
	tos_˝u_mask_t
;

57 
ölöe
 
	$ch¨dev_size
(
fio_fûe
 *
f
, *
byãs
)

59 
dk_möfo
 
öfo
;

61 *
byãs
 = 0;

63 i‡(
	`io˘l
(
f
->
fd
, 
DKIOCGMEDIAINFO
, &
öfo
) < 0)

64  
î∫o
;

66 *
byãs
 = 
öfo
.
dki_lbsize
 * info.
dki_ˇ∑côy
;

68 
	}
}

70 
ölöe
 
	$blockdev_övÆid©e_ˇche
(
fio_fûe
 *
f
)

72  
ENOTSUP
;

73 
	}
}

75 
ölöe
 
	$os_phys_mem
()

77 
∑gesize
, 
∑ges
;

79 
∑gesize
 = 
	`sysc⁄f
(
_SC_PAGESIZE
);

80 
∑ges
 = 
	`sysc⁄f
(
_SC_PHYS_PAGES
);

81 i‡(
∑ges
 =-1 || 
∑gesize
 == -1)

84  (Ë
∑ges
 * (Ë
∑gesize
;

85 
	}
}

87 
ölöe
 
	$gë_fs_‰ì_size
(c⁄° *
∑th
)

89 
ªt
;

90 
°©vfs
 
s
;

92 i‡(
	`°©vfs
(
∑th
, &
s
) < 0)

95 
ªt
 = 
s
.
f_‰size
;

96 
ªt
 *(Ë
s
.
f_b‰ì
;

97  
ªt
;

98 
	}
}

100 
	#FIO_OS_DIRECTIO


	)

101 
dúe˘io
(, );

102 
ölöe
 
	$fio_£t_odúe˘
(
fio_fûe
 *
f
)

104 i‡(
	`dúe˘io
(
f
->
fd
, 
DIRECTIO_ON
) < 0)

105  
î∫o
;

108 
	}
}

113 
	#fio_£èfföôy
(
pid
, 
˝umask
) \

114 
	`p£t_böd
((
˝umask
), 
P_LWPID
, (
pid
), 
NULL
)

	)

115 
	#fio_gëafföôy
(
pid
, 
±r
Ë({ 0; })

	)

117 
	#fio_˝u_˛ór
(
mask
, 
˝u
Ë
	`p£t_assign
(
PS_NONE
, (˝u), 
NULL
)

	)

118 
	#fio_˝u_£t
(
mask
, 
˝u
Ë
	`p£t_assign
(*(mask), (˝u), 
NULL
)

	)

120 
ölöe
 
boﬁ
 
	$fio_˝u_is£t
(
os_˝u_mask_t
 *
mask
, 
˝u
)

122 c⁄° 
max_˝us
 = 
	`sysc⁄f
(
_SC_NPROCESSORS_ONLN
);

123 
num_˝us
;

124 
¥o˚ss‹id_t
 *
˝us
;

125 
boﬁ
 
ªt
;

126 
i
;

128 
˝us
 = 
	`mÆloc
((*˝usË* 
max_˝us
);

130 i‡(
	`p£t_öfo
(*
mask
, 
NULL
, &
num_˝us
, 
˝us
) < 0) {

131 
	`‰ì
(
˝us
);

132  
Ál£
;

135 
ªt
 = 
Ál£
;

136 
i
 = 0; i < 
num_˝us
; i++) {

137 i‡(
˝us
[
i
] =
˝u
) {

138 
ªt
 = 
åue
;

143 
	`‰ì
(
˝us
);

144  
ªt
;

145 
	}
}

147 
ölöe
 
	$fio_˝u_cou¡
(
os_˝u_mask_t
 *
mask
)

149 
num_˝us
;

151 i‡(
	`p£t_öfo
(*
mask
, 
NULL
, &
num_˝us
, NULL) < 0)

154  
num_˝us
;

155 
	}
}

157 
ölöe
 
	$fio_˝u£t_öô
(
os_˝u_mask_t
 *
mask
)

159 i‡(
	`p£t_¸óã
(
mask
) < 0)

163 
	}
}

165 
ölöe
 
	$fio_˝u£t_exô
(
os_˝u_mask_t
 *
mask
)

167 i‡(
	`p£t_de°roy
(*
mask
) < 0)

171 
	}
}

173 #i‚de‡
CONFIG_HAVE_GETTID


174 
ölöe
 
	$gëtid
()

176  
	`±hªad_£lf
();

177 
	}
}

183 
	#FIO_MAX_CPUS
 16384

	)

185 #ifde‡
MADV_FREE


186 
	#FIO_MADV_FREE
 
MADV_FREE


	)

	@os/os-windows-7.h

1 
	#FIO_MAX_CPUS
 512

	)

2 
	#FIO_CPU_MASK_STRIDE
 64

	)

3 
	#FIO_CPU_MASK_ROWS
 (
FIO_MAX_CPUS
 / 
FIO_CPU_MASK_STRIDE
)

	)

6 
uöt64_t
 
	mrow
[
FIO_CPU_MASK_ROWS
];

7 } 
	tos_˝u_mask_t
;

	@os/os-windows.h

1 #i‚de‡
FIO_OS_WINDOWS_H


2 
	#FIO_OS_WINDOWS_H


	)

4 
	#FIO_OS
 
os_wödows


	)

6 
	~<sys/ty≥s.h
>

7 
	~<sys/shm.h
>

8 
	~<sys/°©.h
>

9 
	~<î∫o.h
>

10 
	~<wösock2.h
>

11 
	~<wödows.h
>

12 
	~<pßpi.h
>

13 
	~<°dlib.h
>

15 
	~"../smÆloc.h
"

16 
	~"../debug.h
"

17 
	~"../fûe.h
"

18 
	~"../log.h
"

19 
	~"../lib/hweight.h
"

20 
	~"../o¶ib/°rˇ£°r.h
"

21 
	~"../lib/ty≥s.h
"

23 
	~"wödows/posix.h
"

24 
	~"os-wödows-7.h
"

26 #i‚de‡
PTHREAD_STACK_MIN


27 
	#PTHREAD_STACK_MIN
 65535

	)

30 
	#FIO_HAVE_ODIRECT


	)

31 
	#FIO_HAVE_CPU_AFFINITY


	)

32 
	#FIO_HAVE_CHARDEV_SIZE


	)

33 
	#FIO_HAVE_GETTID


	)

34 
	#FIO_EMULATED_MKDIR_TWO


	)

36 
	#FIO_PREFERRED_ENGINE
 "wödowßio"

	)

37 
	#FIO_PREFERRED_CLOCK_SOURCE
 
CS_CGETTIME


	)

38 
	#FIO_OS_PATH_SEPARATOR
 '\\'

	)

40 
	#OS_MAP_ANON
 
MAP_ANON


	)

42 
	#fio_sw≠16
(
x
Ë
	`_byãsw≠_ush‹t
(x)

	)

43 
	#fio_sw≠32
(
x
Ë
	`_byãsw≠_ul⁄g
(x)

	)

44 
	#fio_sw≠64
(
x
Ë
	`_byãsw≠_uöt64
(x)

	)

46 
	#_SC_PAGESIZE
 0x1

	)

47 
	#_SC_NPROCESSORS_ONLN
 0x2

	)

48 
	#_SC_PHYS_PAGES
 0x4

	)

50 
	#SA_RESTART
 0

	)

51 
	#SIGPIPE
 0

	)

58 
	#O_DIRECT
 0x1000000

	)

59 
	#O_SYNC
 0x2000000

	)

62 
	#POSIX_MADV_DONTNEED
 0

	)

63 
	#POSIX_MADV_SEQUENTIAL
 0

	)

64 
	#POSIX_MADV_RANDOM
 0

	)

66 
	#F_SETFL
 0x1

	)

67 
	#F_GETFL
 0x2

	)

68 
	#O_NONBLOCK
 
FIONBIO


	)

71 
	#OS_MSG_DONTWAIT
 0

	)

73 #i‚de‡
S_ISSOCK


74 
	#S_ISSOCK
(
x
Ë0

	)

77 
	#SIGCONT
 0

	)

78 
	#SIGUSR1
 1

	)

79 
	#SIGUSR2
 2

	)

80 
	#SIGKILL
 15

	)

82 
	tsig£t_t
;

83 
	tsigöfo_t
;

85 
	ssiga˘i⁄


87 (*
	mß_h™dÀr
)();

88 
sig£t_t
 
	mß_mask
;

89 
	mß_Êags
;

90 * (*
	mß_siga˘i⁄
)(, 
	msigöfo_t
 *, *);

93 
sysc⁄f
(
«me
);

95 
kûl
(
pid_t
 
pid
, 
sig
);

96 
pid_t
 
£tsid
();

97 
£tgid
(
gid_t
 
gid
);

98 
£tuid
(
uid_t
 
uid
);

99 
ni˚
(
ö¸
);

100 
siga˘i⁄
(
sig
, c⁄° siga˘i⁄ *
a˘
,

101 
siga˘i⁄
 *
ﬂ˘
);

102 
fsync
(
fûdes
);

103 
f‹k
();

104 
f˙é
(
fûdes
, 
cmd
, ...);

105 
fd©async
(
fûdes
);

106 
l°©
(c⁄° * 
∑th
, 
°©
 * 
buf
);

107 
uid_t
 
gëeuid
();

108 * 
˘ime_r
(c⁄° 
time_t
 *
t
, *
buf
);

109 
«no¶ìp
(c⁄° 
time•ec
 *
rqç
, time•e¯*
rmç
);

110 
ssize_t
 
¥ód
(
fûdes
, *
buf
, 
size_t
 
nbyã
, 
off_t
 
off£t
);

111 
ssize_t
 
pwrôe
(
fûdes
, c⁄° *
buf
, 
size_t
 
nbyã
,

112 
off_t
 
off£t
);

113 
HANDLE
 
wödows_h™dÀ_c⁄√˘i⁄
(HANDLE 
hjob
, 
sk
);

114 
HANDLE
 
wödows_¸óã_job
();

116 
ölöe
 
	$blockdev_size
(
fio_fûe
 *
f
, *
byãs
)

118 
rc
 = 0;

119 
HANDLE
 
hFûe
;

120 
GET_LENGTH_INFORMATION
 
öfo
;

121 
DWORD
 
outByãs
;

123 i‡(
f
->
hFûe
 =
NULL
) {

124 
hFûe
 = 
	`Cª©eFûe
(
f
->
fûe_«me
, 
GENERIC_READ
, 
FILE_SHARE_READ
 | 
FILE_SHARE_WRITE
,

125 
NULL
, 
OPEN_EXISTING
, 0, NULL);

127 
hFûe
 = 
f
->hFile;

130 i‡(
	`Devi˚IoC⁄åﬁ
(
hFûe
, 
IOCTL_DISK_GET_LENGTH_INFO
, 
NULL
, 0, &
öfo
, (öfo), &
outByãs
, NULL))

131 *
byãs
 = 
öfo
.
Lígth
.
QuadP¨t
;

133 
rc
 = 
EIO
;

137 i‡(
hFûe
 !
INVALID_HANDLE_VALUE
 && 
f
->hFûê=
NULL
)

138 
	`Clo£H™dÀ
(
hFûe
);

140  
rc
;

141 
	}
}

143 
ölöe
 
	$ch¨dev_size
(
fio_fûe
 *
f
, *
byãs
)

145  
	`blockdev_size
(
f
, 
byãs
);

146 
	}
}

148 
ölöe
 
	$blockdev_övÆid©e_ˇche
(
fio_fûe
 *
f
)

150  
ENOTSUP
;

151 
	}
}

153 
ölöe
 
	$os_phys_mem
()

155 
∑gesize
, 
∑ges
;

157 
∑gesize
 = 
	`sysc⁄f
(
_SC_PAGESIZE
);

158 
∑ges
 = 
	`sysc⁄f
(
_SC_PHYS_PAGES
);

159 i‡(
∑ges
 =-1 || 
∑gesize
 == -1)

162  (Ë
∑ges
 * (Ë
∑gesize
;

163 
	}
}

165 #i‚de‡
CONFIG_HAVE_GETTID


166 
ölöe
 
	$gëtid
()

168  
	`GëCuºítThªadId
();

169 
	}
}

172 
ölöe
 
	$öô_øndom_£eds
(
uöt64_t
 *
ønd_£eds
, 
size
)

174 
HCRYPTPROV
 
hCry±Prov
;

176 i‡(!
	`Cry±AcquúeC⁄ãxt
(&
hCry±Prov
, 
NULL
, NULL, 
PROV_RSA_FULL
, 
CRYPT_VERIFYCONTEXT
))

178 
î∫o
 = 
	`GëLa°Eº‹
();

179 
	`log_îr
("Cry±AcquúeC⁄ãxt(ËÁûed:Éº‹ %d\n", 
î∫o
);

183 i‡(!
	`Cry±GíR™dom
(
hCry±Prov
, 
size
, (
BYTE
*)
ønd_£eds
)) {

184 
î∫o
 = 
	`GëLa°Eº‹
();

185 
	`log_îr
("Cry±GíR™dom(ËÁûed,Éº‹ %d\n", 
î∫o
);

186 
	`Cry±Rñó£C⁄ãxt
(
hCry±Prov
, 0);

190 
	`Cry±Rñó£C⁄ãxt
(
hCry±Prov
, 0);

192 
	}
}

194 
ölöe
 
	$fio_£t_sched_idÀ
()

197  (
	`SëThªadPri‹ôy
(
	`GëCuºítThªad
(), 
THREAD_PRIORITY_IDLE
))? 0 : -1;

198 
	}
}

200 
ölöe
 
	$fio_mkdú
(c⁄° *
∑th
, 
mode_t
 
mode
) {

201 
DWORD
 
dwAâr
 = 
	`GëFûeAâribuãsA
(
∑th
);

203 i‡(
dwAâr
 !
INVALID_FILE_ATTRIBUTES
 &&

204 (
dwAâr
 & 
FILE_ATTRIBUTE_DIRECTORY
)) {

205 
î∫o
 = 
EEXIST
;

209 i‡(
	`Cª©eDúe˘‹yA
(
∑th
, 
NULL
) == 0) {

211 i‡(
	`°rcmp
(
∑th
, "\\\\.") == 0) {

212 
î∫o
 = 
EEXIST
;

215 
î∫o
 = 
	`wö_to_posix_îr‹
(
	`GëLa°Eº‹
());

220 
	}
}

222 
	#FIO_HAVE_CPU_ONLINE_SYSCONF


	)

223 
˝us_⁄löe
();

225 
fú°_£t_˝u
(
os_˝u_mask_t
 *
˝umask
);

226 
fio_£èfföôy
(
pid
, 
os_˝u_mask_t
 
˝umask
);

227 
fio_˝u£t_öô
(
os_˝u_mask_t
 *
mask
);

228 
fio_gëafföôy
(
pid
, 
os_˝u_mask_t
 *
mask
);

229 
fio_˝u_˛ór
(
os_˝u_mask_t
 *
mask
, 
˝u
);

230 
fio_˝u_£t
(
os_˝u_mask_t
 *
mask
, 
˝u
);

231 
fio_˝u_is£t
(
os_˝u_mask_t
 *
mask
, 
˝u
);

232 
fio_˝u_cou¡
(
os_˝u_mask_t
 *
mask
);

233 
fio_˝u£t_exô
(
os_˝u_mask_t
 *
mask
);

	@os/os.h

1 #i‚de‡
FIO_OS_H


2 
	#FIO_OS_H


	)

4 
	~<sys/ty≥s.h
>

5 
	~<sys/sockë.h
>

6 
	~<f˙é.h
>

7 
	~<±hªad.h
>

8 
	~<uni°d.h
>

9 
	~<°dlib.h
>

10 
	~<î∫o.h
>

12 
	~"../¨ch/¨ch.h
"

13 
	~"../lib/ty≥s.h
"

16 
	mos_löux
 = 1,

17 
	mos_aix
,

18 
	mos_‰ìbsd
,

19 
	mos_hpux
,

20 
	mos_mac
,

21 
	mos_√tbsd
,

22 
	mos_›íbsd
,

23 
	mos_sﬁ¨is
,

24 
	mos_wödows
,

25 
	mos_™droid
,

26 
	mos_døg⁄Êy
,

28 
	mos_ƒ
,

32 
	mCPU_ARM64_CRC32C
,

33 } 
	t˝u_„©uªs
;

36 #i‡
deföed
(
__löux__
)

37 
	~"os-löux.h
"

38 #ñi‡
deföed
(
__FªeBSD__
)

39 
	~"os-‰ìbsd.h
"

40 #ñi‡
deföed
(
__O≥nBSD__
)

41 
	~"os-›íbsd.h
"

42 #ñi‡
deföed
(
__NëBSD__
)

43 
	~"os-√tbsd.h
"

44 #ñi‡
deföed
(
__sun__
)

45 
	~"os-sﬁ¨is.h
"

46 #ñi‡
deföed
(
__APPLE__
)

47 
	~"os-mac.h
"

48 #ñi‡
deföed
(
_AIX
)

49 
	~"os-aix.h
"

50 #ñi‡
deföed
(
__hpux
)

51 
	~"os-hpux.h
"

52 #ñi‡
deföed
(
WIN32
)

53 
	~"os-wödows.h
"

54 #ñi‡
deföed
 (
__Døg⁄Fly__
)

55 
	~"os-døg⁄Êy.h
"

60 #i‚de‡
EDQUOT


61 
	#EDQUOT
 
EIO


	)

64 #ifde‡
CONFIG_POSIXAIO


65 
	~<aio.h
>

66 #i‚de‡
FIO_OS_HAVE_AIOCB_TYPEDEF


67 
aiocb
 
	tos_aiocb_t
;

71 #i‚de‡
CONFIG_STRSEP


72 
	~"../o¶ib/°r£p.h
"

75 #i‚de‡
CONFIG_STRLCAT


76 
	~"../o¶ib/°æˇt.h
"

80 #ifde‡
MSG_DONTWAIT


81 
	#OS_MSG_DONTWAIT
 
MSG_DONTWAIT


	)

84 #i‚de‡
POSIX_FADV_DONTNEED


85 
	#POSIX_FADV_DONTNEED
 (0)

	)

86 
	#POSIX_FADV_SEQUENTIAL
 (0)

	)

87 
	#POSIX_FADV_RANDOM
 (0)

	)

88 
	#POSIX_FADV_NORMAL
 (0)

	)

91 #i‚de‡
FIO_HAVE_CPU_AFFINITY


92 
	#fio_˝u_˛ór
(
mask
, 
˝u
Ëdÿ{ } 0)

	)

93 
	tos_˝u_mask_t
;

95 
ölöe
 
	$fio_£èfföôy
(
pid
, 
os_˝u_mask_t
 
˝umask
)

98 
	}
}

100 
ölöe
 
	$fio_gëafföôy
(
pid
, 
os_˝u_mask_t
 *
˝umask
)

103 
	}
}

105 
ölöe
 
	$fio_˝u£t_exô
(
os_˝u_mask_t
 *
mask
)

108 
	}
}

110 
ölöe
 
	$fio_˝us_•lô
(
os_˝u_mask_t
 *
mask
, 
˝u_ödex
)

113 
	}
}

115 
fio_˝us_•lô
(
os_˝u_mask_t
 *
mask
, 
˝u
);

118 #i‚de‡
FIO_HAVE_IOPRIO_CLASS


119 
	#i›rio_vÆue_is_˛ass_π
(
¥io
Ë(
Ál£
)

	)

120 
	#IOPRIO_MIN_PRIO_CLASS
 0

	)

121 
	#IOPRIO_MAX_PRIO_CLASS
 0

	)

123 #i‚de‡
FIO_HAVE_IOPRIO


124 
	#i›rio_vÆue
(
¥io˛ass
, 
¥io
Ë(0)

	)

125 
	#i›rio_£t
(
which
, 
who
, 
¥io˛ass
, 
¥io
Ë(0)

	)

126 
	#IOPRIO_MIN_PRIO
 0

	)

127 
	#IOPRIO_MAX_PRIO
 0

	)

130 #i‚de‡
FIO_HAVE_ODIRECT


131 
	#OS_O_DIRECT
 0

	)

133 
	#OS_O_DIRECT
 
O_DIRECT


	)

136 #ifde‡
OS_O_ATOMIC


137 
	#FIO_O_ATOMIC
 
OS_O_ATOMIC


	)

139 
	#FIO_O_ATOMIC
 0

	)

142 #i‚de‡
FIO_HAVE_HUGETLB


143 
	#SHM_HUGETLB
 0

	)

144 
	#MAP_HUGETLB
 0

	)

145 #i‚de‡
FIO_HUGE_PAGE


146 
	#FIO_HUGE_PAGE
 0

	)

149 #i‚de‡
FIO_HUGE_PAGE


150 
	#FIO_HUGE_PAGE
 4194304

	)

154 #i‚de‡
FIO_HAVE_MMAP_HUGE


155 
	#MAP_HUGETLB
 0

	)

158 #i‚de‡
FIO_O_NOATIME


159 
	#FIO_O_NOATIME
 0

	)

162 #i‚de‡
OS_RAND_MAX


163 
	#OS_RAND_MAX
 
RAND_MAX


	)

166 #i‚de‡
FIO_PREFERRED_ENGINE


167 
	#FIO_PREFERRED_ENGINE
 "psync"

	)

170 #i‚de‡
FIO_OS_PATH_SEPARATOR


171 
	#FIO_OS_PATH_SEPARATOR
 '/'

	)

174 #i‚de‡
FIO_PREFERRED_CLOCK_SOURCE


175 #ifde‡
CONFIG_CLOCK_GETTIME


176 
	#FIO_PREFERRED_CLOCK_SOURCE
 
CS_CGETTIME


	)

178 
	#FIO_PREFERRED_CLOCK_SOURCE
 
CS_GTOD


	)

182 #i‚de‡
CONFIG_SOCKLEN_T


183 
	tsockÀn_t
;

186 #i‚de‡
FIO_OS_HAS_CTIME_R


187 
	#os_˘ime_r
(
x
, 
y
, 
z
Ë(Ë
	`˘ime_r
((x), (y))

	)

190 #ifde‡
FIO_USE_GENERIC_SWAP


191 
ölöe
 
uöt16_t
 
	$fio_sw≠16
(
uöt16_t
 
vÆ
)

193  (
vÆ
 << 8) | (val >> 8);

194 
	}
}

196 
ölöe
 
uöt32_t
 
	$fio_sw≠32
(
uöt32_t
 
vÆ
)

198 
vÆ
 = ((val & 0xff00ff00UL) >> 8) | ((val & 0x00ff00ffUL) << 8);

200  (
vÆ
 >> 16) | (val << 16);

201 
	}
}

203 
ölöe
 
uöt64_t
 
	$fio_sw≠64
(
uöt64_t
 
vÆ
)

205 
vÆ
 = ((val & 0xff00ff00ff00ff00ULL) >> 8) |

206 ((
vÆ
 & 0x00ff00ff00ff00ffULL) << 8);

207 
vÆ
 = ((val & 0xffff0000ffff0000ULL) >> 16) |

208 ((
vÆ
 & 0x0000ffff0000ffffULL) << 16);

210  (
vÆ
 >> 32) | (val << 32);

211 
	}
}

214 #i‚de‡
FIO_HAVE_BYTEORDER_FUNCS


215 #ifde‡
CONFIG_LITTLE_ENDIAN


216 
	#__be16_to_˝u
(
x
Ë
	`fio_sw≠16
(x)

	)

217 
	#__be32_to_˝u
(
x
Ë
	`fio_sw≠32
(x)

	)

218 
	#__be64_to_˝u
(
x
Ë
	`fio_sw≠64
(x)

	)

219 
	#__À16_to_˝u
(
x
Ë(x)

	)

220 
	#__À32_to_˝u
(
x
Ë(x)

	)

221 
	#__À64_to_˝u
(
x
Ë(x)

	)

222 
	#__˝u_to_be16
(
x
Ë
	`fio_sw≠16
(x)

	)

223 
	#__˝u_to_be32
(
x
Ë
	`fio_sw≠32
(x)

	)

224 
	#__˝u_to_be64
(
x
Ë
	`fio_sw≠64
(x)

	)

225 
	#__˝u_to_À16
(
x
Ë(x)

	)

226 
	#__˝u_to_À32
(
x
Ë(x)

	)

227 
	#__˝u_to_À64
(
x
Ë(x)

	)

229 
	#__be16_to_˝u
(
x
Ë(x)

	)

230 
	#__be32_to_˝u
(
x
Ë(x)

	)

231 
	#__be64_to_˝u
(
x
Ë(x)

	)

232 
	#__À16_to_˝u
(
x
Ë
	`fio_sw≠16
(x)

	)

233 
	#__À32_to_˝u
(
x
Ë
	`fio_sw≠32
(x)

	)

234 
	#__À64_to_˝u
(
x
Ë
	`fio_sw≠64
(x)

	)

235 
	#__˝u_to_be16
(
x
Ë(x)

	)

236 
	#__˝u_to_be32
(
x
Ë(x)

	)

237 
	#__˝u_to_be64
(
x
Ë(x)

	)

238 
	#__˝u_to_À16
(
x
Ë
	`fio_sw≠16
(x)

	)

239 
	#__˝u_to_À32
(
x
Ë
	`fio_sw≠32
(x)

	)

240 
	#__˝u_to_À64
(
x
Ë
	`fio_sw≠64
(x)

	)

244 #ifde‡
FIO_INTERNAL


245 
	#be16_to_˝u
(
vÆ
) ({ \

246 
	`ty≥check
(
uöt16_t
, 
vÆ
); \

247 
	`__be16_to_˝u
(
vÆ
); \

248 })

	)

249 
	#be32_to_˝u
(
vÆ
) ({ \

250 
	`ty≥check
(
uöt32_t
, 
vÆ
); \

251 
	`__be32_to_˝u
(
vÆ
); \

252 })

	)

253 
	#be64_to_˝u
(
vÆ
) ({ \

254 
	`ty≥check
(
uöt64_t
, 
vÆ
); \

255 
	`__be64_to_˝u
(
vÆ
); \

256 })

	)

257 
	#À16_to_˝u
(
vÆ
) ({ \

258 
	`ty≥check
(
uöt16_t
, 
vÆ
); \

259 
	`__À16_to_˝u
(
vÆ
); \

260 })

	)

261 
	#À32_to_˝u
(
vÆ
) ({ \

262 
	`ty≥check
(
uöt32_t
, 
vÆ
); \

263 
	`__À32_to_˝u
(
vÆ
); \

264 })

	)

265 
	#À64_to_˝u
(
vÆ
) ({ \

266 
	`ty≥check
(
uöt64_t
, 
vÆ
); \

267 
	`__À64_to_˝u
(
vÆ
); \

268 })

	)

271 
	#˝u_to_be16
(
vÆ
) ({ \

272 
	`ty≥check
(
uöt16_t
, 
vÆ
); \

273 
	`__˝u_to_be16
(
vÆ
); \

274 })

	)

275 
	#˝u_to_be32
(
vÆ
) ({ \

276 
	`ty≥check
(
uöt32_t
, 
vÆ
); \

277 
	`__˝u_to_be32
(
vÆ
); \

278 })

	)

279 
	#˝u_to_be64
(
vÆ
) ({ \

280 
	`ty≥check
(
uöt64_t
, 
vÆ
); \

281 
	`__˝u_to_be64
(
vÆ
); \

282 })

	)

283 
	#˝u_to_À16
(
vÆ
) ({ \

284 
	`ty≥check
(
uöt16_t
, 
vÆ
); \

285 
	`__˝u_to_À16
(
vÆ
); \

286 })

	)

287 
	#˝u_to_À32
(
vÆ
) ({ \

288 
	`ty≥check
(
uöt32_t
, 
vÆ
); \

289 
	`__˝u_to_À32
(
vÆ
); \

290 })

	)

291 
	#˝u_to_À64
(
vÆ
) ({ \

292 
	`ty≥check
(
uöt64_t
, 
vÆ
); \

293 
	`__˝u_to_À64
(
vÆ
); \

294 })

	)

296 
	#FIO_DEF_CL_SIZE
 128

	)

298 
ölöe
 
	$os_ˇche_löe_size
()

300 #ifde‡
FIO_HAVE_CL_SIZE


301 
ªt
 = 
	`¨ch_ˇche_löe_size
();

303 i‡(
ªt
 <= 0)

304  
FIO_DEF_CL_SIZE
;

306  
ªt
;

308  
FIO_DEF_CL_SIZE
;

310 
	}
}

312 #ifde‡
FIO_USE_GENERIC_BDEV_SIZE


313 
ölöe
 
	$blockdev_size
(
fio_fûe
 *
f
, *
byãs
)

315 
off_t
 
íd
;

317 *
byãs
 = 0;

319 
íd
 = 
	`l£ek
(
f
->
fd
, 0, 
SEEK_END
);

320 i‡(
íd
 < 0)

321  
î∫o
;

323 *
byãs
 = 
íd
;

325 
	}
}

328 #ifde‡
FIO_USE_GENERIC_INIT_RANDOM_STATE


329 
ölöe
 
	$öô_øndom_£eds
(
uöt64_t
 *
ønd_£eds
, 
size
)

331 
fd
;

333 
fd
 = 
	`›í
("/dev/uøndom", 
O_RDONLY
);

334 i‡(
fd
 == -1) {

338 i‡(
	`ªad
(
fd
, 
ønd_£eds
, 
size
) < size) {

339 
	`˛o£
(
fd
);

343 
	`˛o£
(
fd
);

345 
	}
}

348 #i‚de‡
FIO_HAVE_FS_STAT


349 
ölöe
 
	$gë_fs_‰ì_size
(c⁄° *
∑th
)

352 
	}
}

355 #i‚de‡
FIO_HAVE_CPU_ONLINE_SYSCONF


356 
ölöe
 
	$˝us_⁄löe
()

358  
	`sysc⁄f
(
_SC_NPROCESSORS_ONLN
);

359 
	}
}

362 #i‚de‡
CPU_COUNT


363 #ifde‡
FIO_HAVE_CPU_AFFINITY


364 
ölöe
 
	$CPU_COUNT
(
os_˝u_mask_t
 *
mask
)

366 
max_˝us
 = 
	`˝us_⁄löe
();

367 
ƒ_˝us
, 
i
;

369 
i
 = 0, 
ƒ_˝us
 = 0; i < 
max_˝us
; i++)

370 i‡(
	`fio_˝u_is£t
(
mask
, 
i
))

371 
ƒ_˝us
++;

373  
ƒ_˝us
;

374 
	}
}

378 #i‚de‡
FIO_HAVE_GETTID


379 #i‚de‡
CONFIG_HAVE_GETTID


380 
ölöe
 
	$gëtid
()

382  
	`gëpid
();

383 
	}
}

387 #i‚de‡
FIO_HAVE_SHM_ATTACH_REMOVED


388 
ölöe
 
	$shm_©èch_to_›í_ªmoved
()

391 
	}
}

394 #i‚de‡
FIO_HAVE_NATIVE_FALLOCATE


395 
ölöe
 
boﬁ
 
	$fio_ÁŒoˇã
(
fio_fûe
 *
f
, 
uöt64_t
 
off£t
, uöt64_à
Àn
)

397 
î∫o
 = 
ENOSYS
;

398  
Ál£
;

399 
	}
}

402 #i‡
deföed
(
CONFIG_POSIX_FALLOCATE
Ë|| deföed(
FIO_HAVE_NATIVE_FALLOCATE
)

403 
	#FIO_HAVE_DEFAULT_FALLOCATE


	)

406 #i‚de‡
FIO_HAVE_CPU_HAS


407 
ölöe
 
boﬁ
 
	$os_˝u_has
(
˝u_„©uªs
 
„©uª
)

409  
Ál£
;

410 
	}
}

413 #i‚de‡
FIO_EMULATED_MKDIR_TWO


414 
	#fio_mkdú
(
∑th
, 
mode
Ë
	`mkdú
’©h, mode)

	)

417 #ifde‡
_SC_CLK_TCK


418 
ölöe
 
	$os_˛k_tck
(*
˛k_tck
)

420 *
˛k_tck
 = 
	`sysc⁄f
(
_SC_CLK_TCK
);

421 
	}
}

423 
os_˛k_tck
(*
˛k_tck
);

	@os/windows/cpu-affinity.c

1 
	~"os/os.h
"

3 
	~<wödows.h
>

6 
	$˝us_⁄löe
()

8  
	`GëA˘ivePro˚ss‹Cou¡
(
ALL_PROCESSOR_GROUPS
);

9 
	}
}

11 
	$¥öt_mask
(
os_˝u_mask_t
 *
˝umask
)

13 
i
 = 0; i < 
FIO_CPU_MASK_ROWS
; i++)

14 
	`d¥öt
(
FD_PROCESS
, "˝umask[%d]=%" 
PRIu64
 "\n", 
i
, 
˝umask
->
row
[i]);

15 
	}
}

19 
	$fú°_£t_˝u
(
os_˝u_mask_t
 *
˝umask
)

21 
˝us_off£t
, 
mask_fú°_˝u
, 
row
;

23 
˝us_off£t
 = 0;

24 
row
 = 0;

25 
mask_fú°_˝u
 = -1;

26 
mask_fú°_˝u
 < 0 && 
row
 < 
FIO_CPU_MASK_ROWS
) {

27 
row_fú°_˝u
;

29 
row_fú°_˝u
 = 
	`__buûtö_ff¶l
(
˝umask
->
row
[row]) - 1;

30 
	`d¥öt
(
FD_PROCESS
, "row_fú°_˝u=%d cpumask->row[%d]=%" 
PRIu64
 "\n",

31 
row_fú°_˝u
, 
row
, 
˝umask
->row[row]);

32 i‡(
row_fú°_˝u
 > -1) {

33 
mask_fú°_˝u
 = 
˝us_off£t
 + 
row_fú°_˝u
;

34 
	`d¥öt
(
FD_PROCESS
, "first set cpu in mask isát index %d\n",

35 
mask_fú°_˝u
);

37 
˝us_off£t
 +
FIO_CPU_MASK_STRIDE
;

38 
row
++;

42  
mask_fú°_˝u
;

43 
	}
}

47 
	$œ°_£t_˝u
(
os_˝u_mask_t
 *
˝umask
)

49 
˝us_off£t
, 
mask_œ°_˝u
, 
row
;

51 
˝us_off£t
 = (
FIO_CPU_MASK_ROWS
 - 1Ë* 
FIO_CPU_MASK_STRIDE
;

52 
row
 = 
FIO_CPU_MASK_ROWS
 - 1;

53 
mask_œ°_˝u
 = -1;

54 
mask_œ°_˝u
 < 0 && 
row
 >= 0) {

55 
row_œ°_˝u
;

57 i‡(
˝umask
->
row
[row] == 0)

58 
row_œ°_˝u
 = -1;

60 
uöt64_t
 
tmp
 = 
˝umask
->
row
[row];

62 
row_œ°_˝u
 = 0;

63 
tmp
 >>= 1)

64 
row_œ°_˝u
++;

67 
	`d¥öt
(
FD_PROCESS
, "row_œ°_˝u=%d cpumask->row[%d]=%" 
PRIu64
 "\n",

68 
row_œ°_˝u
, 
row
, 
˝umask
->row[row]);

69 i‡(
row_œ°_˝u
 > -1) {

70 
mask_œ°_˝u
 = 
˝us_off£t
 + 
row_œ°_˝u
;

71 
	`d¥öt
(
FD_PROCESS
, "last set cpu in mask isát index %d\n",

72 
mask_œ°_˝u
);

74 
˝us_off£t
 -
FIO_CPU_MASK_STRIDE
;

75 
row
--;

79  
mask_œ°_˝u
;

80 
	}
}

82 
	$mask_to_group_mask
(
os_˝u_mask_t
 *
˝umask
, *
¥o˚ss‹_group
, 
uöt64_t
 *
afföôy_mask
)

84 
WORD
 
⁄löe_groups
, 
group
, 
group_size
;

85 
boﬁ
 
found
;

86 
˝us_off£t
, 
£¨ch_˝u
, 
œ°_˝u
, 
bô_off£t
, 
row
, 
íd
;

87 
uöt64_t
 
group_˝umask
;

89 
£¨ch_˝u
 = 
	`fú°_£t_˝u
(
˝umask
);

90 i‡(
£¨ch_˝u
 < 0) {

91 
	`log_öfo
("CPU mask doesn't setány CPUs\n");

96 
⁄löe_groups
 = 
	`GëA˘ivePro˚ss‹GroupCou¡
();

97 
group
 = 0;

98 
found
 = 
Ál£
;

99 
˝us_off£t
 = 0;

100 
group_size
 = 0;

101 !
found
 && 
group
 < 
⁄löe_groups
) {

102 
group_size
 = 
	`GëA˘ivePro˚ss‹Cou¡
(
group
);

103 
	`d¥öt
(
FD_PROCESS
, "group=%d group_start=%d group_size=%u search_cpu=%d\n",

104 
group
, 
˝us_off£t
, 
group_size
, 
£¨ch_˝u
);

105 i‡(
˝us_off£t
 + 
group_size
 > 
£¨ch_˝u
)

106 
found
 = 
åue
;

108 
˝us_off£t
 +
group_size
;

109 
group
++;

113 i‡(!
found
) {

114 
	`log_îr
("CPU mask containsÖrocessor beyondÜastáctiveÖrocessor index (%d)\n",

115 
˝us_off£t
 - 1);

116 
	`¥öt_mask
(
˝umask
);

121 
œ°_˝u
 = 
	`œ°_£t_˝u
(
˝umask
);

122 i‡(
œ°_˝u
 > (
˝us_off£t
 + 
group_size
 - 1)) {

123 
	`log_öfo
("CPU mask cannot bind CPUs (e.g. %d, %d)Åhatáre "

124 "ö dif„ª¡Öro˚ss‹ groups\n", 
£¨ch_˝u
,

125 
œ°_˝u
);

126 
	`¥öt_mask
(
˝umask
);

131 
row
 = 
˝us_off£t
 / 
FIO_CPU_MASK_STRIDE
;

132 
bô_off£t
 = 
˝us_off£t
 % 
FIO_CPU_MASK_STRIDE
;

133 
group_˝umask
 = 
˝umask
->
row
[row] >> 
bô_off£t
;

134 
íd
 = 
bô_off£t
 + 
group_size
;

135 i‡(
íd
 > 
FIO_CPU_MASK_STRIDE
 && (
row
 + 1 < 
FIO_CPU_MASK_ROWS
)) {

137 
√eded
, 
√eded_shi·
, 
√eded_mask_shi·
;

138 
uöt64_t
 
√eded_mask
;

140 
√eded
 = 
íd
 - 
FIO_CPU_MASK_STRIDE
;

141 
√eded_shi·
 = 
FIO_CPU_MASK_STRIDE
 - 
bô_off£t
;

142 
√eded_mask_shi·
 = 
FIO_CPU_MASK_STRIDE
 - 
√eded
;

143 
√eded_mask
 = (
uöt64_t
)-1 >> 
√eded_mask_shi·
;

144 
	`d¥öt
(
FD_PROCESS
,

145 "bô_off£t=%dÉnd=%dÇìded=%dÇìded_shi·=%dÇìded_mask=%" 
PRIu64
 "needed_mask_shift=%d\n",

146 
bô_off£t
, 
íd
, 
√eded
, 
√eded_shi·
, 
√eded_mask
,

147 
√eded_mask_shi·
);

148 
group_˝umask
 |(
˝umask
->
row
[row + 1] & 
√eded_mask
Ë<< 
√eded_shi·
;

150 
group_˝umask
 &(
uöt64_t
)-1 >> (
FIO_CPU_MASK_STRIDE
 - 
group_size
);

153 
	`d¥öt
(
FD_PROCESS
, "Rëu∫ög group=%d group_mask=%" 
PRIu64
 "\n",

154 
group
, 
group_˝umask
);

155 *
¥o˚ss‹_group
 = 
group
;

156 *
afföôy_mask
 = 
group_˝umask
;

159 
	}
}

161 
	$fio_£èfföôy
(
pid
, 
os_˝u_mask_t
 
˝umask
)

163 
HANDLE
 
h™dÀ
 = 
NULL
;

164 
group
, 
ªt
;

165 
uöt64_t
 
group_mask
 = 0;

166 
GROUP_AFFINITY
 
√w_group_afföôy
;

168 
ªt
 = -1;

170 i‡(
	`mask_to_group_mask
(&
˝umask
, &
group
, &
group_mask
) != 0)

171 
îr
;

173 
h™dÀ
 = 
	`O≥nThªad
(
THREAD_QUERY_INFORMATION
 | 
THREAD_SET_INFORMATION
,

174 
TRUE
, 
pid
);

175 i‡(
h™dÀ
 =
NULL
) {

176 
	`log_îr
("fio_£èfföôy: faûedÅÿgë h™dÀ f‹Öid %d\n", 
pid
);

177 
îr
;

184 
√w_group_afföôy
.
Mask
 = (
KAFFINITY
Ë
group_mask
;

185 
√w_group_afföôy
.
Group
 = 
group
;

186 
√w_group_afföôy
.
Re£rved
[0] = 0;

187 
√w_group_afföôy
.
Re£rved
[1] = 0;

188 
√w_group_afföôy
.
Re£rved
[2] = 0;

189 i‡(
	`SëThªadGroupAfföôy
(
h™dÀ
, &
√w_group_afföôy
, 
NULL
) != 0)

190 
ªt
 = 0;

192 
	`log_îr
("fio_£èfföôy: faûedÅÿ£àthªadáfföôy (pid %d, grou∞%d, mask %" 
PRIx64
 ", GetLastError=%lu)\n",

193 
pid
, 
group
, 
group_mask
, 
	`GëLa°Eº‹
());

194 
îr
;

197 
îr
:

198 i‡(
h™dÀ
)

199 
	`Clo£H™dÀ
(
h™dÀ
);

200  
ªt
;

201 
	}
}

203 
	$˝u_to_row_off£t
(
˝u
, *
row
, *
off£t
)

205 *
row
 = 
˝u
 / 
FIO_CPU_MASK_STRIDE
;

206 *
off£t
 = 
˝u
 << 
FIO_CPU_MASK_STRIDE
 * *
row
;

207 
	}
}

209 
	$fio_˝u£t_öô
(
os_˝u_mask_t
 *
mask
)

211 
i
 = 0; i < 
FIO_CPU_MASK_ROWS
; i++)

212 
mask
->
row
[
i
] = 0;

214 
	}
}

221 
	$fio_gëafföôy
(
pid
, 
os_˝u_mask_t
 *
mask
)

223 
ªt
;

224 
row
, 
off£t
, 
íd
, 
group
, 
group_size
, 
group_°¨t_˝u
;

225 
DWORD_PTR
 
¥o˚ss_mask
, 
sy°em_mask
;

226 
HANDLE
 
h™dÀ
;

227 
PUSHORT
 
cuºít_groups
;

228 
USHORT
 
group_cou¡
;

229 
WORD
 
⁄löe_groups
;

231 
ªt
 = -1;

232 
cuºít_groups
 = 
NULL
;

233 
h™dÀ
 = 
	`O≥nPro˚ss
(
PROCESS_QUERY_INFORMATION
, 
TRUE
, 
pid
);

234 i‡(
h™dÀ
 =
NULL
) {

235 
	`log_îr
("fio_getaffinity: failedÅo get handle forÖid %d\n",

236 
pid
);

237 
îr
;

240 
group_cou¡
 = 16;

246 
cuºít_groups
 = 
	`mÆloc
(
group_cou¡
 * (
USHORT
));

247 i‡(!
cuºít_groups
) {

248 
	`log_îr
("fio_getaffinity: malloc failed\n");

249 
îr
;

251 i‡(!
	`GëPro˚ssGroupAfföôy
(
h™dÀ
, &
group_cou¡
, 
cuºít_groups
)) {

252 
	`log_îr
("%s: failedÅo get single groupáffinity forÖid %d (%lu)\n",

253 
__func__
, 
pid
, 
	`GëLa°Eº‹
());

254 
îr
;

256 i‡(
group_cou¡
 > 1) {

257 
	`log_îr
("%s:Öid %d isássociated with %dÖrocess groups\n",

258 
__func__
, 
pid
, 
group_cou¡
);

259 
îr
;

261 i‡(!
	`GëPro˚ssAfföôyMask
(
h™dÀ
, &
¥o˚ss_mask
, &
sy°em_mask
)) {

262 
	`log_îr
("%s: GetProcessAffinityMask() failed forÖid %d\n",

263 
__func__
, 
pid
);

264 
îr
;

268 
⁄löe_groups
 = 
	`GëA˘ivePro˚ss‹GroupCou¡
();

269 i‡(
⁄löe_groups
 == 0) {

270 
	`log_îr
("fio_getaffinity:ÉrrorÑetrievingÅotalÖrocessor groups\n");

271 
îr
;

274 
group
 = 0;

275 
group_°¨t_˝u
 = 0;

276 
group_size
 = 0;

277 
	`d¥öt
(
FD_PROCESS
, "current_groups=%d group_count=%d\n",

278 
cuºít_groups
[0], 
group_cou¡
);

279 
åue
) {

280 
group_size
 = 
	`GëA˘ivePro˚ss‹Cou¡
(
group
);

281 i‡(
group_size
 == 0) {

282 
	`log_îr
("fio_getaffinity:ÉrrorÑetrieving size of "

283 "¥o˚ss‹ grou∞%d\n", 
group
);

284 
îr
;

285 } i‡(
group
 >
cuºít_groups
[0] || grou∞>
⁄löe_groups
)

288 
group_°¨t_˝u
 +
group_size
;

289 
group
++;

293 i‡(
group
 !
cuºít_groups
[0]) {

294 
	`log_îr
("fio_getaffinity: couldÇot findÖrocessor group %d\n",

295 
cuºít_groups
[0]);

296 
îr
;

299 
	`d¥öt
(
FD_PROCESS
, "group_start_cpu=%d, group size=%u\n",

300 
group_°¨t_˝u
, 
group_size
);

301 i‡((
group_°¨t_˝u
 + 
group_size
Ë>
FIO_MAX_CPUS
) {

302 
	`log_îr
("fio_getaffinity failed: current CPUáffinity (group "

304 "bey⁄d mask'†highe° CPU (%d)\n", 
group
,

305 
group_°¨t_˝u
, 
group_size
, 
FIO_MAX_CPUS
);

306 
îr
;

309 
	`fio_˝u£t_öô
(
mask
);

310 
	`˝u_to_row_off£t
(
group_°¨t_˝u
, &
row
, &
off£t
);

311 
mask
->
row
[row] = 
¥o˚ss_mask
;

312 
mask
->
row
[row] <<
off£t
;

313 
íd
 = 
off£t
 + 
group_size
;

314 i‡(
íd
 > 
FIO_CPU_MASK_STRIDE
) {

315 
√eded
;

316 
uöt64_t
 
√eded_mask
;

318 
√eded
 = 
FIO_CPU_MASK_STRIDE
 - 
íd
;

319 
√eded_mask
 = (
uöt64_t
)-1 >> (
FIO_CPU_MASK_STRIDE
 - 
√eded
);

320 
row
++;

321 
mask
->
row
[row] = 
¥o˚ss_mask
;

322 
mask
->
row
[row] >>
√eded
;

323 
mask
->
row
[row] &
√eded_mask
;

325 
ªt
 = 0;

327 
îr
:

328 i‡(
h™dÀ
)

329 
	`Clo£H™dÀ
(
h™dÀ
);

330 i‡(
cuºít_groups
)

331 
	`‰ì
(
cuºít_groups
);

333  
ªt
;

334 
	}
}

336 
	$fio_˝u_˛ór
(
os_˝u_mask_t
 *
mask
, 
˝u
)

338 
row
, 
off£t
;

339 
	`˝u_to_row_off£t
(
˝u
, &
row
, &
off£t
);

341 
mask
->
row
[row] &~(1ULL << 
off£t
);

342 
	}
}

344 
	$fio_˝u_£t
(
os_˝u_mask_t
 *
mask
, 
˝u
)

346 
row
, 
off£t
;

347 
	`˝u_to_row_off£t
(
˝u
, &
row
, &
off£t
);

349 
mask
->
row
[row] |1ULL << 
off£t
;

350 
	}
}

352 
	$fio_˝u_is£t
(
os_˝u_mask_t
 *
mask
, 
˝u
)

354 
row
, 
off£t
;

355 
	`˝u_to_row_off£t
(
˝u
, &
row
, &
off£t
);

357  (
mask
->
row
[row] & (1ULL << 
off£t
)) != 0;

358 
	}
}

360 
	$fio_˝u_cou¡
(
os_˝u_mask_t
 *
mask
)

362 
cou¡
 = 0;

364 
i
 = 0; i < 
FIO_CPU_MASK_ROWS
; i++)

365 
cou¡
 +
	`hweight64
(
mask
->
row
[
i
]);

367  
cou¡
;

368 
	}
}

370 
	$fio_˝u£t_exô
(
os_˝u_mask_t
 *
mask
)

373 
	}
}

	@os/windows/dlls.c

1 
	~"os/os.h
"

3 
	~<wödows.h
>

5 
	$os_˛k_tck
(*
˛k_tck
)

12 
möRes
, 
maxRes
, 
curRes
;

13 
HMODULE
 
lib
;

14 
FARPROC
 
quîyTimî
;

15 
FARPROC
 
£tTimî
;

17 i‡(!(
lib
 = 
	`LﬂdLibøry
(
	`TEXT
("ntdll.dll"))) ||

18 !(
quîyTimî
 = 
	`GëProcAddªss
(
lib
, "NtQueryTimerResolution")) ||

19 !(
£tTimî
 = 
	`GëProcAddªss
(
lib
, "NtSetTimerResolution"))) {

20 
	`d¥öt
(
FD_HELPERTHREAD
,

22 *
˛k_tck
 = 64;

24 
	`quîyTimî
(&
möRes
, &
maxRes
, &
curRes
);

25 
	`d¥öt
(
FD_HELPERTHREAD
,

27 
möRes
, 
maxRes
, 
curRes
);

30 
	`£tTimî
(
maxRes
, 1, &
curRes
);

31 *
˛k_tck
 = (Ë(10000000L / 
maxRes
);

33 
	}
}

	@os/windows/posix.c

6 
	~<¨∑/öë.h
>

7 
	~<√töë/ö.h
>

8 
	~<wödows.h
>

9 
	~<°ddef.h
>

10 
	~<°rög.h
>

11 
	~<°dlib.h
>

12 
	~<uni°d.h
>

13 
	~<dúít.h
>

14 
	~<±hªad.h
>

15 
	~<time.h
>

16 
	~<£m≠h‹e.h
>

17 
	~<sys/shm.h
>

18 
	~<sys/mm™.h
>

19 
	~<sys/uio.h
>

20 
	~<sys/ªsour˚.h
>

21 
	~<pﬁl.h
>

22 
	~<sys/waô.h
>

23 
	~<£tjmp.h
>

25 
	~"../os-wödows.h
"

26 
	~"../../lib/hweight.h
"

28 
mtime_sö˚_now
(
time•ec
 *);

29 
fio_gëtime
(
time•ec
 *, *);

31 
	$wö_to_posix_îr‹
(
DWORD
 
wöîr
)

33 
wöîr
) {

34 
ERROR_SUCCESS
:

36 
ERROR_FILE_NOT_FOUND
:

37  
ENOENT
;

38 
ERROR_PATH_NOT_FOUND
:

39  
ENOENT
;

40 
ERROR_ACCESS_DENIED
:

41  
EACCES
;

42 
ERROR_INVALID_HANDLE
:

43  
EBADF
;

44 
ERROR_NOT_ENOUGH_MEMORY
:

45  
ENOMEM
;

46 
ERROR_INVALID_DATA
:

47  
EINVAL
;

48 
ERROR_OUTOFMEMORY
:

49  
ENOMEM
;

50 
ERROR_INVALID_DRIVE
:

51  
ENODEV
;

52 
ERROR_NOT_SAME_DEVICE
:

53  
EXDEV
;

54 
ERROR_WRITE_PROTECT
:

55  
EROFS
;

56 
ERROR_BAD_UNIT
:

57  
ENODEV
;

58 
ERROR_NOT_READY
:

59  
EAGAIN
;

60 
ERROR_SHARING_VIOLATION
:

61  
EACCES
;

62 
ERROR_LOCK_VIOLATION
:

63  
EACCES
;

64 
ERROR_SHARING_BUFFER_EXCEEDED
:

65  
ENOLCK
;

66 
ERROR_HANDLE_DISK_FULL
:

67  
ENOSPC
;

68 
ERROR_NOT_SUPPORTED
:

69  
ENOSYS
;

70 
ERROR_FILE_EXISTS
:

71  
EEXIST
;

72 
ERROR_CANNOT_MAKE
:

73  
EPERM
;

74 
ERROR_INVALID_PARAMETER
:

75  
EINVAL
;

76 
ERROR_NO_PROC_SLOTS
:

77  
EAGAIN
;

78 
ERROR_BROKEN_PIPE
:

79  
EPIPE
;

80 
ERROR_OPEN_FAILED
:

81  
EIO
;

82 
ERROR_NO_MORE_SEARCH_HANDLES
:

83  
ENFILE
;

84 
ERROR_CALL_NOT_IMPLEMENTED
:

85  
ENOSYS
;

86 
ERROR_INVALID_NAME
:

87  
ENOENT
;

88 
ERROR_WAIT_NO_CHILDREN
:

89  
ECHILD
;

90 
ERROR_CHILD_NOT_COMPLETE
:

91  
EBUSY
;

92 
ERROR_DIR_NOT_EMPTY
:

93  
ENOTEMPTY
;

94 
ERROR_SIGNAL_REFUSED
:

95  
EIO
;

96 
ERROR_BAD_PATHNAME
:

97  
ENOENT
;

98 
ERROR_SIGNAL_PENDING
:

99  
EBUSY
;

100 
ERROR_MAX_THRDS_REACHED
:

101  
EAGAIN
;

102 
ERROR_BUSY
:

103  
EBUSY
;

104 
ERROR_ALREADY_EXISTS
:

105  
EEXIST
;

106 
ERROR_NO_SIGNAL_SENT
:

107  
EIO
;

108 
ERROR_FILENAME_EXCED_RANGE
:

109  
EINVAL
;

110 
ERROR_META_EXPANSION_TOO_LONG
:

111  
EINVAL
;

112 
ERROR_INVALID_SIGNAL_NUMBER
:

113  
EINVAL
;

114 
ERROR_THREAD_1_INACTIVE
:

115  
EINVAL
;

116 
ERROR_BAD_PIPE
:

117  
EINVAL
;

118 
ERROR_PIPE_BUSY
:

119  
EBUSY
;

120 
ERROR_NO_DATA
:

121  
EPIPE
;

122 
ERROR_MORE_DATA
:

123  
EAGAIN
;

124 
ERROR_DIRECTORY
:

125  
ENOTDIR
;

126 
ERROR_PIPE_CONNECTED
:

127  
EBUSY
;

128 
ERROR_NO_TOKEN
:

129  
EINVAL
;

130 
ERROR_PROCESS_ABORTED
:

131  
EFAULT
;

132 
ERROR_BAD_DEVICE
:

133  
ENODEV
;

134 
ERROR_BAD_USERNAME
:

135  
EINVAL
;

136 
ERROR_OPEN_FILES
:

137  
EAGAIN
;

138 
ERROR_ACTIVE_CONNECTIONS
:

139  
EAGAIN
;

140 
ERROR_DEVICE_IN_USE
:

141  
EBUSY
;

142 
ERROR_INVALID_AT_INTERRUPT_TIME
:

143  
EINTR
;

144 
ERROR_IO_DEVICE
:

145  
EIO
;

146 
ERROR_NOT_OWNER
:

147  
EPERM
;

148 
ERROR_END_OF_MEDIA
:

149  
ENOSPC
;

150 
ERROR_EOM_OVERFLOW
:

151  
ENOSPC
;

152 
ERROR_BEGINNING_OF_MEDIA
:

153  
ESPIPE
;

154 
ERROR_SETMARK_DETECTED
:

155  
ESPIPE
;

156 
ERROR_NO_DATA_DETECTED
:

157  
ENOSPC
;

158 
ERROR_POSSIBLE_DEADLOCK
:

159  
EDEADLOCK
;

160 
ERROR_CRC
:

161  
EIO
;

162 
ERROR_NEGATIVE_SEEK
:

163  
EINVAL
;

164 
ERROR_DISK_FULL
:

165  
ENOSPC
;

166 
ERROR_NOACCESS
:

167  
EFAULT
;

168 
ERROR_FILE_INVALID
:

169  
ENXIO
;

171 
	`log_îr
("fio: wödow†îr‹ %luÇŸ h™dÀd\n", 
wöîr
);

172  
EIO
;

175  
wöîr
;

176 
	}
}

178 
	$GëNumLogiˇlPro˚ss‹s
()

180 
SYSTEM_LOGICAL_PROCESSOR_INFORMATION
 *
¥o˚ss‹_öfo
 = 
NULL
;

181 
DWORD
 
Àn
 = 0;

182 
DWORD
 
num_¥o˚ss‹s
 = 0;

183 
DWORD
 
îr‹
 = 0;

184 
DWORD
 
i
;

186 !
	`GëLogiˇlPro˚ss‹Inf‹m©i⁄
(
¥o˚ss‹_öfo
, &
Àn
)) {

187 
îr‹
 = 
	`GëLa°Eº‹
();

188 i‡(
îr‹
 =
ERROR_INSUFFICIENT_BUFFER
)

189 
¥o˚ss‹_öfo
 = 
	`mÆloc
(
Àn
);

191 
	`log_îr
("Error: GetLogicalProcessorInformation failed: %lu\n",

192 
îr‹
);

196 i‡(
¥o˚ss‹_öfo
 =
NULL
) {

197 
	`log_îr
("Error: failedÅoállocate memory for GetLogicalProcessorInformation");

202 
i
 = 0; i < 
Àn
 / (
SYSTEM_LOGICAL_PROCESSOR_INFORMATION
); i++) {

203 i‡(
¥o˚ss‹_öfo
[
i
].
Rñ©i⁄shù
 =
Rñ©i⁄Pro˚ss‹C‹e
)

204 
num_¥o˚ss‹s
 +
	`hweight64
(
¥o˚ss‹_öfo
[
i
].
Pro˚ss‹Mask
);

207 
	`‰ì
(
¥o˚ss‹_öfo
);

208  
num_¥o˚ss‹s
;

209 
	}
}

211 
	$sysc⁄f
(
«me
)

213 
vÆ
 = -1;

214 
vÆ2
 = -1;

215 
SYSTEM_INFO
 
sysInfo
;

216 
MEMORYSTATUSEX
 
°©us
;

218 
«me
) {

219 
_SC_NPROCESSORS_ONLN
:

220 
vÆ
 = 
	`GëNumLogiˇlPro˚ss‹s
();

221 i‡(
vÆ
 == -1)

222 
	`log_îr
("sysconf(_SC_NPROCESSORS_ONLN) failed\n");

226 
_SC_PAGESIZE
:

227 
	`GëSy°emInfo
(&
sysInfo
);

228 
vÆ
 = 
sysInfo
.
dwPageSize
;

231 
_SC_PHYS_PAGES
:

232 
°©us
.
dwLígth
 = (status);

233 
vÆ2
 = 
	`sysc⁄f
(
_SC_PAGESIZE
);

234 i‡(
	`GlobÆMem‹ySètusEx
(&
°©us
Ë&& 
vÆ2
 != -1)

235 
vÆ
 = 
°©us
.
uŒTŸÆPhys
 / 
vÆ2
;

237 
	`log_îr
("sysconf(_SC_PHYS_PAGES) failed\n");

240 
	`log_îr
("sysc⁄f(%dËi†nŸ im∂emíãd\n", 
«me
);

244  
vÆ
;

245 
	}
}

247 *
	gdl_îr‹
 = 
NULL
;

249 
	$dl˛o£
(*
h™dÀ
)

251  !
	`FªeLibøry
((
HMODULE
)
h™dÀ
);

252 
	}
}

254 *
	$dl›í
(c⁄° *
fûe
, 
mode
)

256 
HMODULE
 
hMod
;

258 
hMod
 = 
	`LﬂdLibøry
(
fûe
);

259 i‡(
hMod
 =
INVALID_HANDLE_VALUE
)

260 
dl_îr‹
 = (*)"LoadLibrary failed";

262 
dl_îr‹
 = 
NULL
;

264  
hMod
;

265 
	}
}

267 *
	$dlsym
(*
h™dÀ
, c⁄° *
«me
)

269 
FARPROC
 
‚På
;

271 
‚På
 = 
	`GëProcAddªss
((
HMODULE
)
h™dÀ
, 
«me
);

272 i‡(
‚På
 =
NULL
)

273 
dl_îr‹
 = (*)"GetProcAddress failed";

275 
dl_îr‹
 = 
NULL
;

277  
‚På
;

278 
	}
}

280 *
	$dÀº‹
()

282  
dl_îr‹
;

283 
	}
}

286 
	$Time_tToSy°emTime
(
time_t
 
dosTime
, 
SYSTEMTIME
 *
sy°emTime
)

288 
FILETIME
 
utcFT
;

289 
LONGLONG
 
j™1970
;

290 
SYSTEMTIME
 
ãmpSy°emTime
;

292 
j™1970
 = 
	`I¡32x32To64
(
dosTime
, 10000000) + 116444736000000000;

293 
utcFT
.
dwLowD©eTime
 = (
DWORD
)
j™1970
;

294 
utcFT
.
dwHighD©eTime
 = 
j™1970
 >> 32;

296 
	`FûeTimeToSy°emTime
((
FILETIME
*)&
utcFT
, &
ãmpSy°emTime
);

297 
	`Sy°emTimeToTzS≥cificLoˇlTime
(
NULL
, &
ãmpSy°emTime
, 
sy°emTime
);

298 
	}
}

300 *
	$˘ime_r
(c⁄° 
time_t
 *
t
, *
buf
)

302 
SYSTEMTIME
 
sy°ime
;

303 c⁄° * c⁄° 
dayOfWìk
[] = { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

304 c⁄° * c⁄° 
m⁄thOfYór
[] = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };

306 
	`Time_tToSy°emTime
(*
t
, &
sy°ime
);

312 
	`¢¥ötf
(
buf
, 32, "%s %s %d %02d:%02d:%02d %04d\n",

313 
dayOfWìk
[
sy°ime
.
wDayOfWìk
 % 7],

314 
m⁄thOfYór
[(
sy°ime
.
wM⁄th
 - 1) % 12],

315 
sy°ime
.
wDay
, sy°ime.
wHour
, sy°ime.
wMöuã
,

316 
sy°ime
.
wSec⁄d
, sy°ime.
wYór
);

317  
buf
;

318 
	}
}

320 
	$gëtimeofday
(
timevÆ
 *
ª°ri˘
 
ç
, *ª°ri˘ 
tzp
)

322 
FILETIME
 
fûeTime
;

323 
uöt64_t
 
unix_time
, 
wödows_time
;

324 c⁄° 
uöt64_t
 
MILLISECONDS_BETWEEN_1601_AND_1970
 = 11644473600000;

327 ()
tzp
;

334 
	`GëSy°emTimeAsFûeTime
(&
fûeTime
);

335 
wödows_time
 = ((
uöt64_t
)
fûeTime
.
dwHighD©eTime
 << 32Ë+ fûeTime.
dwLowD©eTime
;

337 
unix_time
 = (((
wödows_time
)/10000Ë- 
MILLISECONDS_BETWEEN_1601_AND_1970
);

339 
ç
->
tv_£c
 = 
unix_time
 / 1000;

340 
ç
->
tv_u£c
 = (
unix_time
 % 1000) * 1000;

342 
	}
}

344 
	$siga˘i⁄
(
sig
, c⁄° 
siga˘i⁄
 *
a˘
, siga˘i⁄ *
ﬂ˘
)

346 
rc
 = 0;

347 (*
¥ev_h™dÀr
)();

349 
¥ev_h™dÀr
 = 
	`sig«l
(
sig
, 
a˘
->
ß_h™dÀr
);

350 i‡(
ﬂ˘
 !
NULL
)

351 
ﬂ˘
->
ß_h™dÀr
 = 
¥ev_h™dÀr
;

353 i‡(
¥ev_h™dÀr
 =
SIG_ERR
)

354 
rc
 = -1;

356  
rc
;

357 
	}
}

359 
	$l°©
(c⁄° *
∑th
, 
°©
 *
buf
)

361  
	`°©
(
∑th
, 
buf
);

362 
	}
}

364 *
	$mm≠
(*
addr
, 
size_t
 
Àn
, 
¥Ÿ
, 
Êags
, 
fûdes
, 
off_t
 
off
)

366 
DWORD
 
vaPrŸ
 = 0;

367 
DWORD
 
m≠Ac˚ss
 = 0;

368 
DWORD
 
À∆ow
;

369 
DWORD
 
Ànhigh
;

370 
HANDLE
 
hM≠
;

371 * 
ÆlocAddr
 = 
NULL
;

373 i‡(
¥Ÿ
 & 
PROT_NONE
)

374 
vaPrŸ
 |
PAGE_NOACCESS
;

376 i‡((
¥Ÿ
 & 
PROT_READ
Ë&& !’rŸ & 
PROT_WRITE
)) {

377 
vaPrŸ
 |
PAGE_READONLY
;

378 
m≠Ac˚ss
 = 
FILE_MAP_READ
;

381 i‡(
¥Ÿ
 & 
PROT_WRITE
) {

382 
vaPrŸ
 |
PAGE_READWRITE
;

383 
m≠Ac˚ss
 |
FILE_MAP_WRITE
;

386 
À∆ow
 = 
Àn
 & 0xFFFF;

387 
Ànhigh
 = 
Àn
 >> 16;

390 i‡(
À∆ow
 == 0)

391 
Ànhigh
 = 0;

393 i‡(
Êags
 & 
MAP_ANON
 || fœg†& 
MAP_ANONYMOUS
) {

394 
ÆlocAddr
 = 
	`VútuÆAŒoc
(
addr
, 
Àn
, 
MEM_COMMIT
, 
vaPrŸ
);

395 i‡(
ÆlocAddr
 =
NULL
)

396 
î∫o
 = 
	`wö_to_posix_îr‹
(
	`GëLa°Eº‹
());

398 
hM≠
 = 
	`Cª©eFûeM≠pög
((
HANDLE
)
	`_gë_osfh™dÀ
(
fûdes
), 
NULL
,

399 
vaPrŸ
, 
Ànhigh
, 
À∆ow
, 
NULL
);

401 i‡(
hM≠
 !
NULL
)

402 
ÆlocAddr
 = 
	`M≠VõwOfFûe
(
hM≠
, 
m≠Ac˚ss
, 
off
 >> 16,

403 
off
 & 0xFFFF, 
Àn
);

404 i‡(
hM≠
 =
NULL
 || 
ÆlocAddr
 == NULL)

405 
î∫o
 = 
	`wö_to_posix_îr‹
(
	`GëLa°Eº‹
());

409  
ÆlocAddr
;

410 
	}
}

412 
	$munm≠
(*
addr
, 
size_t
 
Àn
)

414 
BOOL
 
suc˚ss
;

419 
suc˚ss
 = 
	`Unm≠VõwOfFûe
(
addr
);

421 i‡(!
suc˚ss
)

422 
suc˚ss
 = 
	`VútuÆFªe
(
addr
, 0, 
MEM_RELEASE
);

424  !
suc˚ss
;

425 
	}
}

427 
	$msync
(*
addr
, 
size_t
 
Àn
, 
Êags
)

429  !
	`FlushVõwOfFûe
(
addr
, 
Àn
);

430 
	}
}

432 
	$f‹k
()

434 
	`log_îr
("%†i†nŸ im∂emíãd\n", 
__func__
);

435 
î∫o
 = 
ENOSYS
;

437 
	}
}

439 
pid_t
 
	$£tsid
()

441 
	`log_îr
("%†i†nŸ im∂emíãd\n", 
__func__
);

442 
î∫o
 = 
ENOSYS
;

444 
	}
}

446 
HANDLE
 
	glog_fûe
 = 
INVALID_HANDLE_VALUE
;

448 
	$›ílog
(c⁄° *
idít
, 
log›t
, 
Ácûôy
)

450 i‡(
log_fûe
 !
INVALID_HANDLE_VALUE
)

453 
log_fûe
 = 
	`Cª©eFûeA
("sy¶og.txt", 
GENERIC_WRITE
,

454 
FILE_SHARE_READ
 | 
FILE_SHARE_WRITE
, 
NULL
,

455 
OPEN_ALWAYS
, 0, 
NULL
);

456 
	}
}

458 
	$˛o£log
()

460 
	`Clo£H™dÀ
(
log_fûe
);

461 
log_fûe
 = 
INVALID_HANDLE_VALUE
;

462 
	}
}

464 
	$sy¶og
(
¥i‹ôy
, c⁄° *
mesßge
, ... )

466 
va_li°
 
v
;

467 
Àn
;

468 *
ouçut
;

469 
DWORD
 
byãs_wrôãn
;

471 i‡(
log_fûe
 =
INVALID_HANDLE_VALUE
) {

472 
log_fûe
 = 
	`Cª©eFûeA
("sy¶og.txt", 
GENERIC_WRITE
,

473 
FILE_SHARE_READ
 | 
FILE_SHARE_WRITE
,

474 
NULL
, 
OPEN_ALWAYS
, 0, NULL);

477 i‡(
log_fûe
 =
INVALID_HANDLE_VALUE
) {

478 
	`log_îr
("syslog: failedÅo openÜog file\n");

482 
	`va_°¨t
(
v
, 
mesßge
);

483 
Àn
 = 
	`_vs˝rötf
(
mesßge
, 
v
);

484 
ouçut
 = 
	`mÆloc
(
Àn
 + ());

485 
	`v•rötf
(
ouçut
, 
mesßge
, 
v
);

486 
	`WrôeFûe
(
log_fûe
, 
ouçut
, 
Àn
, &
byãs_wrôãn
, 
NULL
);

487 
	`va_íd
(
v
);

488 
	`‰ì
(
ouçut
);

489 
	}
}

491 
	$kûl
(
pid_t
 
pid
, 
sig
)

493 
î∫o
 = 
ESRCH
;

495 
	}
}

501 
	$f˙é
(
fûdes
, 
cmd
, ...)

508 
va_li°
 
≠
;

509 
vÆ
, 
›t
, 
°©us
;

511 i‡(
cmd
 =
F_GETFL
)

513 i‡(
cmd
 !
F_SETFL
) {

514 
î∫o
 = 
EINVAL
;

518 
	`va_°¨t
(
≠
, 1);

520 
›t
 = 
	`va_¨g
(
≠
, );

521 i‡(
›t
 & 
O_NONBLOCK
)

522 
vÆ
 = 1;

524 
vÆ
 = 0;

526 
°©us
 = 
	`io˘lsockë
((
SOCKET
)
fûdes
, 
›t
, &
vÆ
);

528 i‡(
°©us
 =
SOCKET_ERROR
) {

529 
î∫o
 = 
EINVAL
;

530 
vÆ
 = -1;

533 
	`va_íd
(
≠
);

535  
vÆ
;

538 
	}
}

540 #i‚de‡
CLOCK_MONOTONIC_RAW


541 
	#CLOCK_MONOTONIC_RAW
 4

	)

550 
	$˛ock_gëtime
(
˛ockid_t
 
˛ock_id
, 
time•ec
 *
ç
)

552 
rc
 = 0;

554 i‡(
˛ock_id
 =
CLOCK_MONOTONIC
 || clock_id =
CLOCK_MONOTONIC_RAW
) {

555 
LARGE_INTEGER
 
‰eq
 = {{0,0}};

556 
LARGE_INTEGER
 
cou¡s
;

557 
uöt64_t
 
t
;

559 
	`QuîyPîf‹m™˚Cou¡î
(&
cou¡s
);

560 i‡(
‰eq
.
QuadP¨t
 == 0)

561 
	`QuîyPîf‹m™˚Fªquícy
(&
‰eq
);

563 
ç
->
tv_£c
 = 
cou¡s
.
QuadP¨t
 / 
‰eq
.QuadPart;

566 
t
 = 
ç
->
tv_£c
 * 
‰eq
.
QuadP¨t
;

567 
t
 = 
cou¡s
.
QuadP¨t
 -Å;

571 
t
 *= 1000000000;

572 
ç
->
tv_n£c
 = 
t
 / 
‰eq
.
QuadP¨t
;

573 } i‡(
˛ock_id
 =
CLOCK_REALTIME
) {

576 
timevÆ
 
tv
;

577 
	`gëtimeofday
(&
tv
, 
NULL
);

578 
ç
->
tv_£c
 = 
tv
.tv_sec;

579 
ç
->
tv_n£c
 = 
tv
.
tv_u£c
 * 1000;

581 
î∫o
 = 
EINVAL
;

582 
rc
 = -1;

585  
rc
;

586 
	}
}

588 
	$mlock
(c⁄° * 
addr
, 
size_t
 
Àn
)

590 
SIZE_T
 
mö
, 
max
;

591 
BOOL
 
suc˚ss
;

592 
HANDLE
 
¥o˚ss
 = 
	`GëCuºítPro˚ss
();

594 
suc˚ss
 = 
	`GëPro˚ssW‹kögSëSize
(
¥o˚ss
, &
mö
, &
max
);

595 i‡(!
suc˚ss
) {

596 
î∫o
 = 
	`wö_to_posix_îr‹
(
	`GëLa°Eº‹
());

600 
mö
 +
Àn
;

601 
max
 +
Àn
;

602 
suc˚ss
 = 
	`SëPro˚ssW‹kögSëSize
(
¥o˚ss
, 
mö
, 
max
);

603 i‡(!
suc˚ss
) {

604 
î∫o
 = 
	`wö_to_posix_îr‹
(
	`GëLa°Eº‹
());

608 
suc˚ss
 = 
	`VútuÆLock
((
LPVOID
)
addr
, 
Àn
);

609 i‡(!
suc˚ss
) {

610 
î∫o
 = 
	`wö_to_posix_îr‹
(
	`GëLa°Eº‹
());

615 
	}
}

617 
	$mu∆ock
(c⁄° * 
addr
, 
size_t
 
Àn
)

619 
BOOL
 
suc˚ss
 = 
	`VútuÆU∆ock
((
LPVOID
)
addr
, 
Àn
);

621 i‡(!
suc˚ss
) {

622 
î∫o
 = 
	`wö_to_posix_îr‹
(
	`GëLa°Eº‹
());

627 
	}
}

629 
pid_t
 
	$waôpid
(
pid_t
 
pid
, *
°©_loc
, 
›ti⁄s
)

631 
	`log_îr
("%†i†nŸ im∂emíãd\n", 
__func__
);

632 
î∫o
 = 
ENOSYS
;

634 
	}
}

636 
	$u¶ìp
(
u£c⁄ds_t
 
u£c⁄ds
)

638 
	`SÀï
(
u£c⁄ds
 / 1000);

640 
	}
}

642 *
	$ba£«me
(*
∑th
)

644 
«me
[
MAX_PATH
];

645 
i
;

647 i‡(
∑th
 =
NULL
 || 
	`°æí
(path) == 0)

650 
i
 = 
	`°æí
(
∑th
) - 1;

652 
∑th
[
i
] != '\\' &&Öath[i] != '/' && i >= 0)

653 
i
--;

655 
«me
[
MAX_PATH
 - 1] = '\0';

656 
	`°∫˝y
(
«me
, 
∑th
 + 
i
 + 1, 
MAX_PATH
 - 1);

658  
«me
;

659 
	}
}

661 
	$fsync
(
fûdes
)

663 
HANDLE
 
hFûe
 = (HANDLE)
	`_gë_osfh™dÀ
(
fûdes
);

664 i‡(!
	`FlushFûeBuf„rs
(
hFûe
)) {

665 
î∫o
 = 
	`wö_to_posix_îr‹
(
	`GëLa°Eº‹
());

670 
	}
}

672 
	gnFûeM≠pögs
 = 0;

673 
HANDLE
 
	gfûeM≠pögs
[1024];

675 
	$shmgë
(
key_t
 
key
, 
size_t
 
size
, 
shmÊg
)

677 
m≠id
 = -1;

678 
uöt32_t
 
size_low
 = 
size
 & 0xFFFFFFFF;

679 
uöt32_t
 
size_high
 = ((
uöt64_t
)
size
) >> 32;

680 
HANDLE
 
hM≠pög
;

682 
hM≠pög
 = 
	`Cª©eFûeM≠pög
(
INVALID_HANDLE_VALUE
, 
NULL
,

683 
PAGE_EXECUTE_READWRITE
 | 
SEC_RESERVE
,

684 
size_high
, 
size_low
, 
NULL
);

685 i‡(
hM≠pög
 !
NULL
) {

686 
fûeM≠pögs
[
nFûeM≠pögs
] = 
hM≠pög
;

687 
m≠id
 = 
nFûeM≠pögs
;

688 
nFûeM≠pögs
++;

690 
î∫o
 = 
ENOSYS
;

692  
m≠id
;

693 
	}
}

695 *
	$shm©
(
shmid
, c⁄° *
shmaddr
, 
shmÊg
)

697 *
m≠Addr
;

698 
MEMORY_BASIC_INFORMATION
 
memInfo
;

700 
m≠Addr
 = 
	`M≠VõwOfFûe
(
fûeM≠pögs
[
shmid
], 
FILE_MAP_ALL_ACCESS
, 0, 0, 0);

701 i‡(
m≠Addr
 =
NULL
) {

702 
î∫o
 = 
	`wö_to_posix_îr‹
(
	`GëLa°Eº‹
());

706 i‡(
	`VútuÆQuîy
(
m≠Addr
, &
memInfo
, (memInfo)) == 0) {

707 
î∫o
 = 
	`wö_to_posix_îr‹
(
	`GëLa°Eº‹
());

711 
m≠Addr
 = 
	`VútuÆAŒoc
(m≠Addr, 
memInfo
.
Regi⁄Size
, 
MEM_COMMIT
, 
PAGE_READWRITE
);

712 i‡(
m≠Addr
 =
NULL
) {

713 
î∫o
 = 
	`wö_to_posix_îr‹
(
	`GëLa°Eº‹
());

717  
m≠Addr
;

718 
	}
}

720 
	$shmdt
(c⁄° *
shmaddr
)

722 i‡(!
	`Unm≠VõwOfFûe
(
shmaddr
)) {

723 
î∫o
 = 
	`wö_to_posix_îr‹
(
	`GëLa°Eº‹
());

728 
	}
}

730 
	$shm˘l
(
shmid
, 
cmd
, 
shmid_ds
 *
buf
)

732 i‡(
cmd
 =
IPC_RMID
) {

733 
fûeM≠pögs
[
shmid
] = 
INVALID_HANDLE_VALUE
;

737 
	`log_îr
("%†i†nŸ im∂emíãd\n", 
__func__
);

738 
î∫o
 = 
ENOSYS
;

740 
	}
}

742 
	$£tuid
(
uid_t
 
uid
)

744 
	`log_îr
("%†i†nŸ im∂emíãd\n", 
__func__
);

745 
î∫o
 = 
ENOSYS
;

747 
	}
}

749 
	$£tgid
(
gid_t
 
gid
)

751 
	`log_îr
("%†i†nŸ im∂emíãd\n", 
__func__
);

752 
î∫o
 = 
ENOSYS
;

754 
	}
}

756 
	$ni˚
(
ö¸
)

758 
DWORD
 
¥io˛ass
 = 
NORMAL_PRIORITY_CLASS
;

760 i‡(
ö¸
 < -15)

761 
¥io˛ass
 = 
HIGH_PRIORITY_CLASS
;

762 i‡(
ö¸
 < 0)

763 
¥io˛ass
 = 
ABOVE_NORMAL_PRIORITY_CLASS
;

764 i‡(
ö¸
 > 15)

765 
¥io˛ass
 = 
IDLE_PRIORITY_CLASS
;

766 i‡(
ö¸
 > 0)

767 
¥io˛ass
 = 
BELOW_NORMAL_PRIORITY_CLASS
;

769 i‡(!
	`SëPri‹ôyCœss
(
	`GëCuºítPro˚ss
(), 
¥io˛ass
))

770 
	`log_îr
("fio: SetPriorityClass failed\n");

773 
	}
}

775 
	$gërußge
(
who
, 
rußge
 *
r_ußge
)

777 c⁄° 
uöt64_t
 
SECONDS_BETWEEN_1601_AND_1970
 = 11644473600;

778 
FILETIME
 
cTime
, 
eTime
, 
kTime
, 
uTime
;

779 
time_t
 
time
;

780 
HANDLE
 
h
;

782 
	`mem£t
(
r_ußge
, 0, (*r_usage));

784 i‡(
who
 =
RUSAGE_SELF
) {

785 
h
 = 
	`GëCuºítPro˚ss
();

786 
	`GëPro˚ssTimes
(
h
, &
cTime
, &
eTime
, &
kTime
, &
uTime
);

787 } i‡(
who
 =
RUSAGE_THREAD
) {

788 
h
 = 
	`GëCuºítThªad
();

789 
	`GëThªadTimes
(
h
, &
cTime
, &
eTime
, &
kTime
, &
uTime
);

791 
	`log_îr
("fio: gërußgê%d i†nŸ im∂emíãd\n", 
who
);

795 
time
 = ((
uöt64_t
)
uTime
.
dwHighD©eTime
 << 32Ë+ uTime.
dwLowD©eTime
;

798 
time
 = (
time_t
)((—ime)/10000000Ë- 
SECONDS_BETWEEN_1601_AND_1970
);

799 
r_ußge
->
ru_utime
.
tv_£c
 = 
time
;

801 
r_ußge
->
ru_utime
.
tv_u£c
 = 0;

802 
time
 = ((
uöt64_t
)
kTime
.
dwHighD©eTime
 << 32Ë+ kTime.
dwLowD©eTime
;

805 
time
 = (
time_t
)((—ime)/10000000Ë- 
SECONDS_BETWEEN_1601_AND_1970
);

806 
r_ußge
->
ru_°ime
.
tv_£c
 = 
time
;

807 
r_ußge
->
ru_°ime
.
tv_u£c
 = 0;

809 
	}
}

811 
	$posix_madvi£
(*
addr
, 
size_t
 
Àn
, 
advi˚
)

813  
ENOSYS
;

814 
	}
}

816 
	$fd©async
(
fûdes
)

818  
	`fsync
(
fûdes
);

819 
	}
}

821 
ssize_t
 
	$pwrôe
(
fûdes
, c⁄° *
buf
, 
size_t
 
nbyã
,

822 
off_t
 
off£t
)

824 
öt64_t
 
pos
 = 
	`_ãŒi64
(
fûdes
);

825 
ssize_t
 
Àn
 = 
	`_wrôe
(
fûdes
, 
buf
, 
nbyã
);

827 
	`_l£eki64
(
fûdes
, 
pos
, 
SEEK_SET
);

828  
Àn
;

829 
	}
}

831 
ssize_t
 
	$¥ód
(
fûdes
, *
buf
, 
size_t
 
nbyã
, 
off_t
 
off£t
)

833 
öt64_t
 
pos
 = 
	`_ãŒi64
(
fûdes
);

834 
ssize_t
 
Àn
 = 
	`ªad
(
fûdes
, 
buf
, 
nbyã
);

836 
	`_l£eki64
(
fûdes
, 
pos
, 
SEEK_SET
);

837  
Àn
;

838 
	}
}

840 
ssize_t
 
	$ªadv
(
fûdes
, c⁄° 
iovec
 *
iov
, 
iov˙t
)

842 
	`log_îr
("%†i†nŸ im∂emíãd\n", 
__func__
);

843 
î∫o
 = 
ENOSYS
;

845 
	}
}

847 
ssize_t
 
	$wrôev
(
fûdes
, c⁄° 
iovec
 *
iov
, 
iov˙t
)

849 
i
;

850 
DWORD
 
byãs_wrôãn
 = 0;

852 
i
 = 0; i < 
iov˙t
; i++) {

853 
Àn
;

855 
Àn
 = 
	`£nd
((
SOCKET
)
fûdes
, 
iov
[
i
].
iov_ba£
, iov[i].
iov_Àn
, 0);

856 i‡(
Àn
 =
SOCKET_ERROR
) {

857 
DWORD
 
îr
 = 
	`GëLa°Eº‹
();

858 
î∫o
 = 
	`wö_to_posix_îr‹
(
îr
);

859 
byãs_wrôãn
 = -1;

862 
byãs_wrôãn
 +
Àn
;

865  
byãs_wrôãn
;

866 
	}
}

868 
	$°πﬁl
(c⁄° *
ª°ri˘
 
°r
, **ª°ri˘ 
íd±r
, 
ba£
)

870  
	`_°πoi64
(
°r
, 
íd±r
, 
ba£
);

871 
	}
}

873 
	$pﬁl
(
pﬁlfd
 
fds
[], 
nfds_t
 
nfds
, 
timeout
)

875 
timevÆ
 
tv
;

876 
timevÆ
 *
to
 = 
NULL
;

877 
fd_£t
 
ªadfds
, 
wrôefds
, 
ex˚±fds
;

878 
i
;

879 
rc
;

881 i‡(
timeout
 != -1) {

882 
to
 = &
tv
;

883 
to
->
tv_£c
 = 
timeout
 / 1000;

884 
to
->
tv_u£c
 = (
timeout
 % 1000) * 1000;

887 
	`FD_ZERO
(&
ªadfds
);

888 
	`FD_ZERO
(&
wrôefds
);

889 
	`FD_ZERO
(&
ex˚±fds
);

891 
i
 = 0; i < 
nfds
; i++) {

892 i‡(
fds
[
i
].
fd
 =
INVALID_SOCKET
) {

893 
fds
[
i
].
ªvíts
 = 0;

897 i‡(
fds
[
i
].
evíts
 & 
POLLIN
)

898 
	`FD_SET
(
fds
[
i
].
fd
, &
ªadfds
);

900 i‡(
fds
[
i
].
evíts
 & 
POLLOUT
)

901 
	`FD_SET
(
fds
[
i
].
fd
, &
wrôefds
);

903 
	`FD_SET
(
fds
[
i
].
fd
, &
ex˚±fds
);

905 
rc
 = 
	`£À˘
(
nfds
, &
ªadfds
, &
wrôefds
, &
ex˚±fds
, 
to
);

907 i‡(
rc
 !
SOCKET_ERROR
) {

908 
i
 = 0; i < 
nfds
; i++) {

909 i‡(
fds
[
i
].
fd
 =
INVALID_SOCKET
)

912 i‡((
fds
[
i
].
evíts
 & 
POLLIN
Ë&& 
	`FD_ISSET
(fds[i].
fd
, &
ªadfds
))

913 
fds
[
i
].
ªvíts
 |
POLLIN
;

915 i‡((
fds
[
i
].
evíts
 & 
POLLOUT
Ë&& 
	`FD_ISSET
(fds[i].
fd
, &
wrôefds
))

916 
fds
[
i
].
ªvíts
 |
POLLOUT
;

918 i‡(
	`FD_ISSET
(
fds
[
i
].
fd
, &
ex˚±fds
))

919 
fds
[
i
].
ªvíts
 |
POLLHUP
;

922  
rc
;

923 
	}
}

925 
	$«no¶ìp
(c⁄° 
time•ec
 *
rqç
, time•e¯*
rmç
)

927 
time•ec
 
tv
;

928 
DWORD
 
ms_ªmaöög
;

929 
DWORD
 
ms_tŸÆ
 = (
rqç
->
tv_£c
 * 1000Ë+ (rqç->
tv_n£c
 / 1000000.0);

931 i‡(
ms_tŸÆ
 == 0)

932 
ms_tŸÆ
 = 1;

934 
ms_ªmaöög
 = 
ms_tŸÆ
;

939 
	`fio_gëtime
(&
tv
, 
NULL
);

940 
	`SÀï
(
ms_ªmaöög
);

941 
ms_ªmaöög
 = 
ms_tŸÆ
 - 
	`mtime_sö˚_now
(&
tv
);

942 } 
ms_ªmaöög
 > 0 && ms_ªmaöög < 
ms_tŸÆ
);

945 i‡(
rmç
 !
NULL
) {

946 
rmç
->
tv_£c
 = 0;

947 
rmç
->
tv_n£c
 = 0;

951 
	}
}

953 
DIR
 *
	$›ídú
(c⁄° *
dú«me
)

955 
dúít_˘x
 *
dc
 = 
NULL
;

956 
HANDLE
 
fûe
;

959 
fûe
 = 
	`Cª©eFûeA
(
dú«me
, 0, 
FILE_SHARE_READ
 | 
FILE_SHARE_WRITE
, 
NULL
,

960 
OPEN_EXISTING
, 
FILE_FLAG_BACKUP_SEMANTICS
, 
NULL
);

961 i‡(
fûe
 !
INVALID_HANDLE_VALUE
) {

962 
	`Clo£H™dÀ
(
fûe
);

963 
dc
 = 
	`mÆloc
((
dúít_˘x
));

964 
	`¢¥ötf
(
dc
->
dú«me
, (dc->dirname), "%s", dirname);

965 
dc
->
föd_h™dÀ
 = 
INVALID_HANDLE_VALUE
;

967 
DWORD
 
îr‹
 = 
	`GëLa°Eº‹
();

968 i‡(
îr‹
 =
ERROR_FILE_NOT_FOUND
)

969 
î∫o
 = 
ENOENT
;

971 i‡(
îr‹
 =
ERROR_PATH_NOT_FOUND
)

972 
î∫o
 = 
ENOTDIR
;

973 i‡(
îr‹
 =
ERROR_TOO_MANY_OPEN_FILES
)

974 
î∫o
 = 
ENFILE
;

975 i‡(
îr‹
 =
ERROR_ACCESS_DENIED
)

976 
î∫o
 = 
EACCES
;

978 
î∫o
 = 
îr‹
;

981  
dc
;

982 
	}
}

984 
	$˛o£dú
(
DIR
 *
dúp
)

986 i‡(
dúp
 !
NULL
 && dúp->
föd_h™dÀ
 !
INVALID_HANDLE_VALUE
)

987 
	`FödClo£
(
dúp
->
föd_h™dÀ
);

989 
	`‰ì
(
dúp
);

991 
	}
}

993 
dúít
 *
	$ªaddú
(
DIR
 *
dúp
)

995 
dúít
 
de
;

996 
WIN32_FIND_DATA
 
föd_d©a
;

998 i‡(
dúp
 =
NULL
)

999  
NULL
;

1001 i‡(
dúp
->
föd_h™dÀ
 =
INVALID_HANDLE_VALUE
) {

1002 
£¨ch_∑âîn
[
MAX_PATH
];

1004 
	`¢¥ötf
(
£¨ch_∑âîn
, (search_pattern), "%s\\*",

1005 
dúp
->
dú«me
);

1006 
dúp
->
föd_h™dÀ
 = 
	`FödFú°FûeA
(
£¨ch_∑âîn
, &
föd_d©a
);

1007 i‡(
dúp
->
föd_h™dÀ
 =
INVALID_HANDLE_VALUE
)

1008  
NULL
;

1010 i‡(!
	`FödNextFûe
(
dúp
->
föd_h™dÀ
, &
föd_d©a
))

1011  
NULL
;

1014 
	`¢¥ötf
(
de
.
d_«me
, (de.d_«me), 
föd_d©a
.
cFûeName
);

1015 
de
.
d_öo
 = 0;

1017  &
de
;

1018 
	}
}

1020 
uid_t
 
	$gëeuid
()

1022 
	`log_îr
("%†i†nŸ im∂emíãd\n", 
__func__
);

1023 
î∫o
 = 
ENOSYS
;

1025 
	}
}

1027 
ö_addr_t
 
	$öë_√tw‹k
(c⁄° *
˝
)

1029 
ö_addr_t
 
hbo
;

1030 
ö_addr_t
 
nbo
 = 
	`öë_addr
(
˝
);

1031 
hbo
 = ((
nbo
 & 0xFF) << 24) + ((nbo & 0xFF00) << 8) + ((nbo & 0xFF0000) >> 8) + ((nbo & 0xFF000000) >> 24);

1032  
hbo
;

1033 
	}
}

1035 
HANDLE
 
	$¸óã_«med_pùe
(*
pùe_«me
, 
waô_c⁄√˘_time
)

1037 
HANDLE
 
hpùe
;

1039 
hpùe
 = 
	`Cª©eNamedPùe
 (

1040 
pùe_«me
,

1041 
PIPE_ACCESS_DUPLEX
,

1042 
PIPE_WAIT
 | 
PIPE_TYPE_BYTE
,

1043 1, 0, 0, 
waô_c⁄√˘_time
, 
NULL
);

1045 i‡(
hpùe
 =
INVALID_HANDLE_VALUE
) {

1046 
	`log_îr
("C⁄√˘NamedPùêÁûed (%lu).\n", 
	`GëLa°Eº‹
());

1047  
INVALID_HANDLE_VALUE
;

1050 i‡(!
	`C⁄√˘NamedPùe
(
hpùe
, 
NULL
)) {

1051 
	`log_îr
("C⁄√˘NamedPùêÁûed (%lu).\n", 
	`GëLa°Eº‹
());

1052 
	`Clo£H™dÀ
(
hpùe
);

1053  
INVALID_HANDLE_VALUE
;

1056  
hpùe
;

1057 
	}
}

1059 
BOOL
 
	$wödows_¸óã_¥o˚ss
(
PROCESS_INFORMATION
 *
pi
, c⁄° *
¨gs
, 
HANDLE
 *
hjob
)

1061 
LPSTR
 
this_cmd_löe
 = 
	`GëComm™dLöe
();

1062 
LPSTR
 
√w_¥o˚ss_cmd_löe
 = 
	`mÆloc
((
	`°æí
(
this_cmd_löe
)+°æí(
¨gs
)) * (*));

1063 
STARTUPINFO
 
si
 = {0};

1064 
DWORD
 
Êags
 = 0;

1066 
	`°r˝y
(
√w_¥o˚ss_cmd_löe
, 
this_cmd_löe
);

1067 
	`°rˇt
(
√w_¥o˚ss_cmd_löe
, 
¨gs
);

1069 
si
.
cb
 = (si);

1070 
	`mem£t
(
pi
, 0, (*pi));

1072 i‡((
hjob
 !
NULL
Ë&& (*hjob !
INVALID_HANDLE_VALUE
))

1073 
Êags
 = 
CREATE_SUSPENDED
 | 
CREATE_BREAKAWAY_FROM_JOB
;

1075 
Êags
 |
CREATE_NEW_CONSOLE
;

1077 if–!
	`Cª©ePro˚ss
–
NULL
,

1078 
√w_¥o˚ss_cmd_löe
,

1079 
NULL
,

1080 
NULL
,

1081 
TRUE
,

1082 
Êags
,

1083 
NULL
,

1084 
NULL
,

1085 &
si
,

1086 
pi
 )

1089 
	`log_îr
("Cª©ePro˚s†Áûed (%lu).\n", 
	`GëLa°Eº‹
() );

1090 
	`‰ì
(
√w_¥o˚ss_cmd_löe
);

1093 i‡((
hjob
 !
NULL
Ë&& (*hjob !
INVALID_HANDLE_VALUE
)) {

1094 
BOOL
 
ªt
 = 
	`AssignPro˚ssToJobObje˘
(*
hjob
, 
pi
->
hPro˚ss
);

1095 i‡(!
ªt
) {

1096 
	`log_îr
("AssignPro˚ssToJobObje˘ faûed (%lu).\n", 
	`GëLa°Eº‹
() );

1100 
	`ResumeThªad
(
pi
->
hThªad
);

1103 
	`‰ì
(
√w_¥o˚ss_cmd_löe
);

1105 
	}
}

1107 
HANDLE
 
	$wödows_¸óã_job
()

1109 
JOBOBJECT_EXTENDED_LIMIT_INFORMATION
 
jñi
 = { 0 };

1110 
BOOL
 
suc˚ss
;

1111 
HANDLE
 
hjob
 = 
	`Cª©eJobObje˘
(
NULL
, NULL);

1113 
jñi
.
BasicLimôInf‹m©i⁄
.
LimôFœgs
 = 
JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE
;

1114 
suc˚ss
 = 
	`SëInf‹m©i⁄JobObje˘
(
hjob
, 
JobObje˘ExãndedLimôInf‹m©i⁄
, &
jñi
, (jeli));

1115 i‡–
suc˚ss
 == 0 ) {

1116 
	`log_îr
–"SëInf‹m©i⁄JobObje˘ faûed:Éº‹ %lu\n", 
	`GëLa°Eº‹
() );

1117  
INVALID_HANDLE_VALUE
;

1119  
hjob
;

1120 
	}
}

1123 
boﬁ
 
	$m⁄ô‹_¥o˚ss_tûl_c⁄√˘
(
PROCESS_INFORMATION
 *
pi
, 
HANDLE
 *
hpùe
)

1125 
boﬁ
 
c⁄√˘ed
 = 
FALSE
;

1126 
boﬁ
 
¥o˚ss_Æive
 = 
TRUE
;

1127 
buf„r
[32] = {0};

1128 
DWORD
 
byãs_ªad
;

1131 
DWORD
 
exô_code
;

1132 
	`GëExôCodePro˚ss
(
pi
->
hPro˚ss
, &
exô_code
);

1133 i‡(
exô_code
 !
STILL_ACTIVE
) {

1134 
	`d¥öt
(
FD_PROCESS
, "¥o˚s†%uÉxôed %d\n", 
	`GëPro˚ssId
(
pi
->
hPro˚ss
), 
exô_code
);

1138 
	`mem£t
(
buf„r
, 0, (buffer));

1139 
	`RódFûe
(*
hpùe
, &
buf„r
, (buf„rË- 1, &
byãs_ªad
, 
NULL
);

1140 i‡(
byãs_ªad
 && 
	`°r°r
(
buf„r
, "connected")) {

1141 
	`d¥öt
(
FD_PROCESS
, "¥o˚s†%u c⁄√˘edÅÿ˛õ¡\n", 
	`GëPro˚ssId
(
pi
->
hPro˚ss
));

1142 
c⁄√˘ed
 = 
TRUE
;

1144 
	`u¶ìp
(10*1000);

1145 } 
¥o˚ss_Æive
 && !
c⁄√˘ed
);

1146  
c⁄√˘ed
;

1147 
	}
}

1150 
HANDLE
 
	$wödows_h™dÀ_c⁄√˘i⁄
(
HANDLE
 
hjob
, 
sk
)

1152 
pùe_«me
[64] = "\\\\.\\pipe\\fiointernal-";

1153 
¨gs
[128] = " --server-internal=";

1154 
PROCESS_INFORMATION
 
pi
;

1155 
HANDLE
 
hpùe
 = 
INVALID_HANDLE_VALUE
;

1156 
WSAPROTOCOL_INFO
 
¥Ÿocﬁ_öfo
;

1157 
HANDLE
 
ªt
;

1159 
	`•rötf
(
pùe_«me
+
	`°æí
’ùe_«me), "%d", 
	`GëCuºítPro˚ssId
());

1160 
	`•rötf
(
¨gs
+
	`°æí
◊rgs), "%s", 
pùe_«me
);

1162 i‡(
	`wödows_¸óã_¥o˚ss
(&
pi
, 
¨gs
, &
hjob
) != 0)

1163  
INVALID_HANDLE_VALUE
;

1165 
ªt
 = 
pi
.
hPro˚ss
;

1169 i‡(
	`WSADu∂iˇãSockë
(
sk
, 
	`GëPro˚ssId
(
pi
.
hPro˚ss
), &
¥Ÿocﬁ_öfo
)) {

1170 
	`log_îr
("WSADu∂iˇãSockë faûed (%lu).\n", 
	`GëLa°Eº‹
());

1171 
ªt
 = 
INVALID_HANDLE_VALUE
;

1172 
˛ónup
;

1176 
hpùe
 = 
	`¸óã_«med_pùe
(
pùe_«me
, 1000);

1177 i‡(
hpùe
 =
INVALID_HANDLE_VALUE
) {

1178 
ªt
 = 
INVALID_HANDLE_VALUE
;

1179 
˛ónup
;

1182 i‡(!
	`WrôeFûe
(
hpùe
, &
¥Ÿocﬁ_öfo
, ’rŸocﬁ_öfo), 
NULL
, NULL)) {

1183 
	`log_îr
("WrôeFûêÁûed (%lu).\n", 
	`GëLa°Eº‹
());

1184 
ªt
 = 
INVALID_HANDLE_VALUE
;

1185 
˛ónup
;

1188 
	`d¥öt
(
FD_PROCESS
, "¥o˚s†%d cª©ed chûdÖro˚s†%u\n", 
	`GëCuºítPro˚ssId
(), 
	`GëPro˚ssId
(
pi
.
hPro˚ss
));

1193 i‡(!
	`m⁄ô‹_¥o˚ss_tûl_c⁄√˘
(&
pi
, &
hpùe
))

1194 
ªt
 = 
INVALID_HANDLE_VALUE
;

1196 
˛ónup
:

1198 i‡(
ªt
 =
INVALID_HANDLE_VALUE
)

1199 
	`Clo£H™dÀ
(
pi
.
hPro˚ss
);

1200 
	`Clo£H™dÀ
(
pi
.
hThªad
);

1201 
	`Disc⁄√˘NamedPùe
(
hpùe
);

1202 
	`Clo£H™dÀ
(
hpùe
);

1203  
ªt
;

1204 
	}
}

	@os/windows/posix.h

1 #i‚de‡
FIO_WINDOWS_POSIX_H


2 
	#FIO_WINDOWS_POSIX_H


	)

4 
	t˛ockid_t
;

6 
˛ock_gëtime
(
˛ockid_t
 
˛ock_id
, 
time•ec
 *
ç
);

7 
öë_©⁄
(c⁄° *, 
ö_addr
 *);

8 
wö_to_posix_îr‹
(
DWORD
 
wöîr
);

	@os/windows/posix/include/arpa/inet.h

1 #i‚de‡
ARPA_INET_H


2 
	#ARPA_INET_H


	)

4 
	~<ws2t˝ù.h
>

5 
	~<öây≥s.h
>

7 
	tsockÀn_t
;

8 
	tö_addr_t
;

11 
	#EAI_SYSTEM
 
EAI_FAIL


	)

13 
ö_addr_t
 
öë_√tw‹k
(c⁄° *
˝
);

	@os/windows/posix/include/asm/types.h

1 #i‚de‡
ASM_TYPES_H


2 
	#ASM_TYPES_H


	)

4 
	t__u16
;

5 
	t__u32
;

6 
	t__u64
;

	@os/windows/posix/include/dirent.h

1 #i‚de‡
DIRENT_H


2 
	#DIRENT_H


	)

4 
	~<wösock2.h
>

6 
	sdúít


8 
öo_t
 
	md_öo
;

9 
	md_«me
[
MAX_PATH
];

12 
	sdúít_˘x


14 
HANDLE
 
	mföd_h™dÀ
;

15 
	mdú«me
[
MAX_PATH
];

18 
dúít_˘x
 
	tDIR
;

20 
DIR
 *
›ídú
(c⁄° *
dú«me
);

21 
dúít
 *
ªaddú
(
DIR
 *
dúp
);

22 
˛o£dú
(
DIR
 *
dúp
);

	@os/windows/posix/include/dlfcn.h

1 #i‚de‡
DLFCN_H


2 
	#DLFCN_H


	)

4 
	#RTLD_LAZY
 1

	)

6 *
dl›í
(c⁄° *
fûe
, 
mode
);

7 
dl˛o£
(*
h™dÀ
);

8 *
dlsym
(*
ª°ri˘
 
h™dÀ
, c⁄° *ª°ri˘ 
«me
);

9 *
dÀº‹
();

	@os/windows/posix/include/libgen.h

1 #i‚de‡
LIBGEN_H


2 
	#LIBGEN_H


	)

4 *
ba£«me
(*
∑th
);

	@os/windows/posix/include/netdb.h

1 #i‚de‡
NETDB_H


2 
	#NETDB_H


	)

	@os/windows/posix/include/netinet/in.h

1 #i‚de‡
NETINET_IN_H


2 
	#NETINET_IN_H


	)

4 
	~<öây≥s.h
>

5 
	~<sys/un.h
>

	@os/windows/posix/include/netinet/tcp.h

1 #i‚de‡
NETINET_TCP_H


2 
	#NETINET_TCP_H


	)

	@os/windows/posix/include/poll.h

1 #i‚de‡
POLL_H


2 
	#POLL_H


	)

4 
	~<wösock2.h
>

6 
	tnfds_t
;

8 
pﬁl
(
pﬁlfd
 
fds
[], 
nfds_t
 
nfds
, 
timeout
);

	@os/windows/posix/include/semaphore.h

1 #i‚de‡
SEMAPHORE_H


2 
	#SEMAPHORE_H


	)

	@os/windows/posix/include/sys/ioctl.h

1 #i‚de‡
IOCTL_H


2 
	#IOCTL_H


	)

	@os/windows/posix/include/sys/ipc.h

1 #i‚de‡
SYS_IPC_H


2 
	#SYS_IPC_H


	)

	@os/windows/posix/include/sys/mman.h

1 #i‚de‡
SYS_MMAN_H


2 
	#SYS_MMAN_H


	)

4 
	~<sys/ty≥s.h
>

6 
	#PROT_NONE
 0x1

	)

7 
	#PROT_READ
 0x2

	)

8 
	#PROT_WRITE
 0x4

	)

10 
	#MAP_ANON
 0x1

	)

11 
	#MAP_ANONYMOUS
 
MAP_ANON


	)

12 
	#MAP_FIXED
 0x2

	)

13 
	#MAP_HASSEMAPHORE
 0x4

	)

14 
	#MAP_INHERIT
 0x8

	)

15 
	#MAP_NOCORE
 0x10

	)

16 
	#MAP_NOSYNC
 0x20

	)

17 
	#MAP_PREFAULT_READ
 0x40

	)

18 
	#MAP_PRIVATE
 0x80

	)

19 
	#MAP_SHARED
 0x100

	)

20 
	#MAP_STACK
 0x200

	)

22 
	#MAP_FAILED
 
NULL


	)

24 
	#MS_ASYNC
 0x1

	)

25 
	#MS_SYNC
 0x2

	)

26 
	#MS_INVALIDATE
 0x3

	)

28 
posix_madvi£
(*
addr
, 
size_t
 
Àn
, 
advi˚
);

29 *
mm≠
(*
addr
, 
size_t
 
Àn
, 
¥Ÿ
, 
Êags
,

30 
fûdes
, 
off_t
 
off
);

31 
munm≠
(*
addr
, 
size_t
 
Àn
);

32 
msync
(*
addr
, 
size_t
 
Àn
, 
Êags
);

33 
mu∆ock
(c⁄° * 
addr
, 
size_t
 
Àn
);

34 
mlock
(c⁄° *
addr
, 
size_t
 
Àn
);

	@os/windows/posix/include/sys/resource.h

1 #i‚de‡
SYS_RESOURCE_H


2 
	#SYS_RESOURCE_H


	)

4 
	#RUSAGE_SELF
 0

	)

5 
	#RUSAGE_THREAD
 1

	)

7 
	srußge


9 
timevÆ
 
	mru_utime
;

10 
timevÆ
 
	mru_°ime
;

11 
	mru_nvcsw
;

12 
	mru_möÊt
;

13 
	mru_majÊt
;

14 
	mru_nivcsw
;

17 
gërußge
(
who
, 
rußge
 *
r_ußge
);

	@os/windows/posix/include/sys/shm.h

1 #i‚de‡
SYS_SHM_H


2 
	#SYS_SHM_H


	)

4 
	#IPC_RMID
 0x1

	)

5 
	#IPC_CREAT
 0x2

	)

6 
	#IPC_PRIVATE
 0x4

	)

8 
	tuid_t
;

9 
	tgid_t
;

11 
	tshm©t_t
;

12 
	tkey_t
;

14 
	sùc_≥rm


16 
uid_t
 
	muid
;

17 
gid_t
 
	mgid
;

18 
uid_t
 
	mcuid
;

19 
gid_t
 
	mcgid
;

20 
mode_t
 
	mmode
;

24 
	sshmid_ds


26 
ùc_≥rm
 
	mshm_≥rm
;

27 
size_t
 
	mshm_£gsz
;

28 
pid_t
 
	mshm_Õid
;

29 
pid_t
 
	mshm_˝id
;

30 
shm©t_t
 
	mshm_«âch
;

31 
time_t
 
	mshm_©ime
;

32 
time_t
 
	mshm_dtime
;

33 
time_t
 
	mshm_˘ime
;

36 
shm˘l
(
shmid
, 
cmd
, 
shmid_ds
 *
buf
);

37 
shmgë
(
key_t
 
key
, 
size_t
 
size
, 
shmÊg
);

38 *
shm©
(
shmid
, c⁄° *
shmaddr
, 
shmÊg
);

39 
shmdt
(c⁄° *
shmaddr
);

	@os/windows/posix/include/sys/socket.h

1 #i‚de‡
SYS_SOCKET_H


2 
	#SYS_SOCKET_H


	)

	@os/windows/posix/include/sys/uio.h

1 #i‚de‡
SYS_UIO_H


2 
	#SYS_UIO_H


	)

4 
	~<öây≥s.h
>

5 
	~<uni°d.h
>

7 
	siovec


9 *
	miov_ba£
;

10 
size_t
 
	miov_Àn
;

13 
ssize_t
 
ªadv
(
fûdes
, c⁄° 
iovec
 *
iov
, 
iov˙t
);

14 
ssize_t
 
wrôev
(
fûdes
, c⁄° 
iovec
 *
iov
, 
iov˙t
);

	@os/windows/posix/include/sys/un.h

1 #i‚de‡
SYS_UN_H


2 
	#SYS_UN_H


	)

4 
	tß_Ámûy_t
;

5 
	tö_p‹t_t
;

7 
	ssockaddr_un


9 
ß_Ámûy_t
 
	msun_Ámûy
;

10 
	msun_∑th
[260];

	@os/windows/posix/include/sys/wait.h

1 #i‚de‡
SYS_WAIT_H


2 
	#SYS_WAIT_H


	)

4 
	#WIFSIGNALED
(
a
Ë0

	)

5 
	#WIFEXITED
(
a
Ë0

	)

6 
	#WTERMSIG
(
a
Ë0

	)

7 
	#WEXITSTATUS
(
a
Ë0

	)

8 
	#WNOHANG
 1

	)

10 
pid_t
 
waôpid
’id_t, *
°©_loc
, 
›ti⁄s
);

	@os/windows/posix/include/syslog.h

1 #i‚de‡
SYSLOG_H


2 
	#SYSLOG_H


	)

4 
sy¶og
();

6 
	#LOG_INFO
 0x1

	)

7 
	#LOG_ERROR
 0x2

	)

8 
	#LOG_WARN
 0x4

	)

10 
	#LOG_NDELAY
 0x1

	)

11 
	#LOG_NOWAIT
 0x2

	)

12 
	#LOG_PID
 0x4

	)

13 
	#LOG_USER
 0x8

	)

15 
˛o£log
();

16 
›ílog
(c⁄° *
idít
, 
log›t
, 
Ácûôy
);

	@oslib/asprintf.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~"o¶ib/a•rötf.h
"

5 #i‚de‡
CONFIG_HAVE_VASPRINTF


6 
	$va•rötf
(**
°Ω
, c⁄° *
fmt
, 
va_li°
 
≠
)

8 
va_li°
 
≠_c›y
;

9 *
°r
;

10 
Àn
;

12 #ifde‡
va_c›y


13 
	`va_c›y
(
≠_c›y
, 
≠
);

15 
	`__va_c›y
(
≠_c›y
, 
≠
);

17 
Àn
 = 
	`v¢¥ötf
(
NULL
, 0, 
fmt
, 
≠_c›y
);

18 
	`va_íd
(
≠_c›y
);

20 i‡(
Àn
 < 0)

21  
Àn
;

23 
Àn
++;

24 
°r
 = 
	`mÆloc
(
Àn
);

25 *
°Ω
 = 
°r
;

26  
°r
 ? 
	`v¢¥ötf
(°r, 
Àn
, 
fmt
, 
≠
) : -1;

27 
	}
}

30 #i‚de‡
CONFIG_HAVE_ASPRINTF


31 
	$a•rötf
(**
°Ω
, c⁄° *
fmt
, ...)

33 
va_li°
 
¨g
;

34 
d⁄e
;

36 
	`va_°¨t
(
¨g
, 
fmt
);

37 
d⁄e
 = 
	`va•rötf
(
°Ω
, 
fmt
, 
¨g
);

38 
	`va_íd
(
¨g
);

40  
d⁄e
;

41 
	}
}

	@oslib/asprintf.h

1 #i‚de‡
FIO_ASPRINTF_H


2 
	#FIO_ASPRINTF_H


	)

4 
	~<°d¨g.h
>

6 #i‚de‡
CONFIG_HAVE_VASPRINTF


7 
va•rötf
(**
°Ω
, c⁄° *
fmt
, 
va_li°
 
≠
);

9 #i‚de‡
CONFIG_HAVE_ASPRINTF


10 
a•rötf
(**
°Ω
, c⁄° *
fmt
, ...);

	@oslib/blkzoned.h

6 #i‚de‡
FIO_BLKZONED_H


7 
	#FIO_BLKZONED_H


	)

9 
	~"zbd_ty≥s.h
"

11 #ifde‡
CONFIG_HAS_BLKZONED


12 
blkz⁄ed_gë_z⁄ed_modñ
(
thªad_d©a
 *
td
,

13 
fio_fûe
 *
f
, 
zbd_z⁄ed_modñ
 *
modñ
);

14 
blkz⁄ed_ªp‹t_z⁄es
(
thªad_d©a
 *
td
,

15 
fio_fûe
 *
f
, 
uöt64_t
 
off£t
,

16 
zbd_z⁄e
 *
z⁄es
, 
ƒ_z⁄es
);

17 
blkz⁄ed_ª£t_wp
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

18 
uöt64_t
 
off£t
, uöt64_à
Àngth
);

19 
blkz⁄ed_gë_max_›í_z⁄es
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

20 *
max_›í_z⁄es
);

25 
ölöe
 
	$blkz⁄ed_gë_z⁄ed_modñ
(
thªad_d©a
 *
td
,

26 
fio_fûe
 *
f
, 
zbd_z⁄ed_modñ
 *
modñ
)

31 i‡(
f
->
fûëy≥
 =
FIO_TYPE_BLOCK
) {

32 *
modñ
 = 
ZBD_NONE
;

36  -
ENODEV
;

37 
	}
}

38 
ölöe
 
	$blkz⁄ed_ªp‹t_z⁄es
(
thªad_d©a
 *
td
,

39 
fio_fûe
 *
f
, 
uöt64_t
 
off£t
,

40 
zbd_z⁄e
 *
z⁄es
, 
ƒ_z⁄es
)

42  -
EIO
;

43 
	}
}

44 
ölöe
 
	$blkz⁄ed_ª£t_wp
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

45 
uöt64_t
 
off£t
, uöt64_à
Àngth
)

47  -
EIO
;

48 
	}
}

49 
ölöe
 
	$blkz⁄ed_gë_max_›í_z⁄es
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

50 *
max_›í_z⁄es
)

52  -
EIO
;

53 
	}
}

	@oslib/getopt.h

1 #ifde‡
CONFIG_GETOPT_LONG_ONLY


3 
	~<gë›t.h
>

7 #i‚de‡
_GETOPT_H


8 
	#_GETOPT_H


	)

10 
	s›ti⁄
 {

11 c⁄° *
	m«me
;

12 
	mhas_¨g
;

13 *
	mÊag
;

14 
	mvÆ
;

18 
	mno_¨gumít
 = 0,

19 
	mªquúed_¨gumít
 = 1,

20 
	m›ti⁄Æ_¨gumít
 = 2,

23 
gë›t_l⁄g_⁄ly
(, *c⁄° *, c⁄° *, c⁄° 
›ti⁄
 *, *);

	@oslib/getopt_long.c

13 
	~<°döt.h
>

14 
	~<uni°d.h
>

15 
	~<°rög.h
>

17 
	~"gë›t.h
"

19 *
	g›èrg
;

20 
	g›töd
, 
	g›ãº
, 
	g›t›t
;

22 
	sgë›t_¥iv©e_°©e
 {

23 c⁄° *
	m›çå
;

24 c⁄° *
	mœ°_›t°rög
;

25 *c⁄° *
	mœ°_¨gv
;

26 } 
	gpvt
;

28 
ölöe
 c⁄° *
	$›ti⁄_m©ches
(c⁄° *
¨g_°r
,

29 c⁄° *
›t_«me
, 
sm©ch
)

31 *
¨g_°r
 != '\0' && *arg_str != '=') {

32 i‡(*
¨g_°r
++ !*
›t_«me
++)

33  
NULL
;

36 i‡(*
›t_«me
 && !
sm©ch
)

37  
NULL
;

39  
¨g_°r
;

40 
	}
}

42 
	$gë›t_l⁄g_⁄ly
(
¨gc
, *c⁄° *
¨gv
, c⁄° *
›t°rög
,

43 c⁄° 
›ti⁄
 *
l⁄g›ts
, *
l⁄gödex
)

45 c⁄° *
ˇrg
;

46 c⁄° *
o•å
;

47 
›t
;

49 
›èrg
 = 
NULL
;

58 i‡(
›t°rög
 !
pvt
.
œ°_›t°rög
 || 
¨gv
 !pvt.
œ°_¨gv
 ||

59 
›töd
 < 1 || o±öd > 
¨gc
) {

61 
pvt
.
œ°_›t°rög
 = 
›t°rög
;

62 
pvt
.
œ°_¨gv
 = 
¨gv
;

63 
›töd
 = 1;

64 
pvt
.
›çå
 = 
NULL
;

67 
ˇrg
 = 
¨gv
[
›töd
];

71 i‡(!
ˇrg
 || carg[0] != '-' || !carg[1])

74 i‡(
ˇrg
[1] == '-') {

75 c⁄° 
›ti⁄
 *
lo
;

76 c⁄° *
›t_íd
 = 
NULL
;

78 
›töd
++;

81 i‡(!
ˇrg
[2]) {

86 
lo
 = 
l⁄g›ts
;Üo->
«me
;Üo++) {

87 
›t_íd
 = 
	`›ti⁄_m©ches
(
ˇrg
+2, 
lo
->
«me
, 0);

88 i‡(
›t_íd
)

97 i‡(!
›t_íd
) {

98 c⁄° 
›ti⁄
 *
lo_m©ch
 = 
NULL
;

100 
lo
 = 
l⁄g›ts
;Üo->
«me
;Üo++) {

101 c⁄° *
ªt
;

103 
ªt
 = 
	`›ti⁄_m©ches
(
ˇrg
+2, 
lo
->
«me
, 1);

104 i‡(!
ªt
)

106 i‡(!
›t_íd
) {

107 
›t_íd
 = 
ªt
;

108 
lo_m©ch
 = 
lo
;

110 
›t_íd
 = 
NULL
;

114 i‡(!
›t_íd
)

116 
lo
 = 
lo_m©ch
;

119 i‡(
l⁄gödex
)

120 *
l⁄gödex
 = 
lo
-
l⁄g›ts
;

122 i‡(*
›t_íd
 == '=') {

123 i‡(
lo
->
has_¨g
)

124 
›èrg
 = (*)
›t_íd
+1;

127 } i‡(
lo
->
has_¨g
 == 1) {

128 i‡(!(
›èrg
 = 
¨gv
[
›töd
]))

130 
›töd
++;

133 i‡(
lo
->
Êag
) {

134 *
lo
->
Êag
 =Üo->
vÆ
;

137  
lo
->
vÆ
;

141 i‡((
uöçå_t
Ë(
pvt
.
›çå
 - 
ˇrg
Ë> (uöçå_tË
	`°æí
(carg)) {

143 
pvt
.
›çå
 = 
ˇrg
 + 1;

146 
›t
 = *
pvt
.
›çå
++;

148 i‡(
›t
 !':' && (
o•å
 = 
	`°rchr
(
›t°rög
, opt))) {

149 i‡(
o•å
[1] == ':') {

150 i‡(*
pvt
.
›çå
) {

153 
›èrg
 = (*)
pvt
.
›çå
;

154 
›töd
++;

158 i‡(
o•å
[2] == ':') {

159 i‡(
¨gv
[
›töd
 + 1]) {

160 
›èrg
 = (*)
¨gv
[
›töd
+1];

161 
›töd
 += 2;

163 
›èrg
 = 
NULL
;

164 
›töd
++;

166  
›t
;

167 } i‡(
¨gv
[
›töd
 + 1]) {

168 
›èrg
 = (*)
¨gv
[
›töd
+1];

169 
›töd
 += 2;

172 
›töd
++;

173  (
›t°rög
[0] == ':')

177  
›t
;

182 i‡(!*
pvt
.
›çå
)

183 
›töd
++;

184  
›t
;

188 
›t›t
 = 
›t
;

189 i‡(!*
pvt
.
›çå
)

190 
›töd
++;

193 
	}
}

	@oslib/inet_aton.c

1 
	~"öë_©⁄.h
"

3 
	$öë_©⁄
(c⁄° *
˝
, 
ö_addr
 *
öp
)

5  
	`öë_±⁄
(
AF_INET
, 
˝
, 
öp
);

6 
	}
}

	@oslib/inet_aton.h

1 #i‚de‡
FIO_INET_ATON_LIB_H


2 
	#FIO_INET_ATON_LIB_H


	)

4 
	~<¨∑/öë.h
>

6 
öë_©⁄
(c⁄° *
˝
, 
ö_addr
 *
öp
);

	@oslib/libmtd.c

26 
	~<limôs.h
>

27 
	~<°dlib.h
>

28 
	~<°dio.h
>

29 
	~<î∫o.h
>

30 
	~<uni°d.h
>

31 
	~<f˙é.h
>

32 
	~<dúít.h
>

33 
	~<sys/ty≥s.h
>

34 
	~<sys/°©.h
>

35 
	~<sys/io˘l.h
>

36 
	~<öây≥s.h
>

38 
	~"../compûî/compûî.h
"

40 
	~<mtd/mtd-u£r.h
>

41 
	~"libmtd.h
"

43 
	~"libmtd_öt.h
"

44 
	~"libmtd_comm⁄.h
"

54 *
	$mk∑th
(c⁄° *
∑th
, c⁄° *
«me
)

56 *
n
;

57 
size_t
 
Àn1
 = 
	`°æí
(
∑th
);

58 
size_t
 
Àn2
 = 
	`°æí
(
«me
);

60 
n
 = 
	`xmÆloc
(
Àn1
 + 
Àn2
 + 6);

62 
	`mem˝y
(
n
, 
∑th
, 
Àn1
);

63 i‡(
n
[
Àn1
 - 1] != '/')

64 
n
[
Àn1
++] = '/';

66 
	`mem˝y
(
n
 + 
Àn1
, 
«me
, 
Àn2
 + 1);

67  
n
;

68 
	}
}

80 
	$ªad_d©a
(c⁄° *
fûe
, *
buf
, 
buf_Àn
)

82 
fd
, 
rd
, 
tmp
, 
tmp1
;

84 
fd
 = 
	`›í
(
fûe
, 
O_RDONLY
 | 
O_CLOEXEC
);

85 i‡(
fd
 == -1)

88 
rd
 = 
	`ªad
(
fd
, 
buf
, 
buf_Àn
);

89 i‡(
rd
 == -1) {

90 
	`sys_îrmsg
("ˇ¬ŸÑód \"%s\"", 
fûe
);

91 
out_îr‹
;

94 i‡(
rd
 =
buf_Àn
) {

95 
	`îrmsg
("c⁄ã¡†o‡\"%s\" i†toÿl⁄g", 
fûe
);

96 
î∫o
 = 
EINVAL
;

97 
out_îr‹
;

100 ((*)
buf
)[
rd
] = '\0';

103 
tmp1
 = 
	`ªad
(
fd
, &
tmp
, 1);

104 i‡(
tmp1
 == 1) {

105 
	`sys_îrmsg
("ˇ¬ŸÑód \"%s\"", 
fûe
);

106 
out_îr‹
;

108 i‡(
tmp1
) {

109 
	`îrmsg
("file \"%s\" containsÅoo much data (> %d bytes)",

110 
fûe
, 
buf_Àn
);

111 
î∫o
 = 
EINVAL
;

112 
out_îr‹
;

115 i‡(
	`˛o£
(
fd
)) {

116 
	`sys_îrmsg
("˛o£ faûed o¿\"%s\"", 
fûe
);

120  
rd
;

122 
out_îr‹
:

123 
	`˛o£
(
fd
);

125 
	}
}

135 
	$ªad_maj‹
(c⁄° *
fûe
, *
maj‹
, *
mö‹
)

137 
ªt
;

138 
buf
[50];

140 
ªt
 = 
	`ªad_d©a
(
fûe
, 
buf
, 50);

141 i‡(
ªt
 < 0)

142  
ªt
;

144 
ªt
 = 
	`ssˇnf
(
buf
, "%d:%d\n", 
maj‹
, 
mö‹
);

145 i‡(
ªt
 != 2) {

146 
î∫o
 = 
EINVAL
;

147  
	`îrmsg
("\"%s\" d€†nŸ havêmaj‹:mö‹ f‹m©", 
fûe
);

150 i‡(*
maj‹
 < 0 || *
mö‹
 < 0) {

151 
î∫o
 = 
EINVAL
;

152  
	`îrmsg
("bad major:minor %d:%d in \"%s\"",

153 *
maj‹
, *
mö‹
, 
fûe
);

157 
	}
}

168 
	$dev_gë_maj‹
(
libmtd
 *
lib
, 
mtd_num
, *
maj‹
, *
mö‹
)

170 
fûe
[
	`°æí
(
lib
->
mtd_dev
) + 50];

172 
	`•rötf
(
fûe
, 
lib
->
mtd_dev
, 
mtd_num
);

173  
	`ªad_maj‹
(
fûe
, 
maj‹
, 
mö‹
);

174 
	}
}

186 
	$dev_ªad_d©a
(c⁄° *
∑â
, 
mtd_num
, *
buf
, 
buf_Àn
)

188 
fûe
[
	`°æí
(
∑â
) + 100];

190 
	`•rötf
(
fûe
, 
∑â
, 
mtd_num
);

191  
	`ªad_d©a
(
fûe
, 
buf
, 
buf_Àn
);

192 
	}
}

203 
	$ªad_hex_Œ
(c⁄° *
fûe
, *
vÆue
)

205 
fd
, 
rd
;

206 
buf
[50];

208 
fd
 = 
	`›í
(
fûe
, 
O_RDONLY
 | 
O_CLOEXEC
);

209 i‡(
fd
 == -1)

212 
rd
 = 
	`ªad
(
fd
, 
buf
, (buf));

213 i‡(
rd
 == -1) {

214 
	`sys_îrmsg
("ˇ¬ŸÑód \"%s\"", 
fûe
);

215 
out_îr‹
;

217 i‡(
rd
 =(
buf
)) {

218 
	`îrmsg
("c⁄ã¡†o‡\"%s\" i†toÿl⁄g", 
fûe
);

219 
î∫o
 = 
EINVAL
;

220 
out_îr‹
;

222 
buf
[
rd
] = '\0';

224 i‡(
	`ssˇnf
(
buf
, "%Œx\n", 
vÆue
) != 1) {

225 
	`îrmsg
("ˇ¬ŸÑód i¡egî from \"%s\"\n", 
fûe
);

226 
î∫o
 = 
EINVAL
;

227 
out_îr‹
;

230 i‡(*
vÆue
 < 0) {

231 
	`îrmsg
("√g©ivêvÆuê%Œd i¿\"%s\"", *
vÆue
, 
fûe
);

232 
î∫o
 = 
EINVAL
;

233 
out_îr‹
;

236 i‡(
	`˛o£
(
fd
))

237  
	`sys_îrmsg
("˛o£ faûed o¿\"%s\"", 
fûe
);

241 
out_îr‹
:

242 
	`˛o£
(
fd
);

244 
	}
}

255 
	$ªad_pos_Œ
(c⁄° *
fûe
, *
vÆue
)

257 
fd
, 
rd
;

258 
buf
[50];

260 
fd
 = 
	`›í
(
fûe
, 
O_RDONLY
 | 
O_CLOEXEC
);

261 i‡(
fd
 == -1)

264 
rd
 = 
	`ªad
(
fd
, 
buf
, 50);

265 i‡(
rd
 == -1) {

266 
	`sys_îrmsg
("ˇ¬ŸÑód \"%s\"", 
fûe
);

267 
out_îr‹
;

269 i‡(
rd
 == 50) {

270 
	`îrmsg
("c⁄ã¡†o‡\"%s\" i†toÿl⁄g", 
fûe
);

271 
î∫o
 = 
EINVAL
;

272 
out_îr‹
;

275 i‡(
	`ssˇnf
(
buf
, "%Œd\n", 
vÆue
) != 1) {

276 
	`îrmsg
("ˇ¬ŸÑód i¡egî from \"%s\"\n", 
fûe
);

277 
î∫o
 = 
EINVAL
;

278 
out_îr‹
;

281 i‡(*
vÆue
 < 0) {

282 
	`îrmsg
("√g©ivêvÆuê%Œd i¿\"%s\"", *
vÆue
, 
fûe
);

283 
î∫o
 = 
EINVAL
;

284 
out_îr‹
;

287 i‡(
	`˛o£
(
fd
))

288  
	`sys_îrmsg
("˛o£ faûed o¿\"%s\"", 
fûe
);

292 
out_îr‹
:

293 
	`˛o£
(
fd
);

295 
	}
}

305 
	$ªad_hex_öt
(c⁄° *
fûe
, *
vÆue
)

307 
ªs
;

309 i‡(
	`ªad_hex_Œ
(
fûe
, &
ªs
))

313 i‡(
ªs
 > 
INT_MAX
 ||Ñe†< 
INT_MIN
) {

314 
	`îrmsg
("value %lldÑead from file \"%s\" is out ofÑange",

315 
ªs
, 
fûe
);

316 
î∫o
 = 
EINVAL
;

320 *
vÆue
 = 
ªs
;

322 
	}
}

332 
	$ªad_pos_öt
(c⁄° *
fûe
, *
vÆue
)

334 
ªs
;

336 i‡(
	`ªad_pos_Œ
(
fûe
, &
ªs
))

340 i‡(
ªs
 > 
INT_MAX
) {

341 
	`îrmsg
("value %lldÑead from file \"%s\" is out ofÑange",

342 
ªs
, 
fûe
);

343 
î∫o
 = 
EINVAL
;

347 *
vÆue
 = 
ªs
;

349 
	}
}

359 
	$dev_ªad_hex_öt
(c⁄° *
∑â
, 
mtd_num
, *
vÆue
)

361 
fûe
[
	`°æí
(
∑â
) + 50];

363 
	`•rötf
(
fûe
, 
∑â
, 
mtd_num
);

364  
	`ªad_hex_öt
(
fûe
, 
vÆue
);

365 
	}
}

375 
	$dev_ªad_pos_öt
(c⁄° *
∑â
, 
mtd_num
, *
vÆue
)

377 
fûe
[
	`°æí
(
∑â
) + 50];

379 
	`•rötf
(
fûe
, 
∑â
, 
mtd_num
);

380  
	`ªad_pos_öt
(
fûe
, 
vÆue
);

381 
	}
}

391 
	$dev_ªad_pos_Œ
(c⁄° *
∑â
, 
mtd_num
, *
vÆue
)

393 
fûe
[
	`°æí
(
∑â
) + 50];

395 
	`•rötf
(
fûe
, 
∑â
, 
mtd_num
);

396  
	`ªad_pos_Œ
(
fûe
, 
vÆue
);

397 
	}
}

406 
	$ty≥_°r2öt
(c⁄° *
°r
)

408 i‡(!
	`°rcmp
(
°r
, "nand"))

409  
MTD_NANDFLASH
;

410 i‡(!
	`°rcmp
(
°r
, "mlc-nand"))

411  
MTD_MLCNANDFLASH
;

412 i‡(!
	`°rcmp
(
°r
, "nor"))

413  
MTD_NORFLASH
;

414 i‡(!
	`°rcmp
(
°r
, "rom"))

415  
MTD_ROM
;

416 i‡(!
	`°rcmp
(
°r
, "absent"))

417  
MTD_ABSENT
;

418 i‡(!
	`°rcmp
(
°r
, "dataflash"))

419  
MTD_DATAFLASH
;

420 i‡(!
	`°rcmp
(
°r
, "ram"))

421  
MTD_RAM
;

422 i‡(!
	`°rcmp
(
°r
, "ubi"))

423  
MTD_UBIVOLUME
;

425 
	}
}

435 
	$dev_node2num
(
libmtd
 *
lib
, c⁄° *
node
, *
mtd_num
)

437 
°©
 
°
;

438 
i
, 
mjr
, 
mƒ
;

439 
mtd_öfo
 
öfo
;

441 i‡(
	`°©
(
node
, &
°
))

442  
	`sys_îrmsg
("ˇ¬Ÿ gë inf‹m©i⁄ábouà\"%s\"", 
node
);

444 i‡(!
	`S_ISCHR
(
°
.
°_mode
)) {

445 
	`îrmsg
("\"%s\" i†nŸá ch¨a˘î devi˚", 
node
);

446 
î∫o
 = 
EINVAL
;

450 
mjr
 = 
	`maj‹
(
°
.
°_rdev
);

451 
mƒ
 = 
	`mö‹
(
°
.
°_rdev
);

453 i‡(
	`mtd_gë_öfo
((
libmtd_t
 *)
lib
, &
öfo
))

456 
i
 = 
öfo
.
lowe°_mtd_num
; i <öfo.
highe°_mtd_num
; i++) {

457 
mjr1
, 
mƒ1
, 
ªt
;

459 
ªt
 = 
	`dev_gë_maj‹
(
lib
, 
i
, &
mjr1
, &
mƒ1
);

460 i‡(
ªt
) {

461 i‡(
î∫o
 =
ENOENT
)

463 i‡(!
î∫o
)

468 i‡(
mjr1
 =
mjr
 && 
mƒ1
 =
mƒ
) {

469 
î∫o
 = 0;

470 *
mtd_num
 = 
i
;

475 
î∫o
 = 
ENODEV
;

477 
	}
}

495 
	$sysfs_is_suµ‹ãd
(
libmtd
 *
lib
)

497 
fd
, 
num
 = -1;

498 
DIR
 *
sysfs_mtd
;

499 
fûe
[
	`°æí
(
lib
->
mtd_«me
) + 10];

501 
sysfs_mtd
 = 
	`›ídú
(
lib
->sysfs_mtd);

502 i‡(!
sysfs_mtd
) {

503 i‡(
î∫o
 =
ENOENT
) {

504 
î∫o
 = 0;

507  
	`sys_îrmsg
("ˇ¬Ÿ o≥¿\"%s\"", 
lib
->
sysfs_mtd
);

515 
ªt
, 
mtd_num
;

516 
tmp_buf
[256];

517 
dúít
 *dirent;

519 
dúít
 = 
	`ªaddú
(
sysfs_mtd
);

520 i‡(!
dúít
)

523 i‡(
	`°æí
(
dúít
->
d_«me
) >= 255) {

524 
	`îrmsg
("invalidÉntry in %s: \"%s\"",

525 
lib
->
sysfs_mtd
, 
dúít
->
d_«me
);

526 
î∫o
 = 
EINVAL
;

527 
	`˛o£dú
(
sysfs_mtd
);

531 
ªt
 = 
	`ssˇnf
(
dúít
->
d_«me
, 
MTD_NAME_PATT
"%s",

532 &
mtd_num
, 
tmp_buf
);

533 i‡(
ªt
 == 1) {

534 
num
 = 
mtd_num
;

539 i‡(
	`˛o£dú
(
sysfs_mtd
))

540  
	`sys_îrmsg
("˛o£dú faûed o¿\"%s\"", 
lib
->
sysfs_mtd
);

542 i‡(
num
 == -1)

546 
	`•rötf
(
fûe
, 
lib
->
mtd_«me
, 
num
);

547 
fd
 = 
	`›í
(
fûe
, 
O_RDONLY
 | 
O_CLOEXEC
);

548 i‡(
fd
 == -1)

551 i‡(
	`˛o£
(
fd
)) {

552 
	`sys_îrmsg
("˛o£ faûed o¿\"%s\"", 
fûe
);

557 
	}
}

559 
libmtd_t
 
	$libmtd_›í
()

561 
libmtd
 *
lib
;

563 
lib
 = 
	`xzÆloc
((*lib));

565 
lib
->
offs64_io˘ls
 = 
OFFS64_IOCTLS_UNKNOWN
;

567 
lib
->
sysfs_mtd
 = 
	`mk∑th
("/sys", 
SYSFS_MTD
);

568 i‡(!
lib
->
sysfs_mtd
)

569 
out_îr‹
;

571 
lib
->
mtd
 = 
	`mk∑th
÷ib->
sysfs_mtd
, 
MTD_NAME_PATT
);

572 i‡(!
lib
->
mtd
)

573 
out_îr‹
;

575 
lib
->
mtd_«me
 = 
	`mk∑th
÷ib->
mtd
, 
MTD_NAME
);

576 i‡(!
lib
->
mtd_«me
)

577 
out_îr‹
;

579 i‡(!
	`sysfs_is_suµ‹ãd
(
lib
)) {

580 
	`‰ì
(
lib
->
mtd
);

581 
	`‰ì
(
lib
->
sysfs_mtd
);

582 
	`‰ì
(
lib
->
mtd_«me
);

583 
lib
->
mtd_«me
 =Üib->
mtd
 =Üib->
sysfs_mtd
 = 
NULL
;

584  
lib
;

587 
lib
->
mtd_dev
 = 
	`mk∑th
÷ib->
mtd
, 
MTD_DEV
);

588 i‡(!
lib
->
mtd_dev
)

589 
out_îr‹
;

591 
lib
->
mtd_ty≥
 = 
	`mk∑th
÷ib->
mtd
, 
MTD_TYPE
);

592 i‡(!
lib
->
mtd_ty≥
)

593 
out_îr‹
;

595 
lib
->
mtd_eb_size
 = 
	`mk∑th
÷ib->
mtd
, 
MTD_EB_SIZE
);

596 i‡(!
lib
->
mtd_eb_size
)

597 
out_îr‹
;

599 
lib
->
mtd_size
 = 
	`mk∑th
÷ib->
mtd
, 
MTD_SIZE
);

600 i‡(!
lib
->
mtd_size
)

601 
out_îr‹
;

603 
lib
->
mtd_mö_io_size
 = 
	`mk∑th
÷ib->
mtd
, 
MTD_MIN_IO_SIZE
);

604 i‡(!
lib
->
mtd_mö_io_size
)

605 
out_îr‹
;

607 
lib
->
mtd_sub∑ge_size
 = 
	`mk∑th
÷ib->
mtd
, 
MTD_SUBPAGE_SIZE
);

608 i‡(!
lib
->
mtd_sub∑ge_size
)

609 
out_îr‹
;

611 
lib
->
mtd_oob_size
 = 
	`mk∑th
÷ib->
mtd
, 
MTD_OOB_SIZE
);

612 i‡(!
lib
->
mtd_oob_size
)

613 
out_îr‹
;

615 
lib
->
mtd_ªgi⁄_˙t
 = 
	`mk∑th
÷ib->
mtd
, 
MTD_REGION_CNT
);

616 i‡(!
lib
->
mtd_ªgi⁄_˙t
)

617 
out_îr‹
;

619 
lib
->
mtd_Êags
 = 
	`mk∑th
÷ib->
mtd
, 
MTD_FLAGS
);

620 i‡(!
lib
->
mtd_Êags
)

621 
out_îr‹
;

623 
lib
->
sysfs_suµ‹ãd
 = 1;

624  
lib
;

626 
out_îr‹
:

627 
	`libmtd_˛o£
((
libmtd_t
)
lib
);

628  
NULL
;

629 
	}
}

631 
	$libmtd_˛o£
(
libmtd_t
 
desc
)

633 
libmtd
 *
lib
 = (libmtd *)
desc
;

635 
	`‰ì
(
lib
->
mtd_Êags
);

636 
	`‰ì
(
lib
->
mtd_ªgi⁄_˙t
);

637 
	`‰ì
(
lib
->
mtd_oob_size
);

638 
	`‰ì
(
lib
->
mtd_sub∑ge_size
);

639 
	`‰ì
(
lib
->
mtd_mö_io_size
);

640 
	`‰ì
(
lib
->
mtd_size
);

641 
	`‰ì
(
lib
->
mtd_eb_size
);

642 
	`‰ì
(
lib
->
mtd_ty≥
);

643 
	`‰ì
(
lib
->
mtd_dev
);

644 
	`‰ì
(
lib
->
mtd_«me
);

645 
	`‰ì
(
lib
->
mtd
);

646 
	`‰ì
(
lib
->
sysfs_mtd
);

647 
	`‰ì
(
lib
);

648 
	}
}

650 
	$mtd_dev_¥e£¡
(
libmtd_t
 
desc
, 
mtd_num
) {

651 
°©
 
°
;

652 
libmtd
 *
lib
 = (libmtd *)
desc
;

654 i‡(!
lib
->
sysfs_suµ‹ãd
) {

655  
	`Àgacy_dev_¥e£¡
(
mtd_num
) == 1;

657 
fûe
[
	`°æí
(
lib
->
mtd
) + 10];

659 
	`•rötf
(
fûe
, 
lib
->
mtd
, 
mtd_num
);

660  !
	`°©
(
fûe
, &
°
);

662 
	}
}

664 
	$mtd_gë_öfo
(
libmtd_t
 
desc
, 
mtd_öfo
 *
öfo
)

666 
DIR
 *
sysfs_mtd
;

667 
dúít
 *dirent;

668 
libmtd
 *
lib
 = (libmtd *)
desc
;

670 
	`mem£t
(
öfo
, 0, (
mtd_öfo
));

672 i‡(!
lib
->
sysfs_suµ‹ãd
)

673  
	`Àgacy_mtd_gë_öfo
(
öfo
);

675 
öfo
->
sysfs_suµ‹ãd
 = 1;

681 
sysfs_mtd
 = 
	`›ídú
(
lib
->sysfs_mtd);

682 i‡(!
sysfs_mtd
) {

683 i‡(
î∫o
 =
ENOENT
) {

684 
î∫o
 = 
ENODEV
;

687  
	`sys_îrmsg
("ˇ¬Ÿ o≥¿\"%s\"", 
lib
->
sysfs_mtd
);

690 
öfo
->
lowe°_mtd_num
 = 
INT_MAX
;

692 
mtd_num
, 
ªt
;

693 
tmp_buf
[256];

695 
î∫o
 = 0;

696 
dúít
 = 
	`ªaddú
(
sysfs_mtd
);

697 i‡(!
dúít
)

700 i‡(
	`°æí
(
dúít
->
d_«me
) >= 255) {

701 
	`îrmsg
("invalidÉntry in %s: \"%s\"",

702 
lib
->
sysfs_mtd
, 
dúít
->
d_«me
);

703 
î∫o
 = 
EINVAL
;

704 
out_˛o£
;

707 
ªt
 = 
	`ssˇnf
(
dúít
->
d_«me
, 
MTD_NAME_PATT
"%s",

708 &
mtd_num
, 
tmp_buf
);

709 i‡(
ªt
 == 1) {

710 
öfo
->
mtd_dev_˙t
 += 1;

711 i‡(
mtd_num
 > 
öfo
->
highe°_mtd_num
)

712 
öfo
->
highe°_mtd_num
 = 
mtd_num
;

713 i‡(
mtd_num
 < 
öfo
->
lowe°_mtd_num
)

714 
öfo
->
lowe°_mtd_num
 = 
mtd_num
;

718 i‡(!
dúít
 && 
î∫o
) {

719 
	`sys_îrmsg
("ªaddú faûed o¿\"%s\"", 
lib
->
sysfs_mtd
);

720 
out_˛o£
;

723 i‡(
	`˛o£dú
(
sysfs_mtd
))

724  
	`sys_îrmsg
("˛o£dú faûed o¿\"%s\"", 
lib
->
sysfs_mtd
);

726 i‡(
öfo
->
lowe°_mtd_num
 =
INT_MAX
)

727 
öfo
->
lowe°_mtd_num
 = 0;

731 
out_˛o£
:

732 
	`˛o£dú
(
sysfs_mtd
);

734 
	}
}

736 
	$mtd_gë_dev_öfo1
(
libmtd_t
 
desc
, 
mtd_num
, 
mtd_dev_öfo
 *
mtd
)

738 
ªt
;

739 
libmtd
 *
lib
 = (libmtd *)
desc
;

741 
	`mem£t
(
mtd
, 0, (
mtd_dev_öfo
));

742 
mtd
->
mtd_num
 = mtd_num;

744 i‡(!
	`mtd_dev_¥e£¡
(
desc
, 
mtd_num
)) {

745 
î∫o
 = 
ENODEV
;

747 } i‡(!
lib
->
sysfs_suµ‹ãd
)

748  
	`Àgacy_gë_dev_öfo1
(
mtd_num
, 
mtd
);

750 i‡(
	`dev_gë_maj‹
(
lib
, 
mtd_num
, &
mtd
->
maj‹
, &mtd->
mö‹
))

753 
ªt
 = 
	`dev_ªad_d©a
(
lib
->
mtd_«me
, 
mtd_num
, &
mtd
->
«me
,

754 
MTD_NAME_MAX
 + 1);

755 i‡(
ªt
 < 0)

757 ((*)
mtd
->
«me
)[
ªt
 - 1] = '\0';

759 
ªt
 = 
	`dev_ªad_d©a
(
lib
->
mtd_ty≥
, 
mtd_num
, &
mtd
->
ty≥_°r
,

760 
MTD_TYPE_MAX
 + 1);

761 i‡(
ªt
 < 0)

763 ((*)
mtd
->
ty≥_°r
)[
ªt
 - 1] = '\0';

765 i‡(
	`dev_ªad_pos_öt
(
lib
->
mtd_eb_size
, 
mtd_num
, &
mtd
->
eb_size
))

767 i‡(
	`dev_ªad_pos_Œ
(
lib
->
mtd_size
, 
mtd_num
, &
mtd
->
size
))

769 i‡(
	`dev_ªad_pos_öt
(
lib
->
mtd_mö_io_size
, 
mtd_num
, &
mtd
->
mö_io_size
))

771 i‡(
	`dev_ªad_pos_öt
(
lib
->
mtd_sub∑ge_size
, 
mtd_num
, &
mtd
->
sub∑ge_size
))

773 i‡(
	`dev_ªad_pos_öt
(
lib
->
mtd_oob_size
, 
mtd_num
, &
mtd
->
oob_size
))

775 i‡(
	`dev_ªad_pos_öt
(
lib
->
mtd_ªgi⁄_˙t
, 
mtd_num
, &
mtd
->
ªgi⁄_˙t
))

777 i‡(
	`dev_ªad_hex_öt
(
lib
->
mtd_Êags
, 
mtd_num
, &
ªt
))

779 
mtd
->
wrôabÀ
 = !!(
ªt
 & 
MTD_WRITEABLE
);

781 
mtd
->
eb_˙t
 = mtd->
size
 / mtd->
eb_size
;

782 
mtd
->
ty≥
 = 
	`ty≥_°r2öt
(mtd->
ty≥_°r
);

783 
mtd
->
bb_Ælowed
 = !!(mtd->
ty≥
 =
MTD_NANDFLASH
 ||

784 
mtd
->
ty≥
 =
MTD_MLCNANDFLASH
);

787 
	}
}

789 
	$mtd_gë_dev_öfo
(
libmtd_t
 
desc
, c⁄° *
node
, 
mtd_dev_öfo
 *
mtd
)

791 
mtd_num
;

792 
libmtd
 *
lib
 = (libmtd *)
desc
;

794 i‡(!
lib
->
sysfs_suµ‹ãd
)

795  
	`Àgacy_gë_dev_öfo
(
node
, 
mtd
);

797 i‡(
	`dev_node2num
(
lib
, 
node
, &
mtd_num
))

800  
	`mtd_gë_dev_öfo1
(
desc
, 
mtd_num
, 
mtd
);

801 
	}
}

803 
ölöe
 
	$mtd_io˘l_îr‹
(c⁄° 
mtd_dev_öfo
 *
mtd
, 
eb
,

804 c⁄° *
§eq
)

806  
	`sys_îrmsg
("%s ioctl failed forÉraseblock %d (mtd%d)",

807 
§eq
, 
eb
, 
mtd
->
mtd_num
);

808 
	}
}

810 
	$mtd_vÆid_îa£_block
(c⁄° 
mtd_dev_öfo
 *
mtd
, 
eb
)

812 i‡(
eb
 < 0 ||Éb >
mtd
->
eb_˙t
) {

813 
	`îrmsg
("badÉraseblockÇumber %d, mtd%d has %dÉraseblocks",

814 
eb
, 
mtd
->
mtd_num
, mtd->
eb_˙t
);

815 
î∫o
 = 
EINVAL
;

819 
	}
}

821 
	$mtd_xlock
(c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
, 
eb
, 
ªq
,

822 c⁄° *
§eq
)

824 
ªt
;

825 
îa£_öfo_u£r
 
ei
;

827 
ªt
 = 
	`mtd_vÆid_îa£_block
(
mtd
, 
eb
);

828 i‡(
ªt
)

829  
ªt
;

831 
ei
.
°¨t
 = 
eb
 * 
mtd
->
eb_size
;

832 
ei
.
Àngth
 = 
mtd
->
eb_size
;

834 
ªt
 = 
	`io˘l
(
fd
, 
ªq
, &
ei
);

835 i‡(
ªt
 < 0)

836  
	`mtd_io˘l_îr‹
(
mtd
, 
eb
, 
§eq
);

839 
	}
}

840 
	#mtd_xlock
(
mtd
, 
fd
, 
eb
, 
ªq
Ë
	`mtd_xlock
(mtd, fd,Éb,Ñeq, #ªq)

	)

842 
	$mtd_lock
(c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
, 
eb
)

844  
	`mtd_xlock
(
mtd
, 
fd
, 
eb
, 
MEMLOCK
);

845 
	}
}

847 
	$mtd_u∆ock
(c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
, 
eb
)

849  
	`mtd_xlock
(
mtd
, 
fd
, 
eb
, 
MEMUNLOCK
);

850 
	}
}

852 
	$mtd_îa£
(
libmtd_t
 
desc
, c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
, 
eb
)

854 
ªt
;

855 
libmtd
 *
lib
 = (libmtd *)
desc
;

856 
îa£_öfo_u£r64
 
ei64
;

857 
îa£_öfo_u£r
 
ei
;

859 
ªt
 = 
	`mtd_vÆid_îa£_block
(
mtd
, 
eb
);

860 i‡(
ªt
)

861  
ªt
;

863 
ei64
.
°¨t
 = (
__u64
)
eb
 * 
mtd
->
eb_size
;

864 
ei64
.
Àngth
 = 
mtd
->
eb_size
;

866 i‡(
lib
->
offs64_io˘ls
 =
OFFS64_IOCTLS_SUPPORTED
 ||

867 
lib
->
offs64_io˘ls
 =
OFFS64_IOCTLS_UNKNOWN
) {

868 
ªt
 = 
	`io˘l
(
fd
, 
MEMERASE64
, &
ei64
);

869 i‡(
ªt
 == 0)

870  
ªt
;

872 i‡(
î∫o
 !
ENOTTY
 ||

873 
lib
->
offs64_io˘ls
 !
OFFS64_IOCTLS_UNKNOWN
)

874  
	`mtd_io˘l_îr‹
(
mtd
, 
eb
, "MEMERASE64");

881 
lib
->
offs64_io˘ls
 = 
OFFS64_IOCTLS_NOT_SUPPORTED
;

884 i‡(
ei64
.
°¨t
 +Éi64.
Àngth
 > 0xFFFFFFFF) {

885 
	`îrmsg
("this system canáddress only %uÉraseblocks",

886 0xFFFFFFFFU / 
mtd
->
eb_size
);

887 
î∫o
 = 
EINVAL
;

891 
ei
.
°¨t
 = 
ei64
.start;

892 
ei
.
Àngth
 = 
ei64
.length;

893 
ªt
 = 
	`io˘l
(
fd
, 
MEMERASE
, &
ei
);

894 i‡(
ªt
 < 0)

895  
	`mtd_io˘l_îr‹
(
mtd
, 
eb
, "MEMERASE");

897 
	}
}

899 
	$mtd_ªgi⁄öfo
(
fd
, 
ªgidx
, 
ªgi⁄_öfo_u£r
 *
ªgöfo
)

901 
ªt
;

903 i‡(
ªgidx
 < 0) {

904 
î∫o
 = 
ENODEV
;

908 
ªgöfo
->
ªgi⁄ödex
 = 
ªgidx
;

910 
ªt
 = 
	`io˘l
(
fd
, 
MEMGETREGIONINFO
, 
ªgöfo
);

911 i‡(
ªt
 < 0)

912  
	`sys_îrmsg
("%s ioctl failed forÉraseÑegion %d",

913 "MEMGETREGIONINFO", 
ªgidx
);

916 
	}
}

918 
	$mtd_is_locked
(c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
, 
eb
)

920 
ªt
;

921 
îa£_öfo_t
 
ei
;

923 
ei
.
°¨t
 = 
eb
 * 
mtd
->
eb_size
;

924 
ei
.
Àngth
 = 
mtd
->
eb_size
;

926 
ªt
 = 
	`io˘l
(
fd
, 
MEMISLOCKED
, &
ei
);

927 i‡(
ªt
 < 0) {

928 i‡(
î∫o
 !
ENOTTY
 &&Éºnÿ!
EOPNOTSUPP
)

929  
	`mtd_io˘l_îr‹
(
mtd
, 
eb
, "MEMISLOCKED");

931 
î∫o
 = 
EOPNOTSUPP
;

934  
ªt
;

935 
	}
}

938 
uöt8_t
 
	g∑âîns
[] = {0xa5, 0x5a, 0x0};

949 
	$check_∑âîn
(c⁄° *
buf
, 
uöt8_t
 
∑â
, 
size
)

951 
i
;

953 
i
 = 0; i < 
size
; i++)

954 i‡(((c⁄° 
uöt8_t
 *)
buf
)[
i
] !
∑â
)

957 
	}
}

959 
	$mtd_t‹tuª
(
libmtd_t
 
desc
, c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
, 
eb
)

961 
îr
, 
i
, 
∑â_cou¡
;

962 *
buf
;

964 
	`n‹msg
("ru¿t‹tuªÅe° f‹ PEB %d", 
eb
);

965 
∑â_cou¡
 = 
	`FIO_ARRAY_SIZE
(
∑âîns
);

967 
buf
 = 
	`xmÆloc
(
mtd
->
eb_size
);

969 
i
 = 0; i < 
∑â_cou¡
; i++) {

970 
îr
 = 
	`mtd_îa£
(
desc
, 
mtd
, 
fd
, 
eb
);

971 i‡(
îr
)

972 
out
;

975 
îr
 = 
	`mtd_ªad
(
mtd
, 
fd
, 
eb
, 0, 
buf
, mtd->
eb_size
);

976 i‡(
îr
)

977 
out
;

979 
îr
 = 
	`check_∑âîn
(
buf
, 0xFF, 
mtd
->
eb_size
);

980 i‡(
îr
 == 0) {

981 
	`îrmsg
("îa£d PEB %d, buà®n⁄-0xFF byã found", 
eb
);

982 
î∫o
 = 
EIO
;

983 
out
;

987 
	`mem£t
(
buf
, 
∑âîns
[
i
], 
mtd
->
eb_size
);

988 
îr
 = 
	`mtd_wrôe
(
desc
, 
mtd
, 
fd
, 
eb
, 0, 
buf
, mtd->
eb_size
, 
NULL
,

990 i‡(
îr
)

991 
out
;

993 
	`mem£t
(
buf
, ~
∑âîns
[
i
], 
mtd
->
eb_size
);

994 
îr
 = 
	`mtd_ªad
(
mtd
, 
fd
, 
eb
, 0, 
buf
, mtd->
eb_size
);

995 i‡(
îr
)

996 
out
;

998 
îr
 = 
	`check_∑âîn
(
buf
, 
∑âîns
[
i
], 
mtd
->
eb_size
);

999 i‡(
îr
 == 0) {

1000 
	`îrmsg
("pattern %x checking failed for PEB %d",

1001 
∑âîns
[
i
], 
eb
);

1002 
î∫o
 = 
EIO
;

1003 
out
;

1007 
	`n‹msg
("PEB %dÖas£dÅ‹tuªÅe°, dÿnŸ m¨k ià®bad", 
eb
);

1009 
out
:

1010 
	`‰ì
(
buf
);

1012 
	}
}

1014 
	$mtd_is_bad
(c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
, 
eb
)

1016 
ªt
;

1017 
loff_t
 
£ek
;

1019 
ªt
 = 
	`mtd_vÆid_îa£_block
(
mtd
, 
eb
);

1020 i‡(
ªt
)

1021  
ªt
;

1023 i‡(!
mtd
->
bb_Ælowed
)

1026 
£ek
 = (
loff_t
)
eb
 * 
mtd
->
eb_size
;

1027 
ªt
 = 
	`io˘l
(
fd
, 
MEMGETBADBLOCK
, &
£ek
);

1028 i‡(
ªt
 == -1)

1029  
	`mtd_io˘l_îr‹
(
mtd
, 
eb
, "MEMGETBADBLOCK");

1030  
ªt
;

1031 
	}
}

1033 
	$mtd_m¨k_bad
(c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
, 
eb
)

1035 
ªt
;

1036 
loff_t
 
£ek
;

1038 i‡(!
mtd
->
bb_Ælowed
) {

1039 
î∫o
 = 
EINVAL
;

1043 
ªt
 = 
	`mtd_vÆid_îa£_block
(
mtd
, 
eb
);

1044 i‡(
ªt
)

1045  
ªt
;

1047 
£ek
 = (
loff_t
)
eb
 * 
mtd
->
eb_size
;

1048 
ªt
 = 
	`io˘l
(
fd
, 
MEMSETBADBLOCK
, &
£ek
);

1049 i‡(
ªt
 == -1)

1050  
	`mtd_io˘l_îr‹
(
mtd
, 
eb
, "MEMSETBADBLOCK");

1052 
	}
}

1054 
	$mtd_ªad
(c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
, 
eb
, 
offs
,

1055 *
buf
, 
Àn
)

1057 
ªt
, 
rd
 = 0;

1058 
off_t
 
£ek
;

1060 
ªt
 = 
	`mtd_vÆid_îa£_block
(
mtd
, 
eb
);

1061 i‡(
ªt
)

1062  
ªt
;

1064 i‡(
offs
 < 0 || off†+ 
Àn
 > 
mtd
->
eb_size
) {

1065 
	`îrmsg
("bad offset %d orÜength %d, mtd%dÉraseblock size is %d",

1066 
offs
, 
Àn
, 
mtd
->
mtd_num
, mtd->
eb_size
);

1067 
î∫o
 = 
EINVAL
;

1072 
£ek
 = (
off_t
)
eb
 * 
mtd
->
eb_size
 + 
offs
;

1073 i‡(
	`l£ek
(
fd
, 
£ek
, 
SEEK_SET
) != seek)

1074  
	`sys_îrmsg
("ˇ¬Ÿ sìk mtd%dÅÿoff£à%"
PRIdoff_t
,

1075 
mtd
->
mtd_num
, 
£ek
);

1077 
rd
 < 
Àn
) {

1078 
ªt
 = 
	`ªad
(
fd
, 
buf
, 
Àn
);

1079 i‡(
ªt
 < 0)

1080  
	`sys_îrmsg
("cannotÑead %d bytes from mtd%d (eraseblock %d, offset %d)",

1081 
Àn
, 
mtd
->
mtd_num
, 
eb
, 
offs
);

1082 
rd
 +
ªt
;

1086 
	}
}

1088 
	$Àgacy_auto_oob_œyout
(c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
,

1089 
oobÀn
, *
oob
) {

1090 
«nd_ooböfo
 
ﬁd_ooböfo
;

1091 
°¨t
, 
Àn
;

1092 
uöt8_t
 *
tmp_buf
;

1095 i‡(
	`io˘l
(
fd
, 
MEMGETOOBSEL
, &
ﬁd_ooböfo
))

1096  
	`sys_îrmsg
("MEMGETOOBSEL failed");

1098 
tmp_buf
 = 
	`mÆloc
(
oobÀn
);

1099 
	`mem˝y
(
tmp_buf
, 
oob
, 
oobÀn
);

1105 i‡(
ﬁd_ooböfo
.
u£ecc
 =
MTD_NANDECC_AUTOPLACE
) {

1106 
i
, 
ègs_pos
 = 0;

1107 
i
 = 0; 
ﬁd_ooböfo
.
oob‰ì
[i][1]; i++) {

1109 
°¨t
 = 
ﬁd_ooböfo
.
oob‰ì
[
i
][0];

1110 
Àn
 = 
ﬁd_ooböfo
.
oob‰ì
[
i
][1];

1111 
	`mem˝y
(
oob
 + 
°¨t
, 
tmp_buf
 + 
ègs_pos
, 
Àn
);

1112 
ègs_pos
 +
Àn
;

1116 
°¨t
 = 
ﬁd_ooböfo
.
eccbyãs
;

1117 
Àn
 = 
mtd
->
oob_size
 - 
°¨t
;

1118 
	`mem˝y
(
oob
 + 
°¨t
, 
tmp_buf
 + sèπ, 
Àn
);

1120 
	`‰ì
(
tmp_buf
);

1123 
	}
}

1125 
	$mtd_wrôe
(
libmtd_t
 
desc
, c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
, 
eb
,

1126 
offs
, *
d©a
, 
Àn
, *
oob
, 
oobÀn
,

1127 
uöt8_t
 
mode
)

1129 
ªt
;

1130 
off_t
 
£ek
;

1131 
mtd_wrôe_ªq
 
›s
;

1133 
ªt
 = 
	`mtd_vÆid_îa£_block
(
mtd
, 
eb
);

1134 i‡(
ªt
)

1135  
ªt
;

1137 i‡(
offs
 < 0 || off†+ 
Àn
 > 
mtd
->
eb_size
) {

1138 
	`îrmsg
("bad offset %d orÜength %d, mtd%dÉraseblock size is %d",

1139 
offs
, 
Àn
, 
mtd
->
mtd_num
, mtd->
eb_size
);

1140 
î∫o
 = 
EINVAL
;

1143 i‡(
offs
 % 
mtd
->
sub∑ge_size
) {

1144 
	`îrmsg
("write offset %d isÇotálignedÅo mtd%d min. I/O size %d",

1145 
offs
, 
mtd
->
mtd_num
, mtd->
sub∑ge_size
);

1146 
î∫o
 = 
EINVAL
;

1149 i‡(
Àn
 % 
mtd
->
sub∑ge_size
) {

1150 
	`îrmsg
("writeÜength %d isÇotálignedÅo mtd%d min. I/O size %d",

1151 
Àn
, 
mtd
->
mtd_num
, mtd->
sub∑ge_size
);

1152 
î∫o
 = 
EINVAL
;

1157 
£ek
 = (
off_t
)
eb
 * 
mtd
->
eb_size
 + 
offs
;

1159 i‡(
oob
) {

1160 
›s
.
°¨t
 = 
£ek
;

1161 
›s
.
Àn
 =Üen;

1162 
›s
.
oobÀn
 = ooblen;

1163 
›s
.
u§_d©a
 = (
uöt64_t
)()
d©a
;

1164 
›s
.
u§_oob
 = (
uöt64_t
)()
oob
;

1165 
›s
.
mode
 = mode;

1167 
ªt
 = 
	`io˘l
(
fd
, 
MEMWRITE
, &
›s
);

1168 i‡(
ªt
 == 0)

1170 i‡(
î∫o
 !
ENOTTY
 &&Éºnÿ!
EOPNOTSUPP
)

1171  
	`mtd_io˘l_îr‹
(
mtd
, 
eb
, "MEMWRITE");

1174 i‡(
mode
 =
MTD_OPS_AUTO_OOB
)

1175 i‡(
	`Àgacy_auto_oob_œyout
(
mtd
, 
fd
, 
oobÀn
, 
oob
))

1177 i‡(
	`mtd_wrôe_oob
(
desc
, 
mtd
, 
fd
, 
£ek
, 
oobÀn
, 
oob
) < 0)

1178  
	`sys_îrmsg
("cannot writeÅo OOB");

1180 i‡(
d©a
) {

1182 i‡(
	`l£ek
(
fd
, 
£ek
, 
SEEK_SET
) != seek)

1183  
	`sys_îrmsg
("ˇ¬Ÿ sìk mtd%dÅÿoff£à%"
PRIdoff_t
,

1184 
mtd
->
mtd_num
, 
£ek
);

1185 
ªt
 = 
	`wrôe
(
fd
, 
d©a
, 
Àn
);

1186 i‡(
ªt
 !
Àn
)

1187  
	`sys_îrmsg
("cannot write %d bytesÅo mtd%d "

1189 
Àn
, 
mtd
->
mtd_num
, 
eb
, 
offs
);

1193 
	}
}

1195 
	$do_oob_›
(
libmtd_t
 
desc
, c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
,

1196 
uöt64_t
 
°¨t
, uöt64_à
Àngth
, *
d©a
, 
cmd64
,

1197 
cmd
)

1199 
ªt
, 
oob_offs
;

1200 
mtd_oob_buf64
 
oob64
;

1201 
mtd_oob_buf
 
oob
;

1202 
max_offs
;

1203 c⁄° *
cmd64_°r
, *
cmd_°r
;

1204 
libmtd
 *
lib
 = (libmtd *)
desc
;

1206 i‡(
cmd64
 =
MEMREADOOB64
) {

1207 
cmd64_°r
 = "MEMREADOOB64";

1208 
cmd_°r
 = "MEMREADOOB";

1210 
cmd64_°r
 = "MEMWRITEOOB64";

1211 
cmd_°r
 = "MEMWRITEOOB";

1214 
max_offs
 = ()
mtd
->
eb_˙t
 * mtd->
eb_size
;

1215 i‡(
°¨t
 >
max_offs
) {

1216 
	`îrmsg
("badÖagêaddªs†%" 
PRIu64
 ", mtd%d has %dÉraseblocks (%llu bytes)",

1217 
°¨t
, 
mtd
->
mtd_num
, mtd->
eb_˙t
, 
max_offs
);

1218 
î∫o
 = 
EINVAL
;

1222 
oob_offs
 = 
°¨t
 & (
mtd
->
mö_io_size
 - 1);

1223 i‡(
oob_offs
 + 
Àngth
 > 
mtd
->
oob_size
 ||Üength == 0) {

1224 
	`îrmsg
("C™nŸ wrôê%" 
PRIu64
 " OOB bytesÅoáddress %" PRIu64 " (OOB offset %u) - mtd%d OOB size is only %d bytes",

1225 
Àngth
, 
°¨t
, 
oob_offs
, 
mtd
->
mtd_num
, mtd->
oob_size
);

1226 
î∫o
 = 
EINVAL
;

1230 
oob64
.
°¨t
 = start;

1231 
oob64
.
Àngth
 =Üength;

1232 
oob64
.
u§_±r
 = (
uöt64_t
)()
d©a
;

1234 i‡(
lib
->
offs64_io˘ls
 =
OFFS64_IOCTLS_SUPPORTED
 ||

1235 
lib
->
offs64_io˘ls
 =
OFFS64_IOCTLS_UNKNOWN
) {

1236 
ªt
 = 
	`io˘l
(
fd
, 
cmd64
, &
oob64
);

1237 i‡(
ªt
 == 0)

1238  
ªt
;

1240 i‡(
î∫o
 !
ENOTTY
 ||

1241 
lib
->
offs64_io˘ls
 !
OFFS64_IOCTLS_UNKNOWN
) {

1242 
	`sys_îrmsg
("%†io˘»Áûed f‹ mtd%d, off£à%" 
PRIu64
 " (eraseblock %" PRIu64 ")",

1243 
cmd64_°r
, 
mtd
->
mtd_num
, 
°¨t
, sèπ / mtd->
eb_size
);

1251 
lib
->
offs64_io˘ls
 = 
OFFS64_IOCTLS_NOT_SUPPORTED
;

1254 i‡(
oob64
.
°¨t
 > 0xFFFFFFFFULL) {

1255 
	`îrmsg
("this system canáddress only upÅoáddress %lu",

1257 
î∫o
 = 
EINVAL
;

1261 
oob
.
°¨t
 = 
oob64
.start;

1262 
oob
.
Àngth
 = 
oob64
.length;

1263 
oob
.
±r
 = 
d©a
;

1265 
ªt
 = 
	`io˘l
(
fd
, 
cmd
, &
oob
);

1266 i‡(
ªt
 < 0)

1267 
	`sys_îrmsg
("%†io˘»Áûed f‹ mtd%d, off£à%" 
PRIu64
 " (eraseblock %" PRIu64 ")",

1268 
cmd_°r
, 
mtd
->
mtd_num
, 
°¨t
, sèπ / mtd->
eb_size
);

1269  
ªt
;

1270 
	}
}

1272 
	$mtd_ªad_oob
(
libmtd_t
 
desc
, c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
,

1273 
uöt64_t
 
°¨t
, uöt64_à
Àngth
, *
d©a
)

1275  
	`do_oob_›
(
desc
, 
mtd
, 
fd
, 
°¨t
, 
Àngth
, 
d©a
,

1276 
MEMREADOOB64
, 
MEMREADOOB
);

1277 
	}
}

1279 
	$mtd_wrôe_oob
(
libmtd_t
 
desc
, c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
,

1280 
uöt64_t
 
°¨t
, uöt64_à
Àngth
, *
d©a
)

1282  
	`do_oob_›
(
desc
, 
mtd
, 
fd
, 
°¨t
, 
Àngth
, 
d©a
,

1283 
MEMWRITEOOB64
, 
MEMWRITEOOB
);

1284 
	}
}

1286 
	$mtd_wrôe_img
(c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
, 
eb
, 
offs
,

1287 c⁄° *
img_«me
)

1289 
tmp
, 
ªt
, 
ö_fd
, 
Àn
, 
wrôãn
 = 0;

1290 
off_t
 
£ek
;

1291 
°©
 
°
;

1292 *
buf
;

1294 
ªt
 = 
	`mtd_vÆid_îa£_block
(
mtd
, 
eb
);

1295 i‡(
ªt
)

1296  
ªt
;

1298 i‡(
offs
 < 0 || off†>
mtd
->
eb_size
) {

1299 
	`îrmsg
("bad offset %d, mtd%dÉraseblock size is %d",

1300 
offs
, 
mtd
->
mtd_num
, mtd->
eb_size
);

1301 
î∫o
 = 
EINVAL
;

1304 i‡(
offs
 % 
mtd
->
sub∑ge_size
) {

1305 
	`îrmsg
("write offset %d isÇotálignedÅo mtd%d min. I/O size %d",

1306 
offs
, 
mtd
->
mtd_num
, mtd->
sub∑ge_size
);

1307 
î∫o
 = 
EINVAL
;

1311 
ö_fd
 = 
	`›í
(
img_«me
, 
O_RDONLY
 | 
O_CLOEXEC
);

1312 i‡(
ö_fd
 == -1)

1313  
	`sys_îrmsg
("ˇ¬Ÿ o≥¿\"%s\"", 
img_«me
);

1315 i‡(
	`f°©
(
ö_fd
, &
°
)) {

1316 
	`sys_îrmsg
("ˇ¬Ÿ sèà%s", 
img_«me
);

1317 
out_˛o£
;

1320 
Àn
 = 
°
.
°_size
;

1321 i‡(
Àn
 % 
mtd
->
sub∑ge_size
) {

1322 
	`îrmsg
("size of \"%s\" is %d byte, which isÇotálignedÅo "

1323 "mtd%d mö. I/O sizê%d", 
img_«me
, 
Àn
, 
mtd
->
mtd_num
,

1324 
mtd
->
sub∑ge_size
);

1325 
î∫o
 = 
EINVAL
;

1326 
out_˛o£
;

1328 
tmp
 = (
offs
 + 
Àn
 + 
mtd
->
eb_size
 - 1) / mtd->eb_size;

1329 i‡(
eb
 + 
tmp
 > 
mtd
->
eb_˙t
) {

1330 
	`îrmsg
("\"%s\" image size is %d bytes, mtd%d size is %d "

1333 
img_«me
, 
Àn
, 
mtd
->
mtd_num
, mtd->
eb_˙t
, 
eb
, 
offs
);

1334 
î∫o
 = 
EINVAL
;

1335 
out_˛o£
;

1339 
£ek
 = (
off_t
)
eb
 * 
mtd
->
eb_size
 + 
offs
;

1340 i‡(
	`l£ek
(
fd
, 
£ek
, 
SEEK_SET
) != seek) {

1341 
	`sys_îrmsg
("ˇ¬Ÿ sìk mtd%dÅÿoff£à%"
PRIdoff_t
,

1342 
mtd
->
mtd_num
, 
£ek
);

1343 
out_˛o£
;

1346 
buf
 = 
	`xmÆloc
(
mtd
->
eb_size
);

1348 
wrôãn
 < 
Àn
) {

1349 
rd
 = 0;

1352 
ªt
 = 
	`ªad
(
ö_fd
, 
buf
, 
mtd
->
eb_size
 - 
offs
 - 
rd
);

1353 i‡(
ªt
 == -1) {

1354 
	`sys_îrmsg
("ˇ¬ŸÑód \"%s\"", 
img_«me
);

1355 
out_‰ì
;

1357 
rd
 +
ªt
;

1358 } 
ªt
 && 
rd
 < 
mtd
->
eb_size
 - 
offs
);

1360 
ªt
 = 
	`wrôe
(
fd
, 
buf
, 
rd
);

1361 i‡(
ªt
 !
rd
) {

1362 
	`sys_îrmsg
("cannot write %d bytesÅo mtd%d (eraseblock %d, offset %d)",

1363 
Àn
, 
mtd
->
mtd_num
, 
eb
, 
offs
);

1364 
out_‰ì
;

1367 
offs
 = 0;

1368 
eb
 += 1;

1369 
wrôãn
 +
rd
;

1372 
	`‰ì
(
buf
);

1373 
	`˛o£
(
ö_fd
);

1376 
out_‰ì
:

1377 
	`‰ì
(
buf
);

1378 
out_˛o£
:

1379 
	`˛o£
(
ö_fd
);

1381 
	}
}

1383 
	$mtd_¥obe_node
(
libmtd_t
 
desc
, c⁄° *
node
)

1385 
°©
 
°
;

1386 
mtd_öfo
 
öfo
;

1387 
i
, 
mjr
, 
mƒ
;

1388 
libmtd
 *
lib
 = (libmtd *)
desc
;

1390 i‡(
	`°©
(
node
, &
°
))

1391  
	`sys_îrmsg
("ˇ¬Ÿ gë inf‹m©i⁄ábouà\"%s\"", 
node
);

1393 i‡(!
	`S_ISCHR
(
°
.
°_mode
)) {

1394 
	`îrmsg
("\"%s\" i†nŸá ch¨a˘î devi˚", 
node
);

1395 
î∫o
 = 
EINVAL
;

1399 
mjr
 = 
	`maj‹
(
°
.
°_rdev
);

1400 
mƒ
 = 
	`mö‹
(
°
.
°_rdev
);

1402 i‡(
	`mtd_gë_öfo
((
libmtd_t
 *)
lib
, &
öfo
))

1405 i‡(!
lib
->
sysfs_suµ‹ãd
)

1408 
i
 = 
öfo
.
lowe°_mtd_num
; i <öfo.
highe°_mtd_num
; i++) {

1409 
mjr1
, 
mƒ1
, 
ªt
;

1411 
ªt
 = 
	`dev_gë_maj‹
(
lib
, 
i
, &
mjr1
, &
mƒ1
);

1412 i‡(
ªt
) {

1413 i‡(
î∫o
 =
ENOENT
)

1415 i‡(!
î∫o
)

1420 i‡(
mjr1
 =
mjr
 && 
mƒ1
 =
mƒ
)

1424 
î∫o
 = 0;

1426 
	}
}

	@oslib/libmtd.h

25 #i‚de‡
__LIBMTD_H__


26 
	#__LIBMTD_H__


	)

28 #ifde‡
__˝lu•lus


33 
	~<°döt.h
>

36 
	#MTD_NAME_MAX
 127

	)

38 
	#MTD_TYPE_MAX
 64

	)

41 * 
	tlibmtd_t
;

44 
ªgi⁄_öfo_u£r
;

52 
	smtd_öfo


54 
mtd_dev_˙t
;

55 
lowe°_mtd_num
;

56 
highe°_mtd_num
;

57 
sysfs_suµ‹ãd
:1;

78 
	smtd_dev_öfo


80 
mtd_num
;

81 
maj‹
;

82 
mö‹
;

83 
ty≥
;

84 
ty≥_°r
[
MTD_TYPE_MAX
 + 1];

85 
«me
[
MTD_NAME_MAX
 + 1];

86 
size
;

87 
eb_˙t
;

88 
eb_size
;

89 
mö_io_size
;

90 
sub∑ge_size
;

91 
oob_size
;

92 
ªgi⁄_˙t
;

93 
wrôabÀ
:1;

94 
bb_Ælowed
:1;

105 
libmtd_t
 
libmtd_›í
();

111 
libmtd_˛o£
(
libmtd_t
 
desc
);

120 
mtd_dev_¥e£¡
(
libmtd_t
 
desc
, 
mtd_num
);

131 
mtd_gë_öfo
(
libmtd_t
 
desc
, 
mtd_öfo
 *
öfo
);

144 
mtd_gë_dev_öfo
(
libmtd_t
 
desc
, c⁄° *
node
, 
mtd_dev_öfo
 *
mtd
);

155 
mtd_gë_dev_öfo1
(
libmtd_t
 
desc
, 
mtd_num
, 
mtd_dev_öfo
 *
mtd
);

167 
mtd_lock
(c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
, 
eb
);

179 
mtd_u∆ock
(c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
, 
eb
);

191 
mtd_îa£
(
libmtd_t
 
desc
, c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
, 
eb
);

204 
mtd_ªgi⁄öfo
(
fd
, 
ªgidx
, 
ªgi⁄_öfo_u£r
 *
ªgöfo
);

218 
mtd_is_locked
(c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
, 
eb
);

230 
mtd_t‹tuª
(
libmtd_t
 
desc
, c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
, 
eb
);

241 
mtd_is_bad
(c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
, 
eb
);

252 
mtd_m¨k_bad
(c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
, 
eb
);

267 
mtd_ªad
(c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
, 
eb
, 
offs
,

268 *
buf
, 
Àn
);

289 
mtd_wrôe
(
libmtd_t
 
desc
, c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
, 
eb
,

290 
offs
, *
d©a
, 
Àn
, *
oob
, 
oobÀn
,

291 
uöt8_t
 
mode
);

307 
mtd_ªad_oob
(
libmtd_t
 
desc
, c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
,

308 
uöt64_t
 
°¨t
, uöt64_à
Àngth
, *
d©a
);

324 
mtd_wrôe_oob
(
libmtd_t
 
desc
, c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
,

325 
uöt64_t
 
°¨t
, uöt64_à
Àngth
, *
d©a
);

339 
mtd_wrôe_img
(c⁄° 
mtd_dev_öfo
 *
mtd
, 
fd
, 
eb
, 
offs
,

340 c⁄° *
img_«me
);

351 
mtd_¥obe_node
(
libmtd_t
 
desc
, c⁄° *
node
);

353 #ifde‡
__˝lu•lus


	@oslib/libmtd_common.h

21 #i‚de‡
__MTD_UTILS_COMMON_H__


22 
	#__MTD_UTILS_COMMON_H__


	)

24 
	~<°dboﬁ.h
>

25 
	~<°dio.h
>

26 
	~<°dlib.h
>

27 
	~<˘y≥.h
>

28 
	~<°rög.h
>

29 
	~<f˙é.h
>

30 
	~<î∫o.h
>

31 
	~<„©uªs.h
>

32 
	~<öây≥s.h
>

33 
	~<sys/sysma¸os.h
>

35 #i‚de‡
PROGRAM_NAME


39 #ifde‡
__˝lu•lus


43 #i‚de‡
MIN


44 
	#MIN
(
a
, 
b
Ë(◊Ë< (bË? (aË: (b))

	)

46 #i‚de‡
MAX


47 
	#MAX
(
a
, 
b
Ë(◊Ë> (bË? (aË: (b))

	)

49 
	#mö
(
a
, 
b
Ë
	`MIN
◊, bË

	)

51 
	#ALIGN
(
x
,
a
Ë
	`__ALIGN_MASK
(x,(
	`__ty≥of__
(x))◊)-1)

	)

52 
	#__ALIGN_MASK
(
x
,
mask
Ë(((x)+(mask))&~(mask))

	)

54 
	#mö_t
(
t
,
x
,
y
) ({ \

55 
	`__ty≥of__
((
x
)Ë
_x
 = (x); \

56 
	`__ty≥of__
((
y
)Ë
_y
 = (y); \

57 (
_x
 < 
_y
) ? _x : _y; \

58 })

	)

60 
	#max_t
(
t
,
x
,
y
) ({ \

61 
	`__ty≥of__
((
x
)Ë
_x
 = (x); \

62 
	`__ty≥of__
((
y
)Ë
_y
 = (y); \

63 (
_x
 > 
_y
) ? _x : _y; \

64 })

	)

66 #i‚de‡
O_CLOEXEC


67 
	#O_CLOEXEC
 0

	)

71 #ifde‡
__USE_FILE_OFFSET64


72 
	#PRIxoff_t
 
PRIx64


	)

73 
	#PRIdoff_t
 
PRId64


	)

75 
	#PRIxoff_t
 "l"
PRIx32


	)

76 
	#PRIdoff_t
 "l"
PRId32


	)

80 
	#b¨evîbo£
(
vîbo£
, 
fmt
, ...) do { \

81 i‡(
vîbo£
) \

82 
	`¥ötf
(
fmt
, ##
__VA_ARGS__
); \

83 } 0)

	)

84 
	#vîbo£
(
vîbo£
, 
fmt
, ...) \

85 
	`b¨evîbo£
(
vîbo£
, "%s: " 
fmt
 "\n", 
PROGRAM_NAME
, ##
__VA_ARGS__
)

	)

88 
	#n‹msg_c⁄t
(
fmt
, ...) do { \

89 
	`¥ötf
("%s: " 
fmt
, 
PROGRAM_NAME
, ##
__VA_ARGS__
); \

90 } 0)

	)

91 
	#n‹msg
(
fmt
, ...) do { \

92 
	`n‹msg_c⁄t
(
fmt
 "\n", ##
__VA_ARGS__
); \

93 } 0)

	)

96 
	#îrmsg
(
fmt
, ...) ({ \

97 
	`Ârötf
(
°dîr
, "%s:Éº‹!: " 
fmt
 "\n", 
PROGRAM_NAME
, ##
__VA_ARGS__
); \

99 })

	)

100 
	#îrmsg_dõ
(
fmt
, ...) do { \

101 
	`exô
(
	`îrmsg
(
fmt
, ##
__VA_ARGS__
)); \

102 } 0)

	)

105 
	#sys_îrmsg
(
fmt
, ...) ({ \

106 
_îr
 = 
î∫o
; \

107 
	`îrmsg
(
fmt
, ##
__VA_ARGS__
); \

108 
	`Ârötf
(
°dîr
, "%*£º‹ %d (%s)\n", ()(
PROGRAM_NAME
) + 1,\

109 "", 
_îr
, 
	`°ªº‹
(_err)); \

111 })

	)

112 
	#sys_îrmsg_dõ
(
fmt
, ...) do { \

113 
	`exô
(
	`sys_îrmsg
(
fmt
, ##
__VA_ARGS__
)); \

114 } 0)

	)

117 
	#w¨nmsg
(
fmt
, ...) do { \

118 
	`Ârötf
(
°dîr
, "%s: w¨nög!: " 
fmt
 "\n", 
PROGRAM_NAME
, ##
__VA_ARGS__
); \

119 } 0)

	)

121 
ölöe
 
is_powî_of_2
(
n
)

123  (
n
 != 0 && ((n & (n - 1)) == 0));

142 
	#sim∂e_°πoX
(
func
, 
ty≥
) \

143 
ölöe
 
ty≥
 
sim∂e_
##
	`func
(c⁄° *
¢um
, *
îr‹
) \

145 *
íd±r
; \

146 
ty≥
 
ªt
 = 
	`func
(
¢um
, &
íd±r
, 0); \

148 i‡(
îr‹
 && (!*
¢um
 || *
íd±r
)) { \

149 
	`îrmsg
("%s: u«bÀÅÿ∑r£Åhênumbî '%s'", #func, 
¢um
); \

150 *
îr‹
 = 1; \

153  
ªt
; \

154 }

	)

155 
sim∂e_°πoX
(
°πﬁ
, )

156 
sim∂e_°πoX
(
°πﬁl
, )

157 
sim∂e_°πoX
(
°πoul
, )

158 
sim∂e_°πoX
(
°πouŒ
, )

161 
	#comm⁄_¥öt_vîsi⁄
() \

163 
	`¥ötf
("%†%s\n", 
PROGRAM_NAME
, 
VERSION
); \

164 } 0)

	)

166 
	~"libmtd_xÆloc.h
"

168 #ifde‡
__˝lu•lus


	@oslib/libmtd_int.h

26 #i‚de‡
__LIBMTD_INT_H__


27 
	#__LIBMTD_INT_H__


	)

29 #ifde‡
__˝lu•lus


33 
	#PROGRAM_NAME
 "libmtd"

	)

35 
	#SYSFS_MTD
 "˛ass/mtd"

	)

36 
	#MTD_NAME_PATT
 "mtd%d"

	)

37 
	#MTD_DEV
 "dev"

	)

38 
	#MTD_NAME
 "«me"

	)

39 
	#MTD_TYPE
 "ty≥"

	)

40 
	#MTD_EB_SIZE
 "îa£size"

	)

41 
	#MTD_SIZE
 "size"

	)

42 
	#MTD_MIN_IO_SIZE
 "wrôesize"

	)

43 
	#MTD_SUBPAGE_SIZE
 "sub∑gesize"

	)

44 
	#MTD_OOB_SIZE
 "oobsize"

	)

45 
	#MTD_REGION_CNT
 "numîa£ªgi⁄s"

	)

46 
	#MTD_FLAGS
 "Êags"

	)

48 
	#OFFS64_IOCTLS_UNKNOWN
 0

	)

49 
	#OFFS64_IOCTLS_NOT_SUPPORTED
 1

	)

50 
	#OFFS64_IOCTLS_SUPPORTED
 2

	)

81 
	slibmtd


83 *
sysfs_mtd
;

84 *
mtd
;

85 *
mtd_dev
;

86 *
mtd_«me
;

87 *
mtd_ty≥
;

88 *
mtd_eb_size
;

89 *
mtd_size
;

90 *
mtd_mö_io_size
;

91 *
mtd_sub∑ge_size
;

92 *
mtd_oob_size
;

93 *
mtd_ªgi⁄_˙t
;

94 *
mtd_Êags
;

95 
sysfs_suµ‹ãd
:1;

96 
offs64_io˘ls
:2;

99 
Àgacy_libmtd_›í
();

100 
Àgacy_dev_¥e£¡
(
mtd_num
);

101 
Àgacy_mtd_gë_öfo
(
mtd_öfo
 *
öfo
);

102 
Àgacy_gë_dev_öfo
(c⁄° *
node
, 
mtd_dev_öfo
 *
mtd
);

103 
Àgacy_gë_dev_öfo1
(
dev_num
, 
mtd_dev_öfo
 *
mtd
);

105 #ifde‡
__˝lu•lus


	@oslib/libmtd_legacy.c

28 
	~<limôs.h
>

29 
	~<f˙é.h
>

30 
	~<uni°d.h
>

31 
	~<°dlib.h
>

32 
	~<î∫o.h
>

33 
	~<sys/ty≥s.h
>

34 
	~<sys/°©.h
>

35 
	~<sys/io˘l.h
>

36 
	~<mtd/mtd-u£r.h
>

38 
	~"libmtd.h
"

39 
	~"libmtd_öt.h
"

40 
	~"libmtd_comm⁄.h
"

42 
	#MTD_PROC_FILE
 "/¥oc/mtd"

	)

43 
	#MTD_DEV_PATT
 "/dev/mtd%d"

	)

44 
	#MTD_DEV_MAJOR
 90

	)

46 
	#PROC_MTD_FIRST
 "dev: sizêÉø£sizêÇame\n"

	)

47 
	#PROC_MTD_FIRST_LEN
 ((
PROC_MTD_FIRST
Ë- 1)

	)

48 
	#PROC_MTD_MAX_LEN
 4096

	)

49 
	#PROC_MTD_PATT
 "mtd%d: %Œx %x"

	)

61 
	s¥oc_∑r£_öfo


63 
	mmtd_num
;

64 
	msize
;

65 
	m«me
[
MTD_NAME_MAX
 + 1];

66 
	meb_size
;

67 *
	mbuf
;

68 
	md©a_size
;

69 *
	m√xt
;

72 
	$¥oc_∑r£_°¨t
(
¥oc_∑r£_öfo
 *
pi
)

74 
fd
, 
ªt
;

76 
fd
 = 
	`›í
(
MTD_PROC_FILE
, 
O_RDONLY
);

77 i‡(
fd
 == -1)

80 
pi
->
buf
 = 
	`xmÆloc
(
PROC_MTD_MAX_LEN
);

82 
ªt
 = 
	`ªad
(
fd
, 
pi
->
buf
, 
PROC_MTD_MAX_LEN
);

83 i‡(
ªt
 == -1) {

84 
	`sys_îrmsg
("ˇ¬ŸÑód \"%s\"", 
MTD_PROC_FILE
);

85 
out_‰ì
;

88 i‡(
ªt
 < 
PROC_MTD_FIRST_LEN
 ||

89 
	`memcmp
(
pi
->
buf
, 
PROC_MTD_FIRST
, 
PROC_MTD_FIRST_LEN
)) {

90 
	`îrmsg
("\"%s\" d€†nŸ sèπ wôh \"%s\"", 
MTD_PROC_FILE
,

91 
PROC_MTD_FIRST
);

92 
out_‰ì
;

95 
pi
->
d©a_size
 = 
ªt
;

96 
pi
->
√xt
 =Öi->
buf
 + 
PROC_MTD_FIRST_LEN
;

98 
	`˛o£
(
fd
);

101 
out_‰ì
:

102 
	`‰ì
(
pi
->
buf
);

103 
	`˛o£
(
fd
);

105 
	}
}

107 
	$¥oc_∑r£_√xt
(
¥oc_∑r£_öfo
 *
pi
)

109 
ªt
, 
Àn
, 
pos
 = 
pi
->
√xt
 -Öi->
buf
;

110 *
p
, *
p1
;

112 i‡(
pos
 >
pi
->
d©a_size
) {

113 
	`‰ì
(
pi
->
buf
);

117 
ªt
 = 
	`ssˇnf
(
pi
->
√xt
, 
PROC_MTD_PATT
, &pi->
mtd_num
, &pi->
size
,

118 &
pi
->
eb_size
);

119 i‡(
ªt
 != 3)

120  
	`îrmsg
("\"%s\"Ö©ã∫ÇŸ found", 
PROC_MTD_PATT
);

122 
p
 = 
	`memchr
(
pi
->
√xt
, '\"',Öi->
d©a_size
 - 
pos
);

123 i‡(!
p
)

124  
	`îrmsg
("opening \"Çot found");

125 
p
 += 1;

126 
pos
 = 
p
 - 
pi
->
buf
;

127 i‡(
pos
 >
pi
->
d©a_size
)

128  
	`îrmsg
("opening \"Çot found");

130 
p1
 = 
	`memchr
(
p
, '\"', 
pi
->
d©a_size
 - 
pos
);

131 i‡(!
p1
)

132  
	`îrmsg
("closing \"Çot found");

133 
pos
 = 
p1
 - 
pi
->
buf
;

134 i‡(
pos
 >
pi
->
d©a_size
)

135  
	`îrmsg
("closing \"Çot found");

137 
Àn
 = 
p1
 - 
p
;

138 i‡(
Àn
 > 
MTD_NAME_MAX
)

139  
	`îrmsg
("toÿl⁄g mtd%d devi˚Çame", 
pi
->
mtd_num
);

141 
	`mem˝y
(
pi
->
«me
, 
p
, 
Àn
);

142 
pi
->
«me
[
Àn
] = '\0';

144 i‡(
p1
[1] != '\n')

145  
	`îrmsg
("opening \"\n\"Çot found");

146 
pi
->
√xt
 = 
p1
 + 2;

148 
	}
}

159 
	$Àgacy_libmtd_›í
()

161 
fd
;

163 
fd
 = 
	`›í
(
MTD_PROC_FILE
, 
O_RDONLY
);

164 i‡(
fd
 == -1) {

165 i‡(
î∫o
 =
ENOENT
)

166 
î∫o
 = 0;

170 
	`˛o£
(
fd
);

172 
	}
}

182 
	$Àgacy_dev_¥e£¡
(
mtd_num
)

184 
ªt
;

185 
¥oc_∑r£_öfo
 
pi
;

187 
ªt
 = 
	`¥oc_∑r£_°¨t
(&
pi
);

188 i‡(
ªt
)

191 
	`¥oc_∑r£_√xt
(&
pi
)) {

192 i‡(
pi
.
mtd_num
 == mtd_num)

197 
	}
}

205 
	$Àgacy_mtd_gë_öfo
(
mtd_öfo
 *
öfo
)

207 
ªt
;

208 
¥oc_∑r£_öfo
 
pi
;

210 
ªt
 = 
	`¥oc_∑r£_°¨t
(&
pi
);

211 i‡(
ªt
)

214 
öfo
->
lowe°_mtd_num
 = 
INT_MAX
;

215 
	`¥oc_∑r£_√xt
(&
pi
)) {

216 
öfo
->
mtd_dev_˙t
 += 1;

217 i‡(
pi
.
mtd_num
 > 
öfo
->
highe°_mtd_num
)

218 
öfo
->
highe°_mtd_num
 = 
pi
.
mtd_num
;

219 i‡(
pi
.
mtd_num
 < 
öfo
->
lowe°_mtd_num
)

220 
öfo
->
lowe°_mtd_num
 = 
pi
.
mtd_num
;

224 
	}
}

234 
	$Àgacy_gë_dev_öfo
(c⁄° *
node
, 
mtd_dev_öfo
 *
mtd
)

236 
°©
 
°
;

237 
mtd_öfo_u£r
 
ui
;

238 
fd
, 
ªt
;

239 
loff_t
 
offs
 = 0;

240 
¥oc_∑r£_öfo
 
pi
;

242 i‡(
	`°©
(
node
, &
°
)) {

243 
	`sys_îrmsg
("ˇ¬Ÿ o≥¿\"%s\"", 
node
);

244 i‡(
î∫o
 =
ENOENT
)

245 
	`n‹msg
("MTD subsystem is oldánd doesÇot support "

250 i‡(!
	`S_ISCHR
(
°
.
°_mode
)) {

251 
î∫o
 = 
EINVAL
;

252  
	`îrmsg
("\"%s\" i†nŸá ch¨a˘î devi˚", 
node
);

255 
	`mem£t
(
mtd
, '\0', (
mtd_dev_öfo
));

256 
mtd
->
maj‹
 = 
	`maj‹
(
°
.
°_rdev
);

257 
mtd
->
mö‹
 = 
	`mö‹
(
°
.
°_rdev
);

259 i‡(
mtd
->
maj‹
 !
MTD_DEV_MAJOR
) {

260 
î∫o
 = 
EINVAL
;

261  
	`îrmsg
("\"%s\" has majorÇumber %d, MTD devices have "

262 "maj‹ %d", 
node
, 
mtd
->
maj‹
, 
MTD_DEV_MAJOR
);

265 
mtd
->
mtd_num
 = mtd->
mö‹
 / 2;

267 
fd
 = 
	`›í
(
node
, 
O_RDONLY
);

268 i‡(
fd
 == -1)

269  
	`sys_îrmsg
("ˇ¬Ÿ o≥¿\"%s\"", 
node
);

271 i‡(
	`io˘l
(
fd
, 
MEMGETINFO
, &
ui
)) {

272 
	`sys_îrmsg
("MEMGETINFO ioctlÑequest failed");

273 
out_˛o£
;

276 
ªt
 = 
	`io˘l
(
fd
, 
MEMGETBADBLOCK
, &
offs
);

277 i‡(
ªt
 == -1) {

278 i‡(
î∫o
 !
EOPNOTSUPP
) {

279 
	`sys_îrmsg
("MEMGETBADBLOCK ioctl failed");

280 
out_˛o£
;

282 
î∫o
 = 0;

283 
mtd
->
bb_Ælowed
 = 0;

285 
mtd
->
bb_Ælowed
 = 1;

287 
mtd
->
ty≥
 = 
ui
.type;

288 
mtd
->
size
 = 
ui
.size;

289 
mtd
->
eb_size
 = 
ui
.
îa£size
;

290 
mtd
->
mö_io_size
 = 
ui
.
wrôesize
;

291 
mtd
->
oob_size
 = 
ui
.
oobsize
;

293 i‡(
mtd
->
mö_io_size
 <= 0) {

294 
	`îrmsg
("mtd%d (%s) has insane min. I/O unit size %d",

295 
mtd
->
mtd_num
, 
node
, mtd->
mö_io_size
);

296 
out_˛o£
;

298 i‡(
mtd
->
eb_size
 <0 || mtd->eb_sizê< mtd->
mö_io_size
) {

299 
	`îrmsg
("mtd%d (%s) has insaneÉraseblock size %d",

300 
mtd
->
mtd_num
, 
node
, mtd->
eb_size
);

301 
out_˛o£
;

303 i‡(
mtd
->
size
 <0 || mtd->sizê< mtd->
eb_size
) {

304 
	`îrmsg
("mtd%d (%s) has insane size %lld",

305 
mtd
->
mtd_num
, 
node
, mtd->
size
);

306 
out_˛o£
;

308 
mtd
->
eb_˙t
 = mtd->
size
 / mtd->
eb_size
;

310 
mtd
->
ty≥
) {

311 
MTD_ABSENT
:

312 
	`îrmsg
("mtd%d (%s) isÑemovableánd isÇotÖresent",

313 
mtd
->
mtd_num
, 
node
);

314 
out_˛o£
;

315 
MTD_RAM
:

316 
	`°r˝y
((*)
mtd
->
ty≥_°r
, "ram");

318 
MTD_ROM
:

319 
	`°r˝y
((*)
mtd
->
ty≥_°r
, "rom");

321 
MTD_NORFLASH
:

322 
	`°r˝y
((*)
mtd
->
ty≥_°r
, "nor");

324 
MTD_NANDFLASH
:

325 
	`°r˝y
((*)
mtd
->
ty≥_°r
, "nand");

327 
MTD_MLCNANDFLASH
:

328 
	`°r˝y
((*)
mtd
->
ty≥_°r
, "mlc-nand");

330 
MTD_DATAFLASH
:

331 
	`°r˝y
((*)
mtd
->
ty≥_°r
, "dataflash");

333 
MTD_UBIVOLUME
:

334 
	`°r˝y
((*)
mtd
->
ty≥_°r
, "ubi");

337 
out_˛o£
;

340 i‡(
ui
.
Êags
 & 
MTD_WRITEABLE
)

341 
mtd
->
wrôabÀ
 = 1;

342 
mtd
->
sub∑ge_size
 = mtd->
mö_io_size
;

344 
	`˛o£
(
fd
);

350 
ªt
 = 
	`¥oc_∑r£_°¨t
(&
pi
);

351 i‡(
ªt
)

354 
	`¥oc_∑r£_√xt
(&
pi
)) {

355 i‡(
pi
.
mtd_num
 =
mtd
->mtd_num) {

356 
	`°r˝y
((*)
mtd
->
«me
, 
pi
.name);

361 
	`îrmsg
("mtd%dÇŸ found i¿\"%s\"", 
mtd
->
mtd_num
, 
MTD_PROC_FILE
);

362 
î∫o
 = 
ENOENT
;

365 
out_˛o£
:

366 
	`˛o£
(
fd
);

368 
	}
}

378 
	$Àgacy_gë_dev_öfo1
(
mtd_num
, 
mtd_dev_öfo
 *
mtd
)

380 
node
[(
MTD_DEV_PATT
) + 20];

382 
	`•rötf
(
node
, 
MTD_DEV_PATT
, 
mtd_num
);

383  
	`Àgacy_gë_dev_öfo
(
node
, 
mtd
);

384 
	}
}

	@oslib/libmtd_xalloc.h

27 #i‚de‡
__MTD_UTILS_XALLOC_H__


28 
	#__MTD_UTILS_XALLOC_H__


	)

30 
	~<°d¨g.h
>

31 
	~<°dlib.h
>

32 
	~<°rög.h
>

39 
__©åibuã__
((
unu£d
))

40 *
	$xmÆloc
(
size_t
 
size
)

42 *
±r
 = 
	`mÆloc
(
size
);

44 i‡(
±r
 =
NULL
 && 
size
 != 0)

45 
	`sys_îrmsg_dõ
("out of memory");

46  
±r
;

47 
	}
}

49 
__©åibuã__
((
unu£d
))

50 *
	$xˇŒoc
(
size_t
 
nmemb
, size_à
size
)

52 *
±r
 = 
	`ˇŒoc
(
nmemb
, 
size
);

54 i‡(
±r
 =
NULL
 && 
nmemb
 !0 && 
size
 != 0)

55 
	`sys_îrmsg_dõ
("out of memory");

56  
±r
;

57 
	}
}

59 
__©åibuã__
((
unu£d
))

60 *
	$xzÆloc
(
size_t
 
size
)

62  
	`xˇŒoc
(1, 
size
);

63 
	}
}

65 
__©åibuã__
((
unu£d
))

66 *
	$xªÆloc
(*
±r
, 
size_t
 
size
)

68 
±r
 = 
	`ªÆloc
’å, 
size
);

69 i‡(
±r
 =
NULL
 && 
size
 != 0)

70 
	`sys_îrmsg_dõ
("out of memory");

71  
±r
;

72 
	}
}

74 
__©åibuã__
((
unu£d
))

75 *
	$x°rdup
(c⁄° *
s
)

77 *
t
;

79 i‡(
s
 =
NULL
)

80  
NULL
;

81 
t
 = 
	`°rdup
(
s
);

82 i‡(
t
 =
NULL
)

83 
	`sys_îrmsg_dõ
("out of memory");

84  
t
;

85 
	}
}

87 #ifde‡
_GNU_SOURCE


89 
__©åibuã__
((
unu£d
))

90 
	$xa•rötf
(**
°Ω
, c⁄° *
fmt
, ...)

92 
˙t
;

93 
va_li°
 
≠
;

95 
	`va_°¨t
(
≠
, 
fmt
);

96 
˙t
 = 
	`va•rötf
(
°Ω
, 
fmt
, 
≠
);

97 
	`va_íd
(
≠
);

99 i‡(
˙t
 == -1)

100 
	`sys_îrmsg_dõ
("out of memory");

102  
˙t
;

103 
	}
}

	@oslib/linux-blkzoned.c

6 
	~<î∫o.h
>

7 
	~<°rög.h
>

8 
	~<°dlib.h
>

9 
	~<dúít.h
>

10 
	~<f˙é.h
>

11 
	~<sys/io˘l.h
>

12 
	~<sys/°©.h
>

13 
	~<uni°d.h
>

15 
	~"fûe.h
"

16 
	~"fio.h
"

17 
	~"lib/pow2.h
"

18 
	~"log.h
"

19 
	~"o¶ib/a•rötf.h
"

20 
	~"smÆloc.h
"

21 
	~"vîify.h
"

22 
	~"zbd_ty≥s.h
"

24 
	~<löux/blkz⁄ed.h
>

31 #i‚de‡
CONFIG_HAVE_REP_CAPACITY


32 
	#BLK_ZONE_REP_CAPACITY
 (1 << 0)

	)

34 
	sblk_z⁄e_v2
 {

35 
__u64
 
	m°¨t
;

36 
__u64
 
	mÀn
;

37 
__u64
 
	mwp
;

38 
__u8
 
	mty≥
;

39 
__u8
 
	mc⁄d
;

40 
__u8
 
	mn⁄_£q
;

41 
__u8
 
	mª£t
;

42 
__u8
 
	mªsv
[4];

43 
__u64
 
	mˇ∑côy
;

44 
__u8
 
	mª£rved
[24];

46 
	#blk_z⁄e
 
blk_z⁄e_v2


	)

48 
	sblk_z⁄e_ªp‹t_v2
 {

49 
__u64
 
	m£˘‹
;

50 
__u32
 
	mƒ_z⁄es
;

51 
__u32
 
	mÊags
;

52 
blk_z⁄e
 
	mz⁄es
[0];

54 
	#blk_z⁄e_ªp‹t
 
blk_z⁄e_ªp‹t_v2


	)

61 *
	$ªad_fûe
(c⁄° *
∑th
)

63 
löe
[256], *
p
 =Üine;

64 
FILE
 *
f
;

66 
f
 = 
	`f›í
(
∑th
, "rb");

67 i‡(!
f
)

68  
NULL
;

69 i‡(!
	`fgës
(
löe
, ÷öe), 
f
))

70 
löe
[0] = '\0';

71 
	`°r£p
(&
p
, "\n");

72 
	`f˛o£
(
f
);

74  
	`°rdup
(
löe
);

75 
	}
}

84 *
	$blkz⁄ed_gë_sysfs_©å
(c⁄° *
fûe_«me
, c⁄° *
©å
)

86 *
©å_∑th
 = 
NULL
;

87 
°©
 
°©buf
;

88 *
sys_devno_∑th
 = 
NULL
;

89 *
∑π_©å_∑th
 = 
NULL
;

90 *
∑π_°r
 = 
NULL
;

91 
sys_∑th
[
PATH_MAX
];

92 
ssize_t
 
sz
;

93 *
dñim
 = 
NULL
;

94 *
©å_°r
 = 
NULL
;

96 i‡(
	`°©
(
fûe_«me
, &
°©buf
) < 0)

97 
out
;

99 i‡(
	`a•rötf
(&
sys_devno_∑th
, "/sys/dev/block/%d:%d",

100 
	`maj‹
(
°©buf
.
°_rdev
), 
	`mö‹
(statbuf.st_rdev)) < 0)

101 
out
;

103 
sz
 = 
	`ªadlök
(
sys_devno_∑th
, 
sys_∑th
, (sys_path) - 1);

104 i‡(
sz
 < 0)

105 
out
;

106 
sys_∑th
[
sz
] = '\0';

113 i‡(
	`a•rötf
(&
∑π_©å_∑th
, "/sys/dev/block/%s/partition",

114 
sys_∑th
) < 0)

115 
out
;

116 
∑π_°r
 = 
	`ªad_fûe
(
∑π_©å_∑th
);

117 i‡(
∑π_°r
 && *part_str == '1') {

118 
dñim
 = 
	`°ºchr
(
sys_∑th
, '/');

119 i‡(!
dñim
)

120 
out
;

121 *
dñim
 = '\0';

124 i‡(
	`a•rötf
(&
©å_∑th
,

125 "/sys/dev/block/%s/%s", 
sys_∑th
, 
©å
) < 0)

126 
out
;

128 
©å_°r
 = 
	`ªad_fûe
(
©å_∑th
);

129 
out
:

130 
	`‰ì
(
©å_∑th
);

131 
	`‰ì
(
∑π_°r
);

132 
	`‰ì
(
∑π_©å_∑th
);

133 
	`‰ì
(
sys_devno_∑th
);

135  
©å_°r
;

136 
	}
}

138 
	$blkz⁄ed_gë_z⁄ed_modñ
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

139 
zbd_z⁄ed_modñ
 *
modñ
)

141 *
modñ_°r
 = 
NULL
;

143 i‡(
f
->
fûëy≥
 !
FIO_TYPE_BLOCK
)

144  -
EINVAL
;

146 *
modñ
 = 
ZBD_NONE
;

148 
modñ_°r
 = 
	`blkz⁄ed_gë_sysfs_©å
(
f
->
fûe_«me
, "queue/zoned");

149 i‡(!
modñ_°r
)

152 
	`d¥öt
(
FD_ZBD
, "%s: zbd modñ såög: %s\n", 
f
->
fûe_«me
, 
modñ_°r
);

153 i‡(
	`°rcmp
(
modñ_°r
, "host-aware") == 0)

154 *
modñ
 = 
ZBD_HOST_AWARE
;

155 i‡(
	`°rcmp
(
modñ_°r
, "host-managed") == 0)

156 *
modñ
 = 
ZBD_HOST_MANAGED
;

158 
	`‰ì
(
modñ_°r
);

161 
	}
}

163 
	$blkz⁄ed_gë_max_›í_z⁄es
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

164 *
max_›í_z⁄es
)

166 *
max_›í_°r
;

168 i‡(
f
->
fûëy≥
 !
FIO_TYPE_BLOCK
)

169  -
EIO
;

171 
max_›í_°r
 = 
	`blkz⁄ed_gë_sysfs_©å
(
f
->
fûe_«me
, "queue/max_open_zones");

172 i‡(!
max_›í_°r
) {

173 *
max_›í_z⁄es
 = 0;

177 
	`d¥öt
(
FD_ZBD
, "%s: max open zones supported by device: %s\n",

178 
f
->
fûe_«me
, 
max_›í_°r
);

179 *
max_›í_z⁄es
 = 
	`©ﬁl
(
max_›í_°r
);

181 
	`‰ì
(
max_›í_°r
);

184 
	}
}

186 
uöt64_t
 
	$z⁄e_ˇ∑côy
(
blk_z⁄e_ªp‹t
 *
hdr
,

187 
blk_z⁄e
 *
blkz
)

189 i‡(
hdr
->
Êags
 & 
BLK_ZONE_REP_CAPACITY
)

190  
blkz
->
ˇ∑côy
 << 9;

191  
blkz
->
Àn
 << 9;

192 
	}
}

194 
	$blkz⁄ed_ªp‹t_z⁄es
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

195 
uöt64_t
 
off£t
, 
zbd_z⁄e
 *
z⁄es
,

196 
ƒ_z⁄es
)

198 
blk_z⁄e_ªp‹t
 *
hdr
 = 
NULL
;

199 
blk_z⁄e
 *
blkz
;

200 
zbd_z⁄e
 *
z
;

201 
i
;

202 
fd
 = -1, 
ªt
;

204 
fd
 = 
	`›í
(
f
->
fûe_«me
, 
O_RDONLY
 | 
O_LARGEFILE
);

205 i‡(
fd
 < 0)

206  -
î∫o
;

208 
hdr
 = 
	`ˇŒoc
(1, (
blk_z⁄e_ªp‹t
) +

209 
ƒ_z⁄es
 * (
blk_z⁄e
));

210 i‡(!
hdr
) {

211 
ªt
 = -
ENOMEM
;

212 
out
;

215 
hdr
->
ƒ_z⁄es
 =Çr_zones;

216 
hdr
->
£˘‹
 = 
off£t
 >> 9;

217 
ªt
 = 
	`io˘l
(
fd
, 
BLKREPORTZONE
, 
hdr
);

218 i‡(
ªt
) {

219 
ªt
 = -
î∫o
;

220 
out
;

223 
ƒ_z⁄es
 = 
hdr
->nr_zones;

224 
blkz
 = (*Ë
hdr
 + (*hdr);

225 
z
 = &
z⁄es
[0];

226 
i
 = 0; i < 
ƒ_z⁄es
; i++, 
z
++, 
blkz
++) {

227 
z
->
°¨t
 = 
blkz
->start << 9;

228 
z
->
wp
 = 
blkz
->wp << 9;

229 
z
->
Àn
 = 
blkz
->len << 9;

230 
z
->
ˇ∑côy
 = 
	`z⁄e_ˇ∑côy
(
hdr
, 
blkz
);

232 
blkz
->
ty≥
) {

233 
BLK_ZONE_TYPE_CONVENTIONAL
:

234 
z
->
ty≥
 = 
ZBD_ZONE_TYPE_CNV
;

236 
BLK_ZONE_TYPE_SEQWRITE_REQ
:

237 
z
->
ty≥
 = 
ZBD_ZONE_TYPE_SWR
;

239 
BLK_ZONE_TYPE_SEQWRITE_PREF
:

240 
z
->
ty≥
 = 
ZBD_ZONE_TYPE_SWP
;

243 
	`td_vîr‹
(
td
, 
î∫o
, "invalid zoneÅype");

244 
	`log_îr
("%s: invalidÅype for zoneát sector %llu.\n",

245 
f
->
fûe_«me
, ()
off£t
 >> 9);

246 
ªt
 = -
EIO
;

247 
out
;

250 
blkz
->
c⁄d
) {

251 
BLK_ZONE_COND_NOT_WP
:

252 
z
->
c⁄d
 = 
ZBD_ZONE_COND_NOT_WP
;

254 
BLK_ZONE_COND_EMPTY
:

255 
z
->
c⁄d
 = 
ZBD_ZONE_COND_EMPTY
;

257 
BLK_ZONE_COND_IMP_OPEN
:

258 
z
->
c⁄d
 = 
ZBD_ZONE_COND_IMP_OPEN
;

260 
BLK_ZONE_COND_EXP_OPEN
:

261 
z
->
c⁄d
 = 
ZBD_ZONE_COND_EXP_OPEN
;

263 
BLK_ZONE_COND_CLOSED
:

264 
z
->
c⁄d
 = 
ZBD_ZONE_COND_CLOSED
;

266 
BLK_ZONE_COND_FULL
:

267 
z
->
c⁄d
 = 
ZBD_ZONE_COND_FULL
;

269 
BLK_ZONE_COND_READONLY
:

270 
BLK_ZONE_COND_OFFLINE
:

273 
z
->
c⁄d
 = 
ZBD_ZONE_COND_OFFLINE
;

274 
z
->
wp
 = z->
°¨t
;

278 
ªt
 = 
ƒ_z⁄es
;

279 
out
:

280 
	`‰ì
(
hdr
);

281 
	`˛o£
(
fd
);

283  
ªt
;

284 
	}
}

286 
	$blkz⁄ed_ª£t_wp
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

287 
uöt64_t
 
off£t
, uöt64_à
Àngth
)

289 
blk_z⁄e_ønge
 
zr
 = {

290 .
£˘‹
 = 
off£t
 >> 9,

291 .
ƒ_£˘‹s
 = 
Àngth
 >> 9,

293 
fd
, 
ªt
 = 0;

296 
fd
 = 
f
->fd;

297 i‡(
fd
 < 0) {

298 
fd
 = 
	`›í
(
f
->
fûe_«me
, 
O_RDWR
 | 
O_LARGEFILE
);

299 i‡(
fd
 < 0)

300  -
î∫o
;

303 i‡(
	`io˘l
(
fd
, 
BLKRESETZONE
, &
zr
) < 0)

304 
ªt
 = -
î∫o
;

306 i‡(
f
->
fd
 < 0)

307 
	`˛o£
(
fd
);

309  
ªt
;

310 
	}
}

	@oslib/linux-dev-lookup.c

1 
	~<sys/ty≥s.h
>

2 
	~<sys/°©.h
>

3 
	~<sys/sysma¸os.h
>

4 
	~<dúít.h
>

5 
	~<°rög.h
>

6 
	~<°dio.h
>

7 
	~<uni°d.h
>

9 
	~"löux-dev-lookup.h
"

11 
	$blkåa˚_lookup_devi˚
(c⁄° *
ªdúe˘
, *
∑th
, 
maj
,

12 
mö
)

14 
dúít
 *
dú
;

15 
°©
 
°
;

16 
found
 = 0;

17 
DIR
 *
D
;

24 i‡(
ªdúe˘
) {

25 
	`°r˝y
(
∑th
, 
ªdúe˘
);

29 
D
 = 
	`›ídú
(
∑th
);

30 i‡(!
D
)

33 (
dú
 = 
	`ªaddú
(
D
)Ë!
NULL
) {

34 
fuŒ_∑th
[257];

36 i‡(!
	`°rcmp
(
dú
->
d_«me
, ".") || !strcmp(dir->d_name, ".."))

39 
	`•rötf
(
fuŒ_∑th
, "%s/%s", 
∑th
, 
dú
->
d_«me
);

40 i‡(
	`l°©
(
fuŒ_∑th
, &
°
) == -1) {

41 
	`≥º‹
("lstat");

45 i‡(
	`S_ISDIR
(
°
.
°_mode
)) {

46 
found
 = 
	`blkåa˚_lookup_devi˚
(
ªdúe˘
, 
fuŒ_∑th
,

47 
maj
, 
mö
);

48 i‡(
found
) {

49 
	`°r˝y
(
∑th
, 
fuŒ_∑th
);

54 i‡(!
	`S_ISBLK
(
°
.
°_mode
))

57 i‡(
maj
 =
	`maj‹
(
°
.
°_rdev
Ë&& 
mö
 =
	`mö‹
(st.st_rdev)) {

58 
	`°r˝y
(
∑th
, 
fuŒ_∑th
);

59 
found
 = 1;

64 
	`˛o£dú
(
D
);

65  
found
;

66 
	}
}

	@oslib/linux-dev-lookup.h

1 #i‚de‡
LINUX_DEV_LOOKUP


2 
	#LINUX_DEV_LOOKUP


	)

4 
blkåa˚_lookup_devi˚
(c⁄° *
ªdúe˘
, *
∑th
, 
maj
,

5 
mö
);

	@oslib/statx.c

1 #i‚de‡
CONFIG_HAVE_STATX


2 
	~"°©x.h
"

4 #ifde‡
CONFIG_HAVE_STATX_SYSCALL


5 
	~<uni°d.h
>

6 
	~<sys/sysˇŒ.h
>

8 
	$°©x
(
dfd
, c⁄° *
∑th«me
, 
Êags
, 
mask
,

9 
°©x
 *
buf„r
)

11  
	`sysˇŒ
(
__NR_°©x
, 
dfd
, 
∑th«me
, 
Êags
, 
mask
, 
buf„r
);

12 
	}
}

14 
	~<î∫o.h
>

16 
	$°©x
(
dfd
, c⁄° *
∑th«me
, 
Êags
, 
mask
,

17 
°©x
 *
buf„r
)

19 
î∫o
 = 
EINVAL
;

21 
	}
}

	@oslib/statx.h

1 #i‚de‡
CONFIG_HAVE_STATX


2 #ifde‡
CONFIG_HAVE_STATX_SYSCALL


3 
	~<löux/°©.h
>

4 
	~<sys/°©.h
>

6 
	#STATX_ALL
 0

	)

7 #unde‡
°©x


8 
	s°©x


12 
°©x
(
dfd
, c⁄° *
∑th«me
, 
Êags
, 
mask
,

13 
°©x
 *
buf„r
);

	@oslib/strcasestr.c

1 #i‚de‡
CONFIG_STRCASESTR


3 
	~<˘y≥.h
>

4 
	~<°ddef.h
>

5 
	~"°rˇ£°r.h
"

7 *
	$°rˇ£°r
(c⁄° *
s1
, c⁄° *
s2
)

9 c⁄° *
s
 = 
s1
;

10 c⁄° *
p
 = 
s2
;

13 i‡(!*
p
)

14  (*Ë
s1
;

15 i‡((*
p
 =*
s
) ||

16 (
	`tﬁowî
(*
p
Ë=tﬁowî(*
s
))) {

17 ++
p
;

18 ++
s
;

20 
p
 = 
s2
;

21 i‡(!*
s
)

22  
NULL
;

23 
s
 = ++
s1
;

27  *
p
 ? 
NULL
 : (*Ë
s1
;

28 
	}
}

	@oslib/strcasestr.h

1 #i‚de‡
CONFIG_STRCASESTR


3 #i‚de‡
FIO_STRCASESTR_H


4 
	#FIO_STRCASESTR_H


	)

6 *
°rˇ£°r
(c⁄° *
hay°ack
, c⁄° *
√edÀ
);

	@oslib/strlcat.c

1 #i‚de‡
CONFIG_STRLCAT


18 
	~<sys/ty≥s.h
>

19 
	~<°rög.h
>

20 
	~"°æˇt.h
"

29 
size_t


30 
	$°æˇt
(*
d°
, c⁄° *
§c
, 
size_t
 
dsize
)

32 c⁄° *
od°
 = 
d°
;

33 c⁄° *
o§c
 = 
§c
;

34 
size_t
 
n
 = 
dsize
;

35 
size_t
 
dÀn
;

38 
n
-- !0 && *
d°
 != '\0')

39 
d°
++;

40 
dÀn
 = 
d°
 - 
od°
;

41 
n
 = 
dsize
 - 
dÀn
;

43 i‡(
n
-- == 0)

44 (
dÀn
 + 
	`°æí
(
§c
));

45 *
§c
 != '\0') {

46 i‡(
n
 != 0) {

47 *
d°
++ = *
§c
;

48 
n
--;

50 
§c
++;

52 *
d°
 = '\0';

54 (
dÀn
 + (
§c
 - 
o§c
));

55 
	}
}

	@oslib/strlcat.h

1 #i‚de‡
CONFIG_STRLCAT


3 #i‚de‡
FIO_STRLCAT_H


4 
	#FIO_STRLCAT_H


	)

6 
	~<°ddef.h
>

8 
size_t
 
°æˇt
(*
d°
, c⁄° *
§c
, size_à
dsize
);

	@oslib/strndup.c

1 #i‚de‡
CONFIG_HAVE_STRNDUP


3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~"°∫dup.h
"

7 *
	$°∫dup
(c⁄° *
s
, 
size_t
 
n
)

9 *
°r
 = 
	`mÆloc
(
n
 + 1);

11 i‡(
°r
) {

12 
	`°∫˝y
(
°r
, 
s
, 
n
);

13 
°r
[
n
] = '\0';

16  
°r
;

17 
	}
}

	@oslib/strndup.h

1 #i‚de‡
CONFIG_HAVE_STRNDUP


3 #i‚de‡
FIO_STRNDUP_LIB_H


4 
	#FIO_STRNDUP_LIB_H


	)

6 
	~<°ddef.h
>

8 *
°∫dup
(c⁄° *
s
, 
size_t
 
n
);

	@oslib/strsep.c

1 #i‚de‡
CONFIG_STRSEP


3 
	~<°ddef.h
>

4 
	~"°r£p.h
"

6 *
	$°r£p
(**
°rögp
, c⁄° *
dñim
)

8 *
s
, *
tok
;

9 c⁄° *
•™p
;

10 
c
, 
sc
;

12 
s
 = *
°rögp
;

13 i‡(!
s
)

14  
NULL
;

16 
tok
 = 
s
;

18 
c
 = *
s
++;

19 
•™p
 = 
dñim
;

21 
sc
 = *
•™p
++;

22 i‡(
sc
 =
c
) {

23 i‡(
c
 == 0)

24 
s
 = 
NULL
;

26 
s
[-1] = 0;

27 *
°rögp
 = 
s
;

28  
tok
;

30 } 
sc
 != 0);

32 
	}
}

	@oslib/strsep.h

1 #i‚de‡
CONFIG_STRSEP


3 #i‚de‡
FIO_STRSEP_LIB_H


4 
	#FIO_STRSEP_LIB_H


	)

6 *
°r£p
(**, const *);

	@parse.c

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

6 
	~<˘y≥.h
>

7 
	~<°rög.h
>

8 
	~<î∫o.h
>

9 
	~<limôs.h
>

10 
	~<Êﬂt.h
>

12 
	~"compûî/compûî.h
"

13 
	~"∑r£.h
"

14 
	~"debug.h
"

15 
	~"log.h
"

16 
	~"›ti⁄s.h
"

17 
	~"›tgroup.h
"

18 
	~"mömax.h
"

19 
	~"lib/õì754.h
"

20 
	~"lib/pow2.h
"

22 #ifde‡
CONFIG_ARITHMETIC


23 
	~"y.èb.h
"

26 c⁄° *
	g›t_ty≥_«mes
[] = {

46 c⁄° 
fio_›ti⁄
 *
	g__fio_›ti⁄s
;

48 
	$vp_cmp
(c⁄° *
p1
, c⁄° *
p2
)

50 c⁄° 
vÆue_∑ú
 *
vp1
 = 
p1
;

51 c⁄° 
vÆue_∑ú
 *
vp2
 = 
p2
;

53  
	`°æí
(
vp2
->
ivÆ
Ë- såÀn(
vp1
->ival);

54 
	}
}

56 
	$posvÆ_s‹t
(c⁄° 
fio_›ti⁄
 *
o
, 
vÆue_∑ú
 *
vpm≠
)

58 c⁄° 
vÆue_∑ú
 *
vp
;

59 
íåõs
;

61 
	`mem£t
(
vpm≠
, 0, 
PARSE_MAX_VP
 * (
vÆue_∑ú
));

63 
íåõs
 = 0;É¡rõ†< 
PARSE_MAX_VP
;Éntries++) {

64 
vp
 = &
o
->
posvÆ
[
íåõs
];

65 i‡(!
vp
->
ivÆ
 || vp->ival[0] == '\0')

68 
	`mem˝y
(&
vpm≠
[
íåõs
], 
vp
, (*vp));

71 
	`qs‹t
(
vpm≠
, 
íåõs
, (
vÆue_∑ú
), 
vp_cmp
);

72 
	}
}

74 
	$show_›ti⁄_ønge
(c⁄° 
fio_›ti⁄
 *
o
,

75 
	$ssize_t
 (*
loggî
)(c⁄° *
f‹m©
, ...))

77 i‡(
o
->
ty≥
 =
FIO_OPT_FLOAT_LIST
) {

78 c⁄° *
£p
 = "";

79 i‡(!
o
->
möÂ
 && !o->
maxÂ
)

82 
	`loggî
("%20s: ", "range");

83 i‡(
o
->
möÂ
 !
DBL_MIN
) {

84 
	`loggî
("mö=%f", 
o
->
möÂ
);

85 
£p
 = ", ";

87 i‡(
o
->
maxÂ
 !
DBL_MAX
)

88 
	`loggî
("%smax=%f", 
£p
, 
o
->
maxÂ
);

89 
	`loggî
("\n");

90 } i‡(!
o
->
posvÆ
[0].
ivÆ
) {

91 i‡(!
o
->
mövÆ
 && !o->
maxvÆ
)

94 
	`loggî
("%20s: mö=%d", "ønge", 
o
->
mövÆ
);

95 i‡(
o
->
maxvÆ
)

96 
	`loggî
(", max=%d", 
o
->
maxvÆ
);

97 
	`loggî
("\n");

99 
	}
}

101 
	$show_›ti⁄_vÆues
(c⁄° 
fio_›ti⁄
 *
o
)

103 
i
;

105 
i
 = 0; i < 
PARSE_MAX_VP
; i++) {

106 c⁄° 
vÆue_∑ú
 *
vp
 = &
o
->
posvÆ
[
i
];

108 i‡(!
vp
->
ivÆ
)

111 
	`log_öfo
("%20s: %-10s", 
i
 =0 ? "vÆid vÆues" : "", 
vp
->
ivÆ
);

112 i‡(
vp
->
hñp
)

113 
	`log_öfo
(" %s", 
vp
->
hñp
);

114 
	`log_öfo
("\n");

117 i‡(
i
)

118 
	`log_öfo
("\n");

119 
	}
}

121 
	$show_›ti⁄_hñp
(c⁄° 
fio_›ti⁄
 *
o
, 
is_îr
)

123 c⁄° *
ty≥hñp
[] = {

124 [
FIO_OPT_INVALID
] = "invalid",

125 [
FIO_OPT_STR
] = "string (opt=bla)",

126 [
FIO_OPT_STR_ULL
] = "string (opt=bla)",

127 [
FIO_OPT_STR_MULTI
] = "string withÖossible k/m/gÖostfix (opt=4k)",

128 [
FIO_OPT_STR_VAL
] = "string (opt=bla)",

129 [
FIO_OPT_STR_VAL_TIME
] = "string withÅimeÖostfix (opt=10s)",

130 [
FIO_OPT_STR_STORE
] = "string (opt=bla)",

131 [
FIO_OPT_RANGE
] = "oneÅoÅhreeÑanges (opt=1k-4k[,4k-8k[,1k-8k]])",

132 [
FIO_OPT_INT
] = "integer value (opt=100)",

133 [
FIO_OPT_ULL
] = "integer value (opt=100)",

134 [
FIO_OPT_BOOL
] = "boolean value (opt=1)",

135 [
FIO_OPT_FLOAT_LIST
] = "list of floatingÖoint values separated by ':' (opt=5.9:7.8)",

136 [
FIO_OPT_STR_SET
] = "empty or boolean value ([0|1])",

137 [
FIO_OPT_DEPRECATED
] = "deprecated",

138 [
FIO_OPT_SOFT_DEPRECATED
] = "deprecated",

139 [
FIO_OPT_UNSUPPORTED
] = "unsupported",

141 
	`ssize_t
 (*
loggî
)(c⁄° *
f‹m©
, ...);

143 i‡(
is_îr
)

144 
loggî
 = 
log_îr
;

146 
loggî
 = 
log_öfo
;

148 i‡(
o
->
Æüs
)

149 
	`loggî
("%20s: %s\n", "Æüs", 
o
->
Æüs
);

151 
	`loggî
("%20s: %s\n", "ty≥", 
ty≥hñp
[
o
->
ty≥
]);

152 
	`loggî
("%20s: %s\n", "deÁu…", 
o
->
def
 ? o->def : "no default");

153 i‡(
o
->
¥of_«me
)

154 
	`loggî
("%20s: o∆y f‹Örofûê'%s'\n", "vÆid", 
o
->
¥of_«me
);

155 
	`show_›ti⁄_ønge
(
o
, 
loggî
);

156 
	`show_›ti⁄_vÆues
(
o
);

157 
	}
}

159 
	$gë_mu…_time
(c⁄° *
°r
, 
Àn
,

160 
is_£c⁄ds
)

162 c⁄° *
p
 = 
°r
;

163 *
c
;

164 
mu…
 = 1;

165 
i
;

170 (
p
 - 
°r
Ë<
Àn
) {

171 i‡(!
	`isdigô
((Ë*
p
) && (*p != '+') && (*p != '-'))

173 
p
++;

176 i‡(!
	`ißÕha
((Ë*
p
)) {

177 i‡(
is_£c⁄ds
)

183 
c
 = 
	`°rdup
(
p
);

184 
i
 = 0; i < 
	`°æí
(
c
); i++)

185 
c
[
i
] = 
	`tﬁowî
(()c[i]);

187 i‡(!
	`°∫cmp
("us", 
c
, 2) || !strncmp("usec", c, 4))

188 
mu…
 = 1;

189 i‡(!
	`°∫cmp
("ms", 
c
, 2) || !strncmp("msec", c, 4))

190 
mu…
 = 1000;

191 i‡(!
	`°rcmp
("s", 
c
))

192 
mu…
 = 1000000;

193 i‡(!
	`°rcmp
("m", 
c
))

194 
mu…
 = 60 * 1000000UL;

195 i‡(!
	`°rcmp
("h", 
c
))

196 
mu…
 = 60 * 60 * 1000000UL;

197 i‡(!
	`°rcmp
("d", 
c
))

198 
mu…
 = 24 * 60 * 60 * 1000000ULL;

200 
	`‰ì
(
c
);

201  
mu…
;

202 
	}
}

204 
	$is_£∑øt‹
(
c
)

206 
c
) {

215 
	}
}

217 
	$__gë_mu…_byãs
(c⁄° *
p
, *
d©a
,

218 *
≥r˚¡
)

220 
kb_ba£
 = 
	`fio_gë_kb_ba£
(
d©a
);

221 
ªt
 = 1;

222 
i
, 
pow
 = 0, 
mu…
 = 
kb_ba£
;

223 *
c
;

225 i‡(!
p
)

228 
c
 = 
	`°rdup
(
p
);

230 
i
 = 0; i < 
	`°æí
(
c
); i++) {

231 
c
[
i
] = 
	`tﬁowî
(()c[i]);

232 i‡(
	`is_£∑øt‹
(
c
[
i
])) {

233 
c
[
i
] = '\0';

241 i‡(!
	`°∫cmp
("pib", 
c
, 3)) {

242 
pow
 = 5;

243 i‡(
kb_ba£
 == 1000)

244 
mu…
 = 1024;

245 i‡(
kb_ba£
 == 1024)

246 
mu…
 = 1000;

247 } i‡(!
	`°∫cmp
("tib", 
c
, 3)) {

248 
pow
 = 4;

249 i‡(
kb_ba£
 == 1000)

250 
mu…
 = 1024;

251 i‡(
kb_ba£
 == 1024)

252 
mu…
 = 1000;

253 } i‡(!
	`°∫cmp
("gib", 
c
, 3)) {

254 
pow
 = 3;

255 i‡(
kb_ba£
 == 1000)

256 
mu…
 = 1024;

257 i‡(
kb_ba£
 == 1024)

258 
mu…
 = 1000;

259 } i‡(!
	`°∫cmp
("mib", 
c
, 3)) {

260 
pow
 = 2;

261 i‡(
kb_ba£
 == 1000)

262 
mu…
 = 1024;

263 i‡(
kb_ba£
 == 1024)

264 
mu…
 = 1000;

265 } i‡(!
	`°∫cmp
("kib", 
c
, 3)) {

266 
pow
 = 1;

267 i‡(
kb_ba£
 == 1000)

268 
mu…
 = 1024;

269 i‡(
kb_ba£
 == 1024)

270 
mu…
 = 1000;

271 } i‡(!
	`°∫cmp
("p", 
c
, 1) || !strncmp("pb", c, 2)) {

272 
pow
 = 5;

273 } i‡(!
	`°∫cmp
("t", 
c
, 1) || !strncmp("tb", c, 2)) {

274 
pow
 = 4;

275 } i‡(!
	`°∫cmp
("g", 
c
, 1) || !strncmp("gb", c, 2)) {

276 
pow
 = 3;

277 } i‡(!
	`°∫cmp
("m", 
c
, 1) || !strncmp("mb", c, 2)) {

278 
pow
 = 2;

279 } i‡(!
	`°∫cmp
("k", 
c
, 1) || !strncmp("kb", c, 2)) {

280 
pow
 = 1;

281 } i‡(!
	`°∫cmp
("%", 
c
, 1)) {

282 *
≥r˚¡
 = 1;

283 
	`‰ì
(
c
);

284  
ªt
;

287 
pow
--)

288 
ªt
 *(Ë
mu…
;

290 
	`‰ì
(
c
);

291  
ªt
;

292 
	}
}

294 
	$gë_mu…_byãs
(c⁄° *
°r
, 
Àn
, *
d©a
,

295 *
≥r˚¡
)

297 c⁄° *
p
 = 
°r
;

298 
digô_£í
 = 0;

300 i‡(
Àn
 < 2)

301  
	`__gë_mu…_byãs
(
°r
, 
d©a
, 
≥r˚¡
);

306 (
p
 - 
°r
Ë<
Àn
) {

307 i‡(!
	`isdigô
((Ë*
p
) &&

308 (((*
p
 !'+'Ë&& (*∞!'-')Ë|| 
digô_£í
))

310 
digô_£í
 |
	`isdigô
((Ë*
p
);

311 
p
++;

314 i‡(!
	`ißÕha
((Ë*
p
) && (*p != '%'))

315 
p
 = 
NULL
;

317  
	`__gë_mu…_byãs
(
p
, 
d©a
, 
≥r˚¡
);

318 
	}
}

320 
evÆu©e_¨ôhmëic_ex¥essi⁄
(c⁄° *
buf„r
, *
ivÆ
,

321 *
dvÆ
, 
im∂õd_unôs
,

322 
is_time
);

327 
	$°r_to_Êﬂt
(c⁄° *
°r
, *
vÆ
, 
is_time
)

329 #ifde‡
CONFIG_ARITHMETIC


330 
rc
;

331 
ivÆ
;

332 
dvÆ
;

334 i‡(
°r
[0] == '(') {

335 
rc
 = 
	`evÆu©e_¨ôhmëic_ex¥essi⁄
(
°r
, &
ivÆ
, &
dvÆ
, 1.0, 
is_time
);

336 i‡(!
rc
) {

337 *
vÆ
 = 
dvÆ
;

342  1 =
	`ssˇnf
(
°r
, "%lf", 
vÆ
);

343 
	}
}

348 
	$°r_to_decimÆ
(c⁄° *
°r
, *
vÆ
, 
kûo
, *
d©a
,

349 
is_£c⁄ds
, 
is_time
)

351 
Àn
, 
ba£
;

352 
rc
 = 1;

353 #ifde‡
CONFIG_ARITHMETIC


354 
ivÆ
;

355 
dvÆ
;

356 
im∂õd_unôs
 = 1.0;

359 
Àn
 = 
	`°æí
(
°r
);

360 i‡(!
Àn
)

363 #ifde‡
CONFIG_ARITHMETIC


364 i‡(
is_£c⁄ds
)

365 
im∂õd_unôs
 = 1000000.0;

366 i‡(
°r
[0] == '(')

367 
rc
 = 
	`evÆu©e_¨ôhmëic_ex¥essi⁄
(
°r
, &
ivÆ
, &
dvÆ
, 
im∂õd_unôs
, 
is_time
);

368 i‡(
°r
[0] ='(' && !
rc
) {

369 i‡(!
kûo
 && 
is_£c⁄ds
)

370 *
vÆ
 = 
ivÆ
 / 1000000LL;

372 *
vÆ
 = 
ivÆ
;

376 i‡(
rc
 == 1) {

377 *
íd±r
;

379 i‡(
	`°r°r
(
°r
, "0x") || strstr(str, "0X"))

380 
ba£
 = 16;

382 
ba£
 = 10;

384 *
vÆ
 = 
	`°πﬁl
(
°r
, &
íd±r
, 
ba£
);

385 i‡(*
vÆ
 =0 && 
íd±r
 =
°r
)

387 i‡(*
vÆ
 =
LONG_MAX
 && 
î∫o
 =
ERANGE
)

391 i‡(
kûo
) {

392 
mu…
;

393 
≥rc
 = 0;

395 
mu…
 = 
	`gë_mu…_byãs
(
°r
, 
Àn
, 
d©a
, &
≥rc
);

396 i‡(
≥rc
)

397 *
vÆ
 = -1ULL - *val;

399 *
vÆ
 *
mu…
;

401 *
vÆ
 *
	`gë_mu…_time
(
°r
, 
Àn
, 
is_£c⁄ds
);

404 
	}
}

406 
	$check_°r_byãs
(c⁄° *
p
, *
vÆ
, *
d©a
)

408  
	`°r_to_decimÆ
(
p
, 
vÆ
, 1, 
d©a
, 0, 0);

409 
	}
}

411 
	$check_°r_time
(c⁄° *
p
, *
vÆ
, 
is_£c⁄ds
)

413  
	`°r_to_decimÆ
(
p
, 
vÆ
, 0, 
NULL
, 
is_£c⁄ds
, 1);

414 
	}
}

416 
	$°rù_bœnk_‰⁄t
(**
p
)

418 *
s
 = *
p
;

420 i‡(!
	`°æí
(
s
))

422 
	`is•a˚
((Ë*
s
))

423 
s
++;

425 *
p
 = 
s
;

426 
	}
}

428 
	$°rù_bœnk_íd
(*
p
)

430 *
°¨t
 = 
p
, *
s
;

432 i‡(!
	`°æí
(
p
))

435 
s
 = 
	`°rchr
(
p
, ';');

436 i‡(
s
)

437 *
s
 = '\0';

438 
s
 = 
	`°rchr
(
p
, '#');

439 i‡(
s
)

440 *
s
 = '\0';

441 i‡(
s
)

442 
p
 = 
s
;

444 
s
 = 
p
 + 
	`°æí
(p);

445 (
	`is•a˚
((Ë*
s
Ë|| 
	`is˙ål
((Ë*s)Ë&& (†> 
°¨t
))

446 
s
--;

448 *(
s
 + 1) = '\0';

449 
	}
}

451 
	$check_ønge_byãs
(c⁄° *
°r
, *
vÆ
, *
d©a
)

453 
__vÆ
;

455 i‡(!
	`°r_to_decimÆ
(
°r
, &
__vÆ
, 1, 
d©a
, 0, 0)) {

456 *
vÆ
 = 
__vÆ
;

461 
	}
}

463 
	$check_öt
(c⁄° *
p
, *
vÆ
)

465 i‡(!
	`°æí
(
p
))

467 i‡(
	`°r°r
(
p
, "0x") || strstr(p, "0X")) {

468 i‡(
	`ssˇnf
(
p
, "%x", 
vÆ
) == 1)

471 i‡(
	`ssˇnf
(
p
, "%u", 
vÆ
) == 1)

476 
	}
}

478 
size_t
 
	$›t_Àn
(c⁄° *
°r
)

480 
dñimôî
[] = {',', ':'};

481 *
po°fix
;

482 
i
;

484 
i
 = 0; i < 
	`FIO_ARRAY_SIZE
(
dñimôî
); i++) {

485 
po°fix
 = 
	`°rchr
(
°r
, 
dñimôî
[
i
]);

486 i‡(
po°fix
)

487  ()(
po°fix
 - 
°r
);

490  
	`°æí
(
°r
);

491 
	}
}

493 
	$°r_m©ch_Àn
(c⁄° 
vÆue_∑ú
 *
vp
, c⁄° *
°r
)

495  
	`max
(
	`°æí
(
vp
->
ivÆ
), 
	`›t_Àn
(
°r
));

496 
	}
}

498 
	#vÆ_°‹e
(
±r
, 
vÆ
, 
off
, 
‹
, 
d©a
, 
o
) \

500 
±r
 = 
	`td_v¨
((
d©a
), (
o
), (
off
)); \

501 i‡((
‹
)) \

502 *
±r
 |(
vÆ
); \

504 *
±r
 = (
vÆ
); \

505 } 0)

	)

507 c⁄° *
	$›t_ty≥_«me
(c⁄° 
fio_›ti⁄
 *
o
)

509 
	`compûëime_as£π
(
	`FIO_ARRAY_SIZE
(
›t_ty≥_«mes
Ë- 1 =
FIO_OPT_UNSUPPORTED
,

512 i‡(
o
->
ty≥
 <
FIO_OPT_UNSUPPORTED
)

513  
›t_ty≥_«mes
[
o
->
ty≥
];

516 
	}
}

518 
boﬁ
 
	$vÆ_too_œrge
(c⁄° 
fio_›ti⁄
 *
o
, 
vÆ
,

519 
boﬁ
 
is_uöt
)

521 i‡(!
o
->
maxvÆ
)

522  
Ál£
;

524 i‡(
is_uöt
) {

525 i‡((Ë
vÆ
 < 0)

526  (Ë
vÆ
 > (Ë
o
->
maxvÆ
;

527  (Ë
vÆ
 > 
o
->
maxvÆ
;

530  
vÆ
 > 
o
->
maxvÆ
;

531 
	}
}

533 
boﬁ
 
	$vÆ_too_smÆl
(c⁄° 
fio_›ti⁄
 *
o
, 
vÆ
,

534 
boﬁ
 
is_uöt
)

536 i‡(!
o
->
mövÆ
)

537  
Ál£
;

539 i‡(
is_uöt
)

540  (Ë
vÆ
 < 
o
->
mövÆ
;

542  
vÆ
 < 
o
->
mövÆ
;

543 
	}
}

545 
	$__h™dÀ_›ti⁄
(c⁄° 
fio_›ti⁄
 *
o
, c⁄° *
±r
,

546 *
d©a
, 
fú°
, 
m‹e
, 
cuº
)

548 
û
=0, *
ûp
;

549 
fio_Â64_t
 *
Êp
;

550 
uŒ
, *
uŒp
;

551 
ul2
;

552 
uŒ1
, 
uŒ2
;

553 
uf
;

554 **
˝
 = 
NULL
;

555 
ªt
 = 0, 
is_time
 = 0;

556 c⁄° 
vÆue_∑ú
 *
vp
;

557 
vÆue_∑ú
 
posvÆ
[
PARSE_MAX_VP
];

558 
i
, 
Æl_skù≥d
 = 1;

560 
	`d¥öt
(
FD_PARSE
, "__h™dÀ_›ti⁄=%s,Åy≥=%s,Öå=%s\n", 
o
->
«me
,

561 
	`›t_ty≥_«me
(
o
), 
±r
);

563 i‡(!
±r
 && 
o
->
ty≥
 !
FIO_OPT_STR_SET
 && o->ty≥ !
FIO_OPT_STR
) {

564 
	`log_îr
("O±i⁄ %†ªquúe†™árgumít\n", 
o
->
«me
);

568 
o
->
ty≥
) {

569 
FIO_OPT_STR
:

570 
FIO_OPT_STR_ULL
:

571 
FIO_OPT_STR_MULTI
: {

572 
fio_›t_°r_‚
 *
‚
 = 
o
->
cb
;

574 
	`posvÆ_s‹t
(
o
, 
posvÆ
);

576 
ªt
 = 1;

577 
i
 = 0; i < 
PARSE_MAX_VP
; i++) {

578 
vp
 = &
posvÆ
[
i
];

579 i‡(!
vp
->
ivÆ
 || vp->ival[0] == '\0')

581 
Æl_skù≥d
 = 0;

582 i‡(!
±r
)

584 i‡(!
	`°∫cmp
(
vp
->
ivÆ
, 
±r
, 
	`°r_m©ch_Àn
(vp,Ötr))) {

585 
ªt
 = 0;

586 i‡(!
o
->
off1
)

588 i‡(
o
->
ty≥
 =
FIO_OPT_STR_ULL
)

589 
	`vÆ_°‹e
(
uŒp
, 
vp
->
ovÆ
, 
o
->
off1
, vp->
‹vÆ
, 
d©a
, o);

591 
	`vÆ_°‹e
(
ûp
, 
vp
->
ovÆ
, 
o
->
off1
, vp->
‹vÆ
, 
d©a
, o);

596 i‡(
ªt
 && !
Æl_skù≥d
)

597 
	`show_›ti⁄_vÆues
(
o
);

598 i‡(
‚
)

599 
ªt
 = 
	`‚
(
d©a
, 
±r
);

602 
FIO_OPT_STR_VAL_TIME
:

603 
is_time
 = 1;

604 
fio_ÁŒthrough
;

605 
FIO_OPT_ULL
:

606 
FIO_OPT_INT
:

607 
FIO_OPT_STR_VAL
:

608 
FIO_OPT_STR_VAL_ZONE
:

610 
fio_›t_°r_vÆ_‚
 *
‚
 = 
o
->
cb
;

611 
tmp
[128], *
p
;

612 
size_t
 
Àn
 = 
	`°æí
(
±r
);

614 i‡(
Àn
 > 0 && 
±r
[len - 1] == 'z') {

615 i‡(
o
->
ty≥
 =
FIO_OPT_STR_VAL_ZONE
) {

616 *
ï
;

617 
vÆ
;

619 
î∫o
 = 0;

620 
vÆ
 = 
	`°πoul
(
±r
, &
ï
, 10);

621 i‡(
î∫o
 =0 && 
ï
 !
±r
 && *ep == 'z') {

622 
uŒ
 = 
ZONE_BASE_VAL
 + (
uöt32_t
)
vÆ
;

623 
ªt
 = 0;

624 
°‹e_›ti⁄_vÆue
;

626 
	`log_îr
("%s: unexpected zone value '%s'\n",

627 
o
->
«me
, 
±r
);

631 
	`log_îr
("%s: 'z' suffix isn'tápplicable\n",

632 
o
->
«me
);

637 i‡(!
is_time
 && 
o
->is_time)

638 
is_time
 = 
o
->is_time;

640 
	`¢¥ötf
(
tmp
, —mp), "%s", 
±r
);

641 
p
 = 
	`°rchr
(
tmp
, ',');

642 i‡(
p
)

643 *
p
 = '\0';

645 i‡(
is_time
)

646 
ªt
 = 
	`check_°r_time
(
tmp
, &
uŒ
, 
o
->
is_£c⁄ds
);

648 
ªt
 = 
	`check_°r_byãs
(
tmp
, &
uŒ
, 
d©a
);

650 
	`d¥öt
(
FD_PARSE
, "Ñë=%d, out=%Œu\n", 
ªt
, 
uŒ
);

652 i‡(
ªt
)

654 i‡(
o
->
pow2
 && !
	`is_powî_of_2
(
uŒ
)) {

655 
	`log_îr
("%s: mu° bê®powî-of-2\n", 
o
->
«me
);

659 i‡(
	`vÆ_too_œrge
(
o
, 
uŒ
, o->
ty≥
 =
FIO_OPT_INT
)) {

660 
	`log_îr
("%s: max value out ofÑange: %llu"

661 " (%Œu max)\n", 
o
->
«me
, 
uŒ
, o->
maxvÆ
);

664 i‡(
	`vÆ_too_smÆl
(
o
, 
uŒ
, o->
ty≥
 =
FIO_OPT_INT
)) {

665 
	`log_îr
("%s: min value out ofÑange: %lld"

666 " (%d mö)\n", 
o
->
«me
, 
uŒ
, o->
mövÆ
);

669 i‡(
o
->
posvÆ
[0].
ivÆ
) {

670 
	`posvÆ_s‹t
(
o
, 
posvÆ
);

672 
ªt
 = 1;

673 
i
 = 0; i < 
PARSE_MAX_VP
; i++) {

674 
vp
 = &
posvÆ
[
i
];

675 i‡(!
vp
->
ivÆ
 || vp->ival[0] == '\0')

677 i‡(
vp
->
ovÆ
 =
uŒ
) {

678 
ªt
 = 0;

682 i‡(
ªt
) {

683 
	`log_îr
("fio: vÆuê%ŒuÇŸáŒowed:\n", 
uŒ
);

684 
	`show_›ti⁄_vÆues
(
o
);

689 
°‹e_›ti⁄_vÆue
:

690 i‡(
‚
)

691 
ªt
 = 
	`‚
(
d©a
, &
uŒ
);

693 i‡(
o
->
ty≥
 =
FIO_OPT_INT
) {

694 i‡(
fú°
)

695 
	`vÆ_°‹e
(
ûp
, 
uŒ
, 
o
->
off1
, 0, 
d©a
, o);

696 i‡(
cuº
 == 1) {

697 i‡(
o
->
off2
)

698 
	`vÆ_°‹e
(
ûp
, 
uŒ
, 
o
->
off2
, 0, 
d©a
, o);

700 i‡(
cuº
 == 2) {

701 i‡(
o
->
off3
)

702 
	`vÆ_°‹e
(
ûp
, 
uŒ
, 
o
->
off3
, 0, 
d©a
, o);

704 i‡(!
m‹e
) {

705 i‡(
cuº
 < 1) {

706 i‡(
o
->
off2
)

707 
	`vÆ_°‹e
(
ûp
, 
uŒ
, 
o
->
off2
, 0, 
d©a
, o);

709 i‡(
cuº
 < 2) {

710 i‡(
o
->
off3
)

711 
	`vÆ_°‹e
(
ûp
, 
uŒ
, 
o
->
off3
, 0, 
d©a
, o);

714 } i‡(
o
->
ty≥
 =
FIO_OPT_ULL
) {

715 i‡(
fú°
)

716 
	`vÆ_°‹e
(
uŒp
, 
uŒ
, 
o
->
off1
, 0, 
d©a
, o);

717 i‡(
cuº
 == 1) {

718 i‡(
o
->
off2
)

719 
	`vÆ_°‹e
(
uŒp
, 
uŒ
, 
o
->
off2
, 0, 
d©a
, o);

721 i‡(
cuº
 == 2) {

722 i‡(
o
->
off3
)

723 
	`vÆ_°‹e
(
uŒp
, 
uŒ
, 
o
->
off3
, 0, 
d©a
, o);

725 i‡(!
m‹e
) {

726 i‡(
cuº
 < 1) {

727 i‡(
o
->
off2
)

728 
	`vÆ_°‹e
(
uŒp
, 
uŒ
, 
o
->
off2
, 0, 
d©a
, o);

730 i‡(
cuº
 < 2) {

731 i‡(
o
->
off3
)

732 
	`vÆ_°‹e
(
uŒp
, 
uŒ
, 
o
->
off3
, 0, 
d©a
, o);

736 i‡(
fú°
)

737 
	`vÆ_°‹e
(
uŒp
, 
uŒ
, 
o
->
off1
, 0, 
d©a
, o);

738 i‡(!
m‹e
) {

739 i‡(
o
->
off2
)

740 
	`vÆ_°‹e
(
uŒp
, 
uŒ
, 
o
->
off2
, 0, 
d©a
, o);

746 
FIO_OPT_FLOAT_LIST
: {

747 *
˝2
;

749 i‡(
fú°
) {

754 i‡(
o
->
off2
) {

755 
ul2
 = 0;

756 
ûp
 = 
	`td_v¨
(
d©a
, 
o
, o->
off2
);

757 *
ûp
 = 
ul2
;

760 
Êp
 = 
	`td_v¨
(
d©a
, 
o
, o->
off1
);

761 
i
 = 0; i < 
o
->
maxÀn
; i++)

762 
Êp
[
i
].
u
.
f
 = 0.0;

764 i‡(
cuº
 >
o
->
maxÀn
) {

765 
	`log_îr
("theÜistÉxceeding maxÜength %d\n",

766 
o
->
maxÀn
);

769 i‡(!
	`°r_to_Êﬂt
(
±r
, &
uf
, 0)) {

770 
	`log_îr
("nŸá flﬂtögÖoöàvÆue: %s\n", 
±r
);

773 i‡(
o
->
möÂ
 || o->
maxÂ
) {

774 i‡(
uf
 > 
o
->
maxÂ
) {

775 
	`log_îr
("value out ofÑange: %f"

776 " (øngêmax: %f)\n", 
uf
, 
o
->
maxÂ
);

779 i‡(
uf
 < 
o
->
möÂ
) {

780 
	`log_îr
("value out ofÑange: %f"

781 " (øngêmö: %f)\n", 
uf
, 
o
->
möÂ
);

786 
Êp
 = 
	`td_v¨
(
d©a
, 
o
, o->
off1
);

787 
Êp
[
cuº
].
u
.
f
 = 
uf
;

789 
	`d¥öt
(
FD_PARSE
, " out=%f\n", 
uf
);

796 
˝2
 = 
	`°rchr
(
±r
, '.');

797 i‡(
˝2
 !
NULL
) {

798 
Àn
 = 0;

800 *++
˝2
 != '\0' && *cp2 >= '0' && *cp2 <= '9')

801 
Àn
++;

803 i‡(
o
->
off2
) {

804 
ûp
 = 
	`td_v¨
(
d©a
, 
o
, o->
off2
);

805 i‡(
Àn
 > *
ûp
)

806 *
ûp
 = 
Àn
;

812 
FIO_OPT_STR_STORE
: {

813 
fio_›t_°r_‚
 *
‚
 = 
o
->
cb
;

815 i‡(!
	`°æí
(
±r
))

818 i‡(
o
->
off1
) {

819 
˝
 = 
	`td_v¨
(
d©a
, 
o
, o->
off1
);

820 i‡(*
˝
)

821 
	`‰ì
(*
˝
);

822 *
˝
 = 
	`°rdup
(
±r
);

823 i‡(
	`°æí
(
±r
Ë> 
o
->
maxÀn
 - 1) {

824 
	`log_îr
("valueÉxceeds maxÜength of %d\n",

825 
o
->
maxÀn
);

830 i‡(
‚
)

831 
ªt
 = 
	`‚
(
d©a
, 
±r
);

832 i‡(
o
->
posvÆ
[0].
ivÆ
) {

833 
	`posvÆ_s‹t
(
o
, 
posvÆ
);

835 
ªt
 = 1;

836 
i
 = 0; i < 
PARSE_MAX_VP
; i++) {

837 
vp
 = &
posvÆ
[
i
];

838 i‡(!
vp
->
ivÆ
 || vp->ivÆ[0] ='\0' || !
˝
)

840 
Æl_skù≥d
 = 0;

841 i‡(!
	`°∫cmp
(
vp
->
ivÆ
, 
±r
, 
	`°r_m©ch_Àn
(vp,Ötr))) {

842 *
ª°
;

844 
ªt
 = 0;

845 i‡(
vp
->
cb
)

846 
‚
 = 
vp
->
cb
;

847 
ª°
 = 
	`°r°r
(*
˝
 ?: 
±r
, ":");

848 i‡(
ª°
) {

849 i‡(*
˝
)

850 *
ª°
 = '\0';

851 
±r
 = 
ª°
 + 1;

853 
±r
 = 
NULL
;

859 i‡(!
Æl_skù≥d
) {

860 i‡(
ªt
 && !*
˝
)

861 
	`show_›ti⁄_vÆues
(
o
);

862 i‡(
ªt
 && *
˝
)

863 
ªt
 = 0;

864 i‡(
‚
 && 
±r
)

865 
ªt
 = 
	`‚
(
d©a
, 
±r
);

870 
FIO_OPT_RANGE
: {

871 
tmp
[128];

872 *
p1
, *
p2
;

874 
	`¢¥ötf
(
tmp
, —mp), "%s", 
±r
);

877 
p1
 = 
	`°rchr
(
tmp
, ',');

878 i‡(
p1
)

879 *
p1
 = '\0';

881 
p1
 = 
	`°rchr
(
tmp
, '-');

882 i‡(!
p1
) {

883 
p1
 = 
	`°rchr
(
tmp
, ':');

884 i‡(!
p1
) {

885 
ªt
 = 1;

890 
p2
 = 
p1
 + 1;

891 *
p1
 = '\0';

892 
p1
 = 
tmp
;

894 
ªt
 = 1;

895 i‡(!
	`check_ønge_byãs
(
p1
, &
uŒ1
, 
d©a
) &&

896 !
	`check_ønge_byãs
(
p2
, &
uŒ2
, 
d©a
)) {

897 
ªt
 = 0;

898 i‡(
uŒ1
 > 
uŒ2
) {

899 
foo
 = 
uŒ1
;

901 
uŒ1
 = 
uŒ2
;

902 
uŒ2
 = 
foo
;

905 i‡(
fú°
) {

906 
	`vÆ_°‹e
(
uŒp
, 
uŒ1
, 
o
->
off1
, 0, 
d©a
, o);

907 
	`vÆ_°‹e
(
uŒp
, 
uŒ2
, 
o
->
off2
, 0, 
d©a
, o);

909 i‡(
cuº
 == 1) {

910 i‡(
o
->
off3
 && o->
off4
) {

911 
	`vÆ_°‹e
(
uŒp
, 
uŒ1
, 
o
->
off3
, 0, 
d©a
, o);

912 
	`vÆ_°‹e
(
uŒp
, 
uŒ2
, 
o
->
off4
, 0, 
d©a
, o);

915 i‡(
cuº
 == 2) {

916 i‡(
o
->
off5
 && o->
off6
) {

917 
	`vÆ_°‹e
(
uŒp
, 
uŒ1
, 
o
->
off5
, 0, 
d©a
, o);

918 
	`vÆ_°‹e
(
uŒp
, 
uŒ2
, 
o
->
off6
, 0, 
d©a
, o);

921 i‡(!
m‹e
) {

922 i‡(
cuº
 < 1) {

923 i‡(
o
->
off3
 && o->
off4
) {

924 
	`vÆ_°‹e
(
uŒp
, 
uŒ1
, 
o
->
off3
, 0, 
d©a
, o);

925 
	`vÆ_°‹e
(
uŒp
, 
uŒ2
, 
o
->
off4
, 0, 
d©a
, o);

928 i‡(
cuº
 < 2) {

929 i‡(
o
->
off5
 && o->
off6
) {

930 
	`vÆ_°‹e
(
uŒp
, 
uŒ1
, 
o
->
off5
, 0, 
d©a
, o);

931 
	`vÆ_°‹e
(
uŒp
, 
uŒ2
, 
o
->
off6
, 0, 
d©a
, o);

939 
FIO_OPT_BOOL
:

940 
FIO_OPT_STR_SET
: {

941 
fio_›t_öt_‚
 *
‚
 = 
o
->
cb
;

943 i‡(
±r
)

944 
ªt
 = 
	`check_öt
(
±r
, &
û
);

945 i‡(
o
->
ty≥
 =
FIO_OPT_BOOL
)

946 
ªt
 = 1;

948 
û
 = 1;

950 
	`d¥öt
(
FD_PARSE
, "Ñë=%d, out=%d\n", 
ªt
, 
û
);

952 i‡(
ªt
)

955 i‡(
o
->
maxvÆ
 && 
û
 > () o->maxval) {

956 
	`log_îr
("max value out ofÑange: %d (%llu max)\n",

957 
û
, 
o
->
maxvÆ
);

960 i‡(
o
->
mövÆ
 && 
û
 < o->minval) {

961 
	`log_îr
("min value out ofÑange: %d (%d min)\n",

962 
û
, 
o
->
mövÆ
);

966 i‡(
o
->
√g
)

967 
û
 = !il;

969 i‡(
‚
)

970 
ªt
 = 
	`‚
(
d©a
, &
û
);

972 i‡(
fú°
)

973 
	`vÆ_°‹e
(
ûp
, 
û
, 
o
->
off1
, 0, 
d©a
, o);

974 i‡(!
m‹e
) {

975 i‡(
o
->
off2
)

976 
	`vÆ_°‹e
(
ûp
, 
û
, 
o
->
off2
, 0, 
d©a
, o);

981 
FIO_OPT_DEPRECATED
:

982 
ªt
 = 1;

983 
fio_ÁŒthrough
;

984 
FIO_OPT_SOFT_DEPRECATED
:

985 
	`log_öfo
("O±i⁄ %†i†dïªˇãd\n", 
o
->
«me
);

988 
	`log_îr
("Bad o±i⁄Åy≥ %u\n", 
o
->
ty≥
);

989 
ªt
 = 1;

992 i‡(
ªt
)

993  
ªt
;

995 i‡(
o
->
vîify
) {

996 
ªt
 = 
o
->
	`vîify
(o, 
d©a
);

997 i‡(
ªt
) {

998 
	`log_îr
("Correct format for offending option\n");

999 
	`log_îr
("%20s: %s\n", 
o
->
«me
, o->
hñp
);

1000 
	`show_›ti⁄_hñp
(
o
, 1);

1004  
ªt
;

1005 
	}
}

1007 
	$h™dÀ_›ti⁄
(c⁄° 
fio_›ti⁄
 *
o
, c⁄° *
__±r
,

1008 *
d©a
)

1010 *
o_±r
, *
±r
, *
±r2
;

1011 
ªt
, 
d⁄e
;

1013 
	`d¥öt
(
FD_PARSE
, "h™dÀ_›ti⁄=%s,Öå=%s\n", 
o
->
«me
, 
__±r
);

1015 
o_±r
 = 
±r
 = 
NULL
;

1016 i‡(
__±r
)

1017 
o_±r
 = 
±r
 = 
	`°rdup
(
__±r
);

1024 
d⁄e
 = 0;

1025 
ªt
 = 1;

1027 
__ªt
;

1029 
±r2
 = 
NULL
;

1030 i‡(
±r
 &&

1031 (
o
->
ty≥
 !
FIO_OPT_STR_STORE
) &&

1032 (
o
->
ty≥
 !
FIO_OPT_STR
) &&

1033 (
o
->
ty≥
 !
FIO_OPT_STR_ULL
) &&

1034 (
o
->
ty≥
 !
FIO_OPT_FLOAT_LIST
)) {

1035 
±r2
 = 
	`°rchr
(
±r
, ',');

1036 i‡(
±r2
 && *(ptr2 + 1) == '\0')

1037 *
±r2
 = '\0';

1038 i‡(
o
->
ty≥
 !
FIO_OPT_STR_MULTI
 && o->ty≥ !
FIO_OPT_RANGE
) {

1039 i‡(!
±r2
)

1040 
±r2
 = 
	`°rchr
(
±r
, ':');

1041 i‡(!
±r2
)

1042 
±r2
 = 
	`°rchr
(
±r
, '-');

1044 } i‡(
±r
 && 
o
->
ty≥
 =
FIO_OPT_FLOAT_LIST
) {

1045 
±r2
 = 
	`°rchr
(
±r
, ':');

1053 
__ªt
 = 
	`__h™dÀ_›ti⁄
(
o
, 
±r
, 
d©a
, !
d⁄e
, !!
±r2
, done);

1054 i‡(
ªt
)

1055 
ªt
 = 
__ªt
;

1057 i‡(!
±r2
)

1060 
±r
 = 
±r2
 + 1;

1061 
d⁄e
++;

1064 i‡(
o_±r
)

1065 
	`‰ì
(
o_±r
);

1066  
ªt
;

1067 
	}
}

1069 
fio_›ti⁄
 *
	$föd_›ti⁄
(
fio_›ti⁄
 *
›ti⁄s
, c⁄° *
›t
)

1071 
fio_›ti⁄
 *
o
;

1073 
o
 = &
›ti⁄s
[0]; o->
«me
; o++) {

1074 i‡(!
	`o_m©ch
(
o
, 
›t
))

1076 i‡(
o
->
ty≥
 =
FIO_OPT_UNSUPPORTED
) {

1077 
	`log_îr
("O±i⁄ <%s>: %s\n", 
o
->
«me
, o->
hñp
);

1081  
o
;

1084  
NULL
;

1085 
	}
}

1087 c⁄° 
fio_›ti⁄
 *

1088 
	$föd_›ti⁄_c
(c⁄° 
fio_›ti⁄
 *
›ti⁄s
, c⁄° *
›t
)

1090 c⁄° 
fio_›ti⁄
 *
o
;

1092 
o
 = &
›ti⁄s
[0]; o->
«me
; o++) {

1093 i‡(!
	`o_m©ch
(
o
, 
›t
))

1095 i‡(
o
->
ty≥
 =
FIO_OPT_UNSUPPORTED
) {

1096 
	`log_îr
("O±i⁄ <%s>: %s\n", 
o
->
«me
, o->
hñp
);

1100  
o
;

1103  
NULL
;

1104 
	}
}

1106 c⁄° 
fio_›ti⁄
 *

1107 
	$gë_›ti⁄
(*
›t
, c⁄° 
fio_›ti⁄
 *
›ti⁄s
, **
po°
)

1109 c⁄° 
fio_›ti⁄
 *
o
;

1110 *
ªt
;

1112 
ªt
 = 
	`°rchr
(
›t
, '=');

1113 i‡(
ªt
) {

1114 *
po°
 = 
ªt
;

1115 *
ªt
 = '\0';

1116 
ªt
 = 
›t
;

1117 (*
po°
)++;

1118 
	`°rù_bœnk_íd
(
ªt
);

1119 
o
 = 
	`föd_›ti⁄_c
(
›ti⁄s
, 
ªt
);

1121 
o
 = 
	`föd_›ti⁄_c
(
›ti⁄s
, 
›t
);

1122 *
po°
 = 
NULL
;

1125  
o
;

1126 
	}
}

1128 
	$›t_cmp
(c⁄° *
p1
, c⁄° *
p2
)

1130 c⁄° 
fio_›ti⁄
 *
o
;

1131 *
s
, *
foo
;

1132 
¥io1
, 
¥io2
;

1134 
¥io1
 = 
¥io2
 = 0;

1136 i‡(*(**)
p1
) {

1137 
s
 = 
	`°rdup
(*((**Ë
p1
));

1138 
o
 = 
	`gë_›ti⁄
(
s
, 
__fio_›ti⁄s
, &
foo
);

1139 i‡(
o
)

1140 
¥io1
 = 
o
->
¥io
;

1141 
	`‰ì
(
s
);

1143 i‡(*(**)
p2
) {

1144 
s
 = 
	`°rdup
(*((**Ë
p2
));

1145 
o
 = 
	`gë_›ti⁄
(
s
, 
__fio_›ti⁄s
, &
foo
);

1146 i‡(
o
)

1147 
¥io2
 = 
o
->
¥io
;

1148 
	`‰ì
(
s
);

1151  
¥io2
 - 
¥io1
;

1152 
	}
}

1154 
	$s‹t_›ti⁄s
(**
›ts
, c⁄° 
fio_›ti⁄
 *
›ti⁄s
, 
num_›ts
)

1156 
__fio_›ti⁄s
 = 
›ti⁄s
;

1157 
	`qs‹t
(
›ts
, 
num_›ts
, (*), 
›t_cmp
);

1158 
__fio_›ti⁄s
 = 
NULL
;

1159 
	}
}

1161 
	$add_to_dump_li°
(c⁄° 
fio_›ti⁄
 *
o
,

1162 
Êi°_hód
 *
dump_li°
, c⁄° *
po°
)

1164 
¥öt_›ti⁄
 *
p
;

1166 i‡(!
dump_li°
)

1169 
p
 = 
	`mÆloc
((*p));

1170 
p
->
«me
 = 
	`°rdup
(
o
->name);

1171 i‡(
po°
)

1172 
p
->
vÆue
 = 
	`°rdup
(
po°
);

1174 
p
->
vÆue
 = 
NULL
;

1176 
	`Êi°_add_èû
(&
p
->
li°
, 
dump_li°
);

1177 
	}
}

1179 
	$∑r£_cmd_›ti⁄
(c⁄° *
›t
, c⁄° *
vÆ
,

1180 c⁄° 
fio_›ti⁄
 *
›ti⁄s
, *
d©a
,

1181 
Êi°_hód
 *
dump_li°
)

1183 c⁄° 
fio_›ti⁄
 *
o
;

1185 
o
 = 
	`föd_›ti⁄_c
(
›ti⁄s
, 
›t
);

1186 i‡(!
o
) {

1187 
	`log_îr
("Bad o±i⁄ <%s>\n", 
›t
);

1191 i‡(
	`h™dÀ_›ti⁄
(
o
, 
vÆ
, 
d©a
)) {

1192 
	`log_îr
("fio: faûedÖ¨sög %s=%s\n", 
›t
, 
vÆ
);

1196 
	`add_to_dump_li°
(
o
, 
dump_li°
, 
vÆ
);

1198 
	}
}

1200 
	$∑r£_›ti⁄
(*
›t
, c⁄° *
öput
, c⁄° 
fio_›ti⁄
 *
›ti⁄s
,

1201 c⁄° 
fio_›ti⁄
 **
o
, *
d©a
,

1202 
Êi°_hód
 *
dump_li°
)

1204 *
po°
;

1206 i‡(!
›t
) {

1207 
	`log_îr
("fio: faûedÖ¨sög %s\n", 
öput
);

1208 *
o
 = 
NULL
;

1212 *
o
 = 
	`gë_›ti⁄
(
›t
, 
›ti⁄s
, &
po°
);

1213 i‡(!*
o
) {

1214 i‡(
po°
) {

1215 
Àn
 = 
	`°æí
(
›t
);

1216 i‡(
›t
 + 
Àn
 + 1 !
po°
)

1217 
	`memmove
(
›t
 + 
Àn
 + 1, 
po°
, 
	`°æí
(post));

1218 
›t
[
Àn
] = '=';

1223 i‡(
	`h™dÀ_›ti⁄
(*
o
, 
po°
, 
d©a
)) {

1224 
	`log_îr
("fio: faûedÖ¨sög %s\n", 
öput
);

1228 
	`add_to_dump_li°
(*
o
, 
dump_li°
, 
po°
);

1230 
	}
}

1236 
	$°rög_di°™˚
(c⁄° *
s1
, c⁄° *
s2
)

1238 
s1_Àn
 = 
	`°æí
(
s1
);

1239 
s2_Àn
 = 
	`°æí
(
s2
);

1240 *
p
, *
q
, *
r
;

1241 
i
, 
j
;

1243 
p
 = 
	`mÆloc
((Ë* (
s2_Àn
 + 1));

1244 
q
 = 
	`mÆloc
((Ë* (
s2_Àn
 + 1));

1246 
p
[0] = 0;

1247 
i
 = 1; i <
s2_Àn
; i++)

1248 
p
[
i
] =Ö[i - 1] + 1;

1250 
i
 = 1; i <
s1_Àn
; i++) {

1251 
q
[0] = 
p
[0] + 1;

1252 
j
 = 1; j <
s2_Àn
; j++) {

1253 
sub
 = 
p
[
j
 - 1];

1254 
pmö
;

1256 i‡(
s1
[
i
 - 1] !
s2
[
j
 - 1])

1257 
sub
++;

1259 
pmö
 = 
	`mö
(
q
[
j
 - 1] + 1, 
sub
);

1260 
q
[
j
] = 
	`mö
(
p
[j] + 1, 
pmö
);

1262 
r
 = 
p
;

1263 
p
 = 
q
;

1264 
q
 = 
r
;

1267 
i
 = 
p
[
s2_Àn
];

1268 
	`‰ì
(
p
);

1269 
	`‰ì
(
q
);

1270  
i
;

1271 
	}
}

1277 
	$°rög_di°™˚_ok
(c⁄° *
›t
, 
di°™˚
)

1279 
size_t
 
Àn
;

1281 
Àn
 = 
	`°æí
(
›t
);

1282 
Àn
 = (len + 1) / 2;

1283  
di°™˚
 <
Àn
;

1284 
	}
}

1286 c⁄° 
fio_›ti⁄
 *
	$föd_chûd
(c⁄° 
fio_›ti⁄
 *
›ti⁄s
,

1287 c⁄° 
fio_›ti⁄
 *
o
)

1289 c⁄° 
fio_›ti⁄
 *
__o
;

1291 
__o
 = 
›ti⁄s
 + 1; __o->
«me
; __o++)

1292 i‡(
__o
->
∑ª¡
 && !
	`°rcmp
(__o->∑ª¡, 
o
->
«me
))

1293  
__o
;

1295  
NULL
;

1296 
	}
}

1298 
	$__¥öt_›ti⁄
(c⁄° 
fio_›ti⁄
 *
o
,

1299 c⁄° 
fio_›ti⁄
 *
‹g
,

1300 
Àvñ
)

1302 
«me
[256], *
p
;

1303 
dïth
;

1305 i‡(!
o
)

1308 
p
 = 
«me
;

1309 
dïth
 = 
Àvñ
;

1310 
dïth
--)

1311 
p
 +
	`•rötf
(p, "%s", " ");

1313 
	`•rötf
(
p
, "%s", 
o
->
«me
);

1315 
	`log_öfo
("%-24s: %s\n", 
«me
, 
o
->
hñp
);

1316 
	}
}

1318 
	$¥öt_›ti⁄
(c⁄° 
fio_›ti⁄
 *
o
)

1320 c⁄° 
fio_›ti⁄
 *
∑ª¡
;

1321 c⁄° 
fio_›ti⁄
 *
__o
;

1322 
¥öãd
;

1323 
Àvñ
;

1325 
	`__¥öt_›ti⁄
(
o
, 
NULL
, 0);

1326 
∑ª¡
 = 
o
;

1327 
Àvñ
 = 0;

1329 
Àvñ
++;

1330 
¥öãd
 = 0;

1332 (
__o
 = 
	`föd_chûd
(
o
, 
∑ª¡
)Ë!
NULL
) {

1333 
	`__¥öt_›ti⁄
(
__o
, 
o
, 
Àvñ
);

1334 
o
 = 
__o
;

1335 
¥öãd
++;

1338 
∑ª¡
 = 
o
;

1339 } 
¥öãd
);

1340 
	}
}

1342 
	$show_cmd_hñp
(c⁄° 
fio_›ti⁄
 *
›ti⁄s
, c⁄° *
«me
)

1344 c⁄° 
fio_›ti⁄
 *
o
, *
˛o£°
;

1345 
be°_di°
 = -1U;

1346 
found
 = 0;

1347 
show_Æl
 = 0;

1349 i‡(!
«me
 || !
	`°rcmp
(name, "all"))

1350 
show_Æl
 = 1;

1352 
˛o£°
 = 
NULL
;

1353 
be°_di°
 = -1;

1354 
o
 = &
›ti⁄s
[0]; o->
«me
; o++) {

1355 
m©ch
 = 0;

1357 i‡(
o
->
ty≥
 =
FIO_OPT_DEPRECATED
 ||

1358 
o
->
ty≥
 =
FIO_OPT_SOFT_DEPRECATED
)

1360 i‡(!
exec_¥ofûe
 && 
o
->
¥of_«me
)

1362 i‡(
exec_¥ofûe
 && !(
o
->
¥of_«me
 && !
	`°rcmp
(exec_profile, o->prof_name)))

1365 i‡(
«me
) {

1366 i‡(!
	`°rcmp
(
«me
, 
o
->name) ||

1367 (
o
->
Æüs
 && !
	`°rcmp
(
«me
, o->alias)))

1368 
m©ch
 = 1;

1370 
di°
;

1372 
di°
 = 
	`°rög_di°™˚
(
«me
, 
o
->name);

1373 i‡(
di°
 < 
be°_di°
) {

1374 
be°_di°
 = 
di°
;

1375 
˛o£°
 = 
o
;

1380 i‡(
show_Æl
 || 
m©ch
) {

1381 
found
 = 1;

1382 i‡(
m©ch
)

1383 
	`log_öfo
("%20s: %s\n", 
o
->
«me
, o->
hñp
);

1384 i‡(
show_Æl
) {

1385 i‡(!
o
->
∑ª¡
)

1386 
	`¥öt_›ti⁄
(
o
);

1391 i‡(!
m©ch
)

1394 
	`show_›ti⁄_hñp
(
o
, 0);

1397 i‡(
found
)

1400 
	`log_îr
("Nÿsuch comm™d: %s", 
«me
);

1406 i‡(
˛o£°
 && 
be°_di°
 < 3) {

1407 
	`log_öfo
(" - showing closest match\n");

1408 
	`log_öfo
("%20s: %s\n", 
˛o£°
->
«me
, clo£°->
hñp
);

1409 
	`show_›ti⁄_hñp
(
˛o£°
, 0);

1411 
	`log_öfo
("\n");

1414 
	}
}

1419 
	$fûl_deÁu…_›ti⁄s
(*
d©a
, c⁄° 
fio_›ti⁄
 *
›ti⁄s
)

1421 c⁄° 
fio_›ti⁄
 *
o
;

1423 
	`d¥öt
(
FD_PARSE
, "filling default options\n");

1425 
o
 = &
›ti⁄s
[0]; o->
«me
; o++)

1426 i‡(
o
->
def
)

1427 
	`h™dÀ_›ti⁄
(
o
, o->
def
, 
d©a
);

1428 
	}
}

1430 
	$›ti⁄_öô
(
fio_›ti⁄
 *
o
)

1432 i‡(
o
->
ty≥
 =
FIO_OPT_DEPRECATED
 || o->ty≥ =
FIO_OPT_UNSUPPORTED
 ||

1433 
o
->
ty≥
 =
FIO_OPT_SOFT_DEPRECATED
)

1435 i‡(
o
->
«me
 && !o->
 ame
)

1436 
	`log_îr
("O±i⁄ %s: missögÜ⁄g o±i⁄Çame\n", 
o
->
«me
);

1437 i‡(
o
->
ty≥
 =
FIO_OPT_BOOL
) {

1438 
o
->
mövÆ
 = 0;

1439 
o
->
maxvÆ
 = 1;

1441 i‡(
o
->
ty≥
 =
FIO_OPT_INT
) {

1442 i‡(!
o
->
maxvÆ
)

1443 
o
->
maxvÆ
 = 
UINT_MAX
;

1445 i‡(
o
->
ty≥
 =
FIO_OPT_ULL
) {

1446 i‡(!
o
->
maxvÆ
)

1447 
o
->
maxvÆ
 = 
ULLONG_MAX
;

1449 i‡(
o
->
ty≥
 =
FIO_OPT_STR_SET
 && o->
def
 && !o->
no_w¨n_def
) {

1450 
	`log_îr
("Option %s: string set option with"

1451 " deÁu… wû»Æway†bêåue\n", 
o
->
«me
);

1453 i‡(!
o
->
cb
 && !o->
off1
)

1454 
	`log_îr
("O±i⁄ %s:Çeôhî cbÇ‹ off£àgiví\n", 
o
->
«me
);

1455 i‡(!
o
->
ˇãg‹y
) {

1456 
	`log_öfo
("O±i⁄ %s:Çÿˇãg‹y deföed. SëtögÅÿmisc\n", 
o
->
«me
);

1457 
o
->
ˇãg‹y
 = 
FIO_OPT_C_GENERAL
;

1458 
o
->
group
 = 
FIO_OPT_G_INVALID
;

1460 
	}
}

1466 
	$›ti⁄s_öô
(
fio_›ti⁄
 *
›ti⁄s
)

1468 
fio_›ti⁄
 *
o
;

1470 
	`d¥öt
(
FD_PARSE
, "init options\n");

1472 
o
 = &
›ti⁄s
[0]; o->
«me
; o++) {

1473 
	`›ti⁄_öô
(
o
);

1474 i‡(
o
->
övî£
)

1475 
o
->
öv_›t
 = 
	`föd_›ti⁄
(
›ti⁄s
, o->
övî£
);

1477 
	}
}

1479 
	$›ti⁄s_mem_du≥
(c⁄° 
fio_›ti⁄
 *
›ti⁄s
, *
d©a
)

1481 c⁄° 
fio_›ti⁄
 *
o
;

1482 **
±r
;

1484 
	`d¥öt
(
FD_PARSE
, "dup options\n");

1486 
o
 = &
›ti⁄s
[0]; o->
«me
; o++) {

1487 i‡(
o
->
ty≥
 !
FIO_OPT_STR_STORE
)

1490 
±r
 = 
	`td_v¨
(
d©a
, 
o
, o->
off1
);

1491 i‡(*
±r
)

1492 *
±r
 = 
	`°rdup
(*ptr);

1494 
	}
}

1496 
	$›ti⁄s_‰ì
(c⁄° 
fio_›ti⁄
 *
›ti⁄s
, *
d©a
)

1498 c⁄° 
fio_›ti⁄
 *
o
;

1499 **
±r
;

1501 
	`d¥öt
(
FD_PARSE
, "free options\n");

1503 
o
 = &
›ti⁄s
[0]; o->
«me
; o++) {

1504 i‡(
o
->
ty≥
 !
FIO_OPT_STR_STORE
 || !o->
off1
 || o->
no_‰ì
)

1507 
±r
 = 
	`td_v¨
(
d©a
, 
o
, o->
off1
);

1508 i‡(*
±r
) {

1509 
	`‰ì
(*
±r
);

1510 *
±r
 = 
NULL
;

1513 
	}
}

	@parse.h

1 #i‚de‡
FIO_PARSE_H


2 
	#FIO_PARSE_H


	)

4 
	~<öây≥s.h
>

5 
	~"Êi°.h
"

10 
	efio_›t_ty≥
 {

11 
	mFIO_OPT_INVALID
 = 0,

12 
	mFIO_OPT_STR
,

13 
	mFIO_OPT_STR_ULL
,

14 
	mFIO_OPT_STR_MULTI
,

15 
	mFIO_OPT_STR_VAL
,

16 
	mFIO_OPT_STR_VAL_TIME
,

17 
	mFIO_OPT_STR_STORE
,

18 
	mFIO_OPT_RANGE
,

19 
	mFIO_OPT_INT
,

20 
	mFIO_OPT_ULL
,

21 
	mFIO_OPT_BOOL
,

22 
	mFIO_OPT_FLOAT_LIST
,

23 
	mFIO_OPT_STR_SET
,

24 
	mFIO_OPT_STR_VAL_ZONE
,

25 
	mFIO_OPT_DEPRECATED
,

26 
	mFIO_OPT_SOFT_DEPRECATED
,

27 
	mFIO_OPT_UNSUPPORTED
,

33 
	svÆue_∑ú
 {

34 c⁄° *
	mivÆ
;

35 
	movÆ
;

36 c⁄° *
	mhñp
;

37 
	m‹vÆ
;

38 *
	mcb
;

41 
	#OPT_LEN_MAX
 8192

	)

42 
	#PARSE_MAX_VP
 32

	)

47 
	sfio_›ti⁄
 {

48 c⁄° *
	m«me
;

49 c⁄° *
	m ame
;

50 c⁄° *
	mÆüs
;

51 
fio_›t_ty≥
 
	mty≥
;

52 
	moff1
;

53 
	moff2
;

54 
	moff3
;

55 
	moff4
;

56 
	moff5
;

57 
	moff6
;

58 
	mmaxvÆ
;

59 
	mmövÆ
;

60 
	mmaxÂ
;

61 
	mmöÂ
;

62 
	möãrvÆ
;

63 
	mmaxÀn
;

64 
	m√g
;

65 
	m¥io
;

66 *
	mcb
;

67 c⁄° *
	mhñp
;

68 c⁄° *
	mdef
;

69 
vÆue_∑ú
 
	mposvÆ
[
PARSE_MAX_VP
];

70 c⁄° *
	m∑ª¡
;

71 
	mhide
;

72 
	mhide_⁄_£t
;

73 c⁄° *
	mövî£
;

74 
fio_›ti⁄
 *
	möv_›t
;

75 (*
	mvîify
)(c⁄° 
	mfio_›ti⁄
 *, *);

76 c⁄° *
	m¥of_«me
;

77 *
	m¥of_›ts
;

78 
uöt64_t
 
	mˇãg‹y
;

79 
uöt64_t
 
	mgroup
;

80 *
	mgui_d©a
;

81 
	mis_£c⁄ds
;

82 
	mis_time
;

83 
	mno_w¨n_def
;

84 
	mpow2
;

85 
	mno_‰ì
;

88 
∑r£_›ti⁄
(*, c⁄° *, c⁄° 
fio_›ti⁄
 *,

89 c⁄° 
fio_›ti⁄
 **, *,

90 
Êi°_hód
 *);

91 
s‹t_›ti⁄s
(**, c⁄° 
fio_›ti⁄
 *, );

92 
∑r£_cmd_›ti⁄
(c⁄° *
t
, c⁄° *
l
,

93 c⁄° 
fio_›ti⁄
 *, *,

94 
Êi°_hód
 *);

95 
show_cmd_hñp
(c⁄° 
fio_›ti⁄
 *, const *);

96 
fûl_deÁu…_›ti⁄s
(*, c⁄° 
fio_›ti⁄
 *);

97 
›ti⁄s_öô
(
fio_›ti⁄
 *);

98 
›ti⁄s_mem_du≥
(c⁄° 
fio_›ti⁄
 *, *);

99 
›ti⁄s_‰ì
(c⁄° 
fio_›ti⁄
 *, *);

101 
°rù_bœnk_‰⁄t
(**);

102 
°rù_bœnk_íd
(*);

103 
°r_to_decimÆ
(const *, *, , *, , );

104 
check_°r_byãs
(c⁄° *
p
, *
vÆ
, *
d©a
);

105 
check_°r_time
(c⁄° *
p
, *
vÆ
, );

106 
°r_to_Êﬂt
(c⁄° *
°r
, *
vÆ
, 
is_time
);

108 
°rög_di°™˚
(c⁄° *
s1
, c⁄° *
s2
);

109 
°rög_di°™˚_ok
(c⁄° *
s1
, 
di°
);

114 (
	tfio_›t_°r_‚
)(*, const *);

115 (
	tfio_›t_°r_vÆ_‚
)(*, *);

116 (
	tfio_›t_öt_‚
)(*, *);

118 
thªad_›ti⁄s
;

119 
ölöe
 *
	$td_v¨
(*
to
, c⁄° 
fio_›ti⁄
 *
o
,

120 
off£t
)

122 *
ªt
;

124 i‡(
o
->
¥of_›ts
)

125 
ªt
 = 
o
->
¥of_›ts
;

127 
ªt
 = 
to
;

129  (*Ë((
uöçå_t
Ë
ªt
 + 
off£t
);

130 
	}
}

132 
ölöe
 
	$∑r£_is_≥r˚¡
(
vÆ
)

134  
vÆ
 >= -101ULL;

135 
	}
}

137 
	#ZONE_BASE_VAL
 ((-1ULL >> 1Ë+ 1)

	)

138 
ölöe
 
	$∑r£_is_≥r˚¡_unˇµed
(
vÆ
)

140  
ZONE_BASE_VAL
 + -1U < 
vÆ
;

141 
	}
}

143 
ölöe
 
	$∑r£_is_z⁄e
(
vÆ
)

145  (
vÆ
 - 
ZONE_BASE_VAL
) <= -1U;

146 
	}
}

148 
	s¥öt_›ti⁄
 {

149 
Êi°_hód
 
	mli°
;

150 *
	m«me
;

151 *
	mvÆue
;

	@printing.c

1 
	~<gtk/gtk.h
>

2 
	~<ˇúo.h
>

4 
	~"gfio.h
"

5 
	~"ˇúo_ãxt_hñ≥rs.h
"

6 
	~"¥ötög.h
"

9 
	s¥ötög_∑ømëîs
 {

10 
gdoubÀ
 
	mwidth
, 
	mheight
, 
	mxdpi
, 
	mydpi
;

11 
GtkPrötSëtögs
 *
	m£âögs
;

12 
GtkPageSëup
 *
	m∑ge_£tup
;

13 } 
	g¥öt_∑øms
 = { 0 };

15 
	$begö_¥öt
(
GtkPrötO≥øti⁄
 *
›î©i⁄
,

16 
GtkPrötC⁄ãxt
 *
c⁄ãxt
, 
gpoöãr
 
d©a
)

18 
¥öt_∑øms
.
∑ge_£tup
 = 
	`gtk_¥öt_c⁄ãxt_gë_∑ge_£tup
(
c⁄ãxt
);

20 
¥öt_∑øms
.
width
 = 
	`gtk_¥öt_c⁄ãxt_gë_width
(
c⁄ãxt
);

21 
¥öt_∑øms
.
height
 = 
	`gtk_¥öt_c⁄ãxt_gë_height
(
c⁄ãxt
);

22 
¥öt_∑øms
.
xdpi
 = 
	`gtk_¥öt_c⁄ãxt_gë_dpi_x
(
c⁄ãxt
);

23 
¥öt_∑øms
.
ydpi
 = 
	`gtk_¥öt_c⁄ãxt_gë_dpi_y
(
c⁄ãxt
);

26 
	`gtk_¥öt_›î©i⁄_£t_n_∑ges
(
›î©i⁄
, 1);

27 
	}
}

29 
	$ªsu…s_døw_∑ge
(
GtkPrötO≥øti⁄
 *
›î©i⁄
,

30 
GtkPrötC⁄ãxt
 *
c⁄ãxt
, 
göt
 
∑ge_ƒ
,

31 
gpoöãr
 
d©a
)

33 
ˇúo_t
 *
¸
;

34 
°r
[32];

35 
x
, 
y
;

37 
¸
 = 
	`gtk_¥öt_c⁄ãxt_gë_ˇúo_c⁄ãxt
(
c⁄ãxt
);

39 
	`ˇúo_£t_sour˚_rgb
(
¸
, 0, 0, 0);

40 
	`ˇúo_£t_löe_width
(
¸
, 5.0);

41 
	`ˇúo_move_to
(
¸
, 0.0, 0.0);

42 
	`ˇúo_löe_to
(
¸
, 
¥öt_∑øms
.
width
,Öröt_∑øms.
height
);

43 
	`ˇúo_move_to
(
¸
, 0.0, 
¥öt_∑øms
.
height
);

44 
	`ˇúo_löe_to
(
¸
, 
¥öt_∑øms
.
width
, 0.0);

45 
	`ˇúo_°roke
(
¸
);

47 
x
 = 
¥öt_∑øms
.
width
 / 4.0;

48 
y
 = 
¥öt_∑øms
.
height
 / 5.0;

49 
	`•rötf
(
°r
, "(%g,%g)", 
x
, 
y
);

50 
	`døw_right_ju°ifõd_ãxt
(
¸
, "S™s", 
x
, 
y
, 12.0, 
°r
);

51 
	`ˇúo_£t_sour˚_rgb
(
¸
, 0, 0, 0);

52 
	`ˇúo_£t_löe_width
(
¸
, 2.0);

53 
	`ˇúo_move_to
(
¸
, 
x
, 
y
 - 30.0);

54 
	`ˇúo_löe_to
(
¸
, 
x
, 
y
 + 30.0);

55 
	`ˇúo_move_to
(
¸
, 
x
 - 30, 
y
);

56 
	`ˇúo_löe_to
(
¸
, 
x
 + 30, 
y
);

58 
y
 *= 4.0;

59 
x
 *= 2.0;

60 
	`•rötf
(
°r
, "(%g,%g)", 
x
, 
y
);

61 
	`døw_right_ju°ifõd_ãxt
(
¸
, "S™s", 
x
, 
y
, 12.0, 
°r
);

62 
	`ˇúo_£t_sour˚_rgb
(
¸
, 0, 0, 0);

63 
	`ˇúo_£t_löe_width
(
¸
, 2.0);

64 
	`ˇúo_move_to
(
¸
, 
x
, 
y
 - 30.0);

65 
	`ˇúo_löe_to
(
¸
, 
x
, 
y
 + 30.0);

66 
	`ˇúo_move_to
(
¸
, 
x
 - 30, 
y
);

67 
	`ˇúo_löe_to
(
¸
, 
x
 + 30, 
y
);

68 
	`ˇúo_°roke
(
¸
);

69 
	}
}

71 
	$¥ötög_îr‹_dülog
(
GtkWidgë
 *
wödow
, 
GEº‹
 *
¥öt_îr‹
)

73 
GtkWidgë
 *
îr‹_dülog
;

75 
	`¥ötf
("printing_error_dialog called\n");

76 
	`¥ötf
("îr‹ mesßgê%s\n", 
¥öt_îr‹
->
mesßge
);

77 
îr‹_dülog
 = 
	`gtk_mesßge_dülog_√w
(
	`GTK_WINDOW
(
wödow
),

78 
GTK_DIALOG_DESTROY_WITH_PARENT
, 
GTK_MESSAGE_ERROR
,

79 
GTK_BUTTONS_CLOSE
, "PrintÉrror:\n%s",

80 
¥öt_îr‹
->
mesßge
);

81 
	`g_sig«l_c⁄√˘
(
îr‹_dülog
, "response",

82 
	`G_CALLBACK
(
gtk_widgë_de°roy
), 
NULL
);

83 
	`gtk_widgë_show
(
îr‹_dülog
);

84 
	}
}

86 
	$ªsu…s_¥öt_d⁄e
(
GtkPrötO≥øti⁄
 *
›î©i⁄
,

87 
GtkPrötO≥øti⁄Resu…
 
ªsu…
, 
gpoöãr
 
d©a
)

89 
GEº‹
 *
¥öt_îr‹
;

90 
gui_íåy
 *
ge
 = 
d©a
;

92 i‡(
ªsu…
 !
GTK_PRINT_OPERATION_RESULT_ERROR
)

95 
	`gtk_¥öt_›î©i⁄_gë_îr‹
(
›î©i⁄
, &
¥öt_îr‹
);

96 
	`¥ötög_îr‹_dülog
(
ge
->
ªsu…s_wödow
, 
¥öt_îr‹
);

97 
	`g_îr‹_‰ì
(
¥öt_îr‹
);

98 
	}
}

100 
	$gfio_¥öt_ªsu…s
(
gui_íåy
 *
ge
)

102 
GtkPrötO≥øti⁄
 *
¥öt
;

103 
GtkPrötO≥øti⁄Resu…
 
ªs
;

104 
GEº‹
 *
¥öt_îr‹
;

106 
¥öt
 = 
	`gtk_¥öt_›î©i⁄_√w
();

107 i‡(
¥öt_∑øms
.
£âögs
 !
NULL
)

108 
	`gtk_¥öt_›î©i⁄_£t_¥öt_£âögs
(
¥öt
, 
¥öt_∑øms
.
£âögs
);

110 i‡(
¥öt_∑øms
.
∑ge_£tup
 !
NULL
)

111 
	`gtk_¥öt_›î©i⁄_£t_deÁu…_∑ge_£tup
(
¥öt
, 
¥öt_∑øms
.
∑ge_£tup
);

113 
	`g_sig«l_c⁄√˘
(
¥öt
, "begö_¥öt", 
	`G_CALLBACK
(
begö_¥öt
), 
NULL
);

114 
	`g_sig«l_c⁄√˘
(
¥öt
, "døw_∑ge", 
	`G_CALLBACK
(
ªsu…s_døw_∑ge
), 
NULL
);

115 
	`g_sig«l_c⁄√˘
(
¥öt
, "d⁄e", 
	`G_CALLBACK
(
ªsu…s_¥öt_d⁄e
), 
NULL
);

116 
	`gtk_¥öt_›î©i⁄_£t_Ælow_async
(
¥öt
, 
TRUE
);

117 
ªs
 = 
	`gtk_¥öt_›î©i⁄_run
(
¥öt
, 
GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG
,

118 
	`GTK_WINDOW
(
ge
->
ªsu…s_wödow
), &
¥öt_îr‹
);

128 i‡(
ªs
 =
GTK_PRINT_OPERATION_RESULT_ERROR
) {

129 
	`¥ötög_îr‹_dülog
(
ge
->
ªsu…s_wödow
, 
¥öt_îr‹
);

130 
	`g_îr‹_‰ì
(
¥öt_îr‹
);

132 i‡(
ªs
 =
GTK_PRINT_OPERATION_RESULT_APPLY
) {

133 i‡(
¥öt_∑øms
.
£âögs
 !
NULL
)

134 
	`g_obje˘_uƒef
(
¥öt_∑øms
.
£âögs
);

135 
¥öt_∑øms
.
£âögs
 = 
	`g_obje˘_ªf
(
	`gtk_¥öt_›î©i⁄_gë_¥öt_£âögs
(
¥öt
));

138 
	`g_obje˘_uƒef
(
¥öt
);

139 
	}
}

	@printing.h

1 #i‚de‡
PRINTING_H


2 
	#PRINTING_H


	)

4 
gfio_¥öt_ªsu…s
(
gui_íåy
 *
ge
);

	@profile.c

1 
	~"fio.h
"

2 
	~"¥ofûe.h
"

3 
	~"debug.h
"

4 
	~"Êi°.h
"

5 
	~"›ti⁄s.h
"

7 
FLIST_HEAD
(
¥ofûe_li°
);

9 
¥ofûe_›s
 *
	$föd_¥ofûe
(c⁄° *
¥ofûe
)

11 
¥ofûe_›s
 *
›s
 = 
NULL
;

12 
Êi°_hód
 *
n
;

14 
	`Êi°_f‹_óch
(
n
, &
¥ofûe_li°
) {

15 
›s
 = 
	`Êi°_íåy
(
n
, 
¥ofûe_›s
, 
li°
);

16 i‡(!
	`°rcmp
(
¥ofûe
, 
›s
->
«me
))

19 
›s
 = 
NULL
;

22  
›s
;

23 
	}
}

25 
	$lﬂd_¥ofûe
(c⁄° *
¥ofûe
)

27 
¥ofûe_›s
 *
›s
;

29 
	`d¥öt
(
FD_PROFILE
, "lﬂdögÖrofûê'%s'\n", 
¥ofûe
);

31 
›s
 = 
	`föd_¥ofûe
(
¥ofûe
);

32 i‡(
›s
) {

33 i‡(
›s
->
	`¥ï_cmd
()) {

34 
	`log_îr
("fio:Örofûê%†¥ï faûed\n", 
¥ofûe
);

37 
	`add_job_›ts
(
›s
->
cmdlöe
, 
FIO_CLIENT_TYPE_CLI
);

41 
	`log_îr
("fio:Örofûê'%s'ÇŸ found\n", 
¥ofûe
);

43 
	}
}

45 
	$add_¥ofûe_›ti⁄s
(
¥ofûe_›s
 *
›s
)

47 
fio_›ti⁄
 *
o
;

49 i‡(!
›s
->
›ti⁄s
)

52 
o
 = 
›s
->
›ti⁄s
;

53 
o
->
«me
) {

54 
o
->
¥of_«me
 = 
›s
->
«me
;

55 
o
->
¥of_›ts
 = 
›s
->
›t_d©a
;

56 i‡(
	`add_›ti⁄
(
o
))

58 
o
++;

62 
	}
}

64 
	$ªgi°î_¥ofûe
(
¥ofûe_›s
 *
›s
)

66 
ªt
;

68 
	`d¥öt
(
FD_PROFILE
, "ªgi°îÖrofûê'%s'\n", 
›s
->
«me
);

70 
ªt
 = 
	`add_¥ofûe_›ti⁄s
(
›s
);

71 i‡(!
ªt
) {

72 
	`Êi°_add_èû
(&
›s
->
li°
, &
¥ofûe_li°
);

73 
	`add_›t_posvÆ
("¥ofûe", 
›s
->
«me
, ops->
desc
);

77 
	`övÆid©e_¥ofûe_›ti⁄s
(
›s
->
«me
);

78  
ªt
;

79 
	}
}

81 
	$uƒegi°î_¥ofûe
(
¥ofûe_›s
 *
›s
)

83 
	`d¥öt
(
FD_PROFILE
, "uƒegi°îÖrofûê'%s'\n", 
›s
->
«me
);

84 
	`Êi°_dñ
(&
›s
->
li°
);

85 
	`övÆid©e_¥ofûe_›ti⁄s
(
›s
->
«me
);

86 
	`dñ_›t_posvÆ
("¥ofûe", 
›s
->
«me
);

87 
	}
}

89 
	$¥ofûe_add_hooks
(
thªad_d©a
 *
td
)

91 
¥ofûe_›s
 *
›s
;

93 i‡(!
exec_¥ofûe
)

96 
›s
 = 
	`föd_¥ofûe
(
exec_¥ofûe
);

97 i‡(!
›s
)

100 i‡(
›s
->
io_›s
) {

101 
td
->
¥of_io_›s
 = *
›s
->
io_›s
;

102 
td
->
Êags
 |
TD_F_PROFILE_OPS
;

104 
	}
}

106 
	$¥ofûe_td_öô
(
thªad_d©a
 *
td
)

108 
¥of_io_›s
 *
›s
 = &
td
->prof_io_ops;

110 i‡(
›s
->
td_öô
)

111  
›s
->
	`td_öô
(
td
);

114 
	}
}

116 
	$¥ofûe_td_exô
(
thªad_d©a
 *
td
)

118 
¥of_io_›s
 *
›s
 = &
td
->prof_io_ops;

120 i‡(
›s
->
td_exô
)

121 
›s
->
	`td_exô
(
td
);

122 
	}
}

	@profile.h

1 #i‚de‡
FIO_PROFILE_H


2 
	#FIO_PROFILE_H


	)

4 
	~"Êi°.h
"

9 
	s¥of_io_›s
 {

10 (*
	mtd_öô
)(
	mthªad_d©a
 *);

11 (*
	mtd_exô
)(
	mthªad_d©a
 *);

13 (*
	mio_u_œt
)(
	mthªad_d©a
 *, 
	muöt64_t
);

16 
	s¥ofûe_›s
 {

17 
Êi°_hód
 
	mli°
;

18 
	m«me
[32];

19 
	mdesc
[64];

20 
	mÊags
;

25 
fio_›ti⁄
 *
	m›ti⁄s
;

26 *
	m›t_d©a
;

31 (*
	m¥ï_cmd
)();

36 c⁄° **
	mcmdlöe
;

38 
¥of_io_›s
 *
	mio_›s
;

41 
ªgi°î_¥ofûe
(
¥ofûe_›s
 *);

42 
uƒegi°î_¥ofûe
(
¥ofûe_›s
 *);

43 
lﬂd_¥ofûe
(const *);

44 
¥ofûe_›s
 *
föd_¥ofûe
(const *);

45 
¥ofûe_add_hooks
(
thªad_d©a
 *);

47 
¥ofûe_td_öô
(
thªad_d©a
 *);

48 
¥ofûe_td_exô
(
thªad_d©a
 *);

	@profiles/act.c

1 
	~"../fio.h
"

2 
	~"../¥ofûe.h
"

3 
	~"../∑r£.h
"

4 
	~"../›tgroup.h
"

9 
	#R_LOAD
 2000

	)

10 
	#W_LOAD
 1000

	)

12 
	#SAMPLE_SEC
 3600

	)

14 
	sa˘_∑ss_¸ôîü
 {

15 
	mmax_u£c
;

16 
	mmax_≥rm
;

18 
	#ACT_MAX_CRIT
 3

	)

20 
a˘_∑ss_¸ôîü
 
	ga˘_∑ss
[
ACT_MAX_CRIT
] = {

22 .
max_u£c
 = 1000,

23 .
	gmax_≥rm
 = 50,

26 .
	gmax_u£c
 = 8000,

27 .
	gmax_≥rm
 = 10,

30 .
	gmax_u£c
 = 64000,

31 .
	gmax_≥rm
 = 1,

35 
	sa˘_¶i˚
 {

36 
uöt64_t
 
	mœt_buckës
[
ACT_MAX_CRIT
];

37 
uöt64_t
 
	mtŸÆ_ios
;

40 
	sa˘_run_d©a
 {

41 
fio_£m
 *
	m£m
;

42 
	m≥ndög
;

44 
a˘_¶i˚
 *
	m¶i˚s
;

45 
	mƒ_¶i˚s
;

47 
a˘_run_d©a
 *
	ga˘_run_d©a
;

49 
	sa˘_¥of_d©a
 {

50 
time•ec
 
	mßm∂e_tv
;

51 
a˘_¶i˚
 *
	m¶i˚s
;

52 
	mcur_¶i˚
;

53 
	mƒ_¶i˚s
;

56 
	#ACT_MAX_OPTS
 128

	)

57 c⁄° *
	ga˘_›ts
[
ACT_MAX_OPTS
] = {

63 
NULL
,

65 
	g›t_idx
 = 5;

66 
	g‹g_idx
;

68 
	$a˘_add_›t
(c⁄° *
f‹m©
, ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 2)));

70 
	sa˘_›ti⁄s
 {

71 
∑d
;

72 *
devi˚_«mes
;

73 
lﬂd
;

74 
¥ï
;

75 
thªads_≥r_queue
;

76 
num_ªad_blocks
;

77 
wrôe_size
;

78 
ã°_duøti⁄
;

81 
a˘_›ti⁄s
áct_options;

83 
fio_›ti⁄
 
›ti⁄s
[] = {

85 .
«me
 = "device-names",

86 .
 ame
 = "device-names",

87 .
ty≥
 = 
FIO_OPT_STR_STORE
,

88 .
off1
 = 
	`off£tof
(
a˘_›ti⁄s
, 
devi˚_«mes
),

89 .
hñp
 = "DevicesÅo use",

90 .
ˇãg‹y
 = 
FIO_OPT_C_PROFILE
,

91 .
group
 = 
FIO_OPT_G_ACT
,

92 .
no_‰ì
 = 
åue
,

95 .
«me
 = "load",

96 .
 ame
 = "Load multiplier",

97 .
ty≥
 = 
FIO_OPT_INT
,

98 .
off1
 = 
	`off£tof
(
a˘_›ti⁄s
, 
lﬂd
),

99 .
hñp
 = "ACTÜoad multipler (default 1x)",

100 .
def
 = "1",

101 .
ˇãg‹y
 = 
FIO_OPT_C_PROFILE
,

102 .
group
 = 
FIO_OPT_G_ACT
,

105 .
«me
 = "test-duration",

106 .
 ame
 = "Test duration",

107 .
ty≥
 = 
FIO_OPT_STR_VAL_TIME
,

108 .
off1
 = 
	`off£tof
(
a˘_›ti⁄s
, 
ã°_duøti⁄
),

109 .
hñp
 = "HowÜongÅheÉntireÅestÅakesÅoÑun",

110 .
def
 = "24h",

111 .
ˇãg‹y
 = 
FIO_OPT_C_PROFILE
,

112 .
group
 = 
FIO_OPT_G_ACT
,

115 .
«me
 = "threads-per-queue",

116 .
 ame
 = "Number ofÑead IOÅhreadsÖer device",

117 .
ty≥
 = 
FIO_OPT_INT
,

118 .
off1
 = 
	`off£tof
(
a˘_›ti⁄s
, 
thªads_≥r_queue
),

119 .
hñp
 = "Number ofÑead IOÅhreadsÖer device",

120 .
def
 = "8",

121 .
ˇãg‹y
 = 
FIO_OPT_C_PROFILE
,

122 .
group
 = 
FIO_OPT_G_ACT
,

125 .
«me
 = "read-req-num-512-blocks",

126 .
 ame
 = "Number of 512B blocksÅoÑead",

127 .
ty≥
 = 
FIO_OPT_INT
,

128 .
off1
 = 
	`off£tof
(
a˘_›ti⁄s
, 
num_ªad_blocks
),

129 .
hñp
 = "Number of 512B blocksÅoÑeadátÅheÅime",

130 .
def
 = "3",

131 .
ˇãg‹y
 = 
FIO_OPT_C_PROFILE
,

132 .
group
 = 
FIO_OPT_G_ACT
,

135 .
«me
 = "large-block-op-kbytes",

136 .
 ame
 = "Size ofÜarge block ops in KiB (writes)",

137 .
ty≥
 = 
FIO_OPT_INT
,

138 .
off1
 = 
	`off£tof
(
a˘_›ti⁄s
, 
wrôe_size
),

139 .
hñp
 = "Size ofÜarge block ops in KiB (writes)",

140 .
def
 = "131072",

141 .
ˇãg‹y
 = 
FIO_OPT_C_PROFILE
,

142 .
group
 = 
FIO_OPT_G_ACT
,

145 .
«me
 = "prep",

146 .
 ame
 = "Run ACTÖrepÖhase",

147 .
ty≥
 = 
FIO_OPT_STR_SET
,

148 .
off1
 = 
	`off£tof
(
a˘_›ti⁄s
, 
¥ï
),

149 .
hñp
 = "SetÅoÑun ACTÖrepÖhase",

150 .
ˇãg‹y
 = 
FIO_OPT_C_PROFILE
,

151 .
group
 = 
FIO_OPT_G_ACT
,

154 .
«me
 = 
NULL
,

156 
	}
};

158 
	$a˘_add_›t
(c⁄° *
°r
, ...)

160 
buf„r
[512];

161 
va_li°
 
¨gs
;

162 
size_t
 
Àn
;

164 i‡(
›t_idx
 =
ACT_MAX_OPTS
) {

165 
	`log_îr
("act: ACT_MAX_OPTS isÅoo small\n");

169 
	`va_°¨t
(
¨gs
, 
°r
);

170 
Àn
 = 
	`v¢¥ötf
(
buf„r
, (buf„r), 
°r
, 
¨gs
);

171 
	`va_íd
(
¨gs
);

173 i‡(
Àn
)

174 
a˘_›ts
[
›t_idx
++] = 
	`°rdup
(
buf„r
);

177 
	}
}

179 
	$a˘_add_rw
(c⁄° *
dev
, 
ªads
)

181 
a˘_›ti⁄s
 *
ao
 = &act_options;

183 i‡(
	`a˘_add_›t
("«me˜˘-%s-%s", 
ªads
 ? "ªad" : "wrôe", 
dev
))

185 i‡(
	`a˘_add_›t
("fûíame=%s", 
dev
))

187 i‡(
	`a˘_add_›t
("rw=%s", 
ªads
 ? "randread" : "randwrite"))

189 i‡(
ªads
) {

190 
æﬂd
 = 
ao
->
lﬂd
 * 
R_LOAD
 /áo->
thªads_≥r_queue
;

192 i‡(
	`a˘_add_›t
("numjobs=%u", 
ao
->
thªads_≥r_queue
))

194 i‡(
	`a˘_add_›t
("øã_i›s=%u", 
æﬂd
))

196 i‡(
	`a˘_add_›t
("bs=%u", 
ao
->
num_ªad_blocks
 * 512))

199 c⁄° 
rsize
 = 
ao
->
wrôe_size
 / (ao->
num_ªad_blocks
 * 512);

200 
wlﬂd
 = (
ao
->
lﬂd
 * 
W_LOAD
 + 
rsize
 - 1) /Ñsize;

202 i‡(
	`a˘_add_›t
("øã_i›s=%u", 
wlﬂd
))

204 i‡(
	`a˘_add_›t
("bs=%u", 
ao
->
wrôe_size
))

209 
	}
}

211 
	$a˘_add_dev_¥ï
(c⁄° *
dev
)

214 i‡(
	`a˘_add_›t
("«me˜˘-¥ï-zî€s-%s", 
dev
))

216 i‡(
	`a˘_add_›t
("fûíame=%s", 
dev
))

218 i‡(
	`a˘_add_›t
("bs=1048576"))

220 i‡(
	`a˘_add_›t
("zero_buffers"))

222 i‡(
	`a˘_add_›t
("rw=write"))

226 i‡(
	`a˘_add_›t
("«me˜˘-¥ï-ß…-%s", 
dev
))

228 i‡(
	`a˘_add_›t
("stonewall"))

230 i‡(
	`a˘_add_›t
("fûíame=%s", 
dev
))

232 i‡(
	`a˘_add_›t
("bs=4096"))

234 i‡(
	`a˘_add_›t
("ioengine=libaio"))

236 i‡(
	`a˘_add_›t
("iodepth=64"))

238 i‡(
	`a˘_add_›t
("rw=randwrite"))

242 
	}
}

244 
	$a˘_add_dev
(c⁄° *
dev
)

246 i‡(
a˘_›ti⁄s
.
¥ï
)

247  
	`a˘_add_dev_¥ï
(
dev
);

249 i‡(
	`a˘_add_›t
("ru¡ime=%Œus", 
a˘_›ti⁄s
.
ã°_duøti⁄
))

251 i‡(
	`a˘_add_›t
("time_based=1"))

254 i‡(
	`a˘_add_rw
(
dev
, 1))

256 i‡(
	`a˘_add_rw
(
dev
, 0))

260 
	}
}

265 
	$a˘_¥ï_cmdlöe
()

267 i‡(!
a˘_›ti⁄s
.
devi˚_«mes
) {

268 
	`log_îr
("act: youÇeedÅo set IOÅarget(s) withÅhe "

273 
‹g_idx
 = 
›t_idx
;

276 *
dev
;

278 
dev
 = 
	`°r£p
(&
a˘_›ti⁄s
.
devi˚_«mes
, ",");

279 i‡(!
dev
)

282 i‡(
	`a˘_add_dev
(
dev
)) {

283 
	`log_îr
("act: failedádding deviceÅoÅhe mix\n");

289 
	}
}

291 
	$a˘_io_u_œt
(
thªad_d©a
 *
td
, 
uöt64_t
 
n£c
)

293 
a˘_¥of_d©a
 *
≠d
 = 
td
->
¥of_d©a
;

294 
a˘_¶i˚
 *
¶i˚
;

295 
uöt64_t
 
u£c
 = 
n£c
 / 1000ULL;

296 
i
, 
ªt
 = 0;

297 
≥rm
;

299 i‡(
a˘_›ti⁄s
.
¥ï
)

306 i‡(
≠d
->
cur_¶i˚
 >≠d->
ƒ_¶i˚s
)

309 
¶i˚
 = &
≠d
->
¶i˚s
[≠d->
cur_¶i˚
];

310 
¶i˚
->
tŸÆ_ios
++;

312 
i
 = 
ACT_MAX_CRIT
 - 1; i >= 0; i--) {

313 i‡(
u£c
 > 
a˘_∑ss
[
i
].
max_u£c
) {

314 
¶i˚
->
œt_buckës
[
i
]++;

319 i‡(
	`time_sö˚_now
(&
≠d
->
ßm∂e_tv
Ë< 
SAMPLE_SEC
)

323 
i
 = 0; i < 
ACT_MAX_CRIT
; i++) {

324 
≥rm
 = (1000.0 * 
¶i˚
->
œt_buckës
[
i
]Ë/ sli˚->
tŸÆ_ios
;

325 i‡(
≥rm
 < 
a˘_∑ss
[
i
].
max_≥rm
)

328 
	`log_îr
("a˘: %f%%Éx˚ed†∑s†¸ôîü o‡%f%%\n", 
≥rm
 / 10.0, (Ë
a˘_∑ss
[
i
].
max_≥rm
 / 10.0);

329 
ªt
 = 1;

333 
	`fio_gëtime
(&
≠d
->
ßm∂e_tv
, 
NULL
);

334 
≠d
->
cur_¶i˚
++;

335  
ªt
;

336 
	}
}

338 
	$gë_a˘_ªf
()

340 
	`fio_£m_down
(
a˘_run_d©a
->
£m
);

341 
a˘_run_d©a
->
≥ndög
++;

342 
	`fio_£m_up
(
a˘_run_d©a
->
£m
);

343 
	}
}

345 
	$show_¶i˚
(
a˘_¶i˚
 *
¶i˚
, 
¶i˚_num
)

347 
i
, 
Áûed
 = 0;

349 
	`log_öfo
(" %2u", 
¶i˚_num
);

351 
i
 = 0; i < 
ACT_MAX_CRIT
; i++) {

352 
≥rc
 = 0.0;

354 i‡(
¶i˚
->
tŸÆ_ios
)

355 
≥rc
 = 100.0 * (Ë
¶i˚
->
œt_buckës
[
i
] / (Ë¶i˚->
tŸÆ_ios
;

356 i‡((
≥rc
 * 10.0Ë>
a˘_∑ss
[
i
].
max_≥rm
)

357 
Áûed
++;

358 
	`log_öfo
("\t%2.2f", 
≥rc
);

360 
i
 = 0; i < 
ACT_MAX_CRIT
; i++) {

361 
≥rc
 = 0.0;

363 i‡(
¶i˚
->
tŸÆ_ios
)

364 
≥rc
 = 100.0 * (Ë
¶i˚
->
œt_buckës
[
i
] / (Ë¶i˚->
tŸÆ_ios
;

365 
	`log_öfo
("\t%2.2f", 
≥rc
);

367 
	`log_öfo
("\n");

369  
Áûed
;

370 
	}
}

372 
	$a˘_show_Æl_°©s
()

374 
i
, 
Áûs
 = 0;

376 
	`log_öfo
("Årans device\n");

377 
	`log_öfo
(" %%>(ms) %%>(ms)\n");

378 
	`log_öfo
(" slice");

380 
i
 = 0; i < 
ACT_MAX_CRIT
; i++)

381 
	`log_öfo
("\à%2u", 
a˘_∑ss
[
i
].
max_u£c
 / 1000);

382 
i
 = 0; i < 
ACT_MAX_CRIT
; i++)

383 
	`log_öfo
("\à%2u", 
a˘_∑ss
[
i
].
max_u£c
 / 1000);

385 
	`log_öfo
("\n");

386 
	`log_öfo
(" ----- ----- ----- ------ ----- ----- ------\n");

388 
i
 = 0; i < 
a˘_run_d©a
->
ƒ_¶i˚s
; i++)

389 
Áûs
 +
	`show_¶i˚
(&
a˘_run_d©a
->
¶i˚s
[
i
], i + 1);

391 
	`log_öfo
("\«˘:Åe° com∂ëe, devi˚(s): %s\n", 
Áûs
 ? "FAILED" : "PASSED");

392 
	}
}

394 
	$put_a˘_ªf
(
thªad_d©a
 *
td
)

396 
a˘_¥of_d©a
 *
≠d
 = 
td
->
¥of_d©a
;

397 
i
, 
¶i˚
;

399 
	`fio_£m_down
(
a˘_run_d©a
->
£m
);

401 i‡(!
a˘_run_d©a
->
¶i˚s
) {

402 
a˘_run_d©a
->
¶i˚s
 = 
	`ˇŒoc
(
≠d
->
ƒ_¶i˚s
, (
a˘_¶i˚
));

403 
a˘_run_d©a
->
ƒ_¶i˚s
 = 
≠d
->nr_slices;

406 
¶i˚
 = 0; sli˚ < 
≠d
->
ƒ_¶i˚s
; slice++) {

407 
a˘_¶i˚
 *
d°
 = &
a˘_run_d©a
->
¶i˚s
[
¶i˚
];

408 
a˘_¶i˚
 *
§c
 = &
≠d
->
¶i˚s
[
¶i˚
];

410 
d°
->
tŸÆ_ios
 +
§c
->total_ios;

412 
i
 = 0; i < 
ACT_MAX_CRIT
; i++)

413 
d°
->
œt_buckës
[
i
] +
§c
->lat_buckets[i];

416 i‡(!--
a˘_run_d©a
->
≥ndög
)

417 
	`a˘_show_Æl_°©s
();

419 
	`fio_£m_up
(
a˘_run_d©a
->
£m
);

420 
	}
}

422 
	$a˘_td_öô
(
thªad_d©a
 *
td
)

424 
a˘_¥of_d©a
 *
≠d
;

425 
ƒ_¶i˚s
;

427 
	`gë_a˘_ªf
();

429 
≠d
 = 
	`ˇŒoc
(1, (*apd));

430 
ƒ_¶i˚s
 = (
a˘_›ti⁄s
.
ã°_duøti⁄
 + 
SAMPLE_SEC
 - 1) / SAMPLE_SEC;

431 
≠d
->
¶i˚s
 = 
	`ˇŒoc
(
ƒ_¶i˚s
, (
a˘_¶i˚
));

432 
≠d
->
ƒ_¶i˚s
 =Çr_slices;

433 
	`fio_gëtime
(&
≠d
->
ßm∂e_tv
, 
NULL
);

434 
td
->
¥of_d©a
 = 
≠d
;

436 
	}
}

438 
	$a˘_td_exô
(
thªad_d©a
 *
td
)

440 
a˘_¥of_d©a
 *
≠d
 = 
td
->
¥of_d©a
;

442 
	`put_a˘_ªf
(
td
);

443 
	`‰ì
(
≠d
->
¶i˚s
);

444 
	`‰ì
(
≠d
);

445 
td
->
¥of_d©a
 = 
NULL
;

446 
	}
}

448 
¥of_io_›s
 
	ga˘_io_›s
 = {

449 .
td_öô
 = 
a˘_td_öô
,

450 .
	gtd_exô
 = 
a˘_td_exô
,

451 .
	gio_u_œt
 = 
a˘_io_u_œt
,

454 
¥ofûe_›s
 
	ga˘_¥ofûe
 = {

455 .
«me
 = "act",

456 .
	gdesc
 = "ACT AerospikeÜike benchmark",

457 .
	g›ti⁄s
 = 
›ti⁄s
,

458 .
	g›t_d©a
 = &
a˘_›ti⁄s
,

459 .
	g¥ï_cmd
 = 
a˘_¥ï_cmdlöe
,

460 .
	gcmdlöe
 = 
a˘_›ts
,

461 .
	gio_›s
 = &
a˘_io_›s
,

464 
fio_öô
 
	$a˘_ªgi°î
()

466 
a˘_run_d©a
 = 
	`ˇŒoc
(1, (*act_run_data));

467 
a˘_run_d©a
->
£m
 = 
	`fio_£m_öô
(
FIO_SEM_UNLOCKED
);

469 i‡(
	`ªgi°î_¥ofûe
(&
a˘_¥ofûe
))

470 
	`log_îr
("fio: failedÅoÑegisterÖrofile 'act'\n");

471 
	}
}

473 
fio_exô
 
	$a˘_uƒegi°î
()

475 
‹g_idx
 && org_idx < 
›t_idx
)

476 
	`‰ì
((*Ë
a˘_›ts
[++
‹g_idx
]);

478 
	`uƒegi°î_¥ofûe
(&
a˘_¥ofûe
);

479 
	`fio_£m_ªmove
(
a˘_run_d©a
->
£m
);

480 
	`‰ì
(
a˘_run_d©a
->
¶i˚s
);

481 
	`‰ì
(
a˘_run_d©a
);

482 
a˘_run_d©a
 = 
NULL
;

483 
	}
}

	@profiles/tiobench.c

1 
	~"../fio.h
"

2 
	~"../¥ofûe.h
"

3 
	~"../∑r£.h
"

4 
	~"../›tgroup.h
"

6 
	gsize
;

7 
	glo›s
 = 1;

8 
	gbs
 = 4096;

9 
	g¡hªads
 = 1;

10 *
	gdú
;

12 
	gsz_idx
[80], 
	gbs_idx
[80], 
	glo›_idx
[80], 
	gdú_idx
[80], 
	gt_idx
[80];

14 c⁄° *
	gtb_›ts
[] = {

15 "buf„ªd=0", 
sz_idx
, 
bs_idx
, 
lo›_idx
, 
dú_idx
, 
t_idx
,

22 "«meÙ™dªad", "°⁄ewÆl", "rwÙ™dªad", 
NULL
,

25 
	stiobích_›ti⁄s
 {

26 
	m∑d
;

27 
	msize
;

28 
	mlo›s
;

29 
	mbs
;

30 
	m¡hªads
;

31 *
	mdú
;

34 
tiobích_›ti⁄s
 
	gtiobích_›ti⁄s
;

36 
fio_›ti⁄
 
	g›ti⁄s
[] = {

38 .
«me
 = "size",

39 .
	g ame
 = "Tiobench size",

40 .
	gty≥
 = 
FIO_OPT_STR_VAL
,

41 .
	goff1
 = 
off£tof
(
tiobích_›ti⁄s
, 
size
),

42 .
	ghñp
 = "Size in MiB",

43 .
	gˇãg‹y
 = 
FIO_OPT_C_PROFILE
,

44 .
	ggroup
 = 
FIO_OPT_G_TIOBENCH
,

47 .
	g«me
 = "block",

48 .
	g ame
 = "Tiobench block",

49 .
	gty≥
 = 
FIO_OPT_INT
,

50 .
	goff1
 = 
off£tof
(
tiobích_›ti⁄s
, 
bs
),

51 .
	ghñp
 = "Block size in bytes",

52 .
	gdef
 = "4096",

53 .
	gˇãg‹y
 = 
FIO_OPT_C_PROFILE
,

54 .
	ggroup
 = 
FIO_OPT_G_TIOBENCH
,

57 .
	g«me
 = "numruns",

58 .
	g ame
 = "TiobenchÇumruns",

59 .
	gty≥
 = 
FIO_OPT_INT
,

60 .
	goff1
 = 
off£tof
(
tiobích_›ti⁄s
, 
lo›s
),

61 .
	ghñp
 = "Number ofÑuns",

62 .
	gˇãg‹y
 = 
FIO_OPT_C_PROFILE
,

63 .
	ggroup
 = 
FIO_OPT_G_TIOBENCH
,

66 .
	g«me
 = "dir",

67 .
	g ame
 = "Tiobench directory",

68 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

69 .
	goff1
 = 
off£tof
(
tiobích_›ti⁄s
, 
dú
),

70 .
	ghñp
 = "Test directory",

71 .
	gˇãg‹y
 = 
FIO_OPT_C_PROFILE
,

72 .
	ggroup
 = 
FIO_OPT_G_TIOBENCH
,

73 .
	gno_‰ì
 = 
åue
,

76 .
	g«me
 = "threads",

77 .
	g ame
 = "TiobenchÅhreads",

78 .
	gty≥
 = 
FIO_OPT_INT
,

79 .
	goff1
 = 
off£tof
(
tiobích_›ti⁄s
, 
¡hªads
),

80 .
	ghñp
 = "Number of Threads",

81 .
	gˇãg‹y
 = 
FIO_OPT_C_PROFILE
,

82 .
	ggroup
 = 
FIO_OPT_G_TIOBENCH
,

85 .
	g«me
 = 
NULL
,

92 
	$tb_¥ï_cmdlöe
()

97 
size
 *= 1024 * 1024ULL;

98 i‡(
size
)

99 
	`•rötf
(
sz_idx
, "size=%Œu", 
size
);

101 
	`°r˝y
(
sz_idx
, "size=4*1024*$mb_memory");

103 
	`•rötf
(
bs_idx
, "bs=%u", 
bs
);

104 
	`•rötf
(
lo›_idx
, "lo›s=%u", 
lo›s
);

106 i‡(
dú
)

107 
	`•rötf
(
dú_idx
, "dúe˘‹y=%s", 
dú
);

109 
	`•rötf
(
dú_idx
, "directory=./");

111 
	`•rötf
(
t_idx
, "numjobs=%u", 
¡hªads
);

113 
	}
}

115 
¥ofûe_›s
 
	gtiobích_¥ofûe
 = {

116 .
«me
 = "tiobench",

117 .
	gdesc
 = "tiotest/tiobench benchmark",

118 .
	g¥ï_cmd
 = 
tb_¥ï_cmdlöe
,

119 .
	gcmdlöe
 = 
tb_›ts
,

120 .
	g›ti⁄s
 = 
›ti⁄s
,

121 .
	g›t_d©a
 = &
tiobích_›ti⁄s
,

124 
fio_öô
 
	$tiobích_ªgi°î
()

126 i‡(
	`ªgi°î_¥ofûe
(&
tiobích_¥ofûe
))

127 
	`log_îr
("fio: failedÅoÑegisterÖrofile 'tiobench'\n");

128 
	}
}

130 
fio_exô
 
	$tiobích_uƒegi°î
()

132 
	`uƒegi°î_¥ofûe
(&
tiobích_¥ofûe
);

133 
	}
}

	@pshared.c

1 
	~<°rög.h
>

3 
	~"log.h
"

4 
	~"psh¨ed.h
"

6 
	$c⁄d_öô_psh¨ed
(
±hªad_c⁄d_t
 *
c⁄d
)

8 
±hªad_c⁄d©å_t
 
ˇâr
;

9 
ªt
;

11 
ªt
 = 
	`±hªad_c⁄d©å_öô
(&
ˇâr
);

12 i‡(
ªt
) {

13 
	`log_îr
("±hªad_c⁄d©å_öô: %s\n", 
	`°ªº‹
(
ªt
));

14  
ªt
;

17 #ifde‡
CONFIG_PSHARED


18 
ªt
 = 
	`±hªad_c⁄d©å_£çsh¨ed
(&
ˇâr
, 
PTHREAD_PROCESS_SHARED
);

19 i‡(
ªt
) {

20 
	`log_îr
("±hªad_c⁄d©å_£çsh¨ed: %s\n", 
	`°ªº‹
(
ªt
));

21  
ªt
;

25 #ifde‡
CONFIG_PTHREAD_CONDATTR_SETCLOCK


26 
ªt
 = 
	`±hªad_c⁄d©å_£t˛ock
(&
ˇâr
, 
CLOCK_MONOTONIC
);

27 i‡(
ªt
) {

28 
	`log_îr
("±hªad_c⁄d©å_£t˛ock: %s\n", 
	`°ªº‹
(
ªt
));

29  
ªt
;

33 
ªt
 = 
	`±hªad_c⁄d_öô
(
c⁄d
, &
ˇâr
);

34 i‡(
ªt
) {

35 
	`log_îr
("±hªad_c⁄d_öô: %s\n", 
	`°ªº‹
(
ªt
));

36  
ªt
;

40 
	}
}

46 
	$muãx_öô_psh¨ed_wôh_ty≥
(
±hªad_muãx_t
 *
muãx
, 
ty≥
)

48 
±hªad_muãx©å_t
 
m©å
;

49 
ªt
;

51 
ªt
 = 
	`±hªad_muãx©å_öô
(&
m©å
);

52 i‡(
ªt
) {

53 
	`log_îr
("±hªad_muãx©å_öô: %s\n", 
	`°ªº‹
(
ªt
));

54  
ªt
;

60 #ifde‡
CONFIG_PSHARED


61 
ªt
 = 
	`±hªad_muãx©å_£çsh¨ed
(&
m©å
, 
PTHREAD_PROCESS_SHARED
);

62 i‡(
ªt
) {

63 
	`log_îr
("±hªad_muãx©å_£çsh¨ed: %s\n", 
	`°ªº‹
(
ªt
));

64  
ªt
;

67 
ªt
 = 
	`±hªad_muãx©å_£ây≥
(&
m©å
, 
ty≥
);

68 i‡(
ªt
) {

69 
	`log_îr
("±hªad_muãx©å_£ây≥: %s\n", 
	`°ªº‹
(
ªt
));

70  
ªt
;

72 
ªt
 = 
	`±hªad_muãx_öô
(
muãx
, &
m©å
);

73 i‡(
ªt
) {

74 
	`log_îr
("±hªad_muãx_öô: %s\n", 
	`°ªº‹
(
ªt
));

75  
ªt
;

77 
	`±hªad_muãx©å_de°roy
(&
m©å
);

80 
	}
}

82 
	$muãx_öô_psh¨ed
(
±hªad_muãx_t
 *
muãx
)

84  
	`muãx_öô_psh¨ed_wôh_ty≥
(
muãx
, 
PTHREAD_MUTEX_DEFAULT
);

85 
	}
}

87 
	$muãx_c⁄d_öô_psh¨ed
(
±hªad_muãx_t
 *
muãx
, 
±hªad_c⁄d_t
 *
c⁄d
)

89 
ªt
;

91 
ªt
 = 
	`muãx_öô_psh¨ed
(
muãx
);

92 i‡(
ªt
)

93  
ªt
;

95 
ªt
 = 
	`c⁄d_öô_psh¨ed
(
c⁄d
);

96 i‡(
ªt
)

97  
ªt
;

100 
	}
}

	@pshared.h

1 #i‚de‡
FIO_PSHARED_H


2 
	#FIO_PSHARED_H


	)

4 
	~<±hªad.h
>

6 
muãx_öô_psh¨ed_wôh_ty≥
(
±hªad_muãx_t
 *, );

7 
muãx_öô_psh¨ed
(
±hªad_muãx_t
 *);

8 
c⁄d_öô_psh¨ed
(
±hªad_c⁄d_t
 *);

9 
muãx_c⁄d_öô_psh¨ed
(
±hªad_muãx_t
 *, 
±hªad_c⁄d_t
 *);

	@rate-submit.c

7 
	~<as£π.h
>

8 
	~"fio.h
"

9 
	~"i€ngöes.h
"

10 
	~"lib/gërußge.h
"

11 
	~"øã-submô.h
"

13 
	$check_ovîœp
(
io_u
 *io_u)

15 
i
, 
ªs
;

16 
thªad_d©a
 *
td
;

30 
ªs
 = 
	`±hªad_muãx_lock
(&
ovîœp_check
);

31 
	`as£π
(
ªs
 == 0);

33 
ªåy
:

34 
	`f‹_óch_td
(
td
, 
i
) {

35 i‡(
td
->
run°©e
 <
TD_SETTING_UP
 ||

36 
td
->
run°©e
 >
TD_FINISHING
 ||

37 !
td
->
o
.
£rülize_ovîœp
 ||

38 
td
->
o
.
io_submô_mode
 !
IO_MODE_OFFLOAD
)

41 i‡(!
	`ö_Êight_ovîœp
(&
td
->
io_u_Æl
, 
io_u
))

44 
ªs
 = 
	`±hªad_muãx_u∆ock
(&
ovîœp_check
);

45 
	`as£π
(
ªs
 == 0);

46 
ªs
 = 
	`±hªad_muãx_lock
(&
ovîœp_check
);

47 
	`as£π
(
ªs
 == 0);

48 
ªåy
;

50 
	}
}

52 
	$io_w‹kqueue_‚
(
submô_w‹kî
 *
sw
,

53 
w‹kqueue_w‹k
 *
w‹k
)

55 
io_u
 *io_u = 
	`c⁄èöî_of
(
w‹k
, io_u, work);

56 c⁄° 
fio_ddú
 
ddú
 = 
io_u
->ddir;

57 
thªad_d©a
 *
td
 = 
sw
->
¥iv
;

58 
ªt
, 
îr‹
;

60 i‡(
td
->
o
.
£rülize_ovîœp
)

61 
	`check_ovîœp
(
io_u
);

63 
	`d¥öt
(
FD_RATE
, "io_u %∞queued by %u\n", 
io_u
, 
	`gëtid
());

65 
	`io_u_£t
(
td
, 
io_u
, 
IO_U_F_NO_FILE_PUT
);

67 
td
->
cur_dïth
++;

70 
ªt
 = 
	`td_io_queue
(
td
, 
io_u
);

71 i‡(
ªt
 !
FIO_Q_BUSY
)

73 
ªt
 = 
	`io_u_queued_com∂ëe
(
td
, 1);

74 i‡(
ªt
 > 0)

75 
td
->
cur_dïth
 -
ªt
;

76 i‡(
ªt
 < 0)

78 
	`io_u_˛ór
(
td
, 
io_u
, 
IO_U_F_FLIGHT
);

81 
	`d¥öt
(
FD_RATE
, "io_u %∞ªà%d by %u\n", 
io_u
, 
ªt
, 
	`gëtid
());

83 
îr‹
 = 
	`io_queue_evít
(
td
, 
io_u
, &
ªt
, 
ddú
, 
NULL
, 0, NULL);

85 i‡(
ªt
 =
FIO_Q_COMPLETED
)

86 
td
->
cur_dïth
--;

87 i‡(
ªt
 =
FIO_Q_QUEUED
) {

88 
mö_evts
;

90 i‡(
td
->
o
.
iodïth
 == 1)

91 
mö_evts
 = 1;

93 
mö_evts
 = 0;

95 
ªt
 = 
	`io_u_queued_com∂ëe
(
td
, 
mö_evts
);

96 i‡(
ªt
 > 0)

97 
td
->
cur_dïth
 -
ªt
;

100 i‡(
îr‹
 || 
td
->error) {

101 
	`±hªad_muãx_lock
(&
td
->
io_u_lock
);

102 
	`±hªad_c⁄d_sig«l
(&
td
->
∑ª¡
->
‰ì_c⁄d
);

103 
	`±hªad_muãx_u∆ock
(&
td
->
io_u_lock
);

107 
	}
}

109 
boﬁ
 
	$io_w‹kqueue_¥e_¶ìp_Êush_‚
(
submô_w‹kî
 *
sw
)

111 
thªad_d©a
 *
td
 = 
sw
->
¥iv
;

113 i‡(
td
->
îr‹
)

114  
Ál£
;

115 i‡(
td
->
io_u_queued
 ||Åd->
cur_dïth
 ||Åd->
io_u_ö_Êight
)

116  
åue
;

118  
Ál£
;

119 
	}
}

121 
	$io_w‹kqueue_¥e_¶ìp_‚
(
submô_w‹kî
 *
sw
)

123 
thªad_d©a
 *
td
 = 
sw
->
¥iv
;

124 
ªt
;

126 
ªt
 = 
	`io_u_quõs˚
(
td
);

127 i‡(
ªt
 > 0)

128 
td
->
cur_dïth
 -
ªt
;

129 
	}
}

131 
	$io_w‹kqueue_Æloc_‚
(
submô_w‹kî
 *
sw
)

133 
thªad_d©a
 *
td
;

135 
td
 = 
	`ˇŒoc
(1, (*td));

136 
sw
->
¥iv
 = 
td
;

138 
	}
}

140 
	$io_w‹kqueue_‰ì_‚
(
submô_w‹kî
 *
sw
)

142 
	`‰ì
(
sw
->
¥iv
);

143 
sw
->
¥iv
 = 
NULL
;

144 
	}
}

146 
	$io_w‹kqueue_öô_w‹kî_‚
(
submô_w‹kî
 *
sw
)

148 
thªad_d©a
 *
∑ª¡
 = 
sw
->
wq
->
td
;

149 
thªad_d©a
 *
td
 = 
sw
->
¥iv
;

151 
	`mem˝y
(&
td
->
o
, &
∑ª¡
->o, (td->o));

152 
	`mem˝y
(&
td
->
ts
, &
∑ª¡
->ts, (td->ts));

153 
td
->
o
.
uid
 =Åd->o.
gid
 = -1U;

154 
	`dup_fûes
(
td
, 
∑ª¡
);

155 
td
->
eo
 = 
∑ª¡
->eo;

156 
	`fio_›ti⁄s_mem_du≥
(
td
);

158 i‡(
	`i€ngöe_lﬂd
(
td
))

159 
îr
;

161 
td
->
pid
 = 
	`gëtid
();

163 
	`INIT_FLIST_HEAD
(&
td
->
io_log_li°
);

164 
	`INIT_FLIST_HEAD
(&
td
->
io_hi°_li°
);

165 
	`INIT_FLIST_HEAD
(&
td
->
vîify_li°
);

166 
	`INIT_FLIST_HEAD
(&
td
->
åim_li°
);

167 
td
->
io_hi°_åì
 = 
RB_ROOT
;

169 
td
->
o
.
iodïth
 = 1;

170 i‡(
	`td_io_öô
(
td
))

171 
îr_io_öô
;

173 i‡(
td
->
io_›s
->
po°_öô
 &&Åd->io_›s->
	`po°_öô
(td))

174 
îr_io_öô
;

176 
	`£t_ïoch_time
(
td
,Åd->
o
.
log_unix_ïoch
 |Åd->o.
log_Æã∫©e_ïoch
,Åd->o.
log_Æã∫©e_ïoch_˛ock_id
);

177 
	`fio_gërußge
(&
td
->
ru_°¨t
);

178 
	`˛ór_io_°©e
(
td
, 1);

180 
	`td_£t_run°©e
(
td
, 
TD_RUNNING
);

181 
td
->
Êags
 |
TD_F_CHILD
 | 
TD_F_NEED_LOCK
;

182 
td
->
∑ª¡
 =Öarent;

185 
îr_io_öô
:

186 
	`˛o£_i€ngöe
(
td
);

187 
îr
:

190 
	}
}

192 
	$io_w‹kqueue_exô_w‹kî_‚
(
submô_w‹kî
 *
sw
,

193 *
sum_˙t
)

195 
thªad_d©a
 *
td
 = 
sw
->
¥iv
;

197 (*
sum_˙t
)++;

206 
sw
->
wq
->
td
->
ts
.
dißbÀ_¥io_°©
 = 1;

207 
	`sum_thªad_°©s
(&
sw
->
wq
->
td
->
ts
, &td->ts);

209 
	`fio_›ti⁄s_‰ì
(
td
);

210 
	`˛o£_™d_‰ì_fûes
(
td
);

211 i‡(
td
->
io_›s
)

212 
	`˛o£_i€ngöe
(
td
);

213 
	`td_£t_run°©e
(
td
, 
TD_EXITED
);

214 
	}
}

216 #ifde‡
CONFIG_SFAA


217 
	$sum_vÆ
(
uöt64_t
 *
d°
, uöt64_à*
§c
)

219 i‡(*
§c
) {

220 
	`__sync_„tch_™d_add
(
d°
, *
§c
);

221 *
§c
 = 0;

223 
	}
}

225 
	$sum_vÆ
(
uöt64_t
 *
d°
, uöt64_à*
§c
)

227 i‡(*
§c
) {

228 *
d°
 +*
§c
;

229 *
§c
 = 0;

231 
	}
}

234 
	$±hªad_doubÀ_u∆ock
(
±hªad_muãx_t
 *
lock1
,

235 
±hªad_muãx_t
 *
lock2
)

237 #i‚de‡
CONFIG_SFAA


238 
	`±hªad_muãx_u∆ock
(
lock1
);

239 
	`±hªad_muãx_u∆ock
(
lock2
);

241 
	}
}

243 
	$±hªad_doubÀ_lock
(
±hªad_muãx_t
 *
lock1
,Öthªad_muãx_à*
lock2
)

245 #i‚de‡
CONFIG_SFAA


246 i‡(
lock1
 < 
lock2
) {

247 
	`±hªad_muãx_lock
(
lock1
);

248 
	`±hªad_muãx_lock
(
lock2
);

250 
	`±hªad_muãx_lock
(
lock2
);

251 
	`±hªad_muãx_lock
(
lock1
);

254 
	}
}

256 
	$sum_ddú
(
thªad_d©a
 *
d°
, thªad_d©®*
§c
,

257 
fio_ddú
 
ddú
)

259 
	`±hªad_doubÀ_lock
(&
d°
->
io_wq
.
°©_lock
, &
§c
->io_wq.stat_lock);

261 
	`sum_vÆ
(&
d°
->
io_byãs
[
ddú
], &
§c
->io_bytes[ddir]);

262 
	`sum_vÆ
(&
d°
->
io_blocks
[
ddú
], &
§c
->io_blocks[ddir]);

263 
	`sum_vÆ
(&
d°
->
this_io_blocks
[
ddú
], &
§c
->this_io_blocks[ddir]);

264 
	`sum_vÆ
(&
d°
->
this_io_byãs
[
ddú
], &
§c
->this_io_bytes[ddir]);

265 
	`sum_vÆ
(&
d°
->
byãs_d⁄e
[
ddú
], &
§c
->bytes_done[ddir]);

267 
	`±hªad_doubÀ_u∆ock
(&
d°
->
io_wq
.
°©_lock
, &
§c
->io_wq.stat_lock);

268 
	}
}

270 
	$io_w‹kqueue_upd©e_ac˘_‚
(
submô_w‹kî
 *
sw
)

272 
thªad_d©a
 *
§c
 = 
sw
->
¥iv
;

273 
thªad_d©a
 *
d°
 = 
sw
->
wq
->
td
;

275 i‡(
	`td_ªad
(
§c
))

276 
	`sum_ddú
(
d°
, 
§c
, 
DDIR_READ
);

277 i‡(
	`td_wrôe
(
§c
))

278 
	`sum_ddú
(
d°
, 
§c
, 
DDIR_WRITE
);

279 i‡(
	`td_åim
(
§c
))

280 
	`sum_ddú
(
d°
, 
§c
, 
DDIR_TRIM
);

282 
	}
}

284 
w‹kqueue_›s
 
	gøãd_wq_›s
 = {

285 .
‚
 = 
io_w‹kqueue_‚
,

286 .
	g¥e_¶ìp_Êush_‚
 = 
io_w‹kqueue_¥e_¶ìp_Êush_‚
,

287 .
	g¥e_¶ìp_‚
 = 
io_w‹kqueue_¥e_¶ìp_‚
,

288 .
	gupd©e_ac˘_‚
 = 
io_w‹kqueue_upd©e_ac˘_‚
,

289 .
	gÆloc_w‹kî_‚
 = 
io_w‹kqueue_Æloc_‚
,

290 .
	g‰ì_w‹kî_‚
 = 
io_w‹kqueue_‰ì_‚
,

291 .
	göô_w‹kî_‚
 = 
io_w‹kqueue_öô_w‹kî_‚
,

292 .
	gexô_w‹kî_‚
 = 
io_w‹kqueue_exô_w‹kî_‚
,

295 
	$øã_submô_öô
(
thªad_d©a
 *
td
, 
sk_out
 *sk_out)

297 i‡(
td
->
o
.
io_submô_mode
 !
IO_MODE_OFFLOAD
)

300  
	`w‹kqueue_öô
(
td
, &td->
io_wq
, &
øãd_wq_›s
,Åd->
o
.
iodïth
, 
sk_out
);

301 
	}
}

303 
	$øã_submô_exô
(
thªad_d©a
 *
td
)

305 i‡(
td
->
o
.
io_submô_mode
 !
IO_MODE_OFFLOAD
)

308 
	`w‹kqueue_exô
(&
td
->
io_wq
);

309 
	}
}

	@rate-submit.h

1 #i‚de‡
FIO_RATE_SUBMIT


2 
	#FIO_RATE_SUBMIT


	)

4 
øã_submô_öô
(
thªad_d©a
 *, 
sk_out
 *);

5 
øã_submô_exô
(
thªad_d©a
 *);

	@rwlock.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<sys/mm™.h
>

4 
	~<as£π.h
>

6 
	~"log.h
"

7 
	~"rwlock.h
"

8 
	~"os/os.h
"

10 
	$fio_rwlock_wrôe
(
fio_rwlock
 *
lock
)

12 
	`as£π
(
lock
->
magic
 =
FIO_RWLOCK_MAGIC
);

13 
	`±hªad_rwlock_wæock
(&
lock
->lock);

14 
	}
}

16 
	$fio_rwlock_ªad
(
fio_rwlock
 *
lock
)

18 
	`as£π
(
lock
->
magic
 =
FIO_RWLOCK_MAGIC
);

19 
	`±hªad_rwlock_rdlock
(&
lock
->lock);

20 
	}
}

22 
	$fio_rwlock_u∆ock
(
fio_rwlock
 *
lock
)

24 
	`as£π
(
lock
->
magic
 =
FIO_RWLOCK_MAGIC
);

25 
	`±hªad_rwlock_u∆ock
(&
lock
->lock);

26 
	}
}

28 
	$fio_rwlock_ªmove
(
fio_rwlock
 *
lock
)

30 
	`as£π
(
lock
->
magic
 =
FIO_RWLOCK_MAGIC
);

31 
	`±hªad_rwlock_de°roy
(&
lock
->lock);

32 
	`munm≠
((*Ë
lock
, (*lock));

33 
	}
}

35 
fio_rwlock
 *
	$fio_rwlock_öô
()

37 
fio_rwlock
 *
lock
;

38 
±hªad_rwlock©å_t
 
©å
;

39 
ªt
;

41 
lock
 = (*Ë
	`mm≠
(
NULL
, (
fio_rwlock
),

42 
PROT_READ
 | 
PROT_WRITE
,

43 
OS_MAP_ANON
 | 
MAP_SHARED
, -1, 0);

44 i‡(
lock
 =
MAP_FAILED
) {

45 
	`≥º‹
("mmapÑwlock");

46 
lock
 = 
NULL
;

47 
îr
;

50 
lock
->
magic
 = 
FIO_RWLOCK_MAGIC
;

52 
ªt
 = 
	`±hªad_rwlock©å_öô
(&
©å
);

53 i‡(
ªt
) {

54 
	`log_îr
("±hªad_rwlock©å_öô: %s\n", 
	`°ªº‹
(
ªt
));

55 
îr
;

57 #ifde‡
CONFIG_PSHARED


58 
ªt
 = 
	`±hªad_rwlock©å_£çsh¨ed
(&
©å
, 
PTHREAD_PROCESS_SHARED
);

59 i‡(
ªt
) {

60 
	`log_îr
("±hªad_rwlock©å_£çsh¨ed: %s\n", 
	`°ªº‹
(
ªt
));

61 
de°roy_©å
;

64 
ªt
 = 
	`±hªad_rwlock_öô
(&
lock
->lock, &
©å
);

66 
ªt
 = 
	`±hªad_rwlock_öô
(&
lock
->lock, 
NULL
);

69 i‡(
ªt
) {

70 
	`log_îr
("±hªad_rwlock_öô: %s\n", 
	`°ªº‹
(
ªt
));

71 
de°roy_©å
;

74 
	`±hªad_rwlock©å_de°roy
(&
©å
);

76  
lock
;

77 
de°roy_©å
:

78 
	`±hªad_rwlock©å_de°roy
(&
©å
);

79 
îr
:

80 i‡(
lock
)

81 
	`fio_rwlock_ªmove
(
lock
);

82  
NULL
;

83 
	}
}

	@rwlock.h

1 #i‚de‡
FIO_RWLOCK_H


2 
	#FIO_RWLOCK_H


	)

4 
	~<±hªad.h
>

6 
	#FIO_RWLOCK_MAGIC
 0x52574c4fU

	)

8 
	sfio_rwlock
 {

9 
±hªad_rwlock_t
 
	mlock
;

10 
	mmagic
;

13 
fio_rwlock_ªad
(
fio_rwlock
 *);

14 
fio_rwlock_wrôe
(
fio_rwlock
 *);

15 
fio_rwlock_u∆ock
(
fio_rwlock
 *);

16 
fio_rwlock
 *
fio_rwlock_öô
();

17 
fio_rwlock_ªmove
(
fio_rwlock
 *);

	@server.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<uni°d.h
>

4 
	~<î∫o.h
>

5 
	~<pﬁl.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<sys/waô.h
>

8 
	~<sys/sockë.h
>

9 
	~<sys/°©.h
>

10 
	~<sys/un.h
>

11 
	~<sys/uio.h
>

12 
	~<√töë/ö.h
>

13 
	~<¨∑/öë.h
>

14 
	~<√tdb.h
>

15 
	~<sy¶og.h
>

16 
	~<sig«l.h
>

17 #ifde‡
CONFIG_ZLIB


18 
	~<zlib.h
>

21 
	~"fio.h
"

22 
	~"›ti⁄s.h
"

23 
	~"£rvî.h
"

24 
	~"¸c/¸c16.h
"

25 
	~"lib/õì754.h
"

26 
	~"vîify-°©e.h
"

27 
	~"smÆloc.h
"

29 
	gfio_√t_p‹t
 = 
FIO_NET_PORT
;

31 
boﬁ
 
	gexô_backíd
 = 
Ál£
;

34 
	mSK_F_FREE
 = 1,

35 
	mSK_F_COPY
 = 2,

36 
	mSK_F_SIMPLE
 = 4,

37 
	mSK_F_VEC
 = 8,

38 
	mSK_F_INLINE
 = 16,

41 
	ssk_íåy
 {

42 
Êi°_hód
 
	mli°
;

43 
	mÊags
;

44 
	m›code
;

45 *
	mbuf
;

46 
off_t
 
	msize
;

47 
uöt64_t
 
	mèg
;

48 
Êi°_hód
 
	m√xt
;

51 *
	gfio_£rvî_¨g
;

52 *
	gböd_sock
;

53 
sockaddr_ö
 
	gßddr_ö
;

54 
sockaddr_ö6
 
	gßddr_ö6
;

55 
	gu£_ùv6
;

56 #ifde‡
CONFIG_ZLIB


57 
	ghas_zlib
 = 1;

59 
	ghas_zlib
 = 0;

61 
	gu£_zlib
;

62 
	gme
[128];

64 
±hªad_key_t
 
	gsk_out_key
;

66 #ifde‡
WIN32


67 *
	gfio_£rvî_pùe_«me
 = 
NULL
;

68 
HANDLE
 
	ghjob
 = 
INVALID_HANDLE_VALUE
;

69 
	sffi_ñemít
 {

71 
±hªad_t
 
	mthªad
;

72 
HANDLE
 
	mhPro˚ss
;

74 
boﬁ
 
	mis_thªad
;

78 
	sfio_f‹k_ôem
 {

79 
Êi°_hód
 
	mli°
;

80 
	mexôvÆ
;

81 
	msig«l
;

82 
	mexôed
;

83 #ifde‡
WIN32


84 
ffi_ñemít
 
	mñemít
;

86 
pid_t
 
	mpid
;

90 
	scmd_ª∂y
 {

91 
fio_£m
 
	mlock
;

92 *
	md©a
;

93 
size_t
 
	msize
;

94 
	mîr‹
;

97 c⁄° *
	gfio_£rvî_›s
[
FIO_NET_CMD_NR
] = {

123 
	$sk_lock
(
sk_out
 *sk_out)

125 
	`fio_£m_down
(&
sk_out
->
lock
);

126 
	}
}

128 
	$sk_u∆ock
(
sk_out
 *sk_out)

130 
	`fio_£m_up
(&
sk_out
->
lock
);

131 
	}
}

133 
	$sk_out_assign
(
sk_out
 *sk_out)

135 i‡(!
sk_out
)

138 
	`sk_lock
(
sk_out
);

139 
sk_out
->
ªfs
++;

140 
	`sk_u∆ock
(
sk_out
);

141 
	`±hªad_£t•ecific
(
sk_out_key
, 
sk_out
);

142 
	}
}

144 
	$sk_out_‰ì
(
sk_out
 *sk_out)

146 
	`__fio_£m_ªmove
(&
sk_out
->
lock
);

147 
	`__fio_£m_ªmove
(&
sk_out
->
waô
);

148 
	`__fio_£m_ªmove
(&
sk_out
->
xmô
);

149 
	`s‰ì
(
sk_out
);

150 
	}
}

152 
	$__sk_out_dr›
(
sk_out
 *sk_out)

154 i‡(
sk_out
) {

155 
ªfs
;

157 
	`sk_lock
(
sk_out
);

158 
	`as£π
(
sk_out
->
ªfs
 != 0);

159 
ªfs
 = --
sk_out
->refs;

160 
	`sk_u∆ock
(
sk_out
);

162 i‡(!
ªfs
) {

163 
	`sk_out_‰ì
(
sk_out
);

164 
	`±hªad_£t•ecific
(
sk_out_key
, 
NULL
);

170 
	}
}

172 
	$sk_out_dr›
()

174 
sk_out
 *sk_out;

176 
sk_out
 = 
	`±hªad_gë•ecific
(
sk_out_key
);

177 
	`__sk_out_dr›
(
sk_out
);

178 
	}
}

180 
	$__fio_öô_√t_cmd
(
fio_√t_cmd
 *
cmd
, 
uöt16_t
 
›code
,

181 
uöt32_t
 
pdu_Àn
, 
uöt64_t
 
èg
)

183 
	`mem£t
(
cmd
, 0, (*cmd));

185 
cmd
->
vîsi⁄
 = 
	`__˝u_to_À16
(
FIO_SERVER_VER
);

186 
cmd
->
›code
 = 
	`˝u_to_À16
(opcode);

187 
cmd
->
èg
 = 
	`˝u_to_À64
(tag);

188 
cmd
->
pdu_Àn
 = 
	`˝u_to_À32
(pdu_len);

189 
	}
}

192 
	$fio_öô_√t_cmd
(
fio_√t_cmd
 *
cmd
, 
uöt16_t
 
›code
,

193 c⁄° *
pdu
, 
uöt32_t
 
pdu_Àn
, 
uöt64_t
 
èg
)

195 
	`__fio_öô_√t_cmd
(
cmd
, 
›code
, 
pdu_Àn
, 
èg
);

197 i‡(
pdu
)

198 
	`mem˝y
(&
cmd
->
∑ylﬂd
, 
pdu
, 
pdu_Àn
);

199 
	}
}

201 c⁄° *
	$fio_£rvî_›
(
›
)

203 
buf
[32];

205 i‡(
›
 < 
FIO_NET_CMD_NR
)

206  
fio_£rvî_›s
[
›
];

208 
	`•rötf
(
buf
, "UNKNOWN/%d", 
›
);

209  
buf
;

210 
	}
}

212 
ssize_t
 
	$iov_tŸÆ_Àn
(c⁄° 
iovec
 *
iov
, 
cou¡
)

214 
ssize_t
 
ªt
 = 0;

216 
cou¡
--) {

217 
ªt
 +
iov
->
iov_Àn
;

218 
iov
++;

221  
ªt
;

222 
	}
}

224 
	$fio_£ndv_d©a
(
sk
, 
iovec
 *
iov
, 
cou¡
)

226 
ssize_t
 
tŸÆ_Àn
 = 
	`iov_tŸÆ_Àn
(
iov
, 
cou¡
);

227 
ssize_t
 
ªt
;

230 
ªt
 = 
	`wrôev
(
sk
, 
iov
, 
cou¡
);

231 i‡(
ªt
 > 0) {

232 
tŸÆ_Àn
 -
ªt
;

233 i‡(!
tŸÆ_Àn
)

236 
ªt
) {

237 i‡(
ªt
 >
iov
->
iov_Àn
) {

238 
ªt
 -
iov
->
iov_Àn
;

239 
iov
++;

242 
iov
->
iov_ba£
 +
ªt
;

243 
iov
->
iov_Àn
 -
ªt
;

244 
ªt
 = 0;

246 } i‡(!
ªt
)

248 i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EINTR
)

252 } !
exô_backíd
);

254 i‡(!
tŸÆ_Àn
)

258 
	}
}

260 
	$fio_£nd_d©a
(
sk
, c⁄° *
p
, 
Àn
)

262 
iovec
 
iov
 = { .
iov_ba£
 = (*Ë
p
, .
iov_Àn
 = 
Àn
 };

264 
	`as£π
(
Àn
 <(
fio_√t_cmd
Ë+ 
FIO_SERVER_MAX_FRAGMENT_PDU
);

266  
	`fio_£ndv_d©a
(
sk
, &
iov
, 1);

267 
	}
}

269 
boﬁ
 
	$fio_£rvî_pﬁl_fd
(
fd
, 
evíts
, 
timeout
)

271 
pﬁlfd
 
pfd
 = {

272 .
fd
 = fd,

273 .
evíts
 =Évents,

275 
ªt
;

277 
ªt
 = 
	`pﬁl
(&
pfd
, 1, 
timeout
);

278 i‡(
ªt
 < 0) {

279 i‡(
î∫o
 =
EINTR
)

280  
Ál£
;

281 
	`log_îr
("fio:Öﬁl: %s\n", 
	`°ªº‹
(
î∫o
));

282  
Ál£
;

283 } i‡(!
ªt
) {

284  
Ál£
;

286 i‡(
pfd
.
ªvíts
 & 
evíts
)

287  
åue
;

288  
Ál£
;

289 
	}
}

291 
	$fio_ªcv_d©a
(
sk
, *
buf
, 
Àn
, 
boﬁ
 
waô
)

293 
Êags
;

294 *
p
 = 
buf
;

296 i‡(
waô
)

297 
Êags
 = 
MSG_WAITALL
;

299 
Êags
 = 
OS_MSG_DONTWAIT
;

302 
ªt
 = 
	`ªcv
(
sk
, 
p
, 
Àn
, 
Êags
);

304 i‡(
ªt
 > 0) {

305 
Àn
 -
ªt
;

306 i‡(!
Àn
)

308 
p
 +
ªt
;

310 } i‡(!
ªt
)

312 i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EINTR
) {

313 i‡(
waô
)

318 } !
exô_backíd
);

320 i‡(!
Àn
)

324 
	}
}

326 
	$vîify_c⁄vît_cmd
(
fio_√t_cmd
 *
cmd
)

328 
uöt16_t
 
¸c
;

330 
cmd
->
cmd_¸c16
 = 
	`À16_to_˝u
(cmd->cmd_crc16);

331 
cmd
->
pdu_¸c16
 = 
	`À16_to_˝u
(cmd->pdu_crc16);

333 
¸c
 = 
	`fio_¸c16
(
cmd
, 
FIO_NET_CMD_CRC_SZ
);

334 i‡(
¸c
 !
cmd
->
cmd_¸c16
) {

335 
	`log_îr
("fio: server bad crc on command (got %x, wanted %x)\n",

336 
cmd
->
cmd_¸c16
, 
¸c
);

337 
	`Ârötf
(
f_îr
, "fio: server bad crc on command (got %x, wanted %x)\n",

338 
cmd
->
cmd_¸c16
, 
¸c
);

342 
cmd
->
vîsi⁄
 = 
	`À16_to_˝u
(cmd->version);

343 
cmd
->
›code
 = 
	`À16_to_˝u
(cmd->opcode);

344 
cmd
->
Êags
 = 
	`À32_to_˝u
(cmd->flags);

345 
cmd
->
èg
 = 
	`À64_to_˝u
(cmd->tag);

346 
cmd
->
pdu_Àn
 = 
	`À32_to_˝u
(cmd->pdu_len);

348 
cmd
->
vîsi⁄
) {

349 
FIO_SERVER_VER
:

352 
	`log_îr
("fio: bad sîvî cmd vîsi⁄ %d\n", 
cmd
->
vîsi⁄
);

353 
	`Ârötf
(
f_îr
, "fio: client/server version mismatch (%d != %d)\n",

354 
cmd
->
vîsi⁄
, 
FIO_SERVER_VER
);

358 i‡(
cmd
->
pdu_Àn
 > 
FIO_SERVER_MAX_FRAGMENT_PDU
) {

359 
	`log_îr
("fio: comm™dÖaylﬂdÅoÿœrge: %u\n", 
cmd
->
pdu_Àn
);

364 
	}
}

369 
fio_√t_cmd
 *
	$fio_√t_ªcv_cmd
(
sk
, 
boﬁ
 
waô
)

371 
fio_√t_cmd
 
cmd
, *
tmp
, *
cmdªt
 = 
NULL
;

372 
size_t
 
cmd_size
 = 0, 
pdu_off£t
 = 0;

373 
uöt16_t
 
¸c
;

374 
ªt
, 
fú°
 = 1;

375 *
pdu
 = 
NULL
;

378 
ªt
 = 
	`fio_ªcv_d©a
(
sk
, &
cmd
, (cmd), 
waô
);

379 i‡(
ªt
)

383 
ªt
 = 
	`vîify_c⁄vît_cmd
(&
cmd
);

384 i‡(
ªt
)

387 i‡(
fú°
) {

389 
cmd_size
 = (
cmd
Ë+ cmd.
pdu_Àn
 + 1;

390 
	`as£π
(!
cmdªt
);

392 
cmd_size
 +
cmd
.
pdu_Àn
;

394 i‡(
cmd_size
 / 1024 > 
FIO_SERVER_MAX_CMD_MB
 * 1024) {

395 
	`log_îr
("fio: cmd+pduÅoÿœrgê(%Œu)\n", (Ë
cmd_size
);

396 
ªt
 = 1;

400 
tmp
 = 
	`ªÆloc
(
cmdªt
, 
cmd_size
);

401 i‡(!
tmp
) {

402 
	`log_îr
("fio: server failedállocating cmd\n");

403 
ªt
 = 1;

406 
cmdªt
 = 
tmp
;

408 i‡(
fú°
)

409 
	`mem˝y
(
cmdªt
, &
cmd
, (cmd));

410 i‡(
cmdªt
->
›code
 !
cmd
.opcode) {

411 
	`log_îr
("fio: fragment opcode mismatch (%d != %d)\n",

412 
cmdªt
->
›code
, 
cmd
.opcode);

413 
ªt
 = 1;

417 i‡(!
cmd
.
pdu_Àn
)

421 
pdu
 = (*Ë
cmdªt
->
∑ylﬂd
 + 
pdu_off£t
;

422 
ªt
 = 
	`fio_ªcv_d©a
(
sk
, 
pdu
, 
cmd
.
pdu_Àn
, 
waô
);

423 i‡(
ªt
)

427 
¸c
 = 
	`fio_¸c16
(
pdu
, 
cmd
.
pdu_Àn
);

428 i‡(
¸c
 !
cmd
.
pdu_¸c16
) {

429 
	`log_îr
("fio: server bad crc onÖayload ");

430 
	`log_îr
("(gŸ %x, w™ãd %x)\n", 
cmd
.
pdu_¸c16
, 
¸c
);

431 
ªt
 = 1;

435 
pdu_off£t
 +
cmd
.
pdu_Àn
;

436 i‡(!
fú°
)

437 
cmdªt
->
pdu_Àn
 +
cmd
.pdu_len;

438 
fú°
 = 0;

439 } 
cmd
.
Êags
 & 
FIO_NET_CMD_F_MORE
);

441 i‡(
ªt
) {

442 
	`‰ì
(
cmdªt
);

443 
cmdªt
 = 
NULL
;

444 } i‡(
cmdªt
) {

446 i‡(
cmdªt
->
pdu_Àn
) {

447 i‡(
cmdªt
->
›code
 =
FIO_NET_CMD_TEXT
) {

448 
cmd_ãxt_pdu
 *
__pdu
 = (cmd_ãxt_pdu *Ë
cmdªt
->
∑ylﬂd
;

449 *
buf
 = (*Ë
__pdu
->buf;

450 
Àn
 = 
	`À32_to_˝u
(
__pdu
->
buf_Àn
);

452 
buf
[
Àn
] = '\0';

453 } i‡(
cmdªt
->
›code
 =
FIO_NET_CMD_JOB
) {

454 
cmd_job_pdu
 *
__pdu
 = (cmd_job_pdu *Ë
cmdªt
->
∑ylﬂd
;

455 *
buf
 = (*Ë
__pdu
->buf;

456 
Àn
 = 
	`À32_to_˝u
(
__pdu
->
buf_Àn
);

458 
buf
[
Àn
] = '\0';

463 
cmdªt
->
Êags
 &~
FIO_NET_CMD_F_MORE
;

466  
cmdªt
;

467 
	}
}

469 
	$add_ª∂y
(
uöt64_t
 
èg
, 
Êi°_hód
 *
li°
)

471 
fio_√t_cmd_ª∂y
 *
ª∂y
;

473 
ª∂y
 = (
fio_√t_cmd_ª∂y
 *Ë(
uöçå_t
Ë
èg
;

474 
	`Êi°_add_èû
(&
ª∂y
->
li°
,Üist);

475 
	}
}

477 
uöt64_t
 
	$Æloc_ª∂y
(
uöt64_t
 
èg
, 
uöt16_t
 
›code
)

479 
fio_√t_cmd_ª∂y
 *
ª∂y
;

481 
ª∂y
 = 
	`ˇŒoc
(1, (*reply));

482 
	`INIT_FLIST_HEAD
(&
ª∂y
->
li°
);

483 
	`fio_gëtime
(&
ª∂y
->
ts
, 
NULL
);

484 
ª∂y
->
ßved_èg
 = 
èg
;

485 
ª∂y
->
›code
 = opcode;

487  (
uöçå_t
Ë
ª∂y
;

488 
	}
}

490 
	$‰ì_ª∂y
(
uöt64_t
 
èg
)

492 
fio_√t_cmd_ª∂y
 *
ª∂y
;

494 
ª∂y
 = (
fio_√t_cmd_ª∂y
 *Ë(
uöçå_t
Ë
èg
;

495 
	`‰ì
(
ª∂y
);

496 
	}
}

498 
	$fio_√t_cmd_¸c_pdu
(
fio_√t_cmd
 *
cmd
, c⁄° *
pdu
)

500 
uöt32_t
 
pdu_Àn
;

502 
cmd
->
cmd_¸c16
 = 
	`__˝u_to_À16
(
	`fio_¸c16
(cmd, 
FIO_NET_CMD_CRC_SZ
));

504 
pdu_Àn
 = 
	`À32_to_˝u
(
cmd
->pdu_len);

505 
cmd
->
pdu_¸c16
 = 
	`__˝u_to_À16
(
	`fio_¸c16
(
pdu
, 
pdu_Àn
));

506 
	}
}

508 
	$fio_√t_cmd_¸c
(
fio_√t_cmd
 *
cmd
)

510 
	`fio_√t_cmd_¸c_pdu
(
cmd
, cmd->
∑ylﬂd
);

511 
	}
}

513 
	$fio_√t_£nd_cmd
(
fd
, 
uöt16_t
 
›code
, c⁄° *
buf
, 
off_t
 
size
,

514 
uöt64_t
 *
èg±r
, 
Êi°_hód
 *
li°
)

516 
fio_√t_cmd
 *
cmd
 = 
NULL
;

517 
size_t
 
this_Àn
, 
cur_Àn
 = 0;

518 
uöt64_t
 
èg
;

519 
ªt
;

521 i‡(
li°
) {

522 
	`as£π
(
èg±r
);

523 
èg
 = *
èg±r
 = 
	`Æloc_ª∂y
(*èg±r, 
›code
);

525 
èg
 = 
èg±r
 ? *tagptr : 0;

528 
this_Àn
 = 
size
;

529 i‡(
this_Àn
 > 
FIO_SERVER_MAX_FRAGMENT_PDU
)

530 
this_Àn
 = 
FIO_SERVER_MAX_FRAGMENT_PDU
;

532 i‡(!
cmd
 || 
cur_Àn
 < (*cmdË+ 
this_Àn
) {

533 i‡(
cmd
)

534 
	`‰ì
(
cmd
);

536 
cur_Àn
 = (*
cmd
Ë+ 
this_Àn
;

537 
cmd
 = 
	`mÆloc
(
cur_Àn
);

540 
	`fio_öô_√t_cmd
(
cmd
, 
›code
, 
buf
, 
this_Àn
, 
èg
);

542 i‡(
this_Àn
 < 
size
)

543 
cmd
->
Êags
 = 
	`__˝u_to_À32
(
FIO_NET_CMD_F_MORE
);

545 
	`fio_√t_cmd_¸c
(
cmd
);

547 
ªt
 = 
	`fio_£nd_d©a
(
fd
, 
cmd
, (*cmdË+ 
this_Àn
);

548 
size
 -
this_Àn
;

549 
buf
 +
this_Àn
;

550 } !
ªt
 && 
size
);

552 i‡(
li°
) {

553 i‡(
ªt
)

554 
	`‰ì_ª∂y
(
èg
);

556 
	`add_ª∂y
(
èg
, 
li°
);

559 i‡(
cmd
)

560 
	`‰ì
(
cmd
);

562  
ªt
;

563 
	}
}

565 
sk_íåy
 *
	$fio_√t_¥ï_cmd
(
uöt16_t
 
›code
, *
buf
,

566 
size_t
 
size
, 
uöt64_t
 *
èg±r
,

567 
Êags
)

569 
sk_íåy
 *
íåy
;

571 
íåy
 = 
	`smÆloc
((*entry));

572 i‡(!
íåy
)

573  
NULL
;

575 
	`INIT_FLIST_HEAD
(&
íåy
->
√xt
);

576 
íåy
->
›code
 = opcode;

577 i‡(
Êags
 & 
SK_F_COPY
) {

578 
íåy
->
buf
 = 
	`smÆloc
(
size
);

579 
	`mem˝y
(
íåy
->
buf
, buf, 
size
);

581 
íåy
->
buf
 = buf;

583 
íåy
->
size
 = size;

584 i‡(
èg±r
)

585 
íåy
->
èg
 = *
èg±r
;

587 
íåy
->
èg
 = 0;

588 
íåy
->
Êags
 = flags;

589  
íåy
;

590 
	}
}

592 
h™dÀ_sk_íåy
(
sk_out
 *sk_out, 
sk_íåy
 *
íåy
);

594 
	$fio_√t_queue_íåy
(
sk_íåy
 *
íåy
)

596 
sk_out
 *sk_ouà
	`±hªad_gë•ecific
(
sk_out_key
);

598 i‡(
íåy
->
Êags
 & 
SK_F_INLINE
)

599 
	`h™dÀ_sk_íåy
(
sk_out
, 
íåy
);

601 
	`sk_lock
(
sk_out
);

602 
	`Êi°_add_èû
(&
íåy
->
li°
, &
sk_out
->list);

603 
	`sk_u∆ock
(
sk_out
);

605 
	`fio_£m_up
(&
sk_out
->
waô
);

607 
	}
}

609 
	$fio_√t_queue_cmd
(
uöt16_t
 
›code
, *
buf
, 
off_t
 
size
,

610 
uöt64_t
 *
èg±r
, 
Êags
)

612 
sk_íåy
 *
íåy
;

614 
íåy
 = 
	`fio_√t_¥ï_cmd
(
›code
, 
buf
, 
size
, 
èg±r
, 
Êags
);

615 i‡(
íåy
) {

616 
	`fio_√t_queue_íåy
(
íåy
);

621 
	}
}

623 
	$fio_√t_£nd_sim∂e_°ack_cmd
(
sk
, 
uöt16_t
 
›code
, 
uöt64_t
 
èg
)

625 
fio_√t_cmd
 
cmd
;

627 
	`fio_öô_√t_cmd
(&
cmd
, 
›code
, 
NULL
, 0, 
èg
);

628 
	`fio_√t_cmd_¸c
(&
cmd
);

630  
	`fio_£nd_d©a
(
sk
, &
cmd
, (cmd));

631 
	}
}

637 
	$fio_√t_£nd_sim∂e_cmd
(
sk
, 
uöt16_t
 
›code
, 
uöt64_t
 
èg
,

638 
Êi°_hód
 *
li°
)

640 
ªt
;

642 i‡(
li°
)

643 
èg
 = 
	`Æloc_ª∂y
—ag, 
›code
);

645 
ªt
 = 
	`fio_√t_£nd_sim∂e_°ack_cmd
(
sk
, 
›code
, 
èg
);

646 i‡(
ªt
) {

647 i‡(
li°
)

648 
	`‰ì_ª∂y
(
èg
);

650  
ªt
;

653 i‡(
li°
)

654 
	`add_ª∂y
(
èg
, 
li°
);

657 
	}
}

659 
	$fio_√t_queue_quô
()

661 
	`d¥öt
(
FD_NET
, "server: sending quit\n");

663  
	`fio_√t_queue_cmd
(
FIO_NET_CMD_QUIT
, 
NULL
, 0, NULL, 
SK_F_SIMPLE
);

664 
	}
}

666 
	$fio_√t_£nd_quô
(
sk
)

668 
	`d¥öt
(
FD_NET
, "server: sending quit\n");

670  
	`fio_√t_£nd_sim∂e_cmd
(
sk
, 
FIO_NET_CMD_QUIT
, 0, 
NULL
);

671 
	}
}

673 
	$fio_√t_£nd_ack
(
fio_√t_cmd
 *
cmd
, 
îr‹
, 
sig«l
)

675 
cmd_íd_pdu
 
ïdu
;

676 
uöt64_t
 
èg
 = 0;

678 i‡(
cmd
)

679 
èg
 = 
cmd
->tag;

681 
ïdu
.
îr‹
 = 
	`__˝u_to_À32
(error);

682 
ïdu
.
sig«l
 = 
	`__˝u_to_À32
(signal);

683  
	`fio_√t_queue_cmd
(
FIO_NET_CMD_STOP
, &
ïdu
, ”pdu), &
èg
, 
SK_F_COPY
);

684 
	}
}

686 
	$fio_√t_queue_°›
(
îr‹
, 
sig«l
)

688 
	`d¥öt
(
FD_NET
, "£rvî: sídög st› (%d, %d)\n", 
îr‹
, 
sig«l
);

689  
	`fio_√t_£nd_ack
(
NULL
, 
îr‹
, 
sig«l
);

690 
	}
}

692 #ifde‡
WIN32


693 
	$fio_£rvî_add_f‹k_ôem
(
ffi_ñemít
 *
ñemít
, 
Êi°_hód
 *
li°
)

695 
fio_f‹k_ôem
 *
ffi
;

697 
ffi
 = 
	`mÆloc
((*ffi));

698 
ffi
->
exôvÆ
 = 0;

699 
ffi
->
sig«l
 = 0;

700 
ffi
->
exôed
 = 0;

701 
ffi
->
ñemít
 = *element;

702 
	`Êi°_add_èû
(&
ffi
->
li°
,Üist);

703 
	}
}

705 
	$fio_£rvî_add_c⁄n_pid
(
Êi°_hód
 *
c⁄n_li°
, 
HANDLE
 
hPro˚ss
)

707 
ffi_ñemít
 
ñemít
 = {.
hPro˚ss
 = hPro˚ss, .
is_thªad
=
FALSE
};

708 
	`d¥öt
(
FD_NET
, "£rvî: f‹ked of‡c⁄√˘i⁄ job (tid=%u)\n", (Ë
ñemít
.
thªad
);

710 
	`fio_£rvî_add_f‹k_ôem
(&
ñemít
, 
c⁄n_li°
);

711 
	}
}

713 
	$fio_£rvî_add_job_pid
(
Êi°_hód
 *
job_li°
, 
±hªad_t
 
thªad
)

715 
ffi_ñemít
 
ñemít
 = {.
thªad
 =Åhªad, .
is_thªad
=
TRUE
};

716 
	`d¥öt
(
FD_NET
, "£rvî: f‹ked of‡job job (tid=%u)\n", (Ë
ñemít
.
thªad
);

717 
	`fio_£rvî_add_f‹k_ôem
(&
ñemít
, 
job_li°
);

718 
	}
}

720 
	$fio_£rvî_check_f‹k_ôem
(
fio_f‹k_ôem
 *
ffi
)

722 
ªt
;

724 i‡(
ffi
->
ñemít
.
is_thªad
) {

726 
ªt
 = 
	`±hªad_kûl
(
ffi
->
ñemít
.
thªad
, 0);

727 i‡(
ªt
) {

728 
ªv_vÆ
;

729 
	`±hªad_joö
(
ffi
->
ñemít
.
thªad
, (**Ë&
ªv_vÆ
);

731 
ffi
->
exôvÆ
 = 
ªv_vÆ
;

732 i‡(
ffi
->
exôvÆ
)

733 
	`log_îr
("thªad (tid=%uËexôed wôh %x\n", (Ë
ffi
->
ñemít
.
thªad
, (Ëffi->
exôvÆ
);

734 
	`d¥öt
(
FD_PROCESS
, "thªad (tid=%uËexôed wôh %x\n", (Ë
ffi
->
ñemít
.
thªad
, (Ëffi->
exôvÆ
);

735 
ffi
->
exôed
 = 1;

738 
DWORD
 
exô_vÆ
;

739 
	`GëExôCodePro˚ss
(
ffi
->
ñemít
.
hPro˚ss
, &
exô_vÆ
);

741 i‡(
exô_vÆ
 !
STILL_ACTIVE
) {

742 
	`d¥öt
(
FD_PROCESS
, "¥o˚s†%uÉxôed wôh %d\n", 
	`GëPro˚ssId
(
ffi
->
ñemít
.
hPro˚ss
), 
exô_vÆ
);

743 
ffi
->
exôed
 = 1;

744 
ffi
->
exôvÆ
 = 
exô_vÆ
;

747 
	}
}

749 
	$fio_£rvî_add_f‹k_ôem
(
pid_t
 
pid
, 
Êi°_hód
 *
li°
)

751 
fio_f‹k_ôem
 *
ffi
;

753 
ffi
 = 
	`mÆloc
((*ffi));

754 
ffi
->
exôvÆ
 = 0;

755 
ffi
->
sig«l
 = 0;

756 
ffi
->
exôed
 = 0;

757 
ffi
->
pid
 =Öid;

758 
	`Êi°_add_èû
(&
ffi
->
li°
,Üist);

759 
	}
}

761 
	$fio_£rvî_add_c⁄n_pid
(
Êi°_hód
 *
c⁄n_li°
, 
pid_t
 
pid
)

763 
	`d¥öt
(
FD_NET
, "£rvî: f‹ked of‡c⁄√˘i⁄ job (pid=%u)\n", (Ë
pid
);

764 
	`fio_£rvî_add_f‹k_ôem
(
pid
, 
c⁄n_li°
);

765 
	}
}

767 
	$fio_£rvî_add_job_pid
(
Êi°_hód
 *
job_li°
, 
pid_t
 
pid
)

769 
	`d¥öt
(
FD_NET
, "£rvî: f‹ked of‡job job (pid=%u)\n", (Ë
pid
);

770 
	`fio_£rvî_add_f‹k_ôem
(
pid
, 
job_li°
);

771 
	}
}

773 
	$fio_£rvî_check_f‹k_ôem
(
fio_f‹k_ôem
 *
ffi
)

775 
ªt
, 
°©us
;

777 
ªt
 = 
	`waôpid
(
ffi
->
pid
, &
°©us
, 
WNOHANG
);

778 i‡(
ªt
 < 0) {

779 i‡(
î∫o
 =
ECHILD
) {

780 
	`log_îr
("fio: c⁄√˘i⁄Öid %u dißµóªd\n", (Ë
ffi
->
pid
);

781 
ffi
->
exôed
 = 1;

783 
	`log_îr
("fio: waôpid: %s\n", 
	`°ªº‹
(
î∫o
));

784 } i‡(
ªt
 =
ffi
->
pid
) {

785 i‡(
	`WIFSIGNALED
(
°©us
)) {

786 
ffi
->
sig«l
 = 
	`WTERMSIG
(
°©us
);

787 
ffi
->
exôed
 = 1;

789 i‡(
	`WIFEXITED
(
°©us
)) {

790 i‡(
	`WEXITSTATUS
(
°©us
))

791 
ffi
->
exôvÆ
 = 
	`WEXITSTATUS
(
°©us
);

792 
ffi
->
exôed
 = 1;

795 
	}
}

798 
	$fio_£rvî_f‹k_ôem_d⁄e
(
fio_f‹k_ôem
 *
ffi
, 
boﬁ
 
°›
)

800 #ifde‡
WIN32


801 i‡(
ffi
->
ñemít
.
is_thªad
)

802 
	`d¥öt
(
FD_NET
, "tid %uÉxôed, sig=%u,ÉxôvÆ=%d\n", (Ë
ffi
->
ñemít
.
thªad
, ffi->
sig«l
, ffi->
exôvÆ
);

804 
	`d¥öt
(
FD_NET
, "pid %uÉxôed, sig=%u,ÉxôvÆ=%d\n", (Ë
	`GëPro˚ssId
(
ffi
->
ñemít
.
hPro˚ss
), ffi->
sig«l
, ffi->
exôvÆ
);

805 
	`Clo£H™dÀ
(
ffi
->
ñemít
.
hPro˚ss
);

806 
ffi
->
ñemít
.
hPro˚ss
 = 
INVALID_HANDLE_VALUE
;

809 
	`d¥öt
(
FD_NET
, "pid %uÉxôed, sig=%u,ÉxôvÆ=%d\n", (Ë
ffi
->
pid
, ffi->
sig«l
, ffi->
exôvÆ
);

815 i‡(
°›
) {

816 
	`fio_√t_queue_°›
(
ffi
->
exôvÆ
, ffi->
sig«l
);

817 
	`fio_√t_queue_quô
();

820 
	`Êi°_dñ
(&
ffi
->
li°
);

821 
	`‰ì
(
ffi
);

822 
	}
}

824 
	$fio_£rvî_check_f‹k_ôems
(
Êi°_hód
 *
li°
, 
boﬁ
 
°›
)

826 
Êi°_hód
 *
íåy
, *
tmp
;

827 
fio_f‹k_ôem
 *
ffi
;

829 
	`Êi°_f‹_óch_ß„
(
íåy
, 
tmp
, 
li°
) {

830 
ffi
 = 
	`Êi°_íåy
(
íåy
, 
fio_f‹k_ôem
, 
li°
);

832 
	`fio_£rvî_check_f‹k_ôem
(
ffi
);

834 i‡(
ffi
->
exôed
)

835 
	`fio_£rvî_f‹k_ôem_d⁄e
(
ffi
, 
°›
);

837 
	}
}

839 
	$fio_£rvî_check_jobs
(
Êi°_hód
 *
job_li°
)

841 
	`fio_£rvî_check_f‹k_ôems
(
job_li°
, 
åue
);

842 
	}
}

844 
	$fio_£rvî_check_c⁄ns
(
Êi°_hód
 *
c⁄n_li°
)

846 
	`fio_£rvî_check_f‹k_ôems
(
c⁄n_li°
, 
Ál£
);

847 
	}
}

849 
	$h™dÀ_lﬂd_fûe_cmd
(
fio_√t_cmd
 *
cmd
)

851 
cmd_lﬂd_fûe_pdu
 *
pdu
 = (cmd_lﬂd_fûe_pdu *Ë
cmd
->
∑ylﬂd
;

852 *
fûe_«me
 = 
pdu
->
fûe
;

853 
cmd_°¨t_pdu
 
•du
;

855 
	`d¥öt
(
FD_NET
, "£rvî:ÜﬂdögÜoˇ»fûê%s\n", (*Ë
fûe_«me
);

857 
pdu
->
«me_Àn
 = 
	`À16_to_˝u
(pdu->name_len);

858 
pdu
->
˛õ¡_ty≥
 = 
	`À16_to_˝u
(pdu->client_type);

860 i‡(
	`∑r£_jobs_öi
(
fûe_«me
, 0, 0, 
pdu
->
˛õ¡_ty≥
)) {

861 
	`fio_√t_queue_quô
();

865 
•du
.
jobs
 = 
	`˝u_to_À32
(
thªad_numbî
);

866 
•du
.
°©_ouçuts
 = 
	`˝u_to_À32
(
°©_numbî
);

867 
	`fio_√t_queue_cmd
(
FIO_NET_CMD_START
, &
•du
, (•du), 
NULL
, 
SK_F_COPY
);

869 
	}
}

871 #ifde‡
WIN32


872 *
	$fio_backíd_thªad
(*
d©a
)

874 
ªt
;

875 
sk_out
 *sk_ouà(sk_ouà*Ë
d©a
;

877 
	`sk_out_assign
(
sk_out
);

879 
ªt
 = 
	`fio_backíd
(
sk_out
);

880 
	`sk_out_dr›
();

882 
	`±hªad_exô
((*Ë(
öçå_t
Ë
ªt
);

883  
NULL
;

884 
	}
}

887 
	$h™dÀ_run_cmd
(
sk_out
 *sk_out, 
Êi°_hód
 *
job_li°
,

888 
fio_√t_cmd
 *
cmd
)

890 
ªt
;

892 
	`fio_time_öô
();

893 
	`£t_gíesis_time
();

895 #ifde‡
WIN32


897 
±hªad_t
 
thªad
;

901 
	`sk_out_assign
(
sk_out
);

902 
ªt
 = 
	`±hªad_¸óã
(&
thªad
, 
NULL
, 
fio_backíd_thªad
, 
sk_out
);

903 i‡(
ªt
) {

904 
	`log_îr
("±hªad_¸óã: %s\n", 
	`°ªº‹
(
ªt
));

905  
ªt
;

908 
	`fio_£rvî_add_job_pid
(
job_li°
, 
thªad
);

909  
ªt
;

913 
pid_t
 
pid
;

914 
	`sk_out_assign
(
sk_out
);

915 
pid
 = 
	`f‹k
();

916 i‡(
pid
) {

917 
	`fio_£rvî_add_job_pid
(
job_li°
, 
pid
);

921 
ªt
 = 
	`fio_backíd
(
sk_out
);

922 
	`‰ì_thªads_shm
();

923 
	`sk_out_dr›
();

924 
	`_exô
(
ªt
);

927 
	}
}

929 
	$h™dÀ_job_cmd
(
fio_√t_cmd
 *
cmd
)

931 
cmd_job_pdu
 *
pdu
 = (cmd_job_pdu *Ë
cmd
->
∑ylﬂd
;

932 *
buf
 = 
pdu
->buf;

933 
cmd_°¨t_pdu
 
•du
;

935 
pdu
->
buf_Àn
 = 
	`À32_to_˝u
(pdu->buf_len);

936 
pdu
->
˛õ¡_ty≥
 = 
	`À32_to_˝u
(pdu->client_type);

938 i‡(
	`∑r£_jobs_öi
(
buf
, 1, 0, 
pdu
->
˛õ¡_ty≥
)) {

939 
	`fio_√t_queue_quô
();

943 
•du
.
jobs
 = 
	`˝u_to_À32
(
thªad_numbî
);

944 
•du
.
°©_ouçuts
 = 
	`˝u_to_À32
(
°©_numbî
);

946 
	`fio_√t_queue_cmd
(
FIO_NET_CMD_START
, &
•du
, (•du), 
NULL
, 
SK_F_COPY
);

948 
	}
}

950 
	$h™dÀ_joblöe_cmd
(
fio_√t_cmd
 *
cmd
)

952 *
pdu
 = 
cmd
->
∑ylﬂd
;

953 
cmd_sögÀ_löe_pdu
 *
c¶p
;

954 
cmd_löe_pdu
 *
˛p
;

955 
off£t
;

956 
cmd_°¨t_pdu
 
•du
;

957 **
¨gv
;

958 
i
;

960 
˛p
 = 
pdu
;

961 
˛p
->
löes
 = 
	`À16_to_˝u
(clp->lines);

962 
˛p
->
˛õ¡_ty≥
 = 
	`À16_to_˝u
(clp->client_type);

963 
¨gv
 = 
	`mÆloc
(
˛p
->
löes
 * (*));

964 
off£t
 = (*
˛p
);

966 
	`d¥öt
(
FD_NET
, "£rvî: %d comm™dÜöê¨gs\n", 
˛p
->
löes
);

968 
i
 = 0; i < 
˛p
->
löes
; i++) {

969 
c¶p
 = 
pdu
 + 
off£t
;

970 
¨gv
[
i
] = (*Ë
c¶p
->
ãxt
;

972 
off£t
 +(*
c¶p
Ë+ 
	`À16_to_˝u
(c¶p->
Àn
);

973 
	`d¥öt
(
FD_NET
, "£rvî: %d: %s\n", 
i
, 
¨gv
[i]);

976 i‡(
	`∑r£_cmd_löe
(
˛p
->
löes
, 
¨gv
, cÕ->
˛õ¡_ty≥
)) {

977 
	`fio_√t_queue_quô
();

978 
	`‰ì
(
¨gv
);

982 
	`‰ì
(
¨gv
);

984 
•du
.
jobs
 = 
	`˝u_to_À32
(
thªad_numbî
);

985 
•du
.
°©_ouçuts
 = 
	`˝u_to_À32
(
°©_numbî
);

987 
	`fio_√t_queue_cmd
(
FIO_NET_CMD_START
, &
•du
, (•du), 
NULL
, 
SK_F_COPY
);

989 
	}
}

991 
	$h™dÀ_¥obe_cmd
(
fio_√t_cmd
 *
cmd
)

993 
cmd_˛õ¡_¥obe_pdu
 *
pdu
 = (cmd_˛õ¡_¥obe_pdu *Ë
cmd
->
∑ylﬂd
;

994 
uöt64_t
 
èg
 = 
cmd
->tag;

995 
cmd_¥obe_ª∂y_pdu
 
¥obe
 = {

996 #ifde‡
CONFIG_BIG_ENDIAN


997 .
bigídün
 = 1,

999 .
os
 = 
FIO_OS
,

1000 .
¨ch
 = 
FIO_ARCH
,

1001 .
bµ
 = (*),

1002 .
˝us
 = 
	`__˝u_to_À32
(
	`˝us_⁄löe
()),

1005 
	`d¥öt
(
FD_NET
, "server: sendingÖrobeÑeply\n");

1007 
	`°r˝y
(
me
, (*Ë
pdu
->
£rvî
);

1009 
	`gëho°«me
((*Ë
¥obe
.
ho°«me
, (probe.hostname));

1010 
	`¢¥ötf
((*Ë
¥obe
.
fio_vîsi⁄
, (probe.fio_version), "%s",

1011 
fio_vîsi⁄_°rög
);

1016 i‡(
has_zlib
 && 
	`À64_to_˝u
(
pdu
->
Êags
Ë& 
FIO_PROBE_FLAG_ZLIB
) {

1017 
¥obe
.
Êags
 = 
	`__˝u_to_À64
(
FIO_PROBE_FLAG_ZLIB
);

1018 
u£_zlib
 = 1;

1020 
¥obe
.
Êags
 = 0;

1021 
u£_zlib
 = 0;

1024  
	`fio_√t_queue_cmd
(
FIO_NET_CMD_PROBE
, &
¥obe
, ’robe), &
èg
, 
SK_F_COPY
);

1025 
	}
}

1027 
	$h™dÀ_£nd_ëa_cmd
(
fio_√t_cmd
 *
cmd
)

1029 
jobs_ëa
 *
je
;

1030 
uöt64_t
 
èg
 = 
cmd
->tag;

1031 
size_t
 
size
;

1032 
i
;

1034 
	`d¥öt
(
FD_NET
, "server sending status\n");

1040 
je
 = 
	`gë_jobs_ëa
(
åue
, &
size
);

1041 i‡(!
je
) {

1042 
size
 = (*
je
);

1043 
je
 = 
	`ˇŒoc
(1, 
size
);

1045 
je
->
ƒ_ru¬ög
 = 
	`˝u_to_À32
(je->nr_running);

1046 
je
->
ƒ_ømp
 = 
	`˝u_to_À32
(je->nr_ramp);

1047 
je
->
ƒ_≥ndög
 = 
	`˝u_to_À32
(je->nr_pending);

1048 
je
->
ƒ_£âög_up
 = 
	`˝u_to_À32
(je->nr_setting_up);

1049 
je
->
fûes_›í
 = 
	`˝u_to_À32
(je->files_open);

1051 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

1052 
je
->
m_øã
[
i
] = 
	`˝u_to_À64
(je->m_rate[i]);

1053 
je
->
t_øã
[
i
] = 
	`˝u_to_À64
(je->t_rate[i]);

1054 
je
->
m_i›s
[
i
] = 
	`˝u_to_À32
(je->m_iops[i]);

1055 
je
->
t_i›s
[
i
] = 
	`˝u_to_À32
(je->t_iops[i]);

1056 
je
->
øã
[
i
] = 
	`˝u_to_À64
(je->rate[i]);

1057 
je
->
i›s
[
i
] = 
	`˝u_to_À32
(je->iops[i]);

1060 
je
->
ñ≠£d_£c
 = 
	`˝u_to_À64
(je->elapsed_sec);

1061 
je
->
ëa_£c
 = 
	`˝u_to_À64
(je->eta_sec);

1062 
je
->
ƒ_thªads
 = 
	`˝u_to_À32
(je->nr_threads);

1063 
je
->
is_pow2
 = 
	`˝u_to_À32
(je->is_pow2);

1064 
je
->
unô_ba£
 = 
	`˝u_to_À32
(je->unit_base);

1067 
	`fio_√t_queue_cmd
(
FIO_NET_CMD_ETA
, 
je
, 
size
, &
èg
, 
SK_F_FREE
);

1069 
	}
}

1071 
	$£nd_upd©e_job_ª∂y
(
uöt64_t
 
__èg
, 
îr‹
)

1073 
uöt64_t
 
èg
 = 
__èg
;

1074 
uöt32_t
 
pdu_îr‹
;

1076 
pdu_îr‹
 = 
	`__˝u_to_À32
(
îr‹
);

1077  
	`fio_√t_queue_cmd
(
FIO_NET_CMD_UPDATE_JOB
, &
pdu_îr‹
, ’du_îr‹), &
èg
, 
SK_F_COPY
);

1078 
	}
}

1080 
	$h™dÀ_upd©e_job_cmd
(
fio_√t_cmd
 *
cmd
)

1082 
cmd_add_job_pdu
 *
pdu
 = (cmd_add_job_pdu *Ë
cmd
->
∑ylﬂd
;

1083 
thªad_d©a
 *
td
;

1084 
uöt32_t
 
äumbî
;

1086 
äumbî
 = 
	`À32_to_˝u
(
pdu
->
thªad_numbî
);

1088 
	`d¥öt
(
FD_NET
, "£rvî: upd©ög o±i⁄†f‹ job %u\n", 
äumbî
);

1090 i‡(!
äumbî
 ||Ånumbî > 
thªad_numbî
) {

1091 
	`£nd_upd©e_job_ª∂y
(
cmd
->
èg
, 
ENODEV
);

1095 
td
 = 
	`äumbî_to_td
(
äumbî
);

1096 
	`c⁄vît_thªad_›ti⁄s_to_˝u
(&
td
->
o
, &
pdu
->
t›
);

1097 
	`£nd_upd©e_job_ª∂y
(
cmd
->
èg
, 0);

1099 
	}
}

1101 
	$h™dÀ_åiggî_cmd
(
fio_√t_cmd
 *
cmd
, 
Êi°_hód
 *
job_li°
)

1103 
cmd_våiggî_pdu
 *
pdu
 = (cmd_våiggî_pdu *Ë
cmd
->
∑ylﬂd
;

1104 *
buf
 = (*Ë
pdu
->
cmd
;

1105 
Æl_io_li°
 *
ªp
;

1106 
size_t
 
sz
;

1108 
pdu
->
Àn
 = 
	`À16_to_˝u
(pdu->len);

1109 
buf
[
pdu
->
Àn
] = '\0';

1111 
ªp
 = 
	`gë_Æl_io_li°
(
IO_LIST_ALL
, &
sz
);

1112 i‡(!
ªp
) {

1113 
Æl_io_li°
 
°©e
;

1115 
°©e
.
thªads
 = 
	`˝u_to_À64
((
uöt64_t
) 0);

1116 
	`fio_√t_queue_cmd
(
FIO_NET_CMD_VTRIGGER
, &
°©e
, (°©e), 
NULL
, 
SK_F_COPY
 | 
SK_F_INLINE
);

1118 
	`fio_√t_queue_cmd
(
FIO_NET_CMD_VTRIGGER
, 
ªp
, 
sz
, 
NULL
, 
SK_F_FREE
 | 
SK_F_INLINE
);

1120 
	`fio_ãrmö©e_thªads
(
TERMINATE_ALL
, TERMINATE_ALL);

1121 
	`fio_£rvî_check_jobs
(
job_li°
);

1122 
	`exec_åiggî
(
buf
);

1124 
	}
}

1126 
	$h™dÀ_comm™d
(
sk_out
 *sk_out, 
Êi°_hód
 *
job_li°
,

1127 
fio_√t_cmd
 *
cmd
)

1129 
ªt
;

1131 
	`d¥öt
(
FD_NET
, "server: got op [%s],Ödu=%u,Åag=%llx\n",

1132 
	`fio_£rvî_›
(
cmd
->
›code
), cmd->
pdu_Àn
,

1133 (Ë
cmd
->
èg
);

1135 
cmd
->
›code
) {

1136 
FIO_NET_CMD_QUIT
:

1137 
	`fio_ãrmö©e_thªads
(
TERMINATE_ALL
, TERMINATE_ALL);

1138 
ªt
 = 0;

1140 
FIO_NET_CMD_EXIT
:

1141 
exô_backíd
 = 
åue
;

1143 
FIO_NET_CMD_LOAD_FILE
:

1144 
ªt
 = 
	`h™dÀ_lﬂd_fûe_cmd
(
cmd
);

1146 
FIO_NET_CMD_JOB
:

1147 
ªt
 = 
	`h™dÀ_job_cmd
(
cmd
);

1149 
FIO_NET_CMD_JOBLINE
:

1150 
ªt
 = 
	`h™dÀ_joblöe_cmd
(
cmd
);

1152 
FIO_NET_CMD_PROBE
:

1153 
ªt
 = 
	`h™dÀ_¥obe_cmd
(
cmd
);

1155 
FIO_NET_CMD_SEND_ETA
:

1156 
ªt
 = 
	`h™dÀ_£nd_ëa_cmd
(
cmd
);

1158 
FIO_NET_CMD_RUN
:

1159 
ªt
 = 
	`h™dÀ_run_cmd
(
sk_out
, 
job_li°
, 
cmd
);

1161 
FIO_NET_CMD_UPDATE_JOB
:

1162 
ªt
 = 
	`h™dÀ_upd©e_job_cmd
(
cmd
);

1164 
FIO_NET_CMD_VTRIGGER
:

1165 
ªt
 = 
	`h™dÀ_åiggî_cmd
(
cmd
, 
job_li°
);

1167 
FIO_NET_CMD_SENDFILE
: {

1168 
cmd_£ndfûe_ª∂y
 *
ö
;

1169 
cmd_ª∂y
 *
ªp
;

1171 
ªp
 = (
cmd_ª∂y
 *Ë(
uöçå_t
Ë
cmd
->
èg
;

1173 
ö
 = (
cmd_£ndfûe_ª∂y
 *Ë
cmd
->
∑ylﬂd
;

1174 
ö
->
size
 = 
	`À32_to_˝u
(in->size);

1175 
ö
->
îr‹
 = 
	`À32_to_˝u
(in->error);

1176 i‡(
ö
->
îr‹
) {

1177 
ªt
 = 1;

1178 
ªp
->
îr‹
 = 
ö
->error;

1180 
ªt
 = 0;

1181 
ªp
->
d©a
 = 
	`smÆloc
(
ö
->
size
);

1182 i‡(!
ªp
->
d©a
) {

1183 
ªt
 = 1;

1184 
ªp
->
îr‹
 = 
ENOMEM
;

1186 
ªp
->
size
 = 
ö
->size;

1187 
	`mem˝y
(
ªp
->
d©a
, 
ö
->d©a, in->
size
);

1190 
	`fio_£m_up
(&
ªp
->
lock
);

1194 
	`log_îr
("fio: unknow¿›code: %s\n", 
	`fio_£rvî_›
(
cmd
->
›code
));

1195 
ªt
 = 1;

1198  
ªt
;

1199 
	}
}

1204 
	$fio_£nd_cmd_ext_pdu
(
sk
, 
uöt16_t
 
›code
, c⁄° *
buf
,

1205 
off_t
 
size
, 
uöt64_t
 
èg
, 
uöt32_t
 
Êags
)

1207 
fio_√t_cmd
 
cmd
;

1208 
iovec
 
iov
[2];

1209 
size_t
 
this_Àn
;

1210 
ªt
;

1212 
iov
[0].
iov_ba£
 = (*Ë&
cmd
;

1213 
iov
[0].
iov_Àn
 = (
cmd
);

1216 
uöt32_t
 
this_Êags
 = 
Êags
;

1218 
this_Àn
 = 
size
;

1219 i‡(
this_Àn
 > 
FIO_SERVER_MAX_FRAGMENT_PDU
)

1220 
this_Àn
 = 
FIO_SERVER_MAX_FRAGMENT_PDU
;

1222 i‡(
this_Àn
 < 
size
)

1223 
this_Êags
 |
FIO_NET_CMD_F_MORE
;

1225 
	`__fio_öô_√t_cmd
(&
cmd
, 
›code
, 
this_Àn
, 
èg
);

1226 
cmd
.
Êags
 = 
	`__˝u_to_À32
(
this_Êags
);

1227 
	`fio_√t_cmd_¸c_pdu
(&
cmd
, 
buf
);

1229 
iov
[1].
iov_ba£
 = (*Ë
buf
;

1230 
iov
[1].
iov_Àn
 = 
this_Àn
;

1232 
ªt
 = 
	`fio_£ndv_d©a
(
sk
, 
iov
, 2);

1233 
size
 -
this_Àn
;

1234 
buf
 +
this_Àn
;

1235 } !
ªt
 && 
size
);

1237  
ªt
;

1238 
	}
}

1240 
	$föish_íåy
(
sk_íåy
 *
íåy
)

1242 i‡(
íåy
->
Êags
 & 
SK_F_FREE
)

1243 
	`‰ì
(
íåy
->
buf
);

1244 i‡(
íåy
->
Êags
 & 
SK_F_COPY
)

1245 
	`s‰ì
(
íåy
->
buf
);

1247 
	`s‰ì
(
íåy
);

1248 
	}
}

1250 
	$íåy_£t_Êags
(
sk_íåy
 *
íåy
, 
Êi°_hód
 *
li°
,

1251 *
Êags
)

1253 i‡(!
	`Êi°_em±y
(
li°
))

1254 *
Êags
 = 
FIO_NET_CMD_F_MORE
;

1256 *
Êags
 = 0;

1257 
	}
}

1259 
	$£nd_vec_íåy
(
sk_out
 *sk_out, 
sk_íåy
 *
fú°
)

1261 
Êags
;

1262 
ªt
;

1264 
	`íåy_£t_Êags
(
fú°
, &fú°->
√xt
, &
Êags
);

1266 
ªt
 = 
	`fio_£nd_cmd_ext_pdu
(
sk_out
->
sk
, 
fú°
->
›code
, fú°->
buf
,

1267 
fú°
->
size
, fú°->
èg
, 
Êags
);

1269 !
	`Êi°_em±y
(&
fú°
->
√xt
)) {

1270 
sk_íåy
 *
√xt
;

1272 
√xt
 = 
	`Êi°_fú°_íåy
(&
fú°
->√xt, 
sk_íåy
, 
li°
);

1273 
	`Êi°_dñ_öô
(&
√xt
->
li°
);

1275 
	`íåy_£t_Êags
(
√xt
, &
fú°
->√xt, &
Êags
);

1277 
ªt
 +
	`fio_£nd_cmd_ext_pdu
(
sk_out
->
sk
, 
√xt
->
›code
,Çext->
buf
,

1278 
√xt
->
size
,Çext->
èg
, 
Êags
);

1279 
	`föish_íåy
(
√xt
);

1282  
ªt
;

1283 
	}
}

1285 
	$h™dÀ_sk_íåy
(
sk_out
 *sk_out, 
sk_íåy
 *
íåy
)

1287 
ªt
;

1289 
	`fio_£m_down
(&
sk_out
->
xmô
);

1291 i‡(
íåy
->
Êags
 & 
SK_F_VEC
)

1292 
ªt
 = 
	`£nd_vec_íåy
(
sk_out
, 
íåy
);

1293 i‡(
íåy
->
Êags
 & 
SK_F_SIMPLE
) {

1294 
ªt
 = 
	`fio_√t_£nd_sim∂e_cmd
(
sk_out
->
sk
, 
íåy
->
›code
,

1295 
íåy
->
èg
, 
NULL
);

1297 
ªt
 = 
	`fio_√t_£nd_cmd
(
sk_out
->
sk
, 
íåy
->
›code
,É¡ry->
buf
,

1298 
íåy
->
size
, &íåy->
èg
, 
NULL
);

1301 
	`fio_£m_up
(&
sk_out
->
xmô
);

1303 i‡(
ªt
)

1304 
	`log_îr
("fio: faûed h™dlög cmd %s\n", 
	`fio_£rvî_›
(
íåy
->
›code
));

1306 
	`föish_íåy
(
íåy
);

1307  
ªt
;

1308 
	}
}

1310 
	$h™dÀ_xmôs
(
sk_out
 *sk_out)

1312 
sk_íåy
 *
íåy
;

1313 
	`FLIST_HEAD
(
li°
);

1314 
ªt
 = 0;

1316 
	`sk_lock
(
sk_out
);

1317 i‡(
	`Êi°_em±y
(&
sk_out
->
li°
)) {

1318 
	`sk_u∆ock
(
sk_out
);

1322 
	`Êi°_•li˚_öô
(&
sk_out
->
li°
, &list);

1323 
	`sk_u∆ock
(
sk_out
);

1325 !
	`Êi°_em±y
(&
li°
)) {

1326 
íåy
 = 
	`Êi°_fú°_íåy
(&
li°
, 
sk_íåy
,Üist);

1327 
	`Êi°_dñ
(&
íåy
->
li°
);

1328 
ªt
 +
	`h™dÀ_sk_íåy
(
sk_out
, 
íåy
);

1331  
ªt
;

1332 
	}
}

1334 
	$h™dÀ_c⁄√˘i⁄
(
sk_out
 *sk_out)

1336 
fio_√t_cmd
 *
cmd
 = 
NULL
;

1337 
	`FLIST_HEAD
(
job_li°
);

1338 
ªt
 = 0;

1340 
	`ª£t_fio_°©e
();

1343 !
exô_backíd
) {

1344 
pﬁlfd
 
pfd
 = {

1345 .
fd
 = 
sk_out
->
sk
,

1346 .
evíts
 = 
POLLIN
,

1350 
timeout
 = 1000;

1352 i‡(!
	`Êi°_em±y
(&
job_li°
))

1353 
timeout
 = 100;

1355 
	`h™dÀ_xmôs
(
sk_out
);

1357 
ªt
 = 
	`pﬁl
(&
pfd
, 1, 0);

1358 i‡(
ªt
 < 0) {

1359 i‡(
î∫o
 =
EINTR
)

1361 
	`log_îr
("fio:Öﬁl: %s\n", 
	`°ªº‹
(
î∫o
));

1363 } i‡(!
ªt
) {

1364 
	`fio_£rvî_check_jobs
(&
job_li°
);

1365 
	`fio_£m_down_timeout
(&
sk_out
->
waô
, 
timeout
);

1369 i‡(
pfd
.
ªvíts
 & 
POLLIN
)

1371 i‡(
pfd
.
ªvíts
 & (
POLLERR
|
POLLHUP
)) {

1372 
ªt
 = 1;

1375 } !
exô_backíd
);

1377 
	`fio_£rvî_check_jobs
(&
job_li°
);

1379 i‡(
ªt
 < 0)

1382 i‡(
pfd
.
ªvíts
 & 
POLLIN
)

1383 
cmd
 = 
	`fio_√t_ªcv_cmd
(
sk_out
->
sk
, 
åue
);

1384 i‡(!
cmd
) {

1385 
ªt
 = -1;

1389 
ªt
 = 
	`h™dÀ_comm™d
(
sk_out
, &
job_li°
, 
cmd
);

1390 i‡(
ªt
)

1393 
	`‰ì
(
cmd
);

1394 
cmd
 = 
NULL
;

1397 i‡(
cmd
)

1398 
	`‰ì
(
cmd
);

1400 
	`h™dÀ_xmôs
(
sk_out
);

1402 
	`˛o£
(
sk_out
->
sk
);

1403 
sk_out
->
sk
 = -1;

1404 
	`__sk_out_dr›
(
sk_out
);

1405 
	`_exô
(
ªt
);

1406 
	}
}

1411 
	$gë_my_addr_°r
(
sk
)

1413 
sockaddr_ö6
 
myaddr6
 = { 0, };

1414 
sockaddr_ö
 
myaddr4
 = { 0, };

1415 
sockaddr
 *
sockaddr_p
;

1416 *
√t_addr
;

1417 
sockÀn_t
 
Àn
;

1418 
ªt
;

1420 i‡(
u£_ùv6
) {

1421 
Àn
 = (
myaddr6
);

1422 
sockaddr_p
 = (
sockaddr
 * )&
myaddr6
;

1423 
√t_addr
 = (* )&
myaddr6
.
sö6_addr
;

1425 
Àn
 = (
myaddr4
);

1426 
sockaddr_p
 = (
sockaddr
 * )&
myaddr4
;

1427 
√t_addr
 = (* )&
myaddr4
.
sö_addr
;

1430 
ªt
 = 
	`gësock«me
(
sk
, 
sockaddr_p
, &
Àn
);

1431 i‡(
ªt
) {

1432 
	`log_îr
("fio: gësock«me: %s\n", 
	`°ªº‹
(
î∫o
));

1436 i‡(!
	`öë_¡›
(
u£_ùv6
?
AF_INET6
:
AF_INET
, 
√t_addr
, 
˛õ¡_sockaddr_°r
, 
INET6_ADDRSTRLEN
 - 1)) {

1437 
	`log_îr
("inet_ntop: failedÅo convertáddrÅo string\n");

1441 
	`d¥öt
(
FD_NET
, "fiÿ£rvî boundÅÿadd∏%s\n", 
˛õ¡_sockaddr_°r
);

1443 
	}
}

1445 #ifde‡
WIN32


1446 
	$h™dÀ_c⁄√˘i⁄_¥o˚ss
()

1448 
WSAPROTOCOL_INFO
 
¥Ÿocﬁ_öfo
;

1449 
DWORD
 
byãs_ªad
;

1450 
HANDLE
 
hpùe
;

1451 
sk
;

1452 
sk_out
 *sk_out;

1453 
ªt
;

1454 *
msg
 = (*) "connected";

1456 
	`log_öfo
("£rvîÉ¡îác˚±Üo›. Pro˚ssID %d\n", 
	`GëCuºítPro˚ssId
());

1458 
hpùe
 = 
	`Cª©eFûe
(

1459 
fio_£rvî_pùe_«me
,

1460 
GENERIC_READ
 | 
GENERIC_WRITE
,

1461 0, 
NULL
,

1462 
OPEN_EXISTING
,

1463 0, 
NULL
);

1465 i‡(
hpùe
 =
INVALID_HANDLE_VALUE
) {

1466 
	`log_îr
("couldnt openÖipe %sÉrror %lu\n",

1467 
fio_£rvî_pùe_«me
, 
	`GëLa°Eº‹
());

1471 i‡(!
	`RódFûe
(
hpùe
, &
¥Ÿocﬁ_öfo
, ’rŸocﬁ_öfo), &
byãs_ªad
, 
NULL
)) {

1472 
	`log_îr
("could¡ÑódÖò‰omÖùê%†îr‹ %lu\n", 
fio_£rvî_pùe_«me
,

1473 
	`GëLa°Eº‹
());

1476 i‡(
u£_ùv6
)

1477 
sk
 = 
	`WSASockë
(
AF_INET6
, 
SOCK_STREAM
, 0, &
¥Ÿocﬁ_öfo
, 0, 0);

1479 
sk
 = 
	`WSASockë
(
AF_INET
, 
SOCK_STREAM
, 0, &
¥Ÿocﬁ_öfo
, 0, 0);

1481 
sk_out
 = 
	`sˇŒoc
(1, (*sk_out));

1482 i‡(!
sk_out
) {

1483 
	`Clo£H™dÀ
(
hpùe
);

1484 
	`˛o£
(
sk
);

1488 
sk_out
->
sk
 = sk;

1489 
sk_out
->
hPro˚ss
 = 
INVALID_HANDLE_VALUE
;

1490 
	`INIT_FLIST_HEAD
(&
sk_out
->
li°
);

1491 
	`__fio_£m_öô
(&
sk_out
->
lock
, 
FIO_SEM_UNLOCKED
);

1492 
	`__fio_£m_öô
(&
sk_out
->
waô
, 
FIO_SEM_LOCKED
);

1493 
	`__fio_£m_öô
(&
sk_out
->
xmô
, 
FIO_SEM_UNLOCKED
);

1495 
	`gë_my_addr_°r
(
sk
);

1497 i‡(!
	`WrôeFûe
(
hpùe
, 
msg
, 
	`°æí
(msg), 
NULL
, NULL)) {

1498 
	`log_îr
("couldnt writeÖipe\n");

1499 
	`˛o£
(
sk
);

1502 
	`Clo£H™dÀ
(
hpùe
);

1504 
	`sk_out_assign
(
sk_out
);

1506 
ªt
 = 
	`h™dÀ_c⁄√˘i⁄
(
sk_out
);

1507 
	`__sk_out_dr›
(
sk_out
);

1508  
ªt
;

1509 
	}
}

1512 
	$ac˚±_lo›
(
li°í_sk
)

1514 
sockaddr_ö
 
addr
;

1515 
sockaddr_ö6
 
addr6
;

1516 
sockÀn_t
 
Àn
 = 
u£_ùv6
 ? (
addr6
Ë: (
addr
);

1517 
pﬁlfd
 
pfd
;

1518 
ªt
 = 0, 
sk
, 
exôvÆ
 = 0;

1519 
	`FLIST_HEAD
(
c⁄n_li°
);

1521 
	`d¥öt
(
FD_NET
, "serverÉnterácceptÜoop\n");

1523 
	`fio_£t_fd_n⁄blockög
(
li°í_sk
, "server");

1525 !
exô_backíd
) {

1526 
sk_out
 *sk_out;

1527 c⁄° *
‰om
;

1528 
buf
[64];

1529 #ifde‡
WIN32


1530 
HANDLE
 
hPro˚ss
;

1532 
pid_t
 
pid
;

1534 
pfd
.
fd
 = 
li°í_sk
;

1535 
pfd
.
evíts
 = 
POLLIN
;

1537 
timeout
 = 1000;

1539 i‡(!
	`Êi°_em±y
(&
c⁄n_li°
))

1540 
timeout
 = 100;

1542 
ªt
 = 
	`pﬁl
(&
pfd
, 1, 
timeout
);

1543 i‡(
ªt
 < 0) {

1544 i‡(
î∫o
 =
EINTR
)

1546 
	`log_îr
("fio:Öﬁl: %s\n", 
	`°ªº‹
(
î∫o
));

1548 } i‡(!
ªt
) {

1549 
	`fio_£rvî_check_c⁄ns
(&
c⁄n_li°
);

1553 i‡(
pfd
.
ªvíts
 & 
POLLIN
)

1555 } !
exô_backíd
);

1557 
	`fio_£rvî_check_c⁄ns
(&
c⁄n_li°
);

1559 i‡(
exô_backíd
 || 
ªt
 < 0)

1562 i‡(
u£_ùv6
)

1563 
sk
 = 
	`ac˚±
(
li°í_sk
, (
sockaddr
 *Ë&
addr6
, &
Àn
);

1565 
sk
 = 
	`ac˚±
(
li°í_sk
, (
sockaddr
 *Ë&
addr
, &
Àn
);

1567 i‡(
sk
 < 0) {

1568 
	`log_îr
("fio:ác˚±: %s\n", 
	`°ªº‹
(
î∫o
));

1572 i‡(
u£_ùv6
)

1573 
‰om
 = 
	`öë_¡›
(
AF_INET6
, (
sockaddr
 *Ë&
addr6
.
sö6_addr
, 
buf
, (buf));

1575 
‰om
 = 
	`öë_¡›
(
AF_INET
, (
sockaddr
 *Ë&
addr
.
sö_addr
, 
buf
, (buf));

1577 
	`d¥öt
(
FD_NET
, "£rvî: c⁄√˘ from %s\n", 
‰om
);

1579 
sk_out
 = 
	`sˇŒoc
(1, (*sk_out));

1580 i‡(!
sk_out
) {

1581 
	`˛o£
(
sk
);

1585 
sk_out
->
sk
 = sk;

1586 
	`INIT_FLIST_HEAD
(&
sk_out
->
li°
);

1587 
	`__fio_£m_öô
(&
sk_out
->
lock
, 
FIO_SEM_UNLOCKED
);

1588 
	`__fio_£m_öô
(&
sk_out
->
waô
, 
FIO_SEM_LOCKED
);

1589 
	`__fio_£m_öô
(&
sk_out
->
xmô
, 
FIO_SEM_UNLOCKED
);

1591 #ifde‡
WIN32


1592 
hPro˚ss
 = 
	`wödows_h™dÀ_c⁄√˘i⁄
(
hjob
, 
sk
);

1593 i‡(
hPro˚ss
 =
INVALID_HANDLE_VALUE
)

1595 
sk_out
->
hPro˚ss
 = hProcess;

1596 
	`fio_£rvî_add_c⁄n_pid
(&
c⁄n_li°
, 
hPro˚ss
);

1598 
pid
 = 
	`f‹k
();

1599 i‡(
pid
) {

1600 
	`˛o£
(
sk
);

1601 
	`fio_£rvî_add_c⁄n_pid
(&
c⁄n_li°
, 
pid
);

1606 
	`gë_my_addr_°r
(
sk
);

1612 
	`sk_out_assign
(
sk_out
);

1613 
	`h™dÀ_c⁄√˘i⁄
(
sk_out
);

1617  
exôvÆ
;

1618 
	}
}

1620 
	$fio_£rvî_ãxt_ouçut
(
Àvñ
, c⁄° *
buf
, 
size_t
 
Àn
)

1622 
sk_out
 *sk_ouà
	`±hªad_gë•ecific
(
sk_out_key
);

1623 
cmd_ãxt_pdu
 *
pdu
;

1624 
éí
;

1625 
timevÆ
 
tv
;

1627 i‡(!
sk_out
 || sk_out->
sk
 == -1)

1630 
éí
 = (*
pdu
Ë+ 
Àn
;

1631 
pdu
 = 
	`mÆloc
(
éí
);

1633 
pdu
->
Àvñ
 = 
	`__˝u_to_À32
(level);

1634 
pdu
->
buf_Àn
 = 
	`__˝u_to_À32
(
Àn
);

1636 
	`gëtimeofday
(&
tv
, 
NULL
);

1637 
pdu
->
log_£c
 = 
	`__˝u_to_À64
(
tv
.
tv_£c
);

1638 
pdu
->
log_u£c
 = 
	`__˝u_to_À64
(
tv
.
tv_u£c
);

1640 
	`mem˝y
(
pdu
->
buf
, buf, 
Àn
);

1642 
	`fio_√t_queue_cmd
(
FIO_NET_CMD_TEXT
, 
pdu
, 
éí
, 
NULL
, 
SK_F_COPY
);

1643 
	`‰ì
(
pdu
);

1644  
Àn
;

1645 
	}
}

1647 
	$c⁄vît_io_°©
(
io_°©
 *
d°
, io_°© *
§c
)

1649 
d°
->
max_vÆ
 = 
	`˝u_to_À64
(
§c
->max_val);

1650 
d°
->
mö_vÆ
 = 
	`˝u_to_À64
(
§c
->min_val);

1651 
d°
->
ßm∂es
 = 
	`˝u_to_À64
(
§c
->samples);

1656 
d°
->
món
.
u
.
i
 = 
	`˝u_to_À64
(
	`fio_doubÀ_to_uöt64
(
§c
->món.u.
f
));

1657 
d°
->
S
.
u
.
i
 = 
	`˝u_to_À64
(
	`fio_doubÀ_to_uöt64
(
§c
->S.u.
f
));

1658 
	}
}

1660 
	$c⁄vît_gs
(
group_run_°©s
 *
d°
, group_run_°©†*
§c
)

1662 
i
;

1664 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

1665 
d°
->
max_run
[
i
] = 
	`˝u_to_À64
(
§c
->max_run[i]);

1666 
d°
->
mö_run
[
i
] = 
	`˝u_to_À64
(
§c
->min_run[i]);

1667 
d°
->
max_bw
[
i
] = 
	`˝u_to_À64
(
§c
->max_bw[i]);

1668 
d°
->
mö_bw
[
i
] = 
	`˝u_to_À64
(
§c
->min_bw[i]);

1669 
d°
->
iobyãs
[
i
] = 
	`˝u_to_À64
(
§c
->iobytes[i]);

1670 
d°
->
agg
[
i
] = 
	`˝u_to_À64
(
§c
->agg[i]);

1673 
d°
->
kb_ba£
 = 
	`˝u_to_À32
(
§c
->kb_base);

1674 
d°
->
unô_ba£
 = 
	`˝u_to_À32
(
§c
->unit_base);

1675 
d°
->
groupid
 = 
	`˝u_to_À32
(
§c
->groupid);

1676 
d°
->
unifõd_rw_ªp
 = 
	`˝u_to_À32
(
§c
->unified_rw_rep);

1677 
d°
->
sig_figs
 = 
	`˝u_to_À32
(
§c
->sig_figs);

1678 
	}
}

1684 
	$fio_£rvî_£nd_ts
(
thªad_°©
 *
ts
, 
group_run_°©s
 *
rs
)

1686 
cmd_ts_pdu
 
p
;

1687 
i
, 
j
, 
k
;

1688 
size_t
 
˛©_¥io_°©s_exåa_size
 = 0;

1689 
size_t
 
ss_exåa_size
 = 0;

1690 
size_t
 
exãnded_buf_size
 = 0;

1691 *
exãnded_buf
;

1692 *
exãnded_buf_wp
;

1694 
	`d¥öt
(
FD_NET
, "server sendingÉnd stats\n");

1696 
	`mem£t
(&
p
, 0, (p));

1698 
	`¢¥ötf
(
p
.
ts
.
«me
, (p.ts.name), "%s",Ås->name);

1699 
	`¢¥ötf
(
p
.
ts
.
vîr‹
, (p.ts.verror), "%s",Ås->verror);

1700 
	`¢¥ötf
(
p
.
ts
.
des¸ùti⁄
, (p.ts.description), "%s",

1701 
ts
->
des¸ùti⁄
);

1703 
p
.
ts
.
îr‹
 = 
	`˝u_to_À32
(ts->error);

1704 
p
.
ts
.
thªad_numbî
 = 
	`˝u_to_À32
(ts->thread_number);

1705 
p
.
ts
.
groupid
 = 
	`˝u_to_À32
(ts->groupid);

1706 
p
.
ts
.
pid
 = 
	`˝u_to_À32
(ts->pid);

1707 
p
.
ts
.
membîs
 = 
	`˝u_to_À32
(ts->members);

1708 
p
.
ts
.
unifõd_rw_ªp
 = 
	`˝u_to_À32
(ts->unified_rw_rep);

1709 
p
.
ts
.
i›rio
 = 
	`˝u_to_À32
(ts->ioprio);

1710 
p
.
ts
.
dißbÀ_¥io_°©
 = 
	`˝u_to_À32
(ts->disable_prio_stat);

1712 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

1713 
	`c⁄vît_io_°©
(&
p
.
ts
.
˛©_°©
[
i
], &ts->clat_stat[i]);

1714 
	`c⁄vît_io_°©
(&
p
.
ts
.
¶©_°©
[
i
], &ts->slat_stat[i]);

1715 
	`c⁄vît_io_°©
(&
p
.
ts
.
œt_°©
[
i
], &ts->lat_stat[i]);

1716 
	`c⁄vît_io_°©
(&
p
.
ts
.
bw_°©
[
i
], &ts->bw_stat[i]);

1717 
	`c⁄vît_io_°©
(&
p
.
ts
.
i›s_°©
[
i
], &ts->iops_stat[i]);

1719 
	`c⁄vît_io_°©
(&
p
.
ts
.
sync_°©
, &ts->sync_stat);

1721 
p
.
ts
.
u§_time
 = 
	`˝u_to_À64
(ts->usr_time);

1722 
p
.
ts
.
sys_time
 = 
	`˝u_to_À64
(ts->sys_time);

1723 
p
.
ts
.
˘x
 = 
	`˝u_to_À64
(ts->ctx);

1724 
p
.
ts
.
möf
 = 
	`˝u_to_À64
(ts->minf);

1725 
p
.
ts
.
majf
 = 
	`˝u_to_À64
(ts->majf);

1726 
p
.
ts
.
˛©_≥r˚¡ûes
 = 
	`˝u_to_À32
(ts->clat_percentiles);

1727 
p
.
ts
.
œt_≥r˚¡ûes
 = 
	`˝u_to_À32
(ts->lat_percentiles);

1728 
p
.
ts
.
¶©_≥r˚¡ûes
 = 
	`˝u_to_À32
(ts->slat_percentiles);

1729 
p
.
ts
.
≥r˚¡ûe_¥ecisi⁄
 = 
	`˝u_to_À64
(ts->percentile_precision);

1731 
i
 = 0; i < 
FIO_IO_U_LIST_MAX_LEN
; i++) {

1732 
fio_Â64_t
 *
§c
 = &
ts
->
≥r˚¡ûe_li°
[
i
];

1733 
fio_Â64_t
 *
d°
 = &
p
.
ts
.
≥r˚¡ûe_li°
[
i
];

1735 
d°
->
u
.
i
 = 
	`˝u_to_À64
(
	`fio_doubÀ_to_uöt64
(
§c
->u.
f
));

1738 
i
 = 0; i < 
FIO_IO_U_MAP_NR
; i++) {

1739 
p
.
ts
.
io_u_m≠
[
i
] = 
	`˝u_to_À64
(ts->io_u_map[i]);

1740 
p
.
ts
.
io_u_submô
[
i
] = 
	`˝u_to_À64
(ts->io_u_submit[i]);

1741 
p
.
ts
.
io_u_com∂ëe
[
i
] = 
	`˝u_to_À64
(ts->io_u_complete[i]);

1744 
i
 = 0; i < 
FIO_IO_U_LAT_N_NR
; i++)

1745 
p
.
ts
.
io_u_œt_n
[
i
] = 
	`˝u_to_À64
(ts->io_u_lat_n[i]);

1746 
i
 = 0; i < 
FIO_IO_U_LAT_U_NR
; i++)

1747 
p
.
ts
.
io_u_œt_u
[
i
] = 
	`˝u_to_À64
(ts->io_u_lat_u[i]);

1748 
i
 = 0; i < 
FIO_IO_U_LAT_M_NR
; i++)

1749 
p
.
ts
.
io_u_œt_m
[
i
] = 
	`˝u_to_À64
(ts->io_u_lat_m[i]);

1751 
i
 = 0; i < 
FIO_LAT_CNT
; i++)

1752 
j
 = 0; j < 
DDIR_RWDIR_CNT
; j++)

1753 
k
 = 0; k < 
FIO_IO_U_PLAT_NR
; k++)

1754 
p
.
ts
.
io_u_∂©
[
i
][
j
][
k
] = 
	`˝u_to_À64
(ts->io_u_plat[i][j][k]);

1756 
j
 = 0; j < 
FIO_IO_U_PLAT_NR
; j++)

1757 
p
.
ts
.
io_u_sync_∂©
[
j
] = 
	`˝u_to_À64
(ts->io_u_sync_plat[j]);

1759 
i
 = 0; i < 
DDIR_RWDIR_SYNC_CNT
; i++)

1760 
p
.
ts
.
tŸÆ_io_u
[
i
] = 
	`˝u_to_À64
(ts->total_io_u[i]);

1762 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

1763 
p
.
ts
.
sh‹t_io_u
[
i
] = 
	`˝u_to_À64
(ts->short_io_u[i]);

1764 
p
.
ts
.
dr›_io_u
[
i
] = 
	`˝u_to_À64
(ts->drop_io_u[i]);

1767 
p
.
ts
.
tŸÆ_submô
 = 
	`˝u_to_À64
(ts->total_submit);

1768 
p
.
ts
.
tŸÆ_com∂ëe
 = 
	`˝u_to_À64
(ts->total_complete);

1769 
p
.
ts
.
ƒ_z⁄e_ª£ts
 = 
	`˝u_to_À64
(ts->nr_zone_resets);

1771 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

1772 
p
.
ts
.
io_byãs
[
i
] = 
	`˝u_to_À64
(ts->io_bytes[i]);

1773 
p
.
ts
.
ru¡ime
[
i
] = 
	`˝u_to_À64
(ts->runtime[i]);

1776 
p
.
ts
.
tŸÆ_run_time
 = 
	`˝u_to_À64
(ts->total_run_time);

1777 
p
.
ts
.
c⁄töue_⁄_îr‹
 = 
	`˝u_to_À16
(ts->continue_on_error);

1778 
p
.
ts
.
tŸÆ_îr_cou¡
 = 
	`˝u_to_À64
(ts->total_err_count);

1779 
p
.
ts
.
fú°_îr‹
 = 
	`˝u_to_À32
(ts->first_error);

1780 
p
.
ts
.
kb_ba£
 = 
	`˝u_to_À32
(ts->kb_base);

1781 
p
.
ts
.
unô_ba£
 = 
	`˝u_to_À32
(ts->unit_base);

1783 
p
.
ts
.
œãncy_dïth
 = 
	`˝u_to_À32
(ts->latency_depth);

1784 
p
.
ts
.
œãncy_èrgë
 = 
	`˝u_to_À64
(ts->latency_target);

1785 
p
.
ts
.
œãncy_wödow
 = 
	`˝u_to_À64
(ts->latency_window);

1786 
p
.
ts
.
œãncy_≥r˚¡ûe
.
u
.
i
 = 
	`˝u_to_À64
(
	`fio_doubÀ_to_uöt64
—s->œãncy_≥r˚¡ûe.u.
f
));

1788 
p
.
ts
.
sig_figs
 = 
	`˝u_to_À32
(ts->sig_figs);

1790 
p
.
ts
.
ƒ_block_öfos
 = 
	`˝u_to_À64
(ts->nr_block_infos);

1791 
i
 = 0; i < 
p
.
ts
.
ƒ_block_öfos
; i++)

1792 
p
.
ts
.
block_öfos
[
i
] = 
	`˝u_to_À32
(ts->block_infos[i]);

1794 
p
.
ts
.
ss_dur
 = 
	`˝u_to_À64
(ts->ss_dur);

1795 
p
.
ts
.
ss_°©e
 = 
	`˝u_to_À32
(ts->ss_state);

1796 
p
.
ts
.
ss_hód
 = 
	`˝u_to_À32
(ts->ss_head);

1797 
p
.
ts
.
ss_limô
.
u
.
i
 = 
	`˝u_to_À64
(
	`fio_doubÀ_to_uöt64
—s->ss_limô.u.
f
));

1798 
p
.
ts
.
ss_¶›e
.
u
.
i
 = 
	`˝u_to_À64
(
	`fio_doubÀ_to_uöt64
—s->ss_¶›e.u.
f
));

1799 
p
.
ts
.
ss_devüti⁄
.
u
.
i
 = 
	`˝u_to_À64
(
	`fio_doubÀ_to_uöt64
—s->ss_devüti⁄.u.
f
));

1800 
p
.
ts
.
ss_¸ôîi⁄
.
u
.
i
 = 
	`˝u_to_À64
(
	`fio_doubÀ_to_uöt64
—s->ss_¸ôîi⁄.u.
f
));

1802 
p
.
ts
.
ˇchehô
 = 
	`˝u_to_À64
(ts->cachehit);

1803 
p
.
ts
.
ˇchemiss
 = 
	`˝u_to_À64
(ts->cachemiss);

1805 
	`c⁄vît_gs
(&
p
.
rs
,Ñs);

1807 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

1808 i‡(
ts
->
ƒ_˛©_¥io
[
i
])

1809 
˛©_¥io_°©s_exåa_size
 +
ts
->
ƒ_˛©_¥io
[
i
] * (*ts->
˛©_¥io
[i]);

1811 
exãnded_buf_size
 +
˛©_¥io_°©s_exåa_size
;

1813 
	`d¥öt
(
FD_NET
, "ts->ss_°©ê%d\n", 
ts
->
ss_°©e
);

1814 i‡(
ts
->
ss_°©e
 & 
FIO_SS_DATA
)

1815 
ss_exåa_size
 = 2 * 
ts
->
ss_dur
 * (
uöt64_t
);

1817 
exãnded_buf_size
 +
ss_exåa_size
;

1818 i‡(!
exãnded_buf_size
) {

1819 
	`fio_√t_queue_cmd
(
FIO_NET_CMD_TS
, &
p
, ’), 
NULL
, 
SK_F_COPY
);

1823 
exãnded_buf_size
 +(
p
);

1824 
exãnded_buf
 = 
	`ˇŒoc
(1, 
exãnded_buf_size
);

1825 i‡(!
exãnded_buf
) {

1826 
	`log_îr
("fio: failedÅoállocate FIO_NET_CMD_TS buffer\n");

1830 
	`mem˝y
(
exãnded_buf
, &
p
, (p));

1831 
exãnded_buf_wp
 = (
cmd_ts_pdu
 *)
exãnded_buf
 + 1;

1833 i‡(
˛©_¥io_°©s_exåa_size
) {

1834 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

1835 
˛©_¥io_°©
 *
¥io
 = (˛©_¥io_°© *Ë
exãnded_buf_wp
;

1837 
j
 = 0; j < 
ts
->
ƒ_˛©_¥io
[
i
]; j++) {

1838 
k
 = 0; k < 
FIO_IO_U_PLAT_NR
; k++)

1839 
¥io
->
io_u_∂©
[
k
] =

1840 
	`˝u_to_À64
(
ts
->
˛©_¥io
[
i
][
j
].
io_u_∂©
[
k
]);

1841 
	`c⁄vît_io_°©
(&
¥io
->
˛©_°©
,

1842 &
ts
->
˛©_¥io
[
i
][
j
].
˛©_°©
);

1843 
¥io
->
i›rio
 = 
	`˝u_to_À32
(
ts
->
˛©_¥io
[
i
][
j
].ioprio);

1844 
¥io
++;

1847 i‡(
ts
->
ƒ_˛©_¥io
[
i
]) {

1848 
uöt64_t
 
off£t
 = (*)
exãnded_buf_wp
 - (*)
exãnded_buf
;

1849 
cmd_ts_pdu
 *
±r
 = 
exãnded_buf
;

1851 
±r
->
ts
.
˛©_¥io_off£t
[
i
] = 
	`˝u_to_À64
(
off£t
);

1852 
±r
->
ts
.
ƒ_˛©_¥io
[
i
] = 
	`˝u_to_À32
(ts->nr_clat_prio[i]);

1855 
exãnded_buf_wp
 = 
¥io
;

1859 i‡(
ss_exåa_size
) {

1860 
uöt64_t
 *
ss_i›s
, *
ss_bw
;

1861 
uöt64_t
 
off£t
;

1862 
cmd_ts_pdu
 *
±r
 = 
exãnded_buf
;

1864 
	`d¥öt
(
FD_NET
, "server sending steadystateÑing buffers\n");

1867 
ss_i›s
 = (
uöt64_t
 *Ë
exãnded_buf_wp
;

1868 
i
 = 0; i < 
ts
->
ss_dur
; i++)

1869 
ss_i›s
[
i
] = 
	`˝u_to_À64
(
ts
->
ss_i›s_d©a
[i]);

1871 
off£t
 = (*)
exãnded_buf_wp
 - (*)
exãnded_buf
;

1872 
±r
->
ts
.
ss_i›s_d©a_off£t
 = 
	`˝u_to_À64
(
off£t
);

1873 
exãnded_buf_wp
 = 
ss_i›s
 + (Ë
ts
->
ss_dur
;

1876 
ss_bw
 = 
exãnded_buf_wp
;

1877 
i
 = 0; i < 
ts
->
ss_dur
; i++)

1878 
ss_bw
[
i
] = 
	`˝u_to_À64
(
ts
->
ss_bw_d©a
[i]);

1880 
off£t
 = (*)
exãnded_buf_wp
 - (*)
exãnded_buf
;

1881 
±r
->
ts
.
ss_bw_d©a_off£t
 = 
	`˝u_to_À64
(
off£t
);

1882 
exãnded_buf_wp
 = 
ss_bw
 + (Ë
ts
->
ss_dur
;

1885 
	`fio_√t_queue_cmd
(
FIO_NET_CMD_TS
, 
exãnded_buf
, 
exãnded_buf_size
, 
NULL
, 
SK_F_COPY
);

1886 
	`‰ì
(
exãnded_buf
);

1887 
	}
}

1889 
	$fio_£rvî_£nd_gs
(
group_run_°©s
 *
rs
)

1891 
group_run_°©s
 
gs
;

1893 
	`d¥öt
(
FD_NET
, "server sending groupÑun stats\n");

1895 
	`c⁄vît_gs
(&
gs
, 
rs
);

1896 
	`fio_√t_queue_cmd
(
FIO_NET_CMD_GS
, &
gs
, (gs), 
NULL
, 
SK_F_COPY
);

1897 
	}
}

1899 
	$fio_£rvî_£nd_job_›ti⁄s
(
Êi°_hód
 *
›t_li°
,

1900 
gid
)

1902 
cmd_job_›ti⁄
 
pdu
;

1903 
Êi°_hód
 *
íåy
;

1905 i‡(
	`Êi°_em±y
(
›t_li°
))

1908 
	`Êi°_f‹_óch
(
íåy
, 
›t_li°
) {

1909 
¥öt_›ti⁄
 *
p
;

1910 
size_t
 
Àn
;

1912 
p
 = 
	`Êi°_íåy
(
íåy
, 
¥öt_›ti⁄
, 
li°
);

1913 
	`mem£t
(&
pdu
, 0, (pdu));

1915 i‡(
gid
 == -1U) {

1916 
pdu
.
globÆ
 = 
	`__˝u_to_À16
(1);

1917 
pdu
.
groupid
 = 0;

1919 
pdu
.
globÆ
 = 0;

1920 
pdu
.
groupid
 = 
	`˝u_to_À32
(
gid
);

1922 
Àn
 = 
	`°æí
(
p
->
«me
);

1923 i‡(
Àn
 >(
pdu
.
«me
)) {

1924 
Àn
 = (
pdu
.
«me
) - 1;

1925 
pdu
.
åunˇãd
 = 
	`__˝u_to_À16
(1);

1927 
	`mem˝y
(
pdu
.
«me
, 
p
->«me, 
Àn
);

1928 i‡(
p
->
vÆue
) {

1929 
Àn
 = 
	`°æí
(
p
->
vÆue
);

1930 i‡(
Àn
 >(
pdu
.
vÆue
)) {

1931 
Àn
 = (
pdu
.
vÆue
) - 1;

1932 
pdu
.
åunˇãd
 = 
	`__˝u_to_À16
(1);

1934 
	`mem˝y
(
pdu
.
vÆue
, 
p
->vÆue, 
Àn
);

1936 
	`fio_√t_queue_cmd
(
FIO_NET_CMD_JOB_OPT
, &
pdu
, ’du), 
NULL
, 
SK_F_COPY
);

1938 
	}
}

1940 
	$c⁄vît_agg
(
disk_utû_agg
 *
d°
, disk_utû_agg *
§c
)

1942 
i
;

1944 
i
 = 0; i < 2; i++) {

1945 
d°
->
ios
[
i
] = 
	`˝u_to_À64
(
§c
->ios[i]);

1946 
d°
->
mîges
[
i
] = 
	`˝u_to_À64
(
§c
->merges[i]);

1947 
d°
->
£˘‹s
[
i
] = 
	`˝u_to_À64
(
§c
->sectors[i]);

1948 
d°
->
ticks
[
i
] = 
	`˝u_to_À64
(
§c
->ticks[i]);

1951 
d°
->
io_ticks
 = 
	`˝u_to_À64
(
§c
->io_ticks);

1952 
d°
->
time_ö_queue
 = 
	`˝u_to_À64
(
§c
->time_in_queue);

1953 
d°
->
¶avecou¡
 = 
	`˝u_to_À32
(
§c
->slavecount);

1954 
d°
->
max_utû
.
u
.
i
 = 
	`˝u_to_À64
(
	`fio_doubÀ_to_uöt64
(
§c
->max_utû.u.
f
));

1955 
	}
}

1957 
	$c⁄vît_dus
(
disk_utû_°©
 *
d°
, disk_utû_°© *
§c
)

1959 
i
;

1961 
	`¢¥ötf
((*Ë
d°
->
«me
, (d°->«me), "%s", 
§c
->name);

1963 
i
 = 0; i < 2; i++) {

1964 
d°
->
s
.
ios
[
i
] = 
	`˝u_to_À64
(
§c
->s.ios[i]);

1965 
d°
->
s
.
mîges
[
i
] = 
	`˝u_to_À64
(
§c
->s.merges[i]);

1966 
d°
->
s
.
£˘‹s
[
i
] = 
	`˝u_to_À64
(
§c
->s.sectors[i]);

1967 
d°
->
s
.
ticks
[
i
] = 
	`˝u_to_À64
(
§c
->s.ticks[i]);

1970 
d°
->
s
.
io_ticks
 = 
	`˝u_to_À64
(
§c
->s.io_ticks);

1971 
d°
->
s
.
time_ö_queue
 = 
	`˝u_to_À64
(
§c
->s.time_in_queue);

1972 
d°
->
s
.
m£c
 = 
	`˝u_to_À64
(
§c
->s.msec);

1973 
	}
}

1975 
	$fio_£rvî_£nd_du
()

1977 
disk_utû
 *
du
;

1978 
Êi°_hód
 *
íåy
;

1979 
cmd_du_pdu
 
pdu
;

1981 
	`d¥öt
(
FD_NET
, "£rvî: sídög disk_utû %d\n", !
	`Êi°_em±y
(&
disk_li°
));

1983 
	`mem£t
(&
pdu
, 0, (pdu));

1985 
	`Êi°_f‹_óch
(
íåy
, &
disk_li°
) {

1986 
du
 = 
	`Êi°_íåy
(
íåy
, 
disk_utû
, 
li°
);

1988 
	`c⁄vît_dus
(&
pdu
.
dus
, &
du
->dus);

1989 
	`c⁄vît_agg
(&
pdu
.
agg
, &
du
->agg);

1991 
	`fio_√t_queue_cmd
(
FIO_NET_CMD_DU
, &
pdu
, ’du), 
NULL
, 
SK_F_COPY
);

1993 
	}
}

1995 #ifde‡
CONFIG_ZLIB


1997 
ölöe
 
	$__fio_√t_¥ï_èû
(
z_°ªam
 *
°ªam
, *
out_pdu
,

1998 
sk_íåy
 **
œ°_íåy
,

1999 
sk_íåy
 *
fú°
)

2001 
this_Àn
 = 
FIO_SERVER_MAX_FRAGMENT_PDU
 - 
°ªam
->
avaû_out
;

2003 *
œ°_íåy
 = 
	`fio_√t_¥ï_cmd
(
FIO_NET_CMD_IOLOG
, 
out_pdu
, 
this_Àn
,

2004 
NULL
, 
SK_F_VEC
 | 
SK_F_INLINE
 | 
SK_F_FREE
);

2005 i‡(*
œ°_íåy
)

2006 
	`Êi°_add_èû
(&(*
œ°_íåy
)->
li°
, &
fú°
->
√xt
);

2007 
	}
}

2013 
	$__deÊ©e_pdu_buf„r
(*
√xt_ö
, 
√xt_sz
, **
out_pdu
,

2014 
sk_íåy
 **
œ°_íåy
, 
z_°ªam
 *
°ªam
,

2015 
sk_íåy
 *
fú°
)

2017 
ªt
;

2019 
°ªam
->
√xt_ö
 =Çext_in;

2020 
°ªam
->
avaû_ö
 = 
√xt_sz
;

2022 i‡(!
°ªam
->
avaû_out
) {

2023 
	`__fio_√t_¥ï_èû
(
°ªam
, *
out_pdu
, 
œ°_íåy
, 
fú°
);

2024 i‡(*
œ°_íåy
 =
NULL
)

2027 *
out_pdu
 = 
	`mÆloc
(
FIO_SERVER_MAX_FRAGMENT_PDU
);

2029 
°ªam
->
avaû_out
 = 
FIO_SERVER_MAX_FRAGMENT_PDU
;

2030 
°ªam
->
√xt_out
 = *
out_pdu
;

2033 
ªt
 = 
	`deÊ©e
(
°ªam
, 
Z_BLOCK
);

2035 i‡(
ªt
 < 0) {

2036 
	`‰ì
(*
out_pdu
);

2039 } 
°ªam
->
avaû_ö
);

2042 
	}
}

2044 
	$__fio_≠≥nd_iﬁog_gz_hi°
(
sk_íåy
 *
fú°
, 
io_log
 *
log
,

2045 
io_logs
 *
cur_log
, 
z_°ªam
 *
°ªam
)

2047 
sk_íåy
 *
íåy
;

2048 *
out_pdu
;

2049 
ªt
, 
i
, 
j
;

2050 
ßm∂e_sz
 = 
	`log_íåy_sz
(
log
);

2052 
out_pdu
 = 
	`mÆloc
(
FIO_SERVER_MAX_FRAGMENT_PDU
);

2053 
°ªam
->
avaû_out
 = 
FIO_SERVER_MAX_FRAGMENT_PDU
;

2054 
°ªam
->
√xt_out
 = 
out_pdu
;

2056 
i
 = 0; i < 
cur_log
->
ƒ_ßm∂es
; i++) {

2057 
io_ßm∂e
 *
s
;

2058 
io_u_∂©_íåy
 *
cur_∂©_íåy
, *
¥ev_∂©_íåy
;

2059 
uöt64_t
 *
cur_∂©
, *
¥ev_∂©
;

2061 
s
 = 
	`gë_ßm∂e
(
log
, 
cur_log
, 
i
);

2062 
ªt
 = 
	`__deÊ©e_pdu_buf„r
(
s
, 
ßm∂e_sz
, &
out_pdu
, &
íåy
, 
°ªam
, 
fú°
);

2063 i‡(
ªt
)

2064  
ªt
;

2069 
cur_∂©_íåy
 = 
s
->
d©a
.
∂©_íåy
;

2070 
¥ev_∂©_íåy
 = 
	`Êi°_fú°_íåy
(&
cur_∂©_íåy
->
li°
, 
io_u_∂©_íåy
,Üist);

2071 
cur_∂©
 = 
cur_∂©_íåy
->
io_u_∂©
;

2072 
¥ev_∂©
 = 
¥ev_∂©_íåy
->
io_u_∂©
;

2074 
j
 = 0; j < 
FIO_IO_U_PLAT_NR
; j++) {

2075 
cur_∂©
[
j
] -
¥ev_∂©
[j];

2078 
	`Êi°_dñ
(&
¥ev_∂©_íåy
->
li°
);

2079 
	`‰ì
(
¥ev_∂©_íåy
);

2081 
ªt
 = 
	`__deÊ©e_pdu_buf„r
(
cur_∂©_íåy
, (*cur_plat_entry),

2082 &
out_pdu
, &
íåy
, 
°ªam
, 
fú°
);

2084 i‡(
ªt
)

2085  
ªt
;

2088 
	`__fio_√t_¥ï_èû
(
°ªam
, 
out_pdu
, &
íåy
, 
fú°
);

2089  
íåy
 =
NULL
;

2090 
	}
}

2092 
	$__fio_≠≥nd_iﬁog_gz
(
sk_íåy
 *
fú°
, 
io_log
 *
log
,

2093 
io_logs
 *
cur_log
, 
z_°ªam
 *
°ªam
)

2095 
this_Àn
;

2096 *
out_pdu
;

2097 
ªt
;

2099 i‡(
log
->
log_ty≥
 =
IO_LOG_TYPE_HIST
)

2100  
	`__fio_≠≥nd_iﬁog_gz_hi°
(
fú°
, 
log
, 
cur_log
, 
°ªam
);

2102 
°ªam
->
√xt_ö
 = (*Ë
cur_log
->
log
;

2103 
°ªam
->
avaû_ö
 = 
cur_log
->
ƒ_ßm∂es
 * 
	`log_íåy_sz
(
log
);

2106 
sk_íåy
 *
íåy
;

2113 
out_pdu
 = 
	`mÆloc
(
FIO_SERVER_MAX_FRAGMENT_PDU
);

2115 
°ªam
->
avaû_out
 = 
FIO_SERVER_MAX_FRAGMENT_PDU
;

2116 
°ªam
->
√xt_out
 = 
out_pdu
;

2117 
ªt
 = 
	`deÊ©e
(
°ªam
, 
Z_BLOCK
);

2119 i‡(
ªt
 < 0) {

2120 
	`‰ì
(
out_pdu
);

2124 
this_Àn
 = 
FIO_SERVER_MAX_FRAGMENT_PDU
 - 
°ªam
->
avaû_out
;

2126 
íåy
 = 
	`fio_√t_¥ï_cmd
(
FIO_NET_CMD_IOLOG
, 
out_pdu
, 
this_Àn
,

2127 
NULL
, 
SK_F_VEC
 | 
SK_F_INLINE
 | 
SK_F_FREE
);

2128 i‡(!
íåy
) {

2129 
	`‰ì
(
out_pdu
);

2132 
	`Êi°_add_èû
(&
íåy
->
li°
, &
fú°
->
√xt
);

2133 } 
°ªam
->
avaû_ö
);

2136 
	}
}

2138 
	$fio_≠≥nd_iﬁog_gz
(
sk_íåy
 *
fú°
, 
io_log
 *
log
)

2140 
z_°ªam
 
°ªam
 = {

2141 .
zÆloc
 = 
Z_NULL
,

2142 .
z‰ì
 = 
Z_NULL
,

2143 .
›aque
 = 
Z_NULL
,

2145 
ªt
 = 0;

2147 i‡(
	`deÊ©eInô
(&
°ªam
, 
Z_DEFAULT_COMPRESSION
Ë!
Z_OK
)

2150 !
	`Êi°_em±y
(&
log
->
io_logs
)) {

2151 
io_logs
 *
cur_log
;

2153 
cur_log
 = 
	`Êi°_fú°_íåy
(&
log
->
io_logs
, io_logs, 
li°
);

2154 
	`Êi°_dñ_öô
(&
cur_log
->
li°
);

2156 
ªt
 = 
	`__fio_≠≥nd_iﬁog_gz
(
fú°
, 
log
, 
cur_log
, &
°ªam
);

2157 i‡(
ªt
)

2161 
ªt
 = 
	`deÊ©e
(&
°ªam
, 
Z_FINISH
);

2163 
ªt
 !
Z_STREAM_END
) {

2164 
sk_íåy
 *
íåy
;

2165 
this_Àn
;

2166 *
out_pdu
;

2168 
out_pdu
 = 
	`mÆloc
(
FIO_SERVER_MAX_FRAGMENT_PDU
);

2169 
°ªam
.
avaû_out
 = 
FIO_SERVER_MAX_FRAGMENT_PDU
;

2170 
°ªam
.
√xt_out
 = 
out_pdu
;

2172 
ªt
 = 
	`deÊ©e
(&
°ªam
, 
Z_FINISH
);

2174 i‡(
ªt
 < 0) {

2175 
	`‰ì
(
out_pdu
);

2179 
this_Àn
 = 
FIO_SERVER_MAX_FRAGMENT_PDU
 - 
°ªam
.
avaû_out
;

2181 
íåy
 = 
	`fio_√t_¥ï_cmd
(
FIO_NET_CMD_IOLOG
, 
out_pdu
, 
this_Àn
,

2182 
NULL
, 
SK_F_VEC
 | 
SK_F_INLINE
 | 
SK_F_FREE
);

2183 i‡(!
íåy
) {

2184 
	`‰ì
(
out_pdu
);

2187 
	`Êi°_add_èû
(&
íåy
->
li°
, &
fú°
->
√xt
);

2190 
ªt
 = 
	`deÊ©eEnd
(&
°ªam
);

2191 i‡(
ªt
 =
Z_OK
)

2195 
	}
}

2197 
	$fio_≠≥nd_iﬁog_gz
(
sk_íåy
 *
fú°
, 
io_log
 *
log
)

2200 
	}
}

2203 
	$fio_≠≥nd_gz_chunks
(
sk_íåy
 *
fú°
, 
io_log
 *
log
)

2205 
sk_íåy
 *
íåy
;

2206 
Êi°_hód
 *
node
;

2207 
ªt
 = 0;

2209 
	`±hªad_muãx_lock
(&
log
->
chunk_lock
);

2210 
	`Êi°_f‹_óch
(
node
, &
log
->
chunk_li°
) {

2211 
iﬁog_com¥ess
 *
c
;

2213 
c
 = 
	`Êi°_íåy
(
node
, 
iﬁog_com¥ess
, 
li°
);

2214 
íåy
 = 
	`fio_√t_¥ï_cmd
(
FIO_NET_CMD_IOLOG
, 
c
->
buf
, c->
Àn
,

2215 
NULL
, 
SK_F_VEC
 | 
SK_F_INLINE
);

2216 i‡(!
íåy
) {

2217 
ªt
 = 1;

2220 
	`Êi°_add_èû
(&
íåy
->
li°
, &
fú°
->
√xt
);

2222 
	`±hªad_muãx_u∆ock
(&
log
->
chunk_lock
);

2223  
ªt
;

2224 
	}
}

2226 
	$fio_≠≥nd_ãxt_log
(
sk_íåy
 *
fú°
, 
io_log
 *
log
)

2228 
sk_íåy
 *
íåy
;

2229 
ªt
 = 0;

2231 !
	`Êi°_em±y
(&
log
->
io_logs
)) {

2232 
io_logs
 *
cur_log
;

2233 
size_t
 
size
;

2235 
cur_log
 = 
	`Êi°_fú°_íåy
(&
log
->
io_logs
, io_logs, 
li°
);

2236 
	`Êi°_dñ_öô
(&
cur_log
->
li°
);

2238 
size
 = 
cur_log
->
ƒ_ßm∂es
 * 
	`log_íåy_sz
(
log
);

2240 
íåy
 = 
	`fio_√t_¥ï_cmd
(
FIO_NET_CMD_IOLOG
, 
cur_log
->
log
, 
size
,

2241 
NULL
, 
SK_F_VEC
 | 
SK_F_INLINE
);

2242 i‡(!
íåy
) {

2243 
ªt
 = 1;

2246 
	`Êi°_add_èû
(&
íåy
->
li°
, &
fú°
->
√xt
);

2249  
ªt
;

2250 
	}
}

2252 
	$fio_£nd_iﬁog
(
thªad_d©a
 *
td
, 
io_log
 *
log
, c⁄° *
«me
)

2254 
cmd_iﬁog_pdu
 
pdu
 = {

2255 .
ƒ_ßm∂es
 = 
	`˝u_to_À64
(
	`iﬁog_ƒ_ßm∂es
(
log
)),

2256 .
thªad_numbî
 = 
	`˝u_to_À32
(
td
->thread_number),

2257 .
log_ty≥
 = 
	`˝u_to_À32
(
log
->log_type),

2258 .
log_hi°_cﬂr£√ss
 = 
	`˝u_to_À32
(
log
->
hi°_cﬂr£√ss
),

2260 
sk_íåy
 *
fú°
;

2261 
Êi°_hód
 *
íåy
;

2262 
ªt
 = 0;

2264 i‡(!
	`Êi°_em±y
(&
log
->
chunk_li°
))

2265 
pdu
.
com¥es£d
 = 
	`__˝u_to_À32
(
STORE_COMPRESSED
);

2266 i‡(
u£_zlib
)

2267 
pdu
.
com¥es£d
 = 
	`__˝u_to_À32
(
XMIT_COMPRESSED
);

2269 
pdu
.
com¥es£d
 = 0;

2271 
	`¢¥ötf
((*Ë
pdu
.
«me
, (pdu.name), "%s",Çame);

2277 
	`Êi°_f‹_óch
(
íåy
, &
log
->
io_logs
) {

2278 
io_logs
 *
cur_log
;

2279 
i
;

2281 
cur_log
 = 
	`Êi°_íåy
(
íåy
, 
io_logs
, 
li°
);

2283 
i
 = 0; i < 
cur_log
->
ƒ_ßm∂es
; i++) {

2284 
io_ßm∂e
 *
s
 = 
	`gë_ßm∂e
(
log
, 
cur_log
, 
i
);

2286 
s
->
time
 = 
	`˝u_to_À64
(s->time);

2287 i‡(
log
->
log_ty≥
 !
IO_LOG_TYPE_HIST
)

2288 
s
->
d©a
.
vÆ
 = 
	`˝u_to_À64
(s->data.val);

2289 
s
->
__ddú
 = 
	`__˝u_to_À32
(s->__ddir);

2290 
s
->
bs
 = 
	`˝u_to_À64
(s->bs);

2292 i‡(
log
->
log_off£t
) {

2293 
io_ßm∂e_off£t
 *
so
 = (*Ë
s
;

2295 
so
->
off£t
 = 
	`˝u_to_À64
(so->offset);

2303 
fú°
 = 
	`fio_√t_¥ï_cmd
(
FIO_NET_CMD_IOLOG
, &
pdu
, ’du), 
NULL
, 
SK_F_VEC
 | 
SK_F_INLINE
 | 
SK_F_COPY
);

2304 i‡(!
fú°
)

2313 i‡(!
	`Êi°_em±y
(&
log
->
chunk_li°
))

2314 
ªt
 = 
	`fio_≠≥nd_gz_chunks
(
fú°
, 
log
);

2315 i‡(
u£_zlib
)

2316 
ªt
 = 
	`fio_≠≥nd_iﬁog_gz
(
fú°
, 
log
);

2318 
ªt
 = 
	`fio_≠≥nd_ãxt_log
(
fú°
, 
log
);

2320 
	`fio_√t_queue_íåy
(
fú°
);

2321  
ªt
;

2322 
	}
}

2324 
	$fio_£rvî_£nd_add_job
(
thªad_d©a
 *
td
)

2326 
cmd_add_job_pdu
 
pdu
 = {

2327 .
thªad_numbî
 = 
	`˝u_to_À32
(
td
->thread_number),

2328 .
groupid
 = 
	`˝u_to_À32
(
td
->groupid),

2331 
	`c⁄vît_thªad_›ti⁄s_to_√t
(&
pdu
.
t›
, &
td
->
o
);

2333 
	`fio_√t_queue_cmd
(
FIO_NET_CMD_ADD_JOB
, &
pdu
, ’du), 
NULL
,

2334 
SK_F_COPY
);

2335 
	}
}

2337 
	$fio_£rvî_£nd_°¨t
(
thªad_d©a
 *
td
)

2339 
sk_out
 *sk_ouà
	`±hªad_gë•ecific
(
sk_out_key
);

2341 
	`as£π
(
sk_out
->
sk
 != -1);

2343 
	`fio_√t_queue_cmd
(
FIO_NET_CMD_SERVER_START
, 
NULL
, 0, NULL, 
SK_F_SIMPLE
);

2344 
	}
}

2346 
	$fio_£rvî_gë_vîify_°©e
(c⁄° *
«me
, 
thªadnumbî
,

2347 **
d©≠
)

2349 
thªad_io_li°
 *
s
;

2350 
cmd_£ndfûe
 
out
;

2351 
cmd_ª∂y
 *
ªp
;

2352 
uöt64_t
 
èg
;

2353 *
d©a
;

2354 
ªt
;

2356 
	`d¥öt
(
FD_NET
, "server:Ñequest verify state\n");

2358 
ªp
 = 
	`smÆloc
((*rep));

2359 i‡(!
ªp
)

2360  
ENOMEM
;

2362 
	`__fio_£m_öô
(&
ªp
->
lock
, 
FIO_SEM_LOCKED
);

2363 
ªp
->
d©a
 = 
NULL
;

2364 
ªp
->
îr‹
 = 0;

2366 
	`vîify_°©e_gí_«me
((*Ë
out
.
∑th
, (out.∑th), 
«me
, 
me
,

2367 
thªadnumbî
);

2368 
èg
 = (
uöt64_t
Ë(
uöçå_t
Ë
ªp
;

2369 
	`fio_√t_queue_cmd
(
FIO_NET_CMD_SENDFILE
, &
out
, (out), &
èg
,

2370 
SK_F_COPY
);

2375 i‡(
	`fio_£m_down_timeout
(&
ªp
->
lock
, 10000)) {

2376 
	`log_îr
("fio:Åimed out waiting forÑeply\n");

2377 
ªt
 = 
ETIMEDOUT
;

2378 
Áû
;

2381 i‡(
ªp
->
îr‹
) {

2382 
	`log_îr
("fio: failure onÑeceiving state file %s: %s\n",

2383 
out
.
∑th
, 
	`°ªº‹
(
ªp
->
îr‹
));

2384 
ªt
 = 
ªp
->
îr‹
;

2385 
Áû
:

2386 *
d©≠
 = 
NULL
;

2387 
	`s‰ì
(
ªp
);

2388 
	`fio_√t_queue_quô
();

2389  
ªt
;

2396 
s
 = 
ªp
->
d©a
 + (
vîify_°©e_hdr
);

2397 i‡(
	`vîify_°©e_hdr
(
ªp
->
d©a
, 
s
)) {

2398 
ªt
 = 
EILSEQ
;

2399 
Áû
;

2405 
ªt
 = 0;

2406 
ªp
->
size
 -(
vîify_°©e_hdr
);

2407 
d©a
 = 
	`mÆloc
(
ªp
->
size
);

2408 
	`mem˝y
(
d©a
, 
s
, 
ªp
->
size
);

2409 *
d©≠
 = 
d©a
;

2411 
	`s‰ì
(
ªp
->
d©a
);

2412 
	`__fio_£m_ªmove
(&
ªp
->
lock
);

2413 
	`s‰ì
(
ªp
);

2414  
ªt
;

2415 
	}
}

2417 
	$fio_öô_£rvî_ù
()

2419 
sockaddr
 *
addr
;

2420 
sockÀn_t
 
sockÀn
;

2421 
buf
[80];

2422 c⁄° *
°r
;

2423 
sk
, 
›t
;

2425 i‡(
u£_ùv6
)

2426 
sk
 = 
	`sockë
(
AF_INET6
, 
SOCK_STREAM
, 0);

2428 
sk
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

2430 i‡(
sk
 < 0) {

2431 
	`log_îr
("fio: sockë: %s\n", 
	`°ªº‹
(
î∫o
));

2435 
›t
 = 1;

2436 i‡(
	`£tsock›t
(
sk
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*)&
›t
, (opt)) < 0) {

2437 
	`log_îr
("fio: sësock›t(REUSEADDR): %s\n", 
	`°ªº‹
(
î∫o
));

2438 
	`˛o£
(
sk
);

2441 #ifde‡
SO_REUSEPORT


2445 i‡(
	`£tsock›t
(
sk
, 
SOL_SOCKET
, 
SO_REUSEPORT
, &
›t
, (opt))) {

2449 i‡(
u£_ùv6
) {

2450 *
§c
 = &
ßddr_ö6
.
sö6_addr
;

2452 
addr
 = (
sockaddr
 *Ë&
ßddr_ö6
;

2453 
sockÀn
 = (
ßddr_ö6
);

2454 
ßddr_ö6
.
sö6_Ámûy
 = 
AF_INET6
;

2455 
°r
 = 
	`öë_¡›
(
AF_INET6
, 
§c
, 
buf
, (buf));

2457 *
§c
 = &
ßddr_ö
.
sö_addr
;

2459 
addr
 = (
sockaddr
 *Ë&
ßddr_ö
;

2460 
sockÀn
 = (
ßddr_ö
);

2461 
ßddr_ö
.
sö_Ámûy
 = 
AF_INET
;

2462 
°r
 = 
	`öë_¡›
(
AF_INET
, 
§c
, 
buf
, (buf));

2465 i‡(
	`böd
(
sk
, 
addr
, 
sockÀn
) < 0) {

2466 
	`log_îr
("fio: böd: %s\n", 
	`°ªº‹
(
î∫o
));

2467 
	`log_öfo
("fio: faûed wôh IPv%¯%s\n", 
u£_ùv6
 ? '6' : '4', 
°r
);

2468 
	`˛o£
(
sk
);

2472  
sk
;

2473 
	}
}

2475 
	$fio_öô_£rvî_sock
()

2477 
sockaddr_un
 
addr
;

2478 
sockÀn_t
 
Àn
;

2479 
mode_t
 
mode
;

2480 
sk
;

2482 
sk
 = 
	`sockë
(
AF_UNIX
, 
SOCK_STREAM
, 0);

2483 i‡(
sk
 < 0) {

2484 
	`log_îr
("fio: sockë: %s\n", 
	`°ªº‹
(
î∫o
));

2488 
mode
 = 
	`umask
(000);

2490 
addr
.
sun_Ámûy
 = 
AF_UNIX
;

2491 
	`¢¥ötf
(
addr
.
sun_∑th
, ◊ddr.sun_∑th), "%s", 
böd_sock
);

2493 
Àn
 = (
addr
.
sun_Ámûy
Ë+ 
	`°æí
(
böd_sock
) + 1;

2495 i‡(
	`böd
(
sk
, (
sockaddr
 *Ë&
addr
, 
Àn
) < 0) {

2496 
	`log_îr
("fio: böd: %s\n", 
	`°ªº‹
(
î∫o
));

2497 
	`˛o£
(
sk
);

2501 
	`umask
(
mode
);

2502  
sk
;

2503 
	}
}

2505 
	$fio_öô_£rvî_c⁄√˘i⁄
()

2507 
böd_°r
[128];

2508 
sk
;

2510 
	`d¥öt
(
FD_NET
, "starting server\n");

2512 i‡(!
böd_sock
)

2513 
sk
 = 
	`fio_öô_£rvî_ù
();

2515 
sk
 = 
	`fio_öô_£rvî_sock
();

2517 i‡(
sk
 < 0)

2518  
sk
;

2520 
	`mem£t
(
böd_°r
, 0, (bind_str));

2522 i‡(!
böd_sock
) {

2523 *
p
, 
p‹t
[16];

2524 *
§c
;

2525 
af
;

2527 i‡(
u£_ùv6
) {

2528 
af
 = 
AF_INET6
;

2529 
§c
 = &
ßddr_ö6
.
sö6_addr
;

2531 
af
 = 
AF_INET
;

2532 
§c
 = &
ßddr_ö
.
sö_addr
;

2535 
p
 = (*Ë
	`öë_¡›
(
af
, 
§c
, 
böd_°r
, (bind_str));

2537 
	`•rötf
(
p‹t
, ",%u", 
fio_√t_p‹t
);

2538 i‡(
p
)

2539 
	`°rˇt
(
p
, 
p‹t
);

2541 
	`¢¥ötf
(
böd_°r
, (böd_°r), "%s", 
p‹t
);

2543 
	`¢¥ötf
(
böd_°r
, (böd_°r), "%s", 
böd_sock
);

2545 
	`log_öfo
("fio: sîvîÜi°íög o¿%s\n", 
böd_°r
);

2547 i‡(
	`li°í
(
sk
, 4) < 0) {

2548 
	`log_îr
("fio:Üi°í: %s\n", 
	`°ªº‹
(
î∫o
));

2549 
	`˛o£
(
sk
);

2553  
sk
;

2554 
	}
}

2556 
	$fio_£rvî_∑r£_ho°
(c⁄° *
ho°
, 
ùv6
, 
ö_addr
 *
öp
,

2557 
ö6_addr
 *
öp6
)

2560 
ªt
 = 0;

2562 i‡(
ùv6
)

2563 
ªt
 = 
	`öë_±⁄
(
AF_INET6
, 
ho°
, 
öp6
);

2565 
ªt
 = 
	`öë_±⁄
(
AF_INET
, 
ho°
, 
öp
);

2567 i‡(
ªt
 != 1) {

2568 
addröfo
 *
ªs
, 
höts
 = {

2569 .
ai_Ámûy
 = 
ùv6
 ? 
AF_INET6
 : 
AF_INET
,

2570 .
ai_sockty≥
 = 
SOCK_STREAM
,

2573 
ªt
 = 
	`gëaddröfo
(
ho°
, 
NULL
, &
höts
, &
ªs
);

2574 i‡(
ªt
) {

2575 
	`log_îr
("fio: faûedÅÿªsﬁvê<%s> (%s)\n", 
ho°
,

2576 
	`gai_°ªº‹
(
ªt
));

2580 i‡(
ùv6
)

2581 
	`mem˝y
(
öp6
, &((
sockaddr_ö6
 *Ë
ªs
->
ai_addr
)->
sö6_addr
, (*inp6));

2583 
	`mem˝y
(
öp
, &((
sockaddr_ö
 *Ë
ªs
->
ai_addr
)->
sö_addr
, (*inp));

2585 
ªt
 = 1;

2586 
	`‰ìaddröfo
(
ªs
);

2589  !(
ªt
 == 1);

2590 
	}
}

2604 
	$fio_£rvî_∑r£_°rög
(c⁄° *
°r
, **
±r
, 
boﬁ
 *
is_sock
,

2605 *
p‹t
, 
ö_addr
 *
öp
,

2606 
ö6_addr
 *
öp6
, *
ùv6
)

2608 c⁄° *
ho°
 = 
°r
;

2609 *
p‹ç
;

2610 
Õ‹t
 = 0;

2612 *
±r
 = 
NULL
;

2613 *
is_sock
 = 
Ál£
;

2614 *
p‹t
 = 
fio_√t_p‹t
;

2615 *
ùv6
 = 0;

2617 i‡(!
	`°∫cmp
(
°r
, "sock:", 5)) {

2618 *
±r
 = 
	`°rdup
(
°r
 + 5);

2619 *
is_sock
 = 
åue
;

2627 i‡(!
	`°∫cmp
(
ho°
, "ip:", 3))

2628 
ho°
 += 3;

2629 i‡(!
	`°∫cmp
(
ho°
, "ip4:", 4))

2630 
ho°
 += 4;

2631 i‡(!
	`°∫cmp
(
ho°
, "ip6:", 4)) {

2632 
ho°
 += 4;

2633 *
ùv6
 = 1;

2634 } i‡(
ho°
[0] == ':') {

2636 
ho°
++;

2637 
Õ‹t
 = 
	`©oi
(
ho°
);

2638 i‡(!
Õ‹t
 ||Üport > 65535) {

2639 
	`log_îr
("fio: bad sîvîÖ‹à%u\n", 
Õ‹t
);

2643 *
p‹t
 = 
Õ‹t
;

2650 i‡(!
Õ‹t
) {

2651 
p‹ç
 = 
	`°rchr
(
ho°
, ',');

2652 i‡(
p‹ç
) {

2653 *
p‹ç
 = '\0';

2654 
p‹ç
++;

2655 
Õ‹t
 = 
	`©oi
(
p‹ç
);

2656 i‡(!
Õ‹t
 ||Üport > 65535) {

2657 
	`log_îr
("fio: bad sîvîÖ‹à%u\n", 
Õ‹t
);

2663 i‡(
Õ‹t
)

2664 *
p‹t
 = 
Õ‹t
;

2666 i‡(!
	`°æí
(
ho°
))

2669 *
±r
 = 
	`°rdup
(
ho°
);

2671 i‡(
	`fio_£rvî_∑r£_ho°
(*
±r
, *
ùv6
, 
öp
, 
öp6
)) {

2672 
	`‰ì
(*
±r
);

2673 *
±r
 = 
NULL
;

2677 i‡(*
p‹t
 == 0)

2678 *
p‹t
 = 
fio_√t_p‹t
;

2681 
	}
}

2695 
	$fio_h™dÀ_£rvî_¨g
()

2697 
p‹t
 = 
fio_√t_p‹t
;

2698 
boﬁ
 
is_sock
;

2699 
ªt
 = 0;

2701 
ßddr_ö
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
);

2703 i‡(!
fio_£rvî_¨g
)

2704 
out
;

2706 
ªt
 = 
	`fio_£rvî_∑r£_°rög
(
fio_£rvî_¨g
, &
böd_sock
, &
is_sock
,

2707 &
p‹t
, &
ßddr_ö
.
sö_addr
,

2708 &
ßddr_ö6
.
sö6_addr
, &
u£_ùv6
);

2710 i‡(!
is_sock
 && 
böd_sock
) {

2711 
	`‰ì
(
böd_sock
);

2712 
böd_sock
 = 
NULL
;

2715 
out
:

2716 
fio_√t_p‹t
 = 
p‹t
;

2717 
ßddr_ö
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

2718 
ßddr_ö6
.
sö6_p‹t
 = 
	`ht⁄s
(
p‹t
);

2719  
ªt
;

2720 
	}
}

2722 
	$sig_öt
(
sig
)

2724 i‡(
böd_sock
)

2725 
	`u∆ök
(
böd_sock
);

2726 
	}
}

2728 
	$£t_sig_h™dÀrs
()

2730 
siga˘i⁄
 
a˘
 = {

2731 .
ß_h™dÀr
 = 
sig_öt
,

2732 .
ß_Êags
 = 
SA_RESTART
,

2735 
	`siga˘i⁄
(
SIGINT
, &
a˘
, 
NULL
);

2738 #ifde‡
WIN32


2739 
	`siga˘i⁄
(
SIGBREAK
, &
a˘
, 
NULL
);

2741 
	}
}

2743 
	$fio_£rvî_de°roy_sk_key
()

2745 
	`±hªad_key_dñëe
(
sk_out_key
);

2746 
	}
}

2748 
	$fio_£rvî_¸óã_sk_key
()

2750 i‡(
	`±hªad_key_¸óã
(&
sk_out_key
, 
NULL
)) {

2751 
	`log_îr
("fio: can't create sk_out backend key\n");

2755 
	`±hªad_£t•ecific
(
sk_out_key
, 
NULL
);

2757 
	}
}

2759 
	$fio_£rvî
()

2761 
sk
, 
ªt
;

2763 
	`d¥öt
(
FD_NET
, "starting server\n");

2765 i‡(
	`fio_h™dÀ_£rvî_¨g
())

2768 
	`£t_sig_h™dÀrs
();

2770 #ifde‡
WIN32


2772 i‡(
fio_£rvî_pùe_«me
 !
NULL
) {

2773 
ªt
 = 
	`h™dÀ_c⁄√˘i⁄_¥o˚ss
();

2774  
ªt
;

2778 
hjob
 = 
	`wödows_¸óã_job
();

2779 i‡(
hjob
 =
INVALID_HANDLE_VALUE
)

2783 
sk
 = 
	`fio_öô_£rvî_c⁄√˘i⁄
();

2784 i‡(
sk
 < 0)

2787 
ªt
 = 
	`ac˚±_lo›
(
sk
);

2789 
	`˛o£
(
sk
);

2791 i‡(
fio_£rvî_¨g
) {

2792 
	`‰ì
(
fio_£rvî_¨g
);

2793 
fio_£rvî_¨g
 = 
NULL
;

2795 i‡(
böd_sock
)

2796 
	`‰ì
(
böd_sock
);

2798  
ªt
;

2799 
	}
}

2801 
	$fio_£rvî_gŸ_sig«l
(
sig«l
)

2803 
sk_out
 *sk_ouà
	`±hªad_gë•ecific
(
sk_out_key
);

2805 
	`as£π
(
sk_out
);

2807 i‡(
sig«l
 =
SIGPIPE
)

2808 
sk_out
->
sk
 = -1;

2810 
	`log_öfo
("\nfio:Åîmö©ög o¿sig«»%d\n", 
sig«l
);

2811 
exô_backíd
 = 
åue
;

2813 
	}
}

2815 
	$check_exi°ög_pidfûe
(c⁄° *
pidfûe
)

2817 
°©
 
sb
;

2818 
buf
[16];

2819 
pid_t
 
pid
;

2820 
FILE
 *
f
;

2822 i‡(
	`°©
(
pidfûe
, &
sb
))

2825 
f
 = 
	`f›í
(
pidfûe
, "r");

2826 i‡(!
f
)

2829 i‡(
	`‰ód
(
buf
, 
sb
.
°_size
, 1, 
f
) <= 0) {

2830 
	`f˛o£
(
f
);

2833 
	`f˛o£
(
f
);

2835 
pid
 = 
	`©oi
(
buf
);

2836 i‡(
	`kûl
(
pid
, 
SIGCONT
) < 0)

2837  
î∫o
 !
ESRCH
;

2840 
	}
}

2842 
	$wrôe_pid
(
pid_t
 
pid
, c⁄° *
pidfûe
)

2844 
FILE
 *
Âid
;

2846 
Âid
 = 
	`f›í
(
pidfûe
, "w");

2847 i‡(!
Âid
) {

2848 
	`log_îr
("fio: faûed o≥nögÖid fûê%s\n", 
pidfûe
);

2852 
	`Ârötf
(
Âid
, "%u\n", (Ë
pid
);

2853 
	`f˛o£
(
Âid
);

2855 
	}
}

2860 
	$fio_°¨t_£rvî
(*
pidfûe
)

2862 
FILE
 *
fûe
;

2863 
pid_t
 
pid
;

2864 
ªt
;

2866 #i‡
	`deföed
(
WIN32
)

2867 
WSADATA
 
wsd
;

2868 
	`WSASèπup
(
	`MAKEWORD
(2, 2), &
wsd
);

2871 i‡(!
pidfûe
)

2872  
	`fio_£rvî
();

2874 i‡(
	`check_exi°ög_pidfûe
(
pidfûe
)) {

2875 
	`log_îr
("fio:Öidfile %sÉxistsánd serveráppearsálive\n",

2876 
pidfûe
);

2877 
	`‰ì
(
pidfûe
);

2881 
pid
 = 
	`f‹k
();

2882 i‡(
pid
 < 0) {

2883 
	`log_îr
("fio: faûed sîvî f‹k: %s\n", 
	`°ªº‹
(
î∫o
));

2884 
	`‰ì
(
pidfûe
);

2886 } i‡(
pid
) {

2887 
ªt
 = 
	`wrôe_pid
(
pid
, 
pidfûe
);

2888 
	`‰ì
(
pidfûe
);

2889 
	`_exô
(
ªt
);

2892 
	`£tsid
();

2893 
	`›ílog
("fio", 
LOG_NDELAY
|
LOG_NOWAIT
|
LOG_PID
, 
LOG_USER
);

2894 
log_sy¶og
 = 
åue
;

2896 
fûe
 = 
	`‰e›í
("/dev/nuŒ", "r", 
°dö
);

2897 i‡(!
fûe
)

2898 
	`≥º‹
("freopen");

2900 
fûe
 = 
	`‰e›í
("/dev/nuŒ", "w", 
°dout
);

2901 i‡(!
fûe
)

2902 
	`≥º‹
("freopen");

2904 
fûe
 = 
	`‰e›í
("/dev/nuŒ", "w", 
°dîr
);

2905 i‡(!
fûe
)

2906 
	`≥º‹
("freopen");

2908 
f_out
 = 
NULL
;

2909 
f_îr
 = 
NULL
;

2911 
ªt
 = 
	`fio_£rvî
();

2913 
	`f˛o£
(
°dö
);

2914 
	`f˛o£
(
°dout
);

2915 
	`f˛o£
(
°dîr
);

2917 
	`˛o£log
();

2918 
	`u∆ök
(
pidfûe
);

2919 
	`‰ì
(
pidfûe
);

2920  
ªt
;

2921 
	}
}

2923 
	$fio_£rvî_£t_¨g
(c⁄° *
¨g
)

2925 
fio_£rvî_¨g
 = 
	`°rdup
(
¨g
);

2926 
	}
}

2928 #ifde‡
WIN32


2929 
	$fio_£rvî_öã∫Æ_£t
(c⁄° *
¨g
)

2931 
fio_£rvî_pùe_«me
 = 
	`°rdup
(
¨g
);

2932 
	}
}

	@server.h

1 #i‚de‡
FIO_SERVER_H


2 
	#FIO_SERVER_H


	)

4 
	~<öây≥s.h
>

5 
	~<°rög.h
>

6 
	~<sys/time.h
>

7 
	~<√töë/ö.h
>

9 
	~"°©.h
"

10 
	~"diskutû.h
"

12 
	#FIO_NET_PORT
 8765

	)

14 
	ssk_out
 {

15 
	mªfs
;

18 #ifde‡
WIN32


19 
HANDLE
 
	mhPro˚ss
;

21 
	msk
;

22 
fio_£m
 
	mlock
;

23 
Êi°_hód
 
	mli°
;

24 
fio_£m
 
	mwaô
;

25 
fio_£m
 
	mxmô
;

31 
	sfio_√t_cmd
 {

32 
uöt16_t
 
	mvîsi⁄
;

33 
uöt16_t
 
	m›code
;

34 
uöt32_t
 
	mÊags
;

35 
uöt64_t
 
	mèg
;

36 
uöt32_t
 
	mpdu_Àn
;

41 
uöt16_t
 
	mcmd_¸c16
;

42 
uöt16_t
 
	mpdu_¸c16
;

43 
uöt8_t
 
	m∑ylﬂd
[];

46 
	sfio_√t_cmd_ª∂y
 {

47 
Êi°_hód
 
	mli°
;

48 
time•ec
 
	mts
;

49 
uöt64_t
 
	mßved_èg
;

50 
uöt16_t
 
	m›code
;

54 
	mFIO_SERVER_VER
 = 97,

56 
	mFIO_SERVER_MAX_FRAGMENT_PDU
 = 1024,

57 
	mFIO_SERVER_MAX_CMD_MB
 = 2048,

59 
	mFIO_NET_CMD_QUIT
 = 1,

60 
	mFIO_NET_CMD_EXIT
 = 2,

61 
	mFIO_NET_CMD_JOB
 = 3,

62 
	mFIO_NET_CMD_JOBLINE
 = 4,

63 
	mFIO_NET_CMD_TEXT
 = 5,

64 
	mFIO_NET_CMD_TS
 = 6,

65 
	mFIO_NET_CMD_GS
 = 7,

66 
	mFIO_NET_CMD_SEND_ETA
 = 8,

67 
	mFIO_NET_CMD_ETA
 = 9,

68 
	mFIO_NET_CMD_PROBE
 = 10,

69 
	mFIO_NET_CMD_START
 = 11,

70 
	mFIO_NET_CMD_STOP
 = 12,

71 
	mFIO_NET_CMD_DU
 = 13,

72 
	mFIO_NET_CMD_SERVER_START
 = 14,

73 
	mFIO_NET_CMD_ADD_JOB
 = 15,

74 
	mFIO_NET_CMD_RUN
 = 16,

75 
	mFIO_NET_CMD_IOLOG
 = 17,

76 
	mFIO_NET_CMD_UPDATE_JOB
 = 18,

77 
	mFIO_NET_CMD_LOAD_FILE
 = 19,

78 
	mFIO_NET_CMD_VTRIGGER
 = 20,

79 
	mFIO_NET_CMD_SENDFILE
 = 21,

80 
	mFIO_NET_CMD_JOB_OPT
 = 22,

81 
	mFIO_NET_CMD_NR
 = 23,

83 
	mFIO_NET_CMD_F_MORE
 = 1UL << 0,

86 
	mFIO_NET_CMD_CRC_SZ
 = (
fio_√t_cmd
) -

87 2 * (
uöt16_t
),

89 
	mFIO_NET_NAME_MAX
 = 256,

91 
	mFIO_NET_CLIENT_TIMEOUT
 = 5000,

93 
	mFIO_PROBE_FLAG_ZLIB
 = 1UL << 0,

96 
	scmd_£ndfûe
 {

97 
uöt8_t
 
	m∑th
[
FIO_NET_NAME_MAX
];

100 
	scmd_£ndfûe_ª∂y
 {

101 
uöt32_t
 
	msize
;

102 
uöt32_t
 
	mîr‹
;

103 
uöt8_t
 
	md©a
[0];

110 
	scmd_våiggî_pdu
 {

111 
uöt16_t
 
	mÀn
;

112 
uöt8_t
 
	mcmd
[];

115 
	scmd_lﬂd_fûe_pdu
 {

116 
uöt16_t
 
	m«me_Àn
;

117 
uöt16_t
 
	m˛õ¡_ty≥
;

118 
uöt8_t
 
	mfûe
[];

121 
	scmd_ts_pdu
 {

122 
thªad_°©
 
	mts
;

123 
group_run_°©s
 
	mrs
;

126 
	scmd_du_pdu
 {

127 
disk_utû_°©
 
	mdus
;

128 
disk_utû_agg
 
	magg
;

131 
	scmd_˛õ¡_¥obe_pdu
 {

132 
uöt64_t
 
	mÊags
;

133 
uöt8_t
 
	m£rvî
[128];

136 
	scmd_¥obe_ª∂y_pdu
 {

137 
uöt8_t
 
	mho°«me
[64];

138 
uöt8_t
 
	mbigídün
;

139 
uöt8_t
 
	mfio_vîsi⁄
[32];

140 
uöt8_t
 
	mos
;

141 
uöt8_t
 
	m¨ch
;

142 
uöt8_t
 
	mbµ
;

143 
uöt32_t
 
	m˝us
;

144 
uöt64_t
 
	mÊags
;

147 
	scmd_sögÀ_löe_pdu
 {

148 
uöt16_t
 
	mÀn
;

149 
uöt8_t
 
	mãxt
[];

152 
	scmd_löe_pdu
 {

153 
uöt16_t
 
	mlöes
;

154 
uöt16_t
 
	m˛õ¡_ty≥
;

155 
cmd_sögÀ_löe_pdu
 
	m›ti⁄s
[];

158 
	scmd_job_pdu
 {

159 
uöt32_t
 
	mbuf_Àn
;

160 
uöt32_t
 
	m˛õ¡_ty≥
;

161 
uöt8_t
 
	mbuf
[0];

164 
	scmd_°¨t_pdu
 {

165 
uöt32_t
 
	mjobs
;

166 
uöt32_t
 
	m°©_ouçuts
;

169 
	scmd_íd_pdu
 {

170 
uöt32_t
 
	mîr‹
;

171 
uöt32_t
 
	msig«l
;

174 
	scmd_add_job_pdu
 {

175 
uöt32_t
 
	mthªad_numbî
;

176 
uöt32_t
 
	mgroupid
;

177 
thªad_›ti⁄s_∑ck
 
	mt›
;

180 
	scmd_ãxt_pdu
 {

181 
uöt32_t
 
	mÀvñ
;

182 
uöt32_t
 
	mbuf_Àn
;

183 
uöt64_t
 
	mlog_£c
;

184 
uöt64_t
 
	mlog_u£c
;

185 
uöt8_t
 
	mbuf
[0];

189 
	mXMIT_COMPRESSED
 = 1U,

190 
	mSTORE_COMPRESSED
 = 2U,

193 
	scmd_iﬁog_pdu
 {

194 
uöt64_t
 
	mƒ_ßm∂es
;

195 
uöt32_t
 
	mthªad_numbî
;

196 
uöt32_t
 
	mlog_ty≥
;

197 
uöt32_t
 
	mcom¥es£d
;

198 
uöt32_t
 
	mlog_off£t
;

199 
uöt32_t
 
	mlog_¥io
;

200 
uöt32_t
 
	mlog_hi°_cﬂr£√ss
;

201 
uöt8_t
 
	m«me
[
FIO_NET_NAME_MAX
];

202 
io_ßm∂e
 
	mßm∂es
[0];

205 
	scmd_job_›ti⁄
 {

206 
uöt16_t
 
	mglobÆ
;

207 
uöt16_t
 
	måunˇãd
;

208 
uöt32_t
 
	mgroupid
;

209 
uöt8_t
 
	m«me
[64];

210 
uöt8_t
 
	mvÆue
[128];

213 
fio_°¨t_£rvî
(*);

214 
fio_£rvî_ãxt_ouçut
(, c⁄° *, 
size_t
);

215 
fio_√t_£nd_cmd
(, 
uöt16_t
, c⁄° *, 
off_t
, 
uöt64_t
 *, 
Êi°_hód
 *);

216 
fio_√t_£nd_sim∂e_cmd
(, 
uöt16_t
, 
uöt64_t
, 
Êi°_hód
 *);

217 
fio_£rvî_£t_¨g
(const *);

218 
fio_£rvî_öã∫Æ_£t
(const *);

219 
fio_£rvî_∑r£_°rög
(c⁄° *, **, 
boﬁ
 *, *, 
ö_addr
 *, 
ö6_addr
 *, *);

220 
fio_£rvî_∑r£_ho°
(c⁄° *, , 
ö_addr
 *, 
ö6_addr
 *);

221 c⁄° *
fio_£rvî_›
();

222 
fio_£rvî_gŸ_sig«l
();

224 
fio_£rvî_£nd_ts
(
thªad_°©
 *, 
group_run_°©s
 *);

225 
fio_£rvî_£nd_gs
(
group_run_°©s
 *);

226 
fio_£rvî_£nd_du
();

227 
fio_£rvî_£nd_job_›ti⁄s
(
Êi°_hód
 *, );

228 
fio_£rvî_gë_vîify_°©e
(const *, , **);

229 
boﬁ
 
fio_£rvî_pﬁl_fd
(
fd
, 
evíts
, 
timeout
);

231 
fio_√t_cmd
 *
fio_√t_ªcv_cmd
(
sk
, 
boﬁ
 
waô
);

233 
fio_£nd_iﬁog
(
thªad_d©a
 *, 
io_log
 *, const *);

234 
fio_£rvî_£nd_add_job
(
thªad_d©a
 *);

235 
fio_£rvî_£nd_°¨t
(
thªad_d©a
 *);

236 
fio_√t_£nd_quô
(
sk
);

238 
fio_£rvî_¸óã_sk_key
();

239 
fio_£rvî_de°roy_sk_key
();

241 
boﬁ
 
exô_backíd
;

242 
fio_√t_p‹t
;

	@smalloc.c

5 
	~<sys/mm™.h
>

6 
	~<as£π.h
>

7 
	~<°rög.h
>

9 
	~"fio.h
"

10 
	~"fio_£m.h
"

11 
	~"os/os.h
"

12 
	~"smÆloc.h
"

13 
	~"log.h
"

15 
	#SMALLOC_REDZONE


	)

17 
	#SMALLOC_BPB
 32

	)

18 
	#SMALLOC_BPI
 ((Ë* 8)

	)

19 
	#SMALLOC_BPL
 (
SMALLOC_BPB
 * 
SMALLOC_BPI
)

	)

21 
	#INITIAL_SIZE
 16*1024*1024

	)

22 
	#INITIAL_POOLS
 8

	)

24 
	#MAX_POOLS
 16

	)

26 
	#SMALLOC_PRE_RED
 0xdódbìfU

	)

27 
	#SMALLOC_POST_RED
 0x5Ø55Ø5U

	)

29 
	gsmÆloc_poﬁ_size
 = 
INITIAL_SIZE
;

30 #ifde‡
SMALLOC_REDZONE


31 c⁄° 
	göt_mask
 = () - 1;

34 
	spoﬁ
 {

35 
fio_£m
 *
	mlock
;

36 *
	mm≠
;

37 *
	mbôm≠
;

38 
size_t
 
	m‰ì_blocks
;

39 
size_t
 
	mƒ_blocks
;

40 
size_t
 
	m√xt_n⁄_fuŒ
;

41 
size_t
 
	mmm≠_size
;

44 
	sblock_hdr
 {

45 
size_t
 
	msize
;

46 #ifde‡
SMALLOC_REDZONE


47 
	m¥îed
;

55 c⁄° 
boﬁ
 
	gíabÀ_smÆloc_debug
 = 
Ál£
;

57 
poﬁ
 *
	gmp
;

58 
	gƒ_poﬁs
;

59 
	gœ°_poﬁ
;

61 
ölöe
 
	$±r_vÆid
(
poﬁ
 *poﬁ, *
±r
)

63 
poﬁ_size
 = 
poﬁ
->
ƒ_blocks
 * 
SMALLOC_BPL
;

65  (
±r
 >
poﬁ
->
m≠
Ë&& (±∏<Öoﬁ->m≠ + 
poﬁ_size
);

66 
	}
}

68 
ölöe
 
size_t
 
	$size_to_blocks
(
size_t
 
size
)

70  (
size
 + 
SMALLOC_BPB
 - 1) / SMALLOC_BPB;

71 
	}
}

73 
	$blocks_ôî
(
poﬁ
 *poﬁ, 
poﬁ_idx
,

74 
idx
, 
size_t
 
ƒ_blocks
,

75 (*
func
)(*
m≠
, 
mask
))

78 
ƒ_blocks
) {

79 
this_blocks
, 
mask
;

80 *
m≠
;

82 i‡(
poﬁ_idx
 >
poﬁ
->
ƒ_blocks
)

85 
m≠
 = &
poﬁ
->
bôm≠
[
poﬁ_idx
];

87 
this_blocks
 = 
ƒ_blocks
;

88 i‡(
this_blocks
 + 
idx
 > 
SMALLOC_BPI
) {

89 
this_blocks
 = 
SMALLOC_BPI
 - 
idx
;

90 
idx
 = 
SMALLOC_BPI
 - 
this_blocks
;

93 i‡(
this_blocks
 =
SMALLOC_BPI
)

94 
mask
 = -1U;

96 
mask
 = ((1U << 
this_blocks
Ë- 1Ë<< 
idx
;

98 i‡(!
	`func
(
m≠
, 
mask
))

101 
ƒ_blocks
 -
this_blocks
;

102 
idx
 = 0;

103 
poﬁ_idx
++;

107 
	}
}

109 
	$mask_cmp
(*
m≠
, 
mask
)

111  !(*
m≠
 & 
mask
);

112 
	}
}

114 
	$mask_˛ór
(*
m≠
, 
mask
)

116 
	`as£π
((*
m≠
 & 
mask
) == mask);

117 *
m≠
 &~
mask
;

119 
	}
}

121 
	$mask_£t
(*
m≠
, 
mask
)

123 
	`as£π
(!(*
m≠
 & 
mask
));

124 *
m≠
 |
mask
;

126 
	}
}

128 
	$blocks_‰ì
(
poﬁ
 *poﬁ, 
poﬁ_idx
,

129 
idx
, 
size_t
 
ƒ_blocks
)

131  
	`blocks_ôî
(
poﬁ
, 
poﬁ_idx
, 
idx
, 
ƒ_blocks
, 
mask_cmp
);

132 
	}
}

134 
	$£t_blocks
(
poﬁ
 *poﬁ, 
poﬁ_idx
,

135 
idx
, 
size_t
 
ƒ_blocks
)

137 
	`blocks_ôî
(
poﬁ
, 
poﬁ_idx
, 
idx
, 
ƒ_blocks
, 
mask_£t
);

138 
	}
}

140 
	$˛ór_blocks
(
poﬁ
 *poﬁ, 
poﬁ_idx
,

141 
idx
, 
size_t
 
ƒ_blocks
)

143 
	`blocks_ôî
(
poﬁ
, 
poﬁ_idx
, 
idx
, 
ƒ_blocks
, 
mask_˛ór
);

144 
	}
}

146 
	$föd_√xt_zîo
(
w‹d
, 
°¨t
)

148 
	`as£π
(
w‹d
 != -1U);

149 
w‹d
 >>
°¨t
;

150  
	`ffz
(
w‹d
Ë+ 
°¨t
;

151 
	}
}

153 
boﬁ
 
	$add_poﬁ
(
poﬁ
 *poﬁ, 
Æloc_size
)

155 
bôm≠_blocks
;

156 
mm≠_Êags
;

157 *
±r
;

159 i‡(
ƒ_poﬁs
 =
MAX_POOLS
)

160  
Ál£
;

162 #ifde‡
SMALLOC_REDZONE


163 
Æloc_size
 += ();

165 
Æloc_size
 +(
block_hdr
);

166 i‡(
Æloc_size
 < 
INITIAL_SIZE
)

167 
Æloc_size
 = 
INITIAL_SIZE
;

170 
Æloc_size
 = (Æloc_sizê+ 
SMALLOC_BPL
 - 1) & ~(SMALLOC_BPL - 1);

171 
bôm≠_blocks
 = 
Æloc_size
 / 
SMALLOC_BPL
;

172 
Æloc_size
 +
bôm≠_blocks
 * ();

173 
poﬁ
->
mm≠_size
 = 
Æloc_size
;

175 
poﬁ
->
ƒ_blocks
 = 
bôm≠_blocks
;

176 
poﬁ
->
‰ì_blocks
 = 
bôm≠_blocks
 * 
SMALLOC_BPI
;

178 
mm≠_Êags
 = 
OS_MAP_ANON
;

179 #ifde‡
CONFIG_ESX


180 
mm≠_Êags
 |
MAP_PRIVATE
;

182 
mm≠_Êags
 |
MAP_SHARED
;

184 
±r
 = 
	`mm≠
(
NULL
, 
Æloc_size
, 
PROT_READ
|
PROT_WRITE
, 
mm≠_Êags
, -1, 0);

186 i‡(
±r
 =
MAP_FAILED
)

187 
out_Áû
;

189 
poﬁ
->
m≠
 = 
±r
;

190 
poﬁ
->
bôm≠
 = (*)((*Ë
±r
 + (poﬁ->
ƒ_blocks
 * 
SMALLOC_BPL
));

191 
	`mem£t
(
poﬁ
->
bôm≠
, 0, 
bôm≠_blocks
 * ());

193 
poﬁ
->
lock
 = 
	`fio_£m_öô
(
FIO_SEM_UNLOCKED
);

194 i‡(!
poﬁ
->
lock
)

195 
out_Áû
;

197 
ƒ_poﬁs
++;

198  
åue
;

199 
out_Áû
:

200 
	`log_îr
("smalloc: failedáddingÖool\n");

201 i‡(
poﬁ
->
m≠
)

202 
	`munm≠
(
poﬁ
->
m≠
,Öoﬁ->
mm≠_size
);

203  
Ál£
;

204 
	}
}

206 
	$söô
()

208 
boﬁ
 
ªt
;

209 
i
;

216 i‡(!
mp
) {

217 
mp
 = (
poﬁ
 *Ë
	`mm≠
(
NULL
,

218 
MAX_POOLS
 * (
poﬁ
),

219 
PROT_READ
 | 
PROT_WRITE
,

220 
OS_MAP_ANON
 | 
MAP_SHARED
, -1, 0);

222 
	`as£π
(
mp
 !
MAP_FAILED
);

225 
i
 = 0; i < 
INITIAL_POOLS
; i++) {

226 
ªt
 = 
	`add_poﬁ
(&
mp
[
ƒ_poﬁs
], 
smÆloc_poﬁ_size
);

227 i‡(!
ªt
)

235 
	`as£π
(
i
);

236 
	}
}

238 
	$˛ónup_poﬁ
(
poﬁ
 *pool)

244 
	`munm≠
(
poﬁ
->
m≠
,Öoﬁ->
mm≠_size
);

246 i‡(
poﬁ
->
lock
)

247 
	`fio_£m_ªmove
(
poﬁ
->
lock
);

248 
	}
}

250 
	$s˛ónup
()

252 
i
;

254 
i
 = 0; i < 
ƒ_poﬁs
; i++)

255 
	`˛ónup_poﬁ
(&
mp
[
i
]);

257 
	`munm≠
(
mp
, 
MAX_POOLS
 * (
poﬁ
));

258 
	}
}

260 #ifde‡
SMALLOC_REDZONE


261 *
	$po°ªd_±r
(
block_hdr
 *
hdr
)

263 
uöçå_t
 
±r
;

265 
±r
 = (
uöçå_t
Ë
hdr
 + hdr->
size
 - ();

266 
±r
 = (
uöçå_t
Ë
	`PTR_ALIGN
’å, 
öt_mask
);

268  (*Ë
±r
;

269 
	}
}

271 
	$fûl_ªdz⁄e
(
block_hdr
 *
hdr
)

273 *
po°ªd
 = 
	`po°ªd_±r
(
hdr
);

275 
hdr
->
¥îed
 = 
SMALLOC_PRE_RED
;

276 *
po°ªd
 = 
SMALLOC_POST_RED
;

277 
	}
}

279 
	$s‰ì_check_ªdz⁄e
(
block_hdr
 *
hdr
)

281 *
po°ªd
 = 
	`po°ªd_±r
(
hdr
);

283 i‡(
hdr
->
¥îed
 !
SMALLOC_PRE_RED
) {

284 
	`log_îr
("smallocÖreÑedzone destroyed!\n"

286 
hdr
+1, hdr->
¥îed
, 
SMALLOC_PRE_RED
);

287 
	`as£π
(0);

289 i‡(*
po°ªd
 !
SMALLOC_POST_RED
) {

290 
	`log_îr
("smallocÖostÑedzone destroyed!\n"

292 
hdr
+1, *
po°ªd
, 
SMALLOC_POST_RED
);

293 
	`as£π
(0);

295 
	}
}

297 
	$fûl_ªdz⁄e
(
block_hdr
 *
hdr
)

299 
	}
}

301 
	$s‰ì_check_ªdz⁄e
(
block_hdr
 *
hdr
)

303 
	}
}

306 
	$s‰ì_poﬁ
(
poﬁ
 *poﬁ, *
±r
)

308 
block_hdr
 *
hdr
;

309 
i
, 
idx
;

310 
off£t
;

312 i‡(!
±r
)

315 
±r
 -(*
hdr
);

316 
hdr
 = 
±r
;

318 
	`as£π
(
	`±r_vÆid
(
poﬁ
, 
±r
));

320 
	`s‰ì_check_ªdz⁄e
(
hdr
);

322 
off£t
 = 
±r
 - 
poﬁ
->
m≠
;

323 
i
 = 
off£t
 / 
SMALLOC_BPL
;

324 
idx
 = (
off£t
 % 
SMALLOC_BPL
Ë/ 
SMALLOC_BPB
;

326 
	`fio_£m_down
(
poﬁ
->
lock
);

327 
	`˛ór_blocks
(
poﬁ
, 
i
, 
idx
, 
	`size_to_blocks
(
hdr
->
size
));

328 i‡(
i
 < 
poﬁ
->
√xt_n⁄_fuŒ
)

329 
poﬁ
->
√xt_n⁄_fuŒ
 = 
i
;

330 
poﬁ
->
‰ì_blocks
 +
	`size_to_blocks
(
hdr
->
size
);

331 
	`fio_£m_up
(
poﬁ
->
lock
);

332 
	}
}

334 
	$s‰ì
(*
±r
)

336 
poﬁ
 *poﬁ = 
NULL
;

337 
i
;

339 i‡(!
±r
)

342 
i
 = 0; i < 
ƒ_poﬁs
; i++) {

343 i‡(
	`±r_vÆid
(&
mp
[
i
], 
±r
)) {

344 
poﬁ
 = &
mp
[
i
];

349 i‡(
poﬁ
) {

350 
	`s‰ì_poﬁ
(
poﬁ
, 
±r
);

354 
	`log_îr
("smÆloc:Öå %∞nŸ from smÆlo¯poﬁ\n", 
±r
);

355 
	}
}

357 
	$föd_be°_ödex
(
poﬁ
 *pool)

359 
i
;

361 
	`as£π
(
poﬁ
->
‰ì_blocks
);

363 
i
 = 
poﬁ
->
√xt_n⁄_fuŒ
;Öoﬁ->
bôm≠
[i] == -1U; i++) {

364 i‡(
i
 =
poﬁ
->
ƒ_blocks
 - 1) {

365 
j
;

367 
j
 = 0; j < 
poﬁ
->
ƒ_blocks
; j++)

368 i‡(
poﬁ
->
bôm≠
[
j
] != -1U)

369  
j
;

373  
i
;

374 
	}
}

376 *
	$__smÆloc_poﬁ
(
poﬁ
 *poﬁ, 
size_t
 
size
)

378 
size_t
 
ƒ_blocks
;

379 
i
;

380 
off£t
;

381 
œ°_idx
;

382 *
ªt
 = 
NULL
;

384 
	`fio_£m_down
(
poﬁ
->
lock
);

386 
ƒ_blocks
 = 
	`size_to_blocks
(
size
);

387 i‡(
ƒ_blocks
 > 
poﬁ
->
‰ì_blocks
)

388 
Áû
;

390 
poﬁ
->
√xt_n⁄_fuŒ
 = 
	`föd_be°_ödex
(pool);

392 
œ°_idx
 = 0;

393 
off£t
 = -1U;

394 
i
 = 
poﬁ
->
√xt_n⁄_fuŒ
;

395 
i
 < 
poﬁ
->
ƒ_blocks
) {

396 
idx
;

398 i‡(
poﬁ
->
bôm≠
[
i
] == -1U) {

399 
i
++;

400 
œ°_idx
 = 0;

404 
idx
 = 
	`föd_√xt_zîo
(
poﬁ
->
bôm≠
[
i
], 
œ°_idx
);

405 i‡(!
	`blocks_‰ì
(
poﬁ
, 
i
, 
idx
, 
ƒ_blocks
)) {

406 
idx
 +
ƒ_blocks
;

407 i‡(
idx
 < 
SMALLOC_BPI
)

408 
œ°_idx
 = 
idx
;

410 
œ°_idx
 = 0;

411 
idx
 >
SMALLOC_BPI
) {

412 
i
++;

413 
idx
 -
SMALLOC_BPI
;

418 
	`£t_blocks
(
poﬁ
, 
i
, 
idx
, 
ƒ_blocks
);

419 
off£t
 = 
i
 * 
SMALLOC_BPL
 + 
idx
 * 
SMALLOC_BPB
;

423 i‡(
i
 < 
poﬁ
->
ƒ_blocks
) {

424 
poﬁ
->
‰ì_blocks
 -
ƒ_blocks
;

425 
ªt
 = 
poﬁ
->
m≠
 + 
off£t
;

427 
Áû
:

428 
	`fio_£m_up
(
poﬁ
->
lock
);

429  
ªt
;

430 
	}
}

432 
size_t
 
	$size_to_Æloc_size
(
size_t
 
size
)

434 
size_t
 
Æloc_size
 = 
size
 + (
block_hdr
);

440 #ifde‡
SMALLOC_REDZONE


441 
Æloc_size
 += ();

442 
Æloc_size
 = (Æloc_sizê+ 
öt_mask
) & ~int_mask;

445  
Æloc_size
;

446 
	}
}

448 *
	$smÆloc_poﬁ
(
poﬁ
 *poﬁ, 
size_t
 
size
)

450 
size_t
 
Æloc_size
 = 
	`size_to_Æloc_size
(
size
);

451 *
±r
;

453 
±r
 = 
	`__smÆloc_poﬁ
(
poﬁ
, 
Æloc_size
);

454 i‡(
±r
) {

455 
block_hdr
 *
hdr
 = 
±r
;

457 
hdr
->
size
 = 
Æloc_size
;

458 
	`fûl_ªdz⁄e
(
hdr
);

460 
±r
 +(*
hdr
);

461 
	`mem£t
(
±r
, 0, 
size
);

464  
±r
;

465 
	}
}

467 
	$smÆloc_¥öt_bôm≠
(
poﬁ
 *pool)

469 
size_t
 
ƒ_blocks
 = 
poﬁ
->nr_blocks;

470 *
bôm≠
 = 
poﬁ
->bitmap;

471 
i
, 
j
;

472 *
buf„r
;

474 i‡(!
íabÀ_smÆloc_debug
)

477 
buf„r
 = 
	`mÆloc
(
SMALLOC_BPI
 + 1);

478 i‡(!
buf„r
)

480 
buf„r
[
SMALLOC_BPI
] = '\0';

482 
i
 = 0; i < 
ƒ_blocks
; i++) {

483 
löe
 = 
bôm≠
[
i
];

486 i‡(
löe
 == -1U)

489 
j
 = 0; j < 
SMALLOC_BPI
; j++)

490 i‡((1 << 
j
Ë& 
löe
)

491 
buf„r
[
SMALLOC_BPI
-1-
j
] = '1';

493 
buf„r
[
SMALLOC_BPI
-1-
j
] = '0';

495 
	`log_îr
("smÆloc: bôm≠ %5u, %s\n", 
i
, 
buf„r
);

498 
	`‰ì
(
buf„r
);

499 
	}
}

501 
	$smÆloc_debug
(
size_t
 
size
)

503 
i
;

504 
size_t
 
Æloc_size
 = 
	`size_to_Æloc_size
(
size
);

505 
size_t
 
Æloc_blocks
;

507 
Æloc_blocks
 = 
	`size_to_blocks
(
Æloc_size
);

509 i‡(
size
)

510 
	`log_îr
("smalloc: size = %lu,álloc_size = %lu, blocks = %lu\n",

511 (Ë
size
, (Ë
Æloc_size
,

512 (Ë
Æloc_blocks
);

513 
i
 = 0; i < 
ƒ_poﬁs
; i++) {

514 
	`log_îr
("smÆloc:Öoﬁ %u, fªe/tŸÆ block†%u/%u\n", 
i
,

515 (Ë(
mp
[
i
].
‰ì_blocks
),

516 (Ë(
mp
[
i
].
ƒ_blocks
*()*8));

517 i‡(
size
 && 
mp
[
i
].
‰ì_blocks
 >
Æloc_blocks
) {

518 *
±r
 = 
	`smÆloc_poﬁ
(&
mp
[
i
], 
size
);

519 i‡(
±r
) {

520 
	`s‰ì
(
±r
);

521 
œ°_poﬁ
 = 
i
;

522 
	`log_îr
("smÆloc: smÆloc_poﬁ %u suc˚eded\n", 
i
);

524 
	`log_îr
("smÆloc: smÆloc_poﬁ %u faûed\n", 
i
);

525 
	`log_îr
("smalloc:Çext_non_full=%u,Çr_blocks=%u\n",

526 (Ë
mp
[
i
].
√xt_n⁄_fuŒ
, (Ëmp[i].
ƒ_blocks
);

527 
	`smÆloc_¥öt_bôm≠
(&
mp
[
i
]);

531 
	}
}

533 *
	$smÆloc
(
size_t
 
size
)

535 
i
, 
íd_poﬁ
;

537 i‡(
size
 != () size)

538  
NULL
;

540 
i
 = 
œ°_poﬁ
;

541 
íd_poﬁ
 = 
ƒ_poﬁs
;

544 ; 
i
 < 
íd_poﬁ
; i++) {

545 *
±r
 = 
	`smÆloc_poﬁ
(&
mp
[
i
], 
size
);

547 i‡(
±r
) {

548 
œ°_poﬁ
 = 
i
;

549  
±r
;

552 i‡(
œ°_poﬁ
) {

553 
íd_poﬁ
 = 
œ°_poﬁ
;

554 
œ°_poﬁ
 = 
i
 = 0;

561 
	`log_îr
("smalloc: OOM. Consider using --alloc-sizeÅo increaseÅhe "

563 
	`smÆloc_debug
(
size
);

564  
NULL
;

565 
	}
}

567 *
	$sˇŒoc
(
size_t
 
nmemb
, size_à
size
)

569  
	`smÆloc
(
nmemb
 * 
size
);

570 
	}
}

572 *
	$smÆloc_°rdup
(c⁄° *
°r
)

574 *
±r
 = 
NULL
;

576 
±r
 = 
	`smÆloc
(
	`°æí
(
°r
) + 1);

577 i‡(
±r
)

578 
	`°r˝y
(
±r
, 
°r
);

579  
±r
;

580 
	}
}

	@smalloc.h

1 #i‚de‡
FIO_SMALLOC_H


2 
	#FIO_SMALLOC_H


	)

4 
	~<°ddef.h
>

6 *
smÆloc
(
size_t
);

7 *
sˇŒoc
(
size_t
, size_t);

8 
s‰ì
(*);

9 *
smÆloc_°rdup
(const *);

10 
söô
();

11 
s˛ónup
();

12 
smÆloc_debug
(
size_t
);

14 
smÆloc_poﬁ_size
;

	@stat.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<°dlib.h
>

4 
	~<sys/time.h
>

5 
	~<sys/°©.h
>

6 
	~<m©h.h
>

8 
	~"fio.h
"

9 
	~"diskutû.h
"

10 
	~"lib/õì754.h
"

11 
	~"js⁄.h
"

12 
	~"lib/gërußge.h
"

13 
	~"idÀtime.h
"

14 
	~"lib/pow2.h
"

15 
	~"lib/ouçut_buf„r.h
"

16 
	~"hñ≥r_thªad.h
"

17 
	~"smÆloc.h
"

18 
	~"zbd.h
"

19 
	~"o¶ib/a•rötf.h
"

21 #ifde‡
WIN32


22 
	#LOG_MSEC_SLACK
 2

	)

24 
	#LOG_MSEC_SLACK
 1

	)

27 
fio_£m
 *
	g°©_£m
;

29 
	$˛ór_rußge_°©
(
thªad_d©a
 *
td
)

31 
thªad_°©
 *
ts
 = &
td
->ts;

33 
	`fio_gërußge
(&
td
->
ru_°¨t
);

34 
ts
->
u§_time
 =Ås->
sys_time
 = 0;

35 
ts
->
˘x
 = 0;

36 
ts
->
möf
 =Ås->
majf
 = 0;

37 
	}
}

39 
	$upd©e_rußge_°©
(
thªad_d©a
 *
td
)

41 
thªad_°©
 *
ts
 = &
td
->ts;

43 
	`fio_gërußge
(&
td
->
ru_íd
);

44 
ts
->
u§_time
 +
	`mtime_sö˚_tv
(&
td
->
ru_°¨t
.
ru_utime
,

45 &
td
->
ru_íd
.
ru_utime
);

46 
ts
->
sys_time
 +
	`mtime_sö˚_tv
(&
td
->
ru_°¨t
.
ru_°ime
,

47 &
td
->
ru_íd
.
ru_°ime
);

48 
ts
->
˘x
 +
td
->
ru_íd
.
ru_nvcsw
 +Åd->ru_íd.
ru_nivcsw


49 - (
td
->
ru_°¨t
.
ru_nvcsw
 +Åd->ru_°¨t.
ru_nivcsw
);

50 
ts
->
möf
 +
td
->
ru_íd
.
ru_möÊt
 -Åd->
ru_°¨t
.ru_minflt;

51 
ts
->
majf
 +
td
->
ru_íd
.
ru_majÊt
 -Åd->
ru_°¨t
.ru_majflt;

53 
	`mem˝y
(&
td
->
ru_°¨t
, &td->
ru_íd
, (td->ru_end));

54 
	}
}

65 
	$∂©_vÆ_to_idx
(
vÆ
)

67 
msb
, 
îr‹_bôs
, 
ba£
, 
off£t
, 
idx
;

70 i‡(
vÆ
 == 0)

71 
msb
 = 0;

73 
msb
 = ((
vÆ
)*8Ë- 
	`__buûtö_˛zŒ
(val) - 1;

79 i‡(
msb
 <
FIO_IO_U_PLAT_BITS
)

80  
vÆ
;

83 
îr‹_bôs
 = 
msb
 - 
FIO_IO_U_PLAT_BITS
;

86 
ba£
 = (
îr‹_bôs
 + 1Ë<< 
FIO_IO_U_PLAT_BITS
;

92 
off£t
 = (
FIO_IO_U_PLAT_VAL
 - 1Ë& (
vÆ
 >> 
îr‹_bôs
);

95 
idx
 = (
ba£
 + 
off£t
Ë< (
FIO_IO_U_PLAT_NR
 - 1) ?

96 (
ba£
 + 
off£t
Ë: (
FIO_IO_U_PLAT_NR
 - 1);

98  
idx
;

99 
	}
}

105 
	$∂©_idx_to_vÆ
(
idx
)

107 
îr‹_bôs
;

108 
k
, 
ba£
;

110 
	`as£π
(
idx
 < 
FIO_IO_U_PLAT_NR
);

114 i‡(
idx
 < (
FIO_IO_U_PLAT_VAL
 << 1))

115  
idx
;

118 
îr‹_bôs
 = (
idx
 >> 
FIO_IO_U_PLAT_BITS
) - 1;

119 
ba£
 = ((Ë1Ë<< (
îr‹_bôs
 + 
FIO_IO_U_PLAT_BITS
);

122 
k
 = 
idx
 % 
FIO_IO_U_PLAT_VAL
;

125  
ba£
 + ((
k
 + 0.5Ë* (1 << 
îr‹_bôs
));

126 
	}
}

128 
	$doubÀ_cmp
(c⁄° *
a
, c⁄° *
b
)

130 c⁄° 
fio_Â64_t
 
Á
 = *(c⁄° fio_Â64_à*Ë
a
;

131 c⁄° 
fio_Â64_t
 
fb
 = *(c⁄° fio_Â64_à*Ë
b
;

132 
cmp
 = 0;

134 i‡(
Á
.
u
.
f
 > 
fb
.u.f)

135 
cmp
 = 1;

136 i‡(
Á
.
u
.
f
 < 
fb
.u.f)

137 
cmp
 = -1;

139  
cmp
;

140 
	}
}

142 
	$ˇlc_˛©_≥r˚¡ûes
(
uöt64_t
 *
io_u_∂©
, 
ƒ
,

143 
fio_Â64_t
 *
∂i°
, **
ouçut
,

144 *
maxv
, *
möv
)

146 
sum
 = 0;

147 
Àn
, 
i
, 
j
 = 0;

148 *
ovÆs
 = 
NULL
;

149 
boﬁ
 
is_œ°
;

151 *
möv
 = -1ULL;

152 *
maxv
 = 0;

154 
Àn
 = 0;

155 
Àn
 < 
FIO_IO_U_LIST_MAX_LEN
 && 
∂i°
[Àn].
u
.
f
 != 0.0)

156 
Àn
++;

158 i‡(!
Àn
)

166 i‡(
Àn
 > 1)

167 
	`qs‹t
(
∂i°
, 
Àn
, ’li°[0]), 
doubÀ_cmp
);

169 
ovÆs
 = 
	`mÆloc
(
Àn
 * (*ovals));

170 i‡(!
ovÆs
)

176 
is_œ°
 = 
Ál£
;

177 
i
 = 0; i < 
FIO_IO_U_PLAT_NR
 && !
is_œ°
; i++) {

178 
sum
 +
io_u_∂©
[
i
];

179 
sum
 >((Ë
∂i°
[
j
].
u
.
f
 / 100.0 * 
ƒ
)) {

180 
	`as£π
(
∂i°
[
j
].
u
.
f
 <= 100.0);

182 
ovÆs
[
j
] = 
	`∂©_idx_to_vÆ
(
i
);

183 i‡(
ovÆs
[
j
] < *
möv
)

184 *
möv
 = 
ovÆs
[
j
];

185 i‡(
ovÆs
[
j
] > *
maxv
)

186 *
maxv
 = 
ovÆs
[
j
];

188 
is_œ°
 = (
j
 =
Àn
 - 1) != 0;

189 i‡(
is_œ°
)

192 
j
++;

196 i‡(!
is_œ°
)

197 
	`log_îr
("fio:Érror calculatingÜatencyÖercentiles\n");

199 *
ouçut
 = 
ovÆs
;

200  
Àn
;

201 
	}
}

206 
	$show_˛©_≥r˚¡ûes
(
uöt64_t
 *
io_u_∂©
, 
ƒ
,

207 
fio_Â64_t
 *
∂i°
, 
¥ecisi⁄
,

208 c⁄° *
¥e
, 
buf_ouçut
 *
out
)

210 
divis‹
, 
Àn
, 
i
, 
j
 = 0;

211 
möv
, 
maxv
;

212 *
ovÆs
;

213 
≥r_löe
, 
sˇÀ_down
, 
time_width
;

214 
boﬁ
 
is_œ°
;

215 
fmt
[32];

217 
Àn
 = 
	`ˇlc_˛©_≥r˚¡ûes
(
io_u_∂©
, 
ƒ
, 
∂i°
, &
ovÆs
, &
maxv
, &
möv
);

218 i‡(!
Àn
 || !
ovÆs
)

225 i‡(
möv
 > 2000000 && 
maxv
 > 99999999ULL) {

226 
sˇÀ_down
 = 2;

227 
divis‹
 = 1000000;

228 
	`log_buf
(
out
, " %†≥r˚¡ûe†(m£c):\¿ |", 
¥e
);

229 } i‡(
möv
 > 2000 && 
maxv
 > 99999) {

230 
sˇÀ_down
 = 1;

231 
divis‹
 = 1000;

232 
	`log_buf
(
out
, " %†≥r˚¡ûe†(u£c):\¿ |", 
¥e
);

234 
sˇÀ_down
 = 0;

235 
divis‹
 = 1;

236 
	`log_buf
(
out
, " %†≥r˚¡ûe†“£c):\¿ |", 
¥e
);

240 
time_width
 = 
	`max
(5, (Ë(
	`log10
(
maxv
 / 
divis‹
) + 1));

241 
	`¢¥ötf
(
fmt
, (fmt), " %%%u.%u·h=[%%%dŒu]%%c", 
¥ecisi⁄
 + 3,

242 
¥ecisi⁄
, 
time_width
);

244 
≥r_löe
 = (80 - 7Ë/ (
¥ecisi⁄
 + 10 + 
time_width
);

246 
j
 = 0; j < 
Àn
; j++) {

248 i‡(
j
 !0 && (j % 
≥r_löe
) == 0)

249 
	`log_buf
(
out
, " |");

252 
is_œ°
 = (
j
 =
Àn
 - 1) != 0;

254 
i
 = 0; i < 
sˇÀ_down
; i++)

255 
ovÆs
[
j
] = (ovals[j] + 999) / 1000;

257 
	`log_buf
(
out
, 
fmt
, 
∂i°
[
j
].
u
.
f
, 
ovÆs
[j], 
is_œ°
 ? '\n' : ',');

259 i‡(
is_œ°
)

262 i‡((
j
 % 
≥r_löe
) ==Öer_line - 1)

263 
	`log_buf
(
out
, "\n");

266 
	`‰ì
(
ovÆs
);

267 
	}
}

269 
	$gë_ƒ_¥ios_wôh_ßm∂es
(
thªad_°©
 *
ts
, 
fio_ddú
 
ddú
)

271 
i
, 
ƒ_¥ios_wôh_ßm∂es
 = 0;

273 
i
 = 0; i < 
ts
->
ƒ_˛©_¥io
[
ddú
]; i++) {

274 i‡(
ts
->
˛©_¥io
[
ddú
][
i
].
˛©_°©
.
ßm∂es
)

275 
ƒ_¥ios_wôh_ßm∂es
++;

278  
ƒ_¥ios_wôh_ßm∂es
;

279 
	}
}

281 
boﬁ
 
	$ˇlc_œt
(
io_°©
 *
is
, *
mö
,

282 *
max
, *
món
, *
dev
)

284 
n
 = (Ë
is
->
ßm∂es
;

286 i‡(
n
 == 0)

287  
Ál£
;

289 *
mö
 = 
is
->
mö_vÆ
;

290 *
max
 = 
is
->
max_vÆ
;

291 *
món
 = 
is
->món.
u
.
f
;

293 i‡(
n
 > 1.0)

294 *
dev
 = 
	`sqπ
(
is
->
S
.
u
.
f
 / (
n
 - 1.0));

296 *
dev
 = 0;

298  
åue
;

299 
	}
}

301 
	$show_mixed_group_°©s
(
group_run_°©s
 *
rs
, 
buf_ouçut
 *
out
)

303 *
io
, *
agg
, *
mö
, *
max
;

304 *
iﬂ…
, *
aggÆt
, *
möÆt
, *
maxÆt
;

305 
uöt64_t
 
io_mix
 = 0, 
agg_mix
 = 0, 
mö_mix
 = -1, 
max_mix
 = 0;

306 
uöt64_t
 
mö_run
 = -1, 
max_run
 = 0;

307 c⁄° 
i2p
 = 
	`is_powî_of_2
(
rs
->
kb_ba£
);

308 
i
;

310 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

311 i‡(!
rs
->
max_run
[
i
])

313 
io_mix
 +
rs
->
iobyãs
[
i
];

314 
agg_mix
 +
rs
->
agg
[
i
];

315 
mö_mix
 = mö_mix < 
rs
->
mö_bw
[
i
] ? min_mix :Ñs->min_bw[i];

316 
max_mix
 = max_mix > 
rs
->
max_bw
[
i
] ? max_mix :Ñs->max_bw[i];

317 
mö_run
 = mö_ru¿< 
rs
->mö_run[
i
] ? min_run :Ñs->min_run[i];

318 
max_run
 = max_ru¿> 
rs
->max_run[
i
] ? max_run :Ñs->max_run[i];

320 
io
 = 
	`num2°r
(
io_mix
, 
rs
->
sig_figs
, 1, 
i2p
, 
N2S_BYTE
);

321 
iﬂ…
 = 
	`num2°r
(
io_mix
, 
rs
->
sig_figs
, 1, !
i2p
, 
N2S_BYTE
);

322 
agg
 = 
	`num2°r
(
agg_mix
, 
rs
->
sig_figs
, 1, 
i2p
,Ñs->
unô_ba£
);

323 
aggÆt
 = 
	`num2°r
(
agg_mix
, 
rs
->
sig_figs
, 1, !
i2p
,Ñs->
unô_ba£
);

324 
mö
 = 
	`num2°r
(
mö_mix
, 
rs
->
sig_figs
, 1, 
i2p
,Ñs->
unô_ba£
);

325 
möÆt
 = 
	`num2°r
(
mö_mix
, 
rs
->
sig_figs
, 1, !
i2p
,Ñs->
unô_ba£
);

326 
max
 = 
	`num2°r
(
max_mix
, 
rs
->
sig_figs
, 1, 
i2p
,Ñs->
unô_ba£
);

327 
maxÆt
 = 
	`num2°r
(
max_mix
, 
rs
->
sig_figs
, 1, !
i2p
,Ñs->
unô_ba£
);

328 
	`log_buf
(
out
, " MIXED: bw=%s (%s), %s-%s (%s-%s), io=%s (%s),Ñun=%llu-%llumsec\n",

329 
agg
, 
aggÆt
, 
mö
, 
max
, 
möÆt
, 
maxÆt
, 
io
, 
iﬂ…
,

330 (Ë
mö_run
,

331 (Ë
max_run
);

332 
	`‰ì
(
io
);

333 
	`‰ì
(
agg
);

334 
	`‰ì
(
mö
);

335 
	`‰ì
(
max
);

336 
	`‰ì
(
iﬂ…
);

337 
	`‰ì
(
aggÆt
);

338 
	`‰ì
(
möÆt
);

339 
	`‰ì
(
maxÆt
);

340 
	}
}

342 
	$show_group_°©s
(
group_run_°©s
 *
rs
, 
buf_ouçut
 *
out
)

344 *
io
, *
agg
, *
mö
, *
max
;

345 *
iﬂ…
, *
aggÆt
, *
möÆt
, *
maxÆt
;

346 c⁄° *
°r
[] = { " READ", " WRITE" , " TRIM"};

347 
i
;

349 
	`log_buf
(
out
, "\nRu¿°©u†grou∞%d (Æ»jobs):\n", 
rs
->
groupid
);

351 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

352 c⁄° 
i2p
 = 
	`is_powî_of_2
(
rs
->
kb_ba£
);

354 i‡(!
rs
->
max_run
[
i
])

357 
io
 = 
	`num2°r
(
rs
->
iobyãs
[
i
],Ñs->
sig_figs
, 1, 
i2p
, 
N2S_BYTE
);

358 
iﬂ…
 = 
	`num2°r
(
rs
->
iobyãs
[
i
],Ñs->
sig_figs
, 1, !
i2p
, 
N2S_BYTE
);

359 
agg
 = 
	`num2°r
(
rs
->agg[
i
],Ñs->
sig_figs
, 1, 
i2p
,Ñs->
unô_ba£
);

360 
aggÆt
 = 
	`num2°r
(
rs
->
agg
[
i
],Ñs->
sig_figs
, 1, !
i2p
,Ñs->
unô_ba£
);

361 
mö
 = 
	`num2°r
(
rs
->
mö_bw
[
i
],Ñs->
sig_figs
, 1, 
i2p
,Ñs->
unô_ba£
);

362 
möÆt
 = 
	`num2°r
(
rs
->
mö_bw
[
i
],Ñs->
sig_figs
, 1, !
i2p
,Ñs->
unô_ba£
);

363 
max
 = 
	`num2°r
(
rs
->
max_bw
[
i
],Ñs->
sig_figs
, 1, 
i2p
,Ñs->
unô_ba£
);

364 
maxÆt
 = 
	`num2°r
(
rs
->
max_bw
[
i
],Ñs->
sig_figs
, 1, !
i2p
,Ñs->
unô_ba£
);

365 
	`log_buf
(
out
, "%s: bw=%s (%s), %s-%s (%s-%s), io=%s (%s),Ñun=%llu-%llumsec\n",

366 (
rs
->
unifõd_rw_ªp
 =
UNIFIED_MIXED
Ë? " MIXED" : 
°r
[
i
],

367 
agg
, 
aggÆt
, 
mö
, 
max
, 
möÆt
, 
maxÆt
, 
io
, 
iﬂ…
,

368 (Ë
rs
->
mö_run
[
i
],

369 (Ë
rs
->
max_run
[
i
]);

371 
	`‰ì
(
io
);

372 
	`‰ì
(
agg
);

373 
	`‰ì
(
mö
);

374 
	`‰ì
(
max
);

375 
	`‰ì
(
iﬂ…
);

376 
	`‰ì
(
aggÆt
);

377 
	`‰ì
(
möÆt
);

378 
	`‰ì
(
maxÆt
);

382 i‡(
rs
->
unifõd_rw_ªp
 =
UNIFIED_BOTH
)

383 
	`show_mixed_group_°©s
(
rs
, 
out
);

384 
	}
}

386 
	$°©_ˇlc_di°
(
uöt64_t
 *
m≠
, 
tŸÆ
, *
io_u_di°
)

388 
i
;

393 
i
 = 0; i < 
FIO_IO_U_MAP_NR
; i++) {

394 i‡(
tŸÆ
) {

395 
io_u_di°
[
i
] = (Ë
m≠
[i] / (Ë
tŸÆ
;

396 
io_u_di°
[
i
] *= 100.0;

397 i‡(
io_u_di°
[
i
] < 0.1 && 
m≠
[i])

398 
io_u_di°
[
i
] = 0.1;

400 
io_u_di°
[
i
] = 0.0;

402 
	}
}

404 
	$°©_ˇlc_œt
(
thªad_°©
 *
ts
, *
d°
,

405 
uöt64_t
 *
§c
, 
ƒ
)

407 
tŸÆ
 = 
	`ddú_rw_sum
(
ts
->
tŸÆ_io_u
);

408 
i
;

413 
i
 = 0; i < 
ƒ
; i++) {

414 i‡(
tŸÆ
) {

415 
d°
[
i
] = (Ë
§c
[i] / (Ë
tŸÆ
;

416 
d°
[
i
] *= 100.0;

417 i‡(
d°
[
i
] < 0.01 && 
§c
[i])

418 
d°
[
i
] = 0.01;

420 
d°
[
i
] = 0.0;

422 
	}
}

428 
	$°©_ˇlc_œt_nu
(
thªad_°©
 *
ts
, *
io_u_œt_u
)

430 
¡ŸÆ
 = 0, 
tŸÆ
 = 
	`ddú_rw_sum
(
ts
->
tŸÆ_io_u
);

431 
i
;

433 
	`°©_ˇlc_œt
(
ts
, 
io_u_œt_u
,Ås->io_u_œt_u, 
FIO_IO_U_LAT_U_NR
);

435 
i
 = 0; i < 
FIO_IO_U_LAT_N_NR
; i++)

436 
¡ŸÆ
 +
ts
->
io_u_œt_n
[
i
];

438 
io_u_œt_u
[0] +100.0 * (Ë
¡ŸÆ
 / (Ë
tŸÆ
;

439 
	}
}

441 
	$°©_ˇlc_œt_n
(
thªad_°©
 *
ts
, *
io_u_œt
)

443 
	`°©_ˇlc_œt
(
ts
, 
io_u_œt
,Ås->
io_u_œt_n
, 
FIO_IO_U_LAT_N_NR
);

444 
	}
}

446 
	$°©_ˇlc_œt_u
(
thªad_°©
 *
ts
, *
io_u_œt
)

448 
	`°©_ˇlc_œt
(
ts
, 
io_u_œt
,Ås->
io_u_œt_u
, 
FIO_IO_U_LAT_U_NR
);

449 
	}
}

451 
	$°©_ˇlc_œt_m
(
thªad_°©
 *
ts
, *
io_u_œt
)

453 
	`°©_ˇlc_œt
(
ts
, 
io_u_œt
,Ås->
io_u_œt_m
, 
FIO_IO_U_LAT_M_NR
);

454 
	}
}

456 
	$di•œy_œt
(c⁄° *
«me
, 
mö
,

457 
max
, 
món
, 
dev
,

458 
buf_ouçut
 *
out
)

460 c⁄° *
ba£
 = "(nsec)";

461 *
möp
, *
maxp
;

463 i‡(
	`n£c_to_m£c
(&
mö
, &
max
, &
món
, &
dev
))

464 
ba£
 = "(msec)";

465 i‡(
	`n£c_to_u£c
(&
mö
, &
max
, &
món
, &
dev
))

466 
ba£
 = "(usec)";

468 
möp
 = 
	`num2°r
(
mö
, 6, 1, 0, 
N2S_NONE
);

469 
maxp
 = 
	`num2°r
(
max
, 6, 1, 0, 
N2S_NONE
);

471 
	`log_buf
(
out
, " %s %s: min=%s, max=%s,ávg=%5.02f,"

472 " stdev=%5.02f\n", 
«me
, 
ba£
, 
möp
, 
maxp
, 
món
, 
dev
);

474 
	`‰ì
(
möp
);

475 
	`‰ì
(
maxp
);

476 
	}
}

478 
thªad_°©
 *
	$gí_mixed_ddú_°©s_‰om_ts
(
thªad_°©
 *
ts
)

480 
thªad_°©
 *
ts_l˛
;

486 
ts_l˛
 = 
	`mÆloc
((
thªad_°©
));

487 i‡(!
ts_l˛
) {

488 
	`log_îr
("fio: failedÅoállocateÜocalÅhread stat\n");

489  
NULL
;

492 
	`öô_thªad_°©
(
ts_l˛
);

495 
ts_l˛
->
unifõd_rw_ªp
 = 
UNIFIED_MIXED
;

496 
ts_l˛
->
œt_≥r˚¡ûes
 = 
ts
->lat_percentiles;

497 
ts_l˛
->
˛©_≥r˚¡ûes
 = 
ts
->clat_percentiles;

498 
ts_l˛
->
¶©_≥r˚¡ûes
 = 
ts
->slat_percentiles;

499 
ts_l˛
->
≥r˚¡ûe_¥ecisi⁄
 = 
ts
->percentile_precision;

500 
	`mem˝y
(
ts_l˛
->
≥r˚¡ûe_li°
, 
ts
->percentile_list, (ts->percentile_list));

502 
	`sum_thªad_°©s
(
ts_l˛
, 
ts
);

504  
ts_l˛
;

505 
	}
}

507 
	$c⁄vît_agg_kbyãs_≥r˚¡
(
group_run_°©s
 *
rs
,

508 
fio_ddú
 
ddú
, 
món
)

510 
p_of_agg
 = 100.0;

511 i‡(
rs
 &&Ñs->
agg
[
ddú
] > 1024) {

512 
p_of_agg
 = 
món
 * 100.0 / (Ë(
rs
->
agg
[
ddú
] / 1024.0);

514 i‡(
p_of_agg
 > 100.0)

515 
p_of_agg
 = 100.0;

517  
p_of_agg
;

518 
	}
}

520 
	$show_ddú_°©us
(
group_run_°©s
 *
rs
, 
thªad_°©
 *
ts
,

521 
fio_ddú
 
ddú
, 
buf_ouçut
 *
out
)

523 
ru¡
;

524 
mö
, 
max
, 
bw
, 
i›s
;

525 
món
, 
dev
;

526 *
io_p
, *
bw_p
, *
bw_p_Æt
, *
i›s_p
, *
po°_°
 = 
NULL
;

527 
i2p
, 
i
;

528 c⁄° *
˛©_ty≥
 = 
ts
->
œt_≥r˚¡ûes
 ? "lat" : "clat";

530 i‡(
	`ddú_sync
(
ddú
)) {

531 i‡(
	`ˇlc_œt
(&
ts
->
sync_°©
, &
mö
, &
max
, &
món
, &
dev
)) {

532 
	`log_buf
(
out
, " %s:\n", "fsync/fdatasync/sync_file_range");

533 
	`di•œy_œt
(
	`io_ddú_«me
(
ddú
), 
mö
, 
max
, 
món
, 
dev
, 
out
);

534 
	`show_˛©_≥r˚¡ûes
(
ts
->
io_u_sync_∂©
,

535 
ts
->
sync_°©
.
ßm∂es
,

536 
ts
->
≥r˚¡ûe_li°
,

537 
ts
->
≥r˚¡ûe_¥ecisi⁄
,

538 
	`io_ddú_«me
(
ddú
), 
out
);

543 
	`as£π
(
	`ddú_rw
(
ddú
));

545 i‡(!
ts
->
ru¡ime
[
ddú
])

548 
i2p
 = 
	`is_powî_of_2
(
rs
->
kb_ba£
);

549 
ru¡
 = 
ts
->
ru¡ime
[
ddú
];

551 
bw
 = (1000 * 
ts
->
io_byãs
[
ddú
]Ë/ 
ru¡
;

552 
io_p
 = 
	`num2°r
(
ts
->
io_byãs
[
ddú
],Ås->
sig_figs
, 1, 
i2p
, 
N2S_BYTE
);

553 
bw_p
 = 
	`num2°r
(
bw
, 
ts
->
sig_figs
, 1, 
i2p
,Ås->
unô_ba£
);

554 
bw_p_Æt
 = 
	`num2°r
(
bw
, 
ts
->
sig_figs
, 1, !
i2p
,Ås->
unô_ba£
);

556 
i›s
 = (1000 * (
uöt64_t
)
ts
->
tŸÆ_io_u
[
ddú
]Ë/ 
ru¡
;

557 
i›s_p
 = 
	`num2°r
(
i›s
, 
ts
->
sig_figs
, 1, 0, 
N2S_NONE
);

558 i‡(
ddú
 =
DDIR_WRITE
)

559 
po°_°
 = 
	`zbd_wrôe_°©us
(
ts
);

560 i‡(
ddú
 =
DDIR_READ
 && 
ts
->
ˇchehô
 &&Ås->
ˇchemiss
) {

561 
uöt64_t
 
tŸÆ
;

562 
hô
;

564 
tŸÆ
 = 
ts
->
ˇchehô
 +Ås->
ˇchemiss
;

565 
hô
 = (Ë
ts
->
ˇchehô
 / (Ë
tŸÆ
;

566 
hô
 *= 100.0;

567 i‡(
	`a•rötf
(&
po°_°
, "; Cachehô=%0.2f%%", 
hô
) < 0)

568 
po°_°
 = 
NULL
;

571 
	`log_buf
(
out
, " %s: IOPS=%s, BW=%s (%s)(%s/%llumsec)%s\n",

572 (
ts
->
unifõd_rw_ªp
 =
UNIFIED_MIXED
Ë? "mixed" : 
	`io_ddú_«me
(
ddú
),

573 
i›s_p
, 
bw_p
, 
bw_p_Æt
, 
io_p
,

574 (Ë
ts
->
ru¡ime
[
ddú
],

575 
po°_°
 ? : "");

577 
	`‰ì
(
po°_°
);

578 
	`‰ì
(
io_p
);

579 
	`‰ì
(
bw_p
);

580 
	`‰ì
(
bw_p_Æt
);

581 
	`‰ì
(
i›s_p
);

583 i‡(
	`ˇlc_œt
(&
ts
->
¶©_°©
[
ddú
], &
mö
, &
max
, &
món
, &
dev
))

584 
	`di•œy_œt
("¶©", 
mö
, 
max
, 
món
, 
dev
, 
out
);

585 i‡(
	`ˇlc_œt
(&
ts
->
˛©_°©
[
ddú
], &
mö
, &
max
, &
món
, &
dev
))

586 
	`di•œy_œt
("˛©", 
mö
, 
max
, 
món
, 
dev
, 
out
);

587 i‡(
	`ˇlc_œt
(&
ts
->
œt_°©
[
ddú
], &
mö
, &
max
, &
món
, &
dev
))

588 
	`di•œy_œt
("Ü©", 
mö
, 
max
, 
món
, 
dev
, 
out
);

591 i‡(
	`gë_ƒ_¥ios_wôh_ßm∂es
(
ts
, 
ddú
) >= 2) {

592 
i
 = 0; i < 
ts
->
ƒ_˛©_¥io
[
ddú
]; i++) {

593 i‡(
	`ˇlc_œt
(&
ts
->
˛©_¥io
[
ddú
][
i
].
˛©_°©
, &
mö
,

594 &
max
, &
món
, &
dev
)) {

595 
buf
[64];

597 
	`¢¥ötf
(
buf
, (buf),

599 
˛©_ty≥
,

600 
ts
->
˛©_¥io
[
ddú
][
i
].
i›rio
 >> 13,

601 
ts
->
˛©_¥io
[
ddú
][
i
].
i›rio
 & 7);

602 
	`di•œy_œt
(
buf
, 
mö
, 
max
, 
món
, 
dev
, 
out
);

607 i‡(
ts
->
¶©_≥r˚¡ûes
 &&Ås->
¶©_°©
[
ddú
].
ßm∂es
 > 0)

608 
	`show_˛©_≥r˚¡ûes
(
ts
->
io_u_∂©
[
FIO_SLAT
][
ddú
],

609 
ts
->
¶©_°©
[
ddú
].
ßm∂es
,

610 
ts
->
≥r˚¡ûe_li°
,

611 
ts
->
≥r˚¡ûe_¥ecisi⁄
, "¶©", 
out
);

612 i‡(
ts
->
˛©_≥r˚¡ûes
 &&Ås->
˛©_°©
[
ddú
].
ßm∂es
 > 0)

613 
	`show_˛©_≥r˚¡ûes
(
ts
->
io_u_∂©
[
FIO_CLAT
][
ddú
],

614 
ts
->
˛©_°©
[
ddú
].
ßm∂es
,

615 
ts
->
≥r˚¡ûe_li°
,

616 
ts
->
≥r˚¡ûe_¥ecisi⁄
, "˛©", 
out
);

617 i‡(
ts
->
œt_≥r˚¡ûes
 &&Ås->
œt_°©
[
ddú
].
ßm∂es
 > 0)

618 
	`show_˛©_≥r˚¡ûes
(
ts
->
io_u_∂©
[
FIO_LAT
][
ddú
],

619 
ts
->
œt_°©
[
ddú
].
ßm∂es
,

620 
ts
->
≥r˚¡ûe_li°
,

621 
ts
->
≥r˚¡ûe_¥ecisi⁄
, "œt", 
out
);

623 i‡(
ts
->
˛©_≥r˚¡ûes
 ||Ås->
œt_≥r˚¡ûes
) {

624 
¥io_«me
[64];

625 
uöt64_t
 
ßm∂es
;

627 i‡(
ts
->
œt_≥r˚¡ûes
)

628 
ßm∂es
 = 
ts
->
œt_°©
[
ddú
].samples;

630 
ßm∂es
 = 
ts
->
˛©_°©
[
ddú
].samples;

633 i‡(
	`gë_ƒ_¥ios_wôh_ßm∂es
(
ts
, 
ddú
) >= 2) {

634 
i
 = 0; i < 
ts
->
ƒ_˛©_¥io
[
ddú
]; i++) {

635 
uöt64_t
 
¥io_ßm∂es
 = 
ts
->
˛©_¥io
[
ddú
][
i
].
˛©_°©
.
ßm∂es
;

637 i‡(
¥io_ßm∂es
 > 0) {

638 
	`¢¥ötf
(
¥io_«me
, (prio_name),

640 
˛©_ty≥
,

641 
ts
->
˛©_¥io
[
ddú
][
i
].
i›rio
 >> 13,

642 
ts
->
˛©_¥io
[
ddú
][
i
].
i›rio
 & 7,

643 100. * (Ë
¥io_ßm∂es
 / (Ë
ßm∂es
);

644 
	`show_˛©_≥r˚¡ûes
(
ts
->
˛©_¥io
[
ddú
][
i
].
io_u_∂©
,

645 
¥io_ßm∂es
, 
ts
->
≥r˚¡ûe_li°
,

646 
ts
->
≥r˚¡ûe_¥ecisi⁄
,

647 
¥io_«me
, 
out
);

653 i‡(
	`ˇlc_œt
(&
ts
->
bw_°©
[
ddú
], &
mö
, &
max
, &
món
, &
dev
)) {

654 
p_of_agg
 = 100.0, 
fkb_ba£
 = ()
rs
->
kb_ba£
;

655 c⁄° *
bw_°r
;

657 i‡((
rs
->
unô_ba£
 =1Ë&& 
i2p
)

658 
bw_°r
 = "Kibit";

659 i‡(
rs
->
unô_ba£
 == 1)

660 
bw_°r
 = "kbit";

661 i‡(
i2p
)

662 
bw_°r
 = "KiB";

664 
bw_°r
 = "kB";

666 
p_of_agg
 = 
	`c⁄vît_agg_kbyãs_≥r˚¡
(
rs
, 
ddú
, 
món
);

668 i‡(
rs
->
unô_ba£
 == 1) {

669 
mö
 *= 8.0;

670 
max
 *= 8.0;

671 
món
 *= 8.0;

672 
dev
 *= 8.0;

675 i‡(
món
 > 
fkb_ba£
 * fkb_base) {

676 
mö
 /
fkb_ba£
;

677 
max
 /
fkb_ba£
;

678 
món
 /
fkb_ba£
;

679 
dev
 /
fkb_ba£
;

680 
bw_°r
 = (
rs
->
unô_ba£
 == 1 ? "Mibit" : "MiB");

683 
	`log_buf
(
out
, " bw (%5s/s): min=%5llu, max=%5llu,Öer=%3.2f%%, "

684 "avg=%5.02f, stdev=%5.02f, sam∂es=%" 
PRIu64
 "\n",

685 
bw_°r
, 
mö
, 
max
, 
p_of_agg
, 
món
, 
dev
,

686 (&
ts
->
bw_°©
[
ddú
])->
ßm∂es
);

688 i‡(
	`ˇlc_œt
(&
ts
->
i›s_°©
[
ddú
], &
mö
, &
max
, &
món
, &
dev
)) {

689 
	`log_buf
(
out
, " iops : min=%5llu, max=%5llu, "

690 "avg=%5.02f, stdev=%5.02f, sam∂es=%" 
PRIu64
 "\n",

691 
mö
, 
max
, 
món
, 
dev
, (&
ts
->
i›s_°©
[
ddú
])->
ßm∂es
);

693 
	}
}

695 
	$show_mixed_ddú_°©us
(
group_run_°©s
 *
rs
,

696 
thªad_°©
 *
ts
,

697 
buf_ouçut
 *
out
)

699 
thªad_°©
 *
ts_l˛
 = 
	`gí_mixed_ddú_°©s_‰om_ts
(
ts
);

701 i‡(
ts_l˛
)

702 
	`show_ddú_°©us
(
rs
, 
ts_l˛
, 
DDIR_READ
, 
out
);

704 
	`‰ì_˛©_¥io_°©s
(
ts_l˛
);

705 
	`‰ì
(
ts_l˛
);

706 
	}
}

708 
boﬁ
 
	$show_œt
(*
io_u_œt
, 
ƒ
, c⁄° **
ønges
,

709 c⁄° *
msg
, 
buf_ouçut
 *
out
)

711 
boﬁ
 
√w_löe
 = 
åue
, 
shown
 = 
Ál£
;

712 
i
, 
löe
 = 0;

714 
i
 = 0; i < 
ƒ
; i++) {

715 i‡(
io_u_œt
[
i
] <= 0.0)

717 
shown
 = 
åue
;

718 i‡(
√w_löe
) {

719 i‡(
löe
)

720 
	`log_buf
(
out
, "\n");

721 
	`log_buf
(
out
, "Ü© (%sË : ", 
msg
);

722 
√w_löe
 = 
Ál£
;

723 
löe
 = 0;

725 i‡(
löe
)

726 
	`log_buf
(
out
, ", ");

727 
	`log_buf
(
out
, "%s%3.2f%%", 
ønges
[
i
], 
io_u_œt
[i]);

728 
löe
++;

729 i‡(
löe
 == 5)

730 
√w_löe
 = 
åue
;

733 i‡(
shown
)

734 
	`log_buf
(
out
, "\n");

736  
åue
;

737 
	}
}

739 
	$show_œt_n
(*
io_u_œt_n
, 
buf_ouçut
 *
out
)

741 c⁄° *
ønges
[] = { "2=", "4=", "10=", "20=", "50=", "100=",

744 
	`show_œt
(
io_u_œt_n
, 
FIO_IO_U_LAT_N_NR
, 
ønges
, "n£c", 
out
);

745 
	}
}

747 
	$show_œt_u
(*
io_u_œt_u
, 
buf_ouçut
 *
out
)

749 c⁄° *
ønges
[] = { "2=", "4=", "10=", "20=", "50=", "100=",

752 
	`show_œt
(
io_u_œt_u
, 
FIO_IO_U_LAT_U_NR
, 
ønges
, "u£c", 
out
);

753 
	}
}

755 
	$show_œt_m
(*
io_u_œt_m
, 
buf_ouçut
 *
out
)

757 c⁄° *
ønges
[] = { "2=", "4=", "10=", "20=", "50=", "100=",

761 
	`show_œt
(
io_u_œt_m
, 
FIO_IO_U_LAT_M_NR
, 
ønges
, "m£c", 
out
);

762 
	}
}

764 
	$show_œãncõs
(
thªad_°©
 *
ts
, 
buf_ouçut
 *
out
)

766 
io_u_œt_n
[
FIO_IO_U_LAT_N_NR
];

767 
io_u_œt_u
[
FIO_IO_U_LAT_U_NR
];

768 
io_u_œt_m
[
FIO_IO_U_LAT_M_NR
];

770 
	`°©_ˇlc_œt_n
(
ts
, 
io_u_œt_n
);

771 
	`°©_ˇlc_œt_u
(
ts
, 
io_u_œt_u
);

772 
	`°©_ˇlc_œt_m
(
ts
, 
io_u_œt_m
);

774 
	`show_œt_n
(
io_u_œt_n
, 
out
);

775 
	`show_œt_u
(
io_u_œt_u
, 
out
);

776 
	`show_œt_m
(
io_u_œt_m
, 
out
);

777 
	}
}

779 
	$block_°©e_ˇãg‹y
(
block_°©e
)

781 
block_°©e
) {

782 
BLOCK_STATE_UNINIT
:

784 
BLOCK_STATE_TRIMMED
:

785 
BLOCK_STATE_WRITTEN
:

787 
BLOCK_STATE_WRITE_FAILURE
:

788 
BLOCK_STATE_TRIM_FAILURE
:

792 
	`as£π
(0);

795 
	}
}

797 
	$com∑ª_block_öfos
(c⁄° *
bs1
, c⁄° *
bs2
)

799 
uöt64_t
 
block1
 = *(uöt64_à*)
bs1
;

800 
uöt64_t
 
block2
 = *(uöt64_à*)
bs2
;

801 
°©e1
 = 
	`BLOCK_INFO_STATE
(
block1
);

802 
°©e2
 = 
	`BLOCK_INFO_STATE
(
block2
);

803 
bsˇt1
 = 
	`block_°©e_ˇãg‹y
(
°©e1
);

804 
bsˇt2
 = 
	`block_°©e_ˇãg‹y
(
°©e2
);

805 
cy˛es1
 = 
	`BLOCK_INFO_TRIMS
(
block1
);

806 
cy˛es2
 = 
	`BLOCK_INFO_TRIMS
(
block2
);

808 i‡(
bsˇt1
 < 
bsˇt2
)

810 i‡(
bsˇt1
 > 
bsˇt2
)

813 i‡(
cy˛es1
 < 
cy˛es2
)

815 i‡(
cy˛es1
 > 
cy˛es2
)

818 i‡(
°©e1
 < 
°©e2
)

820 i‡(
°©e1
 > 
°©e2
)

823 
	`as£π
(
block1
 =
block2
);

825 
	}
}

827 
	$ˇlc_block_≥r˚¡ûes
(
ƒ_block_öfos
, 
uöt32_t
 *
block_öfos
,

828 
fio_Â64_t
 *
∂i°
, **
≥r˚¡ûes
,

829 *
ty≥s
)

831 
Àn
 = 0;

832 
i
, 
ƒ_unöô
;

834 
	`qs‹t
(
block_öfos
, 
ƒ_block_öfos
, (
uöt32_t
), 
com∑ª_block_öfos
);

836 
Àn
 < 
FIO_IO_U_LIST_MAX_LEN
 && 
∂i°
[Àn].
u
.
f
 != 0.0)

837 
Àn
++;

839 i‡(!
Àn
)

847 i‡(
Àn
 > 1)

848 
	`qs‹t
(
∂i°
, 
Àn
, ’li°[0]), 
doubÀ_cmp
);

851 
ƒ_unöô
 = 0;

852 
ƒ_unöô
 < 
ƒ_block_öfos


853 && 
	`BLOCK_INFO_STATE
(
block_öfos
[
ƒ_unöô
]Ë=
BLOCK_STATE_UNINIT
;

854 
ƒ_unöô
 ++)

857 i‡(
ƒ_unöô
 =
ƒ_block_öfos
)

860 *
≥r˚¡ûes
 = 
	`ˇŒoc
(
Àn
, (**percentiles));

862 
i
 = 0; i < 
Àn
; i++) {

863 
idx
 = (
∂i°
[
i
].
u
.
f
 * (
ƒ_block_öfos
 - 
ƒ_unöô
) / 100)

864 + 
ƒ_unöô
;

865 (*
≥r˚¡ûes
)[
i
] = 
	`BLOCK_INFO_TRIMS
(
block_öfos
[
idx
]);

868 
	`mem£t
(
ty≥s
, 0, (*ty≥sË* 
BLOCK_STATE_COUNT
);

869 
i
 = 0; i < 
ƒ_block_öfos
; i++)

870 
ty≥s
[
	`BLOCK_INFO_STATE
(
block_öfos
[
i
])]++;

872  
Àn
;

873 
	}
}

875 c⁄° *
	gblock_°©e_«mes
[] = {

876 [
BLOCK_STATE_UNINIT
] = "unwritten",

877 [
BLOCK_STATE_TRIMMED
] = "trimmed",

878 [
BLOCK_STATE_WRITTEN
] = "written",

879 [
BLOCK_STATE_TRIM_FAILURE
] = "trim failure",

880 [
BLOCK_STATE_WRITE_FAILURE
] = "write failure",

883 
	$show_block_öfos
(
ƒ_block_öfos
, 
uöt32_t
 *
block_öfos
,

884 
fio_Â64_t
 *
∂i°
, 
buf_ouçut
 *
out
)

886 
Àn
, 
pos
, 
i
;

887 *
≥r˚¡ûes
 = 
NULL
;

888 
block_°©e_cou¡s
[
BLOCK_STATE_COUNT
];

890 
Àn
 = 
	`ˇlc_block_≥r˚¡ûes
(
ƒ_block_öfos
, 
block_öfos
, 
∂i°
,

891 &
≥r˚¡ûes
, 
block_°©e_cou¡s
);

893 
	`log_buf
(
out
, " blockÜifetimeÖercentiles :\n |");

894 
pos
 = 0;

895 
i
 = 0; i < 
Àn
; i++) {

896 
uöt32_t
 
block_öfo
 = 
≥r˚¡ûes
[
i
];

897 
	#LINE_LENGTH
 75

	)

898 
°r
[
LINE_LENGTH
];

899 
°æn
 = 
	`¢¥ötf
(
°r
, 
LINE_LENGTH
, " %3.2fth=%u%c",

900 
∂i°
[
i
].
u
.
f
, 
block_öfo
,

901 
i
 =
Àn
 - 1 ? '\n' : ',');

902 
	`as£π
(
°æn
 < 
LINE_LENGTH
);

903 i‡(
pos
 + 
°æn
 > 
LINE_LENGTH
) {

904 
pos
 = 0;

905 
	`log_buf
(
out
, "\n |");

907 
	`log_buf
(
out
, "%s", 
°r
);

908 
pos
 +
°æn
;

909 #unde‡
LINE_LENGTH


911 i‡(
≥r˚¡ûes
)

912 
	`‰ì
(
≥r˚¡ûes
);

914 
	`log_buf
(
out
, " states :");

915 
i
 = 0; i < 
BLOCK_STATE_COUNT
; i++)

916 
	`log_buf
(
out
, " %s=%u%c",

917 
block_°©e_«mes
[
i
], 
block_°©e_cou¡s
[i],

918 
i
 =
BLOCK_STATE_COUNT
 - 1 ? '\n' : ',');

919 
	}
}

921 
	$show_ss_n‹mÆ
(
thªad_°©
 *
ts
, 
buf_ouçut
 *
out
)

923 *
p1
, *
p1Æt
, *
p2
;

924 
bw_món
, 
i›s_món
;

925 c⁄° 
i2p
 = 
	`is_powî_of_2
(
ts
->
kb_ba£
);

927 i‡(!
ts
->
ss_dur
)

930 
bw_món
 = 
	`°ódy°©e_bw_món
(
ts
);

931 
i›s_món
 = 
	`°ódy°©e_i›s_món
(
ts
);

933 
p1
 = 
	`num2°r
(
bw_món
 / 
ts
->
kb_ba£
,Ås->
sig_figs
,Ås->kb_ba£, 
i2p
,Ås->
unô_ba£
);

934 
p1Æt
 = 
	`num2°r
(
bw_món
 / 
ts
->
kb_ba£
,Ås->
sig_figs
,Ås->kb_ba£, !
i2p
,Ås->
unô_ba£
);

935 
p2
 = 
	`num2°r
(
i›s_món
, 
ts
->
sig_figs
, 1, 0, 
N2S_NONE
);

937 
	`log_buf
(
out
, " steadystate :áttained=%s, bw=%s (%s), iops=%s, %s%s=%.3f%s\n",

938 
ts
->
ss_°©e
 & 
FIO_SS_ATTAINED
 ? "yes" : "no",

939 
p1
, 
p1Æt
, 
p2
,

940 
ts
->
ss_°©e
 & 
FIO_SS_IOPS
 ? "iops" : "bw",

941 
ts
->
ss_°©e
 & 
FIO_SS_SLOPE
 ? " slope": " mean dev",

942 
ts
->
ss_¸ôîi⁄
.
u
.
f
,

943 
ts
->
ss_°©e
 & 
FIO_SS_PCT
 ? "%" : "");

945 
	`‰ì
(
p1
);

946 
	`‰ì
(
p1Æt
);

947 
	`‰ì
(
p2
);

948 
	}
}

950 
	$show_agg_°©s
(
disk_utû_agg
 *
agg
, 
ãr£
,

951 
buf_ouçut
 *
out
)

953 i‡(!
agg
->
¶avecou¡
)

956 i‡(!
ãr£
) {

957 
	`log_buf
(
out
, ",ággrios=%llu/%llu,ággrmerge=%llu/%llu, "

960 (Ë
agg
->
ios
[0] /ágg->
¶avecou¡
,

961 (Ë
agg
->
ios
[1] /ágg->
¶avecou¡
,

962 (Ë
agg
->
mîges
[0] /ágg->
¶avecou¡
,

963 (Ë
agg
->
mîges
[1] /ágg->
¶avecou¡
,

964 (Ë
agg
->
ticks
[0] /ágg->
¶avecou¡
,

965 (Ë
agg
->
ticks
[1] /ágg->
¶avecou¡
,

966 (Ë
agg
->
time_ö_queue
 /ágg->
¶avecou¡
,

967 
agg
->
max_utû
.
u
.
f
);

969 
	`log_buf
(
out
, ";slaves;%llu;%llu;%llu;%llu;%llu;%llu;%llu;%3.2f%%",

970 (Ë
agg
->
ios
[0] /ágg->
¶avecou¡
,

971 (Ë
agg
->
ios
[1] /ágg->
¶avecou¡
,

972 (Ë
agg
->
mîges
[0] /ágg->
¶avecou¡
,

973 (Ë
agg
->
mîges
[1] /ágg->
¶avecou¡
,

974 (Ë
agg
->
ticks
[0] /ágg->
¶avecou¡
,

975 (Ë
agg
->
ticks
[1] /ágg->
¶avecou¡
,

976 (Ë
agg
->
time_ö_queue
 /ágg->
¶avecou¡
,

977 
agg
->
max_utû
.
u
.
f
);

979 
	}
}

981 
	$aggªg©e_¶aves_°©s
(
disk_utû
 *
ma°îdu
)

983 
disk_utû_agg
 *
agg
 = &
ma°îdu
->agg;

984 
disk_utû_°©
 *
dus
;

985 
Êi°_hód
 *
íåy
;

986 
disk_utû
 *
¶avedu
;

987 
utû
;

989 
	`Êi°_f‹_óch
(
íåy
, &
ma°îdu
->
¶aves
) {

990 
¶avedu
 = 
	`Êi°_íåy
(
íåy
, 
disk_utû
, 
¶avñi°
);

991 
dus
 = &
¶avedu
->dus;

992 
agg
->
ios
[0] +
dus
->
s
.ios[0];

993 
agg
->
ios
[1] +
dus
->
s
.ios[1];

994 
agg
->
mîges
[0] +
dus
->
s
.merges[0];

995 
agg
->
mîges
[1] +
dus
->
s
.merges[1];

996 
agg
->
£˘‹s
[0] +
dus
->
s
.sectors[0];

997 
agg
->
£˘‹s
[1] +
dus
->
s
.sectors[1];

998 
agg
->
ticks
[0] +
dus
->
s
.ticks[0];

999 
agg
->
ticks
[1] +
dus
->
s
.ticks[1];

1000 
agg
->
time_ö_queue
 +
dus
->
s
.time_in_queue;

1001 
agg
->
¶avecou¡
++;

1003 
utû
 = (Ë(100 * 
dus
->
s
.
io_ticks
 / (Ë
¶avedu
->dus.s.
m£c
);

1007 i‡(
utû
 > 
agg
->
max_utû
.
u
.
f
)

1008 
agg
->
max_utû
.
u
.
f
 = 
utû
;

1012 i‡(
agg
->
max_utû
.
u
.
f
 > 100.0)

1013 
agg
->
max_utû
.
u
.
f
 = 100.0;

1014 
	}
}

1016 
	$¥öt_disk_utû
(
disk_utû_°©
 *
dus
, 
disk_utû_agg
 *
agg
,

1017 
ãr£
, 
buf_ouçut
 *
out
)

1019 
utû
 = 0;

1021 i‡(
dus
->
s
.
m£c
)

1022 
utû
 = (Ë100 * 
dus
->
s
.
io_ticks
 / (Ëdus->s.
m£c
;

1023 i‡(
utû
 > 100.0)

1024 
utû
 = 100.0;

1026 i‡(!
ãr£
) {

1027 i‡(
agg
->
¶avecou¡
)

1028 
	`log_buf
(
out
, " ");

1030 
	`log_buf
(
out
, " %s: ios=%llu/%llu, merge=%llu/%llu, "

1032 
dus
->
«me
,

1033 (Ë
dus
->
s
.
ios
[0],

1034 (Ë
dus
->
s
.
ios
[1],

1035 (Ë
dus
->
s
.
mîges
[0],

1036 (Ë
dus
->
s
.
mîges
[1],

1037 (Ë
dus
->
s
.
ticks
[0],

1038 (Ë
dus
->
s
.
ticks
[1],

1039 (Ë
dus
->
s
.
time_ö_queue
,

1040 
utû
);

1042 
	`log_buf
(
out
, ";%s;%llu;%llu;%llu;%llu;%llu;%llu;%llu;%3.2f%%",

1043 
dus
->
«me
,

1044 (Ë
dus
->
s
.
ios
[0],

1045 (Ë
dus
->
s
.
ios
[1],

1046 (Ë
dus
->
s
.
mîges
[0],

1047 (Ë
dus
->
s
.
mîges
[1],

1048 (Ë
dus
->
s
.
ticks
[0],

1049 (Ë
dus
->
s
.
ticks
[1],

1050 (Ë
dus
->
s
.
time_ö_queue
,

1051 
utû
);

1058 
	`show_agg_°©s
(
agg
, 
ãr£
, 
out
);

1060 i‡(!
ãr£
)

1061 
	`log_buf
(
out
, "\n");

1062 
	}
}

1064 
	$js⁄_¨øy_add_disk_utû
(
disk_utû_°©
 *
dus
,

1065 
disk_utû_agg
 *
agg
, 
js⁄_¨øy
 *
¨øy
)

1067 
js⁄_obje˘
 *
obj
;

1068 
utû
 = 0;

1070 i‡(
dus
->
s
.
m£c
)

1071 
utû
 = (Ë100 * 
dus
->
s
.
io_ticks
 / (Ëdus->s.
m£c
;

1072 i‡(
utû
 > 100.0)

1073 
utû
 = 100.0;

1075 
obj
 = 
	`js⁄_¸óã_obje˘
();

1076 
	`js⁄_¨øy_add_vÆue_obje˘
(
¨øy
, 
obj
);

1078 
	`js⁄_obje˘_add_vÆue_°rög
(
obj
, "«me", (c⁄° *)
dus
->
«me
);

1079 
	`js⁄_obje˘_add_vÆue_öt
(
obj
, "ªad_ios", 
dus
->
s
.
ios
[0]);

1080 
	`js⁄_obje˘_add_vÆue_öt
(
obj
, "wrôe_ios", 
dus
->
s
.
ios
[1]);

1081 
	`js⁄_obje˘_add_vÆue_öt
(
obj
, "ªad_mîges", 
dus
->
s
.
mîges
[0]);

1082 
	`js⁄_obje˘_add_vÆue_öt
(
obj
, "wrôe_mîges", 
dus
->
s
.
mîges
[1]);

1083 
	`js⁄_obje˘_add_vÆue_öt
(
obj
, "ªad_ticks", 
dus
->
s
.
ticks
[0]);

1084 
	`js⁄_obje˘_add_vÆue_öt
(
obj
, "wrôe_ticks", 
dus
->
s
.
ticks
[1]);

1085 
	`js⁄_obje˘_add_vÆue_öt
(
obj
, "ö_queue", 
dus
->
s
.
time_ö_queue
);

1086 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
obj
, "utû", 
utû
);

1092 i‡(!
agg
->
¶avecou¡
)

1094 
	`js⁄_obje˘_add_vÆue_öt
(
obj
, "aggr_read_ios",

1095 
agg
->
ios
[0] /ágg->
¶avecou¡
);

1096 
	`js⁄_obje˘_add_vÆue_öt
(
obj
, "aggr_write_ios",

1097 
agg
->
ios
[1] /ágg->
¶avecou¡
);

1098 
	`js⁄_obje˘_add_vÆue_öt
(
obj
, "aggr_read_merges",

1099 
agg
->
mîges
[0] /ágg->
¶avecou¡
);

1100 
	`js⁄_obje˘_add_vÆue_öt
(
obj
, "aggr_write_merge",

1101 
agg
->
mîges
[1] /ágg->
¶avecou¡
);

1102 
	`js⁄_obje˘_add_vÆue_öt
(
obj
, "aggr_read_ticks",

1103 
agg
->
ticks
[0] /ágg->
¶avecou¡
);

1104 
	`js⁄_obje˘_add_vÆue_öt
(
obj
, "aggr_write_ticks",

1105 
agg
->
ticks
[1] /ágg->
¶avecou¡
);

1106 
	`js⁄_obje˘_add_vÆue_öt
(
obj
, "aggr_in_queue",

1107 
agg
->
time_ö_queue
 /ágg->
¶avecou¡
);

1108 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
obj
, "aggr_utû", 
agg
->
max_utû
.
u
.
f
);

1109 
	}
}

1111 
	$js⁄_obje˘_add_disk_utûs
(
js⁄_obje˘
 *
obj
,

1112 
Êi°_hód
 *
hód
)

1114 
js⁄_¨øy
 *
¨øy
 = 
	`js⁄_¸óã_¨øy
();

1115 
Êi°_hód
 *
íåy
;

1116 
disk_utû
 *
du
;

1118 
	`js⁄_obje˘_add_vÆue_¨øy
(
obj
, "disk_utû", 
¨øy
);

1120 
	`Êi°_f‹_óch
(
íåy
, 
hód
) {

1121 
du
 = 
	`Êi°_íåy
(
íåy
, 
disk_utû
, 
li°
);

1123 
	`aggªg©e_¶aves_°©s
(
du
);

1124 
	`js⁄_¨øy_add_disk_utû
(&
du
->
dus
, &du->
agg
, 
¨øy
);

1126 
	}
}

1128 
	$show_disk_utû
(
ãr£
, 
js⁄_obje˘
 *
∑ª¡
,

1129 
buf_ouçut
 *
out
)

1131 
Êi°_hód
 *
íåy
;

1132 
disk_utû
 *
du
;

1133 
boﬁ
 
do_js⁄
;

1135 i‡(!
	`is_ru¬ög_backíd
())

1138 i‡(
	`Êi°_em±y
(&
disk_li°
))

1141 i‡((
ouçut_f‹m©
 & 
FIO_OUTPUT_JSON
Ë&& 
∑ª¡
)

1142 
do_js⁄
 = 
åue
;

1144 
do_js⁄
 = 
Ál£
;

1146 i‡(!
ãr£
 && !
do_js⁄
)

1147 
	`log_buf
(
out
, "\nDisk stats (read/write):\n");

1149 i‡(
do_js⁄
) {

1150 
	`js⁄_obje˘_add_disk_utûs
(
∑ª¡
, &
disk_li°
);

1151 } i‡(
ouçut_f‹m©
 & ~(
FIO_OUTPUT_JSON
 | 
FIO_OUTPUT_JSON_PLUS
)) {

1152 
	`Êi°_f‹_óch
(
íåy
, &
disk_li°
) {

1153 
du
 = 
	`Êi°_íåy
(
íåy
, 
disk_utû
, 
li°
);

1155 
	`aggªg©e_¶aves_°©s
(
du
);

1156 
	`¥öt_disk_utû
(&
du
->
dus
, &du->
agg
, 
ãr£
, 
out
);

1159 
	}
}

1161 
	$show_thªad_°©us_n‹mÆ
(
thªad_°©
 *
ts
,

1162 
group_run_°©s
 *
rs
,

1163 
buf_ouçut
 *
out
)

1165 
u§_˝u
, 
sys_˝u
;

1166 
ru¡ime
;

1167 
io_u_di°
[
FIO_IO_U_MAP_NR
];

1168 
time_t
 
time_p
;

1169 
time_buf
[32];

1171 i‡(!
	`ddú_rw_sum
(
ts
->
io_byãs
Ë&& !ddú_rw_sum—s->
tŸÆ_io_u
))

1174 
	`mem£t
(
time_buf
, 0, (time_buf));

1176 
	`time
(&
time_p
);

1177 
	`os_˘ime_r
((c⁄° 
time_t
 *Ë&
time_p
, 
time_buf
, (time_buf));

1179 i‡(!
ts
->
îr‹
) {

1180 
	`log_buf
(
out
, "%s: (groupid=%d, jobs=%d):Érr=%2d:Öid=%d: %s",

1181 
ts
->
«me
,Ås->
groupid
,Ås->
membîs
,

1182 
ts
->
îr‹
, (Ëts->
pid
, 
time_buf
);

1184 
	`log_buf
(
out
, "%s: (groupid=%d, jobs=%d):Érr=%2d (%s):Öid=%d: %s",

1185 
ts
->
«me
,Ås->
groupid
,Ås->
membîs
,

1186 
ts
->
îr‹
,Ås->
vîr‹
, (Ëts->
pid
,

1187 
time_buf
);

1190 i‡(
	`°æí
(
ts
->
des¸ùti⁄
))

1191 
	`log_buf
(
out
, " Des¸ùti⁄ : [%s]\n", 
ts
->
des¸ùti⁄
);

1193 
	`f‹_óch_rw_ddú
(
ddú
) {

1194 i‡(
ts
->
io_byãs
[
ddú
])

1195 
	`show_ddú_°©us
(
rs
, 
ts
, 
ddú
, 
out
);

1198 i‡(
ts
->
unifõd_rw_ªp
 =
UNIFIED_BOTH
)

1199 
	`show_mixed_ddú_°©us
(
rs
, 
ts
, 
out
);

1201 
	`show_œãncõs
(
ts
, 
out
);

1203 i‡(
ts
->
sync_°©
.
ßm∂es
)

1204 
	`show_ddú_°©us
(
rs
, 
ts
, 
DDIR_SYNC
, 
out
);

1206 
ru¡ime
 = 
ts
->
tŸÆ_run_time
;

1207 i‡(
ru¡ime
) {

1208 
ru¡
 = (Ë
ru¡ime
;

1210 
u§_˝u
 = (Ë
ts
->
u§_time
 * 100 / 
ru¡
;

1211 
sys_˝u
 = (Ë
ts
->
sys_time
 * 100 / 
ru¡
;

1213 
u§_˝u
 = 0;

1214 
sys_˝u
 = 0;

1217 
	`log_buf
(
out
, " cpu : usr=%3.2f%%, sys=%3.2f%%, ctx=%llu,"

1218 " majf=%Œu, möf=%Œu\n", 
u§_˝u
, 
sys_˝u
,

1219 (Ë
ts
->
˘x
,

1220 (Ë
ts
->
majf
,

1221 (Ë
ts
->
möf
);

1223 
	`°©_ˇlc_di°
(
ts
->
io_u_m≠
, 
	`ddú_rw_sum
—s->
tŸÆ_io_u
), 
io_u_di°
);

1224 
	`log_buf
(
out
, " IO depths : 1=%3.1f%%, 2=%3.1f%%, 4=%3.1f%%, 8=%3.1f%%,"

1225 " 16=%3.1f%%, 32=%3.1f%%, >=64=%3.1f%%\n", 
io_u_di°
[0],

1226 
io_u_di°
[1], io_u_dist[2],

1227 
io_u_di°
[3], io_u_dist[4],

1228 
io_u_di°
[5], io_u_dist[6]);

1230 
	`°©_ˇlc_di°
(
ts
->
io_u_submô
,Ås->
tŸÆ_submô
, 
io_u_di°
);

1231 
	`log_buf
(
out
, " submit : 0=%3.1f%%, 4=%3.1f%%, 8=%3.1f%%, 16=%3.1f%%,"

1232 " 32=%3.1f%%, 64=%3.1f%%, >=64=%3.1f%%\n", 
io_u_di°
[0],

1233 
io_u_di°
[1], io_u_dist[2],

1234 
io_u_di°
[3], io_u_dist[4],

1235 
io_u_di°
[5], io_u_dist[6]);

1236 
	`°©_ˇlc_di°
(
ts
->
io_u_com∂ëe
,Ås->
tŸÆ_com∂ëe
, 
io_u_di°
);

1237 
	`log_buf
(
out
, " complete : 0=%3.1f%%, 4=%3.1f%%, 8=%3.1f%%, 16=%3.1f%%,"

1238 " 32=%3.1f%%, 64=%3.1f%%, >=64=%3.1f%%\n", 
io_u_di°
[0],

1239 
io_u_di°
[1], io_u_dist[2],

1240 
io_u_di°
[3], io_u_dist[4],

1241 
io_u_di°
[5], io_u_dist[6]);

1242 
	`log_buf
(
out
, " issuedÑwts:Åotal=%llu,%llu,%llu,%llu"

1245 (Ë
ts
->
tŸÆ_io_u
[0],

1246 (Ë
ts
->
tŸÆ_io_u
[1],

1247 (Ë
ts
->
tŸÆ_io_u
[2],

1248 (Ë
ts
->
tŸÆ_io_u
[3],

1249 (Ë
ts
->
sh‹t_io_u
[0],

1250 (Ë
ts
->
sh‹t_io_u
[1],

1251 (Ë
ts
->
sh‹t_io_u
[2],

1252 (Ë
ts
->
dr›_io_u
[0],

1253 (Ë
ts
->
dr›_io_u
[1],

1254 (Ë
ts
->
dr›_io_u
[2]);

1255 i‡(
ts
->
c⁄töue_⁄_îr‹
) {

1256 
	`log_buf
(
out
, "Érrors :Åotal=%llu, first_error=%d/<%s>\n",

1257 ()
ts
->
tŸÆ_îr_cou¡
,

1258 
ts
->
fú°_îr‹
,

1259 
	`°ªº‹
(
ts
->
fú°_îr‹
));

1261 i‡(
ts
->
œãncy_dïth
) {

1262 
	`log_buf
(
out
, "Üatency :Åarget=%llu, window=%llu,Öercentile=%.2f%%, depth=%u\n",

1263 ()
ts
->
œãncy_èrgë
,

1264 ()
ts
->
œãncy_wödow
,

1265 
ts
->
œãncy_≥r˚¡ûe
.
u
.
f
,

1266 
ts
->
œãncy_dïth
);

1269 i‡(
ts
->
ƒ_block_öfos
)

1270 
	`show_block_öfos
(
ts
->
ƒ_block_öfos
,Ås->
block_öfos
,

1271 
ts
->
≥r˚¡ûe_li°
, 
out
);

1273 i‡(
ts
->
ss_dur
)

1274 
	`show_ss_n‹mÆ
(
ts
, 
out
);

1275 
	}
}

1277 
	$show_ddú_°©us_ãr£
(
thªad_°©
 *
ts
,

1278 
group_run_°©s
 *
rs
,

1279 
fio_ddú
 
ddú
, 
vî
,

1280 
buf_ouçut
 *
out
)

1282 
mö
, 
max
, 
möv
, 
maxv
, 
bw
, 
i›s
;

1283 *
ovÆs
 = 
NULL
;

1284 
món
, 
dev
;

1285 
Àn
;

1286 
i
, 
bw_°©
;

1288 
	`as£π
(
	`ddú_rw
(
ddú
));

1290 
i›s
 = 
bw
 = 0;

1291 i‡(
ts
->
ru¡ime
[
ddú
]) {

1292 
uöt64_t
 
ru¡
 = 
ts
->
ru¡ime
[
ddú
];

1294 
bw
 = ((1000 * 
ts
->
io_byãs
[
ddú
]Ë/ 
ru¡
) / 1024;

1295 
i›s
 = (1000 * (
uöt64_t
Ë
ts
->
tŸÆ_io_u
[
ddú
]Ë/ 
ru¡
;

1298 
	`log_buf
(
out
, ";%llu;%llu;%llu;%llu",

1299 (Ë
ts
->
io_byãs
[
ddú
] >> 10, 
bw
, 
i›s
,

1300 (Ë
ts
->
ru¡ime
[
ddú
]);

1302 i‡(
	`ˇlc_œt
(&
ts
->
¶©_°©
[
ddú
], &
mö
, &
max
, &
món
, &
dev
))

1303 
	`log_buf
(
out
, ";%Œu;%Œu;%f;%f", 
mö
/1000, 
max
/1000, 
món
/1000, 
dev
/1000);

1305 
	`log_buf
(
out
, ";%llu;%llu;%f;%f", 0ULL, 0ULL, 0.0, 0.0);

1307 i‡(
	`ˇlc_œt
(&
ts
->
˛©_°©
[
ddú
], &
mö
, &
max
, &
món
, &
dev
))

1308 
	`log_buf
(
out
, ";%Œu;%Œu;%f;%f", 
mö
/1000, 
max
/1000, 
món
/1000, 
dev
/1000);

1310 
	`log_buf
(
out
, ";%llu;%llu;%f;%f", 0ULL, 0ULL, 0.0, 0.0);

1312 i‡(
ts
->
œt_≥r˚¡ûes
) {

1313 
Àn
 = 
	`ˇlc_˛©_≥r˚¡ûes
(
ts
->
io_u_∂©
[
FIO_LAT
][
ddú
],

1314 
ts
->
œt_°©
[
ddú
].
ßm∂es
,

1315 
ts
->
≥r˚¡ûe_li°
, &
ovÆs
, &
maxv
,

1316 &
möv
);

1317 } i‡(
ts
->
˛©_≥r˚¡ûes
) {

1318 
Àn
 = 
	`ˇlc_˛©_≥r˚¡ûes
(
ts
->
io_u_∂©
[
FIO_CLAT
][
ddú
],

1319 
ts
->
˛©_°©
[
ddú
].
ßm∂es
,

1320 
ts
->
≥r˚¡ûe_li°
, &
ovÆs
, &
maxv
,

1321 &
möv
);

1323 
Àn
 = 0;

1326 
i
 = 0; i < 
FIO_IO_U_LIST_MAX_LEN
; i++) {

1327 i‡(
i
 >
Àn
) {

1328 
	`log_buf
(
out
, ";0%%=0");

1331 
	`log_buf
(
out
, ";%f%%=%Œu", 
ts
->
≥r˚¡ûe_li°
[
i
].
u
.
f
, 
ovÆs
[i]/1000);

1334 i‡(
	`ˇlc_œt
(&
ts
->
œt_°©
[
ddú
], &
mö
, &
max
, &
món
, &
dev
))

1335 
	`log_buf
(
out
, ";%Œu;%Œu;%f;%f", 
mö
/1000, 
max
/1000, 
món
/1000, 
dev
/1000);

1337 
	`log_buf
(
out
, ";%llu;%llu;%f;%f", 0ULL, 0ULL, 0.0, 0.0);

1339 
	`‰ì
(
ovÆs
);

1341 
bw_°©
 = 
	`ˇlc_œt
(&
ts
->bw_°©[
ddú
], &
mö
, &
max
, &
món
, &
dev
);

1342 i‡(
bw_°©
) {

1343 
p_of_agg
 = 100.0;

1345 i‡(
rs
->
agg
[
ddú
]) {

1346 
p_of_agg
 = 
món
 * 100 / (Ë(
rs
->
agg
[
ddú
] / 1024);

1347 i‡(
p_of_agg
 > 100.0)

1348 
p_of_agg
 = 100.0;

1351 
	`log_buf
(
out
, ";%Œu;%Œu;%f%%;%f;%f", 
mö
, 
max
, 
p_of_agg
, 
món
, 
dev
);

1353 
	`log_buf
(
out
, ";%llu;%llu;%f%%;%f;%f", 0ULL, 0ULL, 0.0, 0.0, 0.0);

1356 i‡(
vî
 == 5) {

1357 i‡(
bw_°©
)

1358 
	`log_buf
(
out
, ";%" 
PRIu64
, (&
ts
->
bw_°©
[
ddú
])->
ßm∂es
);

1360 
	`log_buf
(
out
, ";%lu", 0UL);

1362 i‡(
	`ˇlc_œt
(&
ts
->
i›s_°©
[
ddú
], &
mö
, &
max
, &
món
, &
dev
))

1363 
	`log_buf
(
out
, ";%Œu;%Œu;%f;%f;%" 
PRIu64
, 
mö
, 
max
,

1364 
món
, 
dev
, (&
ts
->
i›s_°©
[
ddú
])->
ßm∂es
);

1366 
	`log_buf
(
out
, ";%llu;%llu;%f;%f;%lu", 0ULL, 0ULL, 0.0, 0.0, 0UL);

1368 
	}
}

1370 
	$show_mixed_ddú_°©us_ãr£
(
thªad_°©
 *
ts
,

1371 
group_run_°©s
 *
rs
,

1372 
vî
, 
buf_ouçut
 *
out
)

1374 
thªad_°©
 *
ts_l˛
 = 
	`gí_mixed_ddú_°©s_‰om_ts
(
ts
);

1376 i‡(
ts_l˛
)

1377 
	`show_ddú_°©us_ãr£
(
ts_l˛
, 
rs
, 
DDIR_READ
, 
vî
, 
out
);

1379 
	`‰ì_˛©_¥io_°©s
(
ts_l˛
);

1380 
	`‰ì
(
ts_l˛
);

1381 
	}
}

1383 
js⁄_obje˘
 *
	$add_ddú_œt_js⁄
(
thªad_°©
 *
ts
,

1384 
uöt32_t
 
≥r˚¡ûes
,

1385 
io_°©
 *
œt_°©
,

1386 
uöt64_t
 *
io_u_∂©
)

1388 
buf
[120];

1389 
món
, 
dev
;

1390 
i
, 
Àn
;

1391 
js⁄_obje˘
 *
œt_obje˘
, *
≥r˚¡ûe_obje˘
, *
˛©_bös_obje˘
;

1392 
mö
, 
max
, 
maxv
, 
möv
, *
ovÆs
 = 
NULL
;

1394 i‡(!
	`ˇlc_œt
(
œt_°©
, &
mö
, &
max
, &
món
, &
dev
)) {

1395 
mö
 = 
max
 = 0;

1396 
món
 = 
dev
 = 0.0;

1398 
œt_obje˘
 = 
	`js⁄_¸óã_obje˘
();

1399 
	`js⁄_obje˘_add_vÆue_öt
(
œt_obje˘
, "mö", 
mö
);

1400 
	`js⁄_obje˘_add_vÆue_öt
(
œt_obje˘
, "max", 
max
);

1401 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
œt_obje˘
, "món", 
món
);

1402 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
œt_obje˘
, "°ddev", 
dev
);

1403 
	`js⁄_obje˘_add_vÆue_öt
(
œt_obje˘
, "N", 
œt_°©
->
ßm∂es
);

1405 i‡(
≥r˚¡ûes
 && 
œt_°©
->
ßm∂es
) {

1406 
Àn
 = 
	`ˇlc_˛©_≥r˚¡ûes
(
io_u_∂©
, 
œt_°©
->
ßm∂es
,

1407 
ts
->
≥r˚¡ûe_li°
, &
ovÆs
, &
maxv
, &
möv
);

1409 i‡(
Àn
 > 
FIO_IO_U_LIST_MAX_LEN
)

1410 
Àn
 = 
FIO_IO_U_LIST_MAX_LEN
;

1412 
≥r˚¡ûe_obje˘
 = 
	`js⁄_¸óã_obje˘
();

1413 
	`js⁄_obje˘_add_vÆue_obje˘
(
œt_obje˘
, "≥r˚¡ûe", 
≥r˚¡ûe_obje˘
);

1414 
i
 = 0; i < 
Àn
; i++) {

1415 
	`¢¥ötf
(
buf
, (buf), "%f", 
ts
->
≥r˚¡ûe_li°
[
i
].
u
.
f
);

1416 
	`js⁄_obje˘_add_vÆue_öt
(
≥r˚¡ûe_obje˘
, 
buf
, 
ovÆs
[
i
]);

1418 
	`‰ì
(
ovÆs
);

1420 i‡(
ouçut_f‹m©
 & 
FIO_OUTPUT_JSON_PLUS
) {

1421 
˛©_bös_obje˘
 = 
	`js⁄_¸óã_obje˘
();

1422 
	`js⁄_obje˘_add_vÆue_obje˘
(
œt_obje˘
, "bös", 
˛©_bös_obje˘
);

1424 
i
 = 0; i < 
FIO_IO_U_PLAT_NR
; i++)

1425 i‡(
io_u_∂©
[
i
]) {

1426 
	`¢¥ötf
(
buf
, (buf), "%Œu", 
	`∂©_idx_to_vÆ
(
i
));

1427 
	`js⁄_obje˘_add_vÆue_öt
(
˛©_bös_obje˘
, 
buf
, 
io_u_∂©
[
i
]);

1432  
œt_obje˘
;

1433 
	}
}

1435 
	$add_ddú_°©us_js⁄
(
thªad_°©
 *
ts
,

1436 
group_run_°©s
 *
rs
, 
fio_ddú
 
ddú
,

1437 
js⁄_obje˘
 *
∑ª¡
)

1439 
mö
, 
max
;

1440 
bw_byãs
, 
bw
;

1441 
món
, 
dev
, 
i›s
;

1442 
js⁄_obje˘
 *
dú_obje˘
, *
tmp_obje˘
;

1443 
p_of_agg
 = 100.0;

1445 
	`as£π
(
	`ddú_rw
(
ddú
Ë|| 
	`ddú_sync
(ddir));

1447 i‡((
ts
->
unifõd_rw_ªp
 =
UNIFIED_MIXED
Ë&& 
ddú
 !
DDIR_READ
)

1450 
dú_obje˘
 = 
	`js⁄_¸óã_obje˘
();

1451 
	`js⁄_obje˘_add_vÆue_obje˘
(
∑ª¡
,

1452 (
ts
->
unifõd_rw_ªp
 =
UNIFIED_MIXED
Ë? "mixed" : 
	`io_ddú_«me
(
ddú
), 
dú_obje˘
);

1454 i‡(
	`ddú_rw
(
ddú
)) {

1455 
bw_byãs
 = 0;

1456 
bw
 = 0;

1457 
i›s
 = 0.0;

1458 i‡(
ts
->
ru¡ime
[
ddú
]) {

1459 
uöt64_t
 
ru¡
 = 
ts
->
ru¡ime
[
ddú
];

1461 
bw_byãs
 = ((1000 * 
ts
->
io_byãs
[
ddú
]Ë/ 
ru¡
);

1462 
bw
 = 
bw_byãs
 / 1024;

1463 
i›s
 = (1000.0 * (
uöt64_t
Ë
ts
->
tŸÆ_io_u
[
ddú
]Ë/ 
ru¡
;

1466 
	`js⁄_obje˘_add_vÆue_öt
(
dú_obje˘
, "io_byãs", 
ts
->
io_byãs
[
ddú
]);

1467 
	`js⁄_obje˘_add_vÆue_öt
(
dú_obje˘
, "io_kbyãs", 
ts
->
io_byãs
[
ddú
] >> 10);

1468 
	`js⁄_obje˘_add_vÆue_öt
(
dú_obje˘
, "bw_byãs", 
bw_byãs
);

1469 
	`js⁄_obje˘_add_vÆue_öt
(
dú_obje˘
, "bw", 
bw
);

1470 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
dú_obje˘
, "i›s", 
i›s
);

1471 
	`js⁄_obje˘_add_vÆue_öt
(
dú_obje˘
, "ru¡ime", 
ts
->
ru¡ime
[
ddú
]);

1472 
	`js⁄_obje˘_add_vÆue_öt
(
dú_obje˘
, "tŸÆ_ios", 
ts
->
tŸÆ_io_u
[
ddú
]);

1473 
	`js⁄_obje˘_add_vÆue_öt
(
dú_obje˘
, "sh‹t_ios", 
ts
->
sh‹t_io_u
[
ddú
]);

1474 
	`js⁄_obje˘_add_vÆue_öt
(
dú_obje˘
, "dr›_ios", 
ts
->
dr›_io_u
[
ddú
]);

1476 
tmp_obje˘
 = 
	`add_ddú_œt_js⁄
(
ts
,Ås->
¶©_≥r˚¡ûes
,

1477 &
ts
->
¶©_°©
[
ddú
],Ås->
io_u_∂©
[
FIO_SLAT
][ddir]);

1478 
	`js⁄_obje˘_add_vÆue_obje˘
(
dú_obje˘
, "¶©_ns", 
tmp_obje˘
);

1480 
tmp_obje˘
 = 
	`add_ddú_œt_js⁄
(
ts
,Ås->
˛©_≥r˚¡ûes
,

1481 &
ts
->
˛©_°©
[
ddú
],Ås->
io_u_∂©
[
FIO_CLAT
][ddir]);

1482 
	`js⁄_obje˘_add_vÆue_obje˘
(
dú_obje˘
, "˛©_ns", 
tmp_obje˘
);

1484 
tmp_obje˘
 = 
	`add_ddú_œt_js⁄
(
ts
,Ås->
œt_≥r˚¡ûes
,

1485 &
ts
->
œt_°©
[
ddú
],Ås->
io_u_∂©
[
FIO_LAT
][ddir]);

1486 
	`js⁄_obje˘_add_vÆue_obje˘
(
dú_obje˘
, "œt_ns", 
tmp_obje˘
);

1488 
	`js⁄_obje˘_add_vÆue_öt
(
dú_obje˘
, "tŸÆ_ios", 
ts
->
tŸÆ_io_u
[
DDIR_SYNC
]);

1489 
tmp_obje˘
 = 
	`add_ddú_œt_js⁄
(
ts
,Ås->
œt_≥r˚¡ûes
 |Ås->
˛©_≥r˚¡ûes
,

1490 &
ts
->
sync_°©
,Ås->
io_u_sync_∂©
);

1491 
	`js⁄_obje˘_add_vÆue_obje˘
(
dú_obje˘
, "œt_ns", 
tmp_obje˘
);

1494 i‡(!
	`ddú_rw
(
ddú
))

1498 i‡(
	`gë_ƒ_¥ios_wôh_ßm∂es
(
ts
, 
ddú
) >= 2) {

1499 
js⁄_¨øy
 *
¨øy
 = 
	`js⁄_¸óã_¨øy
();

1500 c⁄° *
obj_«me
;

1501 
i
;

1503 i‡(
ts
->
œt_≥r˚¡ûes
)

1504 
obj_«me
 = "lat_ns";

1506 
obj_«me
 = "clat_ns";

1508 
	`js⁄_obje˘_add_vÆue_¨øy
(
dú_obje˘
, "¥ios", 
¨øy
);

1510 
i
 = 0; i < 
ts
->
ƒ_˛©_¥io
[
ddú
]; i++) {

1511 i‡(
ts
->
˛©_¥io
[
ddú
][
i
].
˛©_°©
.
ßm∂es
 > 0) {

1512 
js⁄_obje˘
 *
obj
 = 
	`js⁄_¸óã_obje˘
();

1513 
˛ass
, 
Àvñ
;

1515 
˛ass
 = 
ts
->
˛©_¥io
[
ddú
][
i
].
i›rio
 >> 13;

1516 
	`js⁄_obje˘_add_vÆue_öt
(
obj
, "¥io˛ass", 
˛ass
);

1517 
Àvñ
 = 
ts
->
˛©_¥io
[
ddú
][
i
].
i›rio
 & 7;

1518 
	`js⁄_obje˘_add_vÆue_öt
(
obj
, "¥io", 
Àvñ
);

1520 
tmp_obje˘
 = 
	`add_ddú_œt_js⁄
(
ts
,

1521 
ts
->
˛©_≥r˚¡ûes
 |Ås->
œt_≥r˚¡ûes
,

1522 &
ts
->
˛©_¥io
[
ddú
][
i
].
˛©_°©
,

1523 
ts
->
˛©_¥io
[
ddú
][
i
].
io_u_∂©
);

1524 
	`js⁄_obje˘_add_vÆue_obje˘
(
obj
, 
obj_«me
, 
tmp_obje˘
);

1525 
	`js⁄_¨øy_add_vÆue_obje˘
(
¨øy
, 
obj
);

1530 i‡(
	`ˇlc_œt
(&
ts
->
bw_°©
[
ddú
], &
mö
, &
max
, &
món
, &
dev
)) {

1531 
p_of_agg
 = 
	`c⁄vît_agg_kbyãs_≥r˚¡
(
rs
, 
ddú
, 
món
);

1533 
mö
 = 
max
 = 0;

1534 
p_of_agg
 = 
món
 = 
dev
 = 0.0;

1537 
	`js⁄_obje˘_add_vÆue_öt
(
dú_obje˘
, "bw_mö", 
mö
);

1538 
	`js⁄_obje˘_add_vÆue_öt
(
dú_obje˘
, "bw_max", 
max
);

1539 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
dú_obje˘
, "bw_agg", 
p_of_agg
);

1540 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
dú_obje˘
, "bw_món", 
món
);

1541 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
dú_obje˘
, "bw_dev", 
dev
);

1542 
	`js⁄_obje˘_add_vÆue_öt
(
dú_obje˘
, "bw_samples",

1543 (&
ts
->
bw_°©
[
ddú
])->
ßm∂es
);

1545 i‡(!
	`ˇlc_œt
(&
ts
->
i›s_°©
[
ddú
], &
mö
, &
max
, &
món
, &
dev
)) {

1546 
mö
 = 
max
 = 0;

1547 
món
 = 
dev
 = 0.0;

1549 
	`js⁄_obje˘_add_vÆue_öt
(
dú_obje˘
, "i›s_mö", 
mö
);

1550 
	`js⁄_obje˘_add_vÆue_öt
(
dú_obje˘
, "i›s_max", 
max
);

1551 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
dú_obje˘
, "i›s_món", 
món
);

1552 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
dú_obje˘
, "i›s_°ddev", 
dev
);

1553 
	`js⁄_obje˘_add_vÆue_öt
(
dú_obje˘
, "iops_samples",

1554 (&
ts
->
i›s_°©
[
ddú
])->
ßm∂es
);

1556 i‡(
ts
->
ˇchehô
 +Ås->
ˇchemiss
) {

1557 
uöt64_t
 
tŸÆ
;

1558 
hô
;

1560 
tŸÆ
 = 
ts
->
ˇchehô
 +Ås->
ˇchemiss
;

1561 
hô
 = (Ë
ts
->
ˇchehô
 / (Ë
tŸÆ
;

1562 
hô
 *= 100.0;

1563 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
dú_obje˘
, "ˇchehô", 
hô
);

1565 
	}
}

1567 
	$add_mixed_ddú_°©us_js⁄
(
thªad_°©
 *
ts
,

1568 
group_run_°©s
 *
rs
, 
js⁄_obje˘
 *
∑ª¡
)

1570 
thªad_°©
 *
ts_l˛
 = 
	`gí_mixed_ddú_°©s_‰om_ts
(
ts
);

1573 i‡(
ts_l˛
)

1574 
	`add_ddú_°©us_js⁄
(
ts_l˛
, 
rs
, 
DDIR_READ
, 
∑ª¡
);

1576 
	`‰ì_˛©_¥io_°©s
(
ts_l˛
);

1577 
	`‰ì
(
ts_l˛
);

1578 
	}
}

1580 
	$show_thªad_°©us_ãr£_Æl
(
thªad_°©
 *
ts
,

1581 
group_run_°©s
 *
rs
, 
vî
,

1582 
buf_ouçut
 *
out
)

1584 
io_u_di°
[
FIO_IO_U_MAP_NR
];

1585 
io_u_œt_u
[
FIO_IO_U_LAT_U_NR
];

1586 
io_u_œt_m
[
FIO_IO_U_LAT_M_NR
];

1587 
u§_˝u
, 
sys_˝u
;

1588 
i
;

1591 i‡(
vî
 == 2)

1592 
	`log_buf
(
out
, "2;%s;%d;%d", 
ts
->
«me
,Ås->
groupid
,Ås->
îr‹
);

1594 
	`log_buf
(
out
, "%d;%s;%s;%d;%d", 
vî
, 
fio_vîsi⁄_°rög
,

1595 
ts
->
«me
,Ås->
groupid
,Ås->
îr‹
);

1598 
	`show_ddú_°©us_ãr£
(
ts
, 
rs
, 
DDIR_READ
, 
vî
, 
out
);

1599 i‡(
ts
->
unifõd_rw_ªp
 !
UNIFIED_MIXED
) {

1601 
	`show_ddú_°©us_ãr£
(
ts
, 
rs
, 
DDIR_WRITE
, 
vî
, 
out
);

1603 i‡(
vî
 == 2 || ver == 4 || ver == 5)

1604 
	`show_ddú_°©us_ãr£
(
ts
, 
rs
, 
DDIR_TRIM
, 
vî
, 
out
);

1606 i‡(
ts
->
unifõd_rw_ªp
 =
UNIFIED_BOTH
)

1607 
	`show_mixed_ddú_°©us_ãr£
(
ts
, 
rs
, 
vî
, 
out
);

1609 i‡(
ts
->
tŸÆ_run_time
) {

1610 
ru¡
 = (Ë
ts
->
tŸÆ_run_time
;

1612 
u§_˝u
 = (Ë
ts
->
u§_time
 * 100 / 
ru¡
;

1613 
sys_˝u
 = (Ë
ts
->
sys_time
 * 100 / 
ru¡
;

1615 
u§_˝u
 = 0;

1616 
sys_˝u
 = 0;

1619 
	`log_buf
(
out
, ";%f%%;%f%%;%Œu;%Œu;%Œu", 
u§_˝u
, 
sys_˝u
,

1620 (Ë
ts
->
˘x
,

1621 (Ë
ts
->
majf
,

1622 (Ë
ts
->
möf
);

1625 
	`°©_ˇlc_di°
(
ts
->
io_u_m≠
, 
	`ddú_rw_sum
—s->
tŸÆ_io_u
), 
io_u_di°
);

1626 
	`°©_ˇlc_œt_nu
(
ts
, 
io_u_œt_u
);

1627 
	`°©_ˇlc_œt_m
(
ts
, 
io_u_œt_m
);

1630 
	`log_buf
(
out
, ";%3.1f%%;%3.1f%%;%3.1f%%;%3.1f%%;%3.1f%%;%3.1f%%;%3.1f%%",

1631 
io_u_di°
[0], io_u_dist[1], io_u_dist[2], io_u_dist[3],

1632 
io_u_di°
[4], io_u_dist[5], io_u_dist[6]);

1635 
i
 = 0; i < 
FIO_IO_U_LAT_U_NR
; i++)

1636 
	`log_buf
(
out
, ";%3.2f%%", 
io_u_œt_u
[
i
]);

1638 
i
 = 0; i < 
FIO_IO_U_LAT_M_NR
; i++)

1639 
	`log_buf
(
out
, ";%3.2f%%", 
io_u_œt_m
[
i
]);

1642 i‡(
vî
 >3 && 
	`is_ru¬ög_backíd
())

1643 
	`show_disk_utû
(1, 
NULL
, 
out
);

1646 i‡(
ts
->
c⁄töue_⁄_îr‹
)

1647 
	`log_buf
(
out
, ";%Œu;%d", (Ë
ts
->
tŸÆ_îr_cou¡
,Ås->
fú°_îr‹
);

1650 i‡(
	`°æí
(
ts
->
des¸ùti⁄
)) {

1651 i‡(
vî
 == 2)

1652 
	`log_buf
(
out
, "\n");

1653 
	`log_buf
(
out
, ";%s", 
ts
->
des¸ùti⁄
);

1656 
	`log_buf
(
out
, "\n");

1657 
	}
}

1659 
	$js⁄_add_job_›ts
(
js⁄_obje˘
 *
roŸ
, c⁄° *
«me
,

1660 
Êi°_hód
 *
›t_li°
)

1662 
js⁄_obje˘
 *
dú_obje˘
;

1663 
Êi°_hód
 *
íåy
;

1664 
¥öt_›ti⁄
 *
p
;

1666 i‡(
	`Êi°_em±y
(
›t_li°
))

1669 
dú_obje˘
 = 
	`js⁄_¸óã_obje˘
();

1670 
	`js⁄_obje˘_add_vÆue_obje˘
(
roŸ
, 
«me
, 
dú_obje˘
);

1672 
	`Êi°_f‹_óch
(
íåy
, 
›t_li°
) {

1673 
p
 = 
	`Êi°_íåy
(
íåy
, 
¥öt_›ti⁄
, 
li°
);

1674 
	`js⁄_obje˘_add_vÆue_°rög
(
dú_obje˘
, 
p
->
«me
,Ö->
vÆue
);

1676 
	}
}

1678 
js⁄_obje˘
 *
	$show_thªad_°©us_js⁄
(
thªad_°©
 *
ts
,

1679 
group_run_°©s
 *
rs
,

1680 
Êi°_hód
 *
›t_li°
)

1682 
js⁄_obje˘
 *
roŸ
, *
tmp
;

1683 
jobs_ëa
 *
je
;

1684 
io_u_di°
[
FIO_IO_U_MAP_NR
];

1685 
io_u_œt_n
[
FIO_IO_U_LAT_N_NR
];

1686 
io_u_œt_u
[
FIO_IO_U_LAT_U_NR
];

1687 
io_u_œt_m
[
FIO_IO_U_LAT_M_NR
];

1688 
u§_˝u
, 
sys_˝u
;

1689 
i
;

1690 
size_t
 
size
;

1692 
roŸ
 = 
	`js⁄_¸óã_obje˘
();

1693 
	`js⁄_obje˘_add_vÆue_°rög
(
roŸ
, "job«me", 
ts
->
«me
);

1694 
	`js⁄_obje˘_add_vÆue_öt
(
roŸ
, "groupid", 
ts
->
groupid
);

1695 
	`js⁄_obje˘_add_vÆue_öt
(
roŸ
, "îr‹", 
ts
->
îr‹
);

1698 
je
 = 
	`gë_jobs_ëa
(
åue
, &
size
);

1699 i‡(
je
) {

1700 
	`js⁄_obje˘_add_vÆue_öt
(
roŸ
, "ëa", 
je
->
ëa_£c
);

1701 
	`js⁄_obje˘_add_vÆue_öt
(
roŸ
, "ñ≠£d", 
je
->
ñ≠£d_£c
);

1702 
	`‰ì
(
je
);

1705 i‡(
›t_li°
)

1706 
	`js⁄_add_job_›ts
(
roŸ
, "job o±i⁄s", 
›t_li°
);

1708 
	`add_ddú_°©us_js⁄
(
ts
, 
rs
, 
DDIR_READ
, 
roŸ
);

1709 
	`add_ddú_°©us_js⁄
(
ts
, 
rs
, 
DDIR_WRITE
, 
roŸ
);

1710 
	`add_ddú_°©us_js⁄
(
ts
, 
rs
, 
DDIR_TRIM
, 
roŸ
);

1711 
	`add_ddú_°©us_js⁄
(
ts
, 
rs
, 
DDIR_SYNC
, 
roŸ
);

1713 i‡(
ts
->
unifõd_rw_ªp
 =
UNIFIED_BOTH
)

1714 
	`add_mixed_ddú_°©us_js⁄
(
ts
, 
rs
, 
roŸ
);

1717 i‡(
ts
->
tŸÆ_run_time
) {

1718 
ru¡
 = (Ë
ts
->
tŸÆ_run_time
;

1720 
u§_˝u
 = (Ë
ts
->
u§_time
 * 100 / 
ru¡
;

1721 
sys_˝u
 = (Ë
ts
->
sys_time
 * 100 / 
ru¡
;

1723 
u§_˝u
 = 0;

1724 
sys_˝u
 = 0;

1726 
	`js⁄_obje˘_add_vÆue_öt
(
roŸ
, "job_ru¡ime", 
ts
->
tŸÆ_run_time
);

1727 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
roŸ
, "u§_˝u", 
u§_˝u
);

1728 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
roŸ
, "sys_˝u", 
sys_˝u
);

1729 
	`js⁄_obje˘_add_vÆue_öt
(
roŸ
, "˘x", 
ts
->
˘x
);

1730 
	`js⁄_obje˘_add_vÆue_öt
(
roŸ
, "majf", 
ts
->
majf
);

1731 
	`js⁄_obje˘_add_vÆue_öt
(
roŸ
, "möf", 
ts
->
möf
);

1734 
	`°©_ˇlc_di°
(
ts
->
io_u_m≠
, 
	`ddú_rw_sum
—s->
tŸÆ_io_u
), 
io_u_di°
);

1735 
tmp
 = 
	`js⁄_¸óã_obje˘
();

1736 
	`js⁄_obje˘_add_vÆue_obje˘
(
roŸ
, "iodïth_Àvñ", 
tmp
);

1738 
i
 = 0; i < 7; i++) {

1739 
«me
[20];

1740 i‡(
i
 < 6)

1741 
	`¢¥ötf
(
«me
, 20, "%d", 1 << 
i
);

1743 
	`¢¥ötf
(
«me
, 20, ">=%d", 1 << 
i
);

1744 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
tmp
, (c⁄° *)
«me
, 
io_u_di°
[
i
]);

1748 
	`°©_ˇlc_di°
(
ts
->
io_u_submô
,Ås->
tŸÆ_submô
, 
io_u_di°
);

1749 
tmp
 = 
	`js⁄_¸óã_obje˘
();

1750 
	`js⁄_obje˘_add_vÆue_obje˘
(
roŸ
, "iodïth_submô", 
tmp
);

1752 
i
 = 0; i < 7; i++) {

1753 
«me
[20];

1754 i‡(
i
 == 0)

1755 
	`¢¥ötf
(
«me
, 20, "0");

1756 i‡(
i
 < 6)

1757 
	`¢¥ötf
(
«me
, 20, "%d", 1 << (
i
+1));

1759 
	`¢¥ötf
(
«me
, 20, ">=%d", 1 << 
i
);

1760 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
tmp
, (c⁄° *)
«me
, 
io_u_di°
[
i
]);

1764 
	`°©_ˇlc_di°
(
ts
->
io_u_com∂ëe
,Ås->
tŸÆ_com∂ëe
, 
io_u_di°
);

1765 
tmp
 = 
	`js⁄_¸óã_obje˘
();

1766 
	`js⁄_obje˘_add_vÆue_obje˘
(
roŸ
, "iodïth_com∂ëe", 
tmp
);

1768 
i
 = 0; i < 7; i++) {

1769 
«me
[20];

1770 i‡(
i
 == 0)

1771 
	`¢¥ötf
(
«me
, 20, "0");

1772 i‡(
i
 < 6)

1773 
	`¢¥ötf
(
«me
, 20, "%d", 1 << (
i
+1));

1775 
	`¢¥ötf
(
«me
, 20, ">=%d", 1 << 
i
);

1776 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
tmp
, (c⁄° *)
«me
, 
io_u_di°
[
i
]);

1780 
	`°©_ˇlc_di°
(
ts
->
io_u_m≠
, 
	`ddú_rw_sum
—s->
tŸÆ_io_u
), 
io_u_di°
);

1781 
	`°©_ˇlc_œt_n
(
ts
, 
io_u_œt_n
);

1782 
	`°©_ˇlc_œt_u
(
ts
, 
io_u_œt_u
);

1783 
	`°©_ˇlc_œt_m
(
ts
, 
io_u_œt_m
);

1786 
tmp
 = 
	`js⁄_¸óã_obje˘
();

1787 
	`js⁄_obje˘_add_vÆue_obje˘
(
roŸ
, "œãncy_ns", 
tmp
);

1788 
i
 = 0; i < 
FIO_IO_U_LAT_N_NR
; i++) {

1789 c⁄° *
ønges
[] = { "2", "4", "10", "20", "50", "100",

1791 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
tmp
, 
ønges
[
i
], 
io_u_œt_n
[i]);

1794 
tmp
 = 
	`js⁄_¸óã_obje˘
();

1795 
	`js⁄_obje˘_add_vÆue_obje˘
(
roŸ
, "œãncy_us", 
tmp
);

1796 
i
 = 0; i < 
FIO_IO_U_LAT_U_NR
; i++) {

1797 c⁄° *
ønges
[] = { "2", "4", "10", "20", "50", "100",

1799 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
tmp
, 
ønges
[
i
], 
io_u_œt_u
[i]);

1802 
tmp
 = 
	`js⁄_¸óã_obje˘
();

1803 
	`js⁄_obje˘_add_vÆue_obje˘
(
roŸ
, "œãncy_ms", 
tmp
);

1804 
i
 = 0; i < 
FIO_IO_U_LAT_M_NR
; i++) {

1805 c⁄° *
ønges
[] = { "2", "4", "10", "20", "50", "100",

1808 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
tmp
, 
ønges
[
i
], 
io_u_œt_m
[i]);

1812 i‡(
ts
->
c⁄töue_⁄_îr‹
) {

1813 
	`js⁄_obje˘_add_vÆue_öt
(
roŸ
, "tŸÆ_îr", 
ts
->
tŸÆ_îr_cou¡
);

1814 
	`js⁄_obje˘_add_vÆue_öt
(
roŸ
, "fú°_îr‹", 
ts
->
fú°_îr‹
);

1817 i‡(
ts
->
œãncy_dïth
) {

1818 
	`js⁄_obje˘_add_vÆue_öt
(
roŸ
, "œãncy_dïth", 
ts
->
œãncy_dïth
);

1819 
	`js⁄_obje˘_add_vÆue_öt
(
roŸ
, "œãncy_èrgë", 
ts
->
œãncy_èrgë
);

1820 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
roŸ
, "œãncy_≥r˚¡ûe", 
ts
->
œãncy_≥r˚¡ûe
.
u
.
f
);

1821 
	`js⁄_obje˘_add_vÆue_öt
(
roŸ
, "œãncy_wödow", 
ts
->
œãncy_wödow
);

1825 i‡(
	`°æí
(
ts
->
des¸ùti⁄
))

1826 
	`js⁄_obje˘_add_vÆue_°rög
(
roŸ
, "desc", 
ts
->
des¸ùti⁄
);

1828 i‡(
ts
->
ƒ_block_öfos
) {

1830 
Àn
;

1831 *
≥r˚¡ûes
 = 
NULL
;

1832 
block_°©e_cou¡s
[
BLOCK_STATE_COUNT
];

1834 
Àn
 = 
	`ˇlc_block_≥r˚¡ûes
(
ts
->
ƒ_block_öfos
,Ås->
block_öfos
,

1835 
ts
->
≥r˚¡ûe_li°
,

1836 &
≥r˚¡ûes
, 
block_°©e_cou¡s
);

1838 i‡(
Àn
) {

1839 
js⁄_obje˘
 *
block
, *
≥r˚¡ûe_obje˘
, *
°©es
;

1840 
°©e
;

1841 
block
 = 
	`js⁄_¸óã_obje˘
();

1842 
	`js⁄_obje˘_add_vÆue_obje˘
(
roŸ
, "block", 
block
);

1844 
≥r˚¡ûe_obje˘
 = 
	`js⁄_¸óã_obje˘
();

1845 
	`js⁄_obje˘_add_vÆue_obje˘
(
block
, "percentiles",

1846 
≥r˚¡ûe_obje˘
);

1847 
i
 = 0; i < 
Àn
; i++) {

1848 
buf
[20];

1849 
	`¢¥ötf
(
buf
, (buf), "%f",

1850 
ts
->
≥r˚¡ûe_li°
[
i
].
u
.
f
);

1851 
	`js⁄_obje˘_add_vÆue_öt
(
≥r˚¡ûe_obje˘
,

1852 
buf
,

1853 
≥r˚¡ûes
[
i
]);

1856 
°©es
 = 
	`js⁄_¸óã_obje˘
();

1857 
	`js⁄_obje˘_add_vÆue_obje˘
(
block
, "°©es", 
°©es
);

1858 
°©e
 = 0; sèã < 
BLOCK_STATE_COUNT
; state++) {

1859 
	`js⁄_obje˘_add_vÆue_öt
(
°©es
,

1860 
block_°©e_«mes
[
°©e
],

1861 
block_°©e_cou¡s
[
°©e
]);

1863 
	`‰ì
(
≥r˚¡ûes
);

1867 i‡(
ts
->
ss_dur
) {

1868 
js⁄_obje˘
 *
d©a
;

1869 
js⁄_¨øy
 *
i›s
, *
bw
;

1870 
j
, 
k
, 
l
;

1871 
ss_buf
[64];

1873 
	`¢¥ötf
(
ss_buf
, (ss_buf), "%s%s:%f%s",

1874 
ts
->
ss_°©e
 & 
FIO_SS_IOPS
 ? "iops" : "bw",

1875 
ts
->
ss_°©e
 & 
FIO_SS_SLOPE
 ? "_slope" : "",

1876 (Ë
ts
->
ss_limô
.
u
.
f
,

1877 
ts
->
ss_°©e
 & 
FIO_SS_PCT
 ? "%" : "");

1879 
tmp
 = 
	`js⁄_¸óã_obje˘
();

1880 
	`js⁄_obje˘_add_vÆue_obje˘
(
roŸ
, "°ódy°©e", 
tmp
);

1881 
	`js⁄_obje˘_add_vÆue_°rög
(
tmp
, "ss", 
ss_buf
);

1882 
	`js⁄_obje˘_add_vÆue_öt
(
tmp
, "duøti⁄", ()
ts
->
ss_dur
);

1883 
	`js⁄_obje˘_add_vÆue_öt
(
tmp
, "©èöed", (
ts
->
ss_°©e
 & 
FIO_SS_ATTAINED
) > 0);

1885 
	`¢¥ötf
(
ss_buf
, (ss_buf), "%f%s", (Ë
ts
->
ss_¸ôîi⁄
.
u
.
f
,

1886 
ts
->
ss_°©e
 & 
FIO_SS_PCT
 ? "%" : "");

1887 
	`js⁄_obje˘_add_vÆue_°rög
(
tmp
, "¸ôîi⁄", 
ss_buf
);

1888 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
tmp
, "max_devüti⁄", 
ts
->
ss_devüti⁄
.
u
.
f
);

1889 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
tmp
, "¶›e", 
ts
->
ss_¶›e
.
u
.
f
);

1891 
d©a
 = 
	`js⁄_¸óã_obje˘
();

1892 
	`js⁄_obje˘_add_vÆue_obje˘
(
tmp
, "d©a", 
d©a
);

1893 
bw
 = 
	`js⁄_¸óã_¨øy
();

1894 
i›s
 = 
	`js⁄_¸óã_¨øy
();

1902 i‡((
ts
->
ss_°©e
 & 
FIO_SS_ATTAINED
Ë|| !—s->ss_°©ê& 
FIO_SS_BUFFER_FULL
))

1903 
j
 = 
ts
->
ss_hód
;

1905 
j
 = 
ts
->
ss_hód
 =0 ?Ås->
ss_dur
 - 1 :Ås->ss_head - 1;

1906 
l
 = 0;Ü < 
ts
->
ss_dur
;Ü++) {

1907 
k
 = (
j
 + 
l
Ë% 
ts
->
ss_dur
;

1908 
	`js⁄_¨øy_add_vÆue_öt
(
bw
, 
ts
->
ss_bw_d©a
[
k
]);

1909 
	`js⁄_¨øy_add_vÆue_öt
(
i›s
, 
ts
->
ss_i›s_d©a
[
k
]);

1911 
	`js⁄_obje˘_add_vÆue_öt
(
d©a
, "bw_món", 
	`°ódy°©e_bw_món
(
ts
));

1912 
	`js⁄_obje˘_add_vÆue_öt
(
d©a
, "i›s_món", 
	`°ódy°©e_i›s_món
(
ts
));

1913 
	`js⁄_obje˘_add_vÆue_¨øy
(
d©a
, "i›s", 
i›s
);

1914 
	`js⁄_obje˘_add_vÆue_¨øy
(
d©a
, "bw", 
bw
);

1917  
roŸ
;

1918 
	}
}

1920 
	$show_thªad_°©us_ãr£
(
thªad_°©
 *
ts
,

1921 
group_run_°©s
 *
rs
,

1922 
buf_ouçut
 *
out
)

1924 i‡(
ãr£_vîsi⁄
 >= 2 &&Åerse_version <= 5)

1925 
	`show_thªad_°©us_ãr£_Æl
(
ts
, 
rs
, 
ãr£_vîsi⁄
, 
out
);

1927 
	`log_îr
("fio: badÅî£ vîsi⁄!? %d\n", 
ãr£_vîsi⁄
);

1928 
	}
}

1930 
js⁄_obje˘
 *
	$show_thªad_°©us
(
thªad_°©
 *
ts
,

1931 
group_run_°©s
 *
rs
,

1932 
Êi°_hód
 *
›t_li°
,

1933 
buf_ouçut
 *
out
)

1935 
js⁄_obje˘
 *
ªt
 = 
NULL
;

1937 i‡(
ouçut_f‹m©
 & 
FIO_OUTPUT_TERSE
)

1938 
	`show_thªad_°©us_ãr£
(
ts
, 
rs
, 
out
);

1939 i‡(
ouçut_f‹m©
 & 
FIO_OUTPUT_JSON
)

1940 
ªt
 = 
	`show_thªad_°©us_js⁄
(
ts
, 
rs
, 
›t_li°
);

1941 i‡(
ouçut_f‹m©
 & 
FIO_OUTPUT_NORMAL
)

1942 
	`show_thªad_°©us_n‹mÆ
(
ts
, 
rs
, 
out
);

1944  
ªt
;

1945 
	}
}

1947 
	$__sum_°©
(
io_°©
 *
d°
, io_°© *
§c
, 
boﬁ
 
fú°
)

1949 
món
, 
S
;

1951 
d°
->
mö_vÆ
 = 
	`mö
(d°->mö_vÆ, 
§c
->min_val);

1952 
d°
->
max_vÆ
 = 
	`max
(d°->max_vÆ, 
§c
->max_val);

1959 i‡(
fú°
) {

1960 
món
 = 
§c
->món.
u
.
f
;

1961 
S
 = 
§c
->S.
u
.
f
;

1963 
dñè
 = 
§c
->
món
.
u
.
f
 - 
d°
->mean.u.f;

1965 
món
 = ((
§c
->món.
u
.
f
 * src->
ßm∂es
) +

1966 (
d°
->
món
.
u
.
f
 * d°->
ßm∂es
)) /

1967 (
d°
->
ßm∂es
 + 
§c
->samples);

1969 
S
 = 
§c
->S.
u
.
f
 + 
d°
->S.u.‡+ 
	`pow
(
dñè
, 2.0) *

1970 (
d°
->
ßm∂es
 * 
§c
->samples) /

1971 (
d°
->
ßm∂es
 + 
§c
->samples);

1974 
d°
->
ßm∂es
 +
§c
->samples;

1975 
d°
->
món
.
u
.
f
 = mean;

1976 
d°
->
S
.
u
.
f
 = S;

1978 
	}
}

1986 
	$sum_°©
(
io_°©
 *
d°
, io_°© *
§c
, 
boﬁ
 
puª_sum
)

1988 
boﬁ
 
fú°
 = 
d°
->
ßm∂es
 == 0;

1990 i‡(
§c
->
ßm∂es
 == 0)

1993 i‡(!
puª_sum
) {

1994 
	`__sum_°©
(
d°
, 
§c
, 
fú°
);

1998 i‡(
fú°
) {

1999 
d°
->
mö_vÆ
 = 
§c
->min_val;

2000 
d°
->
max_vÆ
 = 
§c
->max_val;

2001 
d°
->
ßm∂es
 = 
§c
->samples;

2002 
d°
->
món
.
u
.
f
 = 
§c
->mean.u.f;

2003 
d°
->
S
.
u
.
f
 = 
§c
->S.u.f;

2005 
d°
->
mö_vÆ
 +
§c
->min_val;

2006 
d°
->
max_vÆ
 +
§c
->max_val;

2007 
d°
->
ßm∂es
 +
§c
->samples;

2008 
d°
->
món
.
u
.
f
 +
§c
->mean.u.f;

2009 
d°
->
S
.
u
.
f
 +
§c
->S.u.f;

2011 
	}
}

2013 
	$sum_group_°©s
(
group_run_°©s
 *
d°
, group_run_°©†*
§c
)

2015 
i
;

2017 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

2018 i‡(
d°
->
max_run
[
i
] < 
§c
->max_run[i])

2019 
d°
->
max_run
[
i
] = 
§c
->max_run[i];

2020 i‡(
d°
->
mö_run
[
i
] && d°->mö_run[i] > 
§c
->min_run[i])

2021 
d°
->
mö_run
[
i
] = 
§c
->min_run[i];

2022 i‡(
d°
->
max_bw
[
i
] < 
§c
->max_bw[i])

2023 
d°
->
max_bw
[
i
] = 
§c
->max_bw[i];

2024 i‡(
d°
->
mö_bw
[
i
] && d°->mö_bw[i] > 
§c
->min_bw[i])

2025 
d°
->
mö_bw
[
i
] = 
§c
->min_bw[i];

2027 
d°
->
iobyãs
[
i
] +
§c
->iobytes[i];

2028 
d°
->
agg
[
i
] +
§c
->agg[i];

2031 i‡(!
d°
->
kb_ba£
)

2032 
d°
->
kb_ba£
 = 
§c
->kb_base;

2033 i‡(!
d°
->
unô_ba£
)

2034 
d°
->
unô_ba£
 = 
§c
->unit_base;

2035 i‡(!
d°
->
sig_figs
)

2036 
d°
->
sig_figs
 = 
§c
->sig_figs;

2037 
	}
}

2042 
	$‰ì_˛©_¥io_°©s
(
thªad_°©
 *
ts
)

2044 
fio_ddú
 
ddú
;

2046 i‡(!
ts
)

2049 
ddú
 = 0; ddú < 
DDIR_RWDIR_CNT
; ddir++) {

2050 
	`s‰ì
(
ts
->
˛©_¥io
[
ddú
]);

2051 
ts
->
˛©_¥io
[
ddú
] = 
NULL
;

2052 
ts
->
ƒ_˛©_¥io
[
ddú
] = 0;

2054 
	}
}

2061 
	$Æloc_˛©_¥io_°©_ddú
(
thªad_°©
 *
ts
, 
fio_ddú
 
ddú
,

2062 
ƒ_¥ios
)

2064 
˛©_¥io_°©
 *
˛©_¥io
;

2065 
i
;

2067 
˛©_¥io
 = 
	`sˇŒoc
(
ƒ_¥ios
, (*
ts
->˛©_¥io[
ddú
]));

2068 i‡(!
˛©_¥io
) {

2069 
	`log_îr
("fio: failedÅoállocateÅs clat data\n");

2073 
i
 = 0; i < 
ƒ_¥ios
; i++)

2074 
˛©_¥io
[
i
].
˛©_°©
.
mö_vÆ
 = 
ULONG_MAX
;

2076 
ts
->
˛©_¥io
[
ddú
] = clat_prio;

2077 
ts
->
ƒ_˛©_¥io
[
ddú
] = 
ƒ_¥ios
;

2080 
	}
}

2082 
	$grow_˛©_¥io_°©
(
thªad_°©
 *
d°
, 
fio_ddú
 
ddú
)

2084 
cuº_Àn
 = 
d°
->
ƒ_˛©_¥io
[
ddú
];

2085 *
√w_¨r
;

2087 
√w_¨r
 = 
	`sˇŒoc
(
cuº_Àn
 + 1, (*
d°
->
˛©_¥io
[
ddú
]));

2088 i‡(!
√w_¨r
) {

2089 
	`log_îr
("fio: failedÅo grow clatÖrioárray\n");

2093 
	`mem˝y
(
√w_¨r
, 
d°
->
˛©_¥io
[
ddú
],

2094 
cuº_Àn
 * (*
d°
->
˛©_¥io
[
ddú
]));

2095 
	`s‰ì
(
d°
->
˛©_¥io
[
ddú
]);

2097 
d°
->
˛©_¥io
[
ddú
] = 
√w_¨r
;

2098 
d°
->
˛©_¥io
[
ddú
][
cuº_Àn
].
˛©_°©
.
mö_vÆ
 = 
ULONG_MAX
;

2099 
d°
->
ƒ_˛©_¥io
[
ddú
]++;

2102 
	}
}

2104 
	$föd_˛©_¥io_ödex
(
thªad_°©
 *
d°
, 
fio_ddú
 
ddú
,

2105 
uöt32_t
 
i›rio
)

2107 
i
, 
ƒ_¥ios
 = 
d°
->
ƒ_˛©_¥io
[
ddú
];

2109 
i
 = 0; i < 
ƒ_¥ios
; i++) {

2110 i‡(
d°
->
˛©_¥io
[
ddú
][
i
].
i›rio
 == ioprio)

2111  
i
;

2115 
	}
}

2117 
	$Æloc_‹_gë_˛©_¥io_ödex
(
thªad_°©
 *
d°
,

2118 
fio_ddú
 
ddú
, 
uöt32_t
 
i›rio
,

2119 *
idx
)

2121 
ödex
 = 
	`föd_˛©_¥io_ödex
(
d°
, 
ddú
, 
i›rio
);

2123 i‡(
ödex
 == -1) {

2124 
ödex
 = 
d°
->
ƒ_˛©_¥io
[
ddú
];

2126 i‡(
	`grow_˛©_¥io_°©
(
d°
, 
ddú
))

2129 
d°
->
˛©_¥io
[
ddú
][
ödex
].
i›rio
 = ioprio;

2132 *
idx
 = 
ödex
;

2135 
	}
}

2137 
	$˛©_¥io_°©s_c›y
(
thªad_°©
 *
d°
, thªad_°© *
§c
,

2138 
fio_ddú
 
d°_ddú
, fio_ddú 
§c_ddú
)

2140 
size_t
 
sz
 = (*
§c
->
˛©_¥io
[
§c_ddú
]) *

2141 
§c
->
ƒ_˛©_¥io
[
§c_ddú
];

2143 
d°
->
˛©_¥io
[
d°_ddú
] = 
	`smÆloc
(
sz
);

2144 i‡(!
d°
->
˛©_¥io
[
d°_ddú
]) {

2145 
	`log_îr
("fio: failedÅoálloc clatÖrioárray\n");

2149 
	`mem˝y
(
d°
->
˛©_¥io
[
d°_ddú
], 
§c
->˛©_¥io[
§c_ddú
], 
sz
);

2150 
d°
->
ƒ_˛©_¥io
[
d°_ddú
] = 
§c
->ƒ_˛©_¥io[
§c_ddú
];

2153 
	}
}

2155 
	$˛©_¥io_°©_add_ßm∂es
(
thªad_°©
 *
d°
,

2156 
fio_ddú
 
d°_ddú
, 
uöt32_t
 
i›rio
,

2157 
io_°©
 *io_stat,

2158 
uöt64_t
 *
io_u_∂©
)

2160 
i
, 
d°_ödex
;

2162 i‡(!
io_°©
->
ßm∂es
)

2165 i‡(
	`Æloc_‹_gë_˛©_¥io_ödex
(
d°
, 
d°_ddú
, 
i›rio
, &
d°_ödex
))

2168 
	`sum_°©
(&
d°
->
˛©_¥io
[
d°_ddú
][
d°_ödex
].
˛©_°©
, 
io_°©
,

2169 
Ál£
);

2171 
i
 = 0; i < 
FIO_IO_U_PLAT_NR
; i++)

2172 
d°
->
˛©_¥io
[
d°_ddú
][
d°_ödex
].
io_u_∂©
[
i
] += io_u_plat[i];

2175 
	}
}

2177 
	$sum_˛©_¥io_°©s_§c_sögÀ_¥io
(
thªad_°©
 *
d°
,

2178 
thªad_°©
 *
§c
,

2179 
fio_ddú
 
d°_ddú
,

2180 
fio_ddú
 
§c_ddú
)

2182 
io_°©
 *io_stat;

2183 
uöt64_t
 *
io_u_∂©
;

2190 
	`as£π
(!
§c
->
˛©_¥io
[
§c_ddú
]);

2191 
	`as£π
(
§c
->
ƒ_˛©_¥io
[
§c_ddú
] == 0);

2193 i‡(
§c
->
œt_≥r˚¡ûes
) {

2194 
io_u_∂©
 = 
§c
->io_u_∂©[
FIO_LAT
][
§c_ddú
];

2195 
io_°©
 = &
§c
->
œt_°©
[
§c_ddú
];

2197 
io_u_∂©
 = 
§c
->io_u_∂©[
FIO_CLAT
][
§c_ddú
];

2198 
io_°©
 = &
§c
->
˛©_°©
[
§c_ddú
];

2201  
	`˛©_¥io_°©_add_ßm∂es
(
d°
, 
d°_ddú
, 
§c
->
i›rio
, 
io_°©
,

2202 
io_u_∂©
);

2203 
	}
}

2205 
	$sum_˛©_¥io_°©s_§c_mu…i_¥io
(
thªad_°©
 *
d°
,

2206 
thªad_°©
 *
§c
,

2207 
fio_ddú
 
d°_ddú
,

2208 
fio_ddú
 
§c_ddú
)

2210 
i
;

2218 
	`as£π
(
§c
->
˛©_¥io
[
§c_ddú
]);

2219 
	`as£π
(
§c
->
ƒ_˛©_¥io
[
§c_ddú
]);

2222 i‡(!
d°
->
˛©_¥io
[
d°_ddú
])

2223  
	`˛©_¥io_°©s_c›y
(
d°
, 
§c
, 
d°_ddú
, 
§c_ddú
);

2226 
i
 = 0; i < 
§c
->
ƒ_˛©_¥io
[
§c_ddú
]; i++) {

2227 
io_°©
 *io_°© = &
§c
->
˛©_¥io
[
§c_ddú
][
i
].
˛©_°©
;

2228 
uöt64_t
 *
io_u_∂©
 = 
§c
->
˛©_¥io
[
§c_ddú
][
i
].io_u_plat;

2229 
uöt32_t
 
i›rio
 = 
§c
->
˛©_¥io
[
§c_ddú
][
i
].ioprio;

2231 i‡(
	`˛©_¥io_°©_add_ßm∂es
(
d°
, 
d°_ddú
, 
i›rio
, 
io_°©
, 
io_u_∂©
))

2236 
	}
}

2238 
	$sum_˛©_¥io_°©s
(
thªad_°©
 *
d°
, thªad_°© *
§c
,

2239 
fio_ddú
 
d°_ddú
, fio_ddú 
§c_ddú
)

2241 i‡(
d°
->
dißbÀ_¥io_°©
)

2244 i‡(!
§c
->
˛©_¥io
[
§c_ddú
])

2245  
	`sum_˛©_¥io_°©s_§c_sögÀ_¥io
(
d°
, 
§c
, 
d°_ddú
,

2246 
§c_ddú
);

2248  
	`sum_˛©_¥io_°©s_§c_mu…i_¥io
(
d°
, 
§c
, 
d°_ddú
, 
§c_ddú
);

2249 
	}
}

2251 
	$sum_thªad_°©s
(
thªad_°©
 *
d°
, thªad_°© *
§c
)

2253 
k
, 
l
, 
m
;

2255 
l
 = 0;Ü < 
DDIR_RWDIR_CNT
;Ü++) {

2256 i‡(
d°
->
unifõd_rw_ªp
 !
UNIFIED_MIXED
) {

2257 
	`sum_°©
(&
d°
->
˛©_°©
[
l
], &
§c
->˛©_°©[l], 
Ál£
);

2258 
	`sum_°©
(&
d°
->
¶©_°©
[
l
], &
§c
->¶©_°©[l], 
Ál£
);

2259 
	`sum_°©
(&
d°
->
œt_°©
[
l
], &
§c
->œt_°©[l], 
Ál£
);

2260 
	`sum_°©
(&
d°
->
bw_°©
[
l
], &
§c
->bw_°©[l], 
åue
);

2261 
	`sum_°©
(&
d°
->
i›s_°©
[
l
], &
§c
->i›s_°©[l], 
åue
);

2262 
	`sum_˛©_¥io_°©s
(
d°
, 
§c
, 
l
,Ü);

2264 
d°
->
io_byãs
[
l
] +
§c
->io_bytes[l];

2266 i‡(
d°
->
ru¡ime
[
l
] < 
§c
->runtime[l])

2267 
d°
->
ru¡ime
[
l
] = 
§c
->runtime[l];

2269 
	`sum_°©
(&
d°
->
˛©_°©
[0], &
§c
->˛©_°©[
l
], 
Ál£
);

2270 
	`sum_°©
(&
d°
->
¶©_°©
[0], &
§c
->¶©_°©[
l
], 
Ál£
);

2271 
	`sum_°©
(&
d°
->
œt_°©
[0], &
§c
->œt_°©[
l
], 
Ál£
);

2272 
	`sum_°©
(&
d°
->
bw_°©
[0], &
§c
->bw_°©[
l
], 
åue
);

2273 
	`sum_°©
(&
d°
->
i›s_°©
[0], &
§c
->i›s_°©[
l
], 
åue
);

2274 
	`sum_˛©_¥io_°©s
(
d°
, 
§c
, 0, 
l
);

2276 
d°
->
io_byãs
[0] +
§c
->io_byãs[
l
];

2278 i‡(
d°
->
ru¡ime
[0] < 
§c
->ru¡ime[
l
])

2279 
d°
->
ru¡ime
[0] = 
§c
->ru¡ime[
l
];

2283 
	`sum_°©
(&
d°
->
sync_°©
, &
§c
->sync_°©, 
Ál£
);

2284 
d°
->
u§_time
 +
§c
->usr_time;

2285 
d°
->
sys_time
 +
§c
->sys_time;

2286 
d°
->
˘x
 +
§c
->ctx;

2287 
d°
->
majf
 +
§c
->majf;

2288 
d°
->
möf
 +
§c
->minf;

2290 
k
 = 0; k < 
FIO_IO_U_MAP_NR
; k++) {

2291 
d°
->
io_u_m≠
[
k
] +
§c
->io_u_map[k];

2292 
d°
->
io_u_submô
[
k
] +
§c
->io_u_submit[k];

2293 
d°
->
io_u_com∂ëe
[
k
] +
§c
->io_u_complete[k];

2296 
k
 = 0; k < 
FIO_IO_U_LAT_N_NR
; k++)

2297 
d°
->
io_u_œt_n
[
k
] +
§c
->io_u_lat_n[k];

2298 
k
 = 0; k < 
FIO_IO_U_LAT_U_NR
; k++)

2299 
d°
->
io_u_œt_u
[
k
] +
§c
->io_u_lat_u[k];

2300 
k
 = 0; k < 
FIO_IO_U_LAT_M_NR
; k++)

2301 
d°
->
io_u_œt_m
[
k
] +
§c
->io_u_lat_m[k];

2303 
k
 = 0; k < 
DDIR_RWDIR_CNT
; k++) {

2304 i‡(
d°
->
unifõd_rw_ªp
 !
UNIFIED_MIXED
) {

2305 
d°
->
tŸÆ_io_u
[
k
] +
§c
->total_io_u[k];

2306 
d°
->
sh‹t_io_u
[
k
] +
§c
->short_io_u[k];

2307 
d°
->
dr›_io_u
[
k
] +
§c
->drop_io_u[k];

2309 
d°
->
tŸÆ_io_u
[0] +
§c
->tŸÆ_io_u[
k
];

2310 
d°
->
sh‹t_io_u
[0] +
§c
->sh‹t_io_u[
k
];

2311 
d°
->
dr›_io_u
[0] +
§c
->dr›_io_u[
k
];

2315 
d°
->
tŸÆ_io_u
[
DDIR_SYNC
] +
§c
->total_io_u[DDIR_SYNC];

2317 
k
 = 0; k < 
FIO_LAT_CNT
; k++)

2318 
l
 = 0;Ü < 
DDIR_RWDIR_CNT
;Ü++)

2319 
m
 = 0; m < 
FIO_IO_U_PLAT_NR
; m++)

2320 i‡(
d°
->
unifõd_rw_ªp
 !
UNIFIED_MIXED
)

2321 
d°
->
io_u_∂©
[
k
][
l
][
m
] +
§c
->io_u_plat[k][l][m];

2323 
d°
->
io_u_∂©
[
k
][0][
m
] +
§c
->io_u_∂©[k][
l
][m];

2325 
k
 = 0; k < 
FIO_IO_U_PLAT_NR
; k++)

2326 
d°
->
io_u_sync_∂©
[
k
] +
§c
->io_u_sync_plat[k];

2328 
d°
->
tŸÆ_run_time
 +
§c
->total_run_time;

2329 
d°
->
tŸÆ_submô
 +
§c
->total_submit;

2330 
d°
->
tŸÆ_com∂ëe
 +
§c
->total_complete;

2331 
d°
->
ƒ_z⁄e_ª£ts
 +
§c
->nr_zone_resets;

2332 
d°
->
ˇchehô
 +
§c
->cachehit;

2333 
d°
->
ˇchemiss
 +
§c
->cachemiss;

2334 
	}
}

2336 
	$öô_group_run_°©
(
group_run_°©s
 *
gs
)

2338 
i
;

2339 
	`mem£t
(
gs
, 0, (*gs));

2341 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++)

2342 
gs
->
mö_bw
[
i
] = gs->
mö_run
[i] = ~0UL;

2343 
	}
}

2345 
	$öô_thªad_°©_mö_vÆs
(
thªad_°©
 *
ts
)

2347 
i
;

2349 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

2350 
ts
->
˛©_°©
[
i
].
mö_vÆ
 = 
ULONG_MAX
;

2351 
ts
->
¶©_°©
[
i
].
mö_vÆ
 = 
ULONG_MAX
;

2352 
ts
->
œt_°©
[
i
].
mö_vÆ
 = 
ULONG_MAX
;

2353 
ts
->
bw_°©
[
i
].
mö_vÆ
 = 
ULONG_MAX
;

2354 
ts
->
i›s_°©
[
i
].
mö_vÆ
 = 
ULONG_MAX
;

2356 
ts
->
sync_°©
.
mö_vÆ
 = 
ULONG_MAX
;

2357 
	}
}

2359 
	$öô_thªad_°©
(
thªad_°©
 *
ts
)

2361 
	`mem£t
(
ts
, 0, (*ts));

2363 
	`öô_thªad_°©_mö_vÆs
(
ts
);

2364 
ts
->
groupid
 = -1;

2365 
	}
}

2367 
	$öô_≥r_¥io_°©s
(
thªad_°©
 *
thªad°©s
, 
ƒ_ts
)

2369 
thªad_d©a
 *
td
;

2370 
thªad_°©
 *
ts
;

2371 
i
, 
j
, 
œ°_ts
, 
idx
;

2372 
fio_ddú
 
ddú
;

2374 
j
 = 0;

2375 
œ°_ts
 = -1;

2376 
idx
 = 0;

2383 
	`f‹_óch_td
(
td
, 
i
) {

2384 i‡(!
td
->
o
.
°©s
)

2386 i‡(
idx
 &&

2387 (!
td
->
o
.
group_ªp‹tög
 ||

2388 (
td
->
o
.
group_ªp‹tög
 && 
œ°_ts
 !td->
groupid
))) {

2389 
idx
 = 0;

2390 
j
++;

2393 
œ°_ts
 = 
td
->
groupid
;

2394 
ts
 = &
thªad°©s
[
j
];

2397 i‡(
idx
 == 0)

2398 
ts
->
i›rio
 = 
td
->ioprio;

2399 i‡(
td
->
i›rio
 !
ts
->ioprio)

2400 
ts
->
dißbÀ_¥io_°©
 = 1;

2402 
ddú
 = 0; ddú < 
DDIR_RWDIR_CNT
; ddir++) {

2403 i‡(
td
->
ts
.
˛©_¥io
[
ddú
]) {

2404 
ts
->
dißbÀ_¥io_°©
 = 1;

2409 
idx
++;

2413 
i
 = 0; i < 
ƒ_ts
; i++) {

2414 
ts
 = &
thªad°©s
[
i
];

2415 
ts
->
dißbÀ_¥io_°©
 = !ts->disable_prio_stat;

2417 
	}
}

2419 
	$__show_run_°©s
()

2421 
group_run_°©s
 *
run°©s
, *
rs
;

2422 
thªad_d©a
 *
td
;

2423 
thªad_°©
 *
thªad°©s
, *
ts
;

2424 
i
, 
j
, 
k
, 
ƒ_ts
, 
œ°_ts
, 
idx
;

2425 
boﬁ
 
kb_ba£_w¨√d
 = 
Ál£
;

2426 
boﬁ
 
unô_ba£_w¨√d
 = 
Ál£
;

2427 
js⁄_obje˘
 *
roŸ
 = 
NULL
;

2428 
js⁄_¨øy
 *
¨øy
 = 
NULL
;

2429 
buf_ouçut
 
ouçut
[
FIO_OUTPUT_NR
];

2430 
Êi°_hód
 **
›t_li°s
;

2432 
run°©s
 = 
	`mÆloc
((
group_run_°©s
Ë* (
groupid
 + 1));

2434 
i
 = 0; i < 
groupid
 + 1; i++)

2435 
	`öô_group_run_°©
(&
run°©s
[
i
]);

2441 
ƒ_ts
 = 0;

2442 
œ°_ts
 = -1;

2443 
	`f‹_óch_td
(
td
, 
i
) {

2444 i‡(!
td
->
o
.
group_ªp‹tög
) {

2445 
ƒ_ts
++;

2448 i‡(
œ°_ts
 =
td
->
groupid
)

2450 i‡(!
td
->
o
.
°©s
)

2453 
œ°_ts
 = 
td
->
groupid
;

2454 
ƒ_ts
++;

2457 
thªad°©s
 = 
	`mÆloc
(
ƒ_ts
 * (
thªad_°©
));

2458 
›t_li°s
 = 
	`mÆloc
(
ƒ_ts
 * (
Êi°_hód
 *));

2460 
i
 = 0; i < 
ƒ_ts
; i++) {

2461 
	`öô_thªad_°©
(&
thªad°©s
[
i
]);

2462 
›t_li°s
[
i
] = 
NULL
;

2465 
	`öô_≥r_¥io_°©s
(
thªad°©s
, 
ƒ_ts
);

2467 
j
 = 0;

2468 
œ°_ts
 = -1;

2469 
idx
 = 0;

2470 
	`f‹_óch_td
(
td
, 
i
) {

2471 i‡(!
td
->
o
.
°©s
)

2473 i‡(
idx
 && (!
td
->
o
.
group_ªp‹tög
 ||

2474 (
td
->
o
.
group_ªp‹tög
 && 
œ°_ts
 !td->
groupid
))) {

2475 
idx
 = 0;

2476 
j
++;

2479 
œ°_ts
 = 
td
->
groupid
;

2481 
ts
 = &
thªad°©s
[
j
];

2483 
ts
->
˛©_≥r˚¡ûes
 = 
td
->
o
.clat_percentiles;

2484 
ts
->
œt_≥r˚¡ûes
 = 
td
->
o
.lat_percentiles;

2485 
ts
->
¶©_≥r˚¡ûes
 = 
td
->
o
.slat_percentiles;

2486 
ts
->
≥r˚¡ûe_¥ecisi⁄
 = 
td
->
o
.percentile_precision;

2487 
	`mem˝y
(
ts
->
≥r˚¡ûe_li°
, 
td
->
o
.percentile_list, (td->o.percentile_list));

2488 
›t_li°s
[
j
] = &
td
->
›t_li°
;

2490 
idx
++;

2492 i‡(
ts
->
groupid
 == -1) {

2496 
	`¢¥ötf
(
ts
->
«me
, —s->«me), "%s", 
td
->
o
.name);

2497 i‡(
td
->
o
.
des¸ùti⁄
)

2498 
	`¢¥ötf
(
ts
->
des¸ùti⁄
,

2499 (
ts
->
des¸ùti⁄
), "%s",

2500 
td
->
o
.
des¸ùti⁄
);

2502 
	`mem£t
(
ts
->
des¸ùti⁄
, 0, 
FIO_JOBDESC_SIZE
);

2508 
ts
->
thªad_numbî
 = 
td
->thread_number;

2509 
ts
->
groupid
 = 
td
->groupid;

2514 
ts
->
pid
 = 
td
->pid;

2516 
ts
->
kb_ba£
 = 
td
->
o
.kb_base;

2517 
ts
->
unô_ba£
 = 
td
->
o
.unit_base;

2518 
ts
->
sig_figs
 = 
td
->
o
.sig_figs;

2519 
ts
->
unifõd_rw_ªp
 = 
td
->
o
.unified_rw_rep;

2520 } i‡(
ts
->
kb_ba£
 !
td
->
o
.kb_ba£ && !
kb_ba£_w¨√d
) {

2521 
	`log_öfo
("fio: kb_base differs for jobs in group, using"

2522 " %uá†thêba£\n", 
ts
->
kb_ba£
);

2523 
kb_ba£_w¨√d
 = 
åue
;

2524 } i‡(
ts
->
unô_ba£
 !
td
->
o
.unô_ba£ && !
unô_ba£_w¨√d
) {

2525 
	`log_öfo
("fio: unit_base differs for jobs in group, using"

2526 " %uá†thêba£\n", 
ts
->
unô_ba£
);

2527 
unô_ba£_w¨√d
 = 
åue
;

2530 
ts
->
c⁄töue_⁄_îr‹
 = 
td
->
o
.continue_on_error;

2531 
ts
->
tŸÆ_îr_cou¡
 +
td
->total_err_count;

2532 
ts
->
fú°_îr‹
 = 
td
->first_error;

2533 i‡(!
ts
->
îr‹
) {

2534 i‡(!
td
->
îr‹
 &&Åd->
o
.
c⁄töue_⁄_îr‹
 &&

2535 
td
->
fú°_îr‹
) {

2536 
ts
->
îr‹
 = 
td
->
fú°_îr‹
;

2537 
	`¢¥ötf
(
ts
->
vîr‹
, (ts->verror), "%s",

2538 
td
->
vîr‹
);

2539 } i‡(
td
->
îr‹
) {

2540 
ts
->
îr‹
 = 
td
->error;

2541 
	`¢¥ötf
(
ts
->
vîr‹
, (ts->verror), "%s",

2542 
td
->
vîr‹
);

2546 
ts
->
œãncy_dïth
 = 
td
->
œãncy_qd
;

2547 
ts
->
œãncy_èrgë
 = 
td
->
o
.latency_target;

2548 
ts
->
œãncy_≥r˚¡ûe
 = 
td
->
o
.latency_percentile;

2549 
ts
->
œãncy_wödow
 = 
td
->
o
.latency_window;

2551 
ts
->
ƒ_block_öfos
 = 
td
->ts.nr_block_infos;

2552 
k
 = 0; k < 
ts
->
ƒ_block_öfos
; k++)

2553 
ts
->
block_öfos
[
k
] = 
td
->ts.block_infos[k];

2555 
	`sum_thªad_°©s
(
ts
, &
td
->ts);

2557 
ts
->
membîs
++;

2559 i‡(
td
->
o
.
ss_dur
) {

2560 
ts
->
ss_°©e
 = 
td
->
ss
.
°©e
;

2561 
ts
->
ss_dur
 = 
td
->
ss
.
dur
;

2562 
ts
->
ss_hód
 = 
td
->
ss
.
hód
;

2563 
ts
->
ss_bw_d©a
 = 
td
->
ss
.
bw_d©a
;

2564 
ts
->
ss_i›s_d©a
 = 
td
->
ss
.
i›s_d©a
;

2565 
ts
->
ss_limô
.
u
.
f
 = 
td
->
ss
.
limô
;

2566 
ts
->
ss_¶›e
.
u
.
f
 = 
td
->
ss
.
¶›e
;

2567 
ts
->
ss_devüti⁄
.
u
.
f
 = 
td
->
ss
.
devüti⁄
;

2568 
ts
->
ss_¸ôîi⁄
.
u
.
f
 = 
td
->
ss
.
¸ôîi⁄
;

2571 
ts
->
ss_dur
 =Ås->
ss_°©e
 = 0;

2574 
i
 = 0; i < 
ƒ_ts
; i++) {

2575 
bw
;

2577 
ts
 = &
thªad°©s
[
i
];

2578 i‡(
ts
->
groupid
 == -1)

2580 
rs
 = &
run°©s
[
ts
->
groupid
];

2581 
rs
->
kb_ba£
 = 
ts
->kb_base;

2582 
rs
->
unô_ba£
 = 
ts
->unit_base;

2583 
rs
->
sig_figs
 = 
ts
->sig_figs;

2584 
rs
->
unifõd_rw_ªp
 |
ts
->unified_rw_rep;

2586 
j
 = 0; j < 
DDIR_RWDIR_CNT
; j++) {

2587 i‡(!
ts
->
ru¡ime
[
j
])

2589 i‡(
ts
->
ru¡ime
[
j
] < 
rs
->
mö_run
[j] || !rs->min_run[j])

2590 
rs
->
mö_run
[
j
] = 
ts
->
ru¡ime
[j];

2591 i‡(
ts
->
ru¡ime
[
j
] > 
rs
->
max_run
[j])

2592 
rs
->
max_run
[
j
] = 
ts
->
ru¡ime
[j];

2594 
bw
 = 0;

2595 i‡(
ts
->
ru¡ime
[
j
])

2596 
bw
 = 
ts
->
io_byãs
[
j
] * 1000 /Ås->
ru¡ime
[j];

2597 i‡(
bw
 < 
rs
->
mö_bw
[
j
])

2598 
rs
->
mö_bw
[
j
] = 
bw
;

2599 i‡(
bw
 > 
rs
->
max_bw
[
j
])

2600 
rs
->
max_bw
[
j
] = 
bw
;

2602 
rs
->
iobyãs
[
j
] +
ts
->
io_byãs
[j];

2606 
i
 = 0; i < 
groupid
 + 1; i++) {

2607 
fio_ddú
 
ddú
;

2609 
rs
 = &
run°©s
[
i
];

2611 
ddú
 = 0; ddú < 
DDIR_RWDIR_CNT
; ddir++) {

2612 i‡(
rs
->
max_run
[
ddú
])

2613 
rs
->
agg
[
ddú
] = (rs->
iobyãs
[ddir] * 1000) /

2614 
rs
->
max_run
[
ddú
];

2618 
i
 = 0; i < 
FIO_OUTPUT_NR
; i++)

2619 
	`buf_ouçut_öô
(&
ouçut
[
i
]);

2624 i‡(
ouçut_f‹m©
 & 
FIO_OUTPUT_NORMAL
)

2625 
	`log_buf
(&
ouçut
[
__FIO_OUTPUT_NORMAL
], "\n");

2626 i‡(
ouçut_f‹m©
 & 
FIO_OUTPUT_JSON
) {

2627 
thªad_d©a
 *
globÆ
;

2628 
time_buf
[32];

2629 
timevÆ
 
now
;

2630 
ms_sö˚_ïoch
;

2631 
time_t
 
tv_£c
;

2633 
	`gëtimeofday
(&
now
, 
NULL
);

2634 
ms_sö˚_ïoch
 = ()(
now
.
tv_£c
) * 1000 +

2635 ()(
now
.
tv_u£c
) / 1000;

2637 
tv_£c
 = 
now
.tv_sec;

2638 
	`os_˘ime_r
(&
tv_£c
, 
time_buf
, (time_buf));

2639 i‡(
time_buf
[
	`°æí
(time_buf) - 1] == '\n')

2640 
time_buf
[
	`°æí
(time_buf) - 1] = '\0';

2642 
roŸ
 = 
	`js⁄_¸óã_obje˘
();

2643 
	`js⁄_obje˘_add_vÆue_°rög
(
roŸ
, "fiÿvîsi⁄", 
fio_vîsi⁄_°rög
);

2644 
	`js⁄_obje˘_add_vÆue_öt
(
roŸ
, "time°amp", 
now
.
tv_£c
);

2645 
	`js⁄_obje˘_add_vÆue_öt
(
roŸ
, "time°amp_ms", 
ms_sö˚_ïoch
);

2646 
	`js⁄_obje˘_add_vÆue_°rög
(
roŸ
, "time", 
time_buf
);

2647 
globÆ
 = 
	`gë_globÆ_›ti⁄s
();

2648 
	`js⁄_add_job_›ts
(
roŸ
, "globÆ o±i⁄s", &
globÆ
->
›t_li°
);

2649 
¨øy
 = 
	`js⁄_¸óã_¨øy
();

2650 
	`js⁄_obje˘_add_vÆue_¨øy
(
roŸ
, "jobs", 
¨øy
);

2653 i‡(
is_backíd
)

2654 
	`fio_£rvî_£nd_job_›ti⁄s
(&
	`gë_globÆ_›ti⁄s
()->
›t_li°
, -1U);

2656 
i
 = 0; i < 
ƒ_ts
; i++) {

2657 
ts
 = &
thªad°©s
[
i
];

2658 
rs
 = &
run°©s
[
ts
->
groupid
];

2660 i‡(
is_backíd
) {

2661 
	`fio_£rvî_£nd_job_›ti⁄s
(
›t_li°s
[
i
], i);

2662 
	`fio_£rvî_£nd_ts
(
ts
, 
rs
);

2664 i‡(
ouçut_f‹m©
 & 
FIO_OUTPUT_TERSE
)

2665 
	`show_thªad_°©us_ãr£
(
ts
, 
rs
, &
ouçut
[
__FIO_OUTPUT_TERSE
]);

2666 i‡(
ouçut_f‹m©
 & 
FIO_OUTPUT_JSON
) {

2667 
js⁄_obje˘
 *
tmp
 = 
	`show_thªad_°©us_js⁄
(
ts
, 
rs
, 
›t_li°s
[
i
]);

2668 
	`js⁄_¨øy_add_vÆue_obje˘
(
¨øy
, 
tmp
);

2670 i‡(
ouçut_f‹m©
 & 
FIO_OUTPUT_NORMAL
)

2671 
	`show_thªad_°©us_n‹mÆ
(
ts
, 
rs
, &
ouçut
[
__FIO_OUTPUT_NORMAL
]);

2674 i‡(!
is_backíd
 && (
ouçut_f‹m©
 & 
FIO_OUTPUT_JSON
)) {

2676 
	`show_disk_utû
(1, 
roŸ
, &
ouçut
[
__FIO_OUTPUT_JSON
]);

2678 
	`show_idÀ_¥of_°©s
(
FIO_OUTPUT_JSON
, 
roŸ
, &
ouçut
[
__FIO_OUTPUT_JSON
]);

2680 
	`js⁄_¥öt_obje˘
(
roŸ
, &
ouçut
[
__FIO_OUTPUT_JSON
]);

2681 
	`log_buf
(&
ouçut
[
__FIO_OUTPUT_JSON
], "\n");

2682 
	`js⁄_‰ì_obje˘
(
roŸ
);

2685 
i
 = 0; i < 
groupid
 + 1; i++) {

2686 
rs
 = &
run°©s
[
i
];

2688 
rs
->
groupid
 = 
i
;

2689 i‡(
is_backíd
)

2690 
	`fio_£rvî_£nd_gs
(
rs
);

2691 i‡(
ouçut_f‹m©
 & 
FIO_OUTPUT_NORMAL
)

2692 
	`show_group_°©s
(
rs
, &
ouçut
[
__FIO_OUTPUT_NORMAL
]);

2695 i‡(
is_backíd
)

2696 
	`fio_£rvî_£nd_du
();

2697 i‡(
ouçut_f‹m©
 & 
FIO_OUTPUT_NORMAL
) {

2698 
	`show_disk_utû
(0, 
NULL
, &
ouçut
[
__FIO_OUTPUT_NORMAL
]);

2699 
	`show_idÀ_¥of_°©s
(
FIO_OUTPUT_NORMAL
, 
NULL
, &
ouçut
[
__FIO_OUTPUT_NORMAL
]);

2702 
i
 = 0; i < 
FIO_OUTPUT_NR
; i++) {

2703 
buf_ouçut
 *
out
 = &
ouçut
[
i
];

2705 
	`log_öfo_buf
(
out
->
buf
, out->
buÊí
);

2706 
	`buf_ouçut_‰ì
(
out
);

2709 
	`fio_idÀ_¥of_˛ónup
();

2711 
	`log_öfo_Êush
();

2712 
	`‰ì
(
run°©s
);

2715 
i
 = 0; i < 
ƒ_ts
; i++) {

2716 
ts
 = &
thªad°©s
[
i
];

2717 
	`‰ì_˛©_¥io_°©s
(
ts
);

2719 
	`‰ì
(
thªad°©s
);

2720 
	`‰ì
(
›t_li°s
);

2721 
	}
}

2723 
	$__show_ru¬ög_run_°©s
()

2725 
thªad_d©a
 *
td
;

2726 *
π
;

2727 
time•ec
 
ts
;

2728 
i
;

2730 
	`fio_£m_down
(
°©_£m
);

2732 
π
 = 
	`mÆloc
(
thªad_numbî
 * ());

2733 
	`fio_gëtime
(&
ts
, 
NULL
);

2735 
	`f‹_óch_td
(
td
, 
i
) {

2736 i‡(
td
->
run°©e
 >
TD_EXITED
)

2739 
td
->
upd©e_rußge
 = 1;

2740 
	`f‹_óch_rw_ddú
(
ddú
) {

2741 
td
->
ts
.
io_byãs
[
ddú
] =Åd->io_bytes[ddir];

2743 
td
->
ts
.
tŸÆ_run_time
 = 
	`mtime_sö˚
(&td->
ïoch
, &ts);

2745 
π
[
i
] = 
	`mtime_sö˚
(&
td
->
°¨t
, &
ts
);

2746 i‡(
	`td_ªad
(
td
Ë&&Åd->
ts
.
io_byãs
[
DDIR_READ
])

2747 
td
->
ts
.
ru¡ime
[
DDIR_READ
] +
π
[
i
];

2748 i‡(
	`td_wrôe
(
td
Ë&&Åd->
ts
.
io_byãs
[
DDIR_WRITE
])

2749 
td
->
ts
.
ru¡ime
[
DDIR_WRITE
] +
π
[
i
];

2750 i‡(
	`td_åim
(
td
Ë&&Åd->
ts
.
io_byãs
[
DDIR_TRIM
])

2751 
td
->
ts
.
ru¡ime
[
DDIR_TRIM
] +
π
[
i
];

2754 
	`f‹_óch_td
(
td
, 
i
) {

2755 i‡(
td
->
run°©e
 >
TD_EXITED
)

2757 i‡(
td
->
rußge_£m
) {

2758 
td
->
upd©e_rußge
 = 1;

2759 
	`fio_£m_down
(
td
->
rußge_£m
);

2761 
td
->
upd©e_rußge
 = 0;

2764 
	`__show_run_°©s
();

2766 
	`f‹_óch_td
(
td
, 
i
) {

2767 i‡(
td
->
run°©e
 >
TD_EXITED
)

2770 i‡(
	`td_ªad
(
td
Ë&&Åd->
ts
.
io_byãs
[
DDIR_READ
])

2771 
td
->
ts
.
ru¡ime
[
DDIR_READ
] -
π
[
i
];

2772 i‡(
	`td_wrôe
(
td
Ë&&Åd->
ts
.
io_byãs
[
DDIR_WRITE
])

2773 
td
->
ts
.
ru¡ime
[
DDIR_WRITE
] -
π
[
i
];

2774 i‡(
	`td_åim
(
td
Ë&&Åd->
ts
.
io_byãs
[
DDIR_TRIM
])

2775 
td
->
ts
.
ru¡ime
[
DDIR_TRIM
] -
π
[
i
];

2778 
	`‰ì
(
π
);

2779 
	`fio_£m_up
(
°©_£m
);

2782 
	}
}

2784 
boﬁ
 
	g°©us_fûe_dißbÀd
;

2786 
	#FIO_STATUS_FILE
 "fio-dump-°©us"

	)

2788 
	$check_°©us_fûe
()

2790 
°©
 
sb
;

2791 c⁄° *
ãmp_dú
;

2792 
fio_°©us_fûe_∑th
[
PATH_MAX
];

2794 i‡(
°©us_fûe_dißbÀd
)

2797 
ãmp_dú
 = 
	`gëív
("TMPDIR");

2798 i‡(
ãmp_dú
 =
NULL
) {

2799 
ãmp_dú
 = 
	`gëív
("TEMP");

2800 i‡(
ãmp_dú
 && 
	`°æí
—emp_dúË>
PATH_MAX
)

2801 
ãmp_dú
 = 
NULL
;

2803 i‡(
ãmp_dú
 =
NULL
)

2804 
ãmp_dú
 = "/tmp";

2805 #ifde‡
__COVERITY__


2806 
	`__covîôy_èöãd_d©a_ßnôize__
(
ãmp_dú
);

2809 
	`¢¥ötf
(
fio_°©us_fûe_∑th
, (fio_°©us_fûe_∑th), "%s/%s", 
ãmp_dú
, 
FIO_STATUS_FILE
);

2811 i‡(
	`°©
(
fio_°©us_fûe_∑th
, &
sb
))

2814 i‡(
	`u∆ök
(
fio_°©us_fûe_∑th
) < 0) {

2815 
	`log_îr
("fio: faûedÅÿu∆ök %s: %s\n", 
fio_°©us_fûe_∑th
,

2816 
	`°ªº‹
(
î∫o
));

2817 
	`log_îr
("fio: disabling status file updates\n");

2818 
°©us_fûe_dißbÀd
 = 
åue
;

2822 
	}
}

2824 
	$check_f‹_ru¬ög_°©s
()

2826 i‡(
	`check_°©us_fûe
()) {

2827 
	`show_ru¬ög_run_°©s
();

2830 
	}
}

2832 
ölöe
 
	$add_°©_ßm∂e
(
io_°©
 *
is
, 
d©a
)

2834 
vÆ
 = 
d©a
;

2835 
dñè
;

2837 i‡(
d©a
 > 
is
->
max_vÆ
)

2838 
is
->
max_vÆ
 = 
d©a
;

2839 i‡(
d©a
 < 
is
->
mö_vÆ
)

2840 
is
->
mö_vÆ
 = 
d©a
;

2842 
dñè
 = 
vÆ
 - 
is
->
món
.
u
.
f
;

2843 i‡(
dñè
) {

2844 
is
->
món
.
u
.
f
 +
dñè
 / (is->
ßm∂es
 + 1.0);

2845 
is
->
S
.
u
.
f
 +
dñè
 * (
vÆ
 - is->
món
.u.f);

2848 
is
->
ßm∂es
++;

2849 
	}
}

2851 
ölöe
 
	$add_°©_¥io_ßm∂e
(
˛©_¥io_°©
 *
˛©_¥io
,

2852 
˛©_¥io_ödex
,

2853 
n£c
)

2855 i‡(
˛©_¥io
)

2856 
	`add_°©_ßm∂e
(&
˛©_¥io
[
˛©_¥io_ödex
].
˛©_°©
, 
n£c
);

2857 
	}
}

2863 
io_logs
 *
	$gë_√w_log
(
io_log
 *
iﬁog
)

2865 
size_t
 
√w_ßm∂es
;

2866 
io_logs
 *
cur_log
;

2872 i‡(!
iﬁog
->
cur_log_max
) {

2873 
√w_ßm∂es
 = 
iﬁog
->
td
->
o
.
log_íåõs
;

2875 
√w_ßm∂es
 = 
iﬁog
->
cur_log_max
 * 2;

2876 i‡(
√w_ßm∂es
 > 
MAX_LOG_ENTRIES
)

2877 
√w_ßm∂es
 = 
MAX_LOG_ENTRIES
;

2880 
cur_log
 = 
	`smÆloc
((*cur_log));

2881 i‡(
cur_log
) {

2882 
	`INIT_FLIST_HEAD
(&
cur_log
->
li°
);

2883 
cur_log
->
log
 = 
	`ˇŒoc
(
√w_ßm∂es
, 
	`log_íåy_sz
(
iﬁog
));

2884 i‡(
cur_log
->
log
) {

2885 
cur_log
->
ƒ_ßm∂es
 = 0;

2886 
cur_log
->
max_ßm∂es
 = 
√w_ßm∂es
;

2887 
	`Êi°_add_èû
(&
cur_log
->
li°
, &
iﬁog
->
io_logs
);

2888 
iﬁog
->
cur_log_max
 = 
√w_ßm∂es
;

2889  
cur_log
;

2891 
	`s‰ì
(
cur_log
);

2894  
NULL
;

2895 
	}
}

2900 
io_logs
 *
	$ªgrow_log
(
io_log
 *
iﬁog
)

2902 
io_logs
 *
cur_log
;

2903 
i
;

2905 i‡(!
iﬁog
 || iﬁog->
dißbÀd
)

2906 
dißbÀ
;

2908 
cur_log
 = 
	`iﬁog_cur_log
(
iﬁog
);

2909 i‡(!
cur_log
) {

2910 
cur_log
 = 
	`gë_√w_log
(
iﬁog
);

2911 i‡(!
cur_log
)

2912  
NULL
;

2915 i‡(
cur_log
->
ƒ_ßm∂es
 < cur_log->
max_ßm∂es
)

2916  
cur_log
;

2922 i‡(
iﬁog
->
log_gz
) {

2923 i‡(
	`iﬁog_cur_Êush
(
iﬁog
, 
cur_log
)) {

2924 
	`log_îr
("fio: failed flushing iolog! Will stopÜogging.\n");

2925  
NULL
;

2932 
cur_log
 = 
	`gë_√w_log
(
iﬁog
);

2933 i‡(!
cur_log
) {

2934 
	`log_îr
("fio: failedÉxtending iolog! Will stopÜogging.\n");

2935  
NULL
;

2938 i‡(!
iﬁog
->
≥ndög
 || !iﬁog->≥ndög->
ƒ_ßm∂es
)

2939  
cur_log
;

2944 
i
 = 0; i < 
iﬁog
->
≥ndög
->
ƒ_ßm∂es
; i++) {

2945 
io_ßm∂e
 *
§c
, *
d°
;

2947 
§c
 = 
	`gë_ßm∂e
(
iﬁog
, iﬁog->
≥ndög
, 
i
);

2948 
d°
 = 
	`gë_ßm∂e
(
iﬁog
, 
cur_log
, 
i
);

2949 
	`mem˝y
(
d°
, 
§c
, 
	`log_íåy_sz
(
iﬁog
));

2951 
cur_log
->
ƒ_ßm∂es
 = 
iﬁog
->
≥ndög
->nr_samples;

2953 
iﬁog
->
≥ndög
->
ƒ_ßm∂es
 = 0;

2954  
cur_log
;

2955 
dißbÀ
:

2956 i‡(
iﬁog
)

2957 
iﬁog
->
dißbÀd
 = 
åue
;

2958  
NULL
;

2959 
	}
}

2961 
	$ªgrow_logs
(
thªad_d©a
 *
td
)

2963 
	`ªgrow_log
(
td
->
¶©_log
);

2964 
	`ªgrow_log
(
td
->
˛©_log
);

2965 
	`ªgrow_log
(
td
->
˛©_hi°_log
);

2966 
	`ªgrow_log
(
td
->
œt_log
);

2967 
	`ªgrow_log
(
td
->
bw_log
);

2968 
	`ªgrow_log
(
td
->
i›s_log
);

2969 
td
->
Êags
 &~
TD_F_REGROW_LOGS
;

2970 
	}
}

2972 
	$ªgrow_agg_logs
()

2974 
fio_ddú
 
ddú
;

2976 
ddú
 = 0; ddú < 
DDIR_RWDIR_CNT
; ddir++)

2977 
	`ªgrow_log
(
agg_io_log
[
ddú
]);

2978 
	}
}

2980 
io_logs
 *
	$gë_cur_log
(
io_log
 *
iﬁog
)

2982 
io_logs
 *
cur_log
;

2984 
cur_log
 = 
	`iﬁog_cur_log
(
iﬁog
);

2985 i‡(!
cur_log
) {

2986 
cur_log
 = 
	`gë_√w_log
(
iﬁog
);

2987 i‡(!
cur_log
)

2988  
NULL
;

2991 i‡(
cur_log
->
ƒ_ßm∂es
 < cur_log->
max_ßm∂es
)

2992  
cur_log
;

3001 i‡((
iﬁog
->
td
 && iﬁog->td->
o
.
io_submô_mode
 =
IO_MODE_OFFLOAD
) ||

3002 !
	`≥r_unô_log
(
iﬁog
))

3003  
	`ªgrow_log
(
iﬁog
);

3005 i‡(
iﬁog
->
td
)

3006 
iﬁog
->
td
->
Êags
 |
TD_F_REGROW_LOGS
;

3007 i‡(
iﬁog
->
≥ndög
)

3008 
	`as£π
(
iﬁog
->
≥ndög
->
ƒ_ßm∂es
 < iﬁog->≥ndög->
max_ßm∂es
);

3009  
iﬁog
->
≥ndög
;

3010 
	}
}

3012 
	$__add_log_ßm∂e
(
io_log
 *
iﬁog
, 
io_ßm∂e_d©a
 
d©a
,

3013 
fio_ddú
 
ddú
, 
bs
,

3014 
t
, 
uöt64_t
 
off£t
,

3015 
¥i‹ôy
)

3017 
io_logs
 *
cur_log
;

3019 i‡(
iﬁog
->
dißbÀd
)

3021 i‡(
	`Êi°_em±y
(&
iﬁog
->
io_logs
))

3022 
iﬁog
->
avg_œ°
[
ddú
] = 
t
;

3024 
cur_log
 = 
	`gë_cur_log
(
iﬁog
);

3025 i‡(
cur_log
) {

3026 
io_ßm∂e
 *
s
;

3028 
s
 = 
	`gë_ßm∂e
(
iﬁog
, 
cur_log
, cur_log->
ƒ_ßm∂es
);

3030 
s
->
d©a
 = data;

3031 
s
->
time
 = 
t
 + (
iﬁog
->
td
 ? iﬁog->td->
Æã∫©e_ïoch
 : 0);

3032 
	`io_ßm∂e_£t_ddú
(
iﬁog
, 
s
, 
ddú
);

3033 
s
->
bs
 = bs;

3034 
s
->
¥i‹ôy
 =Öriority;

3036 i‡(
iﬁog
->
log_off£t
) {

3037 
io_ßm∂e_off£t
 *
so
 = (*Ë
s
;

3039 
so
->
off£t
 = offset;

3042 
cur_log
->
ƒ_ßm∂es
++;

3046 
iﬁog
->
dißbÀd
 = 
åue
;

3047 
	}
}

3049 
ölöe
 
	$ª£t_io_°©
(
io_°©
 *
ios
)

3051 
ios
->
mö_vÆ
 = -1ULL;

3052 
ios
->
max_vÆ
 = ios->
ßm∂es
 = 0;

3053 
ios
->
món
.
u
.
f
 = ios->
S
.u.f = 0;

3054 
	}
}

3056 
ölöe
 
	$ª£t_io_u_∂©
(
uöt64_t
 *
io_u_∂©
)

3058 
i
;

3060 
i
 = 0; i < 
FIO_IO_U_PLAT_NR
; i++)

3061 
io_u_∂©
[
i
] = 0;

3062 
	}
}

3064 
ölöe
 
	$ª£t_˛©_¥io_°©s
(
thªad_°©
 *
ts
)

3066 
fio_ddú
 
ddú
;

3067 
i
;

3069 
ddú
 = 0; ddú < 
DDIR_RWDIR_CNT
; ddir++) {

3070 i‡(!
ts
->
˛©_¥io
[
ddú
])

3073 
i
 = 0; i < 
ts
->
ƒ_˛©_¥io
[
ddú
]; i++) {

3074 
	`ª£t_io_°©
(&
ts
->
˛©_¥io
[
ddú
][
i
].
˛©_°©
);

3075 
	`ª£t_io_u_∂©
(
ts
->
˛©_¥io
[
ddú
][
i
].
io_u_∂©
);

3078 
	}
}

3080 
	$ª£t_io_°©s
(
thªad_d©a
 *
td
)

3082 
thªad_°©
 *
ts
 = &
td
->ts;

3083 
i
, 
j
;

3085 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

3086 
	`ª£t_io_°©
(&
ts
->
˛©_°©
[
i
]);

3087 
	`ª£t_io_°©
(&
ts
->
¶©_°©
[
i
]);

3088 
	`ª£t_io_°©
(&
ts
->
œt_°©
[
i
]);

3089 
	`ª£t_io_°©
(&
ts
->
bw_°©
[
i
]);

3090 
	`ª£t_io_°©
(&
ts
->
i›s_°©
[
i
]);

3092 
ts
->
io_byãs
[
i
] = 0;

3093 
ts
->
ru¡ime
[
i
] = 0;

3094 
ts
->
tŸÆ_io_u
[
i
] = 0;

3095 
ts
->
sh‹t_io_u
[
i
] = 0;

3096 
ts
->
dr›_io_u
[
i
] = 0;

3099 
i
 = 0; i < 
FIO_LAT_CNT
; i++)

3100 
j
 = 0; j < 
DDIR_RWDIR_CNT
; j++)

3101 
	`ª£t_io_u_∂©
(
ts
->
io_u_∂©
[
i
][
j
]);

3103 
	`ª£t_˛©_¥io_°©s
(
ts
);

3105 
ts
->
tŸÆ_io_u
[
DDIR_SYNC
] = 0;

3106 
	`ª£t_io_u_∂©
(
ts
->
io_u_sync_∂©
);

3108 
i
 = 0; i < 
FIO_IO_U_MAP_NR
; i++) {

3109 
ts
->
io_u_m≠
[
i
] = 0;

3110 
ts
->
io_u_submô
[
i
] = 0;

3111 
ts
->
io_u_com∂ëe
[
i
] = 0;

3114 
i
 = 0; i < 
FIO_IO_U_LAT_N_NR
; i++)

3115 
ts
->
io_u_œt_n
[
i
] = 0;

3116 
i
 = 0; i < 
FIO_IO_U_LAT_U_NR
; i++)

3117 
ts
->
io_u_œt_u
[
i
] = 0;

3118 
i
 = 0; i < 
FIO_IO_U_LAT_M_NR
; i++)

3119 
ts
->
io_u_œt_m
[
i
] = 0;

3121 
ts
->
tŸÆ_submô
 = 0;

3122 
ts
->
tŸÆ_com∂ëe
 = 0;

3123 
ts
->
ƒ_z⁄e_ª£ts
 = 0;

3124 
ts
->
ˇchehô
 =Ås->
ˇchemiss
 = 0;

3125 
	}
}

3127 
	$__add_°©_to_log
(
io_log
 *
iﬁog
, 
fio_ddú
 
ddú
,

3128 
ñ≠£d
, 
boﬁ
 
log_max
)

3135 i‡(
iﬁog
->
avg_wödow
[
ddú
].
ßm∂es
) {

3136 
io_ßm∂e_d©a
 
d©a
;

3138 i‡(
log_max
)

3139 
d©a
.
vÆ
 = 
iﬁog
->
avg_wödow
[
ddú
].
max_vÆ
;

3141 
d©a
.
vÆ
 = 
iﬁog
->
avg_wödow
[
ddú
].
món
.
u
.
f
 + 0.50;

3143 
	`__add_log_ßm∂e
(
iﬁog
, 
d©a
, 
ddú
, 0, 
ñ≠£d
, 0, 0);

3146 
	`ª£t_io_°©
(&
iﬁog
->
avg_wödow
[
ddú
]);

3147 
	}
}

3149 
	$_add_°©_to_log
(
io_log
 *
iﬁog
, 
ñ≠£d
,

3150 
boﬁ
 
log_max
)

3152 
fio_ddú
 
ddú
;

3154 
ddú
 = 0; ddú < 
DDIR_RWDIR_CNT
; ddir++)

3155 
	`__add_°©_to_log
(
iﬁog
, 
ddú
, 
ñ≠£d
, 
log_max
);

3156 
	}
}

3158 
	$add_log_ßm∂e
(
thªad_d©a
 *
td
,

3159 
io_log
 *
iﬁog
,

3160 
io_ßm∂e_d©a
 
d©a
,

3161 
fio_ddú
 
ddú
, 
bs
,

3162 
uöt64_t
 
off£t
, 
i›rio
)

3164 
ñ≠£d
, 
this_wödow
;

3166 i‡(!
	`ddú_rw
(
ddú
))

3169 
ñ≠£d
 = 
	`mtime_sö˚_now
(&
td
->
ïoch
);

3174 i‡(!
iﬁog
->
avg_m£c
) {

3175 
	`__add_log_ßm∂e
(
iﬁog
, 
d©a
, 
ddú
, 
bs
, 
ñ≠£d
, 
off£t
,

3176 
i›rio
);

3184 
	`add_°©_ßm∂e
(&
iﬁog
->
avg_wödow
[
ddú
], 
d©a
.
vÆ
);

3190 
this_wödow
 = 
ñ≠£d
 - 
iﬁog
->
avg_œ°
[
ddú
];

3191 i‡(
ñ≠£d
 < 
iﬁog
->
avg_œ°
[
ddú
])

3192  
iﬁog
->
avg_œ°
[
ddú
] - 
ñ≠£d
;

3193 i‡(
this_wödow
 < 
iﬁog
->
avg_m£c
) {

3194 
diff
 = 
iﬁog
->
avg_m£c
 - 
this_wödow
;

3196 i‡(
	`ölöe_log
(
iﬁog
Ë|| 
diff
 > 
LOG_MSEC_SLACK
)

3197  
diff
;

3200 
	`__add_°©_to_log
(
iﬁog
, 
ddú
, 
ñ≠£d
, 
td
->
o
.
log_max
 != 0);

3202 
iﬁog
->
avg_œ°
[
ddú
] = 
ñ≠£d
 - (ñ≠£d % iﬁog->
avg_m£c
);

3204  
iﬁog
->
avg_m£c
;

3205 
	}
}

3207 
	$föÆize_logs
(
thªad_d©a
 *
td
, 
boﬁ
 
unô_logs
)

3209 
ñ≠£d
;

3211 
ñ≠£d
 = 
	`mtime_sö˚_now
(&
td
->
ïoch
);

3213 i‡(
td
->
˛©_log
 && 
unô_logs
)

3214 
	`_add_°©_to_log
(
td
->
˛©_log
, 
ñ≠£d
,Åd->
o
.
log_max
 != 0);

3215 i‡(
td
->
¶©_log
 && 
unô_logs
)

3216 
	`_add_°©_to_log
(
td
->
¶©_log
, 
ñ≠£d
,Åd->
o
.
log_max
 != 0);

3217 i‡(
td
->
œt_log
 && 
unô_logs
)

3218 
	`_add_°©_to_log
(
td
->
œt_log
, 
ñ≠£d
,Åd->
o
.
log_max
 != 0);

3219 i‡(
td
->
bw_log
 && (
unô_logs
 =
	`≥r_unô_log
(td->bw_log)))

3220 
	`_add_°©_to_log
(
td
->
bw_log
, 
ñ≠£d
,Åd->
o
.
log_max
 != 0);

3221 i‡(
td
->
i›s_log
 && (
unô_logs
 =
	`≥r_unô_log
(td->iops_log)))

3222 
	`_add_°©_to_log
(
td
->
i›s_log
, 
ñ≠£d
,Åd->
o
.
log_max
 != 0);

3223 
	}
}

3225 
	$add_agg_ßm∂e
(
io_ßm∂e_d©a
 
d©a
, 
fio_ddú
 
ddú
,

3226 
bs
)

3228 
io_log
 *
iﬁog
;

3230 i‡(!
	`ddú_rw
(
ddú
))

3233 
iﬁog
 = 
agg_io_log
[
ddú
];

3234 
	`__add_log_ßm∂e
(
iﬁog
, 
d©a
, 
ddú
, 
bs
, 
	`mtime_sö˚_gíesis
(), 0, 0);

3235 
	}
}

3237 
	$add_sync_˛©_ßm∂e
(
thªad_°©
 *
ts
, 
n£c
)

3239 
idx
 = 
	`∂©_vÆ_to_idx
(
n£c
);

3240 
	`as£π
(
idx
 < 
FIO_IO_U_PLAT_NR
);

3242 
ts
->
io_u_sync_∂©
[
idx
]++;

3243 
	`add_°©_ßm∂e
(&
ts
->
sync_°©
, 
n£c
);

3244 
	}
}

3246 
ölöe
 
	$add_œt_≥r˚¡ûe_ßm∂e
(
thªad_°©
 *
ts
,

3247 
n£c
,

3248 
fio_ddú
 
ddú
,

3249 
fio_œt
 
œt
)

3251 
idx
 = 
	`∂©_vÆ_to_idx
(
n£c
);

3252 
	`as£π
(
idx
 < 
FIO_IO_U_PLAT_NR
);

3254 
ts
->
io_u_∂©
[
œt
][
ddú
][
idx
]++;

3255 
	}
}

3257 
ölöe
 

3258 
	$add_œt_≥r˚¡ûe_¥io_ßm∂e
(
thªad_°©
 *
ts
, 
n£c
,

3259 
fio_ddú
 
ddú
,

3260 
˛©_¥io_ödex
)

3262 
idx
 = 
	`∂©_vÆ_to_idx
(
n£c
);

3264 i‡(
ts
->
˛©_¥io
[
ddú
])

3265 
ts
->
˛©_¥io
[
ddú
][
˛©_¥io_ödex
].
io_u_∂©
[
idx
]++;

3266 
	}
}

3268 
	$add_˛©_ßm∂e
(
thªad_d©a
 *
td
, 
fio_ddú
 
ddú
,

3269 
n£c
, 
bs
,

3270 
uöt64_t
 
off£t
, 
i›rio
,

3271 
˛©_¥io_ödex
)

3273 c⁄° 
boﬁ
 
√eds_lock
 = 
	`td_async_¥o˚ssög
(
td
);

3274 
ñ≠£d
, 
this_wödow
;

3275 
thªad_°©
 *
ts
 = &
td
->ts;

3276 
io_log
 *
iﬁog
 = 
td
->
˛©_hi°_log
;

3278 i‡(
√eds_lock
)

3279 
	`__td_io_u_lock
(
td
);

3281 
	`add_°©_ßm∂e
(&
ts
->
˛©_°©
[
ddú
], 
n£c
);

3292 i‡(!
ts
->
œt_≥r˚¡ûes
)

3293 
	`add_°©_¥io_ßm∂e
(
ts
->
˛©_¥io
[
ddú
], 
˛©_¥io_ödex
,

3294 
n£c
);

3296 i‡(
td
->
˛©_log
)

3297 
	`add_log_ßm∂e
(
td
,Åd->
˛©_log
, 
	`ßm∂e_vÆ
(
n£c
), 
ddú
, 
bs
,

3298 
off£t
, 
i›rio
);

3300 i‡(
ts
->
˛©_≥r˚¡ûes
) {

3306 
	`add_œt_≥r˚¡ûe_ßm∂e
(
ts
, 
n£c
, 
ddú
, 
FIO_CLAT
);

3307 i‡(!
ts
->
œt_≥r˚¡ûes
)

3308 
	`add_œt_≥r˚¡ûe_¥io_ßm∂e
(
ts
, 
n£c
, 
ddú
,

3309 
˛©_¥io_ödex
);

3312 i‡(
iﬁog
 && iﬁog->
hi°_m£c
) {

3313 
io_hi°
 *
hw
 = &
iﬁog
->
hi°_wödow
[
ddú
];

3315 
hw
->
ßm∂es
++;

3316 
ñ≠£d
 = 
	`mtime_sö˚_now
(&
td
->
ïoch
);

3317 i‡(!
hw
->
hi°_œ°
)

3318 
hw
->
hi°_œ°
 = 
ñ≠£d
;

3319 
this_wödow
 = 
ñ≠£d
 - 
hw
->
hi°_œ°
;

3321 i‡(
this_wödow
 >
iﬁog
->
hi°_m£c
) {

3322 
uöt64_t
 *
io_u_∂©
;

3323 
io_u_∂©_íåy
 *
d°
;

3332 
io_u_∂©
 = (
uöt64_t
 *Ë
td
->
ts
.io_u_∂©[
FIO_CLAT
][
ddú
];

3333 
d°
 = 
	`mÆloc
((
io_u_∂©_íåy
));

3334 
	`mem˝y
(&(
d°
->
io_u_∂©
), io_u_plat,

3335 
FIO_IO_U_PLAT_NR
 * (
uöt64_t
));

3336 
	`Êi°_add
(&
d°
->
li°
, &
hw
->list);

3337 
	`__add_log_ßm∂e
(
iﬁog
, 
	`ßm∂e_∂©
(
d°
), 
ddú
, 
bs
,

3338 
ñ≠£d
, 
off£t
, 
i›rio
);

3345 
hw
->
hi°_œ°
 = 
ñ≠£d
 - (
this_wödow
 - 
iﬁog
->
hi°_m£c
);

3346 
hw
->
ßm∂es
 = 0;

3350 i‡(
√eds_lock
)

3351 
	`__td_io_u_u∆ock
(
td
);

3352 
	}
}

3354 
	$add_¶©_ßm∂e
(
thªad_d©a
 *
td
, 
fio_ddú
 
ddú
,

3355 
n£c
, 
bs
,

3356 
uöt64_t
 
off£t
, 
i›rio
)

3358 c⁄° 
boﬁ
 
√eds_lock
 = 
	`td_async_¥o˚ssög
(
td
);

3359 
thªad_°©
 *
ts
 = &
td
->ts;

3361 i‡(!
	`ddú_rw
(
ddú
))

3364 i‡(
√eds_lock
)

3365 
	`__td_io_u_lock
(
td
);

3367 
	`add_°©_ßm∂e
(&
ts
->
¶©_°©
[
ddú
], 
n£c
);

3369 i‡(
td
->
¶©_log
)

3370 
	`add_log_ßm∂e
(
td
,Åd->
¶©_log
, 
	`ßm∂e_vÆ
(
n£c
), 
ddú
, 
bs
,

3371 
off£t
, 
i›rio
);

3373 i‡(
ts
->
¶©_≥r˚¡ûes
)

3374 
	`add_œt_≥r˚¡ûe_ßm∂e
(
ts
, 
n£c
, 
ddú
, 
FIO_SLAT
);

3376 i‡(
√eds_lock
)

3377 
	`__td_io_u_u∆ock
(
td
);

3378 
	}
}

3380 
	$add_œt_ßm∂e
(
thªad_d©a
 *
td
, 
fio_ddú
 
ddú
,

3381 
n£c
, 
bs
,

3382 
uöt64_t
 
off£t
, 
i›rio
,

3383 
˛©_¥io_ödex
)

3385 c⁄° 
boﬁ
 
√eds_lock
 = 
	`td_async_¥o˚ssög
(
td
);

3386 
thªad_°©
 *
ts
 = &
td
->ts;

3388 i‡(!
	`ddú_rw
(
ddú
))

3391 i‡(
√eds_lock
)

3392 
	`__td_io_u_lock
(
td
);

3394 
	`add_°©_ßm∂e
(&
ts
->
œt_°©
[
ddú
], 
n£c
);

3396 i‡(
td
->
œt_log
)

3397 
	`add_log_ßm∂e
(
td
,Åd->
œt_log
, 
	`ßm∂e_vÆ
(
n£c
), 
ddú
, 
bs
,

3398 
off£t
, 
i›rio
);

3410 i‡(
ts
->
œt_≥r˚¡ûes
) {

3411 
	`add_œt_≥r˚¡ûe_ßm∂e
(
ts
, 
n£c
, 
ddú
, 
FIO_LAT
);

3412 
	`add_œt_≥r˚¡ûe_¥io_ßm∂e
(
ts
, 
n£c
, 
ddú
, 
˛©_¥io_ödex
);

3413 
	`add_°©_¥io_ßm∂e
(
ts
->
˛©_¥io
[
ddú
], 
˛©_¥io_ödex
,

3414 
n£c
);

3416 i‡(
√eds_lock
)

3417 
	`__td_io_u_u∆ock
(
td
);

3418 
	}
}

3420 
	$add_bw_ßm∂e
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

3421 
byãs
, 
•ít
)

3423 c⁄° 
boﬁ
 
√eds_lock
 = 
	`td_async_¥o˚ssög
(
td
);

3424 
thªad_°©
 *
ts
 = &
td
->ts;

3425 
øã
;

3427 i‡(
•ít
)

3428 
øã
 = (Ë(
byãs
 * 1000000ULL / 
•ít
);

3430 
øã
 = 0;

3432 i‡(
√eds_lock
)

3433 
	`__td_io_u_lock
(
td
);

3435 
	`add_°©_ßm∂e
(&
ts
->
bw_°©
[
io_u
->
ddú
], 
øã
);

3437 i‡(
td
->
bw_log
)

3438 
	`add_log_ßm∂e
(
td
,Åd->
bw_log
, 
	`ßm∂e_vÆ
(
øã
), 
io_u
->
ddú
,

3439 
byãs
, 
io_u
->
off£t
, io_u->
i›rio
);

3441 
td
->
°©_io_byãs
[
io_u
->
ddú
] =Åd->
this_io_byãs
[io_u->ddir];

3443 i‡(
√eds_lock
)

3444 
	`__td_io_u_u∆ock
(
td
);

3445 
	}
}

3447 
	$__add_ßm∂es
(
thªad_d©a
 *
td
, 
time•ec
 *
∑ª¡_tv
,

3448 
time•ec
 *
t
, 
avg_time
,

3449 
uöt64_t
 *
this_io_byãs
, uöt64_à*
°©_io_byãs
,

3450 
io_°©
 *
°©
, 
io_log
 *
log
,

3451 
boﬁ
 
is_kb
)

3453 c⁄° 
boﬁ
 
√eds_lock
 = 
	`td_async_¥o˚ssög
(
td
);

3454 
•ít
, 
øã
;

3455 
fio_ddú
 
ddú
;

3456 
√xt
, 
√xt_log
;

3458 
√xt_log
 = 
avg_time
;

3460 
•ít
 = 
	`mtime_sö˚
(
∑ª¡_tv
, 
t
);

3461 i‡(
•ít
 < 
avg_time
 &&ávg_timê- s≥¡ > 
LOG_MSEC_SLACK
)

3462  
avg_time
 - 
•ít
;

3464 i‡(
√eds_lock
)

3465 
	`__td_io_u_lock
(
td
);

3470 
ddú
 = 0; ddú < 
DDIR_RWDIR_CNT
; ddir++) {

3471 
uöt64_t
 
dñè
;

3473 
dñè
 = 
this_io_byãs
[
ddú
] - 
°©_io_byãs
[ddir];

3474 i‡(!
dñè
)

3477 i‡(
•ít
) {

3478 i‡(
is_kb
)

3479 
øã
 = 
dñè
 * 1000 / 
•ít
 / 1024;

3481 
øã
 = (
dñè
 * 1000Ë/ 
•ít
;

3483 
øã
 = 0;

3485 
	`add_°©_ßm∂e
(&
°©
[
ddú
], 
øã
);

3487 i‡(
log
) {

3488 
bs
 = 0;

3490 i‡(
td
->
o
.
mö_bs
[
ddú
] =td->o.
max_bs
[ddir])

3491 
bs
 = 
td
->
o
.
mö_bs
[
ddú
];

3493 
√xt
 = 
	`add_log_ßm∂e
(
td
, 
log
, 
	`ßm∂e_vÆ
(
øã
), 
ddú
,

3494 
bs
, 0, 0);

3495 
√xt_log
 = 
	`mö
“ext_log, 
√xt
);

3498 
°©_io_byãs
[
ddú
] = 
this_io_byãs
[ddir];

3501 *
∑ª¡_tv
 = *
t
;

3503 i‡(
√eds_lock
)

3504 
	`__td_io_u_u∆ock
(
td
);

3506 i‡(
•ít
 <
avg_time
)

3507 
√xt
 = 
avg_time
;

3509 
√xt
 = 
avg_time
 - (1 + 
•ít
 -ávg_time);

3511  
	`mö
(
√xt
, 
√xt_log
);

3512 
	}
}

3514 
	$add_bw_ßm∂es
(
thªad_d©a
 *
td
, 
time•ec
 *
t
)

3516  
	`__add_ßm∂es
(
td
, &td->
bw_ßm∂e_time
, 
t
,Åd->
o
.
bw_avg_time
,

3517 
td
->
this_io_byãs
,Åd->
°©_io_byãs
,

3518 
td
->
ts
.
bw_°©
,Åd->
bw_log
, 
åue
);

3519 
	}
}

3521 
	$add_i›s_ßm∂e
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

3522 
byãs
)

3524 c⁄° 
boﬁ
 
√eds_lock
 = 
	`td_async_¥o˚ssög
(
td
);

3525 
thªad_°©
 *
ts
 = &
td
->ts;

3527 i‡(
√eds_lock
)

3528 
	`__td_io_u_lock
(
td
);

3530 
	`add_°©_ßm∂e
(&
ts
->
i›s_°©
[
io_u
->
ddú
], 1);

3532 i‡(
td
->
i›s_log
)

3533 
	`add_log_ßm∂e
(
td
,Åd->
i›s_log
, 
	`ßm∂e_vÆ
(1), 
io_u
->
ddú
,

3534 
byãs
, 
io_u
->
off£t
, io_u->
i›rio
);

3536 
td
->
°©_io_blocks
[
io_u
->
ddú
] =Åd->
this_io_blocks
[io_u->ddir];

3538 i‡(
√eds_lock
)

3539 
	`__td_io_u_u∆ock
(
td
);

3540 
	}
}

3542 
	$add_i›s_ßm∂es
(
thªad_d©a
 *
td
, 
time•ec
 *
t
)

3544  
	`__add_ßm∂es
(
td
, &td->
i›s_ßm∂e_time
, 
t
,Åd->
o
.
i›s_avg_time
,

3545 
td
->
this_io_blocks
,Åd->
°©_io_blocks
,

3546 
td
->
ts
.
i›s_°©
,Åd->
i›s_log
, 
Ál£
);

3547 
	}
}

3552 
	$ˇlc_log_ßm∂es
()

3554 
thªad_d©a
 *
td
;

3555 
√xt
 = ~0U, 
tmp
 = 0, 
√xt_mod
 = 0, 
log_avg_m£c_mö
 = -1U;

3556 
time•ec
 
now
;

3557 
i
;

3558 
ñ≠£d_time
 = 0;

3560 
	`fio_gëtime
(&
now
, 
NULL
);

3562 
	`f‹_óch_td
(
td
, 
i
) {

3563 
ñ≠£d_time
 = 
	`mtime_sö˚_now
(&
td
->
ïoch
);

3565 i‡(!
td
->
o
.
°©s
)

3567 i‡(
	`ö_ømp_time
(
td
) ||

3568 !(
td
->
run°©e
 =
TD_RUNNING
 ||Åd->run°©ê=
TD_VERIFYING
)) {

3569 
√xt
 = 
	`mö
(
td
->
o
.
i›s_avg_time
,Åd->o.
bw_avg_time
);

3572 i‡(!
td
->
bw_log
 ||

3573 (
td
->
bw_log
 && !
	`≥r_unô_log
(td->bw_log))) {

3574 
tmp
 = 
	`add_bw_ßm∂es
(
td
, &
now
);

3576 i‡(
td
->
bw_log
)

3577 
log_avg_m£c_mö
 = 
	`mö
÷og_avg_m£c_mö, ()
td
->
bw_log
->
avg_m£c
);

3579 i‡(!
td
->
i›s_log
 ||

3580 (
td
->
i›s_log
 && !
	`≥r_unô_log
(td->iops_log))) {

3581 
tmp
 = 
	`add_i›s_ßm∂es
(
td
, &
now
);

3583 i‡(
td
->
i›s_log
)

3584 
log_avg_m£c_mö
 = 
	`mö
÷og_avg_m£c_mö, ()
td
->
i›s_log
->
avg_m£c
);

3587 i‡(
tmp
 < 
√xt
)

3588 
√xt
 = 
tmp
;

3592 i‡(
log_avg_m£c_mö
 == -1U)

3593 
log_avg_m£c_mö
 = 0;

3595 i‡(
log_avg_m£c_mö
 == 0)

3596 
√xt_mod
 = 
ñ≠£d_time
;

3598 
√xt_mod
 = 
ñ≠£d_time
 % 
log_avg_m£c_mö
;

3601 
√xt
 = 
	`mö
“ext, (
log_avg_m£c_mö
 - 
√xt_mod
));

3603  
√xt
 == ~0U ? 0 :Çext;

3604 
	}
}

3606 
	$°©_öô
()

3608 
°©_£m
 = 
	`fio_£m_öô
(
FIO_SEM_UNLOCKED
);

3609 
	}
}

3611 
	$°©_exô
()

3617 
	`fio_£m_down
(
°©_£m
);

3618 
	`fio_£m_ªmove
(
°©_£m
);

3619 
	}
}

3624 
	$show_ru¬ög_run_°©s
()

3626 
	`hñ≥r_do_°©
();

3627 
	}
}

3629 
uöt32_t
 *
	$io_u_block_öfo
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

3633 
idx
 = (
io_u
->
off£t
 - io_u->
fûe
->
fûe_off£t
)

3634 / 
td
->
o
.
bs
[
DDIR_TRIM
];

3635 
uöt32_t
 *
öfo
 = &
td
->
ts
.
block_öfos
[
idx
];

3636 
	`as£π
(
idx
 < 
td
->
ts
.
ƒ_block_öfos
);

3637  
öfo
;

3638 
	}
}

	@stat.h

1 #i‚de‡
FIO_STAT_H


2 
	#FIO_STAT_H


	)

4 
	~"iﬁog.h
"

5 
	~"lib/ouçut_buf„r.h
"

6 
	~"diskutû.h
"

7 
	~"js⁄.h
"

9 
	sgroup_run_°©s
 {

10 
uöt64_t
 
	mmax_run
[
DDIR_RWDIR_CNT
], 
	mmö_run
[DDIR_RWDIR_CNT];

11 
uöt64_t
 
	mmax_bw
[
DDIR_RWDIR_CNT
], 
	mmö_bw
[DDIR_RWDIR_CNT];

12 
uöt64_t
 
	miobyãs
[
DDIR_RWDIR_CNT
];

13 
uöt64_t
 
	magg
[
DDIR_RWDIR_CNT
];

14 
uöt32_t
 
	mkb_ba£
;

15 
uöt32_t
 
	munô_ba£
;

16 
uöt32_t
 
	msig_figs
;

17 
uöt32_t
 
	mgroupid
;

18 
uöt32_t
 
	munifõd_rw_ªp
;

19 } 
__©åibuã__
((
∑cked
));

24 
	#FIO_IO_U_MAP_NR
 7

	)

25 
	#FIO_IO_U_LAT_N_NR
 10

	)

26 
	#FIO_IO_U_LAT_U_NR
 10

	)

27 
	#FIO_IO_U_LAT_M_NR
 12

	)

32 
	#FIO_IO_U_PLAT_BITS
 6

	)

33 
	#FIO_IO_U_PLAT_VAL
 (1 << 
FIO_IO_U_PLAT_BITS
)

	)

34 
	#FIO_IO_U_PLAT_GROUP_NR
 29

	)

35 
	#FIO_IO_U_PLAT_NR
 (
FIO_IO_U_PLAT_GROUP_NR
 * 
FIO_IO_U_PLAT_VAL
)

	)

36 
	#FIO_IO_U_LIST_MAX_LEN
 20

	)

126 
	#MAX_NR_BLOCK_INFOS
 8192

	)

127 
	#BLOCK_INFO_STATE_SHIFT
 29

	)

128 
	#BLOCK_INFO_TRIMS
(
block_öfo
) \

129 ((
block_öfo
Ë& ((1 << 
BLOCK_INFO_STATE_SHIFT
Ë- 1))

	)

130 
	#BLOCK_INFO_STATE
(
block_öfo
) \

131 ((
block_öfo
Ë>> 
BLOCK_INFO_STATE_SHIFT
)

	)

132 
	#BLOCK_INFO
(
°©e
, 
åim_cy˛es
) \

133 ((
åim_cy˛es
Ë| ((Ë(
°©e
Ë<< 
BLOCK_INFO_STATE_SHIFT
))

	)

134 
	#BLOCK_INFO_SET_STATE
(
block_öfo
, 
°©e
) \

135 
	`BLOCK_INFO
(
°©e
, 
	`BLOCK_INFO_TRIMS
(
block_öfo
))

	)

136 
	eblock_öfo_°©e
 {

137 
	mBLOCK_STATE_UNINIT
,

138 
	mBLOCK_STATE_TRIMMED
,

139 
	mBLOCK_STATE_WRITTEN
,

140 
	mBLOCK_STATE_TRIM_FAILURE
,

141 
	mBLOCK_STATE_WRITE_FAILURE
,

142 
	mBLOCK_STATE_COUNT
,

145 
	#MAX_PATTERN_SIZE
 512

	)

146 
	#FIO_JOBNAME_SIZE
 128

	)

147 
	#FIO_JOBDESC_SIZE
 256

	)

148 
	#FIO_VERROR_SIZE
 128

	)

149 
	#UNIFIED_SPLIT
 0

	)

150 
	#UNIFIED_MIXED
 1

	)

151 
	#UNIFIED_BOTH
 2

	)

153 
	efio_œt
 {

154 
	mFIO_SLAT
 = 0,

155 
	mFIO_CLAT
,

156 
	mFIO_LAT
,

158 
	mFIO_LAT_CNT
 = 3,

161 
	s˛©_¥io_°©
 {

162 
uöt64_t
 
	mio_u_∂©
[
FIO_IO_U_PLAT_NR
];

163 
io_°©
 
	m˛©_°©
;

164 
uöt32_t
 
	mi›rio
;

167 
	sthªad_°©
 {

168 
	m«me
[
FIO_JOBNAME_SIZE
];

169 
	mvîr‹
[
FIO_VERROR_SIZE
];

170 
uöt32_t
 
	mîr‹
;

171 
uöt32_t
 
	mthªad_numbî
;

172 
uöt32_t
 
	mgroupid
;

173 
uöt32_t
 
	mpid
;

174 
	mdes¸ùti⁄
[
FIO_JOBDESC_SIZE
];

175 
uöt32_t
 
	mmembîs
;

176 
uöt32_t
 
	munifõd_rw_ªp
;

177 
uöt32_t
 
	mdißbÀ_¥io_°©
;

182 
io_°©
 
sync_°©
 
__©åibuã__
((
Æig√d
(8)));

183 
io_°©
 
	m˛©_°©
[
DDIR_RWDIR_CNT
];

184 
io_°©
 
	m¶©_°©
[
DDIR_RWDIR_CNT
];

185 
io_°©
 
	mœt_°©
[
DDIR_RWDIR_CNT
];

186 
io_°©
 
	mbw_°©
[
DDIR_RWDIR_CNT
];

187 
io_°©
 
	mi›s_°©
[
DDIR_RWDIR_CNT
];

192 
uöt64_t
 
	mu§_time
;

193 
uöt64_t
 
	msys_time
;

194 
uöt64_t
 
	m˘x
;

195 
uöt64_t
 
	mmöf
, 
	mmajf
;

200 
uöt32_t
 
	m˛©_≥r˚¡ûes
;

201 
uöt32_t
 
	mœt_≥r˚¡ûes
;

202 
uöt32_t
 
	m¶©_≥r˚¡ûes
;

203 
uöt32_t
 
	m∑d
;

204 
uöt64_t
 
	m≥r˚¡ûe_¥ecisi⁄
;

205 
fio_Â64_t
 
	m≥r˚¡ûe_li°
[
FIO_IO_U_LIST_MAX_LEN
];

207 
uöt64_t
 
	mio_u_m≠
[
FIO_IO_U_MAP_NR
];

208 
uöt64_t
 
	mio_u_submô
[
FIO_IO_U_MAP_NR
];

209 
uöt64_t
 
	mio_u_com∂ëe
[
FIO_IO_U_MAP_NR
];

210 
uöt64_t
 
	mio_u_œt_n
[
FIO_IO_U_LAT_N_NR
];

211 
uöt64_t
 
	mio_u_œt_u
[
FIO_IO_U_LAT_U_NR
];

212 
uöt64_t
 
	mio_u_œt_m
[
FIO_IO_U_LAT_M_NR
];

213 
uöt64_t
 
	mio_u_∂©
[
FIO_LAT_CNT
][
DDIR_RWDIR_CNT
][
FIO_IO_U_PLAT_NR
];

214 
uöt64_t
 
	mio_u_sync_∂©
[
FIO_IO_U_PLAT_NR
];

216 
uöt64_t
 
	mtŸÆ_io_u
[
DDIR_RWDIR_SYNC_CNT
];

217 
uöt64_t
 
	msh‹t_io_u
[
DDIR_RWDIR_CNT
];

218 
uöt64_t
 
	mdr›_io_u
[
DDIR_RWDIR_CNT
];

219 
uöt64_t
 
	mtŸÆ_submô
;

220 
uöt64_t
 
	mtŸÆ_com∂ëe
;

222 
uöt64_t
 
	mio_byãs
[
DDIR_RWDIR_CNT
];

223 
uöt64_t
 
	mru¡ime
[
DDIR_RWDIR_CNT
];

224 
uöt64_t
 
	mtŸÆ_run_time
;

230 
uöt16_t
 
	mc⁄töue_⁄_îr‹
;

231 
uöt32_t
 
	m∑d2
;

233 
uöt32_t
 
	mfú°_îr‹
;

234 
uöt64_t
 
	mtŸÆ_îr_cou¡
;

237 
uöt64_t
 
	mƒ_z⁄e_ª£ts
;

239 
uöt64_t
 
	mƒ_block_öfos
;

240 
uöt32_t
 
	mblock_öfos
[
MAX_NR_BLOCK_INFOS
];

242 
uöt32_t
 
	mkb_ba£
;

243 
uöt32_t
 
	munô_ba£
;

245 
uöt32_t
 
	mœãncy_dïth
;

246 
uöt32_t
 
	m∑d3
;

247 
uöt64_t
 
	mœãncy_èrgë
;

248 
fio_Â64_t
 
	mœãncy_≥r˚¡ûe
;

249 
uöt64_t
 
	mœãncy_wödow
;

251 
uöt32_t
 
	msig_figs
;

253 
uöt64_t
 
	mss_dur
;

254 
uöt32_t
 
	mss_°©e
;

255 
uöt32_t
 
	mss_hód
;

257 
fio_Â64_t
 
	mss_limô
;

258 
fio_Â64_t
 
	mss_¶›e
;

259 
fio_Â64_t
 
	mss_devüti⁄
;

260 
fio_Â64_t
 
	mss_¸ôîi⁄
;

263 
uöt32_t
 
	mi›rio
;

266 
uöt64_t
 *
	mss_i›s_d©a
;

271 
uöt64_t
 
	mss_i›s_d©a_off£t
;

272 
uöt64_t
 
	m∑d4
;

276 
uöt64_t
 *
	mss_bw_d©a
;

281 
uöt64_t
 
	mss_bw_d©a_off£t
;

282 
uöt64_t
 
	m∑d5
;

286 
˛©_¥io_°©
 *
	m˛©_¥io
[
DDIR_RWDIR_CNT
];

291 
uöt64_t
 
	m˛©_¥io_off£t
[
DDIR_RWDIR_CNT
];

292 
uöt64_t
 
	m∑d6
;

294 
uöt32_t
 
	mƒ_˛©_¥io
[
DDIR_RWDIR_CNT
];

296 
uöt64_t
 
	mˇchehô
;

297 
uöt64_t
 
	mˇchemiss
;

298 } 
__©åibuã__
((
∑cked
));

300 
	#JOBS_ETA
 { \

301 
uöt32_t
 
ƒ_ru¬ög
; \

302 
uöt32_t
 
ƒ_ømp
; \

304 
uöt32_t
 
ƒ_≥ndög
; \

305 
uöt32_t
 
ƒ_£âög_up
; \

307 
uöt64_t
 
m_øã
[
DDIR_RWDIR_CNT
]; \

308 
uöt64_t
 
t_øã
[
DDIR_RWDIR_CNT
]; \

309 
uöt64_t
 
øã
[
DDIR_RWDIR_CNT
]; \

310 
uöt32_t
 
m_i›s
[
DDIR_RWDIR_CNT
]; \

311 
uöt32_t
 
t_i›s
[
DDIR_RWDIR_CNT
]; \

312 
uöt32_t
 
i›s
[
DDIR_RWDIR_CNT
]; \

313 
uöt32_t
 
∑d
; \

314 
uöt64_t
 
ñ≠£d_£c
; \

315 
uöt64_t
 
ëa_£c
; \

316 
uöt32_t
 
is_pow2
; \

317 
uöt32_t
 
unô_ba£
; \

319 
uöt32_t
 
sig_figs
; \

321 
uöt32_t
 
fûes_›í
; \

326 
uöt32_t
 
ƒ_thªads
; \

327 
uöt32_t
 
∑d2
; \

328 
uöt8_t
 
run_°r
[]; \

329 }

	)

331 
jobs_ëa
 
	gJOBS_ETA
;

332 
jobs_ëa_∑cked
 
JOBS_ETA
 
__©åibuã__
((
∑cked
));

334 
	sio_u_∂©_íåy
 {

335 
Êi°_hód
 
	mli°
;

336 
uöt64_t
 
	mio_u_∂©
[
FIO_IO_U_PLAT_NR
];

339 
fio_£m
 *
°©_£m
;

341 
jobs_ëa
 *
gë_jobs_ëa
(
boﬁ
 
f‹˚
, 
size_t
 *
size
);

343 
°©_öô
();

344 
°©_exô
();

346 
js⁄_obje˘
 * 
show_thªad_°©us
(
thªad_°©
 *
ts
, 
group_run_°©s
 *
rs
, 
Êi°_hód
 *, 
buf_ouçut
 *);

347 
show_group_°©s
(
group_run_°©s
 *
rs
, 
buf_ouçut
 *);

348 
boﬁ
 
ˇlc_thªad_°©us
(
jobs_ëa
 *
je
, 
f‹˚
);

349 
di•œy_thªad_°©us
(
jobs_ëa
 *
je
);

350 
__show_run_°©s
();

351 
__show_ru¬ög_run_°©s
();

352 
show_ru¬ög_run_°©s
();

353 
check_f‹_ru¬ög_°©s
();

354 
sum_thªad_°©s
(
thªad_°©
 *
d°
, thªad_°© *
§c
);

355 
sum_group_°©s
(
group_run_°©s
 *
d°
, group_run_°©†*
§c
);

356 
öô_thªad_°©_mö_vÆs
(
thªad_°©
 *
ts
);

357 
öô_thªad_°©
(
thªad_°©
 *
ts
);

358 
öô_group_run_°©
(
group_run_°©s
 *
gs
);

359 
ëa_to_°r
(*
°r
, 
ëa_£c
);

360 
boﬁ
 
ˇlc_œt
(
io_°©
 *
is
, *
mö
, *
max
, *
món
, *
dev
);

361 
ˇlc_˛©_≥r˚¡ûes
(
uöt64_t
 *
io_u_∂©
, 
ƒ
, 
fio_Â64_t
 *
∂i°
, **
ouçut
, *
maxv
, *
möv
);

362 
°©_ˇlc_œt_n
(
thªad_°©
 *
ts
, *
io_u_œt
);

363 
°©_ˇlc_œt_m
(
thªad_°©
 *
ts
, *
io_u_œt
);

364 
°©_ˇlc_œt_u
(
thªad_°©
 *
ts
, *
io_u_œt
);

365 
°©_ˇlc_di°
(
uöt64_t
 *
m≠
, 
tŸÆ
, *
io_u_di°
);

366 
ª£t_io_°©s
(
thªad_d©a
 *);

367 
upd©e_rußge_°©
(
thªad_d©a
 *);

368 
˛ór_rußge_°©
(
thªad_d©a
 *);

370 
add_œt_ßm∂e
(
thªad_d©a
 *, 
fio_ddú
, ,

371 , 
uöt64_t
, , );

372 
add_˛©_ßm∂e
(
thªad_d©a
 *, 
fio_ddú
, ,

373 , 
uöt64_t
, , );

374 
add_¶©_ßm∂e
(
thªad_d©a
 *, 
fio_ddú
, ,

375 , 
uöt64_t
, );

376 
add_agg_ßm∂e
(
io_ßm∂e_d©a
, 
fio_ddú
, );

377 
add_i›s_ßm∂e
(
thªad_d©a
 *, 
io_u
 *,

379 
add_bw_ßm∂e
(
thªad_d©a
 *, 
io_u
 *,

381 
add_sync_˛©_ßm∂e
(
thªad_°©
 *
ts
,

382 
n£c
);

383 
ˇlc_log_ßm∂es
();

384 
‰ì_˛©_¥io_°©s
(
thªad_°©
 *);

385 
Æloc_˛©_¥io_°©_ddú
(
thªad_°©
 *, 
fio_ddú
, );

387 
¥öt_disk_utû
(
disk_utû_°©
 *, 
disk_utû_agg
 *, 
ãr£
, 
buf_ouçut
 *);

388 
js⁄_¨øy_add_disk_utû
(
disk_utû_°©
 *
dus
,

389 
disk_utû_agg
 *
agg
, 
js⁄_¨øy
 *
∑ª¡
);

391 
io_log
 *
agg_io_log
[
DDIR_RWDIR_CNT
];

392 
boﬁ
 
wrôe_bw_log
;

394 
ölöe
 
boﬁ
 
	$n£c_to_u£c
(*
mö
,

395 *
max
, *
món
,

396 *
dev
)

398 i‡(*
mö
 > 2000 && *
max
 > 99999 && *
dev
 > 1000.0) {

399 *
mö
 /= 1000;

400 *
max
 /= 1000;

401 *
món
 /= 1000.0;

402 *
dev
 /= 1000.0;

403  
åue
;

406  
Ál£
;

407 
	}
}

409 
ölöe
 
boﬁ
 
	$n£c_to_m£c
(*
mö
,

410 *
max
, *
món
,

411 *
dev
)

413 i‡(*
mö
 > 2000000 && *
max
 > 99999999ULL && *
dev
 > 1000000.0) {

414 *
mö
 /= 1000000;

415 *
max
 /= 1000000;

416 *
món
 /= 1000000.0;

417 *
dev
 /= 1000000.0;

418  
åue
;

421  
Ál£
;

422 
	}
}

427 
	#__THREAD_RUNSTR_SZ
(
ƒ
Ë(“rË* 5)

	)

428 
	#THREAD_RUNSTR_SZ
 
	`__THREAD_RUNSTR_SZ
(
thªad_numbî
)

	)

430 
uöt32_t
 *
io_u_block_öfo
(
thªad_d©a
 *
td
, 
io_u
 *io_u);

	@steadystate.c

1 
	~<°dlib.h
>

3 
	~"fio.h
"

4 
	~"°ódy°©e.h
"

6 
boﬁ
 
	g°ódy°©e_íabÀd
 = 
Ál£
;

8 
	$°ódy°©e_‰ì
(
thªad_d©a
 *
td
)

10 
	`‰ì
(
td
->
ss
.
i›s_d©a
);

11 
	`‰ì
(
td
->
ss
.
bw_d©a
);

12 
td
->
ss
.
i›s_d©a
 = 
NULL
;

13 
td
->
ss
.
bw_d©a
 = 
NULL
;

14 
	}
}

16 
	$°ódy°©e_Æloc
(
thªad_d©a
 *
td
)

18 
td
->
ss
.
bw_d©a
 = 
	`ˇŒoc
—d->ss.
dur
, (
uöt64_t
));

19 
td
->
ss
.
i›s_d©a
 = 
	`ˇŒoc
—d->ss.
dur
, (
uöt64_t
));

21 
td
->
ss
.
°©e
 |
FIO_SS_DATA
;

22 
	}
}

24 
	$°ódy°©e_£tup
()

26 
thªad_d©a
 *
td
, *
¥ev_td
;

27 
i
, 
¥ev_groupid
;

29 i‡(!
°ódy°©e_íabÀd
)

37 
¥ev_groupid
 = -1;

38 
¥ev_td
 = 
NULL
;

39 
	`f‹_óch_td
(
td
, 
i
) {

40 i‡(!
td
->
ss
.
dur
)

43 i‡(!
td
->
o
.
group_ªp‹tög
) {

44 
	`°ódy°©e_Æloc
(
td
);

48 i‡(
¥ev_groupid
 !
td
->
groupid
) {

49 i‡(
¥ev_td
)

50 
	`°ódy°©e_Æloc
(
¥ev_td
);

51 
¥ev_groupid
 = 
td
->
groupid
;

53 
¥ev_td
 = 
td
;

56 i‡(
¥ev_td
 &&Öªv_td->
o
.
group_ªp‹tög
)

57 
	`°ódy°©e_Æloc
(
¥ev_td
);

58 
	}
}

60 
boﬁ
 
	$°ódy°©e_¶›e
(
uöt64_t
 
i›s
, uöt64_à
bw
,

61 
thªad_d©a
 *
td
)

63 
i
, 
j
;

64 
ªsu…
;

65 
°ódy°©e_d©a
 *
ss
 = &
td
->ss;

66 
uöt64_t
 
√w_vÆ
;

68 
ss
->
bw_d©a
[ss->
èû
] = 
bw
;

69 
ss
->
i›s_d©a
[ss->
èû
] = 
i›s
;

71 i‡(
ss
->
°©e
 & 
FIO_SS_IOPS
)

72 
√w_vÆ
 = 
i›s
;

74 
√w_vÆ
 = 
bw
;

76 i‡(
ss
->
°©e
 & 
FIO_SS_BUFFER_FULL
 || ss->
èû
 - ss->
hód
 =ss->
dur
 - 1) {

77 i‡(!(
ss
->
°©e
 & 
FIO_SS_BUFFER_FULL
)) {

79 
i
 = 0, 
ss
->
sum_y
 = 0; i < ss->
dur
; i++) {

80 i‡(
ss
->
°©e
 & 
FIO_SS_IOPS
)

81 
ss
->
sum_y
 +ss->
i›s_d©a
[
i
];

83 
ss
->
sum_y
 +ss->
bw_d©a
[
i
];

84 
j
 = (
ss
->
hód
 + 
i
Ë% ss->
dur
;

85 i‡(
ss
->
°©e
 & 
FIO_SS_IOPS
)

86 
ss
->
sum_xy
 +
i
 * ss->
i›s_d©a
[
j
];

88 
ss
->
sum_xy
 +
i
 * ss->
bw_d©a
[
j
];

90 
ss
->
°©e
 |
FIO_SS_BUFFER_FULL
;

92 
ss
->
sum_y
 -ss->
ﬁde°_y
;

93 
ss
->
sum_y
 +
√w_vÆ
;

94 
ss
->
sum_xy
 = ss->sum_xy - ss->
sum_y
 + ss->
dur
 * 
√w_vÆ
;

97 i‡(
ss
->
°©e
 & 
FIO_SS_IOPS
)

98 
ss
->
ﬁde°_y
 = ss->
i›s_d©a
[ss->
hód
];

100 
ss
->
ﬁde°_y
 = ss->
bw_d©a
[ss->
hód
];

108 
ss
->
¶›e
 = (ss->
sum_xy
 - (Ëss->
sum_x
 * ss->
sum_y
 / ss->
dur
) /

109 (
ss
->
sum_x_sq
 - (Ëss->
sum_x
 * ss->sum_x / ss->
dur
);

110 i‡(
ss
->
°©e
 & 
FIO_SS_PCT
)

111 
ss
->
¸ôîi⁄
 = 100.0 * ss->
¶›e
 / (ss->
sum_y
 / ss->
dur
);

113 
ss
->
¸ôîi⁄
 = ss->
¶›e
;

115 
	`d¥öt
(
FD_STEADYSTATE
, "sum_y: %llu, sum_xy: %llu, slope: %f, "

117 (Ë
ss
->
sum_y
,

118 (Ë
ss
->
sum_xy
,

119 
ss
->
¶›e
, ss->
¸ôîi⁄
, ss->
limô
);

121 
ªsu…
 = 
ss
->
¸ôîi⁄
 * (ss->criterion < 0.0 ? -1.0 : 1.0);

122 i‡(
ªsu…
 < 
ss
->
limô
)

123  
åue
;

126 
ss
->
èû
 = (ss->èû + 1Ë% ss->
dur
;

127 i‡(
ss
->
èû
 <ss->
hód
)

128 
ss
->
hód
 = (ss->hód + 1Ë% ss->
dur
;

130  
Ál£
;

131 
	}
}

133 
boﬁ
 
	$°ódy°©e_devüti⁄
(
uöt64_t
 
i›s
, uöt64_à
bw
,

134 
thªad_d©a
 *
td
)

136 
i
;

137 
diff
;

138 
món
;

140 
°ódy°©e_d©a
 *
ss
 = &
td
->ss;

142 
ss
->
bw_d©a
[ss->
èû
] = 
bw
;

143 
ss
->
i›s_d©a
[ss->
èû
] = 
i›s
;

145 i‡(
ss
->
°©e
 & 
FIO_SS_BUFFER_FULL
 || ss->
èû
 - ss->
hód
 =ss->
dur
 - 1) {

146 i‡(!(
ss
->
°©e
 & 
FIO_SS_BUFFER_FULL
)) {

148 
i
 = 0, 
ss
->
sum_y
 = 0; i < ss->
dur
; i++)

149 i‡(
ss
->
°©e
 & 
FIO_SS_IOPS
)

150 
ss
->
sum_y
 +ss->
i›s_d©a
[
i
];

152 
ss
->
sum_y
 +ss->
bw_d©a
[
i
];

153 
ss
->
°©e
 |
FIO_SS_BUFFER_FULL
;

155 
ss
->
sum_y
 -ss->
ﬁde°_y
;

156 i‡(
ss
->
°©e
 & 
FIO_SS_IOPS
)

157 
ss
->
sum_y
 +ss->
i›s_d©a
[ss->
èû
];

159 
ss
->
sum_y
 +ss->
bw_d©a
[ss->
èû
];

162 i‡(
ss
->
°©e
 & 
FIO_SS_IOPS
)

163 
ss
->
ﬁde°_y
 = ss->
i›s_d©a
[ss->
hód
];

165 
ss
->
ﬁde°_y
 = ss->
bw_d©a
[ss->
hód
];

167 
món
 = (Ë
ss
->
sum_y
 / ss->
dur
;

168 
ss
->
devüti⁄
 = 0.0;

170 
i
 = 0; i < 
ss
->
dur
; i++) {

171 i‡(
ss
->
°©e
 & 
FIO_SS_IOPS
)

172 
diff
 = 
ss
->
i›s_d©a
[
i
] - 
món
;

174 
diff
 = 
ss
->
bw_d©a
[
i
] - 
món
;

175 
ss
->
devüti⁄
 = 
	`max
(ss->devüti⁄, 
diff
 * (diff < 0.0 ? -1.0 : 1.0));

178 i‡(
ss
->
°©e
 & 
FIO_SS_PCT
)

179 
ss
->
¸ôîi⁄
 = 100.0 * ss->
devüti⁄
 / 
món
;

181 
ss
->
¸ôîi⁄
 = ss->
devüti⁄
;

183 
	`d¥öt
(
FD_STEADYSTATE
, "sum_y: %llu, mean: %f, max diff: %f, "

185 (Ë
ss
->
sum_y
, 
món
,

186 
ss
->
devüti⁄
, ss->
¸ôîi⁄
, ss->
limô
);

188 i‡(
ss
->
¸ôîi⁄
 < ss->
limô
)

189  
åue
;

192 
ss
->
èû
 = (ss->èû + 1Ë% ss->
dur
;

193 i‡(
ss
->
èû
 <ss->
hód
)

194 
ss
->
hód
 = (ss->hód + 1Ë% ss->
dur
;

196  
Ál£
;

197 
	}
}

199 
	$°ódy°©e_check
()

201 
i
, 
j
, 
ddú
, 
¥ev_groupid
, 
group_ømp_time_ovî
 = 0;

202 
øã_time
;

203 
thªad_d©a
 *
td
, *
td2
;

204 
time•ec
 
now
;

205 
uöt64_t
 
group_bw
 = 0, 
group_i›s
 = 0;

206 
uöt64_t
 
td_i›s
, 
td_byãs
;

207 
boﬁ
 
ªt
;

209 
¥ev_groupid
 = -1;

210 
	`f‹_óch_td
(
td
, 
i
) {

211 c⁄° 
boﬁ
 
√eds_lock
 = 
	`td_async_¥o˚ssög
(
td
);

212 
°ódy°©e_d©a
 *
ss
 = &
td
->ss;

214 i‡(!
ss
->
dur
 || 
td
->
run°©e
 <
TD_SETTING_UP
 ||

215 
td
->
run°©e
 >
TD_EXITED
 || !
ss
->
°©e
 ||

216 
ss
->
°©e
 & 
FIO_SS_ATTAINED
)

219 
td_i›s
 = 0;

220 
td_byãs
 = 0;

221 i‡(!
td
->
o
.
group_ªp‹tög
 ||

222 (
td
->
o
.
group_ªp‹tög
 &&Åd->
groupid
 !
¥ev_groupid
)) {

223 
group_bw
 = 0;

224 
group_i›s
 = 0;

225 
group_ømp_time_ovî
 = 0;

227 
¥ev_groupid
 = 
td
->
groupid
;

229 
	`fio_gëtime
(&
now
, 
NULL
);

230 i‡(
ss
->
ømp_time
 && !(ss->
°©e
 & 
FIO_SS_RAMP_OVER
)) {

235 i‡(
	`utime_sö˚
(&
td
->
ïoch
, &
now
Ë>(
ss
->
ømp_time
 + 1000000L))

236 
ss
->
°©e
 |
FIO_SS_RAMP_OVER
;

239 i‡(
√eds_lock
)

240 
	`__td_io_u_lock
(
td
);

242 
ddú
 = 0; ddú < 
DDIR_RWDIR_CNT
; ddir++) {

243 
td_i›s
 +
td
->
io_blocks
[
ddú
];

244 
td_byãs
 +
td
->
io_byãs
[
ddú
];

247 i‡(
√eds_lock
)

248 
	`__td_io_u_u∆ock
(
td
);

250 
øã_time
 = 
	`mtime_sö˚
(&
ss
->
¥ev_time
, &
now
);

251 
	`mem˝y
(&
ss
->
¥ev_time
, &
now
, (now));

253 i‡(
ss
->
°©e
 & 
FIO_SS_RAMP_OVER
) {

254 
group_bw
 +1000 * (
td_byãs
 - 
ss
->
¥ev_byãs
Ë/ 
øã_time
;

255 
group_i›s
 +1000 * (
td_i›s
 - 
ss
->
¥ev_i›s
Ë/ 
øã_time
;

256 ++
group_ømp_time_ovî
;

258 
ss
->
¥ev_i›s
 = 
td_i›s
;

259 
ss
->
¥ev_byãs
 = 
td_byãs
;

261 i‡(
td
->
o
.
group_ªp‹tög
 && !(
ss
->
°©e
 & 
FIO_SS_DATA
))

268 i‡(!
group_ømp_time_ovî
)

271 
	`d¥öt
(
FD_STEADYSTATE
, "steadystate_check()Åhread: %d, "

274 
i
, 
td
->
groupid
, 
øã_time
,

275 (Ë
group_i›s
,

276 (Ë
group_bw
,

277 
ss
->
hód
, ss->
èû
);

279 i‡(
ss
->
°©e
 & 
FIO_SS_SLOPE
)

280 
ªt
 = 
	`°ódy°©e_¶›e
(
group_i›s
, 
group_bw
, 
td
);

282 
ªt
 = 
	`°ódy°©e_devüti⁄
(
group_i›s
, 
group_bw
, 
td
);

284 i‡(
ªt
) {

285 i‡(
td
->
o
.
group_ªp‹tög
) {

286 
	`f‹_óch_td
(
td2
, 
j
) {

287 i‡(
td2
->
groupid
 =
td
->groupid) {

288 
td2
->
ss
.
°©e
 |
FIO_SS_ATTAINED
;

289 
	`fio_m¨k_td_ãrmö©e
(
td2
);

293 
ss
->
°©e
 |
FIO_SS_ATTAINED
;

294 
	`fio_m¨k_td_ãrmö©e
(
td
);

299 
	}
}

301 
	$td_°ódy°©e_öô
(
thªad_d©a
 *
td
)

303 
°ódy°©e_d©a
 *
ss
 = &
td
->ss;

304 
thªad_›ti⁄s
 *
o
 = &
td
->o;

305 
thªad_d©a
 *
td2
;

306 
j
;

308 
	`mem£t
(
ss
, 0, (*ss));

310 i‡(
o
->
ss_dur
) {

311 
°ódy°©e_íabÀd
 = 
åue
;

312 
o
->
ss_dur
 /= 1000000L;

315 
ss
->
dur
 = 
o
->
ss_dur
;

316 
ss
->
limô
 = 
o
->
ss_limô
.
u
.
f
;

317 
ss
->
ømp_time
 = 
o
->
ss_ømp_time
;

319 
ss
->
°©e
 = 
o
->
ss_°©e
;

320 i‡(!
td
->
ss
.
ømp_time
)

321 
ss
->
°©e
 |
FIO_SS_RAMP_OVER
;

323 
ss
->
sum_x
 = 
o
->
ss_dur
 * (o->ss_dur - 1) / 2;

324 
ss
->
sum_x_sq
 = (
o
->
ss_dur
 - 1) * (o->ss_dur) * (2*o->ss_dur - 1) / 6;

328 
	`f‹_óch_td
(
td2
, 
j
) {

329 i‡(
td2
->
groupid
 =
td
->groupid) {

330 
°ódy°©e_d©a
 *
ss2
 = &
td2
->
ss
;

332 i‡(
ss2
->
dur
 !
ss
->dur ||

333 
ss2
->
limô
 !
ss
->limit ||

334 
ss2
->
ømp_time
 !
ss
->ramp_time ||

335 
ss2
->
°©e
 !
ss
->state ||

336 
ss2
->
sum_x
 !
ss
->sum_x ||

337 
ss2
->
sum_x_sq
 !
ss
->sum_x_sq) {

338 
	`td_vîr‹
(
td
, 
EINVAL
, "jobÑejected: steadystate options must be consistent withinÑeporting groups");

345 
	}
}

347 
uöt64_t
 
	$°ódy°©e_bw_món
(
thªad_°©
 *
ts
)

349 
i
;

350 
uöt64_t
 
sum
;

352 i‡(!
ts
->
ss_dur
)

355 
i
 = 0, 
sum
 = 0; i < 
ts
->
ss_dur
; i++)

356 
sum
 +
ts
->
ss_bw_d©a
[
i
];

358  
sum
 / 
ts
->
ss_dur
;

359 
	}
}

361 
uöt64_t
 
	$°ódy°©e_i›s_món
(
thªad_°©
 *
ts
)

363 
i
;

364 
uöt64_t
 
sum
;

366 i‡(!
ts
->
ss_dur
)

369 
i
 = 0, 
sum
 = 0; i < 
ts
->
ss_dur
; i++)

370 
sum
 +
ts
->
ss_i›s_d©a
[
i
];

372  
sum
 / 
ts
->
ss_dur
;

373 
	}
}

	@steadystate.h

1 #i‚de‡
FIO_STEADYSTATE_H


2 
	#FIO_STEADYSTATE_H


	)

4 
	~"thªad_›ti⁄s.h
"

6 
°ódy°©e_‰ì
(
thªad_d©a
 *);

7 
°ódy°©e_check
();

8 
°ódy°©e_£tup
();

9 
td_°ódy°©e_öô
(
thªad_d©a
 *);

10 
uöt64_t
 
°ódy°©e_bw_món
(
thªad_°©
 *);

11 
uöt64_t
 
°ódy°©e_i›s_món
(
thªad_°©
 *);

13 
boﬁ
 
°ódy°©e_íabÀd
;

15 
	s°ódy°©e_d©a
 {

16 
	mlimô
;

17 
	mdur
;

18 
	mømp_time
;

20 
uöt32_t
 
	m°©e
;

22 
	mhód
;

23 
	mèû
;

24 
uöt64_t
 *
	mi›s_d©a
;

25 
uöt64_t
 *
	mbw_d©a
;

27 
	m¶›e
;

28 
	mdevüti⁄
;

29 
	m¸ôîi⁄
;

31 
uöt64_t
 
	msum_y
;

32 
uöt64_t
 
	msum_x
;

33 
uöt64_t
 
	msum_x_sq
;

34 
uöt64_t
 
	msum_xy
;

35 
uöt64_t
 
	mﬁde°_y
;

37 
time•ec
 
	m¥ev_time
;

38 
uöt64_t
 
	m¥ev_i›s
;

39 
uöt64_t
 
	m¥ev_byãs
;

43 
	m__FIO_SS_IOPS
 = 0,

44 
	m__FIO_SS_BW
,

45 
	m__FIO_SS_SLOPE
,

46 
	m__FIO_SS_ATTAINED
,

47 
	m__FIO_SS_RAMP_OVER
,

48 
	m__FIO_SS_DATA
,

49 
	m__FIO_SS_PCT
,

50 
	m__FIO_SS_BUFFER_FULL
,

54 
	mFIO_SS_IOPS
 = 1 << 
__FIO_SS_IOPS
,

55 
	mFIO_SS_BW
 = 1 << 
__FIO_SS_BW
,

56 
	mFIO_SS_SLOPE
 = 1 << 
__FIO_SS_SLOPE
,

57 
	mFIO_SS_ATTAINED
 = 1 << 
__FIO_SS_ATTAINED
,

58 
	mFIO_SS_RAMP_OVER
 = 1 << 
__FIO_SS_RAMP_OVER
,

59 
	mFIO_SS_DATA
 = 1 << 
__FIO_SS_DATA
,

60 
	mFIO_SS_PCT
 = 1 << 
__FIO_SS_PCT
,

61 
	mFIO_SS_BUFFER_FULL
 = 1 << 
__FIO_SS_BUFFER_FULL
,

63 
	mFIO_SS_IOPS_SLOPE
 = 
FIO_SS_IOPS
 | 
FIO_SS_SLOPE
,

64 
	mFIO_SS_BW_SLOPE
 = 
FIO_SS_BW
 | 
FIO_SS_SLOPE
,

67 
	#STEADYSTATE_MSEC
 1000

	)

	@t/arch.c

1 
	~"../¨ch/¨ch.h
"

3 
	g¨ch_Êags
 = 0;

4 
	g¨ch_øndom
;

	@t/axmap.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<öây≥s.h
>

5 
	~"../lib/lf§.h
"

6 
	~"../lib/axm≠.h
"

8 
	$ã°_ªguœr
(
uöt64_t
 
size
, 
£ed
)

10 
fio_lf§
 
lf§
;

11 
axm≠
 *
m≠
;

12 
îr
;

14 
	`¥ötf
("Usög %ŒuÉ¡rõs...", (Ë
size
);

15 
	`fÊush
(
°dout
);

17 
	`lf§_öô
(&
lf§
, 
size
, 
£ed
, seed & 0xF);

18 
m≠
 = 
	`axm≠_√w
(
size
);

19 
îr
 = 0;

21 
size
--) {

22 
uöt64_t
 
vÆ
;

24 i‡(
	`lf§_√xt
(&
lf§
, &
vÆ
)) {

25 
	`¥ötf
("lfsr: shortÜoop\n");

26 
îr
 = 1;

29 i‡(
	`axm≠_is£t
(
m≠
, 
vÆ
)) {

30 
	`¥ötf
("bitálready set\n");

31 
îr
 = 1;

34 
	`axm≠_£t
(
m≠
, 
vÆ
);

35 i‡(!
	`axm≠_is£t
(
m≠
, 
vÆ
)) {

36 
	`¥ötf
("bitÇot set\n");

37 
îr
 = 1;

42 i‡(
îr
)

43  
îr
;

45 
	`¥ötf
("pass!\n");

46 
	`axm≠_‰ì
(
m≠
);

48 
	}
}

50 
	$check_√xt_‰ì
(
axm≠
 *
m≠
, 
uöt64_t
 
°¨t
, uöt64_à
ex≥˘ed
)

53 
uöt64_t
 
ff
;

55 
ff
 = 
	`axm≠_√xt_‰ì
(
m≠
, 
°¨t
);

56 i‡(
ff
 !
ex≥˘ed
) {

57 
	`¥ötf
("axmap_next_free broken: Expected %llu, got %llu\n",

58 ()
ex≥˘ed
, (Ë
ff
);

62 
	}
}

64 
	$ã°_√xt_‰ì
(
uöt64_t
 
size
, 
£ed
)

66 
fio_lf§
 
lf§
;

67 
axm≠
 *
m≠
;

68 
uöt64_t
 
osize
;

69 
uöt64_t
 
ff
, 
œ°‰ì
;

70 
îr
, 
i
;

72 
	`¥ötf
("Te°Çext_‰ì %ŒuÉ¡rõs...", (Ë
size
);

73 
	`fÊush
(
°dout
);

75 
m≠
 = 
	`axm≠_√w
(
size
);

76 
îr
 = 0;

80 i‡(
	`check_√xt_‰ì
(
m≠
, 0, 1))

81 
îr
 = 1;

84 i‡(
	`check_√xt_‰ì
(
m≠
, 63, 64))

85 
îr
 = 1;

88 i‡(
	`check_√xt_‰ì
(
m≠
, 
size
 - 2, size - 1))

89 
îr
 = 1;

92 i‡(
	`check_√xt_‰ì
(
m≠
, 
size
 - 1, 0))

93 
îr
 = 1;

96 i‡(
	`check_√xt_‰ì
(
m≠
, 63, 64))

97 
îr
 = 1;

101 
	`axm≠_£t
(
m≠
, 63);

102 i‡(
	`check_√xt_‰ì
(
m≠
, 62, 64))

103 
îr
 = 1;

106 
	`axm≠_£t
(
m≠
, 
size
 - 1);

107 i‡(
	`check_√xt_‰ì
(
m≠
, 
size
 - 2, 0))

108 
îr
 = 1;

111 i‡(
	`check_√xt_‰ì
(
m≠
, 
size
 - 1, 0))

112 
îr
 = 1;

115 
i
=
size
 - 65; i < size; i++)

116 
	`axm≠_£t
(
m≠
, 
i
);

117 i‡(
	`check_√xt_‰ì
(
m≠
, 
size
 - 66, 0))

118 
îr
 = 1;

119 i‡(
	`check_√xt_‰ì
(
m≠
, 
size
 - 65, 0))

120 
îr
 = 1;

123 i‡(
	`check_√xt_‰ì
(
m≠
, 
size
 - 67, size - 66))

124 
îr
 = 1;

126 
	`axm≠_‰ì
(
m≠
);

129 
	`lf§_öô
(&
lf§
, 
size
, 
£ed
, seed & 0xF);

130 
m≠
 = 
	`axm≠_√w
(
size
);

131 
osize
 = 
size
;

134 
size
--;

135 
size
--) {

136 
uöt64_t
 
vÆ
;

138 i‡(
	`lf§_√xt
(&
lf§
, &
vÆ
)) {

139 
	`¥ötf
("lfsr: shortÜoop\n");

140 
îr
 = 1;

143 i‡(
	`axm≠_is£t
(
m≠
, 
vÆ
)) {

144 
	`¥ötf
("bitálready set\n");

145 
îr
 = 1;

148 
	`axm≠_£t
(
m≠
, 
vÆ
);

149 i‡(!
	`axm≠_is£t
(
m≠
, 
vÆ
)) {

150 
	`¥ötf
("bitÇot set\n");

151 
îr
 = 1;

157 
œ°‰ì
 = 
	`axm≠_√xt_‰ì
(
m≠
, 0);

158 i‡(
œ°‰ì
 == -1ULL) {

159 
	`¥ötf
("axmap_next_free broken: Couldn't findÜast free bit\n");

160 
îr
 = 1;

164 
ff
 = 
	`axm≠_√xt_‰ì
(
m≠
, 
œ°‰ì
);

165 i‡(
ff
 !
œ°‰ì
) {

166 
	`¥ötf
("axmap_next_free broken: wrap-aroundÅest #1 failed\n");

167 
îr
 = 1;

171 
ff
 = 
	`axm≠_√xt_‰ì
(
m≠
, 
osize
 - 1);

172 i‡(
ff
 !
œ°‰ì
) {

173 
	`¥ötf
("axmap_next_free broken: wrap-aroundÅest #2 failed\n");

174 
îr
 = 1;

178 
	`axm≠_£t
(
m≠
, 
œ°‰ì
);

179 
ff
 = 
	`axm≠_√xt_‰ì
(
m≠
, 0);

180 i‡(
ff
 != -1ULL) {

181 
	`¥ötf
("axmap_next_free broken: Expected -1 from full map\n");

182 
îr
 = 1;

185 
ff
 = 
	`axm≠_√xt_‰ì
(
m≠
, 
osize
);

186 i‡(
ff
 != -1ULL) {

187 
	`¥ötf
("axmap_next_free broken: Expected -1 from out of boundsÑequest\n");

188 
îr
 = 1;

191 i‡(
îr
)

192  
îr
;

194 
	`¥ötf
("pass!\n");

195 
	`axm≠_‰ì
(
m≠
);

197 
	}
}

199 
	$ã°_mu…i
(
uöt64_t
 
size
, 
bô_off
)

201 
m≠_size
 = 
size
;

202 
axm≠
 *
m≠
;

203 
uöt64_t
 
vÆ
 = 
bô_off
;

204 
i
, 
îr
;

206 
	`¥ötf
("Te° mu…ò%ŒuÉ¡rõ†%u off£t...", (Ë
size
, 
bô_off
);

207 
	`fÊush
(
°dout
);

209 
m≠
 = 
	`axm≠_√w
(
m≠_size
);

210 
vÆ
 + 128 <
m≠_size
) {

211 
îr
 = 0;

212 
i
 = 
vÆ
; i < val + 128; i++) {

213 i‡(
	`axm≠_is£t
(
m≠
, 
vÆ
 + 
i
)) {

214 
	`¥ötf
("bitálready set\n");

215 
îr
 = 1;

220 i‡(
îr
)

223 
îr
 = 
	`axm≠_£t_ƒ
(
m≠
, 
vÆ
, 128);

224 i‡(
îr
 != 128) {

225 
	`¥ötf
("⁄ly së %u bôs\n", 
îr
);

229 
îr
 = 0;

230 
i
 = 0; i < 128; i++) {

231 i‡(!
	`axm≠_is£t
(
m≠
, 
vÆ
 + 
i
)) {

232 
	`¥ötf
("bôÇŸ së: %Œu\n", (Ë
vÆ
 + 
i
);

233 
îr
 = 1;

238 
vÆ
 += 128;

239 i‡(
îr
)

243 i‡(!
îr
)

244 
	`¥ötf
("pass!\n");

246 
	`axm≠_‰ì
(
m≠
);

247  
îr
;

248 
	}
}

250 
	sovîœp_ã°
 {

251 
	m°¨t
;

252 
	mƒ
;

253 
	mªt
;

256 
	$ã°_ovîœp
()

258 
ovîœp_ã°
 
ã°s
[] = {

260 .
°¨t
 = 0,

261 .
ƒ
 = 0,

262 .
ªt
 = 0,

265 .
°¨t
 = 16,

266 .
ƒ
 = 16,

267 .
ªt
 = 16,

270 .
°¨t
 = 16,

271 .
ƒ
 = 0,

272 .
ªt
 = 0,

275 .
°¨t
 = 0,

276 .
ƒ
 = 32,

277 .
ªt
 = 16,

280 .
°¨t
 = 48,

281 .
ƒ
 = 32,

282 .
ªt
 = 32,

285 .
°¨t
 = 32,

286 .
ƒ
 = 32,

287 .
ªt
 = 16,

290 .
°¨t
 = 79,

291 .
ƒ
 = 1,

292 .
ªt
 = 0,

295 .
°¨t
 = 80,

296 .
ƒ
 = 21,

297 .
ªt
 = 21,

300 .
°¨t
 = 102,

301 .
ƒ
 = 1,

302 .
ªt
 = 1,

305 .
°¨t
 = 101,

306 .
ƒ
 = 3,

307 .
ªt
 = 1,

310 .
°¨t
 = 106,

311 .
ƒ
 = 4,

312 .
ªt
 = 4,

315 .
°¨t
 = 105,

316 .
ƒ
 = 3,

317 .
ªt
 = 1,

320 .
°¨t
 = 120,

321 .
ƒ
 = 4,

322 .
ªt
 = 4,

325 .
°¨t
 = 118,

326 .
ƒ
 = 2,

327 .
ªt
 = 2,

330 .
°¨t
 = 118,

331 .
ƒ
 = 2,

332 .
ªt
 = 0,

335 .
°¨t
 = 1100,

336 .
ƒ
 = 1,

337 .
ªt
 = 1,

340 .
°¨t
 = 1000,

341 .
ƒ
 = 256,

342 .
ªt
 = 100,

345 .
°¨t
 = 22684,

346 .
ƒ
 = 1,

347 .
ªt
 = 1,

350 .
°¨t
 = 22670,

351 .
ƒ
 = 60,

352 .
ªt
 = 14,

355 .
°¨t
 = 22670,

356 .
ƒ
 = 60,

357 .
ªt
 = 0,

360 .
°¨t
 = -1U,

363 
axm≠
 *
m≠
;

364 
íåõs
, 
i
, 
ªt
, 
îr
 = 0;

366 
íåõs
 = 0;

367 
i
 = 0; 
ã°s
[i].
°¨t
 != -1U; i++) {

368 
this
 = 
ã°s
[
i
].
°¨t
 +Åe°s[i].
ƒ
;

370 i‡(
this
 > 
íåõs
)

371 
íåõs
 = 
this
;

374 
	`¥ötf
("Test overlaps...\n");

375 
	`fÊush
(
°dout
);

377 
m≠
 = 
	`axm≠_√w
(
íåõs
);

379 
i
 = 0; 
ã°s
[i].
°¨t
 != -1U; i++) {

380 
ovîœp_ã°
 *
t
 = &
ã°s
[
i
];

382 
	`¥ötf
("\t°¨t=%6u,Çr=%3u: ", 
t
->
°¨t
,Å->
ƒ
);

383 
ªt
 = 
	`axm≠_£t_ƒ
(
m≠
, 
t
->
°¨t
,Å->
ƒ
);

384 i‡(
ªt
 !
t
->ret) {

385 
	`¥ötf
("%3d (FAIL, w™ãd %d)\n", 
ªt
, 
t
->ret);

386 
îr
 = 1;

389 
	`¥ötf
("%3d (PASS)\n", 
ªt
);

392 
	`axm≠_‰ì
(
m≠
);

393  
îr
;

394 
	}
}

396 
	$maö
(
¨gc
, *
¨gv
[])

398 
uöt64_t
 
size
 = (1ULL << 23) - 200;

399 
£ed
 = 1;

401 i‡(
¨gc
 > 1) {

402 
size
 = 
	`°πoul
(
¨gv
[1], 
NULL
, 10);

403 i‡(
¨gc
 > 2)

404 
£ed
 = 
	`°πoul
(
¨gv
[2], 
NULL
, 10);

407 i‡(
	`ã°_ªguœr
(
size
, 
£ed
))

409 i‡(
	`ã°_mu…i
(
size
, 0))

411 i‡(
	`ã°_mu…i
(
size
, 17))

413 i‡(
	`ã°_ovîœp
())

415 i‡(
	`ã°_√xt_‰ì
(
size
, 
£ed
))

419 i‡(
	`ã°_√xt_‰ì
(64*64*64, 
£ed
))

423 i‡(
	`ã°_√xt_‰ì
(((((64*64)-63)*64)-63)*64*12, 
£ed
))

427 
	}
}

	@t/btrace2fio.c

1 
	~<°dio.h
>

2 
	~<uni°d.h
>

3 
	~<öây≥s.h
>

4 
	~<m©h.h
>

5 
	~<as£π.h
>

7 
	~"../io_ddú.h
"

8 
	~"../Êi°.h
"

9 
	~"../hash.h
"

10 
	~"../fifo.h
"

11 
	~"../blkåa˚_≠i.h
"

12 
	~"../os/os.h
"

13 
	~"../log.h
"

14 
	~"../mömax.h
"

15 
	~"../o¶ib/löux-dev-lookup.h
"

17 
	#TRACE_FIFO_SIZE
 8192

	)

19 
	gπ_thªshﬁd
 = 1000000;

20 
	gios_thªshﬁd
 = 10;

21 
	gøã_thªshﬁd
;

22 
	g£t_øã
;

23 
	gmax_dïth
 = 256;

24 
	gouçut_ascii
 = 1;

25 *
	gfûíame
;

27 **
	gadd_›ts
;

28 
	gn_add_›ts
;

33 
	gcﬁœp£_íåõs
 = 0;

34 
	gdïth_diff
 = 1;

35 
	gøndom_diff
 = 5;

37 
	sbs
 {

38 
	mbs
;

39 
	mƒ
;

40 
	mmîges
;

43 
	såa˚_fûe
 {

44 *
	m«me
;

45 
	mmaj‹
, 
	mmö‹
;

48 
	sbåa˚_out
 {

49 
	mios
[
DDIR_RWDIR_CNT
];

50 
	mmîges
[
DDIR_RWDIR_CNT
];

52 
uöt64_t
 
	mœ°_íd
[
DDIR_RWDIR_CNT
];

53 
uöt64_t
 
	m£q
[
DDIR_RWDIR_CNT
];

55 
bs
 *
	mbs
[
DDIR_RWDIR_CNT
];

56 
	mƒ_bs
[
DDIR_RWDIR_CNT
];

58 
	möÊight
;

59 
	mdïth
;

60 
	mdïth_dißbÀd
;

61 
	mcom∂ëe_£í
;

63 
uöt64_t
 
	mfú°_âime
[
DDIR_RWDIR_CNT
];

64 
uöt64_t
 
	mœ°_âime
[
DDIR_RWDIR_CNT
];

65 
uöt64_t
 
	mkib
[
DDIR_RWDIR_CNT
];

67 
uöt64_t
 
	m°¨t_dñay
;

70 
	sbåa˚_pid
 {

71 
Êi°_hód
 
	mhash_li°
;

72 
Êi°_hód
 
	mpid_li°
;

73 
pid_t
 
	mpid
;

75 
pid_t
 *
	mmîge_pids
;

76 
	mƒ_mîge_pids
;

78 
åa˚_fûe
 *
	mfûes
;

79 
	mƒ_fûes
;

80 
	mœ°_maj‹
, 
	mœ°_mö‹
;

81 
	mnumjobs
;

82 
	mign‹e
;

84 
båa˚_out
 
	mo
;

87 
	söÊight
 {

88 
Êi°_hód
 
	mli°
;

89 
båa˚_pid
 *
	mp
;

90 
uöt64_t
 
	míd_£˘‹
;

93 
	#PID_HASH_BITS
 10

	)

94 
	#PID_HASH_SIZE
 (1U << 
PID_HASH_BITS
)

	)

96 
Êi°_hód
 
	gpid_hash
[
PID_HASH_SIZE
];

97 
FLIST_HEAD
(
pid_li°
);

99 
	#INFLIGHT_HASH_BITS
 8

	)

100 
	#INFLIGHT_HASH_SIZE
 (1U << 
INFLIGHT_HASH_BITS
)

	)

101 
Êi°_hód
 
	göÊight_hash
[
INFLIGHT_HASH_SIZE
];

103 
uöt64_t
 
	gfú°_âime
 = -1ULL;

105 
öÊight
 *
	$öÊight_föd
(
uöt64_t
 
£˘‹
)

107 
Êi°_hód
 *
öÊight_li°
;

108 
Êi°_hód
 *
e
;

110 
öÊight_li°
 = &
öÊight_hash
[
	`hash_l⁄g
(
£˘‹
, 
INFLIGHT_HASH_BITS
)];

112 
	`Êi°_f‹_óch
(
e
, 
öÊight_li°
) {

113 
öÊight
 *
i
 = 
	`Êi°_íåy
(
e
, öÊight, 
li°
);

115 i‡(
i
->
íd_£˘‹
 =
£˘‹
)

116  
i
;

119  
NULL
;

120 
	}
}

122 
	$öÊight_ªmove
(
öÊight
 *
i
)

124 
båa˚_out
 *
o
 = &
i
->
p
->o;

126 
o
->
öÊight
--;

127 
	`as£π
(
o
->
öÊight
 >= 0);

128 
	`Êi°_dñ
(&
i
->
li°
);

129 
	`‰ì
(
i
);

130 
	}
}

132 
	$__öÊight_add
(
öÊight
 *
i
)

134 
Êi°_hód
 *
li°
;

136 
li°
 = &
öÊight_hash
[
	`hash_l⁄g
(
i
->
íd_£˘‹
, 
INFLIGHT_HASH_BITS
)];

137 
	`Êi°_add_èû
(&
i
->
li°
,Üist);

138 
	}
}

140 
	$öÊight_add
(
båa˚_pid
 *
p
, 
uöt64_t
 
£˘‹
, 
uöt32_t
 
Àn
)

142 
båa˚_out
 *
o
 = &
p
->o;

143 
öÊight
 *
i
;

145 
i
 = 
	`ˇŒoc
(1, (*i));

146 
i
->
p
 =Ö;

147 
o
->
öÊight
++;

148 i‡(!
o
->
dïth_dißbÀd
) {

149 
o
->
dïth
 = 
	`max
((Ëo->dïth, o->
öÊight
);

150 i‡(
o
->
dïth
 >
max_dïth
 && !o->
com∂ëe_£í
) {

151 
o
->
dïth_dißbÀd
 = 1;

152 
o
->
dïth
 = 
max_dïth
;

155 
i
->
íd_£˘‹
 = 
£˘‹
 + (
Àn
 >> 9);

156 
	`__öÊight_add
(
i
);

157 
	}
}

159 
	$öÊight_mîge
(
öÊight
 *
i
, 
rw
, 
size
)

161 
i
->
p
->
o
.
mîges
[
rw
]++;

162 i‡(
size
) {

163 
i
->
íd_£˘‹
 +(
size
 >> 9);

164 
	`Êi°_dñ
(&
i
->
li°
);

165 
	`__öÊight_add
(
i
);

167 
	}
}

172 
	$ªfûl_fifo
(
fifo
 *fifo, 
fd
)

174 
buf
[
TRACE_FIFO_SIZE
];

175 
tŸÆ
;

176 
ªt
;

178 
tŸÆ
 = (
buf
);

179 i‡(
tŸÆ
 > 
	`fifo_room
(
fifo
))

180 
tŸÆ
 = 
	`fifo_room
(
fifo
);

182 
ªt
 = 
	`ªad
(
fd
, 
buf
, 
tŸÆ
);

183 i‡(
ªt
 < 0) {

184 
	`≥º‹
("readÑefill");

188 i‡(
ªt
 > 0)

189 
ªt
 = 
	`fifo_put
(
fifo
, 
buf
,Ñet);

191  
ªt
;

192 
	}
}

197 
	$åa˚_fifo_gë
(
fifo
 *fifo, 
fd
, *
buf
,

198 
Àn
)

200 i‡(
	`fifo_Àn
(
fifo
Ë< 
Àn
) {

201 
ªt
 = 
	`ªfûl_fifo
(
fifo
, 
fd
);

203 i‡(
ªt
 < 0)

204  
ªt
;

207  
	`fifo_gë
(
fifo
, 
buf
, 
Àn
);

208 
	}
}

213 
	$disˇrd_pdu
(
fifo
 *fifo, 
fd
, 
blk_io_åa˚
 *
t
)

215 i‡(
t
->
pdu_Àn
 == 0)

218  
	`åa˚_fifo_gë
(
fifo
, 
fd
, 
NULL
, 
t
->
pdu_Àn
);

219 
	}
}

221 
	$h™dÀ_åa˚_nŸify
(
blk_io_åa˚
 *
t
)

223 
t
->
a˘i⁄
) {

224 
BLK_TN_PROCESS
:

227 
BLK_TN_TIMESTAMP
:

230 
BLK_TN_MESSAGE
:

233 
	`log_îr
("unknow¿åa˚á˘ %x\n", 
t
->
a˘i⁄
);

238 
	}
}

240 
	$__add_bs
(
båa˚_out
 *
o
, 
Àn
, 
rw
)

242 
o
->
bs
[
rw
] = 
	`ªÆloc
(o->bs[rw], (o->
ƒ_bs
[rw] + 1) * (bs));

243 
o
->
bs
[
rw
][o->
ƒ_bs
[rw]].b†
Àn
;

244 
o
->
bs
[
rw
][o->
ƒ_bs
[rw]].
ƒ
 = 1;

245 
o
->
ƒ_bs
[
rw
]++;

246 
	}
}

248 
	$add_bs
(
båa˚_out
 *
o
, 
Àn
, 
rw
)

250 
bs
 *b†
o
->bs[
rw
];

251 
i
;

253 i‡(!
o
->
ƒ_bs
[
rw
]) {

254 
	`__add_bs
(
o
, 
Àn
, 
rw
);

258 
i
 = 0; i < 
o
->
ƒ_bs
[
rw
]; i++) {

259 i‡(
bs
[
i
].b†=
Àn
) {

260 
bs
[
i
].
ƒ
++;

265 
	`__add_bs
(
o
, 
Àn
, 
rw
);

266 
	}
}

268 
	#FMINORBITS
 20

	)

269 
	#FMINORMASK
 ((1U << 
FMINORBITS
Ë- 1)

	)

270 
	#FMAJOR
(
dev
Ë((Ë((devË>> 
FMINORBITS
))

	)

271 
	#FMINOR
(
dev
Ë((Ë((devË& 
FMINORMASK
))

	)

273 
	$båa˚_add_fûe
(
båa˚_pid
 *
p
, 
uöt32_t
 
devno
)

275 
maj
 = 
	`FMAJOR
(
devno
);

276 
mö
 = 
	`FMINOR
(
devno
);

277 
åa˚_fûe
 *
f
;

278 
i
;

279 
dev
[256];

281 i‡(
fûíame
)

283 i‡(
p
->
œ°_maj‹
 =
maj
 &&Ö->
œ°_mö‹
 =
mö
)

286 
p
->
œ°_maj‹
 = 
maj
;

287 
p
->
œ°_mö‹
 = 
mö
;

292 
i
 = 0; i < 
p
->
ƒ_fûes
; i++) {

293 
f
 = &
p
->
fûes
[
i
];

295 i‡(
f
->
maj‹
 =
maj
 && f->
mö‹
 =
mö
)

299 
	`°r˝y
(
dev
, "/dev");

300 i‡(!
	`blkåa˚_lookup_devi˚
(
NULL
, 
dev
, 
maj
, 
mö
)) {

301 
	`log_îr
("fio: faûedÅÿföd devi˚ %u/%u\n", 
maj
, 
mö
);

302 i‡(!
ouçut_ascii
) {

303 
	`log_îr
("fio: use -dÅo specify device\n");

309 
p
->
fûes
 = 
	`ªÆloc
’->fûes, (p->
ƒ_fûes
 + 1Ë* (*
f
));

310 
f
 = &
p
->
fûes
[p->
ƒ_fûes
];

311 
f
->
«me
 = 
	`°rdup
(
dev
);

312 
f
->
maj‹
 = 
maj
;

313 
f
->
mö‹
 = 
mö
;

314 
p
->
ƒ_fûes
++;

316 
	}
}

318 
	$t_to_rwdú
(
blk_io_åa˚
 *
t
)

320 i‡(
t
->
a˘i⁄
 & 
	`BLK_TC_ACT
(
BLK_TC_DISCARD
))

321  
DDIR_TRIM
;

323  (
t
->
a˘i⁄
 & 
	`BLK_TC_ACT
(
BLK_TC_WRITE
)) != 0;

324 
	}
}

326 
	$h™dÀ_åa˚_disˇrd
(
blk_io_åa˚
 *
t
, 
båa˚_pid
 *
p
)

328 
båa˚_out
 *
o
 = &
p
->o;

330 i‡(
	`båa˚_add_fûe
(
p
, 
t
->
devi˚
))

333 i‡(
o
->
fú°_âime
[2] == -1ULL)

334 
o
->
fú°_âime
[2] = 
t
->
time
;

336 
o
->
ios
[
DDIR_TRIM
]++;

337 
	`add_bs
(
o
, 
t
->
byãs
, 
DDIR_TRIM
);

339 
	}
}

341 
	$h™dÀ_åa˚_fs
(
blk_io_åa˚
 *
t
, 
båa˚_pid
 *
p
)

343 
båa˚_out
 *
o
 = &
p
->o;

344 
rw
;

346 i‡(
	`båa˚_add_fûe
(
p
, 
t
->
devi˚
))

349 
fú°_âime
 = 
	`mö
(fú°_âime, (
uöt64_t
Ë
t
->
time
);

351 
rw
 = (
t
->
a˘i⁄
 & 
	`BLK_TC_ACT
(
BLK_TC_WRITE
)) != 0;

353 i‡(
o
->
fú°_âime
[
rw
] == -1ULL)

354 
o
->
fú°_âime
[
rw
] = 
t
->
time
;

356 
	`add_bs
(
o
, 
t
->
byãs
, 
rw
);

357 
o
->
ios
[
rw
]++;

359 i‡(
t
->
£˘‹
 =
o
->
œ°_íd
[
rw
] || o->last_end[rw] == -1ULL)

360 
o
->
£q
[
rw
]++;

362 
o
->
œ°_íd
[
rw
] = 
t
->
£˘‹
 + (t->
byãs
 >> 9);

364 
	}
}

366 
	$h™dÀ_queue_åa˚
(
blk_io_åa˚
 *
t
, 
båa˚_pid
 *
p
)

368 i‡(
t
->
a˘i⁄
 & 
	`BLK_TC_ACT
(
BLK_TC_NOTIFY
))

369  
	`h™dÀ_åa˚_nŸify
(
t
);

370 i‡(
t
->
a˘i⁄
 & 
	`BLK_TC_ACT
(
BLK_TC_DISCARD
))

371  
	`h™dÀ_åa˚_disˇrd
(
t
, 
p
);

373  
	`h™dÀ_åa˚_fs
(
t
, 
p
);

374 
	}
}

376 
	$h™dÀ_åa˚
(
blk_io_åa˚
 *
t
, 
båa˚_pid
 *
p
)

378 
a˘
 = 
t
->
a˘i⁄
 & 0xffff;

379 
ªt
 = 0;

381 i‡(
a˘
 =
__BLK_TA_QUEUE
) {

382 
	`öÊight_add
(
p
, 
t
->
£˘‹
,Å->
byãs
);

383 
ªt
 = 
	`h™dÀ_queue_åa˚
(
t
, 
p
);

384 } i‡(
a˘
 =
__BLK_TA_BACKMERGE
) {

385 
öÊight
 *
i
;

387 
i
 = 
	`öÊight_föd
(
t
->
£˘‹
 + (t->
byãs
 >> 9));

388 i‡(
i
)

389 
	`öÊight_ªmove
(
i
);

391 
i
 = 
	`öÊight_föd
(
t
->
£˘‹
);

392 i‡(
i
)

393 
	`öÊight_mîge
(
i
, 
	`t_to_rwdú
(
t
),Å->
byãs
);

394 } i‡(
a˘
 =
__BLK_TA_FRONTMERGE
) {

395 
öÊight
 *
i
;

397 
i
 = 
	`öÊight_föd
(
t
->
£˘‹
 + (t->
byãs
 >> 9));

398 i‡(
i
)

399 
	`öÊight_ªmove
(
i
);

401 
i
 = 
	`öÊight_föd
(
t
->
£˘‹
);

402 i‡(
i
)

403 
	`öÊight_mîge
(
i
, 
	`t_to_rwdú
(
t
), 0);

404 } i‡(
a˘
 =
__BLK_TA_COMPLETE
) {

405 
öÊight
 *
i
;

407 
i
 = 
	`öÊight_föd
(
t
->
£˘‹
 + (t->
byãs
 >> 9));

408 i‡(
i
) {

409 
i
->
p
->
o
.
kib
[
	`t_to_rwdú
(
t
)] +—->
byãs
 >> 10);

410 
i
->
p
->
o
.
com∂ëe_£í
 = 1;

411 
	`öÊight_ªmove
(
i
);

415  
ªt
;

416 
	}
}

418 
	$byãsw≠_åa˚
(
blk_io_åa˚
 *
t
)

420 
t
->
magic
 = 
	`fio_sw≠32
(t->magic);

421 
t
->
£quí˚
 = 
	`fio_sw≠32
(t->sequence);

422 
t
->
time
 = 
	`fio_sw≠64
(t->time);

423 
t
->
£˘‹
 = 
	`fio_sw≠64
(t->sector);

424 
t
->
byãs
 = 
	`fio_sw≠32
(t->bytes);

425 
t
->
a˘i⁄
 = 
	`fio_sw≠32
(t->action);

426 
t
->
pid
 = 
	`fio_sw≠32
(t->pid);

427 
t
->
devi˚
 = 
	`fio_sw≠32
(t->device);

428 
t
->
˝u
 = 
	`fio_sw≠32
(t->cpu);

429 
t
->
îr‹
 = 
	`fio_sw≠16
(t->error);

430 
t
->
pdu_Àn
 = 
	`fio_sw≠16
(t->pdu_len);

431 
	}
}

433 
båa˚_pid
 *
	$pid_hash_föd
(
pid_t
 
pid
, 
Êi°_hód
 *
li°
)

435 
Êi°_hód
 *
e
;

436 
båa˚_pid
 *
p
;

438 
	`Êi°_f‹_óch
(
e
, 
li°
) {

439 
p
 = 
	`Êi°_íåy
(
e
, 
båa˚_pid
, 
hash_li°
);

440 i‡(
p
->
pid
 ==Öid)

441  
p
;

444  
NULL
;

445 
	}
}

447 
båa˚_pid
 *
	$pid_hash_gë
(
pid_t
 
pid
)

449 
Êi°_hód
 *
hash_li°
;

450 
båa˚_pid
 *
p
;

452 
hash_li°
 = &
pid_hash
[
	`hash_l⁄g
(
pid
, 
PID_HASH_BITS
)];

454 
p
 = 
	`pid_hash_föd
(
pid
, 
hash_li°
);

455 i‡(!
p
) {

456 
i
;

458 
p
 = 
	`ˇŒoc
(1, (*p));

460 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

461 
p
->
o
.
fú°_âime
[
i
] = -1ULL;

462 
p
->
o
.
œ°_âime
[
i
] = -1ULL;

463 
p
->
o
.
œ°_íd
[
i
] = -1ULL;

466 
p
->
pid
 =Öid;

467 
p
->
numjobs
 = 1;

468 
	`Êi°_add_èû
(&
p
->
hash_li°
, hash_list);

469 
	`Êi°_add_èû
(&
p
->
pid_li°
, &pid_list);

472  
p
;

473 
	}
}

479 
	$lﬂd_blkåa˚
(c⁄° *
‚ame
, 
√ed_sw≠
)

481 
båa˚_pid
 *
p
;

482 
åa˚s
;

483 
blk_io_åa˚
 
t
;

484 
fifo
 *fifo;

485 
fd
, 
ªt
 = 0;

487 
fd
 = 
	`›í
(
‚ame
, 
O_RDONLY
);

488 i‡(
fd
 < 0) {

489 
	`≥º‹
("openÅrace file\n");

493 
fifo
 = 
	`fifo_Æloc
(
TRACE_FIFO_SIZE
);

495 
åa˚s
 = 0;

497 
ªt
 = 
	`åa˚_fifo_gë
(
fifo
, 
fd
, &
t
, (t));

498 i‡(
ªt
 < 0)

499 
îr
;

500 i‡(!
ªt
)

502 i‡(
ªt
 < (Ë(
t
)) {

503 
	`log_îr
("fio: short fifo get\n");

507 i‡(
√ed_sw≠
)

508 
	`byãsw≠_åa˚
(&
t
);

510 i‡((
t
.
magic
 & 0xffffff00Ë!
BLK_IO_TRACE_MAGIC
) {

511 
	`log_îr
("fio: bad magi¯ö blkåa˚ d©a: %x\n", 
t
.
magic
);

512 
îr
;

514 i‡((
t
.
magic
 & 0xffË!
BLK_IO_TRACE_VERSION
) {

515 
	`log_îr
("fio: bad blkåa˚ vîsi⁄ %d\n", 
t
.
magic
 & 0xff);

516 
îr
;

518 
ªt
 = 
	`disˇrd_pdu
(
fifo
, 
fd
, &
t
);

519 i‡(
ªt
 < 0) {

520 
	`log_îr
("blktraceÜseek\n");

521 
îr
;

522 } i‡(
t
.
pdu_Àn
 !
ªt
) {

523 
	`log_îr
("fio: disˇrded %d o‡%d\n", 
ªt
, 
t
.
pdu_Àn
);

524 
îr
;

527 
p
 = 
	`pid_hash_gë
(
t
.
pid
);

528 
ªt
 = 
	`h™dÀ_åa˚
(&
t
, 
p
);

529 i‡(
ªt
)

531 
p
->
o
.
œ°_âime
[
	`t_to_rwdú
(&
t
)] =Å.
time
;

532 
åa˚s
++;

535 
	`fifo_‰ì
(
fifo
);

536 
	`˛o£
(
fd
);

538 i‡(
ªt
)

539  
ªt
;

541 i‡(
ouçut_ascii
)

542 
	`¥ötf
("Tø˚†lﬂded: %lu\n", 
åa˚s
);

545 
îr
:

546 
	`˛o£
(
fd
);

547 
	`fifo_‰ì
(
fifo
);

549 
	}
}

551 
	$bs_cmp
(c⁄° *
ba
, c⁄° *
bb
)

553 c⁄° 
bs
 *
bß
 = 
ba
;

554 c⁄° 
bs
 *
bsb
 = 
bb
;

556  
bsb
->
ƒ
 - 
bß
->nr;

557 
	}
}

559 
	$o_to_kib_øã
(
båa˚_out
 *
o
, 
rw
)

561 
uöt64_t
 
u£c
 = (
o
->
œ°_âime
[
rw
] - o->
fú°_âime
[rw]) / 1000ULL;

562 
uöt64_t
 
vÆ
;

564 i‡(!
u£c
)

567 
u£c
 /= 1000;

568 i‡(!
u£c
)

571 
vÆ
 = 
o
->
kib
[
rw
] * 1000ULL;

572  
vÆ
 / 
u£c
;

573 
	}
}

575 
uöt64_t
 
	$o_fú°_âime
(
båa˚_out
 *
o
)

577 
uöt64_t
 
fú°
;

579 
fú°
 = 
	`mö
(
o
->
fú°_âime
[0], o->first_ttime[1]);

580  
	`mö
(
fú°
, 
o
->
fú°_âime
[2]);

581 
	}
}

583 
uöt64_t
 
	$o_l⁄ge°_âime
(
båa˚_out
 *
o
)

585 
uöt64_t
 
ªt
 = 0;

586 
i
;

588 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

589 
uöt64_t
 
diff
;

591 
diff
 = 
o
->
œ°_âime
[
i
] - o->
fú°_âime
[i];

592 
ªt
 = 
	`max
(
diff
,Ñet);

595  
ªt
;

596 
	}
}

598 
	$__ouçut_p_ascii
(
båa˚_pid
 *
p
, *
ios
)

600 c⁄° *
msg
[] = { "reads", "writes", "trims" };

601 
båa˚_out
 *
o
 = &
p
->o;

602 
tŸÆ
, 
u£c
;

603 
i
, 
j
;

605 
	`¥ötf
("[pid:\t%u", 
p
->
pid
);

606 i‡(
p
->
ƒ_mîge_pids
)

607 
i
 = 0; i < 
p
->
ƒ_mîge_pids
; i++)

608 
	`¥ötf
(", %u", 
p
->
mîge_pids
[
i
]);

609 
	`¥ötf
("]\n");

611 
tŸÆ
 = 
	`ddú_rw_sum
(
o
->
ios
);

612 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

613 
≥rc
;

615 i‡(!
o
->
ios
[
i
])

618 
ios
[
i
] +
o
->ios[i] + o->
mîges
[i];

619 
	`¥ötf
("%s\n", 
msg
[
i
]);

620 
≥rc
 = ((Ë
o
->
ios
[
i
] * 100.0Ë/ (Ë
tŸÆ
;

621 
	`¥ötf
("\tios: %lu (≥rc=%3.2f%%)\n", 
o
->
ios
[
i
], 
≥rc
);

622 
≥rc
 = ((Ë
o
->
mîges
[
i
] * 100.0Ë/ (Ë
tŸÆ
;

623 
	`¥ötf
("\tmîges: %lu (≥rc=%3.2f%%)\n", 
o
->
mîges
[
i
], 
≥rc
);

624 
≥rc
 = ((Ë
o
->
£q
[
i
] * 100.0Ë/ (Ëo->
ios
[i];

625 
	`¥ötf
("\t£q: %lu (≥rc=%3.2f%%)\n", (Ë
o
->
£q
[
i
], 
≥rc
);

626 
	`¥ötf
("\å©e: %lu KiB/£c\n", 
	`o_to_kib_øã
(
o
, 
i
));

628 
j
 = 0; j < 
o
->
ƒ_bs
[
i
]; j++) {

629 
bs
 *b†&
o
->bs[
i
][
j
];

631 
≥rc
 = (((Ë
bs
->
ƒ
 * 100.0Ë/ (Ë
o
->
ios
[
i
]);

632 
	`¥ötf
("\tbs=%u,Öîc=%3.2f%%\n", 
bs
->bs, 
≥rc
);

636 
	`¥ötf
("dïth:\t%u\n", 
o
->
dïth
);

637 
u£c
 = 
	`o_l⁄ge°_âime
(
o
) / 1000ULL;

638 
	`¥ötf
("u£c:\t%lu (dñay=%Œu)\n", 
u£c
, (Ë
o
->
°¨t_dñay
);

640 
	`¥ötf
("files:\t");

641 
i
 = 0; i < 
p
->
ƒ_fûes
; i++)

642 
	`¥ötf
("%s,", 
p
->
fûes
[
i
].
«me
);

643 
	`¥ötf
("\n");

645 
	`¥ötf
("\n");

646 
	}
}

648 
	$__ouçut_p_fio
(
båa˚_pid
 *
p
, *
ios
,

649 c⁄° *
«me_po°fix
)

651 
båa˚_out
 *
o
 = &
p
->o;

652 
tŸÆ
;

653 
time
;

654 
≥rc
;

655 
i
, 
j
;

657 i‡((
o
->
ios
[0] + o->ios[1]) && o->ios[2]) {

658 
ios_bak
[
DDIR_RWDIR_CNT
];

660 
	`mem˝y
(
ios_bak
, 
o
->
ios
, 
DDIR_RWDIR_CNT
 * ());

663 
o
->
ios
[2] = 0;

664 
	`__ouçut_p_fio
(
p
, 
ios
, "");

665 
o
->
ios
[2] = 
ios_bak
[2];

668 
o
->
ios
[0] = 0;

669 
o
->
ios
[1] = 0;

670 
	`__ouçut_p_fio
(
p
, 
ios
, "_trim");

671 
o
->
ios
[0] = 
ios_bak
[0];

672 
o
->
ios
[1] = 
ios_bak
[1];

676 i‡(!
p
->
ƒ_fûes
) {

677 
	`log_îr
("fio:Ço devices found\n");

681 
	`¥ötf
("[pid%u%s", 
p
->
pid
, 
«me_po°fix
);

682 i‡(
p
->
ƒ_mîge_pids
)

683 
i
 = 0; i < 
p
->
ƒ_mîge_pids
; i++)

684 
	`¥ötf
(",pid%u", 
p
->
mîge_pids
[
i
]);

685 
	`¥ötf
("]\n");

687 
	`¥ötf
("numjobs=%u\n", 
p
->
numjobs
);

688 
	`¥ötf
("direct=1\n");

689 i‡(
o
->
dïth
 == 1)

690 
	`¥ötf
("ioengine=sync\n");

692 
	`¥ötf
("i€ngöeˆibaio\niodïth=%u\n", 
o
->
dïth
);

694 i‡(
o
->
ios
[0] && !o->ios[1])

695 
	`¥ötf
("rw=randread\n");

696 i‡(!
o
->
ios
[0] && o->ios[1])

697 
	`¥ötf
("rw=randwrite\n");

698 i‡(
o
->
ios
[2])

699 
	`¥ötf
("rw=randtrim\n");

701 
	`¥ötf
("rw=randrw\n");

702 
tŸÆ
 = 
	`ddú_rw_sum
(
o
->
ios
);

703 
≥rc
 = ((Ë
o
->
ios
[0] * 100.0Ë/ (Ë
tŸÆ
;

704 
	`¥ötf
("rwmixªad=%u\n", (Ë
	`Êo‹
(
≥rc
 + 0.50));

707 
	`¥ötf
("percentage_random=");

708 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

709 i‡(
o
->
£q
[
i
] && o->
ios
[i]) {

710 
≥rc
 = ((Ë
o
->
£q
[
i
] * 100.0Ë/ (Ëo->
ios
[i];

711 i‡(
≥rc
 >= 99.0)

712 
≥rc
 = 100.0;

714 
≥rc
 = 100.0;

716 i‡(
i
)

717 
	`¥ötf
(",");

718 
≥rc
 = 100.0 -Öerc;

719 
	`¥ötf
("%u", (Ë
	`Êo‹
(
≥rc
 + 0.5));

721 
	`¥ötf
("\n");

723 
	`¥ötf
("filename=");

724 
i
 = 0; i < 
p
->
ƒ_fûes
; i++) {

725 i‡(
i
)

726 
	`¥ötf
(":");

727 
	`¥ötf
("%s", 
p
->
fûes
[
i
].
«me
);

729 
	`¥ötf
("\n");

731 i‡(
o
->
°¨t_dñay
 / 1000000ULL)

732 
	`¥ötf
("°¨tdñay=%Œus\n", 
o
->
°¨t_dñay
 / 1000000ULL);

734 
time
 = 
	`o_l⁄ge°_âime
(
o
);

735 
time
 = (time + 1000000000ULL - 1) / 1000000000ULL;

736 
	`¥ötf
("ru¡ime=%Œus\n", 
time
);

738 
	`¥ötf
("bssplit=");

739 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

741 i‡(
i
 && 
o
->
ƒ_bs
[i - 1] && o->nr_bs[i])

742 
	`¥ötf
(",");

744 
j
 = 0; j < 
o
->
ƒ_bs
[
i
]; j++) {

745 
bs
 *b†&
o
->bs[
i
][
j
];

747 
≥rc
 = (((Ë
bs
->
ƒ
 * 100.0Ë/ (Ë
o
->
ios
[
i
]);

748 i‡(
≥rc
 < 1.00)

750 i‡(
j
)

751 
	`¥ötf
(":");

752 i‡(
j
 + 1 =
o
->
ƒ_bs
[
i
])

753 
	`¥ötf
("%u/", 
bs
->bs);

755 
	`¥ötf
("%u/%u", 
bs
->bs, (Ë
	`Êo‹
(
≥rc
 + 0.5));

758 
	`¥ötf
("\n");

760 i‡(
£t_øã
) {

761 
	`¥ötf
("rate=");

762 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

763 
øã
;

765 
øã
 = 
	`o_to_kib_øã
(
o
, 
i
);

766 i‡(
i
)

767 
	`¥ötf
(",");

768 i‡(
øã
)

769 
	`¥ötf
("%luk", 
øã
);

771 
	`¥ötf
("\n");

774 i‡(
n_add_›ts
)

775 
i
 = 0; i < 
n_add_›ts
; i++)

776 
	`¥ötf
("%s\n", 
add_›ts
[
i
]);

778 
	`¥ötf
("\n");

780 
	}
}

782 
	$__ouçut_p
(
båa˚_pid
 *
p
, *
ios
)

784 
båa˚_out
 *
o
 = &
p
->o;

785 
i
, 
ªt
 = 0;

787 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

788 i‡(
o
->
ƒ_bs
[
i
] <= 1)

790 
	`qs‹t
(
o
->
bs
[
i
], o->
ƒ_bs
[i], (bs), 
bs_cmp
);

793 i‡(
fûíame
) {

794 
p
->
fûes
 = 
	`mÆloc
((
åa˚_fûe
));

795 
p
->
ƒ_fûes
++;

796 
p
->
fûes
[0].
«me
 = 
fûíame
;

799 i‡(
ouçut_ascii
)

800 
	`__ouçut_p_ascii
(
p
, 
ios
);

802 
ªt
 = 
	`__ouçut_p_fio
(
p
, 
ios
, "");

804  
ªt
;

805 
	}
}

807 
	$ªmove_ddú
(
båa˚_out
 *
o
, 
rw
)

809 
o
->
ios
[
rw
] = 0;

810 
	}
}

812 
	$¥u√_íåy
(
båa˚_out
 *
o
)

814 
øã
;

815 
uöt64_t
 
time
;

816 
i
;

818 i‡(
	`ddú_rw_sum
(
o
->
ios
Ë< 
ios_thªshﬁd
)

821 
time
 = 
	`o_l⁄ge°_âime
(
o
) / 1000ULL;

822 i‡(
time
 < 
π_thªshﬁd
)

825 
øã
 = 0;

826 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

827 
this_øã
;

829 
this_øã
 = 
	`o_to_kib_øã
(
o
, 
i
);

830 i‡(
this_øã
 < 
øã_thªshﬁd
) {

831 
	`ªmove_ddú
(
o
, 
i
);

832 
this_øã
 = 0;

834 
øã
 +
this_øã
;

837 i‡(
øã
 < 
øã_thªshﬁd
)

841 
	}
}

843 
	$íåy_cmp
(*
¥iv
, 
Êi°_hód
 *
a
, Êi°_hód *
b
)

845 
båa˚_pid
 *
∑
 = 
	`Êi°_íåy
(
a
, båa˚_pid, 
pid_li°
);

846 
båa˚_pid
 *
pb
 = 
	`Êi°_íåy
(
b
, båa˚_pid, 
pid_li°
);

848  
	`ddú_rw_sum
(
pb
->
o
.
ios
Ë- ddú_rw_sum(
∑
->o.ios);

849 
	}
}

851 
	$‰ì_p
(
båa˚_pid
 *
p
)

853 
båa˚_out
 *
o
 = &
p
->o;

854 
i
;

856 
i
 = 0; i < 
p
->
ƒ_fûes
; i++) {

857 i‡(
p
->
fûes
[
i
].
«me
 &&Ö->fûes[i].«mê!
fûíame
)

858 
	`‰ì
(
p
->
fûes
[
i
].
«me
);

861 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++)

862 
	`‰ì
(
o
->
bs
[
i
]);

864 
	`‰ì
(
p
->
fûes
);

865 
	`Êi°_dñ
(&
p
->
pid_li°
);

866 
	`Êi°_dñ
(&
p
->
hash_li°
);

867 
	`‰ì
(
p
);

868 
	}
}

870 
	$íåõs_˛o£
(
båa˚_pid
 *
pida
, båa˚_pid *
pidb
)

872 
≥rˇ
, 
≥rcb
, 
fdiff
;

873 
i
, 
idiff
;

875 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

876 i‡((
pida
->
o
.
ios
[
i
] && !
pidb
->o.ios[i]) ||

877 (
pidb
->
o
.
ios
[
i
] && !
pida
->o.ios[i]))

879 i‡(
pida
->
o
.
ios
[
i
] && 
pidb
->o.ios[i]) {

880 
≥rˇ
 = ((Ë
pida
->
o
.
£q
[
i
] * 100.0Ë/ (Ëpida->o.
ios
[i];

881 
≥rcb
 = ((Ë
pidb
->
o
.
£q
[
i
] * 100.0Ë/ (Ëpidb->o.
ios
[i];

882 
fdiff
 = 
≥rˇ
 - 
≥rcb
;

883 i‡(
	`Ábs
(
fdiff
Ë> 
øndom_diff
)

887 
idiff
 = 
pida
->
o
.
dïth
 - 
pidb
->o.depth;

888 i‡(
	`abs
(
idiff
Ë> 
dïth_diff
)

893 
	}
}

895 
	$mîge_bs
(
bs
 **
bßp
, *
ƒ_bßp
,

896 
bs
 *
bsb
, 
ƒ_bsb
)

898 
bs
 *
bß
 = *
bßp
;

899 
ƒ_bß
 = *
ƒ_bßp
;

900 
a
, 
b
;

902 
b
 = 0; b < 
ƒ_bsb
; b++) {

903 
√xt
, 
found
 = 0;

905 
a
 = 0;á < 
ƒ_bß
;á++) {

906 i‡(
bsb
[
b
].
bs
 !
bß
[
a
].bs)

909 
bß
[
a
].
ƒ
 +
bsb
[
b
].nr;

910 
bß
[
a
].
mîges
 +
bsb
[
b
].merges;

911 
found
 = 1;

915 i‡(
found
)

918 
√xt
 = *
ƒ_bßp
;

919 
bß
 = 
	`ªÆloc
(bß, (
√xt
 + 1Ë* (
bs
));

920 
bß
[
√xt
].
bs
 = 
bsb
[
b
].bs;

921 
bß
[
√xt
].
ƒ
 = 
bsb
[
b
].nr;

922 (*
ƒ_bßp
)++;

923 *
bßp
 = 
bß
;

925 
	}
}

927 
	$mîge_íåõs
(
båa˚_pid
 *
pida
, båa˚_pid *
pidb
)

929 
i
;

931 i‡(!
	`íåõs_˛o£
(
pida
, 
pidb
))

934 
pida
->
ƒ_mîge_pids
++;

935 
pida
->
mîge_pids
 = 
	`ªÆloc
’ida->mîge_pids,Öida->
ƒ_mîge_pids
 * (
pid_t
));

936 
pida
->
mîge_pids
[pida->
ƒ_mîge_pids
 - 1] = 
pidb
->
pid
;

938 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

939 
båa˚_out
 *
ﬂ
 = &
pida
->
o
;

940 
båa˚_out
 *
ob
 = &
pidb
->
o
;

942 
ﬂ
->
ios
[
i
] +
ob
->ios[i];

943 
ﬂ
->
mîges
[
i
] +
ob
->merges[i];

944 
ﬂ
->
£q
[
i
] +
ob
->seq[i];

945 
ﬂ
->
kib
[
i
] +
ob
->kib[i];

946 
ﬂ
->
fú°_âime
[
i
] = 
	`mö
(ﬂ->fú°_âime[i], 
ob
->first_ttime[i]);

947 
ﬂ
->
œ°_âime
[
i
] = 
	`max
(ﬂ->œ°_âime[i], 
ob
->last_ttime[i]);

948 
	`mîge_bs
(&
ﬂ
->
bs
[
i
], &ﬂ->
ƒ_bs
[i], 
ob
->bs[i], ob->nr_bs[i]);

951 
pida
->
o
.
°¨t_dñay
 = 
	`mö
’ida->o.°¨t_dñay, 
pidb
->o.start_delay);

952 
pida
->
o
.
dïth
 = (pida->o.dïth + 
pidb
->o.depth) / 2;

954 
	}
}

956 
	$check_mîges
(
båa˚_pid
 *
p
, 
Êi°_hód
 *
pidli°
)

958 
Êi°_hód
 *
e
, *
tmp
;

960 i‡(
p
->
ign‹e
)

963 
	`Êi°_f‹_óch_ß„
(
e
, 
tmp
, 
pidli°
) {

964 
båa˚_pid
 *
pidb
;

966 
pidb
 = 
	`Êi°_íåy
(
e
, 
båa˚_pid
, 
pid_li°
);

967 i‡(
pidb
 =
p
)

970 i‡(
	`mîge_íåõs
(
p
, 
pidb
)) {

971 
pidb
->
ign‹e
 = 1;

972 
p
->
numjobs
++;

975 
	}
}

977 
	$ouçut_p
()

979 
ios
[
DDIR_RWDIR_CNT
];

980 
Êi°_hód
 *
e
, *
tmp
;

981 
dïth_dißbÀd
 = 0;

982 
ªt
 = 0;

984 
	`Êi°_f‹_óch_ß„
(
e
, 
tmp
, &
pid_li°
) {

985 
båa˚_pid
 *
p
;

987 
p
 = 
	`Êi°_íåy
(
e
, 
båa˚_pid
, 
pid_li°
);

988 i‡(
	`¥u√_íåy
(&
p
->
o
)) {

989 
	`‰ì_p
(
p
);

992 
p
->
o
.
°¨t_dñay
 = (
	`o_fú°_âime
(&p->oË/ 1000ULLË- 
fú°_âime
;

993 
dïth_dißbÀd
 +
p
->
o
.depth_disabled;

996 i‡(
cﬁœp£_íåõs
) {

997 
båa˚_pid
 *
p
;

999 
	`Êi°_f‹_óch_ß„
(
e
, 
tmp
, &
pid_li°
) {

1000 
p
 = 
	`Êi°_íåy
(
e
, 
båa˚_pid
, 
pid_li°
);

1001 
	`check_mîges
(
p
, &
pid_li°
);

1004 
	`Êi°_f‹_óch_ß„
(
e
, 
tmp
, &
pid_li°
) {

1005 
p
 = 
	`Êi°_íåy
(
e
, 
båa˚_pid
, 
pid_li°
);

1006 i‡(
p
->
ign‹e
)

1007 
	`‰ì_p
(
p
);

1011 i‡(
dïth_dißbÀd
)

1012 
	`log_îr
("fio: missög com∂ëi⁄Åø˚s, dïth†ˇµedáà%u\n", 
max_dïth
);

1014 
	`mem£t
(
ios
, 0, (ios));

1016 
	`Êi°_s‹t
(
NULL
, &
pid_li°
, 
íåy_cmp
);

1018 
	`Êi°_f‹_óch
(
e
, &
pid_li°
) {

1019 
båa˚_pid
 *
p
;

1021 
p
 = 
	`Êi°_íåy
(
e
, 
båa˚_pid
, 
pid_li°
);

1022 
ªt
 |
	`__ouçut_p
(
p
, 
ios
);

1023 i‡(
ªt
 && !
ouçut_ascii
)

1027 i‡(
ouçut_ascii
)

1028 
	`¥ötf
("TŸÆ:Ñóds=%lu, wrôes=%lu\n", 
ios
[0], ios[1]);

1030  
ªt
;

1031 
	}
}

1033 
	$ußge
(*
¨gv
[])

1035 
	`log_îr
("%s: [›ti⁄s] <blkåa˚ bö fûe>\n", 
¨gv
[0]);

1036 
	`log_îr
("\t-t\tUsecÅhresholdÅo ignoreÅask\n");

1037 
	`log_îr
("\t-n\tNumber IOSÅhresholdÅo ignoreÅask\n");

1038 
	`log_îr
("\t-f\tFio job file output\n");

1039 
	`log_îr
("\t-d\tUseÅhis file/device forÑeplay\n");

1040 
	`log_îr
("\t-r\tIgnore jobs withÜessÅhanÅhis KiB/secÑate\n");

1041 
	`log_îr
("\t-R\tSëÑ©êö fiÿjob (def=%u)\n", 
£t_øã
);

1042 
	`log_îr
("\t-D\tC≠ queuêdïtháàthi†vÆuê(def=%u)\n", 
max_dïth
);

1043 
	`log_îr
("\t-c\tCﬁœp£ \"idítiˇl\" job†(def=%u)\n", 
cﬁœp£_íåõs
);

1044 
	`log_îr
("\t-u\tDïth dif„ªn˚ f‹ cﬁœp£ (def=%u)\n", 
dïth_diff
);

1045 
	`log_îr
("\t-x\tR™dom dif„ªn˚ f‹ cﬁœp£ (def=%u)\n", 
øndom_diff
);

1046 
	`log_îr
("\t-a\tAdditional fio optionÅoáddÅo job file\n");

1048 
	}
}

1050 
	$åa˚_√eds_sw≠
(c⁄° *
åa˚_fûe
, *
sw≠
)

1052 
blk_io_åa˚
 
t
;

1053 
fd
, 
ªt
;

1055 *
sw≠
 = -1;

1057 
fd
 = 
	`›í
(
åa˚_fûe
, 
O_RDONLY
);

1058 i‡(
fd
 < 0) {

1059 
	`≥º‹
("open");

1063 
ªt
 = 
	`ªad
(
fd
, &
t
, (t));

1064 i‡(
ªt
 < 0) {

1065 
	`˛o£
(
fd
);

1066 
	`≥º‹
("read");

1068 } i‡(
ªt
 !(
t
)) {

1069 
	`˛o£
(
fd
);

1070 
	`log_îr
("fio: shortÑead onÅrace file\n");

1074 
	`˛o£
(
fd
);

1076 i‡((
t
.
magic
 & 0xffffff00Ë=
BLK_IO_TRACE_MAGIC
)

1077 *
sw≠
 = 0;

1082 
t
.
magic
 = 
	`fio_sw≠32
(t.magic);

1083 i‡((
t
.
magic
 & 0xffffff00Ë=
BLK_IO_TRACE_MAGIC
)

1084 *
sw≠
 = 1;

1087 i‡(*
sw≠
 == -1) {

1088 
	`log_îr
("fio: blktraceáppears corrupt\n");

1093 
	}
}

1095 
	$maö
(
¨gc
, *
¨gv
[])

1097 
√ed_sw≠
, 
i
, 
c
;

1099 i‡(
¨gc
 < 2)

1100  
	`ußge
(
¨gv
);

1102 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "t:n:fd:r:RD:c:u:x:a:")) != -1) {

1103 
c
) {

1105 
£t_øã
 = 1;

1108 
øã_thªshﬁd
 = 
	`©oi
(
›èrg
);

1111 
π_thªshﬁd
 = 
	`©oi
(
›èrg
);

1114 
ios_thªshﬁd
 = 
	`©oi
(
›èrg
);

1117 
ouçut_ascii
 = 0;

1120 
fûíame
 = 
	`°rdup
(
›èrg
);

1123 
max_dïth
 = 
	`©oi
(
›èrg
);

1126 
cﬁœp£_íåõs
 = 
	`©oi
(
›èrg
);

1129 
dïth_diff
 = 
	`©oi
(
›èrg
);

1132 
øndom_diff
 = 
	`©oi
(
›èrg
);

1135 
add_›ts
 = 
	`ªÆloc
◊dd_›ts, (
n_add_›ts
 + 1) * (*));

1136 
add_›ts
[
n_add_›ts
] = 
	`°rdup
(
›èrg
);

1137 
n_add_›ts
++;

1141  
	`ußge
(
¨gv
);

1145 i‡(
¨gc
 =
›töd
)

1146  
	`ußge
(
¨gv
);

1148 i‡(
	`åa˚_√eds_sw≠
(
¨gv
[
›töd
], &
√ed_sw≠
))

1151 
i
 = 0; i < 
PID_HASH_SIZE
; i++)

1152 
	`INIT_FLIST_HEAD
(&
pid_hash
[
i
]);

1153 
i
 = 0; i < 
INFLIGHT_HASH_SIZE
; i++)

1154 
	`INIT_FLIST_HEAD
(&
öÊight_hash
[
i
]);

1156 
	`lﬂd_blkåa˚
(
¨gv
[
›töd
], 
√ed_sw≠
);

1157 
fú°_âime
 /= 1000ULL;

1159  
	`ouçut_p
();

1160 
	}
}

	@t/debug.c

1 
	~<°dio.h
>

3 
FILE
 *
	gf_îr
;

4 *
	gfio_ts
;

5 
	gfio_debug
 = 0;

7 
	$__d¥öt
(
ty≥
, c⁄° *
°r
, ...)

9 
	}
}

11 
	$debug_öô
()

13 
f_îr
 = 
°dîr
;

14 
	}
}

	@t/debug.h

1 #i‚de‡
FIO_DEBUG_INC_H


2 
	#FIO_DEBUG_INC_H


	)

4 
debug_öô
();

	@t/dedupe.c

6 
	~<f˙é.h
>

7 
	~<öây≥s.h
>

8 
	~<°dio.h
>

9 
	~<°rög.h
>

10 
	~<uni°d.h
>

11 
	~<sys/°©.h
>

13 
	~"../fio.h
"

14 
	~"../Êi°.h
"

15 
	~"../log.h
"

16 
	~"../fio_£m.h
"

17 
	~"../smÆloc.h
"

18 
	~"../mömax.h
"

19 
	~"../¸c/md5.h
"

20 
	~"../os/os.h
"

21 
	~"../gëtime.h
"

22 
	~"../fio_time.h
"

23 
	~"../lib/rbåì.h
"

25 
	~"../lib/bloom.h
"

26 
	~"debug.h
"

27 
	~"zlib.h
"

29 
	szlib_˘æ
 {

30 
z_°ªam
 
	m°ªam
;

31 *
	mbuf_ö
;

32 *
	mbuf_out
;

35 
	sw‹kî_thªad
 {

36 
zlib_˘æ
 
	mzc
;

37 
±hªad_t
 
	mthªad
;

38 
uöt64_t
 
	mcur_off£t
;

39 
uöt64_t
 
	msize
;

40 
	munique_ˇ∑côy
;

41 
	môems
;

42 
	mdu≥s
;

43 
	mîr
;

44 
	mfd
;

45 vﬁ©ûê
	md⁄e
;

48 
	sexã¡
 {

49 
Êi°_hód
 
	mli°
;

50 
uöt64_t
 
	moff£t
;

53 
	schunk
 {

54 
fio_rb_node
 
	mrb_node
;

55 
uöt64_t
 
	mcou¡
;

56 
uöt32_t
 
	mhash
[
MD5_HASH_WORDS
];

57 
Êi°_hód
 
	mexã¡_li°
[0];

60 
	sôem
 {

61 
uöt64_t
 
	moff£t
;

62 
uöt32_t
 
	mhash
[
MD5_HASH_WORDS
];

65 
rb_roŸ
 
	grb_roŸ
;

66 
bloom
 *
	gbloom
;

67 
fio_£m
 *
	grb_lock
;

69 
	gblocksize
 = 4096;

70 
	gnum_thªads
;

71 
	gchunk_size
 = 1048576;

72 
	gdump_ouçut
;

73 
	godúe˘
;

74 
	gcﬁlisi⁄_check
;

75 
	g¥öt_¥ogªss
 = 1;

76 
	gu£_bloom
 = 1;

77 
	gcom¥essi⁄
 = 0;

79 
uöt64_t
 
	gtŸÆ_size
;

80 
uöt64_t
 
	gcur_off£t
;

81 
fio_£m
 *
	gsize_lock
;

83 
fio_fûe
 
	gfûe
;

85 
uöt64_t
 
	$gë_size
(
fio_fûe
 *
f
, 
°©
 *
sb
)

87 
uöt64_t
 
ªt
;

89 i‡(
	`S_ISBLK
(
sb
->
°_mode
)) {

90 
byãs
 = 0;

92 i‡(
	`blockdev_size
(
f
, &
byãs
)) {

93 
	`log_îr
("dedupe: failed getting bdev size\n");

96 
ªt
 = 
byãs
;

98 
ªt
 = 
sb
->
°_size
;

101  (
ªt
 & ~((
uöt64_t
)
blocksize
 - 1));

102 
	}
}

104 
	$gë_w‹k
(
uöt64_t
 *
off£t
, uöt64_à*
size
)

106 
uöt64_t
 
this_chunk
;

107 
ªt
 = 1;

109 
	`fio_£m_down
(
size_lock
);

111 i‡(
cur_off£t
 < 
tŸÆ_size
) {

112 *
off£t
 = 
cur_off£t
;

113 
this_chunk
 = 
	`mö
((
uöt64_t
)
chunk_size
, 
tŸÆ_size
 - 
cur_off£t
);

114 *
size
 = 
this_chunk
;

115 
cur_off£t
 +
this_chunk
;

116 
ªt
 = 0;

119 
	`fio_£m_up
(
size_lock
);

120  
ªt
;

121 
	}
}

123 
	$__ªad_block
(
fd
, *
buf
, 
off_t
 
off£t
, 
size_t
 
cou¡
)

125 
ssize_t
 
ªt
;

127 
ªt
 = 
	`¥ód
(
fd
, 
buf
, 
cou¡
, 
off£t
);

128 i‡(
ªt
 < 0) {

129 
	`≥º‹
("pread");

131 } i‡(!
ªt
) {

133 } i‡(
ªt
 !
cou¡
) {

134 
	`log_îr
("dedupe: shortÑead on block\n");

139 
	}
}

141 
	$ªad_block
(
fd
, *
buf
, 
off_t
 
off£t
)

143  
	`__ªad_block
(
fd
, 
buf
, 
off£t
, 
blocksize
);

144 
	}
}

146 
	$accou¡_unique_ˇ∑côy
(
uöt64_t
 
off£t
, uöt64_à*
unique_ˇ∑côy
,

147 
zlib_˘æ
 *
zc
)

149 
z_°ªam
 *
°ªam
 = &
zc
->stream;

150 
com¥es£d_Àn
;

151 
ªt
;

153 i‡(
	`ªad_block
(
fûe
.
fd
, 
zc
->
buf_ö
, 
off£t
))

156 
°ªam
->
√xt_ö
 = 
zc
->
buf_ö
;

157 
°ªam
->
avaû_ö
 = 
blocksize
;

158 
°ªam
->
avaû_out
 = 
	`deÊ©eBound
(°ªam, 
blocksize
);

159 
°ªam
->
√xt_out
 = 
zc
->
buf_out
;

161 
ªt
 = 
	`deÊ©e
(
°ªam
, 
Z_FINISH
);

162 i‡(
ªt
 =
Z_STREAM_ERROR
)

164 
com¥es£d_Àn
 = 
blocksize
 - 
°ªam
->
avaû_out
;

166 i‡(
dump_ouçut
)

167 
	`¥ötf
("offset 0x%lx compressedÅo %d blocksize %dÑatio %.2f \n",

168 (Ë
off£t
, 
com¥es£d_Àn
, 
blocksize
,

169 ()
com¥es£d_Àn
 / ()
blocksize
);

171 *
unique_ˇ∑côy
 +
com¥es£d_Àn
;

172 
	`deÊ©eRe£t
(
°ªam
);

174 
	}
}

176 
	$add_ôem
(
chunk
 *
c
, 
ôem
 *
i
)

182 i‡(
dump_ouçut
 || 
cﬁlisi⁄_check
) {

183 
exã¡
 *
e
;

185 
e
 = 
	`mÆloc
((*e));

186 
e
->
off£t
 = 
i
->offset;

187 
	`Êi°_add_èû
(&
e
->
li°
, &
c
->
exã¡_li°
[0]);

190 
c
->
cou¡
++;

191 
	}
}

193 
	$cﬁ_check
(
chunk
 *
c
, 
ôem
 *
i
)

195 
exã¡
 *
e
;

196 *
cbuf
, *
ibuf
;

197 
ªt
 = 1;

199 
cbuf
 = 
	`fio_memÆign
(
blocksize
, blocksize, 
Ál£
);

200 
ibuf
 = 
	`fio_memÆign
(
blocksize
, blocksize, 
Ál£
);

202 
e
 = 
	`Êi°_íåy
(
c
->
exã¡_li°
[0].
√xt
, 
exã¡
, 
li°
);

203 i‡(
	`ªad_block
(
fûe
.
fd
, 
cbuf
, 
e
->
off£t
))

204 
out
;

206 i‡(
	`ªad_block
(
fûe
.
fd
, 
ibuf
, 
i
->
off£t
))

207 
out
;

209 
ªt
 = 
	`memcmp
(
ibuf
, 
cbuf
, 
blocksize
);

210 
out
:

211 
	`fio_mem‰ì
(
cbuf
, 
blocksize
, 
Ál£
);

212 
	`fio_mem‰ì
(
ibuf
, 
blocksize
, 
Ál£
);

213  
ªt
;

214 
	}
}

216 
chunk
 *
	$Æloc_chunk
()

218 
chunk
 *
c
;

220 i‡(
cﬁlisi⁄_check
 || 
dump_ouçut
) {

221 
c
 = 
	`mÆloc
((
chunk
Ë+ (
Êi°_hód
));

222 
	`INIT_FLIST_HEAD
(&
c
->
exã¡_li°
[0]);

224 
c
 = 
	`mÆloc
((
chunk
));

227  
c
;

228 
	}
}

230 
	$ö£π_chunk
(
ôem
 *
i
, 
uöt64_t
 *
unique_ˇ∑côy
,

231 
zlib_˘æ
 *
zc
)

233 
fio_rb_node
 **
p
, *
∑ª¡
;

234 
chunk
 *
c
;

235 
ªt
, 
diff
;

237 
p
 = &
rb_roŸ
.
rb_node
;

238 
∑ª¡
 = 
NULL
;

239 *
p
) {

240 
∑ª¡
 = *
p
;

242 
c
 = 
	`rb_íåy
(
∑ª¡
, 
chunk
, 
rb_node
);

243 
diff
 = 
	`memcmp
(
i
->
hash
, 
c
->hash, (i->hash));

244 i‡(
diff
 < 0) {

245 
p
 = &(*p)->
rb_À·
;

246 } i‡(
diff
 > 0) {

247 
p
 = &(*p)->
rb_right
;

249 i‡(!
cﬁlisi⁄_check
)

250 
add
;

252 
	`fio_£m_up
(
rb_lock
);

253 
ªt
 = 
	`cﬁ_check
(
c
, 
i
);

254 
	`fio_£m_down
(
rb_lock
);

256 i‡(!
ªt
)

257 
add
;

259 
p
 = &(*p)->
rb_right
;

263 
c
 = 
	`Æloc_chunk
();

264 
	`RB_CLEAR_NODE
(&
c
->
rb_node
);

265 
c
->
cou¡
 = 0;

266 
	`mem˝y
(
c
->
hash
, 
i
->hash, (i->hash));

267 
	`rb_lök_node
(&
c
->
rb_node
, 
∑ª¡
, 
p
);

268 
	`rb_ö£π_cﬁ‹
(&
c
->
rb_node
, &
rb_roŸ
);

269 i‡(
com¥essi⁄
) {

270 
ªt
 = 
	`accou¡_unique_ˇ∑côy
(
i
->
off£t
, 
unique_ˇ∑côy
, 
zc
);

271 i‡(
ªt
)

272  
ªt
;

274 
add
:

275 
	`add_ôem
(
c
, 
i
);

277 
	}
}

279 
	$ö£π_chunks
(
ôem
 *
ôems
, 
nôems
,

280 
uöt64_t
 *
ndu≥s
, uöt64_à*
unique_ˇ∑côy
,

281 
zlib_˘æ
 *
zc
)

283 
i
, 
ªt
 = 0;

285 
	`fio_£m_down
(
rb_lock
);

287 
i
 = 0; i < 
nôems
; i++) {

288 i‡(
bloom
) {

289 
s
;

290 
r
;

292 
s
 = (
ôems
[
i
].
hash
Ë/ (
uöt32_t
);

293 
r
 = 
	`bloom_£t
(
bloom
, 
ôems
[
i
].
hash
, 
s
);

294 *
ndu≥s
 +
r
;

296 
ªt
 = 
	`ö£π_chunk
(&
ôems
[
i
], 
unique_ˇ∑côy
, 
zc
);

297 i‡(
ªt
)

302 
	`fio_£m_up
(
rb_lock
);

303  
ªt
;

304 
	}
}

306 
	$¸c_buf
(*
buf
, 
uöt32_t
 *
hash
)

308 
fio_md5_˘x
 
˘x
 = { .
hash
 = hash };

310 
	`fio_md5_öô
(&
˘x
);

311 
	`fio_md5_upd©e
(&
˘x
, 
buf
, 
blocksize
);

312 
	`fio_md5_föÆ
(&
˘x
);

313 
	}
}

315 
	$ªad_blocks
(
fd
, *
buf
, 
off_t
 
off£t
, 
size_t
 
size
)

317 i‡(
	`__ªad_block
(
fd
, 
buf
, 
off£t
, 
size
))

320  
size
 / 
blocksize
;

321 
	}
}

323 
	$do_w‹k
(
w‹kî_thªad
 *
thªad
, *
buf
)

325 
nblocks
, 
i
;

326 
off_t
 
off£t
;

327 
nôems
 = 0;

328 
uöt64_t
 
ndu≥s
 = 0;

329 
uöt64_t
 
unique_ˇ∑côy
 = 0;

330 
ôem
 *
ôems
;

331 
ªt
;

333 
off£t
 = 
thªad
->
cur_off£t
;

335 
nblocks
 = 
	`ªad_blocks
(
thªad
->
fd
, 
buf
, 
off£t
,

336 
	`mö
(
thªad
->
size
, (
uöt64_t
Ë
chunk_size
));

337 i‡(!
nblocks
)

340 
ôems
 = 
	`mÆloc
((*ôemsË* 
nblocks
);

342 
i
 = 0; i < 
nblocks
; i++) {

343 *
thi•å
 = 
buf
 + (
i
 * 
blocksize
);

345 
ôems
[
i
].
off£t
 = offset;

346 
	`¸c_buf
(
thi•å
, 
ôems
[
i
].
hash
);

347 
off£t
 +
blocksize
;

348 
nôems
++;

351 
ªt
 = 
	`ö£π_chunks
(
ôems
, 
nôems
, &
ndu≥s
, &
unique_ˇ∑côy
, &
thªad
->
zc
);

353 
	`‰ì
(
ôems
);

354 i‡(!
ªt
) {

355 
thªad
->
ôems
 +
nôems
;

356 
thªad
->
du≥s
 +
ndu≥s
;

357 
thªad
->
unique_ˇ∑côy
 += unique_capacity;

361  
ªt
;

362 
	}
}

364 
	$thªad_öô_zlib_c⁄åﬁ
(
w‹kî_thªad
 *
thªad
)

366 
size_t
 
sz
;

368 
z_°ªam
 *
°ªam
 = &
thªad
->
zc
.stream;

369 
°ªam
->
zÆloc
 = 
Z_NULL
;

370 
°ªam
->
z‰ì
 = 
Z_NULL
;

371 
°ªam
->
›aque
 = 
Z_NULL
;

373 i‡(
	`deÊ©eInô
(
°ªam
, 
Z_DEFAULT_COMPRESSION
Ë!
Z_OK
)

376 
thªad
->
zc
.
buf_ö
 = 
	`fio_memÆign
(
blocksize
, blocksize, 
Ál£
);

377 
sz
 = 
	`deÊ©eBound
(
°ªam
, 
blocksize
);

378 
thªad
->
zc
.
buf_out
 = 
	`fio_memÆign
(
blocksize
, 
sz
, 
Ál£
);

379 
	}
}

381 *
	$thªad_‚
(*
d©a
)

383 
w‹kî_thªad
 *
thªad
 = 
d©a
;

384 *
buf
;

386 
buf
 = 
	`fio_memÆign
(
blocksize
, 
chunk_size
, 
Ál£
);

387 
	`thªad_öô_zlib_c⁄åﬁ
(
thªad
);

390 i‡(
	`gë_w‹k
(&
thªad
->
cur_off£t
, &thªad->
size
)) {

391 
thªad
->
îr
 = 1;

394 i‡(
	`do_w‹k
(
thªad
, 
buf
)) {

395 
thªad
->
îr
 = 1;

400 
thªad
->
d⁄e
 = 1;

401 
	`fio_mem‰ì
(
buf
, 
chunk_size
, 
Ál£
);

402  
NULL
;

403 
	}
}

405 
	$show_¥ogªss
(
w‹kî_thªad
 *
thªads
, 
tŸÆ
)

407 
œ°_nôems
 = 0;

408 
time•ec
 
œ°_tv
;

410 
	`fio_gëtime
(&
œ°_tv
, 
NULL
);

412 
¥öt_¥ogªss
) {

413 
this_ôems
;

414 
nôems
 = 0;

415 
uöt64_t
 
tdiff
;

416 
≥rc
;

417 
some_d⁄e
 = 0;

418 
i
;

420 
i
 = 0; i < 
num_thªads
; i++) {

421 
nôems
 +
thªads
[
i
].
ôems
;

422 
some_d⁄e
 = 
thªads
[
i
].
d⁄e
;

423 i‡(
some_d⁄e
)

427 i‡(
some_d⁄e
)

430 
≥rc
 = (Ë
nôems
 / (Ë
tŸÆ
;

431 
≥rc
 *= 100.0;

432 
this_ôems
 = 
nôems
 - 
œ°_nôems
;

433 
this_ôems
 *
blocksize
;

434 
tdiff
 = 
	`mtime_sö˚_now
(&
œ°_tv
);

435 i‡(
tdiff
) {

436 
this_ôems
 = (this_ôem†* 1000Ë/ (
tdiff
 * 1024);

437 
	`¥ötf
("%3.2f%% d⁄ê(%luKiB/£c)\r", 
≥rc
, 
this_ôems
);

438 
œ°_nôems
 = 
nôems
;

439 
	`fio_gëtime
(&
œ°_tv
, 
NULL
);

441 
	`¥ötf
("%3.2f%% d⁄e\r", 
≥rc
);

443 
	`fÊush
(
°dout
);

444 
	`u¶ìp
(250000);

446 
	}
}

448 
	$run_dedu≥_thªads
(
fio_fûe
 *
f
, 
uöt64_t
 
dev_size
,

449 
uöt64_t
 *
√xã¡s
, uöt64_à*
nchunks
,

450 
uöt64_t
 *
unique_ˇ∑côy
)

452 
w‹kî_thªad
 *
thªads
;

453 
nôems
, 
tŸÆ_ôems
;

454 
i
, 
îr
 = 0;

456 
tŸÆ_size
 = 
dev_size
;

457 
tŸÆ_ôems
 = 
dev_size
 / 
blocksize
;

458 
cur_off£t
 = 0;

459 
size_lock
 = 
	`fio_£m_öô
(
FIO_SEM_UNLOCKED
);

461 
thªads
 = 
	`mÆloc
(
num_thªads
 * (
w‹kî_thªad
));

462 
i
 = 0; i < 
num_thªads
; i++) {

463 
	`mem£t
(&
thªads
[
i
], 0, (
w‹kî_thªad
));

464 
thªads
[
i
].
fd
 = 
f
->fd;

466 
îr
 = 
	`±hªad_¸óã
(&
thªads
[
i
].
thªad
, 
NULL
, 
thªad_‚
, &threads[i]);

467 i‡(
îr
) {

468 
	`log_îr
("fio:Åhread startup failed\n");

473 
	`show_¥ogªss
(
thªads
, 
tŸÆ_ôems
);

475 
nôems
 = 0;

476 *
√xã¡s
 = 0;

477 *
nchunks
 = 1;

478 *
unique_ˇ∑côy
 = 0;

479 
i
 = 0; i < 
num_thªads
; i++) {

480 *
ªt
;

481 
	`±hªad_joö
(
thªads
[
i
].
thªad
, &
ªt
);

482 
nôems
 +
thªads
[
i
].
ôems
;

483 *
nchunks
 +
thªads
[
i
].
du≥s
;

484 *
unique_ˇ∑côy
 +
thªads
[
i
].unique_capacity;

487 
	`¥ötf
("Thªads(%u): %lu iãm†¥o˚s£d\n", 
num_thªads
, 
nôems
);

489 *
√xã¡s
 = 
nôems
;

490 *
nchunks
 = 
nôems
 - *nchunks;

492 
	`fio_£m_ªmove
(
size_lock
);

493 
	`‰ì
(
thªads
);

494  
îr
;

495 
	}
}

497 
	$dedu≥_check
(c⁄° *
fûíame
, 
uöt64_t
 *
√xã¡s
,

498 
uöt64_t
 *
nchunks
, uöt64_à*
unique_ˇ∑côy
)

500 
uöt64_t
 
dev_size
;

501 
°©
 
sb
;

502 
Êags
;

504 
Êags
 = 
O_RDONLY
;

505 i‡(
odúe˘
)

506 
Êags
 |
OS_O_DIRECT
;

508 
	`mem£t
(&
fûe
, 0, (file));

509 
fûe
.
fûe_«me
 = 
	`°rdup
(
fûíame
);

511 
fûe
.
fd
 = 
	`›í
(
fûíame
, 
Êags
);

512 i‡(
fûe
.
fd
 == -1) {

513 
	`≥º‹
("open");

514 
îr
;

517 i‡(
	`f°©
(
fûe
.
fd
, &
sb
) < 0) {

518 
	`≥º‹
("fstat");

519 
îr
;

522 
dev_size
 = 
	`gë_size
(&
fûe
, &
sb
);

523 i‡(!
dev_size
)

524 
îr
;

526 i‡(
u£_bloom
) {

527 
uöt64_t
 
bloom_íåõs
;

529 
bloom_íåõs
 = 8 * (
dev_size
 / 
blocksize
);

530 
bloom
 = 
	`bloom_√w
(
bloom_íåõs
);

533 
	`¥ötf
("Wû»check <%s>, sizê<%Œu>, usög %uÅhªads\n", 
fûíame
,

534 (Ë
dev_size
, 
num_thªads
);

536  
	`run_dedu≥_thªads
(&
fûe
, 
dev_size
, 
√xã¡s
, 
nchunks
,

537 
unique_ˇ∑côy
);

538 
îr
:

539 i‡(
fûe
.
fd
 != -1)

540 
	`˛o£
(
fûe
.
fd
);

541 
	`‰ì
(
fûe
.
fûe_«me
);

543 
	}
}

545 
	$show_chunk
(
chunk
 *
c
)

547 
Êi°_hód
 *
n
;

548 
exã¡
 *
e
;

550 
	`¥ötf
("¯hash %8x %8x %8x %8x, cou¡ %lu\n", 
c
->
hash
[0], c->hash[1],

551 
c
->
hash
[2], c->hash[3], (Ëc->
cou¡
);

552 
	`Êi°_f‹_óch
(
n
, &
c
->
exã¡_li°
[0]) {

553 
e
 = 
	`Êi°_íåy
(
n
, 
exã¡
, 
li°
);

554 
	`¥ötf
("\toff£à%Œu\n", (Ë
e
->
off£t
);

556 
	}
}

558 c⁄° *
	gˇ∑côy_unô
[] = {"b","KB", "MB", "GB", "TB", "PB", "EB"};

560 
uöt64_t
 
	$byãs_to_hum™_ªadabÀ_unô
(
uöt64_t
 
n
, c⁄° **
unô_out
)

562 
uöt8_t
 
i
 = 0;

564 
n
 >= 1024) {

565 
i
++;

566 
n
 /= 1024;

569 *
unô_out
 = 
ˇ∑côy_unô
[
i
];

570  
n
;

571 
	}
}

573 
	$show_°©
(
uöt64_t
 
√xã¡s
, uöt64_à
nchunks
, uöt64_à
ndu≥xã¡s
,

574 
uöt64_t
 
unique_ˇ∑côy
)

576 
≥rc
, 
øtio
;

577 c⁄° *
unô
;

578 
uöt64_t
 
uc_hum™
;

580 
	`¥ötf
("Exã¡s=%lu, Uniquêexã¡s=%lu", (Ë
√xã¡s
,

581 (Ë
nchunks
);

582 i‡(!
bloom
)

583 
	`¥ötf
(" Du∂iˇãdÉxã¡s=%lu", (Ë
ndu≥xã¡s
);

584 
	`¥ötf
("\n");

586 i‡(
nchunks
) {

587 
øtio
 = (Ë
√xã¡s
 / (Ë
nchunks
;

588 
	`¥ötf
("De-du≥Ñ©io: 1:%3.2f\n", 
øtio
 - 1.0);

590 
	`¥ötf
("De-dupeÑatio: 1:infinite\n");

593 i‡(
ndu≥xã¡s
) {

594 
	`¥ötf
("De-dupe working setátÜeast: %3.2f%%\n",

595 100.0 * (Ë
ndu≥xã¡s
 / (Ë
√xã¡s
);

598 
≥rc
 = 1.00 - ((Ë
nchunks
 / (Ë
√xã¡s
);

599 
≥rc
 *= 100.0;

600 
	`¥ötf
("Fiÿ£âög: dedu≥_≥r˚¡age=%u\n", (Ë(
≥rc
 + 0.50));

603 i‡(
com¥essi⁄
) {

604 
uc_hum™
 = 
	`byãs_to_hum™_ªadabÀ_unô
(
unique_ˇ∑côy
, &
unô
);

605 
	`¥ötf
("Uniquêˇ∑côy %lu%s\n", (Ë
uc_hum™
, 
unô
);

607 
	}
}

609 
	$ôî_rb_åì
(
uöt64_t
 *
√xã¡s
, uöt64_à*
nchunks
, uöt64_à*
ndu≥xã¡s
)

611 
fio_rb_node
 *
n
;

612 *
nchunks
 = *
√xã¡s
 = *
ndu≥xã¡s
 = 0;

614 
n
 = 
	`rb_fú°
(&
rb_roŸ
);

615 i‡(!
n
)

619 
chunk
 *
c
;

621 
c
 = 
	`rb_íåy
(
n
, 
chunk
, 
rb_node
);

622 (*
nchunks
)++;

623 *
√xã¡s
 +
c
->
cou¡
;

624 *
ndu≥xã¡s
 +(
c
->
cou¡
 > 1);

626 i‡(
dump_ouçut
)

627 
	`show_chunk
(
c
);

629 } (
n
 = 
	`rb_√xt
“)Ë!
NULL
);

630 
	}
}

632 
	$ußge
(*
¨gv
[])

634 
	`log_îr
("Check for dedupable blocks oná device/file\n\n");

635 
	`log_îr
("%s: [›ti⁄s] <devi˚ o∏fûe>\n", 
¨gv
[0]);

636 
	`log_îr
("\t-b\tChunk sizeÅo use\n");

637 
	`log_îr
("\t-t\tNumber ofÅhreadsÅo use\n");

638 
	`log_îr
("\t-d\tFullÉxtent/chunk debug output\n");

639 
	`log_îr
("\t-o\tUse O_DIRECT\n");

640 
	`log_îr
("\t-c\tFull collision check\n");

641 
	`log_îr
("\t-B\tUseÖrobabilistic bloom filter\n");

642 
	`log_îr
("\t-p\tPrintÖrogress indicator\n");

643 
	`log_îr
("\t-C\tCalculate compressible size\n");

645 
	}
}

647 
	$maö
(
¨gc
, *
¨gv
[])

649 
uöt64_t
 
√xã¡s
 = 0, 
nchunks
 = 0, 
ndu≥xã¡s
 = 0, 
unique_ˇ∑côy
;

650 
c
, 
ªt
;

652 
	`¨ch_öô
(
¨gv
);

653 
	`debug_öô
();

655 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "b:t:d:o:c:p:B:C:")) != -1) {

656 
c
) {

658 
blocksize
 = 
	`©oi
(
›èrg
);

661 
num_thªads
 = 
	`©oi
(
›èrg
);

664 
dump_ouçut
 = 
	`©oi
(
›èrg
);

667 
odúe˘
 = 
	`©oi
(
›èrg
);

670 
cﬁlisi⁄_check
 = 
	`©oi
(
›èrg
);

673 
¥öt_¥ogªss
 = 
	`©oi
(
›èrg
);

676 
u£_bloom
 = 
	`©oi
(
›èrg
);

679 
com¥essi⁄
 = 
	`©oi
(
›èrg
);

683  
	`ußge
(
¨gv
);

687 i‡(
cﬁlisi⁄_check
 || 
dump_ouçut
 || 
com¥essi⁄
)

688 
u£_bloom
 = 0;

690 i‡(!
num_thªads
)

691 
num_thªads
 = 
	`˝us_⁄löe
();

693 i‡(
¨gc
 =
›töd
)

694  
	`ußge
(
¨gv
);

696 
	`söô
();

698 
rb_roŸ
 = 
RB_ROOT
;

699 
rb_lock
 = 
	`fio_£m_öô
(
FIO_SEM_UNLOCKED
);

701 
ªt
 = 
	`dedu≥_check
(
¨gv
[
›töd
], &
√xã¡s
, &
nchunks
, &
unique_ˇ∑côy
);

703 i‡(!
ªt
) {

704 i‡(!
bloom
)

705 
	`ôî_rb_åì
(&
√xã¡s
, &
nchunks
, &
ndu≥xã¡s
);

707 
	`show_°©
(
√xã¡s
, 
nchunks
, 
ndu≥xã¡s
, 
unique_ˇ∑côy
);

710 
	`fio_£m_ªmove
(
rb_lock
);

711 i‡(
bloom
)

712 
	`bloom_‰ì
(
bloom
);

713 
	`s˛ónup
();

714  
ªt
;

715 
	}
}

	@t/fuzz/fuzz_parseini.c

1 
	~"fio.h
"

3 
	göôülized
 = 0;

5 c⁄° *c⁄° 
	gÁkórgv
[] = {(*) "fuzz",

10 
	$LLVMFuzzîTe°O√I≈ut
(c⁄° 
uöt8_t
* 
d©a
, 
size_t
 
size
)

12 *
fuzzedöi
;

14 i‡(
size
 < 2)

17 i‡(
öôülized
 == 0) {

18 i‡(
	`fio_öô_›ti⁄s
()) {

19 
	`¥ötf
("Failed fio_init_options\n");

23 
	`∑r£_cmd_löe
(4, (**Ë
Ákórgv
, 0);

24 
	`söô
();

26 
öôülized
 = 1;

28 
fuzzedöi
 = 
	`mÆloc
(
size
);

29 i‡(!
fuzzedöi
) {

30 
	`¥ötf
("Failed malloc\n");

34 
	`mem˝y
(
fuzzedöi
, 
d©a
, 
size
 - 1);

36 
fuzzedöi
[
size
 - 1] = 0;

38 
	`∑r£_jobs_öi
(
fuzzedöi
, 1, 0, 
d©a
[
size
 - 1]);

39 
	`‰ì
(
fuzzedöi
);

41 
	}
}

	@t/fuzz/onefile.c

1 
	~<°döt.h
>

2 
	~<°dlib.h
>

3 
	~<°dio.h
>

5 
LLVMFuzzîTe°O√I≈ut
(c⁄° 
uöt8_t
 *
D©a
, 
size_t
 
Size
);

7 
	$maö
(
¨gc
, ** 
¨gv
)

9 
FILE
 *
Â
;

10 
uöt8_t
 *
d©a
;

11 
size_t
 
size
;

13 i‡(
¨gc
 != 2)

17 
Â
 = 
	`f›í
(
¨gv
[1], "rb");

18 i‡(
Â
 =
NULL
)

21 i‡(
	`f£ek
(
Â
, 0L, 
SEEK_END
) != 0) {

22 
	`f˛o£
(
Â
);

25 
size
 = 
	`·ñl
(
Â
);

26 i‡(
size
 =(
size_t
) -1) {

27 
	`f˛o£
(
Â
);

30 i‡(
	`f£ek
(
Â
, 0L, 
SEEK_SET
) != 0) {

31 
	`f˛o£
(
Â
);

34 
d©a
 = 
	`mÆloc
(
size
);

35 i‡(
d©a
 =
NULL
) {

36 
	`f˛o£
(
Â
);

39 i‡(
	`‰ód
(
d©a
, 
size
, 1, 
Â
) != 1) {

40 
	`f˛o£
(
Â
);

41 
	`‰ì
(
d©a
);

46 
	`LLVMFuzzîTe°O√I≈ut
(
d©a
, 
size
);

47 
	`‰ì
(
d©a
);

48 
	`f˛o£
(
Â
);

51 
	}
}

	@t/gen-rand.c

1 
	~<m©h.h
>

2 
	~<°döt.h
>

3 
	~<°dio.h
>

4 
	~<°dlib.h
>

6 
	~"../lib/ty≥s.h
"

7 
	~"../lib/ønd.h
"

8 
	~"../log.h
"

10 
	$maö
(
¨gc
, *
¨gv
[])

12 
‰™d_°©e
 
s
;

13 
uöt64_t
 
i
, 
°¨t
, 
íd
, 
nvÆues
;

14 *
buckës
, 
ödex
, 
∑ss
, 
Áû
;

15 
p
, 
dev
, 
món
, 
vmö
, 
vmax
;

17 i‡(
¨gc
 < 4) {

18 
	`log_îr
("%s: sèπÉndÇvÆues\n", 
¨gv
[0]);

22 
°¨t
 = 
	`°πoul
(
¨gv
[1], 
NULL
, 10);

23 
íd
 = 
	`°πoul
(
¨gv
[2], 
NULL
, 10);

25 i‡(
°¨t
 >
íd
) {

26 
	`log_îr
("%s: sèπ mu° bêsmÆÀ∏th™Énd\n", 
¨gv
[0]);

29 
ödex
 = 1 + 
íd
 - 
°¨t
;

30 
buckës
 = 
	`ˇŒoc
(
ödex
, ());

32 
nvÆues
 = 
	`°πoul
(
¨gv
[3], 
NULL
, 10);

34 
	`öô_ønd
(&
s
, 
Ál£
);

36 
i
 = 0; i < 
nvÆues
; i++) {

37 
v
 = 
	`ønd_bëwìn
(&
s
, 
°¨t
, 
íd
);

39 
buckës
[
v
 - 
°¨t
]++;

42 
p
 = 1.0 / 
ödex
;

43 
dev
 = 
	`sqπ
(
nvÆues
 * 
p
 * (1.0 -Ö));

44 
món
 = 
nvÆues
 * 
p
;

45 
vmö
 = 
món
 - 
dev
;

46 
vmax
 = 
món
 + 
dev
;

48 
∑ss
 = 
Áû
 = 0;

49 
i
 = 0; i < 
ödex
; i++) {

50 i‡(
buckës
[
i
] < 
vmö
 || buckës[i] > 
vmax
) {

51 
	`¥ötf
("FAIL buckë%4lu: vÆ=%8lu (%.1‡< %.1‡> %.1f)\n", (Ë
i
 + 1, 
buckës
[i], 
vmö
, 
món
, 
vmax
);

52 
Áû
++;

54 
	`¥ötf
("PASS buckë%4lu: vÆ=%8lu (%.1‡< %.1‡> %.1f)\n", (Ë
i
 + 1, 
buckës
[i], 
vmö
, 
món
, 
vmax
);

55 
∑ss
++;

59 
	`¥ötf
("Pas£s=%lu, Faû=%lu\n", 
∑ss
, 
Áû
);

60 
	`‰ì
(
buckës
);

62 
	}
}

	@t/genzipf.c

15 
	~<°dio.h
>

16 
	~<°dlib.h
>

17 
	~<°rög.h
>

18 
	~<uni°d.h
>

20 
	~"../lib/zùf.h
"

21 
	~"../lib/gauss.h
"

22 
	~"../Êi°.h
"

23 
	~"../hash.h
"

25 
	#DEF_NR_OUTPUT
 20

	)

27 
	snode
 {

28 
Êi°_hód
 
	mli°
;

29 
	mvÆ
;

30 
	mhôs
;

33 
Êi°_hód
 *
	ghash
;

34 
	ghash_bôs
 = 24;

35 
	ghash_size
 = 1 << 24;

38 
	mTYPE_NONE
 = 0,

39 
	mTYPE_ZIPF
,

40 
	mTYPE_PARETO
,

41 
	mTYPE_NORMAL
,

43 c⁄° *
	gdi°_ty≥s
[] = { "None", "Zipf", "Pareto", "Normal" };

46 
	mOUTPUT_NORMAL
,

47 
	mOUTPUT_CSV
,

50 
	gdi°_ty≥
 = 
TYPE_ZIPF
;

51 
	ggib_size
 = 500;

52 
	gblock_size
 = 4096;

53 
	gouçut_ƒ™ges
 = 
DEF_NR_OUTPUT
;

54 
	g≥r˚¡age
;

55 
	gdi°_vÆ
;

56 
	gouçut_ty≥
 = 
OUTPUT_NORMAL
;

58 
	#DEF_ZIPF_VAL
 1.2

	)

59 
	#DEF_PARETO_VAL
 0.3

	)

61 
	$hashv
(
vÆ
)

63  
	`jhash
(&
vÆ
, (vÆ), 0Ë& (
hash_size
 - 1);

64 
	}
}

66 
node
 *
	$hash_lookup
(
vÆ
)

68 
Êi°_hód
 *
l
 = &
hash
[
	`hashv
(
vÆ
)];

69 
Êi°_hód
 *
íåy
;

70 
node
 *
n
;

72 
	`Êi°_f‹_óch
(
íåy
, 
l
) {

73 
n
 = 
	`Êi°_íåy
(
íåy
, 
node
, 
li°
);

74 i‡(
n
->
vÆ
 == val)

75  
n
;

78  
NULL
;

79 
	}
}

81 
	$hash_ö£π
(
node
 *
n
, 
vÆ
)

83 
Êi°_hód
 *
l
 = &
hash
[
	`hashv
(
vÆ
)];

85 
n
->
vÆ
 = val;

86 
n
->
hôs
 = 1;

87 
	`Êi°_add_èû
(&
n
->
li°
, 
l
);

88 
	}
}

90 
	$ußge
()

92 
	`¥ötf
("genzipf:Åest zipf/pareto values for fio input\n");

93 
	`¥ötf
("\t-h\tThis help screen\n");

94 
	`¥ötf
("\t-p\tGenerate size of data setÅhatáre hit byÅhisÖercentage\n");

95 
	`¥ötf
("\t-t\tDistributionÅype (zipf,Öareto, orÇormal)\n");

96 
	`¥ötf
("\t-i\tDistributionálgorithm input (zipfÅheta,ÖaretoÖower,\n"

98 
	`¥ötf
("\t-b\tBlock size ofá givenÑange (in bytes)\n");

99 
	`¥ötf
("\t-g\tSize of data set (in gigabytes)\n");

100 
	`¥ötf
("\t-o\tNumber of outputÑows\n");

101 
	`¥ötf
("\t-c\tOutputÑanges in CSV format\n");

102 
	}
}

104 
	$∑r£_›ti⁄s
(
¨gc
, *
¨gv
[])

106 c⁄° *
›t°rög
 = "t:g:i:o:b:p:ch";

107 
c
, 
di°_vÆ_£t
 = 0;

109 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, 
›t°rög
)) != -1) {

110 
c
) {

112 
	`ußge
();

115 
≥r˚¡age
 = 
	`©of
(
›èrg
);

118 
block_size
 = 
	`°πoul
(
›èrg
, 
NULL
, 10);

121 i‡(!
	`°∫cmp
(
›èrg
, "zipf", 4))

122 
di°_ty≥
 = 
TYPE_ZIPF
;

123 i‡(!
	`°∫cmp
(
›èrg
, "pareto", 6))

124 
di°_ty≥
 = 
TYPE_PARETO
;

125 i‡(!
	`°∫cmp
(
›èrg
, "normal", 6))

126 
di°_ty≥
 = 
TYPE_NORMAL
;

128 
	`¥ötf
("wr⁄g di°Åy≥: %s\n", 
›èrg
);

133 
gib_size
 = 
	`°πoul
(
›èrg
, 
NULL
, 10);

136 
di°_vÆ
 = 
	`©of
(
›èrg
);

137 
di°_vÆ_£t
 = 1;

140 
ouçut_ƒ™ges
 = 
	`°πoul
(
›èrg
, 
NULL
, 10);

143 
ouçut_ty≥
 = 
OUTPUT_CSV
;

146 
	`¥ötf
("bad o±i⁄ %c\n", 
c
);

151 i‡(
di°_ty≥
 =
TYPE_PARETO
) {

152 i‡((
di°_vÆ
 >= 1.00 || dist_val < 0.00)) {

153 
	`¥ötf
("pareto input must be > 0.00ánd < 1.00\n");

156 i‡(!
di°_vÆ_£t
)

157 
di°_vÆ
 = 
DEF_PARETO_VAL
;

158 } i‡(
di°_ty≥
 =
TYPE_ZIPF
) {

159 i‡(
di°_vÆ
 == 1.0) {

160 
	`¥ötf
("zipf input must be differentÅhan 1.0\n");

163 i‡(!
di°_vÆ_£t
)

164 
di°_vÆ
 = 
DEF_ZIPF_VAL
;

168 
	}
}

170 
	souçut_sum
 {

171 
	mouçut
;

172 
	mƒ™ges
;

175 
	$node_cmp
(c⁄° *
p1
, c⁄° *
p2
)

177 c⁄° 
node
 *
n1
 = 
p1
;

178 c⁄° 
node
 *
n2
 = 
p2
;

180  
n2
->
hôs
 - 
n1
->hits;

181 
	}
}

183 
	$ouçut_csv
(
node
 *
nodes
, 
¬odes
)

185 
i
;

187 
	`¥ötf
("rank, count\n");

188 
i
 = 0; i < 
¬odes
; i++)

189 
	`¥ötf
("%lu, %lu\n", 
i
, 
nodes
[i].
hôs
);

190 
	}
}

192 
	$ouçut_n‹mÆ
(
node
 *
nodes
, 
¬odes
,

193 
ƒ™ges
)

195 
i
, 
j
, 
cur_vÆs
, 
öãrvÆ_°ï
, 
√xt_öãrvÆ
, 
tŸÆ_vÆs
;

196 
blocks
 = 
≥r˚¡age
 * 
¬odes
 / 100;

197 
hô_≥r˚¡_sum
 = 0;

198 
hô_sum
 = 0;

199 
≥rc
, 
≥rc_i
;

200 
ouçut_sum
 *
ouçut_sums
;

202 
öãrvÆ_°ï
 = (
¬odes
 - 1Ë/ 
ouçut_ƒ™ges
 + 1;

203 
√xt_öãrvÆ
 = 
öãrvÆ_°ï
;

204 
ouçut_sums
 = 
	`mÆloc
(
ouçut_ƒ™ges
 * (
ouçut_sum
));

206 
i
 = 0; i < 
ouçut_ƒ™ges
; i++) {

207 
ouçut_sums
[
i
].
ouçut
 = 0.0;

208 
ouçut_sums
[
i
].
ƒ™ges
 = 0;

211 
j
 = 
tŸÆ_vÆs
 = 
cur_vÆs
 = 0;

213 
i
 = 0; i < 
¬odes
; i++) {

214 
ouçut_sum
 *
os
 = &
ouçut_sums
[
j
];

215 
node
 *nodê&
nodes
[
i
];

216 
cur_vÆs
 +
node
->
hôs
;

217 
tŸÆ_vÆs
 +
node
->
hôs
;

218 
os
->
ƒ™ges
 +
node
->
hôs
;

219 i‡(
i
 =(
√xt_öãrvÆ
Ë-1 || i =
¬odes
 - 1) {

220 
os
->
ouçut
 = (Ë
cur_vÆs
 / (Ë
ƒ™ges
;

221 
os
->
ouçut
 *= 100.0;

222 
cur_vÆs
 = 0;

223 
√xt_öãrvÆ
 +
öãrvÆ_°ï
;

224 
j
++;

227 i‡(
≥r˚¡age
) {

228 i‡(
tŸÆ_vÆs
 >
blocks
) {

229 
cs
 = (Ë
i
 * 
block_size
 / (1024.0 * 1024.0);

230 
p
 = 'M';

232 i‡(
cs
 > 1024.0) {

233 
cs
 /= 1024.0;

234 
p
 = 'G';

236 i‡(
cs
 > 1024.0) {

237 
cs
 /= 1024.0;

238 
p
 = 'T';

241 
	`¥ötf
("%.2f%% o‡hô†ßtisfõd i¿%.3f%cB o‡ˇche\n", 
≥r˚¡age
, 
cs
, 
p
);

242 
≥r˚¡age
 = 0.0;

247 
≥rc_i
 = 100.0 / ()
ouçut_ƒ™ges
;

248 
≥rc
 = 0.0;

250 
	`¥ötf
("\n Rows Hits %% Sum %% # Hits Size\n");

251 
	`¥ötf
("-----------------------------------------------------------------------\n");

252 
i
 = 0; i < 
ouçut_ƒ™ges
; i++) {

253 
ouçut_sum
 *
os
 = &
ouçut_sums
[
i
];

254 
gb
 = ()
os
->
ƒ™ges
 * 
block_size
 / 1024.0;

255 
p
 = 'K';

257 i‡(
gb
 > 1024.0) {

258 
p
 = 'M';

259 
gb
 /= 1024.0;

261 i‡(
gb
 > 1024.0) {

262 
p
 = 'G';

263 
gb
 /= 1024.0;

266 
≥rc
 +
≥rc_i
;

267 
hô_≥r˚¡_sum
 +
os
->
ouçut
;

268 
hô_sum
 +
os
->
ƒ™ges
;

269 
	`¥ötf
("%s %6.2f%%\t%6.2f%%\t\t%6.2f%%\t\t%8u\t%6.2f%c\n",

270 
i
 ? "|->" : "T›", 
≥rc
, 
os
->
ouçut
, 
hô_≥r˚¡_sum
,

271 
os
->
ƒ™ges
, 
gb
, 
p
);

274 
	`¥ötf
("-----------------------------------------------------------------------\n");

275 
	`¥ötf
("TŸÆ\t\t\t\t\t\t%8Œu\n", 
hô_sum
);

276 
	`‰ì
(
ouçut_sums
);

277 
	}
}

279 
	$maö
(
¨gc
, *
¨gv
[])

281 
off£t
;

282 
ƒ™ges
;

283 
¬odes
;

284 
node
 *
nodes
;

285 
zùf_°©e
 
zs
;

286 
gauss_°©e
 
gs
;

287 
i
, 
j
;

289 i‡(
	`∑r£_›ti⁄s
(
¨gc
, 
¨gv
))

292 i‡(
ouçut_ty≥
 !
OUTPUT_CSV
)

293 
	`¥ötf
("Generating %s distribution with %f inputánd %lu GiB sizeánd %lu block_size.\n",

294 
di°_ty≥s
[
di°_ty≥
], 
di°_vÆ
, 
gib_size
, 
block_size
);

296 
ƒ™ges
 = 
gib_size
 * 1024 * 1024 * 1024ULL;

297 
ƒ™ges
 /
block_size
;

299 i‡(
di°_ty≥
 =
TYPE_ZIPF
)

300 
	`zùf_öô
(&
zs
, 
ƒ™ges
, 
di°_vÆ
, -1, 1);

301 i‡(
di°_ty≥
 =
TYPE_PARETO
)

302 
	`∑ªto_öô
(&
zs
, 
ƒ™ges
, 
di°_vÆ
, -1, 1);

304 
	`gauss_öô
(&
gs
, 
ƒ™ges
, 
di°_vÆ
, -1, 1);

306 
hash_bôs
 = 0;

307 
hash_size
 = 
ƒ™ges
;

308 (
hash_size
 >>= 1) != 0)

309 
hash_bôs
++;

311 
hash_size
 = 1 << 
hash_bôs
;

313 
hash
 = 
	`ˇŒoc
(
hash_size
, (
Êi°_hód
));

314 
i
 = 0; i < 
hash_size
; i++)

315 
	`INIT_FLIST_HEAD
(&
hash
[
i
]);

317 
nodes
 = 
	`mÆloc
(
ƒ™ges
 * (
node
));

319 
i
 = 
j
 = 0; i < 
ƒ™ges
; i++) {

320 
node
 *
n
;

322 i‡(
di°_ty≥
 =
TYPE_ZIPF
)

323 
off£t
 = 
	`zùf_√xt
(&
zs
);

324 i‡(
di°_ty≥
 =
TYPE_PARETO
)

325 
off£t
 = 
	`∑ªto_√xt
(&
zs
);

327 
off£t
 = 
	`gauss_√xt
(&
gs
);

329 
n
 = 
	`hash_lookup
(
off£t
);

330 i‡(
n
)

331 
n
->
hôs
++;

333 
	`hash_ö£π
(&
nodes
[
j
], 
off£t
);

334 
j
++;

338 
	`qs‹t
(
nodes
, 
j
, (
node
), 
node_cmp
);

339 
¬odes
 = 
j
;

341 i‡(
ouçut_ty≥
 =
OUTPUT_CSV
)

342 
	`ouçut_csv
(
nodes
, 
¬odes
);

344 
	`ouçut_n‹mÆ
(
nodes
, 
¬odes
, 
ƒ™ges
);

346 
	`‰ì
(
hash
);

347 
	`‰ì
(
nodes
);

349 
	}
}

	@t/ieee754.c

1 
	~<°dio.h
>

2 
	~"../lib/õì754.h
"

4 
	gvÆues
[] = { -17.23, 17.23, 123.4567, 98765.4321,

7 
	$maö
(
¨gc
, *
¨gv
[])

9 
uöt64_t
 
i
;

10 
f
, 
dñè
;

11 
j
, 
dif„ªn˚s
 = 0;

13 
j
 = 0;

15 
i
 = 
	`fio_doubÀ_to_uöt64
(
vÆues
[
j
]);

16 
f
 = 
	`fio_uöt64_to_doubÀ
(
i
);

17 
dñè
 = 
vÆues
[
j
] - 
f
;

18 
	`¥ötf
("%26.20l‡-> %26.20lf, dñè = %26.20lf\n", 
vÆues
[
j
],

19 
f
, 
dñè
);

20 i‡(
f
 !
vÆues
[
j
])

21 
dif„ªn˚s
++;

22 
j
++;

23 } 
vÆues
[
j
] != 0.0);

25  
dif„ªn˚s
;

26 
	}
}

	@t/io_uring.c

1 
	~<°dio.h
>

2 
	~<î∫o.h
>

3 
	~<as£π.h
>

4 
	~<°dlib.h
>

5 
	~<°ddef.h
>

6 
	~<sig«l.h
>

7 
	~<öây≥s.h
>

8 
	~<m©h.h
>

10 #ifde‡
CONFIG_LIBAIO


11 
	~<libaio.h
>

14 #ifde‡
CONFIG_LIBNUMA


15 
	~<numa.h
>

18 
	~<sys/ty≥s.h
>

19 
	~<sys/°©.h
>

20 
	~<sys/io˘l.h
>

21 
	~<sys/sysˇŒ.h
>

22 
	~<sys/ªsour˚.h
>

23 
	~<sys/mm™.h
>

24 
	~<sys/uio.h
>

25 
	~<löux/fs.h
>

26 
	~<f˙é.h
>

27 
	~<uni°d.h
>

28 
	~<°rög.h
>

29 
	~<±hªad.h
>

30 
	~<sched.h
>

32 
	~"../¨ch/¨ch.h
"

33 
	~"../os/os.h
"

34 
	~"../lib/ty≥s.h
"

35 
	~"../lib/roundup.h
"

36 
	~"../lib/ønd.h
"

37 
	~"../mömax.h
"

38 
	~"../os/löux/io_urög.h
"

39 
	~"../ígöes/nvme.h
"

41 
	sio_sq_rög
 {

42 *
	mhód
;

43 *
	mèû
;

44 *
	mrög_mask
;

45 *
	mrög_íåõs
;

46 *
	mÊags
;

47 *
	m¨øy
;

50 
	sio_cq_rög
 {

51 *
	mhód
;

52 *
	mèû
;

53 *
	mrög_mask
;

54 *
	mrög_íåõs
;

55 
io_urög_cqe
 *
	mcqes
;

58 
	#DEPTH
 128

	)

59 
	#BATCH_SUBMIT
 32

	)

60 
	#BATCH_COMPLETE
 32

	)

61 
	#BS
 4096

	)

63 
	#MAX_FDS
 16

	)

65 
	gsq_rög_mask
, 
	gcq_rög_mask
;

67 
	sfûe
 {

68 
	mmax_blocks
;

69 
	mmax_size
;

70 
	mcur_off
;

71 
	m≥ndög_ios
;

72 
	mnsid
;

73 
	mlba_shi·
;

74 
	mªÆ_fd
;

75 
	mfixed_fd
;

76 
	mfûío
;

79 
	#PLAT_BITS
 6

	)

80 
	#PLAT_VAL
 (1 << 
PLAT_BITS
)

	)

81 
	#PLAT_GROUP_NR
 29

	)

82 
	#PLAT_NR
 (
PLAT_GROUP_NR
 * 
PLAT_VAL
)

	)

84 
	ssubmôãr
 {

85 
±hªad_t
 
	mthªad
;

86 
	mrög_fd
;

87 
	míãr_rög_fd
;

88 
	mödex
;

89 
io_sq_rög
 
	msq_rög
;

90 
io_urög_sqe
 *
	msqes
;

91 
io_cq_rög
 
	mcq_rög
;

92 
	möÊight
;

93 
	mtid
;

94 
	mª≠s
;

95 
	md⁄e
;

96 
	mˇŒs
;

97 vﬁ©ûê
	mföish
;

99 
__s32
 *
	mfds
;

101 
èus258_°©e
 
	mønd_°©e
;

103 *
	m˛ock_b©ch
;

104 
	m˛ock_ödex
;

105 *
	m∂©
;

107 #ifde‡
CONFIG_LIBAIO


108 
io_c⁄ãxt_t
 
	maio_˘x
;

111 
	mnuma_node
;

112 c⁄° *
	mfûíame
;

114 
fûe
 
	mfûes
[
MAX_FDS
];

115 
	mƒ_fûes
;

116 
	mcur_fûe
;

117 
iovec
 
	miovecs
[];

120 
submôãr
 *
	gsubmôãr
;

121 vﬁ©ûê
	gföish
;

122 
	g°©s_ru¬ög
;

123 
	gmax_i›s
;

124 
	gt_io_urög_∑ge_size
;

126 
	gdïth
 = 
DEPTH
;

127 
	gb©ch_submô
 = 
BATCH_SUBMIT
;

128 
	gb©ch_com∂ëe
 = 
BATCH_COMPLETE
;

129 
	gbs
 = 
BS
;

130 
	gpﬁÀd
 = 1;

131 
	gfixedbufs
 = 1;

132 
	gdma_m≠
;

133 
	gªgi°î_fûes
 = 1;

134 
	gbuf„ªd
 = 0;

135 
	gsq_thªad_pﬁl
 = 0;

136 
	gsq_thªad_˝u
 = -1;

137 
	gdo_n›
 = 0;

138 
	g¡hªads
 = 1;

139 
	g°©s
 = 0;

140 
	gaio
 = 0;

141 
	gru¡ime
 = 0;

142 
	gøndom_io
 = 1;

143 
	gªgi°î_rög
 = 1;

144 
	gu£_sync
 = 0;

145 
	gnuma_∂a˚mít
 = 0;

146 
	g±
 = 0;

148 
	gtsc_øã
;

150 
	#TSC_RATE_FILE
 "tsc-øã"

	)

152 
	gve˘‹ed
 = 1;

154 
	g∂i°
[] = { 1.0, 5.0, 10.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0,

156 
	g∂i°_Àn
 = 17;

158 #i‚de‡
IORING_REGISTER_MAP_BUFFERS


159 
	#IORING_REGISTER_MAP_BUFFERS
 22

	)

160 
	sio_urög_m≠_buf„rs
 {

161 
__s32
 
	mfd
;

162 
__u32
 
	mbuf_°¨t
;

163 
__u32
 
	mbuf_íd
;

164 
__u32
 
	mÊags
;

165 
__u64
 
	mrsvd
[2];

169 
	$nvme_idítify
(
fd
, 
__u32
 
nsid
, 
nvme_idítify_˙s
 
˙s
,

170 
nvme_csi
 
csi
, *
d©a
)

172 
nvme_∑s°hru_cmd
 
cmd
 = {

173 .
›code
 = 
nvme_admö_idítify
,

174 .
nsid
 =Çsid,

175 .
addr
 = (
__u64
)(
uöçå_t
)
d©a
,

176 .
d©a_Àn
 = 
NVME_IDENTIFY_DATA_SIZE
,

177 .
cdw10
 = 
˙s
,

178 .
cdw11
 = 
csi
 << 
NVME_IDENTIFY_CSI_SHIFT
,

179 .
timeout_ms
 = 
NVME_DEFAULT_IOCTL_TIMEOUT
,

182  
	`io˘l
(
fd
, 
NVME_IOCTL_ADMIN_CMD
, &
cmd
);

183 
	}
}

185 
	$nvme_gë_öfo
(
fd
, 
__u32
 *
nsid
, __u32 *
lba_sz
, 
__u64
 *
∆ba
)

187 
nvme_id_ns
 
ns
;

188 
«me•a˚_id
;

189 
îr
;

191 
«me•a˚_id
 = 
	`io˘l
(
fd
, 
NVME_IOCTL_ID
);

192 i‡(
«me•a˚_id
 < 0) {

193 
	`Ârötf
(
°dîr
, "error failedÅo fetchÇamespace-id\n");

194 
	`˛o£
(
fd
);

195  -
î∫o
;

202 
îr
 = 
	`nvme_idítify
(
fd
, 
«me•a˚_id
, 
NVME_IDENTIFY_CNS_NS
,

203 
NVME_CSI_NVM
, &
ns
);

204 i‡(
îr
) {

205 
	`Ârötf
(
°dîr
, "error failedÅo fetch identifyÇamespace\n");

206 
	`˛o£
(
fd
);

207  
îr
;

210 *
nsid
 = 
«me•a˚_id
;

211 *
lba_sz
 = 1 << 
ns
.
lbaf
[“s.
Êbas
 & 0x0f)].
ds
;

212 *
∆ba
 = 
ns
.
nsze
;

215 
	}
}

217 
	$cy˛es_to_n£c
(
cy˛es
)

219 
uöt64_t
 
vÆ
;

221 i‡(!
tsc_øã
)

222  
cy˛es
;

224 
vÆ
 = 
cy˛es
 * 1000000000ULL;

225  
vÆ
 / 
tsc_øã
;

226 
	}
}

228 
	$∂©_idx_to_vÆ
(
idx
)

230 
îr‹_bôs
;

231 
k
, 
ba£
;

233 
	`as£π
(
idx
 < 
PLAT_NR
);

237 i‡(
idx
 < (
PLAT_VAL
 << 1))

238  
	`cy˛es_to_n£c
(
idx
);

241 
îr‹_bôs
 = (
idx
 >> 
PLAT_BITS
) - 1;

242 
ba£
 = ((Ë1Ë<< (
îr‹_bôs
 + 
PLAT_BITS
);

245 
k
 = 
idx
 % 
PLAT_VAL
;

248  
	`cy˛es_to_n£c
(
ba£
 + ((
k
 + 0.5Ë* (1 << 
îr‹_bôs
)));

249 
	}
}

251 
	$ˇlcuœã_˛©_≥r˚¡ûes
(*
io_u_∂©
,

252 
ƒ
, **
ouçut
,

253 *
maxv
, *
möv
)

255 
sum
 = 0;

256 
Àn
 = 
∂i°_Àn
, 
i
, 
j
 = 0;

257 *
ovÆs
 = 
NULL
;

258 
boﬁ
 
is_œ°
;

260 *
möv
 = -1UL;

261 *
maxv
 = 0;

263 
ovÆs
 = 
	`mÆloc
(
Àn
 * (*ovals));

264 i‡(!
ovÆs
)

270 
is_œ°
 = 
Ál£
;

271 
i
 = 0; i < 
PLAT_NR
 && !
is_œ°
; i++) {

272 
sum
 +
io_u_∂©
[
i
];

273 
sum
 >((Ë
∂i°
[
j
] / 100.0 * 
ƒ
)) {

274 
	`as£π
(
∂i°
[
j
] <= 100.0);

276 
ovÆs
[
j
] = 
	`∂©_idx_to_vÆ
(
i
);

277 i‡(
ovÆs
[
j
] < *
möv
)

278 *
möv
 = 
ovÆs
[
j
];

279 i‡(
ovÆs
[
j
] > *
maxv
)

280 *
maxv
 = 
ovÆs
[
j
];

282 
is_œ°
 = (
j
 =
Àn
 - 1) != 0;

283 i‡(
is_œ°
)

286 
j
++;

290 i‡(!
is_œ°
)

291 
	`Ârötf
(
°dîr
, "error calculatingÜatencyÖercentiles\n");

293 *
ouçut
 = 
ovÆs
;

294  
Àn
;

295 
	}
}

297 
	$show_˛©_≥r˚¡ûes
(*
io_u_∂©
, 
ƒ
,

298 
¥ecisi⁄
)

300 
divis‹
, 
Àn
, 
i
, 
j
 = 0;

301 
möv
, 
maxv
;

302 *
ovÆs
;

303 
≥r_löe
, 
sˇÀ_down
, 
time_width
;

304 
boﬁ
 
is_œ°
;

305 
fmt
[32];

307 
Àn
 = 
	`ˇlcuœã_˛©_≥r˚¡ûes
(
io_u_∂©
, 
ƒ
, &
ovÆs
, &
maxv
, &
möv
);

308 i‡(!
Àn
 || !
ovÆs
)

309 
out
;

311 i‡(!
tsc_øã
) {

312 
sˇÀ_down
 = 0;

313 
divis‹
 = 1;

314 
	`¥ötf
("Öercentiles (tscÅicks):\n |");

315 } i‡(
möv
 > 2000 && 
maxv
 > 99999) {

316 
sˇÀ_down
 = 1;

317 
divis‹
 = 1000;

318 
	`¥ötf
("Öercentiles (usec):\n |");

320 
sˇÀ_down
 = 0;

321 
divis‹
 = 1;

322 
	`¥ötf
("Öercentiles (nsec):\n |");

325 
time_width
 = 
	`max
(5, (Ë(
	`log10
(
maxv
 / 
divis‹
) + 1));

326 
	`¢¥ötf
(
fmt
, (fmt), " %%%u.%u·h=[%%%dŒu]%%c", 
¥ecisi⁄
 + 3,

327 
¥ecisi⁄
, 
time_width
);

329 
≥r_löe
 = (80 - 7Ë/ (
¥ecisi⁄
 + 10 + 
time_width
);

331 
j
 = 0; j < 
Àn
; j++) {

333 i‡(
j
 !0 && (j % 
≥r_löe
) == 0)

334 
	`¥ötf
(" |");

337 
is_œ°
 = (
j
 =
Àn
 - 1) != 0;

339 
i
 = 0; i < 
sˇÀ_down
; i++)

340 
ovÆs
[
j
] = (ovals[j] + 999) / 1000;

342 
	`¥ötf
(
fmt
, 
∂i°
[
j
], 
ovÆs
[j], 
is_œ°
 ? '\n' : ',');

344 i‡(
is_œ°
)

347 i‡((
j
 % 
≥r_löe
) ==Öer_line - 1)

348 
	`¥ötf
("\n");

351 
out
:

352 
	`‰ì
(
ovÆs
);

353 
	}
}

355 #ifde‡
ARCH_HAVE_CPU_CLOCK


356 
	$∂©_vÆ_to_idx
(
vÆ
)

358 
msb
, 
îr‹_bôs
, 
ba£
, 
off£t
, 
idx
;

361 i‡(
vÆ
 == 0)

362 
msb
 = 0;

364 
msb
 = ((
vÆ
)*8Ë- 
	`__buûtö_˛zŒ
(val) - 1;

370 i‡(
msb
 <
PLAT_BITS
)

371  
vÆ
;

374 
îr‹_bôs
 = 
msb
 - 
PLAT_BITS
;

377 
ba£
 = (
îr‹_bôs
 + 1Ë<< 
PLAT_BITS
;

383 
off£t
 = (
PLAT_VAL
 - 1Ë& (
vÆ
 >> 
îr‹_bôs
);

386 
idx
 = (
ba£
 + 
off£t
Ë< (
PLAT_NR
 - 1) ?

387 (
ba£
 + 
off£t
Ë: (
PLAT_NR
 - 1);

389  
idx
;

390 
	}
}

393 
	$add_°©
(
submôãr
 *
s
, 
˛ock_ödex
, 
ƒ
)

395 #ifde‡
ARCH_HAVE_CPU_CLOCK


396 
cy˛es
;

397 
pidx
;

399 i‡(!
s
->
föish
 && 
˛ock_ödex
) {

400 
cy˛es
 = 
	`gë_˝u_˛ock
();

401 
cy˛es
 -
s
->
˛ock_b©ch
[
˛ock_ödex
];

402 
pidx
 = 
	`∂©_vÆ_to_idx
(
cy˛es
);

403 
s
->
∂©
[
pidx
] +
ƒ
;

406 
	}
}

408 
	$io_urög_m≠_buf„rs
(
submôãr
 *
s
)

410 
io_urög_m≠_buf„rs
 
m≠
 = {

411 .
fd
 = 
s
->
fûes
[0].
ªÆ_fd
,

412 .
buf_íd
 = 
dïth
,

415 i‡(
do_n›
)

417 i‡(
s
->
ƒ_fûes
 > 1)

418 
	`Ârötf
(
°dout
, "Mapping buffers mayÇot work with multiple files\n");

420  
	`sysˇŒ
(
__NR_io_urög_ªgi°î
, 
s
->
rög_fd
,

421 
IORING_REGISTER_MAP_BUFFERS
, &
m≠
, 1);

422 
	}
}

424 
	$io_urög_ªgi°î_buf„rs
(
submôãr
 *
s
)

426 i‡(
do_n›
)

429  
	`sysˇŒ
(
__NR_io_urög_ªgi°î
, 
s
->
rög_fd
,

430 
IORING_REGISTER_BUFFERS
, 
s
->
iovecs
, 
	`roundup_pow2
(
dïth
));

431 
	}
}

433 
	$io_urög_ªgi°î_fûes
(
submôãr
 *
s
)

435 
i
;

437 i‡(
do_n›
)

440 
s
->
fds
 = 
	`ˇŒoc
(s->
ƒ_fûes
, (
__s32
));

441 
i
 = 0; i < 
s
->
ƒ_fûes
; i++) {

442 
s
->
fds
[
i
] = s->
fûes
[i].
ªÆ_fd
;

443 
s
->
fûes
[
i
].
fixed_fd
 = i;

446  
	`sysˇŒ
(
__NR_io_urög_ªgi°î
, 
s
->
rög_fd
,

447 
IORING_REGISTER_FILES
, 
s
->
fds
, s->
ƒ_fûes
);

448 
	}
}

450 
	$io_urög_£tup
(
íåõs
, 
io_urög_∑øms
 *
p
)

452 
ªt
;

458 
p
->
Êags
 |
IORING_SETUP_CQSIZE
;

459 
p
->
cq_íåõs
 = 
íåõs
;

461 
p
->
Êags
 |
IORING_SETUP_COOP_TASKRUN
;

462 
p
->
Êags
 |
IORING_SETUP_SINGLE_ISSUER
;

463 
p
->
Êags
 |
IORING_SETUP_DEFER_TASKRUN
;

464 
ªåy
:

465 
ªt
 = 
	`sysˇŒ
(
__NR_io_urög_£tup
, 
íåõs
, 
p
);

466 i‡(!
ªt
)

469 i‡(
î∫o
 =
EINVAL
 && 
p
->
Êags
 & 
IORING_SETUP_COOP_TASKRUN
) {

470 
p
->
Êags
 &~
IORING_SETUP_COOP_TASKRUN
;

471 
ªåy
;

473 i‡(
î∫o
 =
EINVAL
 && 
p
->
Êags
 & 
IORING_SETUP_SINGLE_ISSUER
) {

474 
p
->
Êags
 &~
IORING_SETUP_SINGLE_ISSUER
;

475 
ªåy
;

477 i‡(
î∫o
 =
EINVAL
 && 
p
->
Êags
 & 
IORING_SETUP_DEFER_TASKRUN
) {

478 
p
->
Êags
 &~
IORING_SETUP_DEFER_TASKRUN
;

479 
ªåy
;

482  
ªt
;

483 
	}
}

485 
	$io_urög_¥obe
(
fd
)

487 
io_urög_¥obe
 *
p
;

488 
ªt
;

490 
p
 = 
	`mÆloc
((*pË+ 256 * (
io_urög_¥obe_›
));

491 i‡(!
p
)

494 
	`mem£t
(
p
, 0, (*pË+ 256 * (
io_urög_¥obe_›
));

495 
ªt
 = 
	`sysˇŒ
(
__NR_io_urög_ªgi°î
, 
fd
, 
IORING_REGISTER_PROBE
, 
p
, 256);

496 i‡(
ªt
 < 0)

497 
out
;

499 i‡(
IORING_OP_READ
 > 
p
->
›s_Àn
)

500 
out
;

502 i‡((
p
->
›s
[
IORING_OP_READ
].
Êags
 & 
IO_URING_OP_SUPPORTED
))

503 
ve˘‹ed
 = 0;

504 
out
:

505 
	`‰ì
(
p
);

506 
	}
}

508 
	$io_urög_íãr
(
submôãr
 *
s
, 
to_submô
,

509 
mö_com∂ëe
, 
Êags
)

511 i‡(
ªgi°î_rög
)

512 
Êags
 |
IORING_ENTER_REGISTERED_RING
;

513 #ifde‡
FIO_ARCH_HAS_SYSCALL


514  
	`__do_sysˇŒ6
(
__NR_io_urög_íãr
, 
s
->
íãr_rög_fd
, 
to_submô
,

515 
mö_com∂ëe
, 
Êags
, 
NULL
, 0);

517  
	`sysˇŒ
(
__NR_io_urög_íãr
, 
s
->
íãr_rög_fd
, 
to_submô
,

518 
mö_com∂ëe
, 
Êags
, 
NULL
, 0);

520 
	}
}

522 
	$fûe_dïth
(
submôãr
 *
s
)

524  (
dïth
 + 
s
->
ƒ_fûes
 - 1) / s->nr_files;

525 
	}
}

527 
	$gë_off£t
(
submôãr
 *
s
, 
fûe
 *
f
)

529 
off£t
;

530 
r
;

532 i‡(
øndom_io
) {

533 
r
 = 
	`__ønd64
(&
s
->
ønd_°©e
);

534 
off£t
 = (
r
 % (
f
->
max_blocks
 - 1)Ë* 
bs
;

536 
off£t
 = 
f
->
cur_off
;

537 
f
->
cur_off
 +
bs
;

538 i‡(
f
->
cur_off
 + 
bs
 > f->
max_size
)

539 
f
->
cur_off
 = 0;

542  
off£t
;

543 
	}
}

545 
	$öô_io
(
submôãr
 *
s
, 
ödex
)

547 
io_urög_sqe
 *
sqe
 = &
s
->
sqes
[
ödex
];

548 
fûe
 *
f
;

550 i‡(
do_n›
) {

551 
sqe
->
›code
 = 
IORING_OP_NOP
;

555 i‡(
s
->
ƒ_fûes
 == 1) {

556 
f
 = &
s
->
fûes
[0];

558 
f
 = &
s
->
fûes
[s->
cur_fûe
];

559 i‡(
f
->
≥ndög_ios
 >
	`fûe_dïth
(
s
)) {

560 
s
->
cur_fûe
++;

561 i‡(
s
->
cur_fûe
 =s->
ƒ_fûes
)

562 
s
->
cur_fûe
 = 0;

563 
f
 = &
s
->
fûes
[s->
cur_fûe
];

566 
f
->
≥ndög_ios
++;

568 i‡(
ªgi°î_fûes
) {

569 
sqe
->
Êags
 = 
IOSQE_FIXED_FILE
;

570 
sqe
->
fd
 = 
f
->
fixed_fd
;

572 
sqe
->
Êags
 = 0;

573 
sqe
->
fd
 = 
f
->
ªÆ_fd
;

575 i‡(
fixedbufs
) {

576 
sqe
->
›code
 = 
IORING_OP_READ_FIXED
;

577 
sqe
->
addr
 = (Ë
s
->
iovecs
[
ödex
].
iov_ba£
;

578 
sqe
->
Àn
 = 
bs
;

579 
sqe
->
buf_ödex
 = 
ödex
;

580 } i‡(!
ve˘‹ed
) {

581 
sqe
->
›code
 = 
IORING_OP_READ
;

582 
sqe
->
addr
 = (Ë
s
->
iovecs
[
ödex
].
iov_ba£
;

583 
sqe
->
Àn
 = 
bs
;

584 
sqe
->
buf_ödex
 = 0;

586 
sqe
->
›code
 = 
IORING_OP_READV
;

587 
sqe
->
addr
 = (Ë&
s
->
iovecs
[
ödex
];

588 
sqe
->
Àn
 = 1;

589 
sqe
->
buf_ödex
 = 0;

591 
sqe
->
i›rio
 = 0;

592 
sqe
->
off
 = 
	`gë_off£t
(
s
, 
f
);

593 
sqe
->
u£r_d©a
 = (Ë
f
->
fûío
;

594 i‡(
°©s
 && 
°©s_ru¬ög
)

595 
sqe
->
u£r_d©a
 |((
uöt64_t
)
s
->
˛ock_ödex
 << 32);

596 
	}
}

598 
	$öô_io_±
(
submôãr
 *
s
, 
ödex
)

600 
io_urög_sqe
 *
sqe
 = &
s
->
sqes
[
ödex
 << 1];

601 
off£t
;

602 
fûe
 *
f
;

603 
nvme_urög_cmd
 *
cmd
;

604 
¶ba
;

605 
∆b
;

606 
r
;

608 i‡(
s
->
ƒ_fûes
 == 1) {

609 
f
 = &
s
->
fûes
[0];

611 
f
 = &
s
->
fûes
[s->
cur_fûe
];

612 i‡(
f
->
≥ndög_ios
 >
	`fûe_dïth
(
s
)) {

613 
s
->
cur_fûe
++;

614 i‡(
s
->
cur_fûe
 =s->
ƒ_fûes
)

615 
s
->
cur_fûe
 = 0;

616 
f
 = &
s
->
fûes
[s->
cur_fûe
];

619 
f
->
≥ndög_ios
++;

621 i‡(
øndom_io
) {

622 
r
 = 
	`__ønd64
(&
s
->
ønd_°©e
);

623 
off£t
 = (
r
 % (
f
->
max_blocks
 - 1)Ë* 
bs
;

625 
off£t
 = 
f
->
cur_off
;

626 
f
->
cur_off
 +
bs
;

627 i‡(
f
->
cur_off
 + 
bs
 > f->
max_size
)

628 
f
->
cur_off
 = 0;

631 i‡(
ªgi°î_fûes
) {

632 
sqe
->
fd
 = 
f
->
fixed_fd
;

633 
sqe
->
Êags
 = 
IOSQE_FIXED_FILE
;

635 
sqe
->
fd
 = 
f
->
ªÆ_fd
;

636 
sqe
->
Êags
 = 0;

638 
sqe
->
›code
 = 
IORING_OP_URING_CMD
;

639 
sqe
->
u£r_d©a
 = (Ë
f
->
fûío
;

640 i‡(
°©s
)

641 
sqe
->
u£r_d©a
 |((
__u64
Ë
s
->
˛ock_ödex
 << 32ULL);

642 
sqe
->
cmd_›
 = 
NVME_URING_CMD_IO
;

643 
¶ba
 = 
off£t
 >> 
f
->
lba_shi·
;

644 
∆b
 = (
bs
 >> 
f
->
lba_shi·
) - 1;

645 
cmd
 = (
nvme_urög_cmd
 *)&
sqe
->cmd;

647 
cmd
->
cdw10
 = 
¶ba
 & 0xffffffff;

648 
cmd
->
cdw11
 = 
¶ba
 >> 32;

650 
cmd
->
cdw12
 = 
∆b
;

651 
cmd
->
addr
 = (Ë
s
->
iovecs
[
ödex
].
iov_ba£
;

652 
cmd
->
d©a_Àn
 = 
bs
;

653 i‡(
fixedbufs
) {

654 
sqe
->
urög_cmd_Êags
 = 
IORING_URING_CMD_FIXED
;

655 
sqe
->
buf_ödex
 = 
ödex
;

657 
cmd
->
nsid
 = 
f
->nsid;

658 
cmd
->
›code
 = 2;

659 
	}
}

661 
	$¥ï_m‹e_ios_urög
(
submôãr
 *
s
, 
max_ios
)

663 
io_sq_rög
 *
rög
 = &
s
->
sq_rög
;

664 
hód
, 
ödex
, 
èû
, 
√xt_èû
, 
¥ï≥d
 = 0;

666 i‡(
sq_thªad_pﬁl
)

667 
hód
 = 
	`©omic_lﬂd_acquúe
(
rög
->head);

669 
hód
 = *
rög
->head;

671 
√xt_èû
 = 
èû
 = *
rög
->tail;

673 
√xt_èû
++;

674 i‡(
√xt_èû
 =
hód
)

677 
ödex
 = 
èû
 & 
sq_rög_mask
;

678 i‡(
±
)

679 
	`öô_io_±
(
s
, 
ödex
);

681 
	`öô_io
(
s
, 
ödex
);

682 
¥ï≥d
++;

683 
èû
 = 
√xt_èû
;

684 } 
¥ï≥d
 < 
max_ios
);

686 i‡(
¥ï≥d
)

687 
	`©omic_°‹e_ªÀa£
(
rög
->
èû
,Åail);

688  
¥ï≥d
;

689 
	}
}

691 
	$gë_fûe_size
(
fûe
 *
f
)

693 
°©
 
°
;

695 i‡(
	`f°©
(
f
->
ªÆ_fd
, &
°
) < 0)

697 i‡(
±
) {

698 
__u64
 
∆ba
;

699 
__u32
 
lbs
;

700 
ªt
;

702 i‡(!
	`S_ISCHR
(
°
.
°_mode
)) {

703 
	`Ârötf
(
°dîr
, "passthrough works with onlyÇvme-ns "

707 
ªt
 = 
	`nvme_gë_öfo
(
f
->
ªÆ_fd
, &f->
nsid
, &
lbs
, &
∆ba
);

708 i‡(
ªt
)

710 i‡((
bs
 % 
lbs
) != 0) {

711 
	`¥ötf
("error: bs:%d should beá multipleÜogical_block_size:%d\n",

712 
bs
, 
lbs
);

715 
f
->
max_blocks
 = 
∆ba
 / 
bs
;

716 
f
->
max_size
 = 
∆ba
;

717 
f
->
lba_shi·
 = 
	`ûog2
(
lbs
);

719 } i‡(
	`S_ISBLK
(
°
.
°_mode
)) {

720 
byãs
;

722 i‡(
	`io˘l
(
f
->
ªÆ_fd
, 
BLKGETSIZE64
, &
byãs
) != 0)

725 
f
->
max_blocks
 = 
byãs
 / 
bs
;

726 
f
->
max_size
 = 
byãs
;

728 } i‡(
	`S_ISREG
(
°
.
°_mode
)) {

729 
f
->
max_blocks
 = 
°
.
°_size
 / 
bs
;

730 
f
->
max_size
 = 
°
.
°_size
;

735 
	}
}

737 
	$ª≠_evíts_urög
(
submôãr
 *
s
)

739 
io_cq_rög
 *
rög
 = &
s
->
cq_rög
;

740 
io_urög_cqe
 *
cqe
;

741 
hód
, 
ª≠ed
 = 0;

742 
œ°_idx
 = -1, 
°©_ƒ
 = 0;

744 
hód
 = *
rög
->head;

746 
fûe
 *
f
;

748 i‡(
hód
 =
	`©omic_lﬂd_acquúe
(
rög
->
èû
))

750 
cqe
 = &
rög
->
cqes
[
hód
 & 
cq_rög_mask
];

751 i‡(!
do_n›
) {

752 
fûío
 = 
cqe
->
u£r_d©a
 & 0xffffffff;

754 
f
 = &
s
->
fûes
[
fûío
];

755 
f
->
≥ndög_ios
--;

756 i‡(
cqe
->
ªs
 !
bs
) {

757 
	`¥ötf
("io: u√x≥˘edÑë=%d\n", 
cqe
->
ªs
);

758 i‡(
pﬁÀd
 && 
cqe
->
ªs
 =-
EOPNOTSUPP
)

759 
	`¥ötf
("Your filesystem/driver/kernel doesn't supportÖolled IO\n");

763 i‡(
°©s
) {

764 
˛ock_ödex
 = 
cqe
->
u£r_d©a
 >> 32;

766 i‡(
œ°_idx
 !
˛ock_ödex
) {

767 i‡(
œ°_idx
 != -1) {

768 
	`add_°©
(
s
, 
œ°_idx
, 
°©_ƒ
);

769 
°©_ƒ
 = 0;

771 
œ°_idx
 = 
˛ock_ödex
;

773 
°©_ƒ
++;

775 
ª≠ed
++;

776 
hód
++;

779 i‡(
°©_ƒ
)

780 
	`add_°©
(
s
, 
œ°_idx
, 
°©_ƒ
);

782 i‡(
ª≠ed
) {

783 
s
->
öÊight
 -
ª≠ed
;

784 
	`©omic_°‹e_ªÀa£
(
rög
->
hód
, head);

786  
ª≠ed
;

787 
	}
}

789 
	$ª≠_evíts_urög_±
(
submôãr
 *
s
)

791 
io_cq_rög
 *
rög
 = &
s
->
cq_rög
;

792 
io_urög_cqe
 *
cqe
;

793 
hód
, 
ª≠ed
 = 0;

794 
œ°_idx
 = -1, 
°©_ƒ
 = 0;

795 
ödex
;

796 
fûío
;

798 
hód
 = *
rög
->head;

800 
fûe
 *
f
;

802 i‡(
hód
 =
	`©omic_lﬂd_acquúe
(
rög
->
èû
))

804 
ödex
 = 
hód
 & 
cq_rög_mask
;

805 
cqe
 = &
rög
->
cqes
[
ödex
 << 1];

806 
fûío
 = 
cqe
->
u£r_d©a
 & 0xffffffff;

807 
f
 = &
s
->
fûes
[
fûío
];

808 
f
->
≥ndög_ios
--;

810 i‡(
cqe
->
ªs
 != 0) {

811 
	`¥ötf
("io: u√x≥˘edÑë=%d\n", 
cqe
->
ªs
);

812 i‡(
pﬁÀd
 && 
cqe
->
ªs
 =-
EINVAL
)

813 
	`¥ötf
("passthrough doesn't supportÖolled IO\n");

816 i‡(
°©s
) {

817 
˛ock_ödex
 = 
cqe
->
u£r_d©a
 >> 32;

819 i‡(
œ°_idx
 !
˛ock_ödex
) {

820 i‡(
œ°_idx
 != -1) {

821 
	`add_°©
(
s
, 
œ°_idx
, 
°©_ƒ
);

822 
°©_ƒ
 = 0;

824 
œ°_idx
 = 
˛ock_ödex
;

826 
°©_ƒ
++;

828 
ª≠ed
++;

829 
hód
++;

832 i‡(
°©_ƒ
)

833 
	`add_°©
(
s
, 
œ°_idx
, 
°©_ƒ
);

835 i‡(
ª≠ed
) {

836 
s
->
öÊight
 -
ª≠ed
;

837 
	`©omic_°‹e_ªÀa£
(
rög
->
hód
, head);

839  
ª≠ed
;

840 
	}
}

842 
	$£t_afföôy
(
submôãr
 *
s
)

844 #ifde‡
CONFIG_LIBNUMA


845 
bômask
 *
mask
;

847 i‡(
s
->
numa_node
 == -1)

850 
	`numa_£t_¥e„ºed
(
s
->
numa_node
);

852 
mask
 = 
	`numa_Æloˇã_˝umask
();

853 
	`numa_node_to_˝us
(
s
->
numa_node
, 
mask
);

854 
	`numa_sched_£èfföôy
(
s
->
tid
, 
mask
);

856 
	}
}

858 
	$dëe˘_node
(
submôãr
 *
s
, c⁄° *
«me
)

860 #ifde‡
CONFIG_LIBNUMA


861 c⁄° *
ba£
 = 
	`ba£«me
(
«me
);

862 
°r
[128];

863 
ªt
, 
fd
, 
node
;

865 i‡(
±
)

866 
	`•rötf
(
°r
, "/sys/˛ass/nvme-gíîic/%s/devi˚/numa_node", 
ba£
);

868 
	`•rötf
(
°r
, "/sys/block/%s/devi˚/numa_node", 
ba£
);

869 
fd
 = 
	`›í
(
°r
, 
O_RDONLY
);

870 i‡(
fd
 < 0)

873 
ªt
 = 
	`ªad
(
fd
, 
°r
, (str));

874 i‡(
ªt
 < 0) {

875 
	`˛o£
(
fd
);

878 
node
 = 
	`©oi
(
°r
);

879 
s
->
numa_node
 = 
node
;

880 
	`˛o£
(
fd
);

882 
s
->
numa_node
 = -1;

885 
	}
}

887 
	$£tup_aio
(
submôãr
 *
s
)

889 #ifde‡
CONFIG_LIBAIO


890 i‡(
pﬁÀd
) {

891 
	`Ârötf
(
°dîr
, "aio doesÇot supportÖolled IO\n");

892 
pﬁÀd
 = 0;

894 i‡(
sq_thªad_pﬁl
) {

895 
	`Ârötf
(
°dîr
, "aio doesÇot support SQPOLL IO\n");

896 
sq_thªad_pﬁl
 = 0;

898 i‡(
do_n›
) {

899 
	`Ârötf
(
°dîr
, "aio doesÇot supportÖolled IO\n");

900 
do_n›
 = 0;

902 i‡(
fixedbufs
 || 
ªgi°î_fûes
) {

903 
	`Ârötf
(
°dîr
, "aio doesÇot supportÑegistered files or buffers\n");

904 
fixedbufs
 = 
ªgi°î_fûes
 = 0;

907  
	`io_queue_öô
(
	`roundup_pow2
(
dïth
), &
s
->
aio_˘x
);

909 
	`Ârötf
(
°dîr
, "Legacy AIOÇotávailable onÅhis system/build\n");

910 
î∫o
 = 
EINVAL
;

913 
	}
}

915 
	$£tup_rög
(
submôãr
 *
s
)

917 
io_sq_rög
 *
§ög
 = &
s
->
sq_rög
;

918 
io_cq_rög
 *
¸ög
 = &
s
->
cq_rög
;

919 
io_urög_∑øms
 
p
;

920 
ªt
, 
fd
, 
i
;

921 *
±r
;

922 
size_t
 
Àn
;

924 
	`mem£t
(&
p
, 0, (p));

926 i‡(
pﬁÀd
 && !
do_n›
)

927 
p
.
Êags
 |
IORING_SETUP_IOPOLL
;

928 i‡(
sq_thªad_pﬁl
) {

929 
p
.
Êags
 |
IORING_SETUP_SQPOLL
;

930 i‡(
sq_thªad_˝u
 != -1) {

931 
p
.
Êags
 |
IORING_SETUP_SQ_AFF
;

932 
p
.
sq_thªad_˝u
 = sq_thread_cpu;

935 i‡(
±
) {

936 
p
.
Êags
 |
IORING_SETUP_SQE128
;

937 
p
.
Êags
 |
IORING_SETUP_CQE32
;

940 
fd
 = 
	`io_urög_£tup
(
dïth
, &
p
);

941 i‡(
fd
 < 0) {

942 
	`≥º‹
("io_uring_setup");

945 
s
->
rög_fd
 = s->
íãr_rög_fd
 = 
fd
;

947 
	`io_urög_¥obe
(
fd
);

949 i‡(
fixedbufs
) {

950 
æimô
 
æim
;

952 
æim
.
æim_cur
 = 
RLIM_INFINITY
;

953 
æim
.
æim_max
 = 
RLIM_INFINITY
;

955 
	`£ålimô
(
RLIMIT_MEMLOCK
, &
æim
);

957 
ªt
 = 
	`io_urög_ªgi°î_buf„rs
(
s
);

958 i‡(
ªt
 < 0) {

959 
	`≥º‹
("io_uring_register_buffers");

963 i‡(
dma_m≠
) {

964 
ªt
 = 
	`io_urög_m≠_buf„rs
(
s
);

965 i‡(
ªt
 < 0) {

966 
	`≥º‹
("io_uring_map_buffers");

972 i‡(
ªgi°î_fûes
) {

973 
ªt
 = 
	`io_urög_ªgi°î_fûes
(
s
);

974 i‡(
ªt
 < 0) {

975 
	`≥º‹
("io_uring_register_files");

980 
±r
 = 
	`mm≠
(0, 
p
.
sq_off
.
¨øy
 +Ö.
sq_íåõs
 * (
__u32
),

981 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
 | 
MAP_POPULATE
, 
fd
,

982 
IORING_OFF_SQ_RING
);

983 
§ög
->
hód
 = 
±r
 + 
p
.
sq_off
.head;

984 
§ög
->
èû
 = 
±r
 + 
p
.
sq_off
.tail;

985 
§ög
->
rög_mask
 = 
±r
 + 
p
.
sq_off
.ring_mask;

986 
§ög
->
rög_íåõs
 = 
±r
 + 
p
.
sq_off
.ring_entries;

987 
§ög
->
Êags
 = 
±r
 + 
p
.
sq_off
.flags;

988 
§ög
->
¨øy
 = 
±r
 + 
p
.
sq_off
.array;

989 
sq_rög_mask
 = *
§ög
->
rög_mask
;

991 i‡(
p
.
Êags
 & 
IORING_SETUP_SQE128
)

992 
Àn
 = 2 * 
p
.
sq_íåõs
 * (
io_urög_sqe
);

994 
Àn
 = 
p
.
sq_íåõs
 * (
io_urög_sqe
);

995 
s
->
sqes
 = 
	`mm≠
(0, 
Àn
,

996 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
 | 
MAP_POPULATE
, 
fd
,

997 
IORING_OFF_SQES
);

999 i‡(
p
.
Êags
 & 
IORING_SETUP_CQE32
) {

1000 
Àn
 = 
p
.
cq_off
.
cqes
 +

1001 2 * 
p
.
cq_íåõs
 * (
io_urög_cqe
);

1003 
Àn
 = 
p
.
cq_off
.
cqes
 +

1004 
p
.
cq_íåõs
 * (
io_urög_cqe
);

1006 
±r
 = 
	`mm≠
(0, 
Àn
,

1007 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
 | 
MAP_POPULATE
, 
fd
,

1008 
IORING_OFF_CQ_RING
);

1009 
¸ög
->
hód
 = 
±r
 + 
p
.
cq_off
.head;

1010 
¸ög
->
èû
 = 
±r
 + 
p
.
cq_off
.tail;

1011 
¸ög
->
rög_mask
 = 
±r
 + 
p
.
cq_off
.ring_mask;

1012 
¸ög
->
rög_íåõs
 = 
±r
 + 
p
.
cq_off
.ring_entries;

1013 
¸ög
->
cqes
 = 
±r
 + 
p
.
cq_off
.cqes;

1014 
cq_rög_mask
 = *
¸ög
->
rög_mask
;

1016 
i
 = 0; i < 
p
.
sq_íåõs
; i++)

1017 
§ög
->
¨øy
[
i
] = i;

1020 
	}
}

1022 *
	$Æloˇã_mem
(
submôãr
 *
s
, 
size
)

1024 *
buf
;

1026 #ifde‡
CONFIG_LIBNUMA


1027 i‡(
s
->
numa_node
 != -1)

1028  
	`numa_Æloc_⁄node
(
size
, 
s
->
numa_node
);

1031 i‡(
	`posix_memÆign
(&
buf
, 
t_io_urög_∑ge_size
, 
bs
)) {

1032 
	`¥ötf
("failedálloc\n");

1033  
NULL
;

1036  
buf
;

1037 
	}
}

1039 
	$submôãr_öô
(
submôãr
 *
s
)

1041 
i
, 
ƒ_b©ch
, 
îr
;

1042 
öô_¥öãd
;

1043 
buf
[80];

1044 
s
->
tid
 = 
	`gëtid
();

1045 
	`¥ötf
("submôãr=%d,Åid=%d, fûe=%s,Çode=%d\n", 
s
->
ödex
, s->
tid
,

1046 
s
->
fûíame
, s->
numa_node
);

1048 
	`£t_afföôy
(
s
);

1050 
	`__öô_ønd64
(&
s
->
ønd_°©e
, s->
tid
);

1051 
	`§™d48
(
s
->
tid
);

1053 
i
 = 0; i < 
MAX_FDS
; i++)

1054 
s
->
fûes
[
i
].
fûío
 = i;

1056 
i
 = 0; i < 
	`roundup_pow2
(
dïth
); i++) {

1057 *
buf
;

1059 
buf
 = 
	`Æloˇã_mem
(
s
, 
bs
);

1060 i‡(!
buf
)

1062 
s
->
iovecs
[
i
].
iov_ba£
 = 
buf
;

1063 
s
->
iovecs
[
i
].
iov_Àn
 = 
bs
;

1066 i‡(
u£_sync
) {

1067 
	`•rötf
(
buf
, "Engine=preadv2\n");

1068 
îr
 = 0;

1069 } i‡(!
aio
) {

1070 
îr
 = 
	`£tup_rög
(
s
);

1071 
	`•rötf
(
buf
, "Engöe=io_urög, sq_rög=%d, cq_rög=%d\n", *
s
->
sq_rög
.
rög_íåõs
, *s->
cq_rög
.ring_entries);

1073 
	`•rötf
(
buf
, "Engine=aio\n");

1074 
îr
 = 
	`£tup_aio
(
s
);

1076 i‡(
îr
) {

1077 
	`¥ötf
("queuê£tu∞Áûed: %s, %d\n", 
	`°ªº‹
(
î∫o
), 
îr
);

1081 i‡(!
öô_¥öãd
) {

1082 
	`¥ötf
("pﬁÀd=%d, fixedbufs=%d/%d,Ñegi°î_fûes=%d, buf„ªd=%d, QD=%d\n", 
pﬁÀd
, 
fixedbufs
, 
dma_m≠
, 
ªgi°î_fûes
, 
buf„ªd
, 
dïth
);

1083 
	`¥ötf
("%s", 
buf
);

1084 
öô_¥öãd
 = 1;

1087 i‡(
°©s
) {

1088 
ƒ_b©ch
 = 
	`roundup_pow2
(
dïth
 / 
b©ch_submô
);

1089 i‡(
ƒ_b©ch
 < 2)

1090 
ƒ_b©ch
 = 2;

1091 
s
->
˛ock_b©ch
 = 
	`ˇŒoc
(
ƒ_b©ch
, ());

1092 
s
->
˛ock_ödex
 = 1;

1094 
s
->
∂©
 = 
	`ˇŒoc
(
PLAT_NR
, ());

1096 
s
->
˛ock_b©ch
 = 
NULL
;

1097 
s
->
∂©
 = 
NULL
;

1098 
ƒ_b©ch
 = 0;

1103 i‡(
±
) {

1104 
i
 = 0; i < 
	`roundup_pow2
(
dïth
); i++) {

1105 
io_urög_sqe
 *
sqe
 = &
s
->
sqes
[
i
 << 1];

1107 
	`mem£t
(&
sqe
->
cmd
, 0, (
nvme_urög_cmd
));

1110  
ƒ_b©ch
;

1111 
	}
}

1113 #ifde‡
CONFIG_LIBAIO


1114 
	$¥ï_m‹e_ios_aio
(
submôãr
 *
s
, 
max_ios
, 
iocb
 *
iocbs
)

1116 
uöt64_t
 
d©a
;

1117 
fûe
 *
f
;

1118 
ödex
;

1120 
ödex
 = 0;

1121 
ödex
 < 
max_ios
) {

1122 
iocb
 *iocb = &
iocbs
[
ödex
];

1124 i‡(
s
->
ƒ_fûes
 == 1) {

1125 
f
 = &
s
->
fûes
[0];

1127 
f
 = &
s
->
fûes
[s->
cur_fûe
];

1128 i‡(
f
->
≥ndög_ios
 >
	`fûe_dïth
(
s
)) {

1129 
s
->
cur_fûe
++;

1130 i‡(
s
->
cur_fûe
 =s->
ƒ_fûes
)

1131 
s
->
cur_fûe
 = 0;

1132 
f
 = &
s
->
fûes
[s->
cur_fûe
];

1135 
f
->
≥ndög_ios
++;

1137 
	`io_¥ï_¥ód
(
iocb
, 
f
->
ªÆ_fd
, 
s
->
iovecs
[
ödex
].
iov_ba£
,

1138 
s
->
iovecs
[
ödex
].
iov_Àn
, 
	`gë_off£t
(s, 
f
));

1140 
d©a
 = 
f
->
fûío
;

1141 i‡(
°©s
 && 
°©s_ru¬ög
)

1142 
d©a
 |(((
uöt64_t
Ë
s
->
˛ock_ödex
) << 32);

1143 
iocb
->
d©a
 = (*Ë(
uöçå_t
) data;

1144 
ödex
++;

1146  
ödex
;

1147 
	}
}

1149 
	$ª≠_evíts_aio
(
submôãr
 *
s
, 
io_evít
 *
evíts
, 
evs
)

1151 
œ°_idx
 = -1, 
°©_ƒ
 = 0;

1152 
ª≠ed
 = 0;

1154 
evs
) {

1155 
uöt64_t
 
d©a
 = (
uöçå_t
Ë
evíts
[
ª≠ed
].data;

1156 
fûe
 *
f
 = &
s
->
fûes
[
d©a
 & 0xffffffff];

1158 
f
->
≥ndög_ios
--;

1159 i‡(
evíts
[
ª≠ed
].
ªs
 !
bs
) {

1160 
	`¥ötf
("io: u√x≥˘edÑë=%ld\n", 
evíts
[
ª≠ed
].
ªs
);

1163 i‡(
°©s
) {

1164 
˛ock_ödex
 = 
d©a
 >> 32;

1166 i‡(
œ°_idx
 !
˛ock_ödex
) {

1167 i‡(
œ°_idx
 != -1) {

1168 
	`add_°©
(
s
, 
œ°_idx
, 
°©_ƒ
);

1169 
°©_ƒ
 = 0;

1171 
œ°_idx
 = 
˛ock_ödex
;

1173 
°©_ƒ
++;

1175 
ª≠ed
++;

1176 
evs
--;

1179 i‡(
°©_ƒ
)

1180 
	`add_°©
(
s
, 
œ°_idx
, 
°©_ƒ
);

1182 
s
->
öÊight
 -
ª≠ed
;

1183 
s
->
d⁄e
 +
ª≠ed
;

1184  
ª≠ed
;

1185 
	}
}

1187 *
	$submôãr_aio_‚
(*
d©a
)

1189 
submôãr
 *
s
 = 
d©a
;

1190 
i
, 
ªt
, 
¥ï≥d
;

1191 
iocb
 **
iocb•å
;

1192 
iocb
 *
iocbs
;

1193 
io_evít
 *
evíts
;

1194 #ifde‡
ARCH_HAVE_CPU_CLOCK


1195 
ƒ_b©ch
 = 
	`submôãr_öô
(
s
);

1197 
	`submôãr_öô
(
s
);

1200 
iocb•å
 = 
	`ˇŒoc
(
dïth
, (
iocb
 *));

1201 
iocbs
 = 
	`ˇŒoc
(
dïth
, (
iocb
));

1202 
evíts
 = 
	`ˇŒoc
(
dïth
, (
io_evít
));

1204 
i
 = 0; i < 
dïth
; i++)

1205 
iocb•å
[
i
] = &
iocbs
[i];

1207 
¥ï≥d
 = 0;

1209 
to_waô
, 
to_submô
, 
to_¥ï
;

1211 i‡(!
¥ï≥d
 && 
s
->
öÊight
 < 
dïth
) {

1212 
to_¥ï
 = 
	`mö
(
dïth
 - 
s
->
öÊight
, 
b©ch_submô
);

1213 
¥ï≥d
 = 
	`¥ï_m‹e_ios_aio
(
s
, 
to_¥ï
, 
iocbs
);

1214 #ifde‡
ARCH_HAVE_CPU_CLOCK


1215 i‡(
¥ï≥d
 && 
°©s
) {

1216 
s
->
˛ock_b©ch
[s->
˛ock_ödex
] = 
	`gë_˝u_˛ock
();

1217 
s
->
˛ock_ödex
 = (s->˛ock_ödex + 1Ë& (
ƒ_b©ch
 - 1);

1221 
s
->
öÊight
 +
¥ï≥d
;

1222 
to_submô
 = 
¥ï≥d
;

1224 i‡(
to_submô
 && (
s
->
öÊight
 +Åo_submô <
dïth
))

1225 
to_waô
 = 0;

1227 
to_waô
 = 
	`mö
(
s
->
öÊight
 + 
to_submô
, 
b©ch_com∂ëe
);

1229 
ªt
 = 
	`io_submô
(
s
->
aio_˘x
, 
to_submô
, 
iocb•å
);

1230 
s
->
ˇŒs
++;

1231 i‡(
ªt
 < 0) {

1232 
	`≥º‹
("io_submit");

1234 } i‡(
ªt
 !
to_submô
) {

1235 
	`¥ötf
("submôãd %d, w™ãd %d\n", 
ªt
, 
to_submô
);

1238 
¥ï≥d
 = 0;

1240 
to_waô
) {

1241 
r
;

1243 
s
->
ˇŒs
++;

1244 
r
 = 
	`io_gëevíts
(
s
->
aio_˘x
, 
to_waô
,Åo_waô, 
evíts
, 
NULL
);

1245 i‡(
r
 < 0) {

1246 
	`≥º‹
("io_getevents");

1248 } i‡(
r
 !
to_waô
) {

1249 
	`¥ötf
("r=%d, waô=%d\n", 
r
, 
to_waô
);

1252 
r
 = 
	`ª≠_evíts_aio
(
s
, 
evíts
,Ñ);

1253 
s
->
ª≠s
 +
r
;

1254 
to_waô
 -
r
;

1256 } !
s
->
föish
);

1258 
	`‰ì
(
iocb•å
);

1259 
	`‰ì
(
iocbs
);

1260 
	`‰ì
(
evíts
);

1261 
föish
 = 1;

1262  
NULL
;

1263 
	}
}

1266 
	$io_urög_uƒegi°î_rög
(
submôãr
 *
s
)

1268 
io_urög_r§c_upd©e
 
up
 = {

1269 .
off£t
 = 
s
->
íãr_rög_fd
,

1272 
	`sysˇŒ
(
__NR_io_urög_ªgi°î
, 
s
->
rög_fd
, 
IORING_UNREGISTER_RING_FDS
,

1273 &
up
, 1);

1274 
	}
}

1276 
	$io_urög_ªgi°î_rög
(
submôãr
 *
s
)

1278 
io_urög_r§c_upd©e
 
up
 = {

1279 .
d©a
 = 
s
->
rög_fd
,

1280 .
off£t
 = -1U,

1282 
ªt
;

1284 
ªt
 = 
	`sysˇŒ
(
__NR_io_urög_ªgi°î
, 
s
->
rög_fd
,

1285 
IORING_REGISTER_RING_FDS
, &
up
, 1);

1286 i‡(
ªt
 == 1) {

1287 
s
->
íãr_rög_fd
 = 
up
.
off£t
;

1290 
ªgi°î_rög
 = 0;

1292 
	}
}

1294 *
	$submôãr_urög_‚
(*
d©a
)

1296 
submôãr
 *
s
 = 
d©a
;

1297 
io_sq_rög
 *
rög
 = &
s
->
sq_rög
;

1298 
ªt
, 
¥ï≥d
;

1299 #ifde‡
ARCH_HAVE_CPU_CLOCK


1300 
ƒ_b©ch
 = 
	`submôãr_öô
(
s
);

1302 
	`submôãr_öô
(
s
);

1305 i‡(
ªgi°î_rög
)

1306 
	`io_urög_ªgi°î_rög
(
s
);

1308 
¥ï≥d
 = 0;

1310 
to_waô
, 
to_submô
, 
this_ª≠
, 
to_¥ï
;

1311 
rög_Êags
 = 0;

1313 i‡(!
¥ï≥d
 && 
s
->
öÊight
 < 
dïth
) {

1314 
to_¥ï
 = 
	`mö
(
dïth
 - 
s
->
öÊight
, 
b©ch_submô
);

1315 
¥ï≥d
 = 
	`¥ï_m‹e_ios_urög
(
s
, 
to_¥ï
);

1316 #ifde‡
ARCH_HAVE_CPU_CLOCK


1317 i‡(
¥ï≥d
 && 
°©s
) {

1318 
s
->
˛ock_b©ch
[s->
˛ock_ödex
] = 
	`gë_˝u_˛ock
();

1319 
s
->
˛ock_ödex
 = (s->˛ock_ödex + 1Ë& (
ƒ_b©ch
 - 1);

1323 
s
->
öÊight
 +
¥ï≥d
;

1324 
submô_m‹e
:

1325 
to_submô
 = 
¥ï≥d
;

1326 
submô
:

1327 i‡(
to_submô
 && (
s
->
öÊight
 +Åo_submô <
dïth
))

1328 
to_waô
 = 0;

1330 
to_waô
 = 
	`mö
(
s
->
öÊight
 + 
to_submô
, 
b©ch_com∂ëe
);

1336 i‡(
sq_thªad_pﬁl
)

1337 
rög_Êags
 = 
	`©omic_lﬂd_acquúe
(
rög
->
Êags
);

1338 i‡(!
sq_thªad_pﬁl
 || 
rög_Êags
 & 
IORING_SQ_NEED_WAKEUP
) {

1339 
Êags
 = 0;

1341 i‡(
to_waô
)

1342 
Êags
 = 
IORING_ENTER_GETEVENTS
;

1343 i‡(
rög_Êags
 & 
IORING_SQ_NEED_WAKEUP
)

1344 
Êags
 |
IORING_ENTER_SQ_WAKEUP
;

1345 
ªt
 = 
	`io_urög_íãr
(
s
, 
to_submô
, 
to_waô
, 
Êags
);

1346 
s
->
ˇŒs
++;

1349 
ªt
 = 
to_submô
;

1357 
this_ª≠
 = 0;

1359 
r
;

1361 i‡(
±
)

1362 
r
 = 
	`ª≠_evíts_urög_±
(
s
);

1364 
r
 = 
	`ª≠_evíts_urög
(
s
);

1365 i‡(
r
 == -1) {

1366 
s
->
föish
 = 1;

1368 } i‡(
r
 > 0)

1369 
this_ª≠
 +
r
;

1370 } 
sq_thªad_pﬁl
 && 
this_ª≠
 < 
to_waô
);

1371 
s
->
ª≠s
 +
this_ª≠
;

1373 i‡(
ªt
 >= 0) {

1374 i‡(!
ªt
) {

1375 
to_submô
 = 0;

1376 i‡(
s
->
öÊight
)

1377 
submô
;

1379 } i‡(
ªt
 < 
to_submô
) {

1380 
diff
 = 
to_submô
 - 
ªt
;

1382 
s
->
d⁄e
 +
ªt
;

1383 
¥ï≥d
 -
diff
;

1384 
submô_m‹e
;

1386 
s
->
d⁄e
 +
ªt
;

1387 
¥ï≥d
 = 0;

1389 } i‡(
ªt
 < 0) {

1390 i‡(
î∫o
 =
EAGAIN
) {

1391 i‡(
s
->
föish
)

1393 i‡(
this_ª≠
)

1394 
submô
;

1395 
to_submô
 = 0;

1396 
submô
;

1398 
	`¥ötf
("io_submô: %s\n", 
	`°ªº‹
(
î∫o
));

1401 } !
s
->
föish
);

1403 i‡(
ªgi°î_rög
)

1404 
	`io_urög_uƒegi°î_rög
(
s
);

1406 
föish
 = 1;

1407  
NULL
;

1408 
	}
}

1410 #ifde‡
CONFIG_PWRITEV2


1411 *
	$submôãr_sync_‚
(*
d©a
)

1413 
submôãr
 *
s
 = 
d©a
;

1414 
ªt
;

1416 
	`submôãr_öô
(
s
);

1419 
uöt64_t
 
off£t
;

1420 
fûe
 *
f
;

1422 i‡(
s
->
ƒ_fûes
 == 1) {

1423 
f
 = &
s
->
fûes
[0];

1425 
f
 = &
s
->
fûes
[s->
cur_fûe
];

1426 i‡(
f
->
≥ndög_ios
 >
	`fûe_dïth
(
s
)) {

1427 
s
->
cur_fûe
++;

1428 i‡(
s
->
cur_fûe
 =s->
ƒ_fûes
)

1429 
s
->
cur_fûe
 = 0;

1430 
f
 = &
s
->
fûes
[s->
cur_fûe
];

1433 
f
->
≥ndög_ios
++;

1435 #ifde‡
ARCH_HAVE_CPU_CLOCK


1436 i‡(
°©s
)

1437 
s
->
˛ock_b©ch
[s->
˛ock_ödex
] = 
	`gë_˝u_˛ock
();

1440 
s
->
öÊight
++;

1441 
s
->
ˇŒs
++;

1443 
off£t
 = 
	`gë_off£t
(
s
, 
f
);

1444 i‡(
pﬁÀd
)

1445 
ªt
 = 
	`¥ódv2
(
f
->
ªÆ_fd
, &
s
->
iovecs
[0], 1, 
off£t
, 
RWF_HIPRI
);

1447 
ªt
 = 
	`¥ódv2
(
f
->
ªÆ_fd
, &
s
->
iovecs
[0], 1, 
off£t
, 0);

1449 i‡(
ªt
 < 0) {

1450 
	`≥º‹
("preadv2");

1452 } i‡(
ªt
 !
bs
) {

1456 
s
->
d⁄e
++;

1457 
s
->
öÊight
--;

1458 
f
->
≥ndög_ios
--;

1459 i‡(
°©s
)

1460 
	`add_°©
(
s
, s->
˛ock_ödex
, 1);

1461 } !
s
->
föish
);

1463 
föish
 = 1;

1464  
NULL
;

1465 
	}
}

1467 *
	$submôãr_sync_‚
(*
d©a
)

1469 
föish
 = 1;

1470  
NULL
;

1471 
	}
}

1474 
submôãr
 *
	$gë_submôãr
(
off£t
)

1476 *
ªt
;

1478 
ªt
 = 
submôãr
;

1479 i‡(
off£t
)

1480 
ªt
 +
off£t
 * ((*
submôãr
Ë+ 
dïth
 * (
iovec
));

1481  
ªt
;

1482 
	}
}

1484 
	$do_föish
(c⁄° *
ªas⁄
)

1486 
j
;

1488 
	`¥ötf
("Exôög o¿%s\n", 
ªas⁄
);

1489 
j
 = 0; j < 
¡hªads
; j++) {

1490 
submôãr
 *
s
 = 
	`gë_submôãr
(
j
);

1491 
s
->
föish
 = 1;

1493 i‡(
max_i›s
 > 1000000) {

1494 
mi›s
 = (Ë
max_i›s
 / 1000000.0;

1495 
	`¥ötf
("Maximum IOPS=%.2fM\n", 
mi›s
);

1496 } i‡(
max_i›s
 > 100000) {

1497 
ki›s
 = (Ë
max_i›s
 / 1000.0;

1498 
	`¥ötf
("Maximum IOPS=%.2fK\n", 
ki›s
);

1500 
	`¥ötf
("Maximum IOPS=%lu\n", 
max_i›s
);

1502 
föish
 = 1;

1503 
	}
}

1505 
	$sig_öt
(
sig
)

1507 
	`do_föish
("signal");

1508 
	}
}

1510 
	$¨m_sig_öt
()

1512 
siga˘i⁄
 
a˘
;

1514 
	`mem£t
(&
a˘
, 0, (act));

1515 
a˘
.
ß_h™dÀr
 = 
sig_öt
;

1516 
a˘
.
ß_Êags
 = 
SA_RESTART
;

1517 
	`siga˘i⁄
(
SIGINT
, &
a˘
, 
NULL
);

1520 #ifde‡
WIN32


1521 
	`siga˘i⁄
(
SIGBREAK
, &
a˘
, 
NULL
);

1523 
	}
}

1525 
	$ußge
(*
¨gv
, 
°©us
)

1527 
ru¡ime_°r
[16];

1528 
	`¢¥ötf
(
ru¡ime_°r
, ‘u¡ime_°r), "%d", 
ru¡ime
);

1529 
	`¥ötf
("%s [options] -- [filenames]\n"

1550 
¨gv
, 
DEPTH
, 
BATCH_SUBMIT
, 
BATCH_COMPLETE
, 
BS
, 
pﬁÀd
,

1551 
fixedbufs
, 
dma_m≠
, 
ªgi°î_fûes
, 
¡hªads
, !
buf„ªd
, 
do_n›
,

1552 
°©s
, 
ru¡ime
 =0 ? "u∆imôed" : 
ru¡ime_°r
, 
øndom_io
, 
aio
,

1553 
u£_sync
, 
ªgi°î_rög
, 
numa_∂a˚mít
, 
±
);

1554 
	`exô
(
°©us
);

1555 
	}
}

1557 
	$ªad_tsc_øã
()

1559 
buf„r
[32];

1560 
fd
, 
ªt
;

1562 i‡(
tsc_øã
)

1565 
fd
 = 
	`›í
(
TSC_RATE_FILE
, 
O_RDONLY
);

1566 i‡(
fd
 < 0)

1569 
ªt
 = 
	`ªad
(
fd
, 
buf„r
, (buffer));

1570 i‡(
ªt
 < 0) {

1571 
	`˛o£
(
fd
);

1575 
tsc_øã
 = 
	`°πoul
(
buf„r
, 
NULL
, 10);

1576 
	`¥ötf
("Usög TSCÑ©ê%luHz\n", 
tsc_øã
);

1577 
	`˛o£
(
fd
);

1578 
	}
}

1580 
	$wrôe_tsc_øã
()

1582 
buf„r
[32];

1583 
°©
 
sb
;

1584 
fd
, 
ªt
;

1586 i‡(!
	`°©
(
TSC_RATE_FILE
, &
sb
))

1589 
fd
 = 
	`›í
(
TSC_RATE_FILE
, 
O_WRONLY
 | 
O_CREAT
, 0644);

1590 i‡(
fd
 < 0)

1593 
	`mem£t
(
buf„r
, 0, (buffer));

1594 
	`•rötf
(
buf„r
, "%lu", 
tsc_øã
);

1595 
ªt
 = 
	`wrôe
(
fd
, 
buf„r
, 
	`°æí
(buffer));

1596 i‡(
ªt
 < 0)

1597 
	`≥º‹
("write");

1598 
	`˛o£
(
fd
);

1599 
	}
}

1601 
	$maö
(
¨gc
, *
¨gv
[])

1603 
submôãr
 *
s
;

1604 
d⁄e
, 
ˇŒs
, 
ª≠
;

1605 
i
, 
j
, 
Êags
, 
fd
, 
›t
, 
thªads_≥r_f
, 
thªads_ªm
 = 0, 
nfûes
;

1606 
fûe
 
f
;

1607 *
ªt
;

1609 i‡(!
do_n›
 && 
¨gc
 < 2)

1610 
	`ußge
(
¨gv
[0], 1);

1612 (
›t
 = 
	`gë›t
(
¨gc
, 
¨gv
, "d:s:c:b:p:B:F:n:N:O:t:T:a:r:D:R:X:S:P:u:h?")) != -1) {

1613 
›t
) {

1615 
aio
 = !!
	`©oi
(
›èrg
);

1618 
dïth
 = 
	`©oi
(
›èrg
);

1621 
b©ch_submô
 = 
	`©oi
(
›èrg
);

1622 i‡(!
b©ch_submô
)

1623 
b©ch_submô
 = 1;

1626 
b©ch_com∂ëe
 = 
	`©oi
(
›èrg
);

1627 i‡(!
b©ch_com∂ëe
)

1628 
b©ch_com∂ëe
 = 1;

1631 
bs
 = 
	`©oi
(
›èrg
);

1634 
pﬁÀd
 = !!
	`©oi
(
›èrg
);

1637 
fixedbufs
 = !!
	`©oi
(
›èrg
);

1640 
ªgi°î_fûes
 = !!
	`©oi
(
›èrg
);

1643 
¡hªads
 = 
	`©oi
(
›èrg
);

1644 i‡(!
¡hªads
) {

1645 
	`¥ötf
("Threads must beÇon-zero\n");

1646 
	`ußge
(
¨gv
[0], 1);

1650 
do_n›
 = !!
	`©oi
(
›èrg
);

1653 
buf„ªd
 = !
	`©oi
(
›èrg
);

1656 #i‚de‡
ARCH_HAVE_CPU_CLOCK


1657 
	`Ârötf
(
°dîr
, "StatsÇot supported onÅhis CPU\n");

1660 
°©s
 = !!
	`©oi
(
›èrg
);

1663 #i‚de‡
ARCH_HAVE_CPU_CLOCK


1664 
	`Ârötf
(
°dîr
, "StatsÇot supported onÅhis CPU\n");

1667 
tsc_øã
 = 
	`°πoul
(
›èrg
, 
NULL
, 10);

1668 
	`wrôe_tsc_øã
();

1671 
ru¡ime
 = 
	`©oi
(
›èrg
);

1674 
dma_m≠
 = !!
	`©oi
(
›èrg
);

1677 
øndom_io
 = !!
	`©oi
(
›èrg
);

1680 
ªgi°î_rög
 = !!
	`©oi
(
›èrg
);

1683 #ifde‡
CONFIG_PWRITEV2


1684 
u£_sync
 = !!
	`©oi
(
›èrg
);

1686 
	`Ârötf
(
°dîr
, "preadv2Çot supported\n");

1687 
	`exô
(1);

1691 
numa_∂a˚mít
 = !!
	`©oi
(
›èrg
);

1694 
±
 = !!
	`©oi
(
›èrg
);

1699 
	`ußge
(
¨gv
[0], 0);

1704 i‡(
°©s
)

1705 
	`ªad_tsc_øã
();

1707 i‡(
b©ch_com∂ëe
 > 
dïth
)

1708 
b©ch_com∂ëe
 = 
dïth
;

1709 i‡(
b©ch_submô
 > 
dïth
)

1710 
b©ch_submô
 = 
dïth
;

1711 i‡(!
fixedbufs
 && 
dma_m≠
)

1712 
dma_m≠
 = 0;

1714 
submôãr
 = 
	`ˇŒoc
(
¡hªads
, (*submitter) +

1715 
	`roundup_pow2
(
dïth
Ë* (
iovec
));

1716 
j
 = 0; j < 
¡hªads
; j++) {

1717 
s
 = 
	`gë_submôãr
(
j
);

1718 
s
->
numa_node
 = -1;

1719 
s
->
ödex
 = 
j
;

1720 
s
->
d⁄e
 = s->
ˇŒs
 = s->
ª≠s
 = 0;

1723 
Êags
 = 
O_RDONLY
 | 
O_NOATIME
;

1724 i‡(!
buf„ªd
)

1725 
Êags
 |
O_DIRECT
;

1727 
j
 = 0;

1728 
i
 = 
›töd
;

1729 
nfûes
 = 
¨gc
 - 
i
;

1730 i‡(!
do_n›
) {

1731 i‡(!
nfûes
) {

1732 
	`¥ötf
("No files specified\n");

1733 
	`ußge
(
¨gv
[0], 1);

1735 
thªads_≥r_f
 = 
¡hªads
 / 
nfûes
;

1737 i‡(
thªads_≥r_f
 == 0) {

1738 
thªads_≥r_f
 = 1;

1740 
thªads_ªm
 = 
¡hªads
 - 
thªads_≥r_f
 * 
nfûes
;

1743 !
do_n›
 && 
i
 < 
¨gc
) {

1744 
k
, 
limô
;

1746 
	`mem£t
(&
f
, 0, (f));

1748 
fd
 = 
	`›í
(
¨gv
[
i
], 
Êags
);

1749 i‡(
fd
 < 0) {

1750 
	`≥º‹
("open");

1753 
f
.
ªÆ_fd
 = 
fd
;

1754 i‡(
	`gë_fûe_size
(&
f
)) {

1755 
	`¥ötf
("failed getting size of device/file\n");

1758 i‡(
f
.
max_blocks
 <= 1) {

1759 
	`¥ötf
("Zero file/device size?\n");

1762 
f
.
max_blocks
--;

1764 
limô
 = 
thªads_≥r_f
;

1765 
limô
 +
thªads_ªm
 > 0 ? 1 : 0;

1766 
k
 = 0; k < 
limô
; k++) {

1767 
s
 = 
	`gë_submôãr
((
j
 + 
k
Ë% 
¡hªads
);

1769 i‡(
s
->
ƒ_fûes
 =
MAX_FDS
) {

1770 
	`¥ötf
("MaxÇumbî o‡fûe†(%dËªached\n", 
MAX_FDS
);

1774 
	`mem˝y
(&
s
->
fûes
[s->
ƒ_fûes
], &
f
, (f));

1776 i‡(
numa_∂a˚mít
)

1777 
	`dëe˘_node
(
s
, 
¨gv
[
i
]);

1779 
s
->
fûíame
 = 
¨gv
[
i
];

1780 
s
->
ƒ_fûes
++;

1782 
thªads_ªm
--;

1783 
i
++;

1784 
j
 +
limô
;

1787 
	`¨m_sig_öt
();

1789 
t_io_urög_∑ge_size
 = 
	`sysc⁄f
(
_SC_PAGESIZE
);

1790 i‡(
t_io_urög_∑ge_size
 < 0)

1791 
t_io_urög_∑ge_size
 = 4096;

1793 
j
 = 0; j < 
¡hªads
; j++) {

1794 
s
 = 
	`gë_submôãr
(
j
);

1795 i‡(
u£_sync
)

1796 
	`±hªad_¸óã
(&
s
->
thªad
, 
NULL
, 
submôãr_sync_‚
, s);

1797 i‡(!
aio
)

1798 
	`±hªad_¸óã
(&
s
->
thªad
, 
NULL
, 
submôãr_urög_‚
, s);

1799 #ifde‡
CONFIG_LIBAIO


1801 
	`±hªad_¸óã
(&
s
->
thªad
, 
NULL
, 
submôãr_aio_‚
, s);

1805 
ª≠
 = 
ˇŒs
 = 
d⁄e
 = 0;

1807 
this_d⁄e
 = 0;

1808 
this_ª≠
 = 0;

1809 
this_ˇŒ
 = 0;

1810 
Ωc
 = 0, 
ùc
 = 0;

1811 
i›s
, 
bw
;

1813 
	`¶ìp
(1);

1814 i‡(
ru¡ime
 && !--runtime)

1815 
	`do_föish
("timeout");

1818 i‡(
föish
)

1822 i‡(
°©s
)

1823 
°©s_ru¬ög
 = 1;

1825 
j
 = 0; j < 
¡hªads
; j++) {

1826 
s
 = 
	`gë_submôãr
(
j
);

1827 
this_d⁄e
 +
s
->
d⁄e
;

1828 
this_ˇŒ
 +
s
->
ˇŒs
;

1829 
this_ª≠
 +
s
->
ª≠s
;

1831 i‡(
this_ˇŒ
 - 
ˇŒs
) {

1832 
Ωc
 = (
this_d⁄e
 - 
d⁄e
Ë/ (
this_ˇŒ
 - 
ˇŒs
);

1833 
ùc
 = (
this_ª≠
 - 
ª≠
Ë/ (
this_ˇŒ
 - 
ˇŒs
);

1835 
Ωc
 = 
ùc
 = -1;

1836 
i›s
 = 
this_d⁄e
 - 
d⁄e
;

1837 i‡(
bs
 > 1048576)

1838 
bw
 = 
i›s
 * (
bs
 / 1048576);

1840 
bw
 = 
i›s
 / (1048576 / 
bs
);

1841 i‡(
i›s
 > 1000000) {

1842 
mi›s
 = (Ë
i›s
 / 1000000.0;

1843 
	`¥ötf
("IOPS=%.2fM, ", 
mi›s
);

1844 } i‡(
i›s
 > 100000) {

1845 
ki›s
 = (Ë
i›s
 / 1000.0;

1846 
	`¥ötf
("IOPS=%.2fK, ", 
ki›s
);

1848 
	`¥ötf
("IOPS=%lu, ", 
i›s
);

1850 
max_i›s
 = 
	`max
(max_i›s, 
i›s
);

1851 i‡(!
do_n›
) {

1852 i‡(
bw
 > 2000) {

1853 
bw_g
 = (Ë
bw
 / 1000.0;

1855 
	`¥ötf
("BW=%.2fGiB/s, ", 
bw_g
);

1857 
	`¥ötf
("BW=%luMiB/s, ", 
bw
);

1860 
	`¥ötf
("IOS/ˇŒ=%ld/%ld\n", 
Ωc
, 
ùc
);

1861 
d⁄e
 = 
this_d⁄e
;

1862 
ˇŒs
 = 
this_ˇŒ
;

1863 
ª≠
 = 
this_ª≠
;

1864 } !
föish
);

1866 
j
 = 0; j < 
¡hªads
; j++) {

1867 
s
 = 
	`gë_submôãr
(
j
);

1868 
	`±hªad_joö
(
s
->
thªad
, &
ªt
);

1869 
	`˛o£
(
s
->
rög_fd
);

1871 i‡(
°©s
) {

1872 
ƒ
;

1874 
	`¥ötf
("%d: L©ícyÖî˚¡ûes:\n", 
s
->
tid
);

1875 
i
 = 0, 
ƒ
 = 0; i < 
PLAT_NR
; i++)

1876 
ƒ
 +
s
->
∂©
[
i
];

1877 
	`show_˛©_≥r˚¡ûes
(
s
->
∂©
, 
ƒ
, 4);

1878 
	`‰ì
(
s
->
˛ock_b©ch
);

1879 
	`‰ì
(
s
->
∂©
);

1883 
	`‰ì
(
submôãr
);

1885 
	}
}

	@t/lfsr-test.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<m©h.h
>

4 
	~<°rög.h
>

6 
	~"../lib/lf§.h
"

7 
	~"../gëtime.h
"

8 
	~"../fio_time.h
"

9 
	~"../compûî/compûî.h
"

11 
	$ußge
()

13 
	`¥ötf
("Usage:Üfsr-test 0x<numbers> [seed] [spin] [verify]\n");

14 
	`¥ötf
("-------------------------------------------------------------\n");

15 
	`¥ötf
("*numbers: how manyÑandomÇumbersÅoÖroduce (in hex)\n"

22 
	}
}

24 
	$maö
(
¨gc
, *
¨gv
[])

26 
r
;

27 
time•ec
 
°¨t
, 
íd
;

28 
fio_lf§
 *
Ê
;

29 
vîify
 = 0;

30 
•ö
 = 0;

31 
uöt64_t
 
£ed
 = 0;

32 
uöt64_t
 
numbîs
;

33 
uöt64_t
 
v_size
;

34 
uöt64_t
 
i
;

35 *
v
 = 
NULL
, *
v_°¨t
;

36 
tŸÆ
, 
món
;

38 
	`¨ch_öô
(
¨gv
);

41 
¨gc
) {

42 5: i‡(
	`°∫cmp
(
¨gv
[4], "verify", 7) == 0)

43 
vîify
 = 1;

44 
fio_ÁŒthrough
;

45 4: 
•ö
 = 
	`©oi
(
¨gv
[3]);

46 
fio_ÁŒthrough
;

47 3: 
£ed
 = 
	`©ﬁ
(
¨gv
[2]);

48 
fio_ÁŒthrough
;

49 2: 
numbîs
 = 
	`°πﬁ
(
¨gv
[1], 
NULL
, 16);

51 : 
	`ußge
();

56 
Ê
 = 
	`mÆloc
((
fio_lf§
));

57 i‡(!
Ê
) {

58 
	`≥º‹
("malloc");

62 
r
 = 
	`lf§_öô
(
Ê
, 
numbîs
, 
£ed
, 
•ö
);

63 i‡(
r
) {

64 
	`¥ötf
("Initialization failed.\n");

65  
r
;

69 
	`¥ötf
("LFSR specs\n");

70 
	`¥ötf
("==========================\n");

71 
	`¥ötf
("Sizêi† %u\n", 64 - 
	`__buûtö_˛zl
(
Ê
->
ˇched_bô
));

72 
	`¥ötf
("Max vÆ i† %lu\n", (Ë
Ê
->
max_vÆ
);

73 
	`¥ötf
("XOR-mask i† 0x%lX\n", (Ë
Ê
->
x‹mask
);

74 
	`¥ötf
("Sìd i† %lu\n", (Ë
Ê
->
œ°_vÆ
);

75 
	`¥ötf
("Spö i† %u\n", 
Ê
->
•ö
);

76 
	`¥ötf
("Cy˛êÀngth i†%lu\n", (Ë
Ê
->
cy˛e_Àngth
);

79 i‡(
vîify
) {

80 
v_size
 = 
numbîs
 * (
uöt8_t
);

81 
v
 = 
	`mÆloc
(
v_size
);

82 
	`mem£t
(
v
, 0, 
v_size
);

83 
	`¥ötf
("\nVîifiˇti⁄ÅabÀ i†%l‡KiB\n", ()(
v_size
) / 1024);

85 
v_°¨t
 = 
v
;

92 
	`Ârötf
(
°dîr
, "\nTest initiated... ");

93 
	`fio_gëtime
(&
°¨t
, 
NULL
);

94 !
	`lf§_√xt
(
Ê
, &
i
)) {

95 i‡(
vîify
)

96 *(
uöt8_t
 *)(
v
 + 
i
) += 1;

98 
	`fio_gëtime
(&
íd
, 
NULL
);

99 
	`Ârötf
(
°dîr
, "finished.\n");

103 
r
 = 0;

104 i‡(
vîify
) {

105 
	`Ârötf
(
°dîr
, "VerifyingÑesults... ");

106 
i
 = 0; i < 
numbîs
; i++) {

107 i‡(*(
uöt8_t
 *)(
v
 + 
i
) != 1) {

108 
	`Ârötf
(
°dîr
, "failed (%lu = %d).\n",

109 (Ë
i
,

110 *(
uöt8_t
 *)(
v
 + 
i
));

111 
r
 = 1;

115 i‡(!
r
)

116 
	`Ârötf
(
°dîr
, "OK!\n");

120 
tŸÆ
 = 
	`utime_sö˚
(&
°¨t
, &
íd
);

121 
món
 = 
tŸÆ
 / 
Ê
->
num_vÆs
;

123 
	`¥ötf
("\nTimeÑesults ");

124 i‡(
vîify
)

125 
	`¥ötf
("(slower dueÅo verification)");

126 
	`¥ötf
("\n==============================\n");

127 
	`¥ötf
("Eœp£d: %l‡s\n", 
tŸÆ
 / 
	`pow
(10,6));

128 
	`¥ötf
("Món: %l‡us\n", 
món
);

130 
	`‰ì
(
v_°¨t
);

131 
	`‰ì
(
Ê
);

132  
r
;

133 
	}
}

	@t/log.c

1 
	~<°dio.h
>

2 
	~<°d¨g.h
>

3 
	~"../mömax.h
"

5 
size_t
 
	$log_îr
(c⁄° *
f‹m©
, ...)

7 
buf„r
[1024];

8 
va_li°
 
¨gs
;

9 
size_t
 
Àn
;

11 
	`va_°¨t
(
¨gs
, 
f‹m©
);

12 
Àn
 = 
	`v¢¥ötf
(
buf„r
, (buf„r), 
f‹m©
, 
¨gs
);

13 
	`va_íd
(
¨gs
);

14 
Àn
 = 
	`mö
÷í, (
buf„r
) - 1);

16  
	`fwrôe
(
buf„r
, 
Àn
, 1, 
°dîr
);

17 
	}
}

19 
size_t
 
	$log_öfo
(c⁄° *
f‹m©
, ...)

21 
buf„r
[1024];

22 
va_li°
 
¨gs
;

23 
size_t
 
Àn
;

25 
	`va_°¨t
(
¨gs
, 
f‹m©
);

26 
Àn
 = 
	`v¢¥ötf
(
buf„r
, (buf„r), 
f‹m©
, 
¨gs
);

27 
	`va_íd
(
¨gs
);

28 
Àn
 = 
	`mö
÷í, (
buf„r
) - 1);

30  
	`fwrôe
(
buf„r
, 
Àn
, 1, 
°dout
);

31 
	}
}

	@t/memlock.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<±hªad.h
>

6 
	sthªad_d©a
 {

7 
	mmib
;

8 } 
	gtd
;

10 *
	$w‹kî
(*
d©a
)

12 
thªad_d©a
 *
td
 = 
d©a
;

13 
ödex
;

14 
size_t
 
size
;

15 *
buf
;

16 
i
, 
fú°
 = 1;

18 
size
 = 
td
->
mib
 * 1024UL * 1024UL;

19 
buf
 = 
	`mÆloc
(
size
);

21 
i
 = 0; i < 100000; i++) {

22 
ödex
 = 0; index + 4096 < 
size
; index += 4096)

23 
	`mem£t
(&
buf
[
ödex
+512], 0x89, 512);

24 i‡(
fú°
) {

25 
	`¥ötf
("lo›%d: did %lu MiB\n", 
i
+1, 
td
->
mib
);

26 
fú°
 = 0;

29 
	`‰ì
(
buf
);

30  
NULL
;

31 
	}
}

33 
	$maö
(
¨gc
, *
¨gv
[])

35 
mib
, 
thªads
;

36 
±hªad_t
 *
±hªads
;

37 
i
;

39 i‡(
¨gc
 < 3) {

40 
	`¥ötf
("%s: <MiBÖîÅhªad> <thªads>\n", 
¨gv
[0]);

44 
mib
 = 
	`°πoul
(
¨gv
[1], 
NULL
, 10);

45 
thªads
 = 
	`°πoul
(
¨gv
[2], 
NULL
, 10);

46 i‡(
thªads
 < 1 ||Åhreads > 65536) {

47 
	`¥ötf
("%s: invÆid 'thªads'árgumít\n", 
¨gv
[0]);

51 
±hªads
 = 
	`ˇŒoc
(
thªads
, (
±hªad_t
));

52 
td
.
mib
 = mib;

54 
i
 = 0; i < 
thªads
; i++)

55 
	`±hªad_¸óã
(&
±hªads
[
i
], 
NULL
, 
w‹kî
, &
td
);

57 
i
 = 0; i < 
thªads
; i++) {

58 *
ªt
;

60 
	`±hªad_joö
(
±hªads
[
i
], &
ªt
);

63 
	}
}

	@t/read-to-pipe-async.c

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<uni°d.h
>

27 
	~<f˙é.h
>

28 
	~<sys/time.h
>

29 
	~<sys/ty≥s.h
>

30 
	~<sys/°©.h
>

31 
	~<öây≥s.h
>

32 
	~<°rög.h
>

33 
	~<±hªad.h
>

34 
	~<î∫o.h
>

35 
	~<as£π.h
>

37 
	~"../Êi°.h
"

39 
	gbs
 = 4096;

40 
	gmax_us
 = 10000;

41 *
	gfûe
;

42 
	g£∑øã_wrôî
 = 1;

44 
	#PLAT_BITS
 8

	)

45 
	#PLAT_VAL
 (1 << 
PLAT_BITS
)

	)

46 
	#PLAT_GROUP_NR
 19

	)

47 
	#PLAT_NR
 (
PLAT_GROUP_NR
 * 
PLAT_VAL
)

	)

48 
	#PLAT_LIST_MAX
 20

	)

50 
	s°©s
 {

51 
	m∂©
[
PLAT_NR
];

52 
	mƒ_ßm∂es
;

53 
	mmax
;

54 
	mmö
;

55 
	movî
;

58 
	g∂i°
[
PLAT_LIST_MAX
] = { 50.0, 75.0, 90.0, 95.0, 99.0, 99.5, 99.9, 99.99, 99.999, 99.9999, };

60 
	sthªad_d©a
 {

61 
	mexô
;

62 
	md⁄e
;

63 
±hªad_muãx_t
 
	mlock
;

64 
±hªad_c⁄d_t
 
	mc⁄d
;

65 
±hªad_muãx_t
 
	md⁄e_lock
;

66 
±hªad_c⁄d_t
 
	md⁄e_c⁄d
;

67 
±hªad_t
 
	mthªad
;

70 
	swrôî_thªad
 {

71 
Êi°_hód
 
	mli°
;

72 
Êi°_hód
 
	md⁄e_li°
;

73 
°©s
 
	ms
;

74 
thªad_d©a
 
	mthªad
;

77 
	sªadî_thªad
 {

78 
Êi°_hód
 
	mli°
;

79 
Êi°_hód
 
	md⁄e_li°
;

80 
	m°¨ãd
;

81 
	mbusy
;

82 
	mwrôe_£q
;

83 
°©s
 
	ms
;

84 
thªad_d©a
 
	mthªad
;

87 
	sw‹k_ôem
 {

88 
Êi°_hód
 
	mli°
;

89 *
	mbuf
;

90 
size_t
 
	mbuf_size
;

91 
off_t
 
	moff
;

92 
	mfd
;

93 
	m£q
;

94 
wrôî_thªad
 *
	mwrôî
;

95 
ªadî_thªad
 *
	mªadî
;

96 
±hªad_muãx_t
 
	mlock
;

97 
±hªad_c⁄d_t
 
	mc⁄d
;

98 
±hªad_t
 
	mthªad
;

101 
ªadî_thªad
 
	gªadî_thªad
;

102 
wrôî_thªad
 
	gwrôî_thªad
;

104 
uöt64_t
 
	$utime_sö˚
(c⁄° 
time•ec
 *
s
, c⁄° time•e¯*
e
)

106 
£c
, 
u£c
;

107 
uöt64_t
 
ªt
;

109 
£c
 = 
e
->
tv_£c
 - 
s
->tv_sec;

110 
u£c
 = (
e
->
tv_n£c
 - 
s
->tv_nsec) / 1000;

111 i‡(
£c
 > 0 && 
u£c
 < 0) {

112 
£c
--;

113 
u£c
 += 1000000;

116 i‡(
£c
 < 0 || (£¯=0 && 
u£c
 < 0))

119 
ªt
 = 
£c
 * 1000000ULL + 
u£c
;

121  
ªt
;

122 
	}
}

124 
w‹k_ôem
 *
	$föd_£q
(
wrôî_thªad
 *
w
, 
£q
)

126 
w‹k_ôem
 *
w‹k
;

127 
Êi°_hód
 *
íåy
;

129 i‡(
	`Êi°_em±y
(&
w
->
li°
))

130  
NULL
;

132 
	`Êi°_f‹_óch
(
íåy
, &
w
->
li°
) {

133 
w‹k
 = 
	`Êi°_íåy
(
íåy
, 
w‹k_ôem
, 
li°
);

134 i‡(
w‹k
->
£q
 == seq)

135  
w‹k
;

138  
NULL
;

139 
	}
}

141 
	$∂©_vÆ_to_idx
(
vÆ
)

143 
msb
, 
îr‹_bôs
, 
ba£
, 
off£t
;

146 i‡(
vÆ
 == 0)

147 
msb
 = 0;

149 
msb
 = (
vÆ
)*8 - 
	`__buûtö_˛z
(val) - 1;

155 i‡(
msb
 <
PLAT_BITS
)

156  
vÆ
;

159 
îr‹_bôs
 = 
msb
 - 
PLAT_BITS
;

162 
ba£
 = (
îr‹_bôs
 + 1Ë<< 
PLAT_BITS
;

168 
off£t
 = (
PLAT_VAL
 - 1Ë& (
vÆ
 >> 
îr‹_bôs
);

171  (
ba£
 + 
off£t
Ë< (
PLAT_NR
 - 1) ?

172 (
ba£
 + 
off£t
Ë: (
PLAT_NR
 - 1);

173 
	}
}

179 
	$∂©_idx_to_vÆ
(
idx
)

181 
îr‹_bôs
, 
k
, 
ba£
;

183 
	`as£π
(
idx
 < 
PLAT_NR
);

187 i‡(
idx
 < (
PLAT_VAL
 << 1))

188  
idx
;

191 
îr‹_bôs
 = (
idx
 >> 
PLAT_BITS
) - 1;

192 
ba£
 = 1 << (
îr‹_bôs
 + 
PLAT_BITS
);

195 
k
 = 
idx
 % 
PLAT_VAL
;

198  
ba£
 + ((
k
 + 0.5Ë* (1 << 
îr‹_bôs
));

199 
	}
}

201 
	$add_œt
(
°©s
 *
s
, 
us
, c⁄° *
«me
)

203 
œt_ödex
 = 0;

205 i‡(
us
 > 
s
->
max
)

206 
s
->
max
 = 
us
;

207 i‡(
us
 < 
s
->
mö
)

208 
s
->
mö
 = 
us
;

210 i‡(
us
 > 
max_us
) {

211 
	`Ârötf
(
°dîr
, "%†œãncy=%u u£c\n", 
«me
, 
us
);

212 
s
->
ovî
++;

215 
œt_ödex
 = 
	`∂©_vÆ_to_idx
(
us
);

216 
	`__sync_„tch_™d_add
(&
s
->
∂©
[
œt_ödex
], 1);

217 
	`__sync_„tch_™d_add
(&
s
->
ƒ_ßm∂es
, 1);

218 
	}
}

220 
	$wrôe_w‹k
(
w‹k_ôem
 *
w‹k
)

222 
time•ec
 
s
, 
e
;

223 
ssize_t
 
ªt
;

225 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
s
);

226 
ªt
 = 
	`wrôe
(
STDOUT_FILENO
, 
w‹k
->
buf
, w‹k->
buf_size
);

227 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
e
);

228 
	`as£π
(
ªt
 =
w‹k
->
buf_size
);

230 
	`add_œt
(&
w‹k
->
wrôî
->
s
, 
	`utime_sö˚
(&s, &
e
), "write");

231  
w‹k
->
£q
 + 1;

232 
	}
}

234 
	$thªad_exôög
(
thªad_d©a
 *
thªad
)

236 
	`__sync_„tch_™d_add
(&
thªad
->
d⁄e
, 1);

237 
	`±hªad_c⁄d_sig«l
(&
thªad
->
d⁄e_c⁄d
);

238 
	}
}

240 *
	$wrôî_‚
(*
d©a
)

242 
wrôî_thªad
 *
wt
 = 
d©a
;

243 
w‹k_ôem
 *
w‹k
;

244 
£q
 = 1;

246 
w‹k
 = 
NULL
;

247 !
wt
->
thªad
.
exô
 || !
	`Êi°_em±y
(&wt->
li°
)) {

248 
	`±hªad_muãx_lock
(&
wt
->
thªad
.
lock
);

250 i‡(
w‹k
) {

251 
	`Êi°_add_èû
(&
w‹k
->
li°
, &
wt
->
d⁄e_li°
);

252 
w‹k
 = 
NULL
;

255 
w‹k
 = 
	`föd_£q
(
wt
, 
£q
);

256 i‡(
w‹k
)

257 
	`Êi°_dñ_öô
(&
w‹k
->
li°
);

259 
	`±hªad_c⁄d_waô
(&
wt
->
thªad
.
c⁄d
, &wt->thªad.
lock
);

261 
	`±hªad_muãx_u∆ock
(&
wt
->
thªad
.
lock
);

263 i‡(
w‹k
)

264 
£q
 = 
	`wrôe_w‹k
(
w‹k
);

267 
	`thªad_exôög
(&
wt
->
thªad
);

268  
NULL
;

269 
	}
}

271 
	$ªadî_w‹k
(
w‹k_ôem
 *
w‹k
)

273 
time•ec
 
s
, 
e
;

274 
ssize_t
 
ªt
;

275 
size_t
 
À·
;

276 *
buf
;

277 
off_t
 
off
;

279 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
s
);

281 
À·
 = 
w‹k
->
buf_size
;

282 
buf
 = 
w‹k
->buf;

283 
off
 = 
w‹k
->off;

284 
À·
) {

285 
ªt
 = 
	`¥ód
(
w‹k
->
fd
, 
buf
, 
À·
, 
off
);

286 i‡(!
ªt
) {

287 
	`Ârötf
(
°dîr
, "zeroÑead\n");

289 } i‡(
ªt
 < 0) {

290 
	`Ârötf
(
°dîr
, "î∫o=%d\n", 
î∫o
);

293 
À·
 -
ªt
;

294 
off
 +
ªt
;

295 
buf
 +
ªt
;

298 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
e
);

300 
	`add_œt
(&
w‹k
->
ªadî
->
s
, 
	`utime_sö˚
(&s, &
e
), "read");

302 
	`±hªad_c⁄d_sig«l
(&
w‹k
->
c⁄d
);

304 i‡(
£∑øã_wrôî
) {

305 
	`±hªad_muãx_lock
(&
w‹k
->
wrôî
->
thªad
.
lock
);

306 
	`Êi°_add_èû
(&
w‹k
->
li°
, &w‹k->
wrôî
->list);

307 
	`±hªad_muãx_u∆ock
(&
w‹k
->
wrôî
->
thªad
.
lock
);

308 
	`±hªad_c⁄d_sig«l
(&
w‹k
->
wrôî
->
thªad
.
c⁄d
);

310 
ªadî_thªad
 *
π
 = 
w‹k
->
ªadî
;

311 
w‹k_ôem
 *
√xt
 = 
NULL
;

312 
Êi°_hód
 *
íåy
;

317 i‡(
w‹k
->
£q
 =
π
->
wrôe_£q
)

318 
wrôe_ô
;

320 
	`±hªad_muãx_lock
(&
π
->
thªad
.
lock
);

322 
	`Êi°_add_èû
(&
w‹k
->
li°
, &
π
->
d⁄e_li°
);

327 
w‹k
 = 
NULL
;

328 
	`Êi°_f‹_óch
(
íåy
, &
π
->
d⁄e_li°
) {

329 
√xt
 = 
	`Êi°_íåy
(
íåy
, 
w‹k_ôem
, 
li°
);

330 i‡(
√xt
->
£q
 =
π
->
wrôe_£q
) {

331 
w‹k
 = 
√xt
;

332 
	`Êi°_dñ
(&
w‹k
->
li°
);

337 
	`±hªad_muãx_u∆ock
(&
π
->
thªad
.
lock
);

339 i‡(
w‹k
) {

340 
wrôe_ô
:

341 
	`wrôe_w‹k
(
w‹k
);

342 
	`__sync_„tch_™d_add
(&
π
->
wrôe_£q
, 1);

345 
	}
}

347 *
	$ªadî_⁄e_off
(*
d©a
)

349 
	`ªadî_w‹k
(
d©a
);

350  
NULL
;

351 
	}
}

353 *
	$ªadî_‚
(*
d©a
)

355 
ªadî_thªad
 *
π
 = 
d©a
;

356 
w‹k_ôem
 *
w‹k
;

358 !
π
->
thªad
.
exô
 || !
	`Êi°_em±y
(&π->
li°
)) {

359 
w‹k
 = 
NULL
;

360 
	`±hªad_muãx_lock
(&
π
->
thªad
.
lock
);

361 i‡(!
	`Êi°_em±y
(&
π
->
li°
)) {

362 
w‹k
 = 
	`Êi°_fú°_íåy
(&
π
->
li°
, 
w‹k_ôem
,Üist);

363 
	`Êi°_dñ_öô
(&
w‹k
->
li°
);

365 
	`±hªad_c⁄d_waô
(&
π
->
thªad
.
c⁄d
, &π->thªad.
lock
);

366 
	`±hªad_muãx_u∆ock
(&
π
->
thªad
.
lock
);

368 i‡(
w‹k
) {

369 
	`__sync_„tch_™d_add
(&
π
->
busy
, 1);

370 
	`ªadî_w‹k
(
w‹k
);

371 
	`__sync_„tch_™d_sub
(&
π
->
busy
, 1);

375 
	`thªad_exôög
(&
π
->
thªad
);

376  
NULL
;

377 
	}
}

379 
	$queue_w‹k
(
ªadî_thªad
 *
π
, 
w‹k_ôem
 *
w‹k
)

381 i‡(!
π
->
°¨ãd
) {

382 
	`±hªad_muãx_lock
(&
π
->
thªad
.
lock
);

383 
	`Êi°_add_èû
(&
w‹k
->
li°
, &
π
->list);

384 
	`±hªad_muãx_u∆ock
(&
π
->
thªad
.
lock
);

386 
π
->
°¨ãd
 = 1;

387 
	`±hªad_¸óã
(&
π
->
thªad
.thªad, 
NULL
, 
ªadî_‚
,Ñt);

388 } i‡(!
π
->
busy
 && !
	`±hªad_muãx_åylock
(&π->
thªad
.
lock
)) {

389 
	`Êi°_add_èû
(&
w‹k
->
li°
, &
π
->list);

390 
	`±hªad_muãx_u∆ock
(&
π
->
thªad
.
lock
);

392 
	`±hªad_c⁄d_sig«l
(&
π
->
thªad
.
c⁄d
);

394 
ªt
 = 
	`±hªad_¸óã
(&
w‹k
->
thªad
, 
NULL
, 
ªadî_⁄e_off
, work);

395 i‡(
ªt
) {

396 
	`Ârötf
(
°dîr
, "±hªad_¸óã=%d\n", 
ªt
);

398 
ªt
 = 
	`±hªad_dëach
(
w‹k
->
thªad
);

399 i‡(
ªt
)

400 
	`Ârötf
(
°dîr
, "±hªad_dëach=%d\n", 
ªt
);

403 
	}
}

405 
	$ˇlc_≥r˚¡ûes
(*
io_u_∂©
, 
ƒ
,

406 **
ouçut
)

408 
sum
 = 0;

409 
Àn
, 
i
, 
j
 = 0;

410 
ovÆ_Àn
 = 0;

411 *
ovÆs
 = 
NULL
;

412 
is_œ°
;

414 
Àn
 = 0;

415 
Àn
 < 
PLAT_LIST_MAX
 && 
∂i°
[len] != 0.0)

416 
Àn
++;

418 i‡(!
Àn
)

424 
is_œ°
 = 0;

425 
i
 = 0; i < 
PLAT_NR
 && !
is_œ°
; i++) {

426 
sum
 +
io_u_∂©
[
i
];

427 
sum
 >(
∂i°
[
j
] / 100.0 * 
ƒ
)) {

428 
	`as£π
(
∂i°
[
j
] <= 100.0);

430 i‡(
j
 =
ovÆ_Àn
) {

431 
ovÆ_Àn
 += 100;

432 
ovÆs
 = 
	`ªÆloc
(ovÆs, 
ovÆ_Àn
 * ());

435 
ovÆs
[
j
] = 
	`∂©_idx_to_vÆ
(
i
);

436 
is_œ°
 = (
j
 =
Àn
 - 1);

437 i‡(
is_œ°
)

440 
j
++;

444 *
ouçut
 = 
ovÆs
;

445  
Àn
;

446 
	}
}

448 
	$show_œãncõs
(
°©s
 *
s
, c⁄° *
msg
)

450 *
ovÆs
 = 
NULL
;

451 
Àn
, 
i
;

453 
Àn
 = 
	`ˇlc_≥r˚¡ûes
(
s
->
∂©
, s->
ƒ_ßm∂es
, &
ovÆs
);

454 i‡(
Àn
) {

455 
	`Ârötf
(
°dîr
, "L©ícyÖî˚¡ûe†(u£cË(%s)\n", 
msg
);

456 
i
 = 0; i < 
Àn
; i++)

457 
	`Ârötf
(
°dîr
, "\t%2.4·h: %u\n", 
∂i°
[
i
], 
ovÆs
[i]);

460 i‡(
ovÆs
)

461 
	`‰ì
(
ovÆs
);

463 
	`Ârötf
(
°dîr
, "\tOvî=%u, mö=%u, max=%u\n", 
s
->
ovî
, s->
mö
, s->
max
);

464 
	}
}

466 
	$öô_thªad
(
thªad_d©a
 *
thªad
)

468 
±hªad_c⁄d©å_t
 
ˇâr
;

469 
ªt
;

471 
ªt
 = 
	`±hªad_c⁄d©å_öô
(&
ˇâr
);

472 
	`as£π
(
ªt
 == 0);

473 #ifde‡
CONFIG_PTHREAD_CONDATTR_SETCLOCK


474 
ªt
 = 
	`±hªad_c⁄d©å_£t˛ock
(&
ˇâr
, 
CLOCK_MONOTONIC
);

475 
	`as£π
(
ªt
 == 0);

477 
	`±hªad_c⁄d_öô
(&
thªad
->
c⁄d
, &
ˇâr
);

478 
	`±hªad_c⁄d_öô
(&
thªad
->
d⁄e_c⁄d
, &
ˇâr
);

479 
	`±hªad_muãx_öô
(&
thªad
->
lock
, 
NULL
);

480 
	`±hªad_muãx_öô
(&
thªad
->
d⁄e_lock
, 
NULL
);

481 
thªad
->
exô
 = 0;

482 
	}
}

484 
exô_thªad
(
thªad_d©a
 *
thªad
,

485 
‚
(
wrôî_thªad
 *),

486 
wrôî_thªad
 *
wt
)

488 
__sync_„tch_™d_add
(&
thªad
->
exô
, 1);

489 
±hªad_c⁄d_sig«l
(&
thªad
->
c⁄d
);

491 !
	gthªad
->
	gd⁄e
) {

492 
±hªad_muãx_lock
(&
thªad
->
d⁄e_lock
);

494 i‡(
	g‚
) {

495 
time•ec
 
	gts
;

497 #ifde‡
CONFIG_PTHREAD_CONDATTR_SETCLOCK


498 
˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ts
);

500 
˛ock_gëtime
(
CLOCK_REALTIME
, &
ts
);

502 
	gts
.
	gtv_£c
++;

504 
±hªad_c⁄d_timedwaô
(&
thªad
->
d⁄e_c⁄d
, &thªad->
d⁄e_lock
, &
ts
);

505 
‚
(
wt
);

507 
±hªad_c⁄d_waô
(&
thªad
->
d⁄e_c⁄d
, &thªad->
d⁄e_lock
);

509 
±hªad_muãx_u∆ock
(&
thªad
->
d⁄e_lock
);

513 
	$ußge
(*
¨gv
[])

515 
	`Ârötf
(
°dîr
, "%s: [-b blocksize] [-àmax u£c] [-w sï¨©êwrôî] -‡fûe\n", 
¨gv
[0]);

517 
	}
}

519 
	$∑r£_›ti⁄s
(
¨gc
, *
¨gv
[])

521 
c
;

523 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "f:b:t:w:")) != -1) {

524 
c
) {

526 i‡(
fûe
)

527  
	`ußge
(
¨gv
);

528 
fûe
 = 
	`°rdup
(
›èrg
);

531 
bs
 = 
	`©oi
(
›èrg
);

534 
max_us
 = 
	`©oi
(
›èrg
);

537 
£∑øã_wrôî
 = 
	`©oi
(
›èrg
);

538 i‡(!
£∑øã_wrôî
)

539 
	`Ârötf
(
°dîr
, "inline writing is broken\n");

543  
	`ußge
(
¨gv
);

547 i‡(!
fûe
)

548  
	`ußge
(
¨gv
);

551 
	}
}

553 
	$¥u√_d⁄e_íåõs
(
wrôî_thªad
 *
wt
)

555 
	`FLIST_HEAD
(
li°
);

557 i‡(
	`Êi°_em±y
(&
wt
->
d⁄e_li°
))

560 i‡(
	`±hªad_muãx_åylock
(&
wt
->
thªad
.
lock
))

563 i‡(!
	`Êi°_em±y
(&
wt
->
d⁄e_li°
))

564 
	`Êi°_•li˚_öô
(&
wt
->
d⁄e_li°
, &
li°
);

565 
	`±hªad_muãx_u∆ock
(&
wt
->
thªad
.
lock
);

567 !
	`Êi°_em±y
(&
li°
)) {

568 
w‹k_ôem
 *
w‹k
;

570 
w‹k
 = 
	`Êi°_fú°_íåy
(&
li°
, 
w‹k_ôem
,Üist);

571 
	`Êi°_dñ
(&
w‹k
->
li°
);

573 
	`±hªad_c⁄d_de°roy
(&
w‹k
->
c⁄d
);

574 
	`±hªad_muãx_de°roy
(&
w‹k
->
lock
);

575 
	`‰ì
(
w‹k
->
buf
);

576 
	`‰ì
(
w‹k
);

578 
	}
}

580 
	$maö
(
¨gc
, *
¨gv
[])

582 
±hªad_c⁄d©å_t
 
ˇâr
;

583 
time•ec
 
s
, 
ª
, 
we
;

584 
ªadî_thªad
 *
π
;

585 
wrôî_thªad
 *
wt
;

586 
øã
;

587 
uöt64_t
 
ñ≠£d
;

588 
°©
 
sb
;

589 
size_t
 
byãs
;

590 
off_t
 
off
;

591 
fd
, 
£q
;

592 
ªt
;

594 i‡(
	`∑r£_›ti⁄s
(
¨gc
, 
¨gv
))

597 
fd
 = 
	`›í
(
fûe
, 
O_RDONLY
);

598 i‡(
fd
 < 0) {

599 
	`≥º‹
("open");

603 i‡(
	`f°©
(
fd
, &
sb
) < 0) {

604 
	`≥º‹
("stat");

608 
wt
 = &
wrôî_thªad
;

609 
	`öô_thªad
(&
wt
->
thªad
);

610 
	`INIT_FLIST_HEAD
(&
wt
->
li°
);

611 
	`INIT_FLIST_HEAD
(&
wt
->
d⁄e_li°
);

612 
wt
->
s
.
max
 = 0;

613 
wt
->
s
.
mö
 = -1U;

614 
	`±hªad_¸óã
(&
wt
->
thªad
.thªad, 
NULL
, 
wrôî_‚
, wt);

616 
π
 = &
ªadî_thªad
;

617 
	`öô_thªad
(&
π
->
thªad
);

618 
	`INIT_FLIST_HEAD
(&
π
->
li°
);

619 
	`INIT_FLIST_HEAD
(&
π
->
d⁄e_li°
);

620 
π
->
s
.
max
 = 0;

621 
π
->
s
.
mö
 = -1U;

622 
π
->
wrôe_£q
 = 1;

624 
off
 = 0;

625 
£q
 = 0;

626 
byãs
 = 0;

628 
ªt
 = 
	`±hªad_c⁄d©å_öô
(&
ˇâr
);

629 
	`as£π
(
ªt
 == 0);

630 #ifde‡
CONFIG_PTHREAD_CONDATTR_SETCLOCK


631 
ªt
 = 
	`±hªad_c⁄d©å_£t˛ock
(&
ˇâr
, 
CLOCK_MONOTONIC
);

632 
	`as£π
(
ªt
 == 0);

635 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
s
);

637 
sb
.
°_size
) {

638 
w‹k_ôem
 *
w‹k
;

639 
size_t
 
this_Àn
;

640 
time•ec
 
ts
;

642 
	`¥u√_d⁄e_íåõs
(
wt
);

644 
this_Àn
 = 
sb
.
°_size
;

645 i‡(
this_Àn
 > 
bs
)

646 
this_Àn
 = 
bs
;

648 
w‹k
 = 
	`ˇŒoc
(1, (*work));

649 
w‹k
->
buf
 = 
	`mÆloc
(
this_Àn
);

650 
w‹k
->
buf_size
 = 
this_Àn
;

651 
w‹k
->
off
 = off;

652 
w‹k
->
fd
 = fd;

653 
w‹k
->
£q
 = ++seq;

654 
w‹k
->
wrôî
 = 
wt
;

655 
w‹k
->
ªadî
 = 
π
;

656 
	`±hªad_c⁄d_öô
(&
w‹k
->
c⁄d
, &
ˇâr
);

657 
	`±hªad_muãx_öô
(&
w‹k
->
lock
, 
NULL
);

659 
	`queue_w‹k
(
π
, 
w‹k
);

661 #ifde‡
CONFIG_PTHREAD_CONDATTR_SETCLOCK


662 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ts
);

664 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
ts
);

666 
ts
.
tv_n£c
 +
max_us
 * 1000ULL;

667 i‡(
ts
.
tv_n£c
 >= 1000000000ULL) {

668 
ts
.
tv_n£c
 -= 1000000000ULL;

669 
ts
.
tv_£c
++;

672 
	`±hªad_muãx_lock
(&
w‹k
->
lock
);

673 
	`±hªad_c⁄d_timedwaô
(&
w‹k
->
c⁄d
, &w‹k->
lock
, &
ts
);

674 
	`±hªad_muãx_u∆ock
(&
w‹k
->
lock
);

676 
off
 +
this_Àn
;

677 
sb
.
°_size
 -
this_Àn
;

678 
byãs
 +
this_Àn
;

681 
	`exô_thªad
(&
π
->
thªad
, 
NULL
, NULL);

682 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ª
);

684 
	`exô_thªad
(&
wt
->
thªad
, 
¥u√_d⁄e_íåõs
, wt);

685 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
we
);

687 
	`show_œãncõs
(&
π
->
s
, "READERS");

688 
	`show_œãncõs
(&
wt
->
s
, "WRITERS");

690 
byãs
 /= 1024;

691 
ñ≠£d
 = 
	`utime_sö˚
(&
s
, &
ª
);

692 
øã
 = 
ñ≠£d
 ? (
byãs
 * 1000UL * 1000UL) /Élapsed : 0;

693 
	`Ârötf
(
°dîr
, "RódÑ©ê(KiB/£cË: %lu\n", 
øã
);

694 
ñ≠£d
 = 
	`utime_sö˚
(&
s
, &
we
);

695 
øã
 = 
ñ≠£d
 ? (
byãs
 * 1000UL * 1000UL) /Élapsed : 0;

696 
	`Ârötf
(
°dîr
, "Wrôêøã (KiB/£c): %lu\n", 
øã
);

698 
	`˛o£
(
fd
);

700 
	}
}

	@t/stest.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<as£π.h
>

5 
	~"../smÆloc.h
"

6 
	~"../Êi°.h
"

7 
	~"../¨ch/¨ch.h
"

8 
	~"debug.h
"

10 
	#MAGIC1
 0xa9b1c8d2

	)

11 
	#MAGIC2
 0xf0a1e9b3

	)

13 
	#LOOPS
 32

	)

14 
	#MAXSMALLOC
 120*1024*1024UL

	)

15 
	#LARGESMALLOC
 128*1024U

	)

17 
	sñem
 {

18 
	mmagic1
;

19 
Êi°_hód
 
	mli°
;

20 
	mmagic2
;

21 
	msize
;

24 
FLIST_HEAD
(
li°
);

26 
	$do_ønd_Ælocs
()

28 
size
, 
ƒ
, 
rounds
 = 0, 
ªt
 = 0;

29 
tŸÆ
;

30 
ñem
 *
e
;

31 
boﬁ
 
îr‹
;

33 
rounds
++ < 
LOOPS
) {

34 #ifde‡
STEST_SEED


35 
	`§™d
(
MAGIC1
);

37 
îr‹
 = 
Ál£
;

38 
ƒ
 = 
tŸÆ
 = 0;

39 
tŸÆ
 < 
MAXSMALLOC
) {

40 
size
 = 8 * (
ñem
Ë+ (Ë(999.0 * (
	`ønd
(Ë/ (
RAND_MAX
 + 1.0)));

41 
e
 = 
	`smÆloc
(
size
);

42 i‡(!
e
) {

43 
	`¥ötf
("Áûáà%lu, sizê%u\n", 
tŸÆ
, 
size
);

44 
ªt
++;

47 
e
->
magic1
 = 
MAGIC1
;

48 
e
->
magic2
 = 
MAGIC2
;

49 
e
->
size
 = size;

50 
tŸÆ
 +
size
;

51 
	`Êi°_add_èû
(&
e
->
li°
, &list);

52 
ƒ
++;

55 
	`¥ötf
("GŸ iãms: %u\n", 
ƒ
);

57 !
	`Êi°_em±y
(&
li°
)) {

58 
e
 = 
	`Êi°_íåy
(
li°
.
√xt
, 
ñem
,Üist);

59 
	`as£π
(
e
->
magic1
 =
MAGIC1
);

60 
	`as£π
(
e
->
magic2
 =
MAGIC2
);

61 
tŸÆ
 -
e
->
size
;

62 
	`Êi°_dñ
(&
e
->
li°
);

63 
	`s‰ì
(
e
);

65 i‡(!
îr‹
) {

66 
e
 = 
	`smÆloc
(
LARGESMALLOC
);

67 i‡(!
e
) {

68 
îr‹
 = 
åue
;

69 
ªt
++;

70 
	`¥ötf
("failureállocating %u bytesát %luállocated during sfreeÖhase\n",

71 
LARGESMALLOC
, 
tŸÆ
);

74 
	`s‰ì
(
e
);

79  
ªt
;

80 
	}
}

82 
	$maö
(
¨gc
, *
¨gv
[])

84 
ªt
;

86 
	`¨ch_öô
(
¨gv
);

87 
	`söô
();

88 
	`debug_öô
();

90 
ªt
 = 
	`do_ønd_Ælocs
();

91 
	`smÆloc_debug
(0);

94 
	`s˛ónup
();

95  
ªt
;

96 
	}
}

	@t/time-test.c

78 
	~<°dio.h
>

79 
	~<°dlib.h
>

80 
	~<limôs.h
>

81 
	~<as£π.h
>

82 
	~<°dlib.h
>

83 
	~"lib/£qlock.h
"

85 
	#DEBUG
 0

	)

86 
	#MAX_CLOCK_SEC
 365*24*60*60ULL

	)

87 
	#MAX_CLOCK_SEC_2STAGE
 60*60ULL

	)

88 
	#d¥ötf
(...Ëi‡(
DEBUG
Ë{ 
	`¥ötf
(
__VA_ARGS__
); }

	)

91 
	m__CLOCK64_BIT
 = 1 << 0,

92 
	m__CLOCK128_BIT
 = 1 << 1,

93 
	m__CLOCK_MULT_SHIFT
 = 1 << 2,

94 
	m__CLOCK_EMULATE_128
 = 1 << 3,

95 
	m__CLOCK_2STAGE
 = 1 << 4,

96 
	m__CLOCK_LOCK
 = 1 << 5,

98 
	mCLOCK64_MULT_SHIFT
 = 
__CLOCK64_BIT
 | 
__CLOCK_MULT_SHIFT
,

99 
	mCLOCK64_EMULATE_128
 = 
__CLOCK64_BIT
 | 
__CLOCK_EMULATE_128
,

100 
	mCLOCK64_2STAGE
 = 
__CLOCK64_BIT
 | 
__CLOCK_2STAGE
,

101 
	mCLOCK64_LOCK
 = 
__CLOCK64_BIT
 | 
__CLOCK_LOCK
,

102 
	mCLOCK128_MULT_SHIFT
 = 
__CLOCK128_BIT
 | 
__CLOCK_MULT_SHIFT
,

105 
£qlock
 
	g˛ock_£qlock
;

106 
	gcy˛es_°¨t
;

107 
	gñ≠£d_n£c
;

109 
	gmax_cy˛es_shi·
;

110 
	gmax_cy˛es_mask
;

111 
	gn£cs_f‹_max_cy˛es
;

113 
	g˛ock_shi·
;

114 
	g˛ock_mu…
;

116 *
	gn£cs
;

117 
	g˛ock_mu…64_128
[2];

118 
__uöt128_t
 
	g˛ock_mu…128
;

134 
	$do_mu…
(
a
[2], 
b
,

135 
¥odu˘
[2])

137 
¥odu˘
[0] =Öroduct[1] = 0;

139 
	}
}

141 
	$do_div
(
a
[2], 
b
,

142 
c
[2])

145 
	}
}

147 
	$do_shi·64
(
a
[2], 
cou¡
)

149 
a
[0] =á[1] >> (
cou¡
-64);

150 
a
[1] = 0;

151 
	}
}

153 
	$do_shi·
(
a
[2], 
cou¡
)

155 i‡(
cou¡
 > 64)

156 
	`do_shi·64
(
a
, 
cou¡
);

158 
cou¡
--) {

159 
a
[0] >>= 1;

160 
a
[0] |=á[1] << 63;

161 
a
[1] >>= 1;

164 
	}
}

166 
	$upd©e_˛ock
(
t
)

168 
	`wrôe_£qlock_begö
(&
˛ock_£qlock
);

169 
ñ≠£d_n£c
 = (
t
 >> 
max_cy˛es_shi·
Ë* 
n£cs_f‹_max_cy˛es
;

170 
cy˛es_°¨t
 = 
t
 & ~
max_cy˛es_mask
;

171 
	`wrôe_£qlock_íd
(&
˛ock_£qlock
);

172 
	}
}

174 
	$_gë_n£c
(
mode
, 
t
)

176 
mode
) {

177 
CLOCK64_MULT_SHIFT
:

178  (
t
 * 
˛ock_mu…
Ë>> 
˛ock_shi·
;

179 
CLOCK64_EMULATE_128
: {

180 
¥odu˘
[2] = { };

182 
	`do_mu…
(
˛ock_mu…64_128
, 
t
, 
¥odu˘
);

183 
	`do_shi·
(
¥odu˘
, 
˛ock_shi·
);

184  
¥odu˘
[0];

186 
CLOCK64_2STAGE
: {

187 
mu…ùÀs
, 
n£c
;

189 
mu…ùÀs
 = 
t
 >> 
max_cy˛es_shi·
;

190 
	`d¥ötf
("mu…ùÀs=%Œu\n", 
mu…ùÀs
);

191 
n£c
 = 
mu…ùÀs
 * 
n£cs_f‹_max_cy˛es
;

192 
n£c
 +((
t
 & 
max_cy˛es_mask
Ë* 
˛ock_mu…
Ë>> 
˛ock_shi·
;

193  
n£c
;

195 
CLOCK64_LOCK
: {

196 
£q
;

197 
n£c
;

200 
£q
 = 
	`ªad_£qlock_begö
(&
˛ock_£qlock
);

201 
n£c
 = 
ñ≠£d_n£c
;

202 
n£c
 +((
t
 - 
cy˛es_°¨t
Ë* 
˛ock_mu…
Ë>> 
˛ock_shi·
;

203 } 
	`ªad_£qlock_ªåy
(&
˛ock_£qlock
, 
£q
));

204  
n£c
;

206 
CLOCK128_MULT_SHIFT
:

207  ()((
t
 * 
˛ock_mu…128
Ë>> 
˛ock_shi·
);

209 
	`as£π
(0);

211 
	}
}

213 
	$gë_n£c
(
mode
, 
t
)

215 i‡(
mode
 =
CLOCK64_LOCK
) {

216 
	`upd©e_˛ock
(
t
);

219  
	`_gë_n£c
(
mode
, 
t
);

220 
	}
}

222 
	$ˇlc_mu…_shi·
(
mode
, *
mu…
, *
shi·
,

223 
max_£c
,

224 
cy˛es_≥r_u£c
)

226 
max_ticks
;

227 
max_ticks
 = 
max_£c
 * 
cy˛es_≥r_u£c
 * 1000000ULL;

229 
mode
) {

230 
CLOCK64_MULT_SHIFT
: {

231 
max_mu…
, 
tmp
;

232 
s·
 = 0;

239 
max_mu…
 = 
ULLONG_MAX
 / 
max_ticks
;

240 
	`d¥ötf
("max_ticks=%Œu, __buûtö_˛zŒ=%d, max_mu…=%Œu\n", 
max_ticks
, 
	`__buûtö_˛zŒ
(max_ticks), 
max_mu…
);

246 
tmp
 = 
max_mu…
 * 
cy˛es_≥r_u£c
 / 1000;

247 
tmp
 > 1) {

248 
tmp
 >>= 1;

249 
s·
++;

250 
	`d¥ötf
("tmp=%Œu, s·=%u\n", 
tmp
, 
s·
);

253 *
shi·
 = 
s·
;

254 *((*)
mu…
Ë(Ë((1ULL << 
s·
Ë* 1000 / 
cy˛es_≥r_u£c
);

257 
CLOCK64_EMULATE_128
: {

258 
max_mu…
[2], 
tmp
[2] = { };

259 
s·
 = 0;

267 
max_mu…
[0] = max_mu…[1] = 
ULLONG_MAX
;

268 
	`do_div
(
max_mu…
, 
max_ticks
, max_mult);

269 
	`d¥ötf
("max_ticks=%llu, __builtin_clzll=%d, max_mult=0x%016llx%016llx\n",

270 
max_ticks
, 
	`__buûtö_˛zŒ
(max_ticks), 
max_mu…
[1], max_mult[0]);

276 
	`do_div
(
max_mu…
, 
cy˛es_≥r_u£c
, 
tmp
);

277 
	`do_div
(
tmp
, 1000ULL,Åmp);

278 
tmp
[0] > 1 ||Åmp[1] > 1) {

279 
	`do_shi·
(
tmp
, 1);

280 
s·
++;

281 
	`d¥ötf
("tmp=0x%016Œx%016Œx, s·=%u\n", 
tmp
[1],Åmp[0], 
s·
);

284 *
shi·
 = 
s·
;

288 
CLOCK64_2STAGE
: {

289 
tmp
;

305 
	`ˇlc_mu…_shi·
(
CLOCK64_MULT_SHIFT
, 
mu…
, 
shi·
, 
MAX_CLOCK_SEC_2STAGE
, 
cy˛es_≥r_u£c
);

308 
max_cy˛es_shi·
 = 
max_cy˛es_mask
 = 0;

309 
tmp
 = 
MAX_CLOCK_SEC_2STAGE
 * 1000000ULL * 
cy˛es_≥r_u£c
;

310 
	`d¥ötf
("tmp=%Œu, max_cy˛es_shi·=%u\n", 
tmp
, 
max_cy˛es_shi·
);

311 
tmp
 > 1) {

312 
tmp
 >>= 1;

313 
max_cy˛es_shi·
++;

314 
	`d¥ötf
("tmp=%Œu, max_cy˛es_shi·=%u\n", 
tmp
, 
max_cy˛es_shi·
);

318 
n£cs_f‹_max_cy˛es
 = (1ULL << 
max_cy˛es_shi·
Ë* *((*)
mu…
Ë>> *
shi·
;

321 
tmp
 = 0;Åm∞< 
max_cy˛es_shi·
;Åmp++)

322 
max_cy˛es_mask
 |1ULL << 
tmp
;

324 
	`d¥ötf
("max_cycles_shift=%u, 2^max_cycles_shift=%llu,Çsecs_for_max_cycles=%llu, max_cycles_mask=%016llx\n",

325 
max_cy˛es_shi·
, (1ULL << max_cycles_shift),

326 
n£cs_f‹_max_cy˛es
, 
max_cy˛es_mask
);

331 
CLOCK64_LOCK
: {

344 
	`ˇlc_mu…_shi·
(
CLOCK64_2STAGE
, 
mu…
, 
shi·
, 
MAX_CLOCK_SEC
, 
cy˛es_≥r_u£c
);

345 
cy˛es_°¨t
 = 0;

348 
CLOCK128_MULT_SHIFT
: {

349 
__uöt128_t
 
max_mu…
, 
tmp
;

350 
s·
 = 0;

357 
max_mu…
 = ((
__uöt128_t
Ë
ULLONG_MAX
) << 64 | ULLONG_MAX;

358 
max_mu…
 /
max_ticks
;

359 
	`d¥ötf
("max_ticks=%llu, __builtin_clzll=%d, max_mult=0x%016llx%016llx\n",

360 
max_ticks
, 
	`__buûtö_˛zŒ
(max_ticks),

361 (Ë(
max_mu…
 >> 64),

362 (Ë
max_mu…
);

368 
tmp
 = 
max_mu…
 * 
cy˛es_≥r_u£c
 / 1000;

369 
tmp
 > 1) {

370 
tmp
 >>= 1;

371 
s·
++;

372 
	`d¥ötf
("tmp=0x%016llx%016llx, sft=%u\n",

373 (Ë(
tmp
 >> 64),

374 (Ë
tmp
, 
s·
);

377 *
shi·
 = 
s·
;

378 *((
__uöt128_t
 *)
mu…
Ë(__uöt128_tË(((__uöt128_t)1 << 
s·
Ë* 1000 / 
cy˛es_≥r_u£c
);

382 
	}
}

384 
	$disc⁄töuôy
(
mode
, 
dñè_ticks
, 
dñè_n£c
,

385 
°¨t
, 
Àn
)

387 
i
;

388 
mism©ches
 = 0, 
bad_mism©ches
 = 0;

389 
dñè
, 
max_mism©ch
 = 0;

390 *
ns
 = 
n£cs
;

392 
i
 = 0; i < 
Àn
; 
ns
++, i++) {

393 *
ns
 = 
	`gë_n£c
(
mode
, 
°¨t
 + 
i
);

394 i‡(
i
 - 
dñè_ticks
 >= 0) {

395 i‡(*
ns
 > *“†- 
dñè_ticks
))

396 
dñè
 = *
ns
 - *“†- 
dñè_ticks
);

398 
dñè
 = *(
ns
 - 
dñè_ticks
) - *ns;

399 i‡(
dñè
 > 
dñè_n£c
)

400 
dñè
 -
dñè_n£c
;

402 
dñè
 = 
dñè_n£c
 - delta;

403 i‡(
dñè
) {

404 
mism©ches
++;

405 i‡(
dñè
 > 1)

406 
bad_mism©ches
++;

407 i‡(
dñè
 > 
max_mism©ch
)

408 
max_mism©ch
 = 
dñè
;

411 i‡(!
bad_mism©ches
)

412 
	`as£π
(
max_mism©ch
 == 0 || max_mismatch == 1);

413 i‡(!
mism©ches
)

414 
	`as£π
(
max_mism©ch
 == 0);

417 
	`¥ötf
("%lu discontinuities (%lu%%) (%luÉrrors > 1ns, max delta = %lluns) forÅicks = %llu...%llu\n",

418 
mism©ches
, (mism©che†* 100Ë/ 
Àn
, 
bad_mism©ches
, 
max_mism©ch
, 
°¨t
,

419 
°¨t
 + 
Àn
 - 1);

420  
mism©ches
;

421 
	}
}

423 
	#MIN_TICKS
 1ULL

	)

424 
	#LEN
 1000000000ULL

	)

425 
	#NSEC_ONE_SEC
 1000000000ULL

	)

426 
	#TESTLEN
 9

	)

428 
	$ã°_˛ock
(
mode
, 
cy˛es_≥r_u£c
, 
Á°_ã°
,

429 
quõt
, 
dñè_ticks
, 
dñè_n£c
)

431 
i
;

432 
dñè
;

433 
max_ticks
;

434 
n£cs
;

435 *
mu…
;

436 
ã°_ns
[
TESTLEN
] =

437 {
NSEC_ONE_SEC
, NSEC_ONE_SEC,

438 
NSEC_ONE_SEC
, NSEC_ONE_SEC*60, NSEC_ONE_SEC*60*60,

439 
NSEC_ONE_SEC
*60*60*2, NSEC_ONE_SEC*60*60*4,

440 
NSEC_ONE_SEC
*60*60*8, NSEC_ONE_SEC*60*60*24};

441 
ã°_ticks
[
TESTLEN
];

443 
max_ticks
 = 
MAX_CLOCK_SEC
 * (Ë
cy˛es_≥r_u£c
 * 1000000ULL;

445 
mode
) {

446 
CLOCK64_MULT_SHIFT
:

447 
mu…
 = &
˛ock_mu…
;

449 
CLOCK64_EMULATE_128
:

450 
mu…
 = 
˛ock_mu…64_128
;

452 
CLOCK64_2STAGE
:

453 
mu…
 = &
˛ock_mu…
;

455 
CLOCK64_LOCK
:

456 
mu…
 = &
˛ock_mu…
;

458 
CLOCK128_MULT_SHIFT
:

459 
mu…
 = &
˛ock_mu…128
;

462 
	`as£π
(0);

464 
	`ˇlc_mu…_shi·
(
mode
, 
mu…
, &
˛ock_shi·
, 
MAX_CLOCK_SEC
, 
cy˛es_≥r_u£c
);

465 
n£cs
 = 
	`gë_n£c
(
mode
, 
max_ticks
);

466 
dñè
 = 
n£cs
/1000000 - 
MAX_CLOCK_SEC
*1000;

468 i‡(
mode
 =
CLOCK64_2STAGE
) {

469 
ã°_ns
[0] = 
n£cs_f‹_max_cy˛es
 - 1;

470 
ã°_ns
[1] = 
n£cs_f‹_max_cy˛es
;

471 
ã°_ticks
[0] = (1ULL << 
max_cy˛es_shi·
) - 1;

472 
ã°_ticks
[1] = (1ULL << 
max_cy˛es_shi·
);

474 
i
 = 2; i < 
TESTLEN
; i++)

475 
ã°_ticks
[
i
] = 
ã°_ns
[i] / 1000 * 
cy˛es_≥r_u£c
;

478 
i
 = 0; i < 
TESTLEN
; i++)

479 
ã°_ticks
[
i
] = 
ã°_ns
[i] / 1000 * 
cy˛es_≥r_u£c
;

482 i‡(!
quõt
) {

483 
	`¥ötf
("cycles_per_usec=%d, delta_ticks=%d, delta_nsec=%d, max_ticks=%llu, shift=%u, 2^shift=%llu\n",

484 
cy˛es_≥r_u£c
, 
dñè_ticks
, 
dñè_n£c
, 
max_ticks
, 
˛ock_shi·
, (1ULL << clock_shift));

485 
mode
) {

486 
CLOCK64_LOCK
:

487 
CLOCK64_2STAGE
:

488 
CLOCK64_MULT_SHIFT
: {

489 
	`¥ötf
("clock_mult=%llu, clock_mult / 2^clock_shift=%f\n",

490 
˛ock_mu…
, (Ë˛ock_mu… / (1ULL << 
˛ock_shi·
));

493 
CLOCK64_EMULATE_128
: {

494 
	`¥ötf
("clock_mult=0x%016llx%016llx\n",

495 
˛ock_mu…64_128
[1], clock_mult64_128[0]);

498 
CLOCK128_MULT_SHIFT
: {

499 
	`¥ötf
("clock_mult=0x%016llx%016llx\n",

500 (Ë(
˛ock_mu…128
 >> 64),

501 (Ë
˛ock_mu…128
);

505 
	`¥ötf
("get_nsec(max_ticks) = %lluns, should be %lluns,Érror<=abs(%lld)ms\n",

506 
n£cs
, 
MAX_CLOCK_SEC
*1000000000ULL, 
dñè
);

509 
i
 = 0; i < 
TESTLEN
; i++)

511 
n£cs
 = 
	`gë_n£c
(
mode
, 
ã°_ticks
[
i
]);

512 
dñè
 = 
n£cs
 > 
ã°_ns
[
i
] ?Çsecs -Åest_ns[i] :Åest_ns[i] -Çsecs;

513 i‡(!
quõt
 || 
dñè
 > 0)

514 
	`¥ötf
("get_nsec(%llu)=%llu,Éxpected %llu, delta=%llu\n",

515 
ã°_ticks
[
i
], 
n£cs
, 
ã°_ns
[i], 
dñè
);

518 i‡(!
Á°_ã°
) {

519 
	`disc⁄töuôy
(
mode
, 
dñè_ticks
, 
dñè_n£c
, 
max_ticks
 - 
LEN
 + 1, LEN);

520 
	`disc⁄töuôy
(
mode
, 
dñè_ticks
, 
dñè_n£c
, 
MIN_TICKS
, 
LEN
);

523 i‡(!
quõt
)

524 
	`¥ötf
("\n\n");

526  
dñè
;

527 
	}
}

529 
	$maö
(
¨gc
, *
¨gv
[])

531 
n£cs
 = 
	`mÆloc
(
LEN
 * ());

533 
	`ã°_˛ock
(
CLOCK64_LOCK
, 3333, 1, 0, 0, 0);

534 
	`ã°_˛ock
(
CLOCK64_LOCK
, 1000, 1, 0, 1, 1);

535 
	`ã°_˛ock
(
CLOCK64_LOCK
, 1100, 1, 0, 11, 10);

536 
	`ã°_˛ock
(
CLOCK64_LOCK
, 3000, 1, 0, 3, 1);

537 
	`ã°_˛ock
(
CLOCK64_LOCK
, 3333, 1, 0, 3333, 1000);

538 
	`ã°_˛ock
(
CLOCK64_LOCK
, 3392, 1, 0, 424, 125);

539 
	`ã°_˛ock
(
CLOCK64_LOCK
, 4500, 1, 0, 9, 2);

540 
	`ã°_˛ock
(
CLOCK64_LOCK
, 5000, 1, 0, 5, 1);

542 
	`‰ì
(
n£cs
);

544 
	}
}

	@t/verify-state.c

4 
	~<sys/ty≥s.h
>

5 
	~<sys/°©.h
>

6 
	~<°dio.h
>

7 
	~<°dlib.h
>

8 
	~<uni°d.h
>

9 
	~<î∫o.h
>

10 
	~<f˙é.h
>

11 
	~<°rög.h
>

12 
	~"../log.h
"

13 
	~"../os/os.h
"

14 
	~"../vîify-°©e.h
"

15 
	~"../¸c/¸c32c.h
"

16 
	~"debug.h
"

18 
	$show_s
(
thªad_io_li°
 *
s
, 
no_s
)

20 
i
;

22 
	`¥ötf
("Thªad:\t\t%u\n", 
no_s
);

23 
	`¥ötf
("Name:\t\t%s\n", 
s
->
«me
);

24 
	`¥ötf
("Com∂ëi⁄s:\t%Œu\n", (Ë
s
->
no_comps
);

25 
	`¥ötf
("Dïth:\t\t%Œu\n", (Ë
s
->
dïth
);

26 
	`¥ötf
("Numbî IOs:\t%Œu\n", (Ë
s
->
numbîio
);

27 
	`¥ötf
("Index:\t\t%Œu\n", (Ë
s
->
ödex
);

29 
	`¥ötf
("Completions:\n");

30 i‡(!
s
->
no_comps
)

32 
i
 = 
s
->
no_comps
 - 1; i >= 0; i--) {

33 
	`¥ötf
("\t(file=%2llu) %llu\n",

34 (Ë
s
->
comps
[
i
].
fûío
,

35 (Ë
s
->
comps
[
i
].
off£t
);

37 
	}
}

39 
	$show
(
thªad_io_li°
 *
s
, 
size_t
 
size
)

41 
no_s
;

43 
no_s
 = 0;

45 
i
;

47 
s
->
no_comps
 = 
	`À64_to_˝u
(s->no_comps);

48 
s
->
dïth
 = 
	`À32_to_˝u
(s->depth);

49 
s
->
nofûes
 = 
	`À32_to_˝u
(s->nofiles);

50 
s
->
numbîio
 = 
	`À64_to_˝u
(s->numberio);

51 
s
->
ödex
 = 
	`À64_to_˝u
(s->index);

53 
i
 = 0; i < 
s
->
no_comps
; i++) {

54 
s
->
comps
[
i
].
fûío
 = 
	`À64_to_˝u
(s->comps[i].fileno);

55 
s
->
comps
[
i
].
off£t
 = 
	`À64_to_˝u
(s->comps[i].offset);

58 
	`show_s
(
s
, 
no_s
);

59 
no_s
++;

60 
size
 -
	`__thªad_io_li°_sz
(
s
->
dïth
, s->
nofûes
);

61 
s
 = (
thªad_io_li°
 *)((*) s +

62 
	`__thªad_io_li°_sz
(
s
->
dïth
, s->
nofûes
));

63 } 
size
 != 0);

64 
	}
}

66 
	$show_vîify_°©e
(*
buf
, 
size_t
 
size
)

68 
vîify_°©e_hdr
 *
hdr
 = 
buf
;

69 
thªad_io_li°
 *
s
;

70 
uöt32_t
 
¸c
;

72 
hdr
->
vîsi⁄
 = 
	`À64_to_˝u
(hdr->version);

73 
hdr
->
size
 = 
	`À64_to_˝u
(hdr->size);

74 
hdr
->
¸c
 = 
	`À64_to_˝u
(hdr->crc);

76 
	`¥ötf
("Vîsi⁄:\t0x%x\n", (Ë
hdr
->
vîsi⁄
);

77 
	`¥ötf
("Size:\t\t%u\n", (Ë
hdr
->
size
);

78 
	`¥ötf
("CRC:\t\t0x%x\n", (Ë
hdr
->
¸c
);

80 
size
 -(*
hdr
);

81 i‡(
hdr
->
size
 != size) {

82 
	`log_îr
("Size mismatch\n");

86 
s
 = 
buf
 + (*
hdr
);

87 
¸c
 = 
	`fio_¸c32c
((*Ë
s
, 
hdr
->
size
);

88 i‡(
¸c
 !
hdr
->crc) {

89 
	`log_îr
("¸¯mism©ch %x !%x\n", 
¸c
, (Ë
hdr
->crc);

93 i‡(
hdr
->
vîsi⁄
 == 0x03)

94 
	`show
(
s
, 
size
);

96 
	`log_îr
("Unsuµ‹ãd vîsi⁄ %d\n", (Ë
hdr
->
vîsi⁄
);

97 
	}
}

99 
	$show_fûe
(c⁄° *
fûe
)

101 
°©
 
sb
;

102 *
buf
;

103 
ªt
, 
fd
;

105 
fd
 = 
	`›í
(
fûe
, 
O_RDONLY
);

106 i‡(
fd
 < 0) {

107 
	`log_îr
("›í %s: %s\n", 
fûe
, 
	`°ªº‹
(
î∫o
));

111 i‡(
	`f°©
(
fd
, &
sb
) < 0) {

112 
	`log_îr
("°©: %s\n", 
	`°ªº‹
(
î∫o
));

113 
	`˛o£
(
fd
);

117 
buf
 = 
	`mÆloc
(
sb
.
°_size
);

118 
ªt
 = 
	`ªad
(
fd
, 
buf
, 
sb
.
°_size
);

119 i‡(
ªt
 < 0) {

120 
	`log_îr
("ªad: %s\n", 
	`°ªº‹
(
î∫o
));

121 
	`˛o£
(
fd
);

122 
	`‰ì
(
buf
);

124 } i‡(
ªt
 !
sb
.
°_size
) {

125 
	`log_îr
("ShortÑead\n");

126 
	`˛o£
(
fd
);

127 
	`‰ì
(
buf
);

131 
	`˛o£
(
fd
);

132 
	`show_vîify_°©e
(
buf
, 
sb
.
°_size
);

134 
	`‰ì
(
buf
);

136 
	}
}

138 
	$maö
(
¨gc
, *
¨gv
[])

140 
i
, 
ªt
;

142 
	`debug_öô
();

144 i‡(
¨gc
 < 2) {

145 
	`log_îr
("Ußge: %†<°©êfûe>\n", 
¨gv
[0]);

149 
ªt
 = 0;

150 
i
 = 1; i < 
¨gc
; i++) {

151 
ªt
 = 
	`show_fûe
(
¨gv
[
i
]);

152 i‡(
ªt
)

156  
ªt
;

157 
	}
}

	@td_error.c

1 
	~"fio.h
"

2 
	~"io_ddú.h
"

3 
	~"td_îr‹.h
"

5 
	g__NON_FATAL_ERR
[] = { 
EIO
, 
EILSEQ
 };

7 
îr‹_ty≥_bô
 
	$td_îr‹_ty≥
(
fio_ddú
 
ddú
, 
îr
)

9 i‡(
îr
 =
EILSEQ
)

10  
ERROR_TYPE_VERIFY_BIT
;

11 i‡(
ddú
 =
DDIR_READ
)

12  
ERROR_TYPE_READ_BIT
;

13  
ERROR_TYPE_WRITE_BIT
;

14 
	}
}

16 
	$td_n⁄_Áèl_îr‹
(
thªad_d©a
 *
td
, 
îr‹_ty≥_bô
 
ëy≥
,

17 
îr
)

19 
i
;

21 i‡(!
td
->
o
.
ign‹e_îr‹
[
ëy≥
]) {

22 
td
->
o
.
ign‹e_îr‹
[
ëy≥
] = 
__NON_FATAL_ERR
;

23 
td
->
o
.
ign‹e_îr‹_ƒ
[
ëy≥
] = 
	`FIO_ARRAY_SIZE
(
__NON_FATAL_ERR
);

26 i‡(!(
td
->
o
.
c⁄töue_⁄_îr‹
 & (1 << 
ëy≥
)))

28 
i
 = 0; i < 
td
->
o
.
ign‹e_îr‹_ƒ
[
ëy≥
]; i++)

29 i‡(
td
->
o
.
ign‹e_îr‹
[
ëy≥
][
i
] =
îr
)

33 
	}
}

35 
	$upd©e_îr‹_cou¡
(
thªad_d©a
 *
td
, 
îr
)

37 
td
->
tŸÆ_îr_cou¡
++;

38 i‡(
td
->
tŸÆ_îr_cou¡
 == 1)

39 
td
->
fú°_îr‹
 = 
îr
;

40 
	}
}

	@td_error.h

1 #i‚de‡
FIO_TD_ERROR_H


2 
	#FIO_TD_ERROR_H


	)

4 
	~"io_ddú.h
"

10 
	eîr‹_ty≥_bô
 {

11 
	mERROR_TYPE_READ_BIT
 = 0,

12 
	mERROR_TYPE_WRITE_BIT
 = 1,

13 
	mERROR_TYPE_VERIFY_BIT
 = 2,

14 
	mERROR_TYPE_CNT
 = 3,

17 
	eîr‹_ty≥
 {

18 
	mERROR_TYPE_NONE
 = 0,

19 
	mERROR_TYPE_READ
 = 1 << 
ERROR_TYPE_READ_BIT
,

20 
	mERROR_TYPE_WRITE
 = 1 << 
ERROR_TYPE_WRITE_BIT
,

21 
	mERROR_TYPE_VERIFY
 = 1 << 
ERROR_TYPE_VERIFY_BIT
,

22 
	mERROR_TYPE_ANY
 = 0xffff,

25 
îr‹_ty≥_bô
 
td_îr‹_ty≥
(
fio_ddú
 
ddú
, 
îr
);

26 
td_n⁄_Áèl_îr‹
(
thªad_d©a
 *
td
, 
îr‹_ty≥_bô
 
ëy≥
,

27 
îr
);

28 
upd©e_îr‹_cou¡
(
thªad_d©a
 *
td
, 
îr
);

	@thread_options.h

1 #i‚de‡
FIO_THREAD_OPTIONS_H


2 
	#FIO_THREAD_OPTIONS_H


	)

4 
	~"¨ch/¨ch.h
"

5 
	~"os/os.h
"

6 
	~"›ti⁄s.h
"

7 
	~"°©.h
"

8 
	~"gëtime.h
"

9 
	~"lib/õì754.h
"

10 
	~"lib/∑âîn.h
"

11 
	~"td_îr‹.h
"

13 
	efio_z⁄e_mode
 {

14 
	mZONE_MODE_NOT_SPECIFIED
 = 0,

15 
	mZONE_MODE_NONE
 = 1,

16 
	mZONE_MODE_STRIDED
 = 2,

18 
	mZONE_MODE_ZBD
 = 3,

24 
	efio_memty≥
 {

25 
	mMEM_MALLOC
 = 0,

26 
	mMEM_SHM
,

27 
	mMEM_SHMHUGE
,

28 
	mMEM_MMAP
,

29 
	mMEM_MMAPHUGE
,

30 
	mMEM_MMAPSHARED
,

31 
	mMEM_CUDA_MALLOC
,

37 
	ededu≥_mode
 {

38 
	mDEDUPE_MODE_REPEAT
 = 0,

39 
	mDEDUPE_MODE_WORKING_SET
 = 1,

42 
	#ERROR_STR_MAX
 128

	)

44 
	#BSSPLIT_MAX
 64

	)

45 
	#ZONESPLIT_MAX
 256

	)

47 
	s•lô
 {

48 
	mƒ
;

49 
	mvÆ1
[
ZONESPLIT_MAX
];

50 
	mvÆ2
[
ZONESPLIT_MAX
];

53 
	s•lô_¥io
 {

54 
uöt64_t
 
	mbs
;

55 
öt32_t
 
	m¥io
;

56 
uöt32_t
 
	m≥rc
;

59 
	sbs•lô
 {

60 
uöt64_t
 
	mbs
;

61 
uöt32_t
 
	m≥rc
;

64 
	sz⁄e_•lô
 {

65 
uöt8_t
 
	mac˚ss_≥rc
;

66 
uöt8_t
 
	msize_≥rc
;

67 
uöt8_t
 
	m∑d
[6];

68 
uöt64_t
 
	msize
;

71 
	#NR_OPTS_SZ
 (
FIO_MAX_OPTS
 / (8 * (
uöt64_t
)))

	)

73 
	#OPT_MAGIC
 0x4f50544e

	)

75 
	sthªad_›ti⁄s
 {

76 
	mmagic
;

77 
uöt64_t
 
	m£t_›ti⁄s
[
NR_OPTS_SZ
];

78 *
	mdes¸ùti⁄
;

79 *
	m«me
;

80 *
	mwaô_f‹
;

81 *
	mdúe˘‹y
;

82 *
	mfûíame
;

83 *
	mfûíame_f‹m©
;

84 *
	m›ídú
;

85 *
	mi€ngöe
;

86 *
	mi€ngöe_so_∑th
;

87 *
	mmm≠fûe
;

88 
td_ddú
 
	mtd_ddú
;

89 
	mrw_£q
;

90 
	mkb_ba£
;

91 
	munô_ba£
;

92 
	mddú_£q_ƒ
;

93 
	mddú_£q_add
;

94 
	miodïth
;

95 
	miodïth_low
;

96 
	miodïth_b©ch
;

97 
	miodïth_b©ch_com∂ëe_mö
;

98 
	miodïth_b©ch_com∂ëe_max
;

99 
	m£rülize_ovîœp
;

101 
	munique_fûíame
;

103 
	msize
;

104 
	mio_size
;

105 
	msize_≥r˚¡
;

106 
	msize_nz
;

107 
	mio_size_≥r˚¡
;

108 
	mio_size_nz
;

109 
	mfûl_devi˚
;

110 
	mfûe_≠≥nd
;

111 
	mfûe_size_low
;

112 
	mfûe_size_high
;

113 
	m°¨t_off£t
;

114 
	m°¨t_off£t_Æign
;

115 
	m°¨t_off£t_nz
;

117 
	mbs
[
DDIR_RWDIR_CNT
];

118 
	mba
[
DDIR_RWDIR_CNT
];

119 
	mmö_bs
[
DDIR_RWDIR_CNT
];

120 
	mmax_bs
[
DDIR_RWDIR_CNT
];

121 
bs•lô
 *
	mbs•lô
[
DDIR_RWDIR_CNT
];

122 
	mbs•lô_ƒ
[
DDIR_RWDIR_CNT
];

124 *
	mign‹e_îr‹
[
ERROR_TYPE_CNT
];

125 
	mign‹e_îr‹_ƒ
[
ERROR_TYPE_CNT
];

126 
	mîr‹_dump
;

128 
	mƒ_fûes
;

129 
	m›í_fûes
;

130 
fûe_lock_mode
 
	mfûe_lock_mode
;

132 
	modúe˘
;

133 
	mﬂtomic
;

134 
	mövÆid©e_ˇche
;

135 
	m¸óã_£rülize
;

136 
	m¸óã_fsync
;

137 
	m¸óã_⁄_›í
;

138 
	m¸óã_⁄ly
;

139 
	míd_fsync
;

140 
	m¥e_ªad
;

141 
	msync_io
;

142 
	mwrôe_höt
;

143 
	mvîify
;

144 
	mdo_vîify
;

145 
	mvîify_öãrvÆ
;

146 
	mvîify_off£t
;

147 
	mvîify_∑âîn
[
MAX_PATTERN_SIZE
];

148 
	mvîify_∑âîn_byãs
;

149 
∑âîn_fmt
 
	mvîify_fmt
[8];

150 
	mvîify_fmt_sz
;

151 
	mvîify_Áèl
;

152 
	mvîify_dump
;

153 
	mvîify_async
;

154 
	mvîify_backlog
;

155 
	mvîify_b©ch
;

156 
	mex≥rimíèl_vîify
;

157 
	mvîify_°©e
;

158 
	mvîify_°©e_ßve
;

159 
	mu£_thªad
;

160 
	mu∆ök
;

161 
	mu∆ök_óch_lo›
;

162 
	mdo_disk_utû
;

163 
	movîride_sync
;

164 
	mønd_ª≥©abÀ
;

165 
	mÆÃ™d_ª≥©abÀ
;

166 
	mønd_£ed
;

167 
	mlog_avg_m£c
;

168 
	mlog_hi°_m£c
;

169 
	mlog_hi°_cﬂr£√ss
;

170 
	mlog_max
;

171 
	mlog_off£t
;

172 
	mlog_gz
;

173 
	mlog_gz_°‹e
;

174 
	mlog_unix_ïoch
;

175 
	mlog_Æã∫©e_ïoch
;

176 
	mlog_Æã∫©e_ïoch_˛ock_id
;

177 
	mn‹™domm≠
;

178 
	mso·øndomm≠
;

179 
	mbs_u«lig√d
;

180 
	mfsync_⁄_˛o£
;

181 
	mbs_is_£q_ønd
;

183 
	mvîify_⁄ly
;

185 
	møndom_di°ributi⁄
;

186 
	mexôÆl_îr‹
;

188 
z⁄e_•lô
 *
	mz⁄e_•lô
[
DDIR_RWDIR_CNT
];

189 
	mz⁄e_•lô_ƒ
[
DDIR_RWDIR_CNT
];

191 
fio_Â64_t
 
	mzùf_thëa
;

192 
fio_Â64_t
 
	m∑ªto_h
;

193 
fio_Â64_t
 
	mgauss_dev
;

194 
fio_Â64_t
 
	møndom_˚¡î
;

196 
	møndom_gíî©‹
;

198 
	m≥rc_ønd
[
DDIR_RWDIR_CNT
];

200 
	mhugïage_size
;

201 
	mrw_mö_bs
;

202 
	mfsync_blocks
;

203 
	mfd©async_blocks
;

204 
	mb¨rõr_blocks
;

205 
	m°¨t_dñay
;

206 
	m°¨t_dñay_‹ig
;

207 
	m°¨t_dñay_high
;

208 
	mtimeout
;

209 
	mømp_time
;

210 
	mss_°©e
;

211 
fio_Â64_t
 
	mss_limô
;

212 
	mss_dur
;

213 
	mss_ømp_time
;

214 
	movîwrôe
;

215 
	mbw_avg_time
;

216 
	mi›s_avg_time
;

217 
	mlo›s
;

218 
	mz⁄e_ønge
;

219 
	mz⁄e_size
;

220 
	mz⁄e_ˇ∑côy
;

221 
	mz⁄e_skù
;

222 
uöt32_t
 
	mz⁄e_skù_nz
;

223 
fio_z⁄e_mode
 
	mz⁄e_mode
;

224 
	mlockmem
;

225 
fio_memty≥
 
	mmem_ty≥
;

226 
	mmem_Æign
;

228 
	mmax_œãncy
[
DDIR_RWDIR_CNT
];

230 
	mexô_wh©
;

231 
	m°⁄ewÆl
;

232 
	m√w_group
;

233 
	mnumjobs
;

234 
os_˝u_mask_t
 
	m˝umask
;

235 
os_˝u_mask_t
 
	mvîify_˝umask
;

236 
os_˝u_mask_t
 
	mlog_gz_˝umask
;

237 
	m˝us_Ælowed_pﬁicy
;

238 *
	mnuma_˝unodes
;

239 
	mnuma_mem_mode
;

240 
	mnuma_mem_¥e„r_node
;

241 *
	mnuma_memnodes
;

242 
	mgpu_dev_id
;

243 
	m°¨t_off£t_≥r˚¡
;

245 
	miﬁog
;

246 
	mrwmixcy˛e
;

247 
	mrwmix
[
DDIR_RWDIR_CNT
];

248 
	mni˚
;

249 
	mi›rio
;

250 
	mi›rio_˛ass
;

251 
	mfûe_£rvi˚_ty≥
;

252 
	mgroup_ªp‹tög
;

253 
	m°©s
;

254 
	mÁdvi£_höt
;

255 
fio_ÁŒoˇã_mode
 
	mÁŒoˇã_mode
;

256 
	mzîo_buf„rs
;

257 
	mªfûl_buf„rs
;

258 
	ms¸ambÀ_buf„rs
;

259 
	mbuf„r_∑âîn
[
MAX_PATTERN_SIZE
];

260 
	mbuf„r_∑âîn_byãs
;

261 
	mcom¥ess_≥r˚¡age
;

262 
	mcom¥ess_chunk
;

263 
	mdedu≥_≥r˚¡age
;

264 
	mdedu≥_mode
;

265 
	mdedu≥_w‹kög_£t_≥r˚¡age
;

266 
	mdedu≥_globÆ
;

267 
	mtime_ba£d
;

268 
	mdißbÀ_œt
;

269 
	mdißbÀ_˛©
;

270 
	mdißbÀ_¶©
;

271 
	mdißbÀ_bw
;

272 
	munifõd_rw_ªp
;

273 
	mgtod_ªdu˚
;

274 
	mgtod_˝u
;

275 
fio_cs
 
	m˛ocksour˚
;

276 
	mno_°Æl
;

277 
	måim_≥r˚¡age
;

278 
	måim_b©ch
;

279 
	måim_zîo
;

280 
	måim_backlog
;

281 
	m˛©_≥r˚¡ûes
;

282 
	m¶©_≥r˚¡ûes
;

283 
	mœt_≥r˚¡ûes
;

284 
	m≥r˚¡ûe_¥ecisi⁄
;

285 
fio_Â64_t
 
	m≥r˚¡ûe_li°
[
FIO_IO_U_LIST_MAX_LEN
];

287 *
	mªad_iﬁog_fûe
;

288 
boﬁ
 
	mªad_iﬁog_chunked
;

289 *
	mwrôe_iﬁog_fûe
;

290 *
	mmîge_blkåa˚_fûe
;

291 
fio_Â64_t
 
	mmîge_blkåa˚_sˇœrs
[
FIO_IO_U_LIST_MAX_LEN
];

292 
fio_Â64_t
 
	mmîge_blkåa˚_ôîs
[
FIO_IO_U_LIST_MAX_LEN
];

294 
	mwrôe_bw_log
;

295 
	mwrôe_œt_log
;

296 
	mwrôe_i›s_log
;

297 
	mwrôe_hi°_log
;

299 *
	mbw_log_fûe
;

300 *
	mœt_log_fûe
;

301 *
	mi›s_log_fûe
;

302 *
	mhi°_log_fûe
;

303 *
	mª∂ay_ªdúe˘
;

308 *
	mexec_¥îun
;

309 *
	mexec_po°run
;

311 
	mthöktime
;

312 
	mthöktime_•ö
;

313 
	mthöktime_blocks
;

314 
	mthöktime_blocks_ty≥
;

315 
	mthöktime_iŸime
;

317 
uöt64_t
 
	møã
[
DDIR_RWDIR_CNT
];

318 
uöt64_t
 
	møãmö
[
DDIR_RWDIR_CNT
];

319 
	møãcy˛e
;

320 
	mio_submô_mode
;

321 
	møã_i›s
[
DDIR_RWDIR_CNT
];

322 
	møã_i›s_mö
[
DDIR_RWDIR_CNT
];

323 
	møã_¥o˚ss
;

324 
	møã_ign_thök
;

326 *
	mioscheduÀr
;

331 
îr‹_ty≥
 
	mc⁄töue_⁄_îr‹
;

336 *
	m¥ofûe
;

341 *
	mcgroup
;

342 
	mcgroup_weight
;

343 
	mcgroup_nodñëe
;

345 
	muid
;

346 
	mgid
;

348 
	moff£t_ö¸emít_≥r˚¡
;

349 
	moff£t_ö¸emít_nz
;

350 
	moff£t_ö¸emít
;

351 
	mnumbî_ios
;

353 
	msync_fûe_ønge
;

355 
	mœãncy_èrgë
;

356 
	mœãncy_wödow
;

357 
fio_Â64_t
 
	mœãncy_≥r˚¡ûe
;

358 
uöt32_t
 
	mœãncy_run
;

363 
	mÊow_id
;

364 
	mÊow
;

365 
	mÊow_¶ìp
;

367 
	msig_figs
;

369 
	mblock_îr‹_hi°
;

371 
	mª∂ay_Æign
;

372 
	mª∂ay_sˇÀ
;

373 
	mª∂ay_time_sˇÀ
;

374 
	mª∂ay_skù
;

376 
	m≥r_job_logs
;

378 
	mÆlow_¸óã
;

379 
	mÆlow_mou¡ed_wrôe
;

382 
	mªad_bey⁄d_wp
;

383 
	mmax_›í_z⁄es
;

384 
	mjob_max_›í_z⁄es
;

385 
	mign‹e_z⁄e_limôs
;

386 
fio_Â64_t
 
	mzπ
;

387 
fio_Â64_t
 
	mzrf
;

389 
	mlog_íåõs
;

390 
	mlog_¥io
;

393 
	#FIO_TOP_STR_MAX
 256

	)

395 
	sthªad_›ti⁄s_∑ck
 {

396 
uöt64_t
 
	m£t_›ti⁄s
[
NR_OPTS_SZ
];

397 
uöt8_t
 
	mdes¸ùti⁄
[
FIO_TOP_STR_MAX
];

398 
uöt8_t
 
	m«me
[
FIO_TOP_STR_MAX
];

399 
uöt8_t
 
	mwaô_f‹
[
FIO_TOP_STR_MAX
];

400 
uöt8_t
 
	mdúe˘‹y
[
FIO_TOP_STR_MAX
];

401 
uöt8_t
 
	mfûíame
[
FIO_TOP_STR_MAX
];

402 
uöt8_t
 
	mfûíame_f‹m©
[
FIO_TOP_STR_MAX
];

403 
uöt8_t
 
	m›ídú
[
FIO_TOP_STR_MAX
];

404 
uöt8_t
 
	mi€ngöe
[
FIO_TOP_STR_MAX
];

405 
uöt8_t
 
	mmm≠fûe
[
FIO_TOP_STR_MAX
];

406 
uöt32_t
 
	mtd_ddú
;

407 
uöt32_t
 
	mrw_£q
;

408 
uöt32_t
 
	mkb_ba£
;

409 
uöt32_t
 
	munô_ba£
;

410 
uöt32_t
 
	mddú_£q_ƒ
;

411 
uöt64_t
 
	mddú_£q_add
;

412 
uöt32_t
 
	miodïth
;

413 
uöt32_t
 
	miodïth_low
;

414 
uöt32_t
 
	miodïth_b©ch
;

415 
uöt32_t
 
	miodïth_b©ch_com∂ëe_mö
;

416 
uöt32_t
 
	miodïth_b©ch_com∂ëe_max
;

417 
uöt32_t
 
	m£rülize_ovîœp
;

418 
uöt32_t
 
	m∑d
;

420 
uöt64_t
 
	msize
;

421 
uöt64_t
 
	mio_size
;

422 
uöt32_t
 
	msize_≥r˚¡
;

423 
uöt32_t
 
	msize_nz
;

424 
uöt32_t
 
	mio_size_≥r˚¡
;

425 
uöt32_t
 
	mio_size_nz
;

426 
uöt32_t
 
	mfûl_devi˚
;

427 
uöt32_t
 
	mfûe_≠≥nd
;

428 
uöt32_t
 
	munique_fûíame
;

429 
uöt32_t
 
	m∑d3
;

430 
uöt64_t
 
	mfûe_size_low
;

431 
uöt64_t
 
	mfûe_size_high
;

432 
uöt64_t
 
	m°¨t_off£t
;

433 
uöt64_t
 
	m°¨t_off£t_Æign
;

434 
uöt32_t
 
	m°¨t_off£t_nz
;

435 
uöt32_t
 
	m∑d4
;

437 
uöt64_t
 
	mbs
[
DDIR_RWDIR_CNT
];

438 
uöt64_t
 
	mba
[
DDIR_RWDIR_CNT
];

439 
uöt64_t
 
	mmö_bs
[
DDIR_RWDIR_CNT
];

440 
uöt64_t
 
	mmax_bs
[
DDIR_RWDIR_CNT
];

441 
bs•lô
 
	mbs•lô
[
DDIR_RWDIR_CNT
][
BSSPLIT_MAX
];

442 
uöt32_t
 
	mbs•lô_ƒ
[
DDIR_RWDIR_CNT
];

444 
uöt32_t
 
	mign‹e_îr‹
[
ERROR_TYPE_CNT
][
ERROR_STR_MAX
];

445 
uöt32_t
 
	mign‹e_îr‹_ƒ
[
ERROR_TYPE_CNT
];

446 
uöt32_t
 
	mîr‹_dump
;

448 
uöt32_t
 
	mƒ_fûes
;

449 
uöt32_t
 
	m›í_fûes
;

450 
uöt32_t
 
	mfûe_lock_mode
;

452 
uöt32_t
 
	modúe˘
;

453 
uöt32_t
 
	mﬂtomic
;

454 
uöt32_t
 
	mövÆid©e_ˇche
;

455 
uöt32_t
 
	m¸óã_£rülize
;

456 
uöt32_t
 
	m¸óã_fsync
;

457 
uöt32_t
 
	m¸óã_⁄_›í
;

458 
uöt32_t
 
	m¸óã_⁄ly
;

459 
uöt32_t
 
	míd_fsync
;

460 
uöt32_t
 
	m¥e_ªad
;

461 
uöt32_t
 
	msync_io
;

462 
uöt32_t
 
	mwrôe_höt
;

463 
uöt32_t
 
	mvîify
;

464 
uöt32_t
 
	mdo_vîify
;

465 
uöt32_t
 
	mvîify_öãrvÆ
;

466 
uöt32_t
 
	mvîify_off£t
;

467 
uöt8_t
 
	mvîify_∑âîn
[
MAX_PATTERN_SIZE
];

468 
uöt32_t
 
	mvîify_∑âîn_byãs
;

469 
uöt32_t
 
	mvîify_Áèl
;

470 
uöt32_t
 
	mvîify_dump
;

471 
uöt32_t
 
	mvîify_async
;

472 
uöt64_t
 
	mvîify_backlog
;

473 
uöt32_t
 
	mvîify_b©ch
;

474 
uöt32_t
 
	mex≥rimíèl_vîify
;

475 
uöt32_t
 
	mvîify_°©e
;

476 
uöt32_t
 
	mvîify_°©e_ßve
;

477 
uöt32_t
 
	mu£_thªad
;

478 
uöt32_t
 
	mu∆ök
;

479 
uöt32_t
 
	mu∆ök_óch_lo›
;

480 
uöt32_t
 
	mdo_disk_utû
;

481 
uöt32_t
 
	movîride_sync
;

482 
uöt32_t
 
	mønd_ª≥©abÀ
;

483 
uöt32_t
 
	mÆÃ™d_ª≥©abÀ
;

484 
uöt32_t
 
	m∑d2
;

485 
uöt64_t
 
	mønd_£ed
;

486 
uöt32_t
 
	mlog_avg_m£c
;

487 
uöt32_t
 
	mlog_hi°_m£c
;

488 
uöt32_t
 
	mlog_hi°_cﬂr£√ss
;

489 
uöt32_t
 
	mlog_max
;

490 
uöt32_t
 
	mlog_off£t
;

491 
uöt32_t
 
	mlog_gz
;

492 
uöt32_t
 
	mlog_gz_°‹e
;

493 
uöt32_t
 
	mlog_unix_ïoch
;

494 
uöt32_t
 
	mlog_Æã∫©e_ïoch
;

495 
uöt32_t
 
	mlog_Æã∫©e_ïoch_˛ock_id
;

496 
uöt32_t
 
	mn‹™domm≠
;

497 
uöt32_t
 
	mso·øndomm≠
;

498 
uöt32_t
 
	mbs_u«lig√d
;

499 
uöt32_t
 
	mfsync_⁄_˛o£
;

500 
uöt32_t
 
	mbs_is_£q_ønd
;

502 
uöt32_t
 
	møndom_di°ributi⁄
;

503 
uöt32_t
 
	mexôÆl_îr‹
;

505 
uöt32_t
 
	msync_fûe_ønge
;

507 
z⁄e_•lô
 
	mz⁄e_•lô
[
DDIR_RWDIR_CNT
][
ZONESPLIT_MAX
];

508 
uöt32_t
 
	mz⁄e_•lô_ƒ
[
DDIR_RWDIR_CNT
];

510 
fio_Â64_t
 
	mzùf_thëa
;

511 
fio_Â64_t
 
	m∑ªto_h
;

512 
fio_Â64_t
 
	mgauss_dev
;

513 
fio_Â64_t
 
	møndom_˚¡î
;

515 
uöt32_t
 
	møndom_gíî©‹
;

517 
uöt32_t
 
	m≥rc_ønd
[
DDIR_RWDIR_CNT
];

519 
uöt32_t
 
	mhugïage_size
;

520 
uöt64_t
 
	mrw_mö_bs
;

521 
uöt32_t
 
	mfsync_blocks
;

522 
uöt32_t
 
	mfd©async_blocks
;

523 
uöt32_t
 
	mb¨rõr_blocks
;

524 
uöt64_t
 
	m°¨t_dñay
;

525 
uöt64_t
 
	m°¨t_dñay_high
;

526 
uöt64_t
 
	mtimeout
;

527 
uöt64_t
 
	mømp_time
;

528 
uöt64_t
 
	mss_dur
;

529 
uöt64_t
 
	mss_ømp_time
;

530 
uöt32_t
 
	mss_°©e
;

531 
fio_Â64_t
 
	mss_limô
;

532 
uöt32_t
 
	movîwrôe
;

533 
uöt32_t
 
	mbw_avg_time
;

534 
uöt32_t
 
	mi›s_avg_time
;

535 
uöt32_t
 
	mlo›s
;

536 
uöt64_t
 
	mz⁄e_ønge
;

537 
uöt64_t
 
	mz⁄e_size
;

538 
uöt64_t
 
	mz⁄e_ˇ∑côy
;

539 
uöt64_t
 
	mz⁄e_skù
;

540 
uöt64_t
 
	mlockmem
;

541 
uöt32_t
 
	mz⁄e_skù_nz
;

542 
uöt32_t
 
	mmem_ty≥
;

543 
uöt32_t
 
	mmem_Æign
;

545 
uöt32_t
 
	mexô_wh©
;

546 
uöt32_t
 
	m°⁄ewÆl
;

547 
uöt32_t
 
	m√w_group
;

548 
uöt32_t
 
	mnumjobs
;

554 
uöt8_t
 
	m˝umask
[
FIO_TOP_STR_MAX
];

555 
uöt8_t
 
	mvîify_˝umask
[
FIO_TOP_STR_MAX
];

556 
uöt8_t
 
	mlog_gz_˝umask
[
FIO_TOP_STR_MAX
];

558 
uöt32_t
 
	mgpu_dev_id
;

559 
uöt32_t
 
	m°¨t_off£t_≥r˚¡
;

560 
uöt32_t
 
	m˝us_Ælowed_pﬁicy
;

561 
uöt32_t
 
	miﬁog
;

562 
uöt32_t
 
	mrwmixcy˛e
;

563 
uöt32_t
 
	mrwmix
[
DDIR_RWDIR_CNT
];

564 
uöt32_t
 
	mni˚
;

565 
uöt32_t
 
	mi›rio
;

566 
uöt32_t
 
	mi›rio_˛ass
;

567 
uöt32_t
 
	mfûe_£rvi˚_ty≥
;

568 
uöt32_t
 
	mgroup_ªp‹tög
;

569 
uöt32_t
 
	m°©s
;

570 
uöt32_t
 
	mÁdvi£_höt
;

571 
uöt32_t
 
	mÁŒoˇã_mode
;

572 
uöt32_t
 
	mzîo_buf„rs
;

573 
uöt32_t
 
	mªfûl_buf„rs
;

574 
uöt32_t
 
	ms¸ambÀ_buf„rs
;

575 
uöt8_t
 
	mbuf„r_∑âîn
[
MAX_PATTERN_SIZE
];

576 
uöt32_t
 
	mbuf„r_∑âîn_byãs
;

577 
uöt32_t
 
	mcom¥ess_≥r˚¡age
;

578 
uöt32_t
 
	mcom¥ess_chunk
;

579 
uöt32_t
 
	mdedu≥_≥r˚¡age
;

580 
uöt32_t
 
	mdedu≥_mode
;

581 
uöt32_t
 
	mdedu≥_w‹kög_£t_≥r˚¡age
;

582 
uöt32_t
 
	mdedu≥_globÆ
;

583 
uöt32_t
 
	mtime_ba£d
;

584 
uöt32_t
 
	mdißbÀ_œt
;

585 
uöt32_t
 
	mdißbÀ_˛©
;

586 
uöt32_t
 
	mdißbÀ_¶©
;

587 
uöt32_t
 
	mdißbÀ_bw
;

588 
uöt32_t
 
	munifõd_rw_ªp
;

589 
uöt32_t
 
	mgtod_ªdu˚
;

590 
uöt32_t
 
	mgtod_˝u
;

591 
uöt32_t
 
	m˛ocksour˚
;

592 
uöt32_t
 
	mno_°Æl
;

593 
uöt32_t
 
	måim_≥r˚¡age
;

594 
uöt32_t
 
	måim_b©ch
;

595 
uöt32_t
 
	måim_zîo
;

596 
uöt64_t
 
	måim_backlog
;

597 
uöt32_t
 
	m˛©_≥r˚¡ûes
;

598 
uöt32_t
 
	mœt_≥r˚¡ûes
;

599 
uöt32_t
 
	m¶©_≥r˚¡ûes
;

600 
uöt32_t
 
	m≥r˚¡ûe_¥ecisi⁄
;

601 
uöt32_t
 
	m∑d5
;

602 
fio_Â64_t
 
	m≥r˚¡ûe_li°
[
FIO_IO_U_LIST_MAX_LEN
];

604 
uöt8_t
 
	mªad_iﬁog_fûe
[
FIO_TOP_STR_MAX
];

605 
uöt8_t
 
	mwrôe_iﬁog_fûe
[
FIO_TOP_STR_MAX
];

606 
uöt8_t
 
	mmîge_blkåa˚_fûe
[
FIO_TOP_STR_MAX
];

607 
fio_Â64_t
 
	mmîge_blkåa˚_sˇœrs
[
FIO_IO_U_LIST_MAX_LEN
];

608 
fio_Â64_t
 
	mmîge_blkåa˚_ôîs
[
FIO_IO_U_LIST_MAX_LEN
];

610 
uöt32_t
 
	mwrôe_bw_log
;

611 
uöt32_t
 
	mwrôe_œt_log
;

612 
uöt32_t
 
	mwrôe_i›s_log
;

613 
uöt32_t
 
	mwrôe_hi°_log
;

615 
uöt8_t
 
	mbw_log_fûe
[
FIO_TOP_STR_MAX
];

616 
uöt8_t
 
	mœt_log_fûe
[
FIO_TOP_STR_MAX
];

617 
uöt8_t
 
	mi›s_log_fûe
[
FIO_TOP_STR_MAX
];

618 
uöt8_t
 
	mhi°_log_fûe
[
FIO_TOP_STR_MAX
];

619 
uöt8_t
 
	mª∂ay_ªdúe˘
[
FIO_TOP_STR_MAX
];

624 
uöt8_t
 
	mexec_¥îun
[
FIO_TOP_STR_MAX
];

625 
uöt8_t
 
	mexec_po°run
[
FIO_TOP_STR_MAX
];

627 
uöt32_t
 
	mthöktime
;

628 
uöt32_t
 
	mthöktime_•ö
;

629 
uöt32_t
 
	mthöktime_blocks
;

630 
uöt32_t
 
	mthöktime_blocks_ty≥
;

631 
uöt32_t
 
	mthöktime_iŸime
;

633 
uöt64_t
 
	møã
[
DDIR_RWDIR_CNT
];

634 
uöt64_t
 
	møãmö
[
DDIR_RWDIR_CNT
];

635 
uöt32_t
 
	møãcy˛e
;

636 
uöt32_t
 
	mio_submô_mode
;

637 
uöt32_t
 
	møã_i›s
[
DDIR_RWDIR_CNT
];

638 
uöt32_t
 
	møã_i›s_mö
[
DDIR_RWDIR_CNT
];

639 
uöt32_t
 
	møã_¥o˚ss
;

640 
uöt32_t
 
	møã_ign_thök
;

642 
uöt8_t
 
	mioscheduÀr
[
FIO_TOP_STR_MAX
];

647 
uöt32_t
 
	mc⁄töue_⁄_îr‹
;

652 
uöt8_t
 
	m¥ofûe
[
FIO_TOP_STR_MAX
];

657 
uöt8_t
 
	mcgroup
[
FIO_TOP_STR_MAX
];

658 
uöt32_t
 
	mcgroup_weight
;

659 
uöt32_t
 
	mcgroup_nodñëe
;

661 
uöt32_t
 
	muid
;

662 
uöt32_t
 
	mgid
;

664 
uöt32_t
 
	moff£t_ö¸emít_≥r˚¡
;

665 
uöt32_t
 
	moff£t_ö¸emít_nz
;

666 
uöt64_t
 
	moff£t_ö¸emít
;

667 
uöt64_t
 
	mnumbî_ios
;

669 
uöt64_t
 
	mœãncy_èrgë
;

670 
uöt64_t
 
	mœãncy_wödow
;

671 
uöt64_t
 
	mmax_œãncy
[
DDIR_RWDIR_CNT
];

672 
fio_Â64_t
 
	mœãncy_≥r˚¡ûe
;

673 
uöt32_t
 
	mœãncy_run
;

678 
öt32_t
 
	mÊow_id
;

679 
uöt32_t
 
	mÊow
;

680 
uöt32_t
 
	mÊow_¶ìp
;

682 
uöt32_t
 
	msig_figs
;

684 
uöt32_t
 
	mblock_îr‹_hi°
;

686 
uöt32_t
 
	mª∂ay_Æign
;

687 
uöt32_t
 
	mª∂ay_sˇÀ
;

688 
uöt32_t
 
	mª∂ay_time_sˇÀ
;

689 
uöt32_t
 
	mª∂ay_skù
;

691 
uöt32_t
 
	m≥r_job_logs
;

693 
uöt32_t
 
	mÆlow_¸óã
;

694 
uöt32_t
 
	mÆlow_mou¡ed_wrôe
;

696 
uöt32_t
 
	mz⁄e_mode
;

697 
öt32_t
 
	mmax_›í_z⁄es
;

698 
uöt32_t
 
	mign‹e_z⁄e_limôs
;

700 
uöt32_t
 
	mlog_íåõs
;

701 
uöt32_t
 
	mlog_¥io
;

702 } 
__©åibuã__
((
∑cked
));

704 
c⁄vît_thªad_›ti⁄s_to_˝u
(
thªad_›ti⁄s
 *
o
, 
thªad_›ti⁄s_∑ck
 *
t›
);

705 
c⁄vît_thªad_›ti⁄s_to_√t
(
thªad_›ti⁄s_∑ck
 *
t›
, 
thªad_›ti⁄s
 *);

706 
fio_ã°_cc⁄v
(
thªad_›ti⁄s
 *);

707 
›ti⁄s_deÁu…_fûl
(
thªad_›ti⁄s
 *
o
);

709 (
	t•lô_∑r£_‚
)(
	tthªad_›ti⁄s
 *, *,

710 
	tfio_ddú
, *, 
	tboﬁ
);

712 
	`°r_•lô_∑r£
(
thªad_d©a
 *
td
, *
°r
,

713 
•lô_∑r£_‚
 *
‚
, *
eo
, 
boﬁ
 
d©a
);

715 
	`•lô_∑r£_ddú
(
thªad_›ti⁄s
 *
o
, 
•lô
 *split,

716 *
°r
, 
boﬁ
 
absﬁuã
, 
max_•lôs
);

718 
	`•lô_∑r£_¥io_ddú
(
thªad_›ti⁄s
 *
o
,

719 
•lô_¥io
 **
íåõs
, *
ƒ_íåõs
,

720 *
°r
);

	@tickmarks.c

1 
	~<°dio.h
>

2 
	~<m©h.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

13 
	~"tickm¨ks.h
"

15 
	#MAX
(
a
, 
b
Ë((◊Ë< (b)Ë? (bË: (a))

	)

17 
	$ni˚num
(
x
, 
round
)

19 
exp
;

20 
f
;

22 
exp
 = 
	`Êo‹
(
	`log10
(
x
));

23 
f
 = 
x
 / 
	`pow
(10.0, 
exp
);

24 i‡(
round
) {

25 i‡(
f
 < 1.5)

26  1.0 * 
	`pow
(10.0, 
exp
);

27 i‡(
f
 < 3.0)

28  2.0 * 
	`pow
(10.0, 
exp
);

29 i‡(
f
 < 7.0)

30  5.0 * 
	`pow
(10.0, 
exp
);

31  10.0 * 
	`pow
(10.0, 
exp
);

33 i‡(
f
 <= 1.0)

34  1.0 * 
	`pow
(10.0, 
exp
);

35 i‡(
f
 <= 2.0)

36  2.0 * 
	`pow
(10.0, 
exp
);

37 i‡(
f
 <= 5.0)

38  5.0 * 
	`pow
(10.0, 
exp
);

39  10.0 * 
	`pow
(10.0, 
exp
);

40 
	}
}

42 
	$sh‹ãn
(
tickm¨k
 *
tm
, 
¡icks
, *
powî_of_ãn
,

43 
u£_KMG_symbﬁs
, 
ba£_off£t
)

45 c⁄° 
sh‹ãn_chr
[] = { 0, 'K', 'M', 'G', 'P', 'E', 0 };

46 
i
, 
l
, 
mösh‹ãn
, 
sh‹ãn_idx
 = 0;

47 *
°r
;

49 
mösh‹ãn
 = 100;

50 
i
 = 0; i < 
¡icks
; i++) {

51 
°r
 = 
tm
[
i
].
°rög
;

52 
l
 = 
	`°æí
(
°r
);

54 i‡(
	`°rcmp
(
°r
, "0") == 0)

56 i‡(
l
 > 9 && 
	`°rcmp
(&
°r
[l - 9], "000000000") == 0) {

57 *
powî_of_ãn
 = 9;

58 
sh‹ãn_idx
 = 3;

59 } i‡(6 < 
mösh‹ãn
 && 
l
 > 6 &&

60 
	`°rcmp
(&
°r
[
l
 - 6], "000000") == 0) {

61 *
powî_of_ãn
 = 6;

62 
sh‹ãn_idx
 = 2;

63 } i‡(
l
 > 3 && 
	`°rcmp
(&
°r
[l - 3], "000") == 0) {

64 *
powî_of_ãn
 = 3;

65 
sh‹ãn_idx
 = 1;

67 *
powî_of_ãn
 = 0;

70 i‡(*
powî_of_ãn
 < 
mösh‹ãn
)

71 
mösh‹ãn
 = *
powî_of_ãn
;

74 i‡(
mösh‹ãn
 == 0)

76 i‡(!
u£_KMG_symbﬁs
)

77 
sh‹ãn_idx
 = 0;

78 i‡(
ba£_off£t
)

79 
sh‹ãn_idx
 +
ba£_off£t
;

81 
i
 = 0; i < 
¡icks
; i++) {

82 
°r
 = 
tm
[
i
].
°rög
;

83 
l
 = 
	`°æí
(
°r
);

84 
°r
[
l
 - 
mösh‹ãn
] = 
sh‹ãn_chr
[
sh‹ãn_idx
];

85 i‡(
sh‹ãn_idx
)

86 
°r
[
l
 - 
mösh‹ãn
 + 1] = '\0';

88 
	}
}

90 
	$ˇlc_tickm¨ks
(
mö
, 
max
, 
¡icks
, 
tickm¨k
 **
tm
,

91 *
powî_of_ãn
, 
u£_KMG_symbﬁs
, 
ba£_off£t
)

93 
°r
[100];

94 
n‰ac
;

95 
d
;

96 
gøphmö
, 
gøphmax
;

97 
ønge
, 
x
;

98 
cou¡
, 
i
;

101 
ønge
 = 
	`ni˚num
(
max
 - 
mö
, 0);

102 
d
 = 
	`ni˚num
(
ønge
 / (
¡icks
 - 1), 1);

103 
gøphmö
 = 
	`Êo‹
(
mö
 / 
d
) * d;

104 
gøphmax
 = 
	`˚û
(
max
 / 
d
) * d;

105 
n‰ac
 = 
	`MAX
(-
	`Êo‹
(
	`log10
(
d
)), 0);

106 
	`¢¥ötf
(
°r
, (°r)-1, "%%.%df", 
n‰ac
);

108 
cou¡
 = ((
gøphmax
 + 0.5 * 
d
Ë- 
gøphmö
) / d + 1;

109 *
tm
 = 
	`mÆloc
((**tmË* 
cou¡
);

111 
i
 = 0;

112 
x
 = 
gøphmö
; x < 
gøphmax
 + 0.5 * 
d
; x += d) {

113 (*
tm
)[
i
].
vÆue
 = 
x
;

114 
	`•rötf
((*
tm
)[
i
].
°rög
, 
°r
, 
x
);

115 
i
++;

117 
	`sh‹ãn
(*
tm
, 
i
, 
powî_of_ãn
, 
u£_KMG_symbﬁs
, 
ba£_off£t
);

118  
i
;

119 
	}
}

123 
	$ã°_ønge
(
x
, 
y
)

125 
¡icks
, 
i
;

127 
tickm¨k
 *
tm
 = 
NULL
;

128 
	`¥ötf
("Te°ögÑ™gê%g - %g\n", 
x
, 
y
);

129 
¡icks
 = 
	`ˇlc_tickm¨ks
(
x
, 
y
, 10, &
tm
);

131 
i
 = 0; i < 
¡icks
; i++)

132 
	`¥ötf
(" (%sË%g\n", 
tm
[
i
].
°rög
,Åm[i].
vÆue
);

134 
	`¥ötf
("\n\n");

135 
	`‰ì
(
tm
);

136 
	}
}

138 
	$maö
(
¨gc
, *
¨gv
[])

140 
	`ã°_ønge
(0.0005, 0.008);

141 
	`ã°_ønge
(0.5, 0.8);

142 
	`ã°_ønge
(5.5, 8.8);

143 
	`ã°_ønge
(50.5, 80.8);

144 
	`ã°_ønge
(-20, 20.8);

145 
	`ã°_ønge
(-30, 700.8);

146 
	}
}

	@tickmarks.h

1 #i‚de‡
TICKMARKS_H


2 
	#TICKMARKS_H


	)

4 
	stickm¨k
 {

5 
	mvÆue
;

6 
	m°rög
[20];

9 
ˇlc_tickm¨ks
(
mö
, 
max
, 
¡icks
, 
tickm¨k
 **
tm
,

10 *
powî_of_ãn
, 
u£_KMG_symbﬁs
, 
ba£_off
);

	@time.c

1 
	~<time.h
>

2 
	~<sys/time.h
>

4 
	~"fio.h
"

6 
time•ec
 
	ggíesis
;

7 
	gns_gønuœrôy
;

9 
	$time•ec_add_m£c
(
time•ec
 *
ts
, 
m£c
)

11 
uöt64_t
 
adj_n£c
 = 1000000ULL * 
m£c
;

13 
ts
->
tv_n£c
 +
adj_n£c
;

14 i‡(
adj_n£c
 >= 1000000000) {

15 
uöt64_t
 
adj_£c
 = 
adj_n£c
 / 1000000000;

17 
ts
->
tv_n£c
 -
adj_£c
 * 1000000000;

18 
ts
->
tv_£c
 +
adj_£c
;

20 i‡(
ts
->
tv_n£c
 >= 1000000000){

21 
ts
->
tv_n£c
 -= 1000000000;

22 
ts
->
tv_£c
++;

24 
	}
}

29 
uöt64_t
 
	$u£c_•ö
(
u£c
)

31 
time•ec
 
°¨t
;

32 
uöt64_t
 
t
;

34 
	`fio_gëtime
(&
°¨t
, 
NULL
);

35 (
t
 = 
	`utime_sö˚_now
(&
°¨t
)Ë< 
u£c
)

36 
n›
;

38  
t
;

39 
	}
}

41 
uöt64_t
 
	$u£c_¶ìp
(
thªad_d©a
 *
td
, 
u£c
)

43 
time•ec
 
ªq
;

44 
time•ec
 
tv
;

45 
uöt64_t
 
t
 = 0;

48 
ts
 = 
u£c
;

50 i‡(
u£c
 < 
ns_gønuœrôy
) {

51 
t
 +
	`u£c_•ö
(
u£c
);

55 
ts
 = 
u£c
 - 
ns_gønuœrôy
;

57 i‡(
ts
 >= 1000000) {

58 
ªq
.
tv_£c
 = 
ts
 / 1000000;

59 
ts
 -1000000 * 
ªq
.
tv_£c
;

65 i‡(
ªq
.
tv_£c
 > 1)

66 
ªq
.
tv_£c
 = 1;

68 
ªq
.
tv_£c
 = 0;

70 
ªq
.
tv_n£c
 = 
ts
 * 1000;

71 
	`fio_gëtime
(&
tv
, 
NULL
);

73 i‡(
	`«no¶ìp
(&
ªq
, 
NULL
) < 0)

76 
ts
 = 
	`utime_sö˚_now
(&
tv
);

77 
t
 +
ts
;

78 i‡(
ts
 >
u£c
)

81 
u£c
 -
ts
;

82 } !
td
->
ãrmö©e
);

84  
t
;

85 
	}
}

87 
uöt64_t
 
	$time_sö˚_gíesis
()

89  
	`time_sö˚_now
(&
gíesis
);

90 
	}
}

92 
uöt64_t
 
	$mtime_sö˚_gíesis
()

94  
	`mtime_sö˚_now
(&
gíesis
);

95 
	}
}

97 
uöt64_t
 
	$utime_sö˚_gíesis
()

99  
	`utime_sö˚_now
(&
gíesis
);

100 
	}
}

102 
boﬁ
 
	$ö_ømp_time
(
thªad_d©a
 *
td
)

104  
td
->
o
.
ømp_time
 && !td->
ømp_time_ovî
;

105 
	}
}

107 
boﬁ
 
	$∑ª¡_upd©e_ømp
(
thªad_d©a
 *
td
)

109 
thªad_d©a
 *
∑ª¡
 = 
td
->parent;

111 i‡(!
∑ª¡
 ||Ö¨ít->
ømp_time_ovî
)

112  
Ál£
;

114 
	`ª£t_Æl_°©s
(
∑ª¡
);

115 
∑ª¡
->
ømp_time_ovî
 = 
åue
;

116 
	`td_£t_run°©e
(
∑ª¡
, 
TD_RAMP
);

117  
åue
;

118 
	}
}

120 
boﬁ
 
	$ømp_time_ovî
(
thªad_d©a
 *
td
)

122 i‡(!
td
->
o
.
ømp_time
 ||Åd->
ømp_time_ovî
)

123  
åue
;

125 i‡(
	`utime_sö˚_now
(&
td
->
ïoch
Ë>td->
o
.
ømp_time
) {

126 
td
->
ømp_time_ovî
 = 
åue
;

127 
	`ª£t_Æl_°©s
(
td
);

128 
	`ª£t_io_°©s
(
td
);

129 
	`td_£t_run°©e
(
td
, 
TD_RAMP
);

136 i‡(
	`∑ª¡_upd©e_ømp
(
td
))

137 
	`td_£t_run°©e
(
td
, 
TD_RUNNING
);

139  
åue
;

142  
Ál£
;

143 
	}
}

145 
	$fio_time_öô
()

147 
i
;

149 
	`fio_˛ock_öô
();

154 
i
 = 0; i < 10; i++) {

155 
time•ec
 
tv
, 
ts
;

156 
ñ≠£d
;

158 
	`fio_gëtime
(&
tv
, 
NULL
);

159 
ts
.
tv_£c
 = 0;

160 
ts
.
tv_n£c
 = 1000;

162 
	`«no¶ìp
(&
ts
, 
NULL
);

163 
ñ≠£d
 = 
	`utime_sö˚_now
(&
tv
);

165 i‡(
ñ≠£d
 > 
ns_gønuœrôy
)

166 
ns_gønuœrôy
 = 
ñ≠£d
;

168 
	}
}

170 
	$£t_gíesis_time
()

172 
	`fio_gëtime
(&
gíesis
, 
NULL
);

173 
	}
}

175 
	$£t_ïoch_time
(
thªad_d©a
 *
td
, 
log_Æã∫©e_ïoch
, 
˛ockid_t
 
˛ock_id
)

177 
	`fio_gëtime
(&
td
->
ïoch
, 
NULL
);

178 i‡(
log_Æã∫©e_ïoch
) {

179 
time•ec
 
ts
;

180 
	`˛ock_gëtime
(
˛ock_id
, &
ts
);

181 
td
->
Æã∫©e_ïoch
 = ()(
ts
.
tv_£c
) * 1000 +

182 ()(
ts
.
tv_n£c
) / 1000000;

184 
	}
}

186 
	$fûl_°¨t_time
(
time•ec
 *
t
)

188 
	`mem˝y
(
t
, &
gíesis
, (genesis));

189 
	}
}

	@trim.c

4 
	~<°rög.h
>

5 
	~<as£π.h
>

7 
	~"fio.h
"

8 
	~"åim.h
"

10 #ifde‡
FIO_HAVE_TRIM


11 
boﬁ
 
	$gë_√xt_åim
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

13 
io_põ˚
 *
ùo
;

18 i‡(
io_u
->
fûe
)

19  
åue
;

20 i‡(
	`Êi°_em±y
(&
td
->
åim_li°
))

21  
Ál£
;

23 
	`as£π
(
td
->
åim_íåõs
);

24 
ùo
 = 
	`Êi°_fú°_íåy
(&
td
->
åim_li°
, 
io_põ˚
,Årim_list);

25 
	`ªmove_åim_íåy
(
td
, 
ùo
);

27 
io_u
->
off£t
 = 
ùo
->offset;

28 
io_u
->
buÊí
 = 
ùo
->
Àn
;

29 
io_u
->
fûe
 = 
ùo
->file;

35 i‡(!
td
->
o
.
åim_zîo
) {

36 i‡(
ùo
->
Êags
 & 
IP_F_ONLIST
)

37 
	`Êi°_dñ
(&
ùo
->
li°
);

39 
	`as£π
(
ùo
->
Êags
 & 
IP_F_ONRB
);

40 
	`rb_îa£
(&
ùo
->
rb_node
, &
td
->
io_hi°_åì
);

42 
td
->
io_hi°_Àn
--;

43 
	`‰ì
(
ùo
);

45 
ùo
->
Êags
 |
IP_F_TRIMMED
;

47 i‡(!
	`fio_fûe_›í
(
io_u
->
fûe
)) {

48 
r
 = 
	`td_io_›í_fûe
(
td
, 
io_u
->
fûe
);

50 i‡(
r
) {

51 
	`d¥öt
(
FD_VERIFY
, "failed file %s open\n",

52 
io_u
->
fûe
->
fûe_«me
);

53  
Ál£
;

57 
	`gë_fûe
(
io_u
->
fûe
);

58 
	`as£π
(
	`fio_fûe_›í
(
io_u
->
fûe
));

59 
io_u
->
ddú
 = 
DDIR_TRIM
;

60 
io_u
->
x„r_buf
 = 
NULL
;

61 
io_u
->
x„r_buÊí
 = io_u->
buÊí
;

63 
	`d¥öt
(
FD_VERIFY
, "gë_√xt_åim:Ñë io_u %p\n", 
io_u
);

64  
åue
;

65 
	}
}

67 
boﬁ
 
	$io_u_should_åim
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

69 
vÆ
;

70 
uöt64_t
 
‰™d_max
;

71 
r
;

73 i‡(!
td
->
o
.
åim_≥r˚¡age
)

74  
Ál£
;

76 
‰™d_max
 = 
	`ønd_max
(&
td
->
åim_°©e
);

77 
r
 = 
	`__ønd
(&
td
->
åim_°©e
);

78 
vÆ
 = (
‰™d_max
 / 100ULL);

80 
vÆ
 *(Ë
td
->
o
.
åim_≥r˚¡age
;

81  
r
 <
vÆ
;

82 
	}
}

	@trim.h

1 #i‚de‡
FIO_TRIM_H


2 
	#FIO_TRIM_H


	)

4 #ifde‡
FIO_HAVE_TRIM


5 
	~"Êi°.h
"

6 
	~"iﬁog.h
"

7 
	~"compûî/compûî.h
"

8 
	~"lib/ty≥s.h
"

9 
	~"os/os.h
"

11 
boﬁ
 
__mu°_check
 
gë_√xt_åim
(
thªad_d©a
 *
td
, 
io_u
 *io_u);

12 
boﬁ
 
io_u_should_åim
(
thªad_d©a
 *
td
, 
io_u
 *io_u);

18 
ölöe
 
	$ªmove_åim_íåy
(
thªad_d©a
 *
td
, 
io_põ˚
 *
ùo
)

20 i‡(!
	`Êi°_em±y
(&
ùo
->
åim_li°
)) {

21 
	`Êi°_dñ_öô
(&
ùo
->
åim_li°
);

22 
td
->
åim_íåõs
--;

24 
	}
}

27 
ölöe
 
boﬁ
 
	$gë_√xt_åim
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

29  
Ál£
;

30 
	}
}

31 
ölöe
 
boﬁ
 
	$io_u_should_åim
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

33  
Ál£
;

34 
	}
}

35 
ölöe
 
	$ªmove_åim_íåy
(
thªad_d©a
 *
td
, 
io_põ˚
 *
ùo
)

37 
	}
}

	@unittests/lib/memalign.c

1 
	~<°dlib.h
>

2 
	~"../unôã°.h
"

4 
	~"../../lib/memÆign.h
"

6 
	$ã°_memÆign_1
()

8 
size_t
 
Æign
 = 4096;

9 *
p
 = 
	`__fio_memÆign
(
Æign
, 1234, 
mÆloc
);

11 i‡(
p
)

12 
	`CU_ASSERT_EQUAL
((()(
uöçå_t
)
p
Ë& (
Æign
 - 1), 0);

13 
	}
}

15 
fio_unôã°_íåy
 
	gã°s
[] = {

17 .
«me
 = "memalign/1",

18 .
	g‚
 = 
ã°_memÆign_1
,

21 .
	g«me
 = 
NULL
,

25 
CU_Eº‹Code
 
	$fio_unôã°_lib_memÆign
()

27  
	`fio_unôã°_add_suôe
("lib/memÆign.c", 
NULL
, NULL, 
ã°s
);

28 
	}
}

	@unittests/lib/num2str.c

1 
	~<limôs.h
>

2 
	~<°ddef.h
>

3 
	~<°dlib.h
>

4 
	~"../../compûî/compûî.h
"

5 
	~"../../lib/num2°r.h
"

6 
	~"../unôã°.h
"

8 
	sã°ˇ£
 {

9 
uöt64_t
 
	mnum
;

10 
	mmaxÀn
;

11 
	mba£
;

12 
	mpow2
;

13 
n2s_unô
 
	munô
;

14 c⁄° *
	mex≥˘ed
;

17 c⁄° 
ã°ˇ£
 
	gã°ˇ£s
[] = {

18 { 1, 1, 1, 0, 
N2S_NONE
, "1" },

19 { 
UINT64_MAX
, 99, 1, 0, 
N2S_NONE
, "18446744073709551615" },

20 { 18446744073709551, 2, 1, 0, 
N2S_NONE
, "18P" },

21 { 18446744073709551, 4, 1, 0, 
N2S_NONE
, "18.4P" },

22 { 
UINT64_MAX
, 2, 1, 0, 
N2S_NONE
, "18E" },

23 { 
UINT64_MAX
, 4, 1, 0, 
N2S_NONE
, "18.4E" },

26 
	$ã°_num2°r
()

28 c⁄° 
ã°ˇ£
 *
p
;

29 *
°r
;

30 
i
;

32 
i
 = 0; i < 
	`FIO_ARRAY_SIZE
(
ã°ˇ£s
); ++i) {

33 
p
 = &
ã°ˇ£s
[
i
];

34 
°r
 = 
	`num2°r
(
p
->
num
,Ö->
maxÀn
,Ö->
ba£
,Ö->
pow2
,Ö->
unô
);

35 
	`CU_ASSERT_STRING_EQUAL
(
°r
, 
p
->
ex≥˘ed
);

36 
	`‰ì
(
°r
);

38 
	}
}

40 
fio_unôã°_íåy
 
	gã°s
[] = {

42 .
«me
 = "num2str/1",

43 .
	g‚
 = 
ã°_num2°r
,

46 .
	g«me
 = 
NULL
,

50 
CU_Eº‹Code
 
	$fio_unôã°_lib_num2°r
()

52  
	`fio_unôã°_add_suôe
("lib/num2°r.c", 
NULL
, NULL, 
ã°s
);

53 
	}
}

	@unittests/lib/strntol.c

1 
	~"../unôã°.h
"

3 
	~"../../lib/°∫tﬁ.h
"

5 
	$ã°_°∫tﬁ_1
()

7 
s
[] = "12345";

8 *
ídp
 = 
NULL
;

9 
ªt
 = 
	`°∫tﬁ
(
s
, 
	`°æí
(s), &
ídp
, 10);

11 
	`CU_ASSERT_EQUAL
(
ªt
, 12345);

12 
	`CU_ASSERT_NOT_EQUAL
(
ídp
, 
NULL
);

13 
	`CU_ASSERT_EQUAL
(*
ídp
, '\0');

14 
	}
}

16 
	$ã°_°∫tﬁ_2
()

18 
s
[] = " 12345";

19 *
ídp
 = 
NULL
;

20 
ªt
 = 
	`°∫tﬁ
(
s
, 
	`°æí
(s), &
ídp
, 10);

22 
	`CU_ASSERT_EQUAL
(
ªt
, 12345);

23 
	`CU_ASSERT_NOT_EQUAL
(
ídp
, 
NULL
);

24 
	`CU_ASSERT_EQUAL
(*
ídp
, '\0');

25 
	}
}

27 
	$ã°_°∫tﬁ_3
()

29 
s
[] = "0x12345";

30 *
ídp
 = 
NULL
;

31 
ªt
 = 
	`°∫tﬁ
(
s
, 
	`°æí
(s), &
ídp
, 16);

33 
	`CU_ASSERT_EQUAL
(
ªt
, 0x12345);

34 
	`CU_ASSERT_NOT_EQUAL
(
ídp
, 
NULL
);

35 
	`CU_ASSERT_EQUAL
(*
ídp
, '\0');

36 
	}
}

38 
fio_unôã°_íåy
 
	gã°s
[] = {

40 .
«me
 = "strntol/1",

41 .
	g‚
 = 
ã°_°∫tﬁ_1
,

44 .
	g«me
 = "strntol/2",

45 .
	g‚
 = 
ã°_°∫tﬁ_2
,

48 .
	g«me
 = "strntol/3",

49 .
	g‚
 = 
ã°_°∫tﬁ_3
,

52 .
	g«me
 = 
NULL
,

56 
CU_Eº‹Code
 
	$fio_unôã°_lib_°∫tﬁ
()

58  
	`fio_unôã°_add_suôe
("lib/°∫tﬁ.c", 
NULL
, NULL, 
ã°s
);

59 
	}
}

	@unittests/oslib/strcasestr.c

4 
	~"../unôã°.h
"

6 #i‚de‡
CONFIG_STRCASESTR


7 
	~"../../o¶ib/°rˇ£°r.h
"

9 
	~<°rög.h
>

12 
	$ã°_°rˇ£°r_1
()

14 c⁄° *
hay°ack
 = "0123456789";

15 c⁄° *
p
;

17 
p
 = 
	`°rˇ£°r
(
hay°ack
, "012");

18 
	`CU_ASSERT_EQUAL
(
p
, 
hay°ack
);

20 
p
 = 
	`°rˇ£°r
(
hay°ack
, "12345");

21 
	`CU_ASSERT_EQUAL
(
p
, 
hay°ack
 + 1);

23 
p
 = 
	`°rˇ£°r
(
hay°ack
, "1234567890");

24 
	`CU_ASSERT_EQUAL
(
p
, 
NULL
);

26 
p
 = 
	`°rˇ£°r
(
hay°ack
, "");

27 
	`CU_ASSERT_EQUAL
(
p
, 
hay°ack
);

28 
	}
}

30 
	$ã°_°rˇ£°r_2
()

32 c⁄° *
hay°ack
 = "ABCDEFG";

33 c⁄° *
p
;

35 
p
 = 
	`°rˇ£°r
(
hay°ack
, "ABC");

36 
	`CU_ASSERT_EQUAL
(
p
, 
hay°ack
);

38 
p
 = 
	`°rˇ£°r
(
hay°ack
, "BCD");

39 
	`CU_ASSERT_EQUAL
(
p
, 
hay°ack
 + 1);

41 
p
 = 
	`°rˇ£°r
(
hay°ack
, "ABCDEFGH");

42 
	`CU_ASSERT_EQUAL
(
p
, 
NULL
);

44 
p
 = 
	`°rˇ£°r
(
hay°ack
, "");

45 
	`CU_ASSERT_EQUAL
(
p
, 
hay°ack
);

46 
	}
}

48 
	$ã°_°rˇ£°r_3
()

50 c⁄° *
hay°ack
 = "ABCDEFG";

51 c⁄° *
p
;

53 
p
 = 
	`°rˇ£°r
(
hay°ack
, "AbC");

54 
	`CU_ASSERT_EQUAL
(
p
, 
hay°ack
);

56 
p
 = 
	`°rˇ£°r
(
hay°ack
, "bCd");

57 
	`CU_ASSERT_EQUAL
(
p
, 
hay°ack
 + 1);

59 
p
 = 
	`°rˇ£°r
(
hay°ack
, "AbcdEFGH");

60 
	`CU_ASSERT_EQUAL
(
p
, 
NULL
);

62 
p
 = 
	`°rˇ£°r
(
hay°ack
, "");

63 
	`CU_ASSERT_EQUAL
(
p
, 
hay°ack
);

64 
	}
}

66 
fio_unôã°_íåy
 
	gã°s
[] = {

68 .
«me
 = "strcasestr/1",

69 .
	g‚
 = 
ã°_°rˇ£°r_1
,

72 .
	g«me
 = "strcasestr/2",

73 .
	g‚
 = 
ã°_°rˇ£°r_2
,

76 .
	g«me
 = "strcasestr/3",

77 .
	g‚
 = 
ã°_°rˇ£°r_3
,

80 .
	g«me
 = 
NULL
,

84 
CU_Eº‹Code
 
	$fio_unôã°_o¶ib_°rˇ£°r
()

86  
	`fio_unôã°_add_suôe
("o¶ib/°rˇ£°r.c", 
NULL
, NULL, 
ã°s
);

87 
	}
}

	@unittests/oslib/strlcat.c

1 
	~"../unôã°.h
"

3 #i‚de‡
CONFIG_STRLCAT


4 
	~"../../o¶ib/°æˇt.h
"

6 
	~<°rög.h
>

9 
	$ã°_°æˇt_1
()

11 
d°
[32];

12 
§c
[] = "test";

13 
size_t
 
ªt
;

15 
d°
[0] = '\0';

16 
ªt
 = 
	`°æˇt
(
d°
, 
§c
, (dst));

18 
	`CU_ASSERT_EQUAL
(
	`°rcmp
(
d°
, "test"), 0);

19 
	`CU_ASSERT_EQUAL
(
ªt
, 4);

20 
	}
}

22 
	$ã°_°æˇt_2
()

24 
d°
[32];

25 
§c
[] = "test";

26 
size_t
 
ªt
;

28 
d°
[0] = '\0';

29 
ªt
 = 
	`°æˇt
(
d°
, 
§c
, 
	`°æí
(dst));

31 
	`CU_ASSERT_EQUAL
(
	`°rcmp
(
d°
, ""), 0);

32 
	`CU_ASSERT_EQUAL
(
ªt
, 4);

33 
	}
}

35 
fio_unôã°_íåy
 
	gã°s
[] = {

37 .
«me
 = "strlcat/1",

38 .
	g‚
 = 
ã°_°æˇt_1
,

41 .
	g«me
 = "strlcat/2",

42 .
	g‚
 = 
ã°_°æˇt_2
,

45 .
	g«me
 = 
NULL
,

49 
CU_Eº‹Code
 
	$fio_unôã°_o¶ib_°æˇt
()

51  
	`fio_unôã°_add_suôe
("o¶ib/°æˇt.c", 
NULL
, NULL, 
ã°s
);

52 
	}
}

	@unittests/oslib/strndup.c

1 
	~"../unôã°.h
"

3 #i‚de‡
CONFIG_HAVE_STRNDUP


4 
	~"../../o¶ib/°∫dup.h
"

6 
	~<°rög.h
>

9 
	$ã°_°∫dup_1
()

11 
s
[] = "test";

12 *
p
 = 
	`°∫dup
(
s
, 3);

14 i‡(
p
) {

15 
	`CU_ASSERT_EQUAL
(
	`°rcmp
(
p
, "tes"), 0);

16 
	`CU_ASSERT_EQUAL
(
	`°æí
(
p
), 3);

18 
	}
}

20 
	$ã°_°∫dup_2
()

22 
s
[] = "test";

23 *
p
 = 
	`°∫dup
(
s
, 4);

25 i‡(
p
) {

26 
	`CU_ASSERT_EQUAL
(
	`°rcmp
(
p
, 
s
), 0);

27 
	`CU_ASSERT_EQUAL
(
	`°æí
(
p
), 4);

29 
	}
}

31 
	$ã°_°∫dup_3
()

33 
s
[] = "test";

34 *
p
 = 
	`°∫dup
(
s
, 5);

36 i‡(
p
) {

37 
	`CU_ASSERT_EQUAL
(
	`°rcmp
(
p
, 
s
), 0);

38 
	`CU_ASSERT_EQUAL
(
	`°æí
(
p
), 4);

40 
	}
}

42 
fio_unôã°_íåy
 
	gã°s
[] = {

44 .
«me
 = "strndup/1",

45 .
	g‚
 = 
ã°_°∫dup_1
,

48 .
	g«me
 = "strndup/2",

49 .
	g‚
 = 
ã°_°∫dup_2
,

52 .
	g«me
 = "strndup/3",

53 .
	g‚
 = 
ã°_°∫dup_3
,

56 .
	g«me
 = 
NULL
,

60 
CU_Eº‹Code
 
	$fio_unôã°_o¶ib_°∫dup
()

62  
	`fio_unôã°_add_suôe
("o¶ib/°∫dup.c", 
NULL
, NULL, 
ã°s
);

63 
	}
}

	@unittests/oslib/strsep.c

4 
	~"../unôã°.h
"

6 #i‚de‡
CONFIG_STRSEP


7 
	~"../../o¶ib/°r£p.h
"

9 
	~<°rög.h
>

16 
	$ã°_°r£p_1
()

18 *
°rög
 = 
NULL
;

19 c⁄° *
p
;

21 
p
 = 
	`°r£p
(&
°rög
, "");

22 
	`CU_ASSERT_EQUAL
(
p
, 
NULL
);

23 
	`CU_ASSERT_EQUAL
(
°rög
, 
NULL
);

25 
p
 = 
	`°r£p
(&
°rög
, "ABC");

26 
	`CU_ASSERT_EQUAL
(
p
, 
NULL
);

27 
	`CU_ASSERT_EQUAL
(
°rög
, 
NULL
);

28 
	}
}

34 
	$ã°_°r£p_2
()

36 
§c
[] = "ABCDEFG";

37 *
°rög
 = 
§c
;

38 c⁄° *
p
;

40 
p
 = 
	`°r£p
(&
°rög
, "");

41 
	`CU_ASSERT_EQUAL
(
p
, 
§c
);

42 
	`CU_ASSERT_EQUAL
(*
p
, 'A');

43 
	`CU_ASSERT_EQUAL
(
°rög
, 
NULL
);

45 
°rög
 = 
§c
;

46 
p
 = 
	`°r£p
(&
°rög
, "@");

47 
	`CU_ASSERT_EQUAL
(
p
, 
§c
);

48 
	`CU_ASSERT_EQUAL
(*
p
, 'A');

49 
	`CU_ASSERT_EQUAL
(
°rög
, 
NULL
);

50 
	}
}

56 
	$ã°_°r£p_3
()

58 
§c
[] = "ABCDEFG";

59 *
°rög
 = 
§c
;

60 c⁄° *
p
;

62 
p
 = 
	`°r£p
(&
°rög
, "ABC");

63 
	`CU_ASSERT_EQUAL
(
p
, &
§c
[0]);

64 
	`CU_ASSERT_EQUAL
(*
p
, '\0');

65 
	`CU_ASSERT_EQUAL
(
	`°rcmp
(
°rög
, "BCDEFG"), 0);

66 
	`CU_ASSERT_EQUAL
(*
°rög
, 'B');

68 
p
 = 
	`°r£p
(&
°rög
, "ABC");

69 
	`CU_ASSERT_EQUAL
(
p
, &
§c
[1]);

70 
	`CU_ASSERT_EQUAL
(*
p
, '\0');

71 
	`CU_ASSERT_EQUAL
(
	`°rcmp
(
°rög
, "CDEFG"), 0);

72 
	`CU_ASSERT_EQUAL
(*
°rög
, 'C');

74 
p
 = 
	`°r£p
(&
°rög
, "ABC");

75 
	`CU_ASSERT_EQUAL
(
p
, &
§c
[2]);

76 
	`CU_ASSERT_EQUAL
(*
p
, '\0');

77 
	`CU_ASSERT_EQUAL
(
	`°rcmp
(
°rög
, "DEFG"), 0);

78 
	`CU_ASSERT_EQUAL
(*
°rög
, 'D');

80 
p
 = 
	`°r£p
(&
°rög
, "ABC");

81 
	`CU_ASSERT_EQUAL
(
p
, &
§c
[3]);

82 
	`CU_ASSERT_EQUAL
(*
p
, 'D');

83 
	`CU_ASSERT_EQUAL
(
°rög
, 
NULL
);

84 
	}
}

86 
fio_unôã°_íåy
 
	gã°s
[] = {

88 .
«me
 = "strsep/1",

89 .
	g‚
 = 
ã°_°r£p_1
,

92 .
	g«me
 = "strsep/2",

93 .
	g‚
 = 
ã°_°r£p_2
,

96 .
	g«me
 = "strsep/3",

97 .
	g‚
 = 
ã°_°r£p_3
,

100 .
	g«me
 = 
NULL
,

104 
CU_Eº‹Code
 
	$fio_unôã°_o¶ib_°r£p
()

106  
	`fio_unôã°_add_suôe
("o¶ib/°r£p.c", 
NULL
, NULL, 
ã°s
);

107 
	}
}

	@unittests/unittest.c

6 
	~<°dio.h
>

7 
	~<°dlib.h
>

9 
	~"unôã°.h
"

11 
CU_Eº‹Code
 
	$fio_unôã°_add_suôe
(c⁄° *
«me
, 
CU_InôülizeFunc
 
öô‚
,

12 
CU_CÀ™upFunc
 
˛ón‚
, 
fio_unôã°_íåy
 *
tvec
)

14 
CU_pSuôe
 
pSuôe
;

15 
fio_unôã°_íåy
 *
t
;

17 
pSuôe
 = 
	`CU_add_suôe
(
«me
, 
öô‚
, 
˛ón‚
);

18 i‡(!
pSuôe
) {

19 
	`CU_˛ónup_ªgi°ry
();

20  
	`CU_gë_îr‹
();

23 
t
 = 
tvec
;

24 
t
 &&Å->
«me
) {

25 i‡(!
	`CU_add_ã°
(
pSuôe
, 
t
->
«me
,Å->
‚
)) {

26 
	`CU_˛ónup_ªgi°ry
();

27  
	`CU_gë_îr‹
();

29 
t
++;

32  
CUE_SUCCESS
;

33 
	}
}

35 
	$fio_unôã°_ªgi°î
(
	$CU_Eº‹Code
 (*
‚
)())

37 i‡(
‚
 && 
	`‚
(Ë!
CUE_SUCCESS
) {

38 
	`Ârötf
(
°dîr
, "%s\n", 
	`CU_gë_îr‹_msg
());

39 
	`exô
(1);

41 
	}
}

43 
	$maö
()

45 i‡(
	`CU_öôülize_ªgi°ry
(Ë!
CUE_SUCCESS
) {

46 
	`Ârötf
(
°dîr
, "%s\n", 
	`CU_gë_îr‹_msg
());

47 
	`exô
(1);

50 
	`fio_unôã°_ªgi°î
(
fio_unôã°_lib_memÆign
);

51 
	`fio_unôã°_ªgi°î
(
fio_unôã°_lib_num2°r
);

52 
	`fio_unôã°_ªgi°î
(
fio_unôã°_lib_°∫tﬁ
);

53 
	`fio_unôã°_ªgi°î
(
fio_unôã°_o¶ib_°æˇt
);

54 
	`fio_unôã°_ªgi°î
(
fio_unôã°_o¶ib_°∫dup
);

55 
	`fio_unôã°_ªgi°î
(
fio_unôã°_o¶ib_°rˇ£°r
);

56 
	`fio_unôã°_ªgi°î
(
fio_unôã°_o¶ib_°r£p
);

58 
	`CU_basic_£t_mode
(
CU_BRM_VERBOSE
);

59 
	`CU_basic_run_ã°s
();

60 
	`CU_˛ónup_ªgi°ry
();

62  
	`CU_gë_îr‹
();

63 
	}
}

	@unittests/unittest.h

1 #i‚de‡
FIO_UNITTEST_H


2 
	#FIO_UNITTEST_H


	)

4 
	~<sys/ty≥s.h
>

6 
	~<CUnô/CUnô.h
>

7 
	~<CUnô/Basic.h
>

9 
	sfio_unôã°_íåy
 {

10 c⁄° *
	m«me
;

11 
CU_Te°Func
 
	m‚
;

14 
CU_Eº‹Code
 
fio_unôã°_add_suôe
(c⁄° *, 
CU_InôülizeFunc
,

15 
CU_CÀ™upFunc
, 
fio_unôã°_íåy
*);

17 
CU_Eº‹Code
 
fio_unôã°_lib_memÆign
();

18 
CU_Eº‹Code
 
fio_unôã°_lib_num2°r
();

19 
CU_Eº‹Code
 
fio_unôã°_lib_°∫tﬁ
();

20 
CU_Eº‹Code
 
fio_unôã°_o¶ib_°æˇt
();

21 
CU_Eº‹Code
 
fio_unôã°_o¶ib_°∫dup
();

22 
CU_Eº‹Code
 
fio_unôã°_o¶ib_°rˇ£°r
();

23 
CU_Eº‹Code
 
fio_unôã°_o¶ib_°r£p
();

	@verify-state.h

1 #i‚de‡
FIO_VERIFY_STATE_H


2 
	#FIO_VERIFY_STATE_H


	)

4 
	~<°döt.h
>

5 
	~<°rög.h
>

6 
	~<limôs.h
>

7 
	~"lib/now¨n_¢¥ötf.h
"

9 
	sthªad_ønd32_°©e
 {

10 
uöt32_t
 
	ms
[4];

13 
	sthªad_ønd64_°©e
 {

14 
uöt64_t
 
	ms
[6];

17 
	sthªad_ønd_°©e
 {

18 
uöt64_t
 
	mu£64
;

20 
thªad_ønd32_°©e
 
	m°©e32
;

21 
thªad_ønd64_°©e
 
	m°©e64
;

28 
	sfûe_comp
 {

29 
uöt64_t
 
	mfûío
;

30 
uöt64_t
 
	moff£t
;

33 
	sthªad_io_li°
 {

34 
uöt64_t
 
	mno_comps
;

35 
uöt32_t
 
	mdïth
;

36 
uöt32_t
 
	mnofûes
;

37 
uöt64_t
 
	mnumbîio
;

38 
uöt64_t
 
	mödex
;

39 
thªad_ønd_°©e
 
	mønd
;

40 
uöt8_t
 
	m«me
[64];

41 
fûe_comp
 
	mcomps
[0];

44 
	sÆl_io_li°
 {

45 
uöt64_t
 
	mthªads
;

46 
thªad_io_li°
 
	m°©e
[0];

49 
	#VSTATE_HDR_VERSION
 0x03

	)

51 
	svîify_°©e_hdr
 {

52 
uöt64_t
 
	mvîsi⁄
;

53 
uöt64_t
 
	msize
;

54 
uöt64_t
 
	m¸c
;

57 
	#IO_LIST_ALL
 0xffffffff

	)

59 
	gio_u
;

60 
Æl_io_li°
 *
gë_Æl_io_li°
(, 
size_t
 *);

61 
__vîify_ßve_°©e
(
Æl_io_li°
 *, const *);

62 
vîify_ßve_°©e
(
mask
);

63 
vîify_lﬂd_°©e
(
thªad_d©a
 *, const *);

64 
vîify_‰ì_°©e
(
thªad_d©a
 *);

65 
vîify_°©e_should_°›
(
thªad_d©a
 *, 
io_u
 *);

66 
vîify_assign_°©e
(
thªad_d©a
 *, *);

67 
vîify_°©e_hdr
(vîify_°©e_hd∏*, 
thªad_io_li°
 *);

69 
ölöe
 
size_t
 
	$__thªad_io_li°_sz
(
uöt32_t
 
dïth
, uöt32_à
nofûes
)

71  (
thªad_io_li°
Ë+ 
dïth
 * 
nofûes
 * (
fûe_comp
);

72 
	}
}

74 
ölöe
 
size_t
 
	$thªad_io_li°_sz
(
thªad_io_li°
 *
s
)

76  
	`__thªad_io_li°_sz
(
	`À32_to_˝u
(
s
->
dïth
),Üe32_to_˝u(s->
nofûes
));

77 
	}
}

79 
ölöe
 
thªad_io_li°
 *
	$io_li°_√xt
(
thªad_io_li°
 *
s
)

81  (
thªad_io_li°
 *)((*Ë
s
 + 
	`thªad_io_li°_sz
(s));

82 
	}
}

84 
ölöe
 
	$vîify_°©e_gí_«me
(*
out
, 
size_t
 
size
,

85 c⁄° *
«me
, c⁄° *
¥efix
,

86 
num
)

88 
íame
[
PATH_MAX
];

89 *
±r
;

94 
±r
 = 
íame
;

96 *
±r
 = *
«me
;

97 i‡(*
±r
 == '\0')

99 i‡(*
±r
 == '/')

100 *
±r
 = '.';

101 
±r
++;

102 
«me
++;

105 
	`now¨n_¢¥ötf
(
out
, 
size
, "%s-%s-%d-vîify.°©e", 
¥efix
, 
íame
, 
num
);

106 
out
[
size
 - 1] = '\0';

107 
	}
}

	@verify.c

4 
	~<uni°d.h
>

5 
	~<f˙é.h
>

6 
	~<°rög.h
>

7 
	~<as£π.h
>

8 
	~<±hªad.h
>

9 
	~<libgí.h
>

11 
	~"¨ch/¨ch.h
"

12 
	~"fio.h
"

13 
	~"vîify.h
"

14 
	~"åim.h
"

15 
	~"lib/ønd.h
"

16 
	~"lib/hweight.h
"

17 
	~"lib/∑âîn.h
"

18 
	~"o¶ib/a•rötf.h
"

20 
	~"¸c/md5.h
"

21 
	~"¸c/¸c64.h
"

22 
	~"¸c/¸c32.h
"

23 
	~"¸c/¸c32c.h
"

24 
	~"¸c/¸c16.h
"

25 
	~"¸c/¸c7.h
"

26 
	~"¸c/sha256.h
"

27 
	~"¸c/sha512.h
"

28 
	~"¸c/sha1.h
"

29 
	~"¸c/xxhash.h
"

30 
	~"¸c/sha3.h
"

32 
p›uœã_hdr
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

33 
vîify_hódî
 *
hdr
, 
hódî_num
,

34 
hódî_Àn
);

35 
__fûl_hdr
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

36 
vîify_hódî
 *
hdr
, 
hódî_num
,

37 
hódî_Àn
, 
uöt64_t
 
ønd_£ed
);

39 
	$fûl_buf„r_∑âîn
(
thªad_d©a
 *
td
, *
p
, 
Àn
)

41 ()
	`˝y_∑âîn
(
td
->
o
.
buf„r_∑âîn
,Åd->o.
buf„r_∑âîn_byãs
, 
p
, 
Àn
);

42 
	}
}

44 
	$__fûl_buf„r
(
thªad_›ti⁄s
 *
o
, 
uöt64_t
 
£ed
, *
p
,

45 
Àn
)

47 
	`__fûl_øndom_buf_≥r˚¡age
(
£ed
, 
p
, 
o
->
com¥ess_≥r˚¡age
, 
Àn
,Üí, o->
buf„r_∑âîn
, o->
buf„r_∑âîn_byãs
);

48 
	}
}

50 
	$fûl_vîify_∑âîn
(
thªad_d©a
 *
td
, *
p
, 
Àn
,

51 
io_u
 *io_u, 
uöt64_t
 
£ed
, 
u£_£ed
)

53 
thªad_›ti⁄s
 *
o
 = &
td
->o;

55 i‡(!
o
->
vîify_∑âîn_byãs
) {

56 
	`d¥öt
(
FD_VERIFY
, "fû»øndom byã†Àn=%u\n", 
Àn
);

58 i‡(!
u£_£ed
) {

59 
£ed
 = 
	`__ønd
(&
td
->
vîify_°©e
);

61 
£ed
 *()
	`__ønd
(&
td
->
vîify_°©e
);

63 
io_u
->
ønd_£ed
 = 
£ed
;

64 
	`__fûl_buf„r
(
o
, 
£ed
, 
p
, 
Àn
);

70 i‡(!
td
->
o
.
vîify_fmt_sz
 && 
io_u
->
buf_fûÀd_Àn
 >
Àn
) {

71 
	`d¥öt
(
FD_VERIFY
, "usingálready filled verifyÖattern b=%dÜen=%u\n",

72 
o
->
vîify_∑âîn_byãs
, 
Àn
);

76 ()
	`∑°e_f‹m©
(
td
->
o
.
vîify_∑âîn
,Åd->o.
vîify_∑âîn_byãs
,

77 
td
->
o
.
vîify_fmt
,Åd->o.
vîify_fmt_sz
,

78 
p
, 
Àn
, 
io_u
);

79 
io_u
->
buf_fûÀd_Àn
 = 
Àn
;

80 
	}
}

82 
	$gë_hdr_öc
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

84 
hdr_öc
;

90 
hdr_öc
 = 
io_u
->
buÊí
;

91 i‡(
td
->
o
.
vîify_öãrvÆ
 &&Åd->o.vîify_öãrvÆ <
io_u
->
buÊí
 &&

92 !
td
->
o
.
bs_u«lig√d
)

93 
hdr_öc
 = 
td
->
o
.
vîify_öãrvÆ
;

95  
hdr_öc
;

96 
	}
}

98 
	$fûl_∑âîn_hódîs
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

99 
uöt64_t
 
£ed
, 
u£_£ed
)

101 
hdr_öc
, 
hódî_num
;

102 
vîify_hódî
 *
hdr
;

103 *
p
 = 
io_u
->
buf
;

105 
	`fûl_vîify_∑âîn
(
td
, 
p
, 
io_u
->
buÊí
, io_u, 
£ed
, 
u£_£ed
);

107 
hdr_öc
 = 
	`gë_hdr_öc
(
td
, 
io_u
);

108 
hódî_num
 = 0;

109 ; 
p
 < 
io_u
->
buf
 + io_u->
buÊí
;Ö +
hdr_öc
) {

110 
hdr
 = 
p
;

111 
	`p›uœã_hdr
(
td
, 
io_u
, 
hdr
, 
hódî_num
, 
hdr_öc
);

112 
hódî_num
++;

114 
	}
}

116 
	$memswp
(*
buf1
, *
buf2
, 
Àn
)

118 
sw≠
[200];

120 
	`as£π
(
Àn
 <(
sw≠
));

122 
	`mem˝y
(&
sw≠
, 
buf1
, 
Àn
);

123 
	`mem˝y
(
buf1
, 
buf2
, 
Àn
);

124 
	`mem˝y
(
buf2
, &
sw≠
, 
Àn
);

125 
	}
}

127 
	$hexdump
(*
buf„r
, 
Àn
)

129 *
p
 = 
buf„r
;

130 
i
;

132 
i
 = 0; i < 
Àn
; i++)

133 
	`log_îr
("%02x", 
p
[
i
]);

134 
	`log_îr
("\n");

135 
	}
}

140 
ölöe
 
	$__hdr_size
(
vîify_ty≥
)

142 
Àn
 = 0;

144 
vîify_ty≥
) {

145 
VERIFY_NONE
:

146 
VERIFY_HDR_ONLY
:

147 
VERIFY_NULL
:

148 
VERIFY_PATTERN
:

149 
Àn
 = 0;

151 
VERIFY_MD5
:

152 
Àn
 = (
vhdr_md5
);

154 
VERIFY_CRC64
:

155 
Àn
 = (
vhdr_¸c64
);

157 
VERIFY_CRC32C
:

158 
VERIFY_CRC32
:

159 
VERIFY_CRC32C_INTEL
:

160 
Àn
 = (
vhdr_¸c32
);

162 
VERIFY_CRC16
:

163 
Àn
 = (
vhdr_¸c16
);

165 
VERIFY_CRC7
:

166 
Àn
 = (
vhdr_¸c7
);

168 
VERIFY_SHA256
:

169 
Àn
 = (
vhdr_sha256
);

171 
VERIFY_SHA512
:

172 
Àn
 = (
vhdr_sha512
);

174 
VERIFY_SHA3_224
:

175 
Àn
 = (
vhdr_sha3_224
);

177 
VERIFY_SHA3_256
:

178 
Àn
 = (
vhdr_sha3_256
);

180 
VERIFY_SHA3_384
:

181 
Àn
 = (
vhdr_sha3_384
);

183 
VERIFY_SHA3_512
:

184 
Àn
 = (
vhdr_sha3_512
);

186 
VERIFY_XXHASH
:

187 
Àn
 = (
vhdr_xxhash
);

189 
VERIFY_SHA1
:

190 
Àn
 = (
vhdr_sha1
);

192 
VERIFY_PATTERN_NO_HDR
:

195 
	`log_îr
("fio: unknown verify header!\n");

196 
	`as£π
(0);

199  
Àn
 + (
vîify_hódî
);

200 
	}
}

202 
ölöe
 
	$hdr_size
(
thªad_d©a
 *
td
,

203 
vîify_hódî
 *
hdr
)

205 i‡(
td
->
o
.
vîify
 =
VERIFY_PATTERN_NO_HDR
)

208  
	`__hdr_size
(
hdr
->
vîify_ty≥
);

209 
	}
}

211 *
	$hdr_¥iv
(
vîify_hódî
 *
hdr
)

213 *
¥iv
 = 
hdr
;

215  
¥iv
 + (
vîify_hódî
);

216 
	}
}

222 
	svc⁄t
 {

226 
io_u
 *
	mio_u
;

227 
	mhdr_num
;

228 
thªad_d©a
 *
	mtd
;

233 c⁄° *
	m«me
;

234 *
	mgood_¸c
;

235 *
	mbad_¸c
;

236 
	m¸c_Àn
;

239 
	#DUMP_BUF_SZ
 255

	)

241 
	$dump_buf
(*
buf
, 
Àn
, 
off£t
,

242 c⁄° *
ty≥
, 
fio_fûe
 *
f
)

244 *
±r
, *
‚ame
;

245 
£p
[2] = { 
FIO_OS_PATH_SEPARATOR
, 0 };

246 
ªt
, 
fd
;

248 
±r
 = 
	`°rdup
(
f
->
fûe_«me
);

250 i‡(
	`a•rötf
(&
‚ame
, "%s%s%s.%Œu.%s", 
aux_∑th
 ? : "",

251 
aux_∑th
 ? 
£p
 : "", 
	`ba£«me
(
±r
), 
off£t
, 
ty≥
) < 0) {

252 i‡(!
	`fio_did_w¨n
(
FIO_WARN_VERIFY_BUF
))

253 
	`log_îr
("fio:ÇotÉnough memory for dump buffer filename\n");

254 
‰ì_±r
;

257 
fd
 = 
	`›í
(
‚ame
, 
O_CREAT
 | 
O_TRUNC
 | 
O_WRONLY
, 0644);

258 i‡(
fd
 < 0) {

259 
	`≥º‹
("open verify buf file");

260 
‰ì_‚ame
;

263 
Àn
) {

264 
ªt
 = 
	`wrôe
(
fd
, 
buf
, 
Àn
);

265 i‡(!
ªt
)

267 i‡(
ªt
 < 0) {

268 
	`≥º‹
("write verify buf file");

271 
Àn
 -
ªt
;

272 
buf
 +
ªt
;

275 
	`˛o£
(
fd
);

276 
	`log_îr
(" %†d©®dum≥dá†%s\n", 
ty≥
, 
‚ame
);

278 
‰ì_‚ame
:

279 
	`‰ì
(
‚ame
);

281 
‰ì_±r
:

282 
	`‰ì
(
±r
);

283 
	}
}

289 
	$__dump_vîify_buf„rs
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

291 
thªad_d©a
 *
td
 = 
vc
->td;

292 
io_u
 *io_u = 
vc
->io_u;

293 
hdr_off£t
;

294 
io_u
 
dummy
;

295 *
buf
;

297 i‡(!
td
->
o
.
vîify_dump
)

303 
hdr_off£t
 = 
vc
->
hdr_num
 * 
hdr
->
Àn
;

305 
	`dump_buf
(
io_u
->
buf
 + 
hdr_off£t
, 
hdr
->
Àn
, io_u->
vîify_off£t
 + hdr_offset,

306 "ª˚ived", 
vc
->
io_u
->
fûe
);

311 
buf
 = 
	`mÆloc
(
io_u
->
buÊí
);

312 
dummy
 = *
io_u
;

313 
dummy
.
buf
 = buf;

314 
dummy
.
ønd_£ed
 = 
hdr
->rand_seed;

315 
dummy
.
buf_fûÀd_Àn
 = 0;

316 
dummy
.
buÊí
 = 
io_u
->buflen;

318 
	`fûl_∑âîn_hódîs
(
td
, &
dummy
, 
hdr
->
ønd_£ed
, 1);

320 
	`dump_buf
(
buf
 + 
hdr_off£t
, 
hdr
->
Àn
, 
io_u
->
vîify_off£t
 + hdr_offset,

321 "ex≥˘ed", 
vc
->
io_u
->
fûe
);

322 
	`‰ì
(
buf
);

323 
	}
}

325 
	$dump_vîify_buf„rs
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

327 
thªad_d©a
 *
td
 = 
vc
->td;

328 
vîify_hódî
 
shdr
;

330 i‡(
td
->
o
.
vîify
 =
VERIFY_PATTERN_NO_HDR
) {

331 
	`__fûl_hdr
(
td
, 
vc
->
io_u
, &
shdr
, 0, vc->io_u->
buÊí
, 0);

332 
hdr
 = &
shdr
;

335 
	`__dump_vîify_buf„rs
(
hdr
, 
vc
);

336 
	}
}

338 
	$log_vîify_Áûuª
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

340 
off£t
;

342 
off£t
 = 
vc
->
io_u
->
vîify_off£t
;

343 
off£t
 +
vc
->
hdr_num
 * 
hdr
->
Àn
;

344 
	`log_îr
("%.8s: verify failedát file %s offset %llu,Üength %u"

346 
vc
->
«me
, vc->
io_u
->
fûe
->
fûe_«me
, 
off£t
, 
hdr
->
Àn
,

347 
vc
->
io_u
->
vîify_off£t
, vc->io_u->
buÊí
, vc->io_u->
Êags
);

349 i‡(
vc
->
good_¸c
 && vc->
bad_¸c
) {

350 
	`log_îr
(" Expected CRC: ");

351 
	`hexdump
(
vc
->
good_¸c
, vc->
¸c_Àn
);

352 
	`log_îr
(" Received CRC: ");

353 
	`hexdump
(
vc
->
bad_¸c
, vc->
¸c_Àn
);

356 
	`dump_vîify_buf„rs
(
hdr
, 
vc
);

357 
	}
}

362 
ölöe
 *
	$io_u_vîify_off
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

364  
vc
->
io_u
->
buf
 + vc->
hdr_num
 * 
hdr
->
Àn
 + 
	`hdr_size
(vc->
td
, hdr);

365 
	}
}

367 
	$vîify_io_u_∑âîn
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

369 
thªad_d©a
 *
td
 = 
vc
->td;

370 
io_u
 *io_u = 
vc
->io_u;

371 *
buf
, *
∑âîn
;

372 
hódî_size
 = 
	`__hdr_size
(
td
->
o
.
vîify
);

373 
Àn
, 
mod
, 
i
, 
∑âîn_size
;

374 
rc
;

376 
∑âîn
 = 
td
->
o
.
vîify_∑âîn
;

377 
∑âîn_size
 = 
td
->
o
.
vîify_∑âîn_byãs
;

378 
	`as£π
(
∑âîn_size
 != 0);

380 ()
	`∑°e_f‹m©_ö∂a˚
(
∑âîn
, 
∑âîn_size
,

381 
td
->
o
.
vîify_fmt
,Åd->o.
vîify_fmt_sz
, 
io_u
);

383 
buf
 = (*Ë
hdr
 + 
hódî_size
;

384 
Àn
 = 
	`gë_hdr_öc
(
td
, 
io_u
Ë- 
hódî_size
;

385 
mod
 = (
	`gë_hdr_öc
(
td
, 
io_u
Ë* 
vc
->
hdr_num
 + 
hódî_size
Ë% 
∑âîn_size
;

387 
rc
 = 
	`cmp_∑âîn
(
∑âîn
, 
∑âîn_size
, 
mod
, 
buf
, 
Àn
);

388 i‡(!
rc
)

392 
i
 = 0; i < 
Àn
; i++) {

393 i‡(
buf
[
i
] !
∑âîn
[
mod
]) {

394 
bôs
;

396 
bôs
 = 
	`hweight8
(
buf
[
i
] ^ 
∑âîn
[
mod
]);

397 
	`log_îr
("fio: gotÖattern '%02x', wanted '%02x'. Bad bits %d\n",

398 ()
buf
[
i
],

399 ()
∑âîn
[
mod
],

400 
bôs
);

401 
	`log_îr
("fio: badÖ©ã∫ block off£à%u\n", 
i
);

402 
vc
->
«me
 = "pattern";

403 
	`log_vîify_Áûuª
(
hdr
, 
vc
);

404  
EILSEQ
;

406 
mod
++;

407 i‡(
mod
 =
td
->
o
.
vîify_∑âîn_byãs
)

408 
mod
 = 0;

412 
	`as£π
(0);

413  
EILSEQ
;

414 
	}
}

416 
	$vîify_io_u_xxhash
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

418 *
p
 = 
	`io_u_vîify_off
(
hdr
, 
vc
);

419 
vhdr_xxhash
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

420 
uöt32_t
 
hash
;

421 *
°©e
;

423 
	`d¥öt
(
FD_VERIFY
, "xxhash vîify io_u %p,Üí %u\n", 
vc
->
io_u
, 
hdr
->
Àn
);

425 
°©e
 = 
	`XXH32_öô
(1);

426 
	`XXH32_upd©e
(
°©e
, 
p
, 
hdr
->
Àn
 - 
	`hdr_size
(
vc
->
td
, hdr));

427 
hash
 = 
	`XXH32_dige°
(
°©e
);

429 i‡(
vh
->
hash
 == hash)

432 
vc
->
«me
 = "xxhash";

433 
vc
->
good_¸c
 = &
vh
->
hash
;

434 
vc
->
bad_¸c
 = &
hash
;

435 
vc
->
¸c_Àn
 = (
hash
);

436 
	`log_vîify_Áûuª
(
hdr
, 
vc
);

437  
EILSEQ
;

438 
	}
}

440 
	$vîify_io_u_sha3
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
,

441 
fio_sha3_˘x
 *
sha3_˘x
, 
uöt8_t
 *
sha
,

442 
sha_size
, c⁄° *
«me
)

444 *
p
 = 
	`io_u_vîify_off
(
hdr
, 
vc
);

446 
	`d¥öt
(
FD_VERIFY
, "%†vîify io_u %p,Üí %u\n", 
«me
, 
vc
->
io_u
, 
hdr
->
Àn
);

448 
	`fio_sha3_upd©e
(
sha3_˘x
, 
p
, 
hdr
->
Àn
 - 
	`hdr_size
(
vc
->
td
, hdr));

449 
	`fio_sha3_föÆ
(
sha3_˘x
);

451 i‡(!
	`memcmp
(
sha
, 
sha3_˘x
->sha, 
sha_size
))

454 
vc
->
«me
 =Çame;

455 
vc
->
good_¸c
 = 
sha
;

456 
vc
->
bad_¸c
 = 
sha3_˘x
->
sha
;

457 
vc
->
¸c_Àn
 = 
sha_size
;

458 
	`log_vîify_Áûuª
(
hdr
, 
vc
);

459  
EILSEQ
;

460 
	}
}

462 
	$vîify_io_u_sha3_224
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

464 
vhdr_sha3_224
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

465 
uöt8_t
 
sha
[
SHA3_224_DIGEST_SIZE
];

466 
fio_sha3_˘x
 
sha3_˘x
 = {

467 .
sha
 = sha,

470 
	`fio_sha3_224_öô
(&
sha3_˘x
);

472  
	`vîify_io_u_sha3
(
hdr
, 
vc
, &
sha3_˘x
, 
vh
->
sha
,

473 
SHA3_224_DIGEST_SIZE
, "sha3-224");

474 
	}
}

476 
	$vîify_io_u_sha3_256
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

478 
vhdr_sha3_256
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

479 
uöt8_t
 
sha
[
SHA3_256_DIGEST_SIZE
];

480 
fio_sha3_˘x
 
sha3_˘x
 = {

481 .
sha
 = sha,

484 
	`fio_sha3_256_öô
(&
sha3_˘x
);

486  
	`vîify_io_u_sha3
(
hdr
, 
vc
, &
sha3_˘x
, 
vh
->
sha
,

487 
SHA3_256_DIGEST_SIZE
, "sha3-256");

488 
	}
}

490 
	$vîify_io_u_sha3_384
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

492 
vhdr_sha3_384
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

493 
uöt8_t
 
sha
[
SHA3_384_DIGEST_SIZE
];

494 
fio_sha3_˘x
 
sha3_˘x
 = {

495 .
sha
 = sha,

498 
	`fio_sha3_384_öô
(&
sha3_˘x
);

500  
	`vîify_io_u_sha3
(
hdr
, 
vc
, &
sha3_˘x
, 
vh
->
sha
,

501 
SHA3_384_DIGEST_SIZE
, "sha3-384");

502 
	}
}

504 
	$vîify_io_u_sha3_512
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

506 
vhdr_sha3_512
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

507 
uöt8_t
 
sha
[
SHA3_512_DIGEST_SIZE
];

508 
fio_sha3_˘x
 
sha3_˘x
 = {

509 .
sha
 = sha,

512 
	`fio_sha3_512_öô
(&
sha3_˘x
);

514  
	`vîify_io_u_sha3
(
hdr
, 
vc
, &
sha3_˘x
, 
vh
->
sha
,

515 
SHA3_512_DIGEST_SIZE
, "sha3-512");

516 
	}
}

518 
	$vîify_io_u_sha512
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

520 *
p
 = 
	`io_u_vîify_off
(
hdr
, 
vc
);

521 
vhdr_sha512
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

522 
uöt8_t
 
sha512
[128];

523 
fio_sha512_˘x
 
sha512_˘x
 = {

524 .
buf
 = 
sha512
,

527 
	`d¥öt
(
FD_VERIFY
, "sha512 vîify io_u %p,Üí %u\n", 
vc
->
io_u
, 
hdr
->
Àn
);

529 
	`fio_sha512_öô
(&
sha512_˘x
);

530 
	`fio_sha512_upd©e
(&
sha512_˘x
, 
p
, 
hdr
->
Àn
 - 
	`hdr_size
(
vc
->
td
, hdr));

532 i‡(!
	`memcmp
(
vh
->
sha512
, 
sha512_˘x
.
buf
, (sha512)))

535 
vc
->
«me
 = "sha512";

536 
vc
->
good_¸c
 = 
vh
->
sha512
;

537 
vc
->
bad_¸c
 = 
sha512_˘x
.
buf
;

538 
vc
->
¸c_Àn
 = (
vh
->
sha512
);

539 
	`log_vîify_Áûuª
(
hdr
, 
vc
);

540  
EILSEQ
;

541 
	}
}

543 
	$vîify_io_u_sha256
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

545 *
p
 = 
	`io_u_vîify_off
(
hdr
, 
vc
);

546 
vhdr_sha256
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

547 
uöt8_t
 
sha256
[64];

548 
fio_sha256_˘x
 
sha256_˘x
 = {

549 .
buf
 = 
sha256
,

552 
	`d¥öt
(
FD_VERIFY
, "sha256 vîify io_u %p,Üí %u\n", 
vc
->
io_u
, 
hdr
->
Àn
);

554 
	`fio_sha256_öô
(&
sha256_˘x
);

555 
	`fio_sha256_upd©e
(&
sha256_˘x
, 
p
, 
hdr
->
Àn
 - 
	`hdr_size
(
vc
->
td
, hdr));

556 
	`fio_sha256_föÆ
(&
sha256_˘x
);

558 i‡(!
	`memcmp
(
vh
->
sha256
, 
sha256_˘x
.
buf
, (sha256)))

561 
vc
->
«me
 = "sha256";

562 
vc
->
good_¸c
 = 
vh
->
sha256
;

563 
vc
->
bad_¸c
 = 
sha256_˘x
.
buf
;

564 
vc
->
¸c_Àn
 = (
vh
->
sha256
);

565 
	`log_vîify_Áûuª
(
hdr
, 
vc
);

566  
EILSEQ
;

567 
	}
}

569 
	$vîify_io_u_sha1
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

571 *
p
 = 
	`io_u_vîify_off
(
hdr
, 
vc
);

572 
vhdr_sha1
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

573 
uöt32_t
 
sha1
[5];

574 
fio_sha1_˘x
 
sha1_˘x
 = {

575 .
H
 = 
sha1
,

578 
	`d¥öt
(
FD_VERIFY
, "sha1 vîify io_u %p,Üí %u\n", 
vc
->
io_u
, 
hdr
->
Àn
);

580 
	`fio_sha1_öô
(&
sha1_˘x
);

581 
	`fio_sha1_upd©e
(&
sha1_˘x
, 
p
, 
hdr
->
Àn
 - 
	`hdr_size
(
vc
->
td
, hdr));

582 
	`fio_sha1_föÆ
(&
sha1_˘x
);

584 i‡(!
	`memcmp
(
vh
->
sha1
, 
sha1_˘x
.
H
, (sha1)))

587 
vc
->
«me
 = "sha1";

588 
vc
->
good_¸c
 = 
vh
->
sha1
;

589 
vc
->
bad_¸c
 = 
sha1_˘x
.
H
;

590 
vc
->
¸c_Àn
 = (
vh
->
sha1
);

591 
	`log_vîify_Áûuª
(
hdr
, 
vc
);

592  
EILSEQ
;

593 
	}
}

595 
	$vîify_io_u_¸c7
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

597 *
p
 = 
	`io_u_vîify_off
(
hdr
, 
vc
);

598 
vhdr_¸c7
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

599 
c
;

601 
	`d¥öt
(
FD_VERIFY
, "¸c7 vîify io_u %p,Üí %u\n", 
vc
->
io_u
, 
hdr
->
Àn
);

603 
c
 = 
	`fio_¸c7
(
p
, 
hdr
->
Àn
 - 
	`hdr_size
(
vc
->
td
, hdr));

605 i‡(
c
 =
vh
->
¸c7
)

608 
vc
->
«me
 = "crc7";

609 
vc
->
good_¸c
 = &
vh
->
¸c7
;

610 
vc
->
bad_¸c
 = &
c
;

611 
vc
->
¸c_Àn
 = 1;

612 
	`log_vîify_Áûuª
(
hdr
, 
vc
);

613  
EILSEQ
;

614 
	}
}

616 
	$vîify_io_u_¸c16
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

618 *
p
 = 
	`io_u_vîify_off
(
hdr
, 
vc
);

619 
vhdr_¸c16
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

620 
c
;

622 
	`d¥öt
(
FD_VERIFY
, "¸c16 vîify io_u %p,Üí %u\n", 
vc
->
io_u
, 
hdr
->
Àn
);

624 
c
 = 
	`fio_¸c16
(
p
, 
hdr
->
Àn
 - 
	`hdr_size
(
vc
->
td
, hdr));

626 i‡(
c
 =
vh
->
¸c16
)

629 
vc
->
«me
 = "crc16";

630 
vc
->
good_¸c
 = &
vh
->
¸c16
;

631 
vc
->
bad_¸c
 = &
c
;

632 
vc
->
¸c_Àn
 = 2;

633 
	`log_vîify_Áûuª
(
hdr
, 
vc
);

634  
EILSEQ
;

635 
	}
}

637 
	$vîify_io_u_¸c64
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

639 *
p
 = 
	`io_u_vîify_off
(
hdr
, 
vc
);

640 
vhdr_¸c64
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

641 
c
;

643 
	`d¥öt
(
FD_VERIFY
, "¸c64 vîify io_u %p,Üí %u\n", 
vc
->
io_u
, 
hdr
->
Àn
);

645 
c
 = 
	`fio_¸c64
(
p
, 
hdr
->
Àn
 - 
	`hdr_size
(
vc
->
td
, hdr));

647 i‡(
c
 =
vh
->
¸c64
)

650 
vc
->
«me
 = "crc64";

651 
vc
->
good_¸c
 = &
vh
->
¸c64
;

652 
vc
->
bad_¸c
 = &
c
;

653 
vc
->
¸c_Àn
 = 8;

654 
	`log_vîify_Áûuª
(
hdr
, 
vc
);

655  
EILSEQ
;

656 
	}
}

658 
	$vîify_io_u_¸c32
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

660 *
p
 = 
	`io_u_vîify_off
(
hdr
, 
vc
);

661 
vhdr_¸c32
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

662 
uöt32_t
 
c
;

664 
	`d¥öt
(
FD_VERIFY
, "¸c32 vîify io_u %p,Üí %u\n", 
vc
->
io_u
, 
hdr
->
Àn
);

666 
c
 = 
	`fio_¸c32
(
p
, 
hdr
->
Àn
 - 
	`hdr_size
(
vc
->
td
, hdr));

668 i‡(
c
 =
vh
->
¸c32
)

671 
vc
->
«me
 = "crc32";

672 
vc
->
good_¸c
 = &
vh
->
¸c32
;

673 
vc
->
bad_¸c
 = &
c
;

674 
vc
->
¸c_Àn
 = 4;

675 
	`log_vîify_Áûuª
(
hdr
, 
vc
);

676  
EILSEQ
;

677 
	}
}

679 
	$vîify_io_u_¸c32c
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

681 *
p
 = 
	`io_u_vîify_off
(
hdr
, 
vc
);

682 
vhdr_¸c32
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

683 
uöt32_t
 
c
;

685 
	`d¥öt
(
FD_VERIFY
, "¸c32¯vîify io_u %p,Üí %u\n", 
vc
->
io_u
, 
hdr
->
Àn
);

687 
c
 = 
	`fio_¸c32c
(
p
, 
hdr
->
Àn
 - 
	`hdr_size
(
vc
->
td
, hdr));

689 i‡(
c
 =
vh
->
¸c32
)

692 
vc
->
«me
 = "crc32c";

693 
vc
->
good_¸c
 = &
vh
->
¸c32
;

694 
vc
->
bad_¸c
 = &
c
;

695 
vc
->
¸c_Àn
 = 4;

696 
	`log_vîify_Áûuª
(
hdr
, 
vc
);

697  
EILSEQ
;

698 
	}
}

700 
	$vîify_io_u_md5
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

702 *
p
 = 
	`io_u_vîify_off
(
hdr
, 
vc
);

703 
vhdr_md5
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

704 
uöt32_t
 
hash
[
MD5_HASH_WORDS
];

705 
fio_md5_˘x
 
md5_˘x
 = {

706 .
hash
 = hash,

709 
	`d¥öt
(
FD_VERIFY
, "md5 vîify io_u %p,Üí %u\n", 
vc
->
io_u
, 
hdr
->
Àn
);

711 
	`fio_md5_öô
(&
md5_˘x
);

712 
	`fio_md5_upd©e
(&
md5_˘x
, 
p
, 
hdr
->
Àn
 - 
	`hdr_size
(
vc
->
td
, hdr));

713 
	`fio_md5_föÆ
(&
md5_˘x
);

715 i‡(!
	`memcmp
(
vh
->
md5_dige°
, 
md5_˘x
.
hash
, (hash)))

718 
vc
->
«me
 = "md5";

719 
vc
->
good_¸c
 = 
vh
->
md5_dige°
;

720 
vc
->
bad_¸c
 = 
md5_˘x
.
hash
;

721 
vc
->
¸c_Àn
 = (
hash
);

722 
	`log_vîify_Áûuª
(
hdr
, 
vc
);

723  
EILSEQ
;

724 
	}
}

729 
	$vîify_io_u_async
(
thªad_d©a
 *
td
, 
io_u
 **
io_u_±r
)

731 
io_u
 *io_u = *
io_u_±r
;

733 
	`±hªad_muãx_lock
(&
td
->
io_u_lock
);

735 i‡(
io_u
->
fûe
)

736 
	`put_fûe_log
(
td
, 
io_u
->
fûe
);

738 i‡(
io_u
->
Êags
 & 
IO_U_F_IN_CUR_DEPTH
) {

739 
td
->
cur_dïth
--;

740 
	`io_u_˛ór
(
td
, 
io_u
, 
IO_U_F_IN_CUR_DEPTH
);

742 
	`Êi°_add_èû
(&
io_u
->
vîify_li°
, &
td
->verify_list);

743 *
io_u_±r
 = 
NULL
;

745 
	`±hªad_c⁄d_sig«l
(&
td
->
vîify_c⁄d
);

746 
	`±hªad_muãx_u∆ock
(&
td
->
io_u_lock
);

748 
	}
}

755 
	$mem_is_zîo
(c⁄° *
d©a
, 
size_t
 
Àngth
)

757 c⁄° *
p
 = 
d©a
;

758 
size_t
 
Àn
;

761 
Àn
 = 0;Üen < 16;Üen++) {

762 i‡(!
Àngth
)

764 i‡(*
p
)

766 
p
++;

767 
Àngth
--;

771  
	`memcmp
(
d©a
, 
p
, 
Àngth
) == 0;

772 
	}
}

774 
	$mem_is_zîo_¶ow
(c⁄° *
d©a
, 
size_t
 
Àngth
, size_à*
off£t
)

776 c⁄° *
p
 = 
d©a
;

778 *
off£t
 = 0;

779 
Àngth
) {

780 i‡(*
p
)

782 (*
off£t
)++;

783 
Àngth
--;

784 
p
++;

787  !
Àngth
;

788 
	}
}

790 
	$vîify_åimmed_io_u
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

792 
size_t
 
off£t
;

794 i‡(!
td
->
o
.
åim_zîo
)

797 i‡(
	`mem_is_zîo
(
io_u
->
buf
, io_u->
buÊí
))

800 
	`mem_is_zîo_¶ow
(
io_u
->
buf
, io_u->
buÊí
, &
off£t
);

802 
	`log_îr
("trim: verify failedát file %s offset %llu,Üength %llu"

804 
io_u
->
fûe
->
fûe_«me
, io_u->
vîify_off£t
, io_u->
buÊí
,

805 (Ë
off£t
);

806  
EILSEQ
;

807 
	}
}

809 
	$vîify_hódî
(
io_u
 *io_u, 
thªad_d©a
 *
td
,

810 
vîify_hódî
 *
hdr
, 
hdr_num
,

811 
hdr_Àn
)

813 *
p
 = 
hdr
;

814 
uöt32_t
 
¸c
;

816 i‡(
hdr
->
magic
 !
FIO_HDR_MAGIC
) {

817 
	`log_îr
("verify: bad magic header %x, wanted %x",

818 
hdr
->
magic
, 
FIO_HDR_MAGIC
);

819 
îr
;

821 i‡(
hdr
->
Àn
 !
hdr_Àn
) {

822 
	`log_îr
("verify: bad headerÜength %u, wanted %u",

823 
hdr
->
Àn
, 
hdr_Àn
);

824 
îr
;

826 i‡(
hdr
->
ønd_£ed
 !
io_u
->rand_seed) {

827 
	`log_îr
("vîify: bad hódîÑ™d_£ed %"
PRIu64


828 ", w™ãd %"
PRIu64
,

829 
hdr
->
ønd_£ed
, 
io_u
->rand_seed);

830 
îr
;

832 i‡(
hdr
->
off£t
 !
io_u
->
vîify_off£t
 + 
hdr_num
 * 
td
->
o
.
vîify_öãrvÆ
) {

833 
	`log_îr
("vîify: bad hódî off£à%"
PRIu64


835 
hdr
->
off£t
, 
io_u
->
vîify_off£t
);

836 
îr
;

845 i‡(
	`td_wrôe
(
td
Ë&& (
	`td_mö_bs
—dË=
	`td_max_bs
(td)) &&

846 !
td
->
o
.
time_ba£d
)

847 i‡(!
td
->
o
.
vîify_⁄ly
)

848 i‡(
hdr
->
numbîio
 !
io_u
->numberio) {

849 
	`log_îr
("vîify: bad hódîÇumbîiÿ%"
PRIu16


850 ", w™ãd %"
PRIu16
,

851 
hdr
->
numbîio
, 
io_u
->numberio);

852 
îr
;

855 
¸c
 = 
	`fio_¸c32c
(
p
, 
	`off£tof
(
vîify_hódî
, 
¸c32
));

856 i‡(
¸c
 !
hdr
->
¸c32
) {

857 
	`log_îr
("verify: bad header crc %x, calculated %x",

858 
hdr
->
¸c32
, 
¸c
);

859 
îr
;

863 
îr
:

864 
	`log_îr
("át file %s offset %llu,Üength %u"

866 
io_u
->
fûe
->
fûe_«me
,

867 
io_u
->
vîify_off£t
 + 
hdr_num
 * 
hdr_Àn
, hdr_len,

868 
io_u
->
vîify_off£t
, io_u->
buÊí
);

870 i‡(
td
->
o
.
vîify_dump
)

871 
	`dump_buf
(
p
, 
hdr_Àn
, 
io_u
->
vîify_off£t
 + 
hdr_num
 * hdr_len,

872 "hdr_Áû", 
io_u
->
fûe
);

874  
EILSEQ
;

875 
	}
}

877 
	$vîify_io_u
(
thªad_d©a
 *
td
, 
io_u
 **
io_u_±r
)

879 
vîify_hódî
 *
hdr
;

880 
io_u
 *io_u = *
io_u_±r
;

881 
hódî_size
, 
hdr_öc
, 
hdr_num
 = 0;

882 *
p
;

883 
ªt
;

885 i‡(
td
->
o
.
vîify
 =
VERIFY_NULL
 || 
io_u
->
ddú
 !
DDIR_READ
)

891 i‡(
	`td_i€ngöe_Êagged
(
td
, 
FIO_FAKEIO
))

894 i‡(
io_u
->
Êags
 & 
IO_U_F_TRIMMED
) {

895 
ªt
 = 
	`vîify_åimmed_io_u
(
td
, 
io_u
);

896 
d⁄e
;

899 
hdr_öc
 = 
	`gë_hdr_öc
(
td
, 
io_u
);

901 
ªt
 = 0;

902 
p
 = 
io_u
->
buf
;Ö < io_u->bu‡+ io_u->
buÊí
;

903 
p
 +
hdr_öc
, 
hdr_num
++) {

904 
vc⁄t
 
vc
 = {

905 .
io_u
 = io_u,

906 .
hdr_num
 = hdr_num,

907 .
td
 =Åd,

909 
vîify_ty≥
;

911 i‡(
ªt
 && 
td
->
o
.
vîify_Áèl
)

914 
hódî_size
 = 
	`__hdr_size
(
td
->
o
.
vîify
);

915 i‡(
td
->
o
.
vîify_off£t
)

916 
	`memswp
(
p
,Ö + 
td
->
o
.
vîify_off£t
, 
hódî_size
);

917 
hdr
 = 
p
;

922 i‡(!
	`td_rw
(
td
Ë|| (td->
Êags
 & 
TD_F_VER_BACKLOG
))

923 
io_u
->
ønd_£ed
 = 
hdr
->rand_seed;

925 i‡(
td
->
o
.
vîify
 !
VERIFY_PATTERN_NO_HDR
) {

926 
ªt
 = 
	`vîify_hódî
(
io_u
, 
td
, 
hdr
, 
hdr_num
, 
hdr_öc
);

927 i‡(
ªt
)

928  
ªt
;

931 i‡(
td
->
o
.
vîify
 !
VERIFY_NONE
)

932 
vîify_ty≥
 = 
td
->
o
.
vîify
;

934 
vîify_ty≥
 = 
hdr
->verify_type;

936 
vîify_ty≥
) {

937 
VERIFY_HDR_ONLY
:

940 i‡(
td
->
o
.
vîify_∑âîn_byãs
)

941 
ªt
 = 
	`vîify_io_u_∑âîn
(
hdr
, &
vc
);

943 
VERIFY_MD5
:

944 
ªt
 = 
	`vîify_io_u_md5
(
hdr
, &
vc
);

946 
VERIFY_CRC64
:

947 
ªt
 = 
	`vîify_io_u_¸c64
(
hdr
, &
vc
);

949 
VERIFY_CRC32C
:

950 
VERIFY_CRC32C_INTEL
:

951 
ªt
 = 
	`vîify_io_u_¸c32c
(
hdr
, &
vc
);

953 
VERIFY_CRC32
:

954 
ªt
 = 
	`vîify_io_u_¸c32
(
hdr
, &
vc
);

956 
VERIFY_CRC16
:

957 
ªt
 = 
	`vîify_io_u_¸c16
(
hdr
, &
vc
);

959 
VERIFY_CRC7
:

960 
ªt
 = 
	`vîify_io_u_¸c7
(
hdr
, &
vc
);

962 
VERIFY_SHA256
:

963 
ªt
 = 
	`vîify_io_u_sha256
(
hdr
, &
vc
);

965 
VERIFY_SHA512
:

966 
ªt
 = 
	`vîify_io_u_sha512
(
hdr
, &
vc
);

968 
VERIFY_SHA3_224
:

969 
ªt
 = 
	`vîify_io_u_sha3_224
(
hdr
, &
vc
);

971 
VERIFY_SHA3_256
:

972 
ªt
 = 
	`vîify_io_u_sha3_256
(
hdr
, &
vc
);

974 
VERIFY_SHA3_384
:

975 
ªt
 = 
	`vîify_io_u_sha3_384
(
hdr
, &
vc
);

977 
VERIFY_SHA3_512
:

978 
ªt
 = 
	`vîify_io_u_sha3_512
(
hdr
, &
vc
);

980 
VERIFY_XXHASH
:

981 
ªt
 = 
	`vîify_io_u_xxhash
(
hdr
, &
vc
);

983 
VERIFY_SHA1
:

984 
ªt
 = 
	`vîify_io_u_sha1
(
hdr
, &
vc
);

986 
VERIFY_PATTERN
:

987 
VERIFY_PATTERN_NO_HDR
:

988 
ªt
 = 
	`vîify_io_u_∑âîn
(
hdr
, &
vc
);

991 
	`log_îr
("Bad vîifyÅy≥ %u\n", 
hdr
->
vîify_ty≥
);

992 
ªt
 = 
EINVAL
;

995 i‡(
ªt
 && 
vîify_ty≥
 !
hdr
->verify_type)

996 
	`log_îr
("fio: verifyÅype mismatch (%u media, %u given)\n",

997 
hdr
->
vîify_ty≥
, verify_type);

1000 
d⁄e
:

1001 i‡(
ªt
 && 
td
->
o
.
vîify_Áèl
)

1002 
	`fio_m¨k_td_ãrmö©e
(
td
);

1004  
ªt
;

1005 
	}
}

1007 
	$fûl_xxhash
(
vîify_hódî
 *
hdr
, *
p
, 
Àn
)

1009 
vhdr_xxhash
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

1010 *
°©e
;

1012 
°©e
 = 
	`XXH32_öô
(1);

1013 
	`XXH32_upd©e
(
°©e
, 
p
, 
Àn
);

1014 
vh
->
hash
 = 
	`XXH32_dige°
(
°©e
);

1015 
	}
}

1017 
	$fûl_sha3
(
fio_sha3_˘x
 *
sha3_˘x
, *
p
, 
Àn
)

1019 
	`fio_sha3_upd©e
(
sha3_˘x
, 
p
, 
Àn
);

1020 
	`fio_sha3_föÆ
(
sha3_˘x
);

1021 
	}
}

1023 
	$fûl_sha3_224
(
vîify_hódî
 *
hdr
, *
p
, 
Àn
)

1025 
vhdr_sha3_224
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

1026 
fio_sha3_˘x
 
sha3_˘x
 = {

1027 .
sha
 = 
vh
->sha,

1030 
	`fio_sha3_224_öô
(&
sha3_˘x
);

1031 
	`fûl_sha3
(&
sha3_˘x
, 
p
, 
Àn
);

1032 
	}
}

1034 
	$fûl_sha3_256
(
vîify_hódî
 *
hdr
, *
p
, 
Àn
)

1036 
vhdr_sha3_256
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

1037 
fio_sha3_˘x
 
sha3_˘x
 = {

1038 .
sha
 = 
vh
->sha,

1041 
	`fio_sha3_256_öô
(&
sha3_˘x
);

1042 
	`fûl_sha3
(&
sha3_˘x
, 
p
, 
Àn
);

1043 
	}
}

1045 
	$fûl_sha3_384
(
vîify_hódî
 *
hdr
, *
p
, 
Àn
)

1047 
vhdr_sha3_384
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

1048 
fio_sha3_˘x
 
sha3_˘x
 = {

1049 .
sha
 = 
vh
->sha,

1052 
	`fio_sha3_384_öô
(&
sha3_˘x
);

1053 
	`fûl_sha3
(&
sha3_˘x
, 
p
, 
Àn
);

1054 
	}
}

1056 
	$fûl_sha3_512
(
vîify_hódî
 *
hdr
, *
p
, 
Àn
)

1058 
vhdr_sha3_512
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

1059 
fio_sha3_˘x
 
sha3_˘x
 = {

1060 .
sha
 = 
vh
->sha,

1063 
	`fio_sha3_512_öô
(&
sha3_˘x
);

1064 
	`fûl_sha3
(&
sha3_˘x
, 
p
, 
Àn
);

1065 
	}
}

1067 
	$fûl_sha512
(
vîify_hódî
 *
hdr
, *
p
, 
Àn
)

1069 
vhdr_sha512
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

1070 
fio_sha512_˘x
 
sha512_˘x
 = {

1071 .
buf
 = 
vh
->
sha512
,

1074 
	`fio_sha512_öô
(&
sha512_˘x
);

1075 
	`fio_sha512_upd©e
(&
sha512_˘x
, 
p
, 
Àn
);

1076 
	}
}

1078 
	$fûl_sha256
(
vîify_hódî
 *
hdr
, *
p
, 
Àn
)

1080 
vhdr_sha256
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

1081 
fio_sha256_˘x
 
sha256_˘x
 = {

1082 .
buf
 = 
vh
->
sha256
,

1085 
	`fio_sha256_öô
(&
sha256_˘x
);

1086 
	`fio_sha256_upd©e
(&
sha256_˘x
, 
p
, 
Àn
);

1087 
	`fio_sha256_föÆ
(&
sha256_˘x
);

1088 
	}
}

1090 
	$fûl_sha1
(
vîify_hódî
 *
hdr
, *
p
, 
Àn
)

1092 
vhdr_sha1
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

1093 
fio_sha1_˘x
 
sha1_˘x
 = {

1094 .
H
 = 
vh
->
sha1
,

1097 
	`fio_sha1_öô
(&
sha1_˘x
);

1098 
	`fio_sha1_upd©e
(&
sha1_˘x
, 
p
, 
Àn
);

1099 
	`fio_sha1_föÆ
(&
sha1_˘x
);

1100 
	}
}

1102 
	$fûl_¸c7
(
vîify_hódî
 *
hdr
, *
p
, 
Àn
)

1104 
vhdr_¸c7
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

1106 
vh
->
¸c7
 = 
	`fio_¸c7
(
p
, 
Àn
);

1107 
	}
}

1109 
	$fûl_¸c16
(
vîify_hódî
 *
hdr
, *
p
, 
Àn
)

1111 
vhdr_¸c16
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

1113 
vh
->
¸c16
 = 
	`fio_¸c16
(
p
, 
Àn
);

1114 
	}
}

1116 
	$fûl_¸c32
(
vîify_hódî
 *
hdr
, *
p
, 
Àn
)

1118 
vhdr_¸c32
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

1120 
vh
->
¸c32
 = 
	`fio_¸c32
(
p
, 
Àn
);

1121 
	}
}

1123 
	$fûl_¸c32c
(
vîify_hódî
 *
hdr
, *
p
, 
Àn
)

1125 
vhdr_¸c32
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

1127 
vh
->
¸c32
 = 
	`fio_¸c32c
(
p
, 
Àn
);

1128 
	}
}

1130 
	$fûl_¸c64
(
vîify_hódî
 *
hdr
, *
p
, 
Àn
)

1132 
vhdr_¸c64
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

1134 
vh
->
¸c64
 = 
	`fio_¸c64
(
p
, 
Àn
);

1135 
	}
}

1137 
	$fûl_md5
(
vîify_hódî
 *
hdr
, *
p
, 
Àn
)

1139 
vhdr_md5
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

1140 
fio_md5_˘x
 
md5_˘x
 = {

1141 .
hash
 = (
uöt32_t
 *Ë
vh
->
md5_dige°
,

1144 
	`fio_md5_öô
(&
md5_˘x
);

1145 
	`fio_md5_upd©e
(&
md5_˘x
, 
p
, 
Àn
);

1146 
	`fio_md5_föÆ
(&
md5_˘x
);

1147 
	}
}

1149 
	$__fûl_hdr
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

1150 
vîify_hódî
 *
hdr
, 
hódî_num
,

1151 
hódî_Àn
, 
uöt64_t
 
ønd_£ed
)

1153 *
p
 = 
hdr
;

1155 
hdr
->
magic
 = 
FIO_HDR_MAGIC
;

1156 
hdr
->
vîify_ty≥
 = 
td
->
o
.
vîify
;

1157 
hdr
->
Àn
 = 
hódî_Àn
;

1158 
hdr
->
ønd_£ed
 =Ñand_seed;

1159 
hdr
->
off£t
 = 
io_u
->
vîify_off£t
 + 
hódî_num
 * 
td
->
o
.
vîify_öãrvÆ
;

1160 
hdr
->
time_£c
 = 
io_u
->
°¨t_time
.
tv_£c
;

1161 
hdr
->
time_n£c
 = 
io_u
->
°¨t_time
.
tv_n£c
;

1162 
hdr
->
thªad
 = 
td
->
thªad_numbî
;

1163 
hdr
->
numbîio
 = 
io_u
->numberio;

1164 
hdr
->
¸c32
 = 
	`fio_¸c32c
(
p
, 
	`off£tof
(
vîify_hódî
, crc32));

1165 
	}
}

1168 
	$fûl_hdr
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

1169 
vîify_hódî
 *
hdr
, 
hódî_num
,

1170 
hódî_Àn
, 
uöt64_t
 
ønd_£ed
)

1172 i‡(
td
->
o
.
vîify
 !
VERIFY_PATTERN_NO_HDR
)

1173 
	`__fûl_hdr
(
td
, 
io_u
, 
hdr
, 
hódî_num
, 
hódî_Àn
, 
ønd_£ed
);

1174 
	}
}

1176 
	$p›uœã_hdr
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

1177 
vîify_hódî
 *
hdr
, 
hódî_num
,

1178 
hódî_Àn
)

1180 
d©a_Àn
;

1181 *
d©a
;

1182 *
p
;

1184 
p
 = (*Ë
hdr
;

1186 
	`fûl_hdr
(
td
, 
io_u
, 
hdr
, 
hódî_num
, 
hódî_Àn
, io_u->
ønd_£ed
);

1188 i‡(
hódî_Àn
 <
	`hdr_size
(
td
, 
hdr
)) {

1189 
	`td_vîr‹
(
td
, 
EINVAL
, "BlocksizeÅoo small");

1192 
d©a_Àn
 = 
hódî_Àn
 - 
	`hdr_size
(
td
, 
hdr
);

1194 
d©a
 = 
p
 + 
	`hdr_size
(
td
, 
hdr
);

1195 
td
->
o
.
vîify
) {

1196 
VERIFY_MD5
:

1197 
	`d¥öt
(
FD_VERIFY
, "fill md5 io_u %p,Üen %u\n",

1198 
io_u
, 
hdr
->
Àn
);

1199 
	`fûl_md5
(
hdr
, 
d©a
, 
d©a_Àn
);

1201 
VERIFY_CRC64
:

1202 
	`d¥öt
(
FD_VERIFY
, "fill crc64 io_u %p,Üen %u\n",

1203 
io_u
, 
hdr
->
Àn
);

1204 
	`fûl_¸c64
(
hdr
, 
d©a
, 
d©a_Àn
);

1206 
VERIFY_CRC32C
:

1207 
VERIFY_CRC32C_INTEL
:

1208 
	`d¥öt
(
FD_VERIFY
, "fill crc32c io_u %p,Üen %u\n",

1209 
io_u
, 
hdr
->
Àn
);

1210 
	`fûl_¸c32c
(
hdr
, 
d©a
, 
d©a_Àn
);

1212 
VERIFY_CRC32
:

1213 
	`d¥öt
(
FD_VERIFY
, "fill crc32 io_u %p,Üen %u\n",

1214 
io_u
, 
hdr
->
Àn
);

1215 
	`fûl_¸c32
(
hdr
, 
d©a
, 
d©a_Àn
);

1217 
VERIFY_CRC16
:

1218 
	`d¥öt
(
FD_VERIFY
, "fill crc16 io_u %p,Üen %u\n",

1219 
io_u
, 
hdr
->
Àn
);

1220 
	`fûl_¸c16
(
hdr
, 
d©a
, 
d©a_Àn
);

1222 
VERIFY_CRC7
:

1223 
	`d¥öt
(
FD_VERIFY
, "fill crc7 io_u %p,Üen %u\n",

1224 
io_u
, 
hdr
->
Àn
);

1225 
	`fûl_¸c7
(
hdr
, 
d©a
, 
d©a_Àn
);

1227 
VERIFY_SHA256
:

1228 
	`d¥öt
(
FD_VERIFY
, "fill sha256 io_u %p,Üen %u\n",

1229 
io_u
, 
hdr
->
Àn
);

1230 
	`fûl_sha256
(
hdr
, 
d©a
, 
d©a_Àn
);

1232 
VERIFY_SHA512
:

1233 
	`d¥öt
(
FD_VERIFY
, "fill sha512 io_u %p,Üen %u\n",

1234 
io_u
, 
hdr
->
Àn
);

1235 
	`fûl_sha512
(
hdr
, 
d©a
, 
d©a_Àn
);

1237 
VERIFY_SHA3_224
:

1238 
	`d¥öt
(
FD_VERIFY
, "fill sha3-224 io_u %p,Üen %u\n",

1239 
io_u
, 
hdr
->
Àn
);

1240 
	`fûl_sha3_224
(
hdr
, 
d©a
, 
d©a_Àn
);

1242 
VERIFY_SHA3_256
:

1243 
	`d¥öt
(
FD_VERIFY
, "fill sha3-256 io_u %p,Üen %u\n",

1244 
io_u
, 
hdr
->
Àn
);

1245 
	`fûl_sha3_256
(
hdr
, 
d©a
, 
d©a_Àn
);

1247 
VERIFY_SHA3_384
:

1248 
	`d¥öt
(
FD_VERIFY
, "fill sha3-384 io_u %p,Üen %u\n",

1249 
io_u
, 
hdr
->
Àn
);

1250 
	`fûl_sha3_384
(
hdr
, 
d©a
, 
d©a_Àn
);

1252 
VERIFY_SHA3_512
:

1253 
	`d¥öt
(
FD_VERIFY
, "fill sha3-512 io_u %p,Üen %u\n",

1254 
io_u
, 
hdr
->
Àn
);

1255 
	`fûl_sha3_512
(
hdr
, 
d©a
, 
d©a_Àn
);

1257 
VERIFY_XXHASH
:

1258 
	`d¥öt
(
FD_VERIFY
, "fill xxhash io_u %p,Üen %u\n",

1259 
io_u
, 
hdr
->
Àn
);

1260 
	`fûl_xxhash
(
hdr
, 
d©a
, 
d©a_Àn
);

1262 
VERIFY_SHA1
:

1263 
	`d¥öt
(
FD_VERIFY
, "fill sha1 io_u %p,Üen %u\n",

1264 
io_u
, 
hdr
->
Àn
);

1265 
	`fûl_sha1
(
hdr
, 
d©a
, 
d©a_Àn
);

1267 
VERIFY_HDR_ONLY
:

1268 
VERIFY_PATTERN
:

1269 
VERIFY_PATTERN_NO_HDR
:

1273 
	`log_îr
("fio: bad vîifyÅy≥: %d\n", 
td
->
o
.
vîify
);

1274 
	`as£π
(0);

1277 i‡(
td
->
o
.
vîify_off£t
 && 
	`hdr_size
—d, 
hdr
))

1278 
	`memswp
(
p
,Ö + 
td
->
o
.
vîify_off£t
, 
	`hdr_size
—d, 
hdr
));

1279 
	}
}

1285 
	$p›uœã_vîify_io_u
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

1287 i‡(
td
->
o
.
vîify
 =
VERIFY_NULL
)

1290 
io_u
->
numbîio
 = 
td
->
io_issues
[io_u->
ddú
];

1292 
	`fûl_∑âîn_hódîs
(
td
, 
io_u
, 0, 0);

1293 
	}
}

1295 
	$gë_√xt_vîify
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

1297 
io_põ˚
 *
ùo
 = 
NULL
;

1302 i‡(
io_u
->
fûe
)

1305 i‡(!
	`RB_EMPTY_ROOT
(&
td
->
io_hi°_åì
)) {

1306 
fio_rb_node
 *
n
 = 
	`rb_fú°
(&
td
->
io_hi°_åì
);

1308 
ùo
 = 
	`rb_íåy
(
n
, 
io_põ˚
, 
rb_node
);

1313 i‡(
	`©omic_lﬂd_acquúe
(&
ùo
->
Êags
Ë& 
IP_F_IN_FLIGHT
)

1314 
nŸhög
;

1316 
	`rb_îa£
(
n
, &
td
->
io_hi°_åì
);

1317 
	`as£π
(
ùo
->
Êags
 & 
IP_F_ONRB
);

1318 
ùo
->
Êags
 &~
IP_F_ONRB
;

1319 } i‡(!
	`Êi°_em±y
(&
td
->
io_hi°_li°
)) {

1320 
ùo
 = 
	`Êi°_fú°_íåy
(&
td
->
io_hi°_li°
, 
io_põ˚
, 
li°
);

1325 i‡(
	`©omic_lﬂd_acquúe
(&
ùo
->
Êags
Ë& 
IP_F_IN_FLIGHT
)

1326 
nŸhög
;

1328 
	`Êi°_dñ
(&
ùo
->
li°
);

1329 
	`as£π
(
ùo
->
Êags
 & 
IP_F_ONLIST
);

1330 
ùo
->
Êags
 &~
IP_F_ONLIST
;

1333 i‡(
ùo
) {

1334 
td
->
io_hi°_Àn
--;

1336 
io_u
->
off£t
 = 
ùo
->offset;

1337 
io_u
->
vîify_off£t
 = 
ùo
->
off£t
;

1338 
io_u
->
buÊí
 = 
ùo
->
Àn
;

1339 
io_u
->
numbîio
 = 
ùo
->numberio;

1340 
io_u
->
fûe
 = 
ùo
->file;

1341 
	`io_u_£t
(
td
, 
io_u
, 
IO_U_F_VER_LIST
);

1343 i‡(
ùo
->
Êags
 & 
IP_F_TRIMMED
)

1344 
	`io_u_£t
(
td
, 
io_u
, 
IO_U_F_TRIMMED
);

1346 i‡(!
	`fio_fûe_›í
(
io_u
->
fûe
)) {

1347 
r
 = 
	`td_io_›í_fûe
(
td
, 
io_u
->
fûe
);

1349 i‡(
r
) {

1350 
	`d¥öt
(
FD_VERIFY
, "failed file %s open\n",

1351 
io_u
->
fûe
->
fûe_«me
);

1356 
	`gë_fûe
(
ùo
->
fûe
);

1357 
	`as£π
(
	`fio_fûe_›í
(
io_u
->
fûe
));

1358 
io_u
->
ddú
 = 
DDIR_READ
;

1359 
io_u
->
x„r_buf
 = io_u->
buf
;

1360 
io_u
->
x„r_buÊí
 = io_u->
buÊí
;

1362 
	`ªmove_åim_íåy
(
td
, 
ùo
);

1363 
	`‰ì
(
ùo
);

1364 
	`d¥öt
(
FD_VERIFY
, "gë_√xt_vîify:Ñë io_u %p\n", 
io_u
);

1366 i‡(!
td
->
o
.
vîify_∑âîn_byãs
) {

1367 
io_u
->
ønd_£ed
 = 
	`__ønd
(&
td
->
vîify_°©e
);

1369 
io_u
->
ønd_£ed
 *
	`__ønd
(&
td
->
vîify_°©e
);

1374 
nŸhög
:

1375 
	`d¥öt
(
FD_VERIFY
, "get_next_verify:Émpty\n");

1377 
	}
}

1379 
	$fio_vîify_öô
(
thªad_d©a
 *
td
)

1381 i‡(
td
->
o
.
vîify
 =
VERIFY_CRC32C_INTEL
 ||

1382 
td
->
o
.
vîify
 =
VERIFY_CRC32C
) {

1383 
	`¸c32c_¨m64_¥obe
();

1384 
	`¸c32c_öãl_¥obe
();

1386 
	}
}

1388 *
	$vîify_async_thªad
(*
d©a
)

1390 
thªad_d©a
 *
td
 = 
d©a
;

1391 
io_u
 *io_u;

1392 
ªt
 = 0;

1394 i‡(
	`fio_›ti⁄_is_£t
(&
td
->
o
, 
vîify_˝umask
) &&

1395 
	`fio_£èfföôy
(
td
->
pid
,Åd->
o
.
vîify_˝umask
)) {

1396 
	`log_îr
("fio: failed setting verifyÅhreadáffinity\n");

1397 
d⁄e
;

1401 
	`FLIST_HEAD
(
li°
);

1403 
	`ªad_b¨rõr
();

1404 i‡(
td
->
vîify_thªad_exô
)

1407 
	`±hªad_muãx_lock
(&
td
->
io_u_lock
);

1409 
	`Êi°_em±y
(&
td
->
vîify_li°
) &&

1410 !
td
->
vîify_thªad_exô
) {

1411 
ªt
 = 
	`±hªad_c⁄d_waô
(&
td
->
vîify_c⁄d
,

1412 &
td
->
io_u_lock
);

1413 i‡(
ªt
) {

1418 
	`Êi°_•li˚_öô
(&
td
->
vîify_li°
, &
li°
);

1419 
	`±hªad_muãx_u∆ock
(&
td
->
io_u_lock
);

1421 i‡(
	`Êi°_em±y
(&
li°
))

1424 !
	`Êi°_em±y
(&
li°
)) {

1425 
io_u
 = 
	`Êi°_fú°_íåy
(&
li°
, io_u, 
vîify_li°
);

1426 
	`Êi°_dñ_öô
(&
io_u
->
vîify_li°
);

1428 
	`io_u_£t
(
td
, 
io_u
, 
IO_U_F_NO_FILE_PUT
);

1429 
ªt
 = 
	`vîify_io_u
(
td
, &
io_u
);

1431 
	`put_io_u
(
td
, 
io_u
);

1432 i‡(!
ªt
)

1434 i‡(
	`td_n⁄_Áèl_îr‹
(
td
, 
ERROR_TYPE_VERIFY_BIT
, 
ªt
)) {

1435 
	`upd©e_îr‹_cou¡
(
td
, 
ªt
);

1436 
	`td_˛ór_îr‹
(
td
);

1437 
ªt
 = 0;

1440 } !
ªt
);

1442 i‡(
ªt
) {

1443 
	`td_vîr‹
(
td
, 
ªt
, "async_verify");

1444 i‡(
td
->
o
.
vîify_Áèl
)

1445 
	`fio_m¨k_td_ãrmö©e
(
td
);

1448 
d⁄e
:

1449 
	`±hªad_muãx_lock
(&
td
->
io_u_lock
);

1450 
td
->
ƒ_vîify_thªads
--;

1451 
	`±hªad_c⁄d_sig«l
(&
td
->
‰ì_c⁄d
);

1452 
	`±hªad_muãx_u∆ock
(&
td
->
io_u_lock
);

1454  
NULL
;

1455 
	}
}

1457 
	$vîify_async_öô
(
thªad_d©a
 *
td
)

1459 
i
, 
ªt
;

1460 
±hªad_©å_t
 
©å
;

1462 
	`±hªad_©å_öô
(&
©å
);

1463 
	`±hªad_©å_£t°acksize
(&
©å
, 2 * 
PTHREAD_STACK_MIN
);

1465 
td
->
vîify_thªad_exô
 = 0;

1467 
td
->
vîify_thªads
 = 
	`mÆloc
((
±hªad_t
Ë*Åd->
o
.
vîify_async
);

1468 
i
 = 0; i < 
td
->
o
.
vîify_async
; i++) {

1469 
ªt
 = 
	`±hªad_¸óã
(&
td
->
vîify_thªads
[
i
], &
©å
,

1470 
vîify_async_thªad
, 
td
);

1471 i‡(
ªt
) {

1472 
	`log_îr
("fio:ásync verify creation failed: %s\n",

1473 
	`°ªº‹
(
ªt
));

1476 
ªt
 = 
	`±hªad_dëach
(
td
->
vîify_thªads
[
i
]);

1477 i‡(
ªt
) {

1478 
	`log_îr
("fio:ásync verifyÅhread detach failed: %s\n",

1479 
	`°ªº‹
(
ªt
));

1482 
td
->
ƒ_vîify_thªads
++;

1485 
	`±hªad_©å_de°roy
(&
©å
);

1487 i‡(
i
 !
td
->
o
.
vîify_async
) {

1488 
	`log_îr
("fio: o∆y %d vîifyÅhªad†°¨ãd,Éxôög\n", 
i
);

1490 
	`±hªad_muãx_lock
(&
td
->
io_u_lock
);

1491 
td
->
vîify_thªad_exô
 = 1;

1492 
	`±hªad_c⁄d_brﬂdˇ°
(&
td
->
vîify_c⁄d
);

1493 
	`±hªad_muãx_u∆ock
(&
td
->
io_u_lock
);

1499 
	}
}

1501 
	$vîify_async_exô
(
thªad_d©a
 *
td
)

1503 
	`±hªad_muãx_lock
(&
td
->
io_u_lock
);

1504 
td
->
vîify_thªad_exô
 = 1;

1505 
	`±hªad_c⁄d_brﬂdˇ°
(&
td
->
vîify_c⁄d
);

1507 
td
->
ƒ_vîify_thªads
)

1508 
	`±hªad_c⁄d_waô
(&
td
->
‰ì_c⁄d
, &td->
io_u_lock
);

1510 
	`±hªad_muãx_u∆ock
(&
td
->
io_u_lock
);

1511 
	`‰ì
(
td
->
vîify_thªads
);

1512 
td
->
vîify_thªads
 = 
NULL
;

1513 
	}
}

1515 
	$∑°e_blockoff
(*
buf
, 
Àn
, *
¥iv
)

1517 
io_u
 *
io
 = 
¥iv
;

1518 
off
;

1520 
	`ty≥check
(
	`__ty≥of__
(
off
), 
io
->
off£t
);

1521 
off
 = 
	`˝u_to_À64
((
uöt64_t
)
io
->
off£t
);

1522 
Àn
 = 
	`mö
÷í, ()(
off
));

1523 
	`mem˝y
(
buf
, &
off
, 
Àn
);

1525 
	}
}

1527 
	$__fûl_fûe_com∂ëi⁄s
(
thªad_d©a
 *
td
,

1528 
thªad_io_li°
 *
s
,

1529 
fio_fûe
 *
f
, *
ödex
)

1531 
comps
;

1532 
i
, 
j
;

1534 i‡(!
f
->
œ°_wrôe_comp
)

1537 i‡(
td
->
io_blocks
[
DDIR_WRITE
] <Åd->
o
.
iodïth
)

1538 
comps
 = 
td
->
io_blocks
[
DDIR_WRITE
];

1540 
comps
 = 
td
->
o
.
iodïth
;

1542 
j
 = 
f
->
œ°_wrôe_idx
 - 1;

1543 
i
 = 0; i < 
comps
; i++) {

1544 i‡(
j
 == -1)

1545 
j
 = 
td
->
o
.
iodïth
 - 1;

1546 
s
->
comps
[*
ödex
].
fûío
 = 
	`__˝u_to_À64
(
f
->fileno);

1547 
s
->
comps
[*
ödex
].
off£t
 = 
	`˝u_to_À64
(
f
->
œ°_wrôe_comp
[
j
]);

1548 (*
ödex
)++;

1549 
j
--;

1552  
comps
;

1553 
	}
}

1555 
	$fûl_fûe_com∂ëi⁄s
(
thªad_d©a
 *
td
,

1556 
thªad_io_li°
 *
s
, *
ödex
)

1558 
fio_fûe
 *
f
;

1559 
i
;

1560 
comps
 = 0;

1562 
	`f‹_óch_fûe
(
td
, 
f
, 
i
)

1563 
comps
 +
	`__fûl_fûe_com∂ëi⁄s
(
td
, 
s
, 
f
, 
ödex
);

1565  
comps
;

1566 
	}
}

1568 
Æl_io_li°
 *
	$gë_Æl_io_li°
(
ßve_mask
, 
size_t
 *
sz
)

1570 
Æl_io_li°
 *
ªp
;

1571 
thªad_d©a
 *
td
;

1572 
size_t
 
dïth
;

1573 *
√xt
;

1574 
i
, 
ƒ
;

1576 
	`compûëime_as£π
((
Æl_io_li°
) == 8, "all_io_list");

1582 
dïth
 = 0;

1583 
ƒ
 = 0;

1584 
	`f‹_óch_td
(
td
, 
i
) {

1585 i‡(
ßve_mask
 !
IO_LIST_ALL
 && (
i
 + 1) != save_mask)

1587 
td
->
°›_io
 = 1;

1588 
td
->
Êags
 |
TD_F_VSTATE_SAVED
;

1589 
dïth
 +(
td
->
o
.
iodïth
 *Åd->o.
ƒ_fûes
);

1590 
ƒ
++;

1593 i‡(!
ƒ
)

1594  
NULL
;

1596 *
sz
 = (*
ªp
);

1597 *
sz
 +
ƒ
 * (
thªad_io_li°
);

1598 *
sz
 +
dïth
 * (
fûe_comp
);

1599 
ªp
 = 
	`mÆloc
(*
sz
);

1600 
	`mem£t
(
ªp
, 0, *
sz
);

1602 
ªp
->
thªads
 = 
	`˝u_to_À64
((
uöt64_t
Ë
ƒ
);

1604 
√xt
 = &
ªp
->
°©e
[0];

1605 
	`f‹_óch_td
(
td
, 
i
) {

1606 
thªad_io_li°
 *
s
 = 
√xt
;

1607 
comps
, 
ödex
 = 0;

1609 i‡(
ßve_mask
 !
IO_LIST_ALL
 && (
i
 + 1) != save_mask)

1612 
comps
 = 
	`fûl_fûe_com∂ëi⁄s
(
td
, 
s
, &
ödex
);

1614 
s
->
no_comps
 = 
	`˝u_to_À64
((
uöt64_t
Ë
comps
);

1615 
s
->
dïth
 = 
	`˝u_to_À64
((
uöt64_t
Ë
td
->
o
.
iodïth
);

1616 
s
->
nofûes
 = 
	`˝u_to_À64
((
uöt64_t
Ë
td
->
o
.
ƒ_fûes
);

1617 
s
->
numbîio
 = 
	`˝u_to_À64
((
uöt64_t
Ë
td
->
io_issues
[
DDIR_WRITE
]);

1618 
s
->
ödex
 = 
	`˝u_to_À64
((
uöt64_t
Ë
i
);

1619 i‡(
td
->
øndom_°©e
.
u£64
) {

1620 
s
->
ønd
.
°©e64
.s[0] = 
	`˝u_to_À64
(
td
->
øndom_°©e
.°©e64.
s1
);

1621 
s
->
ønd
.
°©e64
.s[1] = 
	`˝u_to_À64
(
td
->
øndom_°©e
.°©e64.
s2
);

1622 
s
->
ønd
.
°©e64
.s[2] = 
	`˝u_to_À64
(
td
->
øndom_°©e
.°©e64.
s3
);

1623 
s
->
ønd
.
°©e64
.s[3] = 
	`˝u_to_À64
(
td
->
øndom_°©e
.°©e64.
s4
);

1624 
s
->
ønd
.
°©e64
.s[4] = 
	`˝u_to_À64
(
td
->
øndom_°©e
.°©e64.
s5
);

1625 
s
->
ønd
.
°©e64
.s[5] = 0;

1626 
s
->
ønd
.
u£64
 = 
	`˝u_to_À64
((
uöt64_t
)1);

1628 
s
->
ønd
.
°©e32
.s[0] = 
	`˝u_to_À32
(
td
->
øndom_°©e
.°©e32.
s1
);

1629 
s
->
ønd
.
°©e32
.s[1] = 
	`˝u_to_À32
(
td
->
øndom_°©e
.°©e32.
s2
);

1630 
s
->
ønd
.
°©e32
.s[2] = 
	`˝u_to_À32
(
td
->
øndom_°©e
.°©e32.
s3
);

1631 
s
->
ønd
.
°©e32
.s[3] = 0;

1632 
s
->
ønd
.
u£64
 = 0;

1634 
	`¢¥ötf
((*Ë
s
->
«me
, (s->«me), "%s", 
td
->
o
.name);

1635 
√xt
 = 
	`io_li°_√xt
(
s
);

1638  
ªp
;

1639 
	}
}

1641 
	$›í_°©e_fûe
(c⁄° *
«me
, c⁄° *
¥efix
, 
num
,

1642 
f‹_wrôe
)

1644 
out
[
PATH_MAX
];

1645 
Êags
;

1646 
fd
;

1648 i‡(
f‹_wrôe
)

1649 
Êags
 = 
O_CREAT
 | 
O_TRUNC
 | 
O_WRONLY
 | 
O_SYNC
;

1651 
Êags
 = 
O_RDONLY
;

1653 
	`vîify_°©e_gí_«me
(
out
, (out), 
«me
, 
¥efix
, 
num
);

1655 
fd
 = 
	`›í
(
out
, 
Êags
, 0644);

1656 i‡(
fd
 == -1) {

1657 
	`≥º‹
("fio: open state file");

1658 
	`log_îr
("fio: sèã fûe: %†(f‹_wrôe=%d)\n", 
out
, 
f‹_wrôe
);

1662  
fd
;

1663 
	}
}

1665 
	$wrôe_thªad_li°_°©e
(
thªad_io_li°
 *
s
,

1666 c⁄° *
¥efix
)

1668 
vîify_°©e_hdr
 
hdr
;

1669 
uöt64_t
 
¸c
;

1670 
ssize_t
 
ªt
;

1671 
fd
;

1673 
fd
 = 
	`›í_°©e_fûe
((c⁄° *Ë
s
->
«me
, 
¥efix
, s->
ödex
, 1);

1674 i‡(
fd
 == -1)

1677 
¸c
 = 
	`fio_¸c32c
((*)
s
, 
	`thªad_io_li°_sz
(s));

1679 
hdr
.
vîsi⁄
 = 
	`˝u_to_À64
((
uöt64_t
Ë
VSTATE_HDR_VERSION
);

1680 
hdr
.
size
 = 
	`˝u_to_À64
((
uöt64_t
Ë
	`thªad_io_li°_sz
(
s
));

1681 
hdr
.
¸c
 = 
	`˝u_to_À64
(crc);

1682 
ªt
 = 
	`wrôe
(
fd
, &
hdr
, (hdr));

1683 i‡(
ªt
 !(
hdr
))

1684 
wrôe_Áû
;

1686 
ªt
 = 
	`wrôe
(
fd
, 
s
, 
	`thªad_io_li°_sz
(s));

1687 i‡(
ªt
 !
	`thªad_io_li°_sz
(
s
)) {

1688 
wrôe_Áû
:

1689 i‡(
ªt
 < 0)

1690 
	`≥º‹
("fio: write state file");

1691 
	`log_îr
("fio: failedÅo write state file\n");

1692 
ªt
 = 1;

1694 
ªt
 = 0;

1696 
	`˛o£
(
fd
);

1697  
ªt
;

1698 
	}
}

1700 
	$__vîify_ßve_°©e
(
Æl_io_li°
 *
°©e
, c⁄° *
¥efix
)

1702 
thªad_io_li°
 *
s
 = &
°©e
->state[0];

1703 
i
;

1705 
i
 = 0; i < 
	`À64_to_˝u
(
°©e
->
thªads
); i++) {

1706 
	`wrôe_thªad_li°_°©e
(
s
, 
¥efix
);

1707 
s
 = 
	`io_li°_√xt
(s);

1709 
	}
}

1711 
	$vîify_ßve_°©e
(
mask
)

1713 
Æl_io_li°
 *
°©e
;

1714 
size_t
 
sz
;

1716 
°©e
 = 
	`gë_Æl_io_li°
(
mask
, &
sz
);

1717 i‡(
°©e
) {

1718 
¥efix
[
PATH_MAX
];

1720 i‡(
aux_∑th
)

1721 
	`•rötf
(
¥efix
, "%s%˛oˇl", 
aux_∑th
, 
FIO_OS_PATH_SEPARATOR
);

1723 
	`°r˝y
(
¥efix
, "local");

1725 
	`__vîify_ßve_°©e
(
°©e
, 
¥efix
);

1726 
	`‰ì
(
°©e
);

1728 
	}
}

1730 
	$vîify_‰ì_°©e
(
thªad_d©a
 *
td
)

1732 i‡(
td
->
v°©e
)

1733 
	`‰ì
(
td
->
v°©e
);

1734 
	}
}

1736 
	$vîify_assign_°©e
(
thªad_d©a
 *
td
, *
p
)

1738 
thªad_io_li°
 *
s
 = 
p
;

1739 
i
;

1741 
s
->
no_comps
 = 
	`À64_to_˝u
(s->no_comps);

1742 
s
->
dïth
 = 
	`À32_to_˝u
(s->depth);

1743 
s
->
nofûes
 = 
	`À32_to_˝u
(s->nofiles);

1744 
s
->
numbîio
 = 
	`À64_to_˝u
(s->numberio);

1745 
s
->
ønd
.
u£64
 = 
	`À64_to_˝u
(s->rand.use64);

1747 i‡(
s
->
ønd
.
u£64
) {

1748 
i
 = 0; i < 6; i++)

1749 
s
->
ønd
.
°©e64
.s[
i
] = 
	`À64_to_˝u
(s->rand.state64.s[i]);

1751 
i
 = 0; i < 4; i++)

1752 
s
->
ønd
.
°©e32
.s[
i
] = 
	`À32_to_˝u
(s->rand.state32.s[i]);

1755 
i
 = 0; i < 
s
->
no_comps
; i++) {

1756 
s
->
comps
[
i
].
fûío
 = 
	`À64_to_˝u
(s->comps[i].fileno);

1757 
s
->
comps
[
i
].
off£t
 = 
	`À64_to_˝u
(s->comps[i].offset);

1760 
td
->
v°©e
 = 
p
;

1761 
	}
}

1763 
	$vîify_°©e_hdr
(
vîify_°©e_hdr
 *
hdr
, 
thªad_io_li°
 *
s
)

1765 
uöt64_t
 
¸c
;

1767 
hdr
->
vîsi⁄
 = 
	`À64_to_˝u
(hdr->version);

1768 
hdr
->
size
 = 
	`À64_to_˝u
(hdr->size);

1769 
hdr
->
¸c
 = 
	`À64_to_˝u
(hdr->crc);

1771 i‡(
hdr
->
vîsi⁄
 !
VSTATE_HDR_VERSION
)

1774 
¸c
 = 
	`fio_¸c32c
((*)
s
, 
hdr
->
size
);

1775 i‡(
¸c
 !
hdr
->crc)

1779 
	}
}

1781 
	$vîify_lﬂd_°©e
(
thªad_d©a
 *
td
, c⁄° *
¥efix
)

1783 
vîify_°©e_hdr
 
hdr
;

1784 *
s
 = 
NULL
;

1785 
uöt64_t
 
¸c
;

1786 
ssize_t
 
ªt
;

1787 
fd
;

1789 i‡(!
td
->
o
.
vîify_°©e
)

1792 
fd
 = 
	`›í_°©e_fûe
(
td
->
o
.
«me
, 
¥efix
,Åd->
thªad_numbî
 - 1, 0);

1793 i‡(
fd
 == -1)

1796 
ªt
 = 
	`ªad
(
fd
, &
hdr
, (hdr));

1797 i‡(
ªt
 !(
hdr
)) {

1798 i‡(
ªt
 < 0)

1799 
	`td_vîr‹
(
td
, 
î∫o
, "read verify state hdr");

1800 
	`log_îr
("fio: failedÑeading verify state header\n");

1801 
îr
;

1804 
hdr
.
vîsi⁄
 = 
	`À64_to_˝u
(hdr.version);

1805 
hdr
.
size
 = 
	`À64_to_˝u
(hdr.size);

1806 
hdr
.
¸c
 = 
	`À64_to_˝u
(hdr.crc);

1808 i‡(
hdr
.
vîsi⁄
 !
VSTATE_HDR_VERSION
) {

1809 
	`log_îr
("fio: unsupported (%d) version in verify state header\n",

1810 (Ë
hdr
.
vîsi⁄
);

1811 
îr
;

1814 
s
 = 
	`mÆloc
(
hdr
.
size
);

1815 
ªt
 = 
	`ªad
(
fd
, 
s
, 
hdr
.
size
);

1816 i‡(
ªt
 !
hdr
.
size
) {

1817 i‡(
ªt
 < 0)

1818 
	`td_vîr‹
(
td
, 
î∫o
, "read verify state");

1819 
	`log_îr
("fio: failedÑeading verity state\n");

1820 
îr
;

1823 
¸c
 = 
	`fio_¸c32c
(
s
, 
hdr
.
size
);

1824 i‡(
¸c
 !
hdr
.crc) {

1825 
	`log_îr
("fio: verify state is corrupt\n");

1826 
îr
;

1829 
	`˛o£
(
fd
);

1831 
	`vîify_assign_°©e
(
td
, 
s
);

1833 
îr
:

1834 i‡(
s
)

1835 
	`‰ì
(
s
);

1836 
	`˛o£
(
fd
);

1838 
	}
}

1843 
	$vîify_°©e_should_°›
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

1845 
thªad_io_li°
 *
s
 = 
td
->
v°©e
;

1846 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

1847 
i
;

1849 i‡(!
s
 || !
f
)

1856 i‡((
td
->
io_blocks
[
DDIR_READ
] < 
s
->
dïth
 ||

1857 
s
->
numbîio
 - 
td
->
io_blocks
[
DDIR_READ
] > s->
dïth
) &&

1858 
s
->
numbîio
 > s->
dïth
)

1866 
i
 = 0; i < 
s
->
no_comps
; i++) {

1867 i‡(
s
->
comps
[
i
].
fûío
 !
f
->fileno)

1869 i‡(
io_u
->
vîify_off£t
 =
s
->
comps
[
i
].
off£t
)

1877 
	}
}

	@verify.h

1 #i‚de‡
FIO_VERIFY_H


2 
	#FIO_VERIFY_H


	)

4 
	~<°döt.h
>

5 
	~"compûî/compûî.h
"

6 
	~"vîify-°©e.h
"

8 
	#FIO_HDR_MAGIC
 0xacˇ

	)

11 
	mVERIFY_NONE
 = 0,

12 
	mVERIFY_HDR_ONLY
,

15 
	mVERIFY_MD5
,

16 
	mVERIFY_CRC64
,

17 
	mVERIFY_CRC32
,

18 
	mVERIFY_CRC32C
,

19 
	mVERIFY_CRC32C_INTEL
,

20 
	mVERIFY_CRC16
,

21 
	mVERIFY_CRC7
,

22 
	mVERIFY_SHA256
,

23 
	mVERIFY_SHA512
,

24 
	mVERIFY_SHA3_224
,

25 
	mVERIFY_SHA3_256
,

26 
	mVERIFY_SHA3_384
,

27 
	mVERIFY_SHA3_512
,

28 
	mVERIFY_XXHASH
,

29 
	mVERIFY_SHA1
,

30 
	mVERIFY_PATTERN
,

31 
	mVERIFY_PATTERN_NO_HDR
,

32 
	mVERIFY_NULL
,

40 
	svîify_hódî
 {

41 
uöt16_t
 
	mmagic
;

42 
uöt16_t
 
	mvîify_ty≥
;

43 
uöt32_t
 
	mÀn
;

44 
uöt64_t
 
	mønd_£ed
;

45 
uöt64_t
 
	moff£t
;

46 
uöt32_t
 
	mtime_£c
;

47 
uöt32_t
 
	mtime_n£c
;

48 
uöt16_t
 
	mthªad
;

49 
uöt16_t
 
	mnumbîio
;

50 
uöt32_t
 
	m¸c32
;

53 
	svhdr_md5
 {

54 
uöt32_t
 
	mmd5_dige°
[4];

56 
	svhdr_sha3_224
 {

57 
uöt8_t
 
	msha
[224 / 8];

59 
	svhdr_sha3_256
 {

60 
uöt8_t
 
	msha
[256 / 8];

62 
	svhdr_sha3_384
 {

63 
uöt8_t
 
	msha
[384 / 8];

65 
	svhdr_sha3_512
 {

66 
uöt8_t
 
	msha
[512 / 8];

68 
	svhdr_sha512
 {

69 
uöt8_t
 
	msha512
[128];

71 
	svhdr_sha256
 {

72 
uöt8_t
 
	msha256
[64];

74 
	svhdr_sha1
 {

75 
uöt32_t
 
	msha1
[5];

77 
	svhdr_¸c64
 {

78 
uöt64_t
 
	m¸c64
;

80 
	svhdr_¸c32
 {

81 
uöt32_t
 
	m¸c32
;

83 
	svhdr_¸c16
 {

84 
uöt16_t
 
	m¸c16
;

86 
	svhdr_¸c7
 {

87 
uöt8_t
 
	m¸c7
;

89 
	svhdr_xxhash
 {

90 
uöt32_t
 
	mhash
;

96 
p›uœã_vîify_io_u
(
thªad_d©a
 *, 
io_u
 *);

97 
__mu°_check
 
gë_√xt_vîify
(
thªad_d©a
 *
td
, 
io_u
 *);

98 
__mu°_check
 
vîify_io_u
(
thªad_d©a
 *, 
io_u
 **);

99 
vîify_io_u_async
(
thªad_d©a
 *, 
io_u
 **);

100 
fûl_vîify_∑âîn
(
thªad_d©a
 *
td
, *
p
, 
Àn
, 
io_u
 *io_u, 
uöt64_t
 
£ed
, 
u£_£ed
);

101 
fûl_buf„r_∑âîn
(
thªad_d©a
 *
td
, *
p
, 
Àn
);

102 
fio_vîify_öô
(
thªad_d©a
 *
td
);

107 
vîify_async_öô
(
thªad_d©a
 *);

108 
vîify_async_exô
(
thªad_d©a
 *);

113 
∑°e_blockoff
(*
buf
, 
Àn
, *
¥iv
);

	@workqueue.c

7 
	~<uni°d.h
>

9 
	~"fio.h
"

10 
	~"Êi°.h
"

11 
	~"w‹kqueue.h
"

12 
	~"smÆloc.h
"

13 
	~"psh¨ed.h
"

16 
	mSW_F_IDLE
 = 1 << 0,

17 
	mSW_F_RUNNING
 = 1 << 1,

18 
	mSW_F_EXIT
 = 1 << 2,

19 
	mSW_F_ACCOUNTED
 = 1 << 3,

20 
	mSW_F_ERROR
 = 1 << 4,

23 
submô_w‹kî
 *
	$__gë_submô_w‹kî
(
w‹kqueue
 *
wq
,

24 
°¨t
,

25 
íd
,

26 
submô_w‹kî
 **
be°
)

28 
submô_w‹kî
 *
sw
 = 
NULL
;

30 
°¨t
 <
íd
) {

31 
sw
 = &
wq
->
w‹kîs
[
°¨t
];

32 i‡(
sw
->
Êags
 & 
SW_F_IDLE
)

33  
sw
;

34 i‡(!(*
be°
Ë|| 
sw
->
£q
 < (*best)->seq)

35 *
be°
 = 
sw
;

36 
°¨t
++;

39  
NULL
;

40 
	}
}

42 
submô_w‹kî
 *
	$gë_submô_w‹kî
(
w‹kqueue
 *
wq
)

44 
√xt
 = 
wq
->
√xt_‰ì_w‹kî
;

45 
submô_w‹kî
 *
sw
, *
be°
 = 
NULL
;

47 
	`as£π
(
√xt
 < 
wq
->
max_w‹kîs
);

49 
sw
 = 
	`__gë_submô_w‹kî
(
wq
, 
√xt
, wq->
max_w‹kîs
 - 1, &
be°
);

50 i‡(!
sw
 && 
√xt
)

51 
sw
 = 
	`__gë_submô_w‹kî
(
wq
, 0, 
√xt
 - 1, &
be°
);

56 i‡(!
sw
)

57 
sw
 = 
be°
;

59 i‡(
sw
->
ödex
 =
wq
->
√xt_‰ì_w‹kî
) {

60 i‡(
sw
->
ödex
 + 1 < 
wq
->
max_w‹kîs
)

61 
wq
->
√xt_‰ì_w‹kî
 = 
sw
->
ödex
 + 1;

63 
wq
->
√xt_‰ì_w‹kî
 = 0;

66  
sw
;

67 
	}
}

69 
boﬁ
 
	$Æl_sw_idÀ
(
w‹kqueue
 *
wq
)

71 
i
;

73 
i
 = 0; i < 
wq
->
max_w‹kîs
; i++) {

74 
submô_w‹kî
 *
sw
 = &
wq
->
w‹kîs
[
i
];

76 i‡(!(
sw
->
Êags
 & 
SW_F_IDLE
))

77  
Ál£
;

80  
åue
;

81 
	}
}

86 
	$w‹kqueue_Êush
(
w‹kqueue
 *
wq
)

88 
	`±hªad_muãx_lock
(&
wq
->
Êush_lock
);

89 
wq
->
wake_idÀ
 = 1;

91 !
	`Æl_sw_idÀ
(
wq
))

92 
	`±hªad_c⁄d_waô
(&
wq
->
Êush_c⁄d
, &wq->
Êush_lock
);

94 
wq
->
wake_idÀ
 = 0;

95 
	`±hªad_muãx_u∆ock
(&
wq
->
Êush_lock
);

96 
	}
}

101 
	$w‹kqueue_íqueue
(
w‹kqueue
 *
wq
, 
w‹kqueue_w‹k
 *
w‹k
)

103 
submô_w‹kî
 *
sw
;

105 
sw
 = 
	`gë_submô_w‹kî
(
wq
);

106 
	`as£π
(
sw
);

108 
	`±hªad_muãx_lock
(&
sw
->
lock
);

109 
	`Êi°_add_èû
(&
w‹k
->
li°
, &
sw
->
w‹k_li°
);

110 
sw
->
£q
 = ++
wq
->
w‹k_£q
;

111 
sw
->
Êags
 &~
SW_F_IDLE
;

113 
	`±hªad_c⁄d_sig«l
(&
sw
->
c⁄d
);

114 
	`±hªad_muãx_u∆ock
(&
sw
->
lock
);

115 
	}
}

117 
	$h™dÀ_li°
(
submô_w‹kî
 *
sw
, 
Êi°_hód
 *
li°
)

119 
w‹kqueue
 *
wq
 = 
sw
->wq;

120 
w‹kqueue_w‹k
 *
w‹k
;

122 !
	`Êi°_em±y
(
li°
)) {

123 
w‹k
 = 
	`Êi°_fú°_íåy
(
li°
, 
w‹kqueue_w‹k
,Üist);

124 
	`Êi°_dñ_öô
(&
w‹k
->
li°
);

125 
wq
->
›s
.
	`‚
(
sw
, 
w‹k
);

127 
	}
}

129 *
	$w‹kî_thªad
(*
d©a
)

131 
submô_w‹kî
 *
sw
 = 
d©a
;

132 
w‹kqueue
 *
wq
 = 
sw
->wq;

133 
ªt
 = 0;

134 
	`FLIST_HEAD
(
loˇl_li°
);

136 
	`sk_out_assign
(
sw
->
sk_out
);

138 i‡(
wq
->
›s
.
ni˚
) {

139 i‡(
	`ni˚
(
wq
->
›s
.
ni˚
) < 0) {

140 
	`log_îr
("w‹kqueue:Çi˚ %s\n", 
	`°ªº‹
(
î∫o
));

141 
ªt
 = 1;

145 i‡(!
ªt
)

146 
ªt
 = 
	`w‹kqueue_öô_w‹kî
(
sw
);

148 
	`±hªad_muãx_lock
(&
sw
->
lock
);

149 
sw
->
Êags
 |
SW_F_RUNNING
;

150 i‡(
ªt
)

151 
sw
->
Êags
 |
SW_F_ERROR
;

152 
	`±hªad_muãx_u∆ock
(&
sw
->
lock
);

154 
	`±hªad_muãx_lock
(&
wq
->
Êush_lock
);

155 
	`±hªad_c⁄d_sig«l
(&
wq
->
Êush_c⁄d
);

156 
	`±hªad_muãx_u∆ock
(&
wq
->
Êush_lock
);

158 i‡(
sw
->
Êags
 & 
SW_F_ERROR
)

159 
d⁄e
;

161 
	`±hªad_muãx_lock
(&
sw
->
lock
);

163 i‡(
	`Êi°_em±y
(&
sw
->
w‹k_li°
)) {

164 i‡(
sw
->
Êags
 & 
SW_F_EXIT
) {

168 i‡(
	`w‹kqueue_¥e_¶ìp_check
(
sw
)) {

169 
	`±hªad_muãx_u∆ock
(&
sw
->
lock
);

170 
	`w‹kqueue_¥e_¶ìp
(
sw
);

171 
	`±hªad_muãx_lock
(&
sw
->
lock
);

178 i‡(
	`Êi°_em±y
(&
sw
->
w‹k_li°
)) {

179 i‡(
sw
->
Êags
 & 
SW_F_EXIT
) {

182 i‡(!(
sw
->
Êags
 & 
SW_F_IDLE
)) {

183 
sw
->
Êags
 |
SW_F_IDLE
;

184 
wq
->
√xt_‰ì_w‹kî
 = 
sw
->
ödex
;

185 
	`±hªad_muãx_u∆ock
(&
sw
->
lock
);

186 
	`±hªad_muãx_lock
(&
wq
->
Êush_lock
);

187 i‡(
wq
->
wake_idÀ
)

188 
	`±hªad_c⁄d_sig«l
(&
wq
->
Êush_c⁄d
);

189 
	`±hªad_muãx_u∆ock
(&
wq
->
Êush_lock
);

190 
	`±hªad_muãx_lock
(&
sw
->
lock
);

193 i‡(
	`Êi°_em±y
(&
sw
->
w‹k_li°
)) {

194 i‡(
sw
->
Êags
 & 
SW_F_EXIT
) {

197 
	`±hªad_c⁄d_waô
(&
sw
->
c⁄d
, &sw->
lock
);

199 
	`Êi°_•li˚_öô
(&
sw
->
w‹k_li°
, &
loˇl_li°
);

201 
	`±hªad_muãx_u∆ock
(&
sw
->
lock
);

202 
	`h™dÀ_li°
(
sw
, &
loˇl_li°
);

203 i‡(
wq
->
›s
.
upd©e_ac˘_‚
)

204 
wq
->
›s
.
	`upd©e_ac˘_‚
(
sw
);

205 
	`±hªad_muãx_lock
(&
sw
->
lock
);

207 
	`±hªad_muãx_u∆ock
(&
sw
->
lock
);

209 
d⁄e
:

210 
	`sk_out_dr›
();

211  
NULL
;

212 
	}
}

214 
	$‰ì_w‹kî
(
submô_w‹kî
 *
sw
, *
sum_˙t
)

216 
w‹kqueue
 *
wq
 = 
sw
->wq;

218 
	`w‹kqueue_exô_w‹kî
(
sw
, 
sum_˙t
);

220 
	`±hªad_c⁄d_de°roy
(&
sw
->
c⁄d
);

221 
	`±hªad_muãx_de°roy
(&
sw
->
lock
);

223 i‡(
wq
->
›s
.
‰ì_w‹kî_‚
)

224 
wq
->
›s
.
	`‰ì_w‹kî_‚
(
sw
);

225 
	}
}

227 
	$shutdown_w‹kî
(
submô_w‹kî
 *
sw
, *
sum_˙t
)

229 
	`±hªad_joö
(
sw
->
thªad
, 
NULL
);

230 
	`‰ì_w‹kî
(
sw
, 
sum_˙t
);

231 
	}
}

233 
	$w‹kqueue_exô
(
w‹kqueue
 *
wq
)

235 
shutdown
, 
sum_˙t
 = 0;

236 
submô_w‹kî
 *
sw
;

237 
i
;

239 i‡(!
wq
->
w‹kîs
)

242 
i
 = 0; i < 
wq
->
max_w‹kîs
; i++) {

243 
sw
 = &
wq
->
w‹kîs
[
i
];

245 
	`±hªad_muãx_lock
(&
sw
->
lock
);

246 
sw
->
Êags
 |
SW_F_EXIT
;

247 
	`±hªad_c⁄d_sig«l
(&
sw
->
c⁄d
);

248 
	`±hªad_muãx_u∆ock
(&
sw
->
lock
);

252 
shutdown
 = 0;

253 
i
 = 0; i < 
wq
->
max_w‹kîs
; i++) {

254 
sw
 = &
wq
->
w‹kîs
[
i
];

255 i‡(
sw
->
Êags
 & 
SW_F_ACCOUNTED
)

257 
	`±hªad_muãx_lock
(&
sw
->
lock
);

258 
sw
->
Êags
 |
SW_F_ACCOUNTED
;

259 
	`±hªad_muãx_u∆ock
(&
sw
->
lock
);

260 
	`shutdown_w‹kî
(
sw
, &
sum_˙t
);

261 
shutdown
++;

263 } 
shutdown
 && shutdow¿!
wq
->
max_w‹kîs
);

265 
	`s‰ì
(
wq
->
w‹kîs
);

266 
wq
->
w‹kîs
 = 
NULL
;

267 
	`±hªad_muãx_de°roy
(&
wq
->
Êush_lock
);

268 
	`±hªad_c⁄d_de°roy
(&
wq
->
Êush_c⁄d
);

269 
	`±hªad_muãx_de°roy
(&
wq
->
°©_lock
);

270 
	}
}

272 
	$°¨t_w‹kî
(
w‹kqueue
 *
wq
, 
ödex
,

273 
sk_out
 *sk_out)

275 
submô_w‹kî
 *
sw
 = &
wq
->
w‹kîs
[
ödex
];

276 
ªt
;

278 
	`INIT_FLIST_HEAD
(&
sw
->
w‹k_li°
);

280 
ªt
 = 
	`muãx_c⁄d_öô_psh¨ed
(&
sw
->
lock
, &sw->
c⁄d
);

281 i‡(
ªt
)

282  
ªt
;

284 
sw
->
wq
 = wq;

285 
sw
->
ödex
 = index;

286 
sw
->
sk_out
 = sk_out;

288 i‡(
wq
->
›s
.
Æloc_w‹kî_‚
) {

289 
ªt
 = 
wq
->
›s
.
	`Æloc_w‹kî_‚
(
sw
);

290 i‡(
ªt
)

291  
ªt
;

294 
ªt
 = 
	`±hªad_¸óã
(&
sw
->
thªad
, 
NULL
, 
w‹kî_thªad
, sw);

295 i‡(!
ªt
) {

296 
	`±hªad_muãx_lock
(&
sw
->
lock
);

297 
sw
->
Êags
 = 
SW_F_IDLE
;

298 
	`±hªad_muãx_u∆ock
(&
sw
->
lock
);

302 
	`‰ì_w‹kî
(
sw
, 
NULL
);

304 
	}
}

306 
	$w‹kqueue_öô
(
thªad_d©a
 *
td
, 
w‹kqueue
 *
wq
,

307 
w‹kqueue_›s
 *
›s
, 
max_w‹kîs
,

308 
sk_out
 *sk_out)

310 
ru¬ög
;

311 
i
, 
îr‹
;

312 
ªt
;

314 
wq
->
max_w‹kîs
 = max_workers;

315 
wq
->
td
 =Åd;

316 
wq
->
›s
 = *ops;

317 
wq
->
w‹k_£q
 = 0;

318 
wq
->
√xt_‰ì_w‹kî
 = 0;

320 
ªt
 = 
	`muãx_c⁄d_öô_psh¨ed
(&
wq
->
Êush_lock
, &wq->
Êush_c⁄d
);

321 i‡(
ªt
)

322 
îr
;

323 
ªt
 = 
	`muãx_öô_psh¨ed
(&
wq
->
°©_lock
);

324 i‡(
ªt
)

325 
îr
;

327 
wq
->
w‹kîs
 = 
	`smÆloc
(wq->
max_w‹kîs
 * (
submô_w‹kî
));

328 i‡(!
wq
->
w‹kîs
)

329 
îr
;

331 
i
 = 0; i < 
wq
->
max_w‹kîs
; i++)

332 i‡(
	`°¨t_w‹kî
(
wq
, 
i
, 
sk_out
))

335 
wq
->
max_w‹kîs
 = 
i
;

336 i‡(!
wq
->
max_w‹kîs
)

337 
îr
;

342 
îr‹
 = 0;

343 
	`±hªad_muãx_lock
(&
wq
->
Êush_lock
);

345 
submô_w‹kî
 *
sw
;

347 
ru¬ög
 = 0;

348 
i
 = 0; i < 
wq
->
max_w‹kîs
; i++) {

349 
sw
 = &
wq
->
w‹kîs
[
i
];

350 
	`±hªad_muãx_lock
(&
sw
->
lock
);

351 i‡(
sw
->
Êags
 & 
SW_F_RUNNING
)

352 
ru¬ög
++;

353 i‡(
sw
->
Êags
 & 
SW_F_ERROR
)

354 
îr‹
++;

355 
	`±hªad_muãx_u∆ock
(&
sw
->
lock
);

358 i‡(
îr‹
 || 
ru¬ög
 =
wq
->
max_w‹kîs
)

361 
	`±hªad_c⁄d_waô
(&
wq
->
Êush_c⁄d
, &wq->
Êush_lock
);

363 
	`±hªad_muãx_u∆ock
(&
wq
->
Êush_lock
);

365 i‡(!
îr‹
)

368 
îr
:

369 
	`log_îr
("Can't createÑate workqueue\n");

370 
	`td_vîr‹
(
td
, 
ESRCH
, "workqueue_init");

371 
	`w‹kqueue_exô
(
wq
);

373 
	}
}

	@workqueue.h

1 #i‚de‡
FIO_RATE_H


2 
	#FIO_RATE_H


	)

4 
	~<öây≥s.h
>

5 
	~<±hªad.h
>

7 
	~"Êi°.h
"

8 
	~"lib/ty≥s.h
"

10 
	gsk_out
;

11 
	gthªad_d©a
;

13 
	sw‹kqueue_w‹k
 {

14 
Êi°_hód
 
	mli°
;

17 
	ssubmô_w‹kî
 {

18 
±hªad_t
 
	mthªad
;

19 
±hªad_muãx_t
 
	mlock
;

20 
±hªad_c⁄d_t
 
	mc⁄d
;

21 
Êi°_hód
 
	mw‹k_li°
;

22 
	mÊags
;

23 
	mödex
;

24 
uöt64_t
 
	m£q
;

25 
w‹kqueue
 *
	mwq
;

26 *
	m¥iv
;

27 
sk_out
 *
	msk_out
;

30 (
	tw‹kqueue_w‹k_‚
)(
	tsubmô_w‹kî
 *, 
	tw‹kqueue_w‹k
 *);

31 
	$boﬁ
 (
	tw‹kqueue_¥e_¶ìp_Êush_‚
)(
	tsubmô_w‹kî
 *);

32 (
	tw‹kqueue_¥e_¶ìp_‚
)(
	tsubmô_w‹kî
 *);

33 (
	tw‹kqueue_Æloc_w‹kî_‚
)(
	tsubmô_w‹kî
 *);

34 (
	tw‹kqueue_‰ì_w‹kî_‚
)(
	tsubmô_w‹kî
 *);

35 (
	tw‹kqueue_öô_w‹kî_‚
)(
	tsubmô_w‹kî
 *);

36 (
	tw‹kqueue_exô_w‹kî_‚
)(
	tsubmô_w‹kî
 *, *);

37 (
	tw‹kqueue_upd©e_ac˘_‚
)(
	tsubmô_w‹kî
 *);

39 
	sw‹kqueue_›s
 {

40 
w‹kqueue_w‹k_‚
 *
‚
;

41 
w‹kqueue_¥e_¶ìp_Êush_‚
 *
¥e_¶ìp_Êush_‚
;

42 
w‹kqueue_¥e_¶ìp_‚
 *
¥e_¶ìp_‚
;

44 
w‹kqueue_upd©e_ac˘_‚
 *
upd©e_ac˘_‚
;

46 
w‹kqueue_Æloc_w‹kî_‚
 *
Æloc_w‹kî_‚
;

47 
w‹kqueue_‰ì_w‹kî_‚
 *
‰ì_w‹kî_‚
;

49 
w‹kqueue_öô_w‹kî_‚
 *
öô_w‹kî_‚
;

50 
w‹kqueue_exô_w‹kî_‚
 *
exô_w‹kî_‚
;

52 
ni˚
;

55 
	sw‹kqueue
 {

56 
max_w‹kîs
;

58 
thªad_d©a
 *
td
;

59 
w‹kqueue_›s
 
›s
;

61 
uöt64_t
 
w‹k_£q
;

62 
submô_w‹kî
 *
w‹kîs
;

63 
√xt_‰ì_w‹kî
;

65 
±hªad_c⁄d_t
 
Êush_c⁄d
;

66 
±hªad_muãx_t
 
Êush_lock
;

67 
±hªad_muãx_t
 
°©_lock
;

68 vﬁ©ûê
wake_idÀ
;

71 
	`w‹kqueue_öô
(
thªad_d©a
 *
td
, 
w‹kqueue
 *
wq
, 
w‹kqueue_›s
 *
›s
, 
max_w‹kîs
, 
sk_out
 *sk_out);

72 
	`w‹kqueue_exô
(
w‹kqueue
 *
wq
);

74 
	`w‹kqueue_íqueue
(
w‹kqueue
 *
wq
, 
w‹kqueue_w‹k
 *
w‹k
);

75 
	`w‹kqueue_Êush
(
w‹kqueue
 *
wq
);

77 
ölöe
 
boﬁ
 
	$w‹kqueue_¥e_¶ìp_check
(
submô_w‹kî
 *
sw
)

79 
w‹kqueue
 *
wq
 = 
sw
->wq;

81 i‡(!
wq
->
›s
.
¥e_¶ìp_Êush_‚
)

82  
Ál£
;

84  
wq
->
›s
.
	`¥e_¶ìp_Êush_‚
(
sw
);

85 
	}
}

87 
ölöe
 
	$w‹kqueue_¥e_¶ìp
(
submô_w‹kî
 *
sw
)

89 
w‹kqueue
 *
wq
 = 
sw
->wq;

91 i‡(
wq
->
›s
.
¥e_¶ìp_‚
)

92 
wq
->
›s
.
	`¥e_¶ìp_‚
(
sw
);

93 
	}
}

95 
ölöe
 
	$w‹kqueue_öô_w‹kî
(
submô_w‹kî
 *
sw
)

97 
w‹kqueue
 *
wq
 = 
sw
->wq;

99 i‡(!
wq
->
›s
.
öô_w‹kî_‚
)

102  
wq
->
›s
.
	`öô_w‹kî_‚
(
sw
);

103 
	}
}

105 
ölöe
 
	$w‹kqueue_exô_w‹kî
(
submô_w‹kî
 *
sw
,

106 *
sum_˙t
)

108 
w‹kqueue
 *
wq
 = 
sw
->wq;

109 
tmp
 = 1;

111 i‡(!
wq
->
›s
.
exô_w‹kî_‚
)

114 i‡(!
sum_˙t
)

115 
sum_˙t
 = &
tmp
;

117 
wq
->
›s
.
	`exô_w‹kî_‚
(
sw
, 
sum_˙t
);

118 
	}
}

	@y.tab.c

48 
	#YYBISON
 1

	)

51 
	#YYBISON_VERSION
 "3.5.1"

	)

54 
	#YYSKELETON_NAME
 "yacc.c"

	)

57 
	#YYPURE
 0

	)

60 
	#YYPUSH
 0

	)

63 
	#YYPULL
 1

	)

89 
	~<°dio.h
>

90 
	~<°rög.h
>

91 
	~<m©h.h
>

93 
	s∑r£r_vÆue_ty≥
 {

94 
	mdvÆ
;

95 
	mivÆ
;

96 
	mhas_dvÆ
;

97 
	mhas_îr‹
;

100 
	uvÆty≥
 {

101 
∑r£r_vÆue_ty≥
 
	mv
;

102 } 
	tPARSER_VALUE_TYPE
;

104 
	#YYSTYPE
 
PARSER_VALUE_TYPE


	)

106 
yyîr‹
(
__©åibuã__
((
unu£d
)Ë*
ªsu…
,

107 
__©åibuã__
((
unu£d
)Ë*
dªsu…
,

108 
__©åibuã__
((
unu£d
)Ë*
has_îr‹
,

109 
__©åibuã__
((
unu£d
)Ë*
unôs_•ecifõd
,

110 
__©åibuã__
((
unu£d
)Ëc⁄° *
msg
);

112 
yyÀx
();

113 
yyª°¨t
(
FILE
 *
fûe
);

114 
Àxî_vÆue_is_time
;

118 #i‚de‡
YY_CAST


119 #ifde‡
__˝lu•lus


120 
	#YY_CAST
(
Ty≥
, 
VÆ
Ë
°©ic_ˇ°
<Ty≥> (VÆ)

	)

121 
	#YY_REINTERPRET_CAST
(
Ty≥
, 
VÆ
Ë
ªöãΩªt_ˇ°
<Ty≥> (VÆ)

	)

123 
	#YY_CAST
(
Ty≥
, 
VÆ
Ë((Ty≥Ë(VÆ))

	)

124 
	#YY_REINTERPRET_CAST
(
Ty≥
, 
VÆ
Ë((Ty≥Ë(VÆ))

	)

127 #i‚de‡
YY_NULLPTR


128 #i‡
deföed
 
__˝lu•lus


129 #i‡201103L <
__˝lu•lus


130 
	#YY_NULLPTR
 
nuŒ±r


	)

132 
	#YY_NULLPTR
 0

	)

135 
	#YY_NULLPTR
 ((*)0)

	)

140 #ifde‡
YYERROR_VERBOSE


141 #unde‡
YYERROR_VERBOSE


142 
	#YYERROR_VERBOSE
 1

	)

144 
	#YYERROR_VERBOSE
 0

	)

149 #i‚de‡
YY_YY_Y_TAB_H_INCLUDED


150 
	#YY_YY_Y_TAB_H_INCLUDED


	)

152 #i‚de‡
YYDEBUG


153 
	#YYDEBUG
 0

	)

155 #i‡
YYDEBUG


156 
yydebug
;

160 #i‚de‡
YYTOKENTYPE


161 
	#YYTOKENTYPE


	)

162 
	eyytokíty≥


164 
	mNUMBER
 = 258,

165 
	mBYE
 = 259,

166 
	mSUFFIX
 = 260,

167 
	mUMINUS
 = 261

171 
	#NUMBER
 258

	)

172 
	#BYE
 259

	)

173 
	#SUFFIX
 260

	)

174 
	#UMINUS
 261

	)

177 #i‡! 
deföed
 
YYSTYPE
 && ! deföed 
YYSTYPE_IS_DECLARED


178 
	uvÆty≥


181 
	s∑r£r_vÆue_ty≥
 {

182 
	mdvÆ
;

183 
	mivÆ
;

184 
	mhas_dvÆ
;

185 
	mhas_îr‹
;

186 } 
	mv
;

190 
vÆty≥
 
	tYYSTYPE
;

191 
	#YYSTYPE_IS_TRIVIAL
 1

	)

192 
	#YYSTYPE_IS_DECLARED
 1

	)

196 
YYSTYPE
 
yylvÆ
;

198 
yy∑r£
 (*
ªsu…
, *
dªsu…
, *
has_îr‹
, *
unôs_•ecifõd
);

212 #i‚de‡
__PTRDIFF_MAX__


213 
	~<limôs.h
>

214 #i‡
deföed
 
__STDC_VERSION__
 && 199901 <= __STDC_VERSION__

215 
	~<°döt.h
>

216 
	#YY_STDINT_H


	)

225 #ifde‡
__INT_LEAST8_MAX__


226 
__INT_LEAST8_TYPE__
 
	tyyty≥_öt8
;

227 #ñi‡
deföed
 
YY_STDINT_H


228 
öt_Àa°8_t
 
	tyyty≥_öt8
;

230 sig√d 
	tyyty≥_öt8
;

233 #ifde‡
__INT_LEAST16_MAX__


234 
__INT_LEAST16_TYPE__
 
	tyyty≥_öt16
;

235 #ñi‡
deföed
 
YY_STDINT_H


236 
öt_Àa°16_t
 
	tyyty≥_öt16
;

238 
	tyyty≥_öt16
;

241 #i‡
deföed
 
__UINT_LEAST8_MAX__
 && __UINT_LEAST8_MAX__ <
__INT_MAX__


242 
__UINT_LEAST8_TYPE__
 
	tyyty≥_uöt8
;

243 #ñi‡(!
deföed
 
__UINT_LEAST8_MAX__
 && deföed 
YY_STDINT_H
 \

244 && 
	gUINT_LEAST8_MAX
 <
INT_MAX
)

245 
uöt_Àa°8_t
 
	tyyty≥_uöt8
;

246 #ñi‡!
deföed
 
__UINT_LEAST8_MAX__
 && 
UCHAR_MAX
 <
INT_MAX


247 
	tyyty≥_uöt8
;

249 
	tyyty≥_uöt8
;

252 #i‡
deföed
 
__UINT_LEAST16_MAX__
 && __UINT_LEAST16_MAX__ <
__INT_MAX__


253 
__UINT_LEAST16_TYPE__
 
	tyyty≥_uöt16
;

254 #ñi‡(!
deföed
 
__UINT_LEAST16_MAX__
 && deföed 
YY_STDINT_H
 \

255 && 
	gUINT_LEAST16_MAX
 <
INT_MAX
)

256 
uöt_Àa°16_t
 
	tyyty≥_uöt16
;

257 #ñi‡!
deföed
 
__UINT_LEAST16_MAX__
 && 
USHRT_MAX
 <
INT_MAX


258 
	tyyty≥_uöt16
;

260 
	tyyty≥_uöt16
;

263 #i‚de‡
YYPTRDIFF_T


264 #i‡
deföed
 
__PTRDIFF_TYPE__
 && deföed 
__PTRDIFF_MAX__


265 
	#YYPTRDIFF_T
 
__PTRDIFF_TYPE__


	)

266 
	#YYPTRDIFF_MAXIMUM
 
__PTRDIFF_MAX__


	)

267 #ñi‡
deföed
 
PTRDIFF_MAX


268 #i‚de‡
±rdiff_t


269 
	~<°ddef.h
>

271 
	#YYPTRDIFF_T
 
±rdiff_t


	)

272 
	#YYPTRDIFF_MAXIMUM
 
PTRDIFF_MAX


	)

274 
	#YYPTRDIFF_T
 

	)

275 
	#YYPTRDIFF_MAXIMUM
 
LONG_MAX


	)

279 #i‚de‡
YYSIZE_T


280 #ifde‡
__SIZE_TYPE__


281 
	#YYSIZE_T
 
__SIZE_TYPE__


	)

282 #ñi‡
deföed
 
size_t


283 
	#YYSIZE_T
 
size_t


	)

284 #ñi‡
deföed
 
__STDC_VERSION__
 && 199901 <= __STDC_VERSION__

285 
	~<°ddef.h
>

286 
	#YYSIZE_T
 
size_t


	)

288 
	#YYSIZE_T
 

	)

292 
	#YYSIZE_MAXIMUM
 \

293 
	`YY_CAST
 (
YYPTRDIFF_T
, \

294 (
YYPTRDIFF_MAXIMUM
 < 
	`YY_CAST
 (
YYSIZE_T
, -1) \

295 ? 
YYPTRDIFF_MAXIMUM
 \

296 : 
	`YY_CAST
 (
YYSIZE_T
, -1)))

	)

298 
	#YYSIZEOF
(
X
Ë
	`YY_CAST
 (
YYPTRDIFF_T
,  (X))

	)

301 
yyty≥_öt8
 
	tyy_°©e_t
;

304 
	tyy_°©e_Á°_t
;

306 #i‚de‡
YY_


307 #i‡
deföed
 
YYENABLE_NLS
 && YYENABLE_NLS

308 #i‡
ENABLE_NLS


309 
	~<liböé.h
>

310 
	#YY_
(
Msgid
Ë
	`dgëãxt
 ("bis⁄-ru¡ime", Msgid)

	)

313 #i‚de‡
YY_


314 
	#YY_
(
Msgid
Ë
	)
Msgid

318 #i‚de‡
YY_ATTRIBUTE_PURE


319 #i‡
deföed
 
__GNUC__
 && 2 < __GNUC__ + (96 <
__GNUC_MINOR__
)

320 
	#YY_ATTRIBUTE_PURE
 
	`__©åibuã__
 ((
__puª__
))

	)

322 
	#YY_ATTRIBUTE_PURE


	)

326 #i‚de‡
YY_ATTRIBUTE_UNUSED


327 #i‡
deföed
 
__GNUC__
 && 2 < __GNUC__ + (7 <
__GNUC_MINOR__
)

328 
	#YY_ATTRIBUTE_UNUSED
 
	`__©åibuã__
 ((
__unu£d__
))

	)

330 
	#YY_ATTRIBUTE_UNUSED


	)

335 #i‡! 
deföed
 
löt
 || deföed 
__GNUC__


336 
	#YYUSE
(
E
Ë((Ë(E))

	)

338 
	#YYUSE
(
E
Ë

	)

341 #i‡
deföed
 
__GNUC__
 && ! deföed 
__ICC
 && 407 <__GNUC__ * 100 + 
__GNUC_MINOR__


343 
	#YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
 \

344 
	`_Pøgma
 ("GCC diagnosticÖush") \

345 
	`_Pøgma
 ("GCC diagnostic ignored \"-Wuninitialized\"") \

346 
	`_Pøgma
 ("GCC dügno°i¯ign‹ed \"-Wmaybe-unöôülized\"")

	)

347 
	#YY_IGNORE_MAYBE_UNINITIALIZED_END
 \

348 
	`_Pøgma
 ("GCC dügno°i¯p›")

	)

350 
	#YY_INITIAL_VALUE
(
VÆue
Ë
	)
Value

352 #i‚de‡
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


353 
	#YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


	)

354 
	#YY_IGNORE_MAYBE_UNINITIALIZED_END


	)

356 #i‚de‡
YY_INITIAL_VALUE


357 
	#YY_INITIAL_VALUE
(
VÆue
Ë

	)

360 #i‡
deföed
 
__˝lu•lus
 && deföed 
__GNUC__
 && ! deföed 
__ICC
 && 6 <= __GNUC__

361 
	#YY_IGNORE_USELESS_CAST_BEGIN
 \

362 
	`_Pøgma
 ("GCC diagnosticÖush") \

363 
	`_Pøgma
 ("GCC dügno°i¯ign‹ed \"-Wu£Àss-ˇ°\"")

	)

364 
	#YY_IGNORE_USELESS_CAST_END
 \

365 
	`_Pøgma
 ("GCC dügno°i¯p›")

	)

367 #i‚de‡
YY_IGNORE_USELESS_CAST_BEGIN


368 
	#YY_IGNORE_USELESS_CAST_BEGIN


	)

369 
	#YY_IGNORE_USELESS_CAST_END


	)

373 
	#YY_ASSERT
(
E
Ë((Ë(0 && (E)))

	)

375 #i‡! 
deföed
 
yyovîÊow
 || 
YYERROR_VERBOSE


379 #ifde‡
YYSTACK_USE_ALLOCA


380 #i‡
YYSTACK_USE_ALLOCA


381 #ifde‡
__GNUC__


382 
	#YYSTACK_ALLOC
 
__buûtö_Æloˇ


	)

383 #ñi‡
deföed
 
__BUILTIN_VA_ARG_INCR


384 
	~<Æloˇ.h
>

385 #ñi‡
deföed
 
_AIX


386 
	#YYSTACK_ALLOC
 
__Æloˇ


	)

387 #ñi‡
deföed
 
_MSC_VER


388 
	~<mÆloc.h
>

389 
	#Æloˇ
 
_Æloˇ


	)

391 
	#YYSTACK_ALLOC
 
Æloˇ


	)

392 #i‡! 
deföed
 
_ALLOCA_H
 && ! deföed 
EXIT_SUCCESS


393 
	~<°dlib.h
>

395 #i‚de‡
EXIT_SUCCESS


396 
	#EXIT_SUCCESS
 0

	)

403 #ifde‡
YYSTACK_ALLOC


405 
	#YYSTACK_FREE
(
På
Ëdÿ{ ; } 0)

	)

406 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


411 
	#YYSTACK_ALLOC_MAXIMUM
 4032

	)

414 
	#YYSTACK_ALLOC
 
YYMALLOC


	)

415 
	#YYSTACK_FREE
 
YYFREE


	)

416 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


417 
	#YYSTACK_ALLOC_MAXIMUM
 
YYSIZE_MAXIMUM


	)

419 #i‡(
deföed
 
__˝lu•lus
 && ! deföed 
EXIT_SUCCESS
 \

420 && ! ((
deföed
 
	gYYMALLOC
 || deföed 
	gmÆloc
) \

421 && (
deföed
 
	gYYFREE
 || deföed 
	g‰ì
)))

422 
	~<°dlib.h
>

423 #i‚de‡
EXIT_SUCCESS


424 
	#EXIT_SUCCESS
 0

	)

427 #i‚de‡
YYMALLOC


428 
	#YYMALLOC
 
mÆloc


	)

429 #i‡! 
deföed
 
mÆloc
 && ! deföed 
EXIT_SUCCESS


430 *
mÆloc
 (
YYSIZE_T
);

433 #i‚de‡
YYFREE


434 
	#YYFREE
 
‰ì


	)

435 #i‡! 
deföed
 
‰ì
 && ! deföed 
EXIT_SUCCESS


436 
‰ì
 (*);

443 #i‡(! 
deföed
 
yyovîÊow
 \

444 && (! 
deföed
 
	g__˝lu•lus
 \

445 || (
deföed
 
	gYYSTYPE_IS_TRIVIAL
 && YYSTYPE_IS_TRIVIAL)))

448 
	uyyÆloc


450 
yy_°©e_t
 
	myyss_Æloc
;

451 
YYSTYPE
 
	myyvs_Æloc
;

455 
	#YYSTACK_GAP_MAXIMUM
 (
	`YYSIZEOF
 (
yyÆloc
Ë- 1)

	)

459 
	#YYSTACK_BYTES
(
N
) \

460 ((
N
Ë* (
	`YYSIZEOF
 (
yy_°©e_t
Ë+ YYSIZEOF (
YYSTYPE
)) \

461 + 
YYSTACK_GAP_MAXIMUM
)

	)

463 
	#YYCOPY_NEEDED
 1

	)

470 
	#YYSTACK_RELOCATE
(
Sèck_Æloc
, 
Sèck
) \

473 
YYPTRDIFF_T
 
yy√wbyãs
; \

474 
	`YYCOPY
 (&
yy±r
->
Sèck_Æloc
, 
Sèck
, 
yysize
); \

475 
Sèck
 = &
yy±r
->
Sèck_Æloc
; \

476 
yy√wbyãs
 = 
yy°acksize
 * 
	`YYSIZEOF
 (*
Sèck
Ë+ 
YYSTACK_GAP_MAXIMUM
; \

477 
yy±r
 +
yy√wbyãs
 / 
	`YYSIZEOF
 (*yyptr); \

479 0)

	)

483 #i‡
deföed
 
YYCOPY_NEEDED
 && YYCOPY_NEEDED

486 #i‚de‡
YYCOPY


487 #i‡
deföed
 
__GNUC__
 && 1 < __GNUC__

488 
	#YYCOPY
(
D°
, 
Src
, 
Cou¡
) \

489 
	`__buûtö_mem˝y
 (
D°
, 
Src
, 
	`YY_CAST
 (
YYSIZE_T
, (
Cou¡
)Ë*  (*(Src)))

	)

491 
	#YYCOPY
(
D°
, 
Src
, 
Cou¡
) \

494 
YYPTRDIFF_T
 
yyi
; \

495 
yyi
 = 0; yyò< (
Cou¡
); yyi++) \

496 (
D°
)[
yyi
] = (
Src
)[yyi]; \

498 0)

	)

504 
	#YYFINAL
 8

	)

506 
	#YYLAST
 47

	)

509 
	#YYNTOKENS
 15

	)

511 
	#YYNNTS
 3

	)

513 
	#YYNRULES
 13

	)

515 
	#YYNSTATES
 24

	)

517 
	#YYUNDEFTOK
 2

	)

518 
	#YYMAXUTOK
 261

	)

523 
	#YYTRANSLATE
(
YYX
) \

524 (0 <(
YYX
Ë&& (YYXË<
YYMAXUTOK
 ? 
yyå™¶©e
[YYX] : 
YYUNDEFTOK
)

	)

528 c⁄° 
yyty≥_öt8
 
	gyyå™¶©e
[] =

559 #i‡
YYDEBUG


561 c⁄° 
yyty≥_uöt8
 
	gyyæöe
[] =

568 #i‡
YYDEBUG
 || 
YYERROR_VERBOSE
 || 0

571 c⁄° *c⁄° 
	gyyäame
[] =

575 "t›_Àvñ", "ex¥essi⁄", 
YY_NULLPTR


579 #ifde‡
YYPRINT


582 c⁄° 
yyty≥_öt16
 
	gyytoknum
[] =

589 
	#YYPACT_NINF
 (-8)

	)

591 
	#yy∑˘_vÆue_is_deÁu…
(
Yyn
) \

592 ((
Yyn
Ë=
YYPACT_NINF
)

	)

594 
	#YYTABLE_NINF
 (-3)

	)

596 
	#yyèbÀ_vÆue_is_îr‹
(
Yyn
) \

597 0

	)

601 c⁄° 
yyty≥_öt8
 
	gyy∑˘
[] =

611 c⁄° 
yyty≥_öt8
 
	gyydeÁ˘
[] =

619 c⁄° 
yyty≥_öt8
 
	gyypgŸo
[] =

625 c⁄° 
yyty≥_öt8
 
	gyydefgŸo
[] =

633 c⁄° 
yyty≥_öt8
 
	gyyèbÀ
[] =

642 c⁄° 
yyty≥_öt8
 
	gyycheck
[] =

653 c⁄° 
yyty≥_öt8
 
	gyy°os
[] =

661 c⁄° 
yyty≥_öt8
 
	gyyr1
[] =

668 c⁄° 
yyty≥_öt8
 
	gyyr2
[] =

675 
	#yyîrok
 (
yyîr°©us
 = 0)

	)

676 
	#yy˛órö
 (
yych¨
 = 
YYEMPTY
)

	)

677 
	#YYEMPTY
 (-2)

	)

678 
	#YYEOF
 0

	)

680 
	#YYACCEPT
 
yyac˚±œb


	)

681 
	#YYABORT
 
yyab‹éab


	)

682 
	#YYERROR
 
yyîr‹œb


	)

685 
	#YYRECOVERING
(Ë(!!
yyîr°©us
)

	)

687 
	#YYBACKUP
(
Tokí
, 
VÆue
) \

689 i‡(
yych¨
 =
YYEMPTY
) \

691 
yych¨
 = (
Tokí
); \

692 
yylvÆ
 = (
VÆue
); \

693 
	`YYPOPSTACK
 (
yyÀn
); \

694 
yy°©e
 = *
yys•
; \

695 
yybackup
; \

699 
	`yyîr‹
 (
ªsu…
, 
dªsu…
, 
has_îr‹
, 
unôs_•ecifõd
, 
	`YY_
("syntaxÉrror: cannot back up")); \

700 
YYERROR
; \

702 0)

	)

705 
	#YYTERROR
 1

	)

706 
	#YYERRCODE
 256

	)

711 #i‡
YYDEBUG


713 #i‚de‡
YYFPRINTF


714 
	~<°dio.h
>

715 
	#YYFPRINTF
 
Ârötf


	)

718 
	#YYDPRINTF
(
Args
) \

720 i‡(
yydebug
) \

721 
YYFPRINTF
 
Args
; \

722 } 0)

	)

725 #i‚de‡
YY_LOCATION_PRINT


726 
	#YY_LOCATION_PRINT
(
Fûe
, 
Loc
Ë((Ë0)

	)

730 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
) \

732 i‡(
yydebug
) \

734 
	`YYFPRINTF
 (
°dîr
, "%†", 
TôÀ
); \

735 
	`yy_symbﬁ_¥öt
 (
°dîr
, \

736 
Ty≥
, 
VÆue
, 
ªsu…
, 
dªsu…
, 
has_îr‹
, 
unôs_•ecifõd
); \

737 
	`YYFPRINTF
 (
°dîr
, "\n"); \

739 } 0)

	)

747 
	$yy_symbﬁ_vÆue_¥öt
 (
FILE
 *
yyo
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
, *
ªsu…
, *
dªsu…
, *
has_îr‹
, *
unôs_•ecifõd
)

749 
FILE
 *
yyouçut
 = 
yyo
;

750 
	`YYUSE
 (
yyouçut
);

751 
	`YYUSE
 (
ªsu…
);

752 
	`YYUSE
 (
dªsu…
);

753 
	`YYUSE
 (
has_îr‹
);

754 
	`YYUSE
 (
unôs_•ecifõd
);

755 i‡(!
yyvÆuï
)

757 #ifde‡
YYPRINT


758 i‡(
yyty≥
 < 
YYNTOKENS
)

759 
	`YYPRINT
 (
yyo
, 
yytoknum
[
yyty≥
], *
yyvÆuï
);

761 
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


762 
	`YYUSE
 (
yyty≥
);

763 
YY_IGNORE_MAYBE_UNINITIALIZED_END


764 
	}
}

772 
	$yy_symbﬁ_¥öt
 (
FILE
 *
yyo
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
, *
ªsu…
, *
dªsu…
, *
has_îr‹
, *
unôs_•ecifõd
)

774 
	`YYFPRINTF
 (
yyo
, "%s %s (",

775 
yyty≥
 < 
YYNTOKENS
 ? "tokí" : "¡îm", 
yyäame
[yytype]);

777 
	`yy_symbﬁ_vÆue_¥öt
 (
yyo
, 
yyty≥
, 
yyvÆuï
, 
ªsu…
, 
dªsu…
, 
has_îr‹
, 
unôs_•ecifõd
);

778 
	`YYFPRINTF
 (
yyo
, ")");

779 
	}
}

787 
	$yy_°ack_¥öt
 (
yy_°©e_t
 *
yybŸtom
, yy_°©e_à*
yyt›
)

789 
	`YYFPRINTF
 (
°dîr
, "StackÇow");

790 ; 
yybŸtom
 <
yyt›
; yybottom++)

792 
yybŸ
 = *
yybŸtom
;

793 
	`YYFPRINTF
 (
°dîr
, " %d", 
yybŸ
);

795 
	`YYFPRINTF
 (
°dîr
, "\n");

796 
	}
}

798 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
) \

800 i‡(
yydebug
) \

801 
	`yy_°ack_¥öt
 ((
BŸtom
), (
T›
)); \

802 } 0)

	)

810 
	$yy_ªdu˚_¥öt
 (
yy_°©e_t
 *
yys•
, 
YYSTYPE
 *
yyv•
, 
yyruÀ
, *
ªsu…
, *
dªsu…
, *
has_îr‹
, *
unôs_•ecifõd
)

812 
yy o
 = 
yyæöe
[
yyruÀ
];

813 
yyƒhs
 = 
yyr2
[
yyruÀ
];

814 
yyi
;

815 
	`YYFPRINTF
 (
°dîr
, "Reducing stack byÑule %d (line %d):\n",

816 
yyruÀ
 - 1, 
yy o
);

818 
yyi
 = 0; yyò< 
yyƒhs
; yyi++)

820 
	`YYFPRINTF
 (
°dîr
, " $%d = ", 
yyi
 + 1);

821 
	`yy_symbﬁ_¥öt
 (
°dîr
,

822 
yy°os
[+
yys•
[
yyi
 + 1 - 
yyƒhs
]],

823 &
yyv•
[(
yyi
 + 1Ë- (
yyƒhs
)]

824 , 
ªsu…
, 
dªsu…
, 
has_îr‹
, 
unôs_•ecifõd
);

825 
	`YYFPRINTF
 (
°dîr
, "\n");

827 
	}
}

829 
	#YY_REDUCE_PRINT
(
RuÀ
) \

831 i‡(
yydebug
) \

832 
	`yy_ªdu˚_¥öt
 (
yys•
, 
yyv•
, 
RuÀ
, 
ªsu…
, 
dªsu…
, 
has_îr‹
, 
unôs_•ecifõd
); \

833 } 0)

	)

837 
	gyydebug
;

839 
	#YYDPRINTF
(
Args
)

	)

840 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
)

	)

841 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
)

	)

842 
	#YY_REDUCE_PRINT
(
RuÀ
)

	)

847 #i‚de‡
YYINITDEPTH


848 
	#YYINITDEPTH
 200

	)

858 #i‚de‡
YYMAXDEPTH


859 
	#YYMAXDEPTH
 10000

	)

863 #i‡
YYERROR_VERBOSE


865 #i‚de‡
yy°æí


866 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H


867 
	#yy°æí
(
S
Ë(
	`YY_CAST
 (
YYPTRDIFF_T
, 
	`°æí
 (S)))

	)

870 
YYPTRDIFF_T


871 
	$yy°æí
 (c⁄° *
yy°r
)

873 
YYPTRDIFF_T
 
yyÀn
;

874 
yyÀn
 = 0; 
yy°r
[yylen]; yylen++)

876  
yyÀn
;

877 
	}
}

881 #i‚de‡
yy°p˝y


882 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H
 && deföed 
_GNU_SOURCE


883 
	#yy°p˝y
 
°p˝y


	)

888 
	$yy°p˝y
 (*
yyde°
, c⁄° *
yy§c
)

890 *
yyd
 = 
yyde°
;

891 c⁄° *
yys
 = 
yy§c
;

893 (*
yyd
++ = *
yys
++) != '\0')

896  
yyd
 - 1;

897 
	}
}

901 #i‚de‡
yyäamîr


909 
YYPTRDIFF_T


910 
	$yyäamîr
 (*
yyªs
, c⁄° *
yy°r
)

912 i‡(*
yy°r
 == '"')

914 
YYPTRDIFF_T
 
yyn
 = 0;

915 c⁄° *
yyp
 = 
yy°r
;

918 *++
yyp
)

922 
do_nŸ_°rù_quŸes
;

925 i‡(*++
yyp
 != '\\')

926 
do_nŸ_°rù_quŸes
;

928 
≠≥nd
;

930 
≠≥nd
:

932 i‡(
yyªs
)

933 
yyªs
[
yyn
] = *
yyp
;

934 
yyn
++;

938 i‡(
yyªs
)

939 
yyªs
[
yyn
] = '\0';

940  
yyn
;

942 
do_nŸ_°rù_quŸes
: ;

945 i‡(
yyªs
)

946  
	`yy°p˝y
 (
yyªs
, 
yy°r
) - yyres;

948  
	`yy°æí
 (
yy°r
);

949 
	}
}

961 
	$yysy¡ax_îr‹
 (
YYPTRDIFF_T
 *
yymsg_Æloc
, **
yymsg
,

962 
yy_°©e_t
 *
yys•
, 
yytokí
)

964 íum { 
YYERROR_VERBOSE_ARGS_MAXIMUM
 = 5 };

966 c⁄° *
yyf‹m©
 = 
YY_NULLPTR
;

969 c⁄° *
yy¨g
[
YYERROR_VERBOSE_ARGS_MAXIMUM
];

971 
yycou¡
 = 0;

973 
YYPTRDIFF_T
 
yysize
 = 0;

998 i‡(
yytokí
 !
YYEMPTY
)

1000 
yyn
 = 
yy∑˘
[+*
yys•
];

1001 
YYPTRDIFF_T
 
yysize0
 = 
	`yyäamîr
 (
YY_NULLPTR
, 
yyäame
[
yytokí
]);

1002 
yysize
 = 
yysize0
;

1003 
yy¨g
[
yycou¡
++] = 
yyäame
[
yytokí
];

1004 i‡(!
	`yy∑˘_vÆue_is_deÁu…
 (
yyn
))

1009 
yyxbegö
 = 
yyn
 < 0 ? -yyn : 0;

1011 
yychecklim
 = 
YYLAST
 - 
yyn
 + 1;

1012 
yyxíd
 = 
yychecklim
 < 
YYNTOKENS
 ? yychecklim : YYNTOKENS;

1013 
yyx
;

1015 
yyx
 = 
yyxbegö
; yyx < 
yyxíd
; ++yyx)

1016 i‡(
yycheck
[
yyx
 + 
yyn
] =yyx && yyx !
YYTERROR


1017 && !
	`yyèbÀ_vÆue_is_îr‹
 (
yyèbÀ
[
yyx
 + 
yyn
]))

1019 i‡(
yycou¡
 =
YYERROR_VERBOSE_ARGS_MAXIMUM
)

1021 
yycou¡
 = 1;

1022 
yysize
 = 
yysize0
;

1025 
yy¨g
[
yycou¡
++] = 
yyäame
[
yyx
];

1027 
YYPTRDIFF_T
 
yysize1


1028 
yysize
 + 
	`yyäamîr
 (
YY_NULLPTR
, 
yyäame
[
yyx
]);

1029 i‡(
yysize
 <
yysize1
 && yysize1 <
YYSTACK_ALLOC_MAXIMUM
)

1030 
yysize
 = 
yysize1
;

1038 
yycou¡
)

1040 
	#YYCASE_
(
N
, 
S
) \

1041 
N
: \

1042 
yyf‹m©
 = 
S
; \

1043 

	)

1045 
	`YYCASE_
(0, 
	`YY_
("syntaxÉrror"));

1046 
	`YYCASE_
(1, 
	`YY_
("syntaxÉrror, unexpected %s"));

1047 
	`YYCASE_
(2, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s"));

1048 
	`YYCASE_
(3, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s"));

1049 
	`YYCASE_
(4, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s"));

1050 
	`YYCASE_
(5, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s or %s"));

1051 #unde‡
YYCASE_


1057 
YYPTRDIFF_T
 
yysize1
 = 
yysize
 + (
	`yy°æí
 (
yyf‹m©
Ë- 2 * 
yycou¡
) + 1;

1058 i‡(
yysize
 <
yysize1
 && yysize1 <
YYSTACK_ALLOC_MAXIMUM
)

1059 
yysize
 = 
yysize1
;

1064 i‡(*
yymsg_Æloc
 < 
yysize
)

1066 *
yymsg_Æloc
 = 2 * 
yysize
;

1067 i‡(! (
yysize
 <*
yymsg_Æloc


1068 && *
yymsg_Æloc
 <
YYSTACK_ALLOC_MAXIMUM
))

1069 *
yymsg_Æloc
 = 
YYSTACK_ALLOC_MAXIMUM
;

1077 *
yyp
 = *
yymsg
;

1078 
yyi
 = 0;

1079 (*
yyp
 = *
yyf‹m©
) != '\0')

1080 i‡(*
yyp
 ='%' && 
yyf‹m©
[1] ='s' && 
yyi
 < 
yycou¡
)

1082 
yyp
 +
	`yyäamîr
 (yyp, 
yy¨g
[
yyi
++]);

1083 
yyf‹m©
 += 2;

1087 ++
yyp
;

1088 ++
yyf‹m©
;

1092 
	}
}

1100 
	$yyde°ru˘
 (c⁄° *
yymsg
, 
yyty≥
, 
YYSTYPE
 *
yyvÆuï
, *
ªsu…
, *
dªsu…
, *
has_îr‹
, *
unôs_•ecifõd
)

1102 
	`YYUSE
 (
yyvÆuï
);

1103 
	`YYUSE
 (
ªsu…
);

1104 
	`YYUSE
 (
dªsu…
);

1105 
	`YYUSE
 (
has_îr‹
);

1106 
	`YYUSE
 (
unôs_•ecifõd
);

1107 i‡(!
yymsg
)

1108 
yymsg
 = "Deleting";

1109 
	`YY_SYMBOL_PRINT
 (
yymsg
, 
yyty≥
, 
yyvÆuï
, 
yyloˇti⁄p
);

1111 
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


1112 
	`YYUSE
 (
yyty≥
);

1113 
YY_IGNORE_MAYBE_UNINITIALIZED_END


1114 
	}
}

1120 
	gyych¨
;

1123 
YYSTYPE
 
	gyylvÆ
;

1125 
	gyy√ºs
;

1133 
	$yy∑r£
 (*
ªsu…
, *
dªsu…
, *
has_îr‹
, *
unôs_•ecifõd
)

1135 
yy_°©e_Á°_t
 
yy°©e
;

1137 
yyîr°©us
;

1147 
yy_°©e_t
 
yysß
[
YYINITDEPTH
];

1148 
yy_°©e_t
 *
yyss
;

1149 
yy_°©e_t
 *
yys•
;

1152 
YYSTYPE
 
yyvß
[
YYINITDEPTH
];

1153 
YYSTYPE
 *
yyvs
;

1154 
YYSTYPE
 *
yyv•
;

1156 
YYPTRDIFF_T
 
yy°acksize
;

1158 
yyn
;

1159 
yyªsu…
;

1161 
yytokí
 = 0;

1164 
YYSTYPE
 
yyvÆ
;

1166 #i‡
YYERROR_VERBOSE


1168 
yymsgbuf
[128];

1169 *
yymsg
 = 
yymsgbuf
;

1170 
YYPTRDIFF_T
 
yymsg_Æloc
 =  
yymsgbuf
;

1173 
	#YYPOPSTACK
(
N
Ë(
yyv•
 -(N), 
yys•
 -(N))

	)

1177 
yyÀn
 = 0;

1179 
yys•
 = 
yyss
 = 
yysß
;

1180 
yyv•
 = 
yyvs
 = 
yyvß
;

1181 
yy°acksize
 = 
YYINITDEPTH
;

1183 
	`YYDPRINTF
 ((
°dîr
, "StartingÖarse\n"));

1185 
yy°©e
 = 0;

1186 
yyîr°©us
 = 0;

1187 
yy√ºs
 = 0;

1188 
yych¨
 = 
YYEMPTY
;

1189 
yy£t°©e
;

1195 
yy√w°©e
:

1198 
yys•
++;

1204 
yy£t°©e
:

1205 
	`YYDPRINTF
 ((
°dîr
, "E¡îög sèã %d\n", 
yy°©e
));

1206 
	`YY_ASSERT
 (0 <
yy°©e
 && yy°©ê< 
YYNSTATES
);

1207 
YY_IGNORE_USELESS_CAST_BEGIN


1208 *
yys•
 = 
	`YY_CAST
 (
yy_°©e_t
, 
yy°©e
);

1209 
YY_IGNORE_USELESS_CAST_END


1211 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1212 #i‡!
deföed
 
yyovîÊow
 && !deföed 
YYSTACK_RELOCATE


1213 
yyexhau°edœb
;

1217 
YYPTRDIFF_T
 
yysize
 = 
yys•
 - 
yyss
 + 1;

1219 #i‡
deföed
 
yyovîÊow


1224 
yy_°©e_t
 *
yyss1
 = 
yyss
;

1225 
YYSTYPE
 *
yyvs1
 = 
yyvs
;

1231 
	`yyovîÊow
 (
	`YY_
("memoryÉxhausted"),

1232 &
yyss1
, 
yysize
 * 
	`YYSIZEOF
 (*
yys•
),

1233 &
yyvs1
, 
yysize
 * 
	`YYSIZEOF
 (*
yyv•
),

1234 &
yy°acksize
);

1235 
yyss
 = 
yyss1
;

1236 
yyvs
 = 
yyvs1
;

1240 i‡(
YYMAXDEPTH
 <
yy°acksize
)

1241 
yyexhau°edœb
;

1242 
yy°acksize
 *= 2;

1243 i‡(
YYMAXDEPTH
 < 
yy°acksize
)

1244 
yy°acksize
 = 
YYMAXDEPTH
;

1247 
yy_°©e_t
 *
yyss1
 = 
yyss
;

1248 
yyÆloc
 *
yy±r
 =

1249 
	`YY_CAST
 (
yyÆloc
 *,

1250 
	`YYSTACK_ALLOC
 (
	`YY_CAST
 (
YYSIZE_T
, 
	`YYSTACK_BYTES
 (
yy°acksize
))));

1251 i‡(! 
yy±r
)

1252 
yyexhau°edœb
;

1253 
	`YYSTACK_RELOCATE
 (
yyss_Æloc
, 
yyss
);

1254 
	`YYSTACK_RELOCATE
 (
yyvs_Æloc
, 
yyvs
);

1255 #unde‡
YYSTACK_RELOCATE


1256 i‡(
yyss1
 !
yysß
)

1257 
	`YYSTACK_FREE
 (
yyss1
);

1261 
yys•
 = 
yyss
 + 
yysize
 - 1;

1262 
yyv•
 = 
yyvs
 + 
yysize
 - 1;

1264 
YY_IGNORE_USELESS_CAST_BEGIN


1265 
	`YYDPRINTF
 ((
°dîr
, "Stack size increasedÅo %ld\n",

1266 
	`YY_CAST
 (, 
yy°acksize
)));

1267 
YY_IGNORE_USELESS_CAST_END


1269 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1270 
YYABORT
;

1274 i‡(
yy°©e
 =
YYFINAL
)

1275 
YYACCEPT
;

1277 
yybackup
;

1283 
yybackup
:

1288 
yyn
 = 
yy∑˘
[
yy°©e
];

1289 i‡(
	`yy∑˘_vÆue_is_deÁu…
 (
yyn
))

1290 
yydeÁu…
;

1295 i‡(
yych¨
 =
YYEMPTY
)

1297 
	`YYDPRINTF
 ((
°dîr
, "ReadingáÅoken: "));

1298 
yych¨
 = 
	`yyÀx
 ();

1301 i‡(
yych¨
 <
YYEOF
)

1303 
yych¨
 = 
yytokí
 = 
YYEOF
;

1304 
	`YYDPRINTF
 ((
°dîr
, "NowátÉnd of input.\n"));

1308 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
);

1309 
	`YY_SYMBOL_PRINT
 ("Nexàtokí is", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1314 
yyn
 +
yytokí
;

1315 i‡(
yyn
 < 0 || 
YYLAST
 < yy¿|| 
yycheck
[yyn] !
yytokí
)

1316 
yydeÁu…
;

1317 
yyn
 = 
yyèbÀ
[yyn];

1318 i‡(
yyn
 <= 0)

1320 i‡(
	`yyèbÀ_vÆue_is_îr‹
 (
yyn
))

1321 
yyîæab
;

1322 
yyn
 = -yyn;

1323 
yyªdu˚
;

1328 i‡(
yyîr°©us
)

1329 
yyîr°©us
--;

1332 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1333 
yy°©e
 = 
yyn
;

1334 
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


1335 *++
yyv•
 = 
yylvÆ
;

1336 
YY_IGNORE_MAYBE_UNINITIALIZED_END


1339 
yych¨
 = 
YYEMPTY
;

1340 
yy√w°©e
;

1346 
yydeÁu…
:

1347 
yyn
 = 
yydeÁ˘
[
yy°©e
];

1348 i‡(
yyn
 == 0)

1349 
yyîæab
;

1350 
yyªdu˚
;

1356 
yyªdu˚
:

1358 
yyÀn
 = 
yyr2
[
yyn
];

1368 
yyvÆ
 = 
yyv•
[1-
yyÀn
];

1371 
	`YY_REDUCE_PRINT
 (
yyn
);

1372 
yyn
)

1376 *
ªsu…
 = (
yyv•
[0].
v
).
ivÆ
;

1377 *
dªsu…
 = (
yyv•
[0].
v
).
dvÆ
;

1378 *
has_îr‹
 = (
yyv•
[0].
v
).has_error;

1384 *
ªsu…
 = (
yyv•
[-1].
v
).
ivÆ
;

1385 *
dªsu…
 = (
yyv•
[-1].
v
).
dvÆ
;

1386 *
has_îr‹
 = 1;

1392 i‡(!(
yyv•
[-2].
v
).
has_dvÆ
 && !(yyvsp[0].v).has_dval)

1393 (
yyvÆ
.
v
).
ivÆ
 = (
yyv•
[-2].v).ival + (yyvsp[0].v).ival;

1395 (
yyvÆ
.
v
).
ivÆ
 = (Ë((
yyv•
[-2].v).
dvÆ
 + (yyvsp[0].v).dval);

1396 (
yyvÆ
.
v
).
dvÆ
 = (
yyv•
[-2].v).dval + (yyvsp[0].v).dval;

1397 (
yyvÆ
.
v
).
has_îr‹
 = (
yyv•
[-2].v).has_error || (yyvsp[0].v).has_error;

1403 i‡(!(
yyv•
[-2].
v
).
has_dvÆ
 && !(yyvsp[0].v).has_dval)

1404 (
yyvÆ
.
v
).
ivÆ
 = (
yyv•
[-2].v).ival - (yyvsp[0].v).ival;

1406 (
yyvÆ
.
v
).
ivÆ
 = (Ë((
yyv•
[-2].v).
dvÆ
 - (yyvsp[0].v).dval);

1407 (
yyvÆ
.
v
).
dvÆ
 = (
yyv•
[-2].v).dval - (yyvsp[0].v).dval;

1408 (
yyvÆ
.
v
).
has_îr‹
 = (
yyv•
[-2].v).has_error || (yyvsp[0].v).has_error;

1414 i‡(!(
yyv•
[-2].
v
).
has_dvÆ
 && !(yyvsp[0].v).has_dval)

1415 (
yyvÆ
.
v
).
ivÆ
 = (
yyv•
[-2].v).ival * (yyvsp[0].v).ival;

1417 (
yyvÆ
.
v
).
ivÆ
 = (Ë((
yyv•
[-2].v).
dvÆ
 * (yyvsp[0].v).dval);

1418 (
yyvÆ
.
v
).
dvÆ
 = (
yyv•
[-2].v).dval * (yyvsp[0].v).dval;

1419 (
yyvÆ
.
v
).
has_îr‹
 = (
yyv•
[-2].v).has_error || (yyvsp[0].v).has_error;

1425 i‡((
yyv•
[0].
v
).
ivÆ
 == 0)

1426 
	`yyîr‹
(0, 0, 0, 0, "divide by zero");

1428 (
yyvÆ
.
v
).
ivÆ
 = (
yyv•
[-2].v).ival / (yyvsp[0].v).ival;

1429 i‡((
yyv•
[0].
v
).
dvÆ
 < 1e-20 && (yyvsp[0].v).dval > -1e-20)

1430 
	`yyîr‹
(0, 0, 0, 0, "divide by zero");

1432 (
yyvÆ
.
v
).
dvÆ
 = (
yyv•
[-2].v).dval / (yyvsp[0].v).dval;

1433 i‡((
yyv•
[0].
v
).
has_dvÆ
 || (yyvsp[-2].v).has_dval)

1434 (
yyvÆ
.
v
).
ivÆ
 = (Ë(yyvÆ.v).
dvÆ
;

1435 (
yyvÆ
.
v
).
has_îr‹
 = (
yyv•
[-2].v).has_error || (yyvsp[0].v).has_error;

1441 (
yyvÆ
.
v
).
ivÆ
 = -(
yyv•
[0].v).ival;

1442 (
yyvÆ
.
v
).
dvÆ
 = -(
yyv•
[0].v).dval;

1443 (
yyvÆ
.
v
).
has_îr‹
 = (
yyv•
[0].v).has_error;

1448 { (
yyvÆ
.
v
Ë(
yyv•
[-1].v); }

1453 i‡(!(
yyv•
[-1].
v
).
has_dvÆ
 && !(yyvsp[0].v).has_dval)

1454 (
yyvÆ
.
v
).
ivÆ
 = (
yyv•
[-1].v).ival * (yyvsp[0].v).ival;

1456 (
yyvÆ
.
v
).
ivÆ
 = (Ë(
yyv•
[-1].v).
dvÆ
 * (yyvsp[0].v).dval;

1457 i‡((
yyv•
[-1].
v
).
has_dvÆ
 || (yyvsp[0].v).has_dval)

1458 (
yyvÆ
.
v
).
dvÆ
 = (
yyv•
[-1].v).dval * (yyvsp[0].v).dval;

1460 (
yyvÆ
.
v
).
dvÆ
 = (
yyv•
[-1].v).
ivÆ
 * (yyvsp[0].v).ival;

1461 (
yyvÆ
.
v
).
has_îr‹
 = (
yyv•
[-1].v).has_error || (yyvsp[0].v).has_error;

1462 *
unôs_•ecifõd
 = 1;

1468 i‡((
yyv•
[-2].
v
).
has_dvÆ
 || (yyvsp[0].v).has_dval)

1469 
	`yyîr‹
(0, 0, 0, 0, "modulo on floats");

1470 i‡((
yyv•
[0].
v
).
ivÆ
 == 0)

1471 
	`yyîr‹
(0, 0, 0, 0, "divide by zero");

1473 (
yyvÆ
.
v
).
ivÆ
 = (
yyv•
[-2].v).ival % (yyvsp[0].v).ival;

1474 (
yyvÆ
.
v
).
dvÆ
 = (yyvÆ.v).
ivÆ
;

1476 (
yyvÆ
.
v
).
has_îr‹
 = (
yyv•
[-2].v).has_error || (yyvsp[0].v).has_error;

1482 (
yyvÆ
.
v
).
has_îr‹
 = (
yyv•
[-2].v).has_error || (yyvsp[0].v).has_error;

1483 i‡(!(
yyv•
[-2].
v
).
has_dvÆ
 && !(yyvsp[0].v).has_dval) {

1484 
i
;

1486 i‡((
yyv•
[0].
v
).
ivÆ
 == 0) {

1487 (
yyvÆ
.
v
).
ivÆ
 = 1;

1488 } i‡((
yyv•
[0].
v
).
ivÆ
 > 0) {

1489 
tmp
 = (
yyv•
[-2].
v
).
ivÆ
;

1490 (
yyvÆ
.
v
).
ivÆ
 = 1.0;

1491 
i
 = 0; i < (
yyv•
[0].
v
).
ivÆ
; i++)

1492 (
yyvÆ
.
v
).
ivÆ
 *
tmp
;

1495 
tmp
;

1496 i‡((
yyv•
[-2].
v
).
ivÆ
 == 0 && (yyvsp[0].v).ival == 0) {

1497 
tmp
 = 1.0;

1498 (
yyvÆ
.
v
).
has_îr‹
 = 1;

1500 
x
 = (Ë(
yyv•
[-2].
v
).
ivÆ
;

1501 
y
 = (Ë(
yyv•
[0].
v
).
ivÆ
;

1502 
tmp
 = 
	`pow
(
x
, 
y
);

1504 (
yyvÆ
.
v
).
ivÆ
 = (Ë
tmp
;

1506 (
yyvÆ
.
v
).
dvÆ
 = 
	`pow
((
yyv•
[-2].v).dval, (yyvsp[0].v).dval);

1508 (
yyvÆ
.
v
).
dvÆ
 = 
	`pow
((
yyv•
[-2].v).dval, (yyvsp[0].v).dval);

1509 (
yyvÆ
.
v
).
ivÆ
 = (Ë(yyvÆ.v).
dvÆ
;

1515 { (
yyvÆ
.
v
Ë(
yyv•
[0].v); }

1533 
	`YY_SYMBOL_PRINT
 ("-> $$ =", 
yyr1
[
yyn
], &
yyvÆ
, &
yyloc
);

1535 
	`YYPOPSTACK
 (
yyÀn
);

1536 
yyÀn
 = 0;

1537 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1539 *++
yyv•
 = 
yyvÆ
;

1545 c⁄° 
yylhs
 = 
yyr1
[
yyn
] - 
YYNTOKENS
;

1546 c⁄° 
yyi
 = 
yypgŸo
[
yylhs
] + *
yys•
;

1547 
yy°©e
 = (0 <
yyi
 && yyò<
YYLAST
 && 
yycheck
[yyi] =*
yys•


1548 ? 
yyèbÀ
[
yyi
]

1549 : 
yydefgŸo
[
yylhs
]);

1552 
yy√w°©e
;

1558 
yyîæab
:

1561 
yytokí
 = 
yych¨
 =
YYEMPTY
 ? YYEMPTY : 
	`YYTRANSLATE
 (yychar);

1564 i‡(!
yyîr°©us
)

1566 ++
yy√ºs
;

1567 #i‡! 
YYERROR_VERBOSE


1568 
	`yyîr‹
 (
ªsu…
, 
dªsu…
, 
has_îr‹
, 
unôs_•ecifõd
, 
	`YY_
("syntaxÉrror"));

1570 
	#YYSYNTAX_ERROR
 
	`yysy¡ax_îr‹
 (&
yymsg_Æloc
, &
yymsg
, \

1571 
yys•
, 
yytokí
)

	)

1573 c⁄° *
yymsgp
 = 
	`YY_
("syntaxÉrror");

1574 
yysy¡ax_îr‹_°©us
;

1575 
yysy¡ax_îr‹_°©us
 = 
YYSYNTAX_ERROR
;

1576 i‡(
yysy¡ax_îr‹_°©us
 == 0)

1577 
yymsgp
 = 
yymsg
;

1578 i‡(
yysy¡ax_îr‹_°©us
 == 1)

1580 i‡(
yymsg
 !
yymsgbuf
)

1581 
	`YYSTACK_FREE
 (
yymsg
);

1582 
yymsg
 = 
	`YY_CAST
 (*, 
	`YYSTACK_ALLOC
 (YY_CAST (
YYSIZE_T
, 
yymsg_Æloc
)));

1583 i‡(!
yymsg
)

1585 
yymsg
 = 
yymsgbuf
;

1586 
yymsg_Æloc
 =  
yymsgbuf
;

1587 
yysy¡ax_îr‹_°©us
 = 2;

1591 
yysy¡ax_îr‹_°©us
 = 
YYSYNTAX_ERROR
;

1592 
yymsgp
 = 
yymsg
;

1595 
	`yyîr‹
 (
ªsu…
, 
dªsu…
, 
has_îr‹
, 
unôs_•ecifõd
, 
yymsgp
);

1596 i‡(
yysy¡ax_îr‹_°©us
 == 2)

1597 
yyexhau°edœb
;

1599 #unde‡
YYSYNTAX_ERROR


1605 i‡(
yyîr°©us
 == 3)

1610 i‡(
yych¨
 <
YYEOF
)

1613 i‡(
yych¨
 =
YYEOF
)

1614 
YYABORT
;

1618 
	`yyde°ru˘
 ("Error: discarding",

1619 
yytokí
, &
yylvÆ
, 
ªsu…
, 
dªsu…
, 
has_îr‹
, 
unôs_•ecifõd
);

1620 
yych¨
 = 
YYEMPTY
;

1626 
yyîæab1
;

1632 
yyîr‹œb
:

1636 
YYERROR
;

1640 
	`YYPOPSTACK
 (
yyÀn
);

1641 
yyÀn
 = 0;

1642 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1643 
yy°©e
 = *
yys•
;

1644 
yyîæab1
;

1650 
yyîæab1
:

1651 
yyîr°©us
 = 3;

1655 
yyn
 = 
yy∑˘
[
yy°©e
];

1656 i‡(!
	`yy∑˘_vÆue_is_deÁu…
 (
yyn
))

1658 
yyn
 +
YYTERROR
;

1659 i‡(0 <
yyn
 && yy¿<
YYLAST
 && 
yycheck
[yyn] =
YYTERROR
)

1661 
yyn
 = 
yyèbÀ
[yyn];

1662 i‡(0 < 
yyn
)

1668 i‡(
yys•
 =
yyss
)

1669 
YYABORT
;

1672 
	`yyde°ru˘
 ("Error:Öopping",

1673 
yy°os
[
yy°©e
], 
yyv•
, 
ªsu…
, 
dªsu…
, 
has_îr‹
, 
unôs_•ecifõd
);

1674 
	`YYPOPSTACK
 (1);

1675 
yy°©e
 = *
yys•
;

1676 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1679 
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


1680 *++
yyv•
 = 
yylvÆ
;

1681 
YY_IGNORE_MAYBE_UNINITIALIZED_END


1685 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yy°os
[
yyn
], 
yyv•
, 
yyl•
);

1687 
yy°©e
 = 
yyn
;

1688 
yy√w°©e
;

1694 
yyac˚±œb
:

1695 
yyªsu…
 = 0;

1696 
yyªtu∫
;

1702 
yyab‹éab
:

1703 
yyªsu…
 = 1;

1704 
yyªtu∫
;

1707 #i‡!
deföed
 
yyovîÊow
 || 
YYERROR_VERBOSE


1711 
yyexhau°edœb
:

1712 
	`yyîr‹
 (
ªsu…
, 
dªsu…
, 
has_îr‹
, 
unôs_•ecifõd
, 
	`YY_
("memoryÉxhausted"));

1713 
yyªsu…
 = 2;

1721 
yyªtu∫
:

1722 i‡(
yych¨
 !
YYEMPTY
)

1726 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
);

1727 
	`yyde°ru˘
 ("Cleanup: discardingÜookahead",

1728 
yytokí
, &
yylvÆ
, 
ªsu…
, 
dªsu…
, 
has_îr‹
, 
unôs_•ecifõd
);

1732 
	`YYPOPSTACK
 (
yyÀn
);

1733 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1734 
yys•
 !
yyss
)

1736 
	`yyde°ru˘
 ("Cleanup:Öopping",

1737 
yy°os
[+*
yys•
], 
yyv•
, 
ªsu…
, 
dªsu…
, 
has_îr‹
, 
unôs_•ecifõd
);

1738 
	`YYPOPSTACK
 (1);

1740 #i‚de‡
yyovîÊow


1741 i‡(
yyss
 !
yysß
)

1742 
	`YYSTACK_FREE
 (
yyss
);

1744 #i‡
YYERROR_VERBOSE


1745 i‡(
yymsg
 !
yymsgbuf
)

1746 
	`YYSTACK_FREE
 (
yymsg
);

1748  
yyªsu…
;

1749 
	}
}

1751 
	~<°dio.h
>

1754 
	gÀxî_ªad_off£t
 = 0;

1755 
	gÀxî_öput_buf„r
[1000];

1757 
	$Àxî_öput
(* 
buf„r
, *
byãs_ªad
, 
byãs_ªque°ed
)

1759 
byãs_À·
 = 
	`°æí
(
Àxî_öput_buf„r
Ë- 
Àxî_ªad_off£t
;

1761 i‡(
byãs_ªque°ed
 > 
byãs_À·
 )

1762 
byãs_ªque°ed
 = 
byãs_À·
;

1763 
	`mem˝y
(
buf„r
, &
Àxî_öput_buf„r
[
Àxî_ªad_off£t
], 
byãs_ªque°ed
);

1764 *
byãs_ªad
 = 
byãs_ªque°ed
;

1765 
Àxî_ªad_off£t
 +
byãs_ªque°ed
;

1767 
	}
}

1769 
	$£tup_to_∑r£_°rög
(c⁄° *
°rög
)

1771 
Àn
;

1773 
Àn
 = (
Àxî_öput_buf„r
) - 3;

1774 i‡(
Àn
 > 
	`°æí
(
°rög
))

1775 
Àn
 = 
	`°æí
(
°rög
);

1777 
	`°∫˝y
(
Àxî_öput_buf„r
, 
°rög
, 
Àn
);

1778 
Àxî_öput_buf„r
[
Àn
] = '\0';

1779 
Àxî_öput_buf„r
[
Àn
 + 1] = '\0';

1780 
Àxî_ªad_off£t
 = 0;

1781 
	}
}

1783 
	$evÆu©e_¨ôhmëic_ex¥essi⁄
(c⁄° *
buf„r
, *
ivÆ
, *
dvÆ
,

1784 
im∂õd_unôs
, 
is_time
)

1786 
rc
, 
unôs_•ecifõd
 = 0, 
has_îr‹
 = 0;

1788 
Àxî_vÆue_is_time
 = 
is_time
;

1789 
	`£tup_to_∑r£_°rög
(
buf„r
);

1790 
rc
 = 
	`yy∑r£
(
ivÆ
, 
dvÆ
, &
has_îr‹
, &
unôs_•ecifõd
);

1791 
	`yyª°¨t
(
NULL
);

1792 i‡(
rc
 || 
has_îr‹
) {

1793 *
ivÆ
 = 0;

1794 *
dvÆ
 = 0;

1795 
has_îr‹
 = 1;

1797 i‡(!
unôs_•ecifõd
) {

1798 *
ivÆ
 = (Ë((Ë*ivÆ * 
im∂õd_unôs
);

1799 *
dvÆ
 = *dvÆ * 
im∂õd_unôs
;

1801  
has_îr‹
;

1802 
	}
}

1804 
yyîr‹
(
__©åibuã__
((
unu£d
)Ë*
ªsu…
,

1805 
__©åibuã__
((
unu£d
)Ë*
dªsu…
,

1806 
__©åibuã__
((
unu£d
)Ë*
has_îr‹
,

1807 
__©åibuã__
((
unu£d
)Ë*
unôs_•ecifõd
,

1808 
__©åibuã__
((
unu£d
)Ëc⁄° *
msg
)

	@y.tab.h

37 #i‚de‡
YY_YY_Y_TAB_H_INCLUDED


38 
	#YY_YY_Y_TAB_H_INCLUDED


	)

40 #i‚de‡
YYDEBUG


41 
	#YYDEBUG
 0

	)

43 #i‡
YYDEBUG


44 
yydebug
;

48 #i‚de‡
YYTOKENTYPE


49 
	#YYTOKENTYPE


	)

50 
	eyytokíty≥


52 
	mNUMBER
 = 258,

53 
	mBYE
 = 259,

54 
	mSUFFIX
 = 260,

55 
	mUMINUS
 = 261

59 
	#NUMBER
 258

	)

60 
	#BYE
 259

	)

61 
	#SUFFIX
 260

	)

62 
	#UMINUS
 261

	)

65 #i‡! 
deföed
 
YYSTYPE
 && ! deföed 
YYSTYPE_IS_DECLARED


66 
	uvÆty≥


69 
	s∑r£r_vÆue_ty≥
 {

70 
	mdvÆ
;

71 
	mivÆ
;

72 
	mhas_dvÆ
;

73 
	mhas_îr‹
;

74 } 
	mv
;

78 
vÆty≥
 
	tYYSTYPE
;

79 
	#YYSTYPE_IS_TRIVIAL
 1

	)

80 
	#YYSTYPE_IS_DECLARED
 1

	)

84 
YYSTYPE
 
yylvÆ
;

86 
yy∑r£
 (*
ªsu…
, *
dªsu…
, *
has_îr‹
, *
unôs_•ecifõd
);

	@zbd.c

7 
	~<î∫o.h
>

8 
	~<°rög.h
>

9 
	~<°dlib.h
>

10 
	~<f˙é.h
>

11 
	~<sys/°©.h
>

12 
	~<uni°d.h
>

14 
	~"os/os.h
"

15 
	~"fûe.h
"

16 
	~"fio.h
"

17 
	~"lib/pow2.h
"

18 
	~"log.h
"

19 
	~"o¶ib/a•rötf.h
"

20 
	~"smÆloc.h
"

21 
	~"vîify.h
"

22 
	~"psh¨ed.h
"

23 
	~"zbd.h
"

25 
boﬁ
 
	$is_vÆid_off£t
(c⁄° 
fio_fûe
 *
f
, 
uöt64_t
 
off£t
)

27  (
uöt64_t
)(
off£t
 - 
f
->
fûe_off£t
Ë< f->
io_size
;

28 
	}
}

30 
ölöe
 
	$zbd_z⁄e_idx
(c⁄° 
fio_fûe
 *
f
,

31 
fio_z⁄e_öfo
 *
z⁄e
)

33  
z⁄e
 - 
f
->
zbd_öfo
->
z⁄e_öfo
;

34 
	}
}

42 
	$zbd_off£t_to_z⁄e_idx
(c⁄° 
fio_fûe
 *
f
,

43 
uöt64_t
 
off£t
)

45 
uöt32_t
 
z⁄e_idx
;

47 i‡(
f
->
zbd_öfo
->
z⁄e_size_log2
 > 0)

48 
z⁄e_idx
 = 
off£t
 >> 
f
->
zbd_öfo
->
z⁄e_size_log2
;

50 
z⁄e_idx
 = 
off£t
 / 
f
->
zbd_öfo
->
z⁄e_size
;

52  
	`mö
(
z⁄e_idx
, 
f
->
zbd_öfo
->
ƒ_z⁄es
);

53 
	}
}

59 
ölöe
 
uöt64_t
 
	$zbd_z⁄e_íd
(c⁄° 
fio_z⁄e_öfo
 *
z
)

61  (
z
+1)->
°¨t
;

62 
	}
}

68 
ölöe
 
uöt64_t
 
	$zbd_z⁄e_ˇ∑côy_íd
(c⁄° 
fio_z⁄e_öfo
 *
z
)

70  
z
->
°¨t
 + z->
ˇ∑côy
;

71 
	}
}

81 
boﬁ
 
	$zbd_z⁄e_fuŒ
(c⁄° 
fio_fûe
 *
f
, 
fio_z⁄e_öfo
 *
z
,

82 
uöt64_t
 
ªquúed
)

84 
	`as£π
((
ªquúed
 & 511) == 0);

86  
z
->
has_wp
 &&

87 
z
->
wp
 + 
ªquúed
 > 
	`zbd_z⁄e_ˇ∑côy_íd
(z);

88 
	}
}

90 
	$z⁄e_lock
(
thªad_d©a
 *
td
, c⁄° 
fio_fûe
 *
f
,

91 
fio_z⁄e_öfo
 *
z
)

93 
z⁄ed_block_devi˚_öfo
 *
zbd
 = 
f
->
zbd_öfo
;

94 
uöt32_t
 
nz
 = 
z
 - 
zbd
->
z⁄e_öfo
;

97 
	`as£π
(
f
->
mö_z⁄e
 <
nz
 &&Çz < f->
max_z⁄e
);

99 
	`as£π
(
z
->
has_wp
);

110 i‡(
	`±hªad_muãx_åylock
(&
z
->
muãx
) != 0) {

111 i‡(!
	`td_i€ngöe_Êagged
(
td
, 
FIO_SYNCIO
))

112 
	`io_u_quõs˚
(
td
);

113 
	`±hªad_muãx_lock
(&
z
->
muãx
);

115 
	}
}

117 
ölöe
 
	$z⁄e_u∆ock
(
fio_z⁄e_öfo
 *
z
)

119 
ªt
;

121 
	`as£π
(
z
->
has_wp
);

122 
ªt
 = 
	`±hªad_muãx_u∆ock
(&
z
->
muãx
);

123 
	`as£π
(!
ªt
);

124 
	}
}

126 
ölöe
 
fio_z⁄e_öfo
 *
	$zbd_gë_z⁄e
(c⁄° 
fio_fûe
 *
f
,

127 
z⁄e_idx
)

129  &
f
->
zbd_öfo
->
z⁄e_öfo
[
z⁄e_idx
];

130 
	}
}

132 
ölöe
 
fio_z⁄e_öfo
 *

133 
	$zbd_off£t_to_z⁄e
(c⁄° 
fio_fûe
 *
f
, 
uöt64_t
 
off£t
)

135  
	`zbd_gë_z⁄e
(
f
, 
	`zbd_off£t_to_z⁄e_idx
(f, 
off£t
));

136 
	}
}

143 
	$zbd_gë_z⁄ed_modñ
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

144 
zbd_z⁄ed_modñ
 *
modñ
)

146 
ªt
;

148 i‡(
f
->
fûëy≥
 =
FIO_TYPE_PIPE
) {

149 
	`log_îr
("zonemode=zbd doesÇot supportÖipes\n");

150  -
EINVAL
;

154 i‡(
f
->
fûëy≥
 =
FIO_TYPE_FILE
) {

155 *
modñ
 = 
ZBD_NONE
;

159 i‡(
td
->
io_›s
 &&Åd->io_›s->
gë_z⁄ed_modñ
)

160 
ªt
 = 
td
->
io_›s
->
	`gë_z⁄ed_modñ
—d, 
f
, 
modñ
);

162 
ªt
 = 
	`blkz⁄ed_gë_z⁄ed_modñ
(
td
, 
f
, 
modñ
);

163 i‡(
ªt
 < 0) {

164 
	`td_vîr‹
(
td
, 
î∫o
, "get zoned model failed");

165 
	`log_îr
("%s: get zoned model failed (%d).\n",

166 
f
->
fûe_«me
, 
î∫o
);

169  
ªt
;

170 
	}
}

187 
	$zbd_ªp‹t_z⁄es
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

188 
uöt64_t
 
off£t
, 
zbd_z⁄e
 *
z⁄es
,

189 
ƒ_z⁄es
)

191 
ªt
;

193 i‡(
td
->
io_›s
 &&Åd->io_›s->
ªp‹t_z⁄es
)

194 
ªt
 = 
td
->
io_›s
->
	`ªp‹t_z⁄es
—d, 
f
, 
off£t
, 
z⁄es
, 
ƒ_z⁄es
);

196 
ªt
 = 
	`blkz⁄ed_ªp‹t_z⁄es
(
td
, 
f
, 
off£t
, 
z⁄es
, 
ƒ_z⁄es
);

197 i‡(
ªt
 < 0) {

198 
	`td_vîr‹
(
td
, 
î∫o
, "report zones failed");

199 
	`log_îr
("%s:Ñï‹àz⁄e†‰om se˘‹ %"
PRIu64
" failed (%d).\n",

200 
f
->
fûe_«me
, 
off£t
 >> 9, 
î∫o
);

201 } i‡(
ªt
 == 0) {

202 
	`td_vîr‹
(
td
, 
î∫o
, "Empty zoneÑeport");

203 
	`log_îr
("%s:Ñï‹àz⁄e†‰om se˘‹ %"
PRIu64
" isÉmpty.\n",

204 
f
->
fûe_«me
, 
off£t
 >> 9);

205 
ªt
 = -
EIO
;

208  
ªt
;

209 
	}
}

221 
	$zbd_ª£t_wp
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

222 
uöt64_t
 
off£t
, uöt64_à
Àngth
)

224 
ªt
;

226 i‡(
td
->
io_›s
 &&Åd->io_›s->
ª£t_wp
)

227 
ªt
 = 
td
->
io_›s
->
	`ª£t_wp
—d, 
f
, 
off£t
, 
Àngth
);

229 
ªt
 = 
	`blkz⁄ed_ª£t_wp
(
td
, 
f
, 
off£t
, 
Àngth
);

230 i‡(
ªt
 < 0) {

231 
	`td_vîr‹
(
td
, 
î∫o
, "resetting wp failed");

232 
	`log_îr
("%s:Ñe£âög w∞f‹ %"
PRIu64
" sectorsát sector %"PRIu64" failed (%d).\n",

233 
f
->
fûe_«me
, 
Àngth
 >> 9, 
off£t
 >> 9, 
î∫o
);

236  
ªt
;

237 
	}
}

249 
	$zbd_ª£t_z⁄e
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

250 
fio_z⁄e_öfo
 *
z
)

252 
uöt64_t
 
off£t
 = 
z
->
°¨t
;

253 
uöt64_t
 
Àngth
 = (
z
+1)->
°¨t
 - 
off£t
;

254 
uöt64_t
 
d©a_ö_z⁄e
 = 
z
->
wp
 - z->
°¨t
;

255 
ªt
 = 0;

257 i‡(!
d©a_ö_z⁄e
)

260 
	`as£π
(
	`is_vÆid_off£t
(
f
, 
off£t
 + 
Àngth
 - 1));

262 
	`d¥öt
(
FD_ZBD
, "%s:Ñesetting wp of zone %u.\n",

263 
f
->
fûe_«me
, 
	`zbd_z⁄e_idx
(f, 
z
));

265 
f
->
zbd_öfo
->
modñ
) {

266 
ZBD_HOST_AWARE
:

267 
ZBD_HOST_MANAGED
:

268 
ªt
 = 
	`zbd_ª£t_wp
(
td
, 
f
, 
off£t
, 
Àngth
);

269 i‡(
ªt
 < 0)

270  
ªt
;

276 
	`±hªad_muãx_lock
(&
f
->
zbd_öfo
->
muãx
);

277 
f
->
zbd_öfo
->
£˘‹s_wôh_d©a
 -
d©a_ö_z⁄e
;

278 
f
->
zbd_öfo
->
wp_£˘‹s_wôh_d©a
 -
d©a_ö_z⁄e
;

279 
	`±hªad_muãx_u∆ock
(&
f
->
zbd_öfo
->
muãx
);

281 
z
->
wp
 = z->
°¨t
;

282 
z
->
vîify_block
 = 0;

284 
td
->
ts
.
ƒ_z⁄e_ª£ts
++;

286  
ªt
;

287 
	}
}

297 
	$zbd_˛o£_z⁄e
(
thªad_d©a
 *
td
, c⁄° 
fio_fûe
 *
f
,

298 
fio_z⁄e_öfo
 *
z
)

300 
uöt32_t
 
ozi
;

302 i‡(!
z
->
›í
)

305 
ozi
 = 0; ozò< 
f
->
zbd_öfo
->
num_›í_z⁄es
; ozi++) {

306 i‡(
	`zbd_gë_z⁄e
(
f
, f->
zbd_öfo
->
›í_z⁄es
[
ozi
]Ë=
z
)

309 i‡(
ozi
 =
f
->
zbd_öfo
->
num_›í_z⁄es
)

312 
	`d¥öt
(
FD_ZBD
, "%s: closing zone %u\n",

313 
f
->
fûe_«me
, 
	`zbd_z⁄e_idx
(f, 
z
));

315 
	`memmove
(
f
->
zbd_öfo
->
›í_z⁄es
 + 
ozi
,

316 
f
->
zbd_öfo
->
›í_z⁄es
 + 
ozi
 + 1,

317 (
ZBD_MAX_OPEN_ZONES
 - (
ozi
 + 1)) *

318 (
f
->
zbd_öfo
->
›í_z⁄es
[0]));

320 
f
->
zbd_öfo
->
num_›í_z⁄es
--;

321 
td
->
num_›í_z⁄es
--;

322 
z
->
›í
 = 0;

323 
	}
}

334 
	$zbd_ª£t_z⁄es
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

335 
fio_z⁄e_öfo
 *c⁄° 
zb
,

336 
fio_z⁄e_öfo
 *c⁄° 
ze
)

338 
fio_z⁄e_öfo
 *
z
;

339 c⁄° 
uöt64_t
 
mö_bs
 = 
td
->
o
.mö_bs[
DDIR_WRITE
];

340 
ªs
 = 0;

342 
	`as£π
(
mö_bs
);

344 
	`d¥öt
(
FD_ZBD
, "%s:Éxamining zones %u .. %u\n",

345 
f
->
fûe_«me
, 
	`zbd_z⁄e_idx
(f, 
zb
), zbd_z⁄e_idx(f, 
ze
));

347 
z
 = 
zb
; z < 
ze
; z++) {

348 i‡(!
z
->
has_wp
)

351 
	`z⁄e_lock
(
td
, 
f
, 
z
);

352 
	`±hªad_muãx_lock
(&
f
->
zbd_öfo
->
muãx
);

353 
	`zbd_˛o£_z⁄e
(
td
, 
f
, 
z
);

354 
	`±hªad_muãx_u∆ock
(&
f
->
zbd_öfo
->
muãx
);

356 i‡(
z
->
wp
 !z->
°¨t
) {

357 
	`d¥öt
(
FD_ZBD
, "%s:Ñesetting zone %u\n",

358 
f
->
fûe_«me
, 
	`zbd_z⁄e_idx
(f, 
z
));

359 i‡(
	`zbd_ª£t_z⁄e
(
td
, 
f
, 
z
) < 0)

360 
ªs
 = 1;

363 
	`z⁄e_u∆ock
(
z
);

366  
ªs
;

367 
	}
}

379 
	$zbd_gë_max_›í_z⁄es
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

380 *
max_›í_z⁄es
)

382 
ªt
;

384 i‡(
td
->
io_›s
 &&Åd->io_›s->
gë_max_›í_z⁄es
)

385 
ªt
 = 
td
->
io_›s
->
	`gë_max_›í_z⁄es
—d, 
f
, 
max_›í_z⁄es
);

387 
ªt
 = 
	`blkz⁄ed_gë_max_›í_z⁄es
(
td
, 
f
, 
max_›í_z⁄es
);

388 i‡(
ªt
 < 0) {

389 
	`td_vîr‹
(
td
, 
î∫o
, "get max open zones failed");

390 
	`log_îr
("%s: get max open zones failed (%d).\n",

391 
f
->
fûe_«me
, 
î∫o
);

394  
ªt
;

395 
	}
}

409 
boﬁ
 
	$zbd_›í_z⁄e
(
thªad_d©a
 *
td
, c⁄° 
fio_fûe
 *
f
,

410 
fio_z⁄e_öfo
 *
z
)

412 c⁄° 
uöt64_t
 
mö_bs
 = 
td
->
o
.mö_bs[
DDIR_WRITE
];

413 
z⁄ed_block_devi˚_öfo
 *
zbdi
 = 
f
->
zbd_öfo
;

414 
uöt32_t
 
z⁄e_idx
 = 
	`zbd_z⁄e_idx
(
f
, 
z
);

415 
boﬁ
 
ªs
 = 
åue
;

417 i‡(
z
->
c⁄d
 =
ZBD_ZONE_COND_OFFLINE
)

418  
Ál£
;

424 i‡(
td
->
o
.
vîify
 !
VERIFY_NONE
 && 
	`zbd_z⁄e_fuŒ
(
f
, 
z
, 
mö_bs
))

425  
Ál£
;

432 i‡(!
zbdi
->
max_›í_z⁄es
)

433  
åue
;

435 
	`±hªad_muãx_lock
(&
zbdi
->
muãx
);

437 i‡(
z
->
›í
) {

443 i‡(
z
->
wp
 >
	`zbd_z⁄e_ˇ∑côy_íd
(z))

444 
ªs
 = 
Ál£
;

445 
out
;

448 
ªs
 = 
Ál£
;

450 i‡(
td
->
o
.
job_max_›í_z⁄es
 > 0 &&

451 
td
->
num_›í_z⁄es
 >td->
o
.
job_max_›í_z⁄es
)

452 
out
;

453 i‡(
zbdi
->
num_›í_z⁄es
 >zbdi->
max_›í_z⁄es
)

454 
out
;

456 
	`d¥öt
(
FD_ZBD
, "%s: opening zone %u\n",

457 
f
->
fûe_«me
, 
z⁄e_idx
);

459 
zbdi
->
›í_z⁄es
[zbdi->
num_›í_z⁄es
++] = 
z⁄e_idx
;

460 
td
->
num_›í_z⁄es
++;

461 
z
->
›í
 = 1;

462 
ªs
 = 
åue
;

464 
out
:

465 
	`±hªad_muãx_u∆ock
(&
zbdi
->
muãx
);

466  
ªs
;

467 
	}
}

470 
boﬁ
 
	$zbd_usög_dúe˘_io
()

472 
thªad_d©a
 *
td
;

473 
fio_fûe
 *
f
;

474 
i
, 
j
;

476 
	`f‹_óch_td
(
td
, 
i
) {

477 i‡(
td
->
o
.
odúe˘
 || !—d->o.
td_ddú
 & 
TD_DDIR_WRITE
))

479 
	`f‹_óch_fûe
(
td
, 
f
, 
j
) {

480 i‡(
f
->
zbd_öfo
 && f->
fûëy≥
 =
FIO_TYPE_BLOCK
 &&

481 
f
->
zbd_öfo
->
modñ
 =
ZBD_HOST_MANAGED
)

482  
Ál£
;

486  
åue
;

487 
	}
}

490 
boﬁ
 
	$zbd_is_£q_job
(
fio_fûe
 *
f
)

492 
uöt32_t
 
z⁄e_idx
, 
z⁄e_idx_b
, 
z⁄e_idx_e
;

494 
	`as£π
(
f
->
zbd_öfo
);

496 i‡(
f
->
io_size
 == 0)

497  
Ál£
;

499 
z⁄e_idx_b
 = 
	`zbd_off£t_to_z⁄e_idx
(
f
, f->
fûe_off£t
);

500 
z⁄e_idx_e
 =

501 
	`zbd_off£t_to_z⁄e_idx
(
f
, f->
fûe_off£t
 + f->
io_size
 - 1);

502 
z⁄e_idx
 = 
z⁄e_idx_b
; z⁄e_idx <
z⁄e_idx_e
; zone_idx++)

503 i‡(
	`zbd_gë_z⁄e
(
f
, 
z⁄e_idx
)->
has_wp
)

504  
åue
;

506  
Ál£
;

507 
	}
}

514 
boﬁ
 
	$zbd_z⁄e_Æign_fûe_sizes
(
thªad_d©a
 *
td
,

515 
fio_fûe
 *
f
)

517 c⁄° 
fio_z⁄e_öfo
 *
z
;

518 
uöt64_t
 
√w_off£t
, 
√w_íd
;

520 i‡(!
f
->
zbd_öfo
)

521  
åue
;

522 i‡(
f
->
fûe_off£t
 >f->
ªÆ_fûe_size
)

523  
åue
;

524 i‡(!
	`zbd_is_£q_job
(
f
))

525  
åue
;

527 i‡(!
td
->
o
.
z⁄e_size
) {

528 
td
->
o
.
z⁄e_size
 = 
f
->
zbd_öfo
->zone_size;

529 i‡(!
td
->
o
.
z⁄e_size
) {

530 
	`log_îr
("%s: invalid 0 zone size\n",

531 
f
->
fûe_«me
);

532  
Ál£
;

534 } i‡(
td
->
o
.
z⁄e_size
 !
f
->
zbd_öfo
->zone_size) {

535 
	`log_îr
("%s: z⁄esizê%Œu d€†nŸ m©chÅhêdevi˚ z⁄êsizê%"
PRIu64
".\n",

536 
f
->
fûe_«me
, 
td
->
o
.
z⁄e_size
,

537 
f
->
zbd_öfo
->
z⁄e_size
);

538  
Ál£
;

541 i‡(
td
->
o
.
z⁄e_skù
 %Åd->o.
z⁄e_size
) {

542 
	`log_îr
("%s: zoneskip %llu isÇotá multiple ofÅhe device zone size %llu.\n",

543 
f
->
fûe_«me
, 
td
->
o
.
z⁄e_skù
,

544 
td
->
o
.
z⁄e_size
);

545  
Ál£
;

548 
z
 = 
	`zbd_off£t_to_z⁄e
(
f
, f->
fûe_off£t
);

549 i‡((
f
->
fûe_off£t
 !
z
->
°¨t
) &&

550 (
td
->
o
.
td_ddú
 !
TD_DDIR_READ
)) {

551 
√w_off£t
 = 
	`zbd_z⁄e_íd
(
z
);

552 i‡(
√w_off£t
 >
f
->
fûe_off£t
 + f->
io_size
) {

553 
	`log_öfo
("%s: io_size must beátÜeast one zone\n",

554 
f
->
fûe_«me
);

555  
Ál£
;

557 
	`log_öfo
("%s:Ñounded u∞off£à‰om %"
PRIu64
"Åo %"PRIu64"\n",

558 
f
->
fûe_«me
, f->
fûe_off£t
,

559 
√w_off£t
);

560 
f
->
io_size
 -(
√w_off£t
 - f->
fûe_off£t
);

561 
f
->
fûe_off£t
 = 
√w_off£t
;

564 
z
 = 
	`zbd_off£t_to_z⁄e
(
f
, f->
fûe_off£t
 + f->
io_size
);

565 
√w_íd
 = 
z
->
°¨t
;

566 i‡((
td
->
o
.
td_ddú
 !
TD_DDIR_READ
) &&

567 (
f
->
fûe_off£t
 + f->
io_size
 !
√w_íd
)) {

568 i‡(
√w_íd
 <
f
->
fûe_off£t
) {

569 
	`log_öfo
("%s: io_size must beátÜeast one zone\n",

570 
f
->
fûe_«me
);

571  
Ál£
;

573 
	`log_öfo
("%s:Ñounded dow¿io_sizê‰om %"
PRIu64
"Åo %"PRIu64"\n",

574 
f
->
fûe_«me
, f->
io_size
,

575 
√w_íd
 - 
f
->
fûe_off£t
);

576 
f
->
io_size
 = 
√w_íd
 - f->
fûe_off£t
;

579  
åue
;

580 
	}
}

585 
boﬁ
 
	$zbd_vîify_sizes
()

587 
thªad_d©a
 *
td
;

588 
fio_fûe
 *
f
;

589 
i
, 
j
;

591 
	`f‹_óch_td
(
td
, 
i
) {

592 
	`f‹_óch_fûe
(
td
, 
f
, 
j
) {

593 i‡(!
	`zbd_z⁄e_Æign_fûe_sizes
(
td
, 
f
))

594  
Ál£
;

598  
åue
;

599 
	}
}

601 
boﬁ
 
	$zbd_vîify_bs
()

603 
thªad_d©a
 *
td
;

604 
fio_fûe
 *
f
;

605 
i
, 
j
, 
k
;

607 
	`f‹_óch_td
(
td
, 
i
) {

608 i‡(
	`td_åim
(
td
) &&

609 (
td
->
o
.
mö_bs
[
DDIR_TRIM
] !td->o.
max_bs
[DDIR_TRIM] ||

610 
td
->
o
.
bs•lô_ƒ
[
DDIR_TRIM
])) {

611 
	`log_öfo
("bsrangeánd bssplitáreÇotállowed forÅrim with zonemode=zbd\n");

612  
Ál£
;

614 
	`f‹_óch_fûe
(
td
, 
f
, 
j
) {

615 
uöt64_t
 
z⁄e_size
;

617 i‡(!
f
->
zbd_öfo
)

620 
z⁄e_size
 = 
f
->
zbd_öfo
->zone_size;

621 i‡(
	`td_åim
(
td
Ë&&Åd->
o
.
bs
[
DDIR_TRIM
] !
z⁄e_size
) {

622 
	`log_öfo
("%s:Årim block sizê%Œu i†nŸÅhêz⁄êsizê%"
PRIu64
"\n",

623 
f
->
fûe_«me
, 
td
->
o
.
bs
[
DDIR_TRIM
],

624 
z⁄e_size
);

625  
Ál£
;

627 
k
 = 0; k < 
	`FIO_ARRAY_SIZE
(
td
->
o
.
bs
); k++) {

628 i‡(
td
->
o
.
vîify
 !
VERIFY_NONE
 &&

629 
z⁄e_size
 % 
td
->
o
.
bs
[
k
] != 0) {

630 
	`log_öfo
("%s: block sizê%Œu i†nŸá divis‹ o‡thêz⁄êsizê%"
PRIu64
"\n",

631 
f
->
fûe_«me
, 
td
->
o
.
bs
[
k
],

632 
z⁄e_size
);

633  
Ál£
;

638  
åue
;

639 
	}
}

641 
	$ûog2
(
uöt64_t
 
i
)

643 
log
 = -1;

645 
i
) {

646 
i
 >>= 1;

647 
log
++;

649  
log
;

650 
	}
}

656 
	$öô_z⁄e_öfo
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

658 
uöt32_t
 
ƒ_z⁄es
;

659 
fio_z⁄e_öfo
 *
p
;

660 
uöt64_t
 
z⁄e_size
 = 
td
->
o
.zone_size;

661 
uöt64_t
 
z⁄e_ˇ∑côy
 = 
td
->
o
.zone_capacity;

662 
z⁄ed_block_devi˚_öfo
 *
zbd_öfo
 = 
NULL
;

663 
i
;

665 i‡(
z⁄e_size
 == 0) {

666 
	`log_îr
("%s: SpecifyingÅhe zone size is mandatory forÑegular file/block device with --zonemode=zbd\n\n",

667 
f
->
fûe_«me
);

671 i‡(
z⁄e_size
 < 512) {

672 
	`log_îr
("%s: zone size must beátÜeast 512 bytes for --zonemode=zbd\n\n",

673 
f
->
fûe_«me
);

677 i‡(
z⁄e_ˇ∑côy
 == 0)

678 
z⁄e_ˇ∑côy
 = 
z⁄e_size
;

680 i‡(
z⁄e_ˇ∑côy
 > 
z⁄e_size
) {

681 
	`log_îr
("%s: jobÖarameter zonecapacity %llu isÜargerÅhan zone size %llu\n",

682 
f
->
fûe_«me
, 
td
->
o
.
z⁄e_ˇ∑côy
,Åd->o.
z⁄e_size
);

686 i‡(
f
->
ªÆ_fûe_size
 < 
z⁄e_size
) {

687 
	`log_îr
("%s: fûe/devi˚ sizê%"
PRIu64
" is smallerÅhan zone size %"PRIu64"\n",

688 
f
->
fûe_«me
, f->
ªÆ_fûe_size
, 
z⁄e_size
);

689  -
EINVAL
;

692 
ƒ_z⁄es
 = (
f
->
ªÆ_fûe_size
 + 
z⁄e_size
 - 1) / zone_size;

693 
zbd_öfo
 = 
	`sˇŒoc
(1, (*zbd_info) +

694 (
ƒ_z⁄es
 + 1Ë* (
zbd_öfo
->
z⁄e_öfo
[0]));

695 i‡(!
zbd_öfo
)

696  -
ENOMEM
;

698 
	`muãx_öô_psh¨ed
(&
zbd_öfo
->
muãx
);

699 
zbd_öfo
->
ªfcou¡
 = 1;

700 
p
 = &
zbd_öfo
->
z⁄e_öfo
[0];

701 
i
 = 0; i < 
ƒ_z⁄es
; i++, 
p
++) {

702 
	`muãx_öô_psh¨ed_wôh_ty≥
(&
p
->
muãx
,

703 
PTHREAD_MUTEX_RECURSIVE
);

704 
p
->
°¨t
 = 
i
 * 
z⁄e_size
;

705 
p
->
wp
 =Ö->
°¨t
;

706 
p
->
ty≥
 = 
ZBD_ZONE_TYPE_SWR
;

707 
p
->
c⁄d
 = 
ZBD_ZONE_COND_EMPTY
;

708 
p
->
ˇ∑côy
 = 
z⁄e_ˇ∑côy
;

709 
p
->
has_wp
 = 1;

712 
p
->
°¨t
 = 
ƒ_z⁄es
 * 
z⁄e_size
;

714 
f
->
zbd_öfo
 = zbd_info;

715 
f
->
zbd_öfo
->
z⁄e_size
 = zone_size;

716 
f
->
zbd_öfo
->
z⁄e_size_log2
 = 
	`is_powî_of_2
(
z⁄e_size
) ?

717 
	`ûog2
(
z⁄e_size
) : 0;

718 
f
->
zbd_öfo
->
ƒ_z⁄es
 =Çr_zones;

720 
	}
}

725 
	#ZBD_REPORT_MAX_ZONES
 8192U

	)

731 
	$∑r£_z⁄e_öfo
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

733 
ƒ_z⁄es
, 
ƒz
;

734 
zbd_z⁄e
 *
z⁄es
, *
z
;

735 
fio_z⁄e_öfo
 *
p
;

736 
uöt64_t
 
z⁄e_size
, 
off£t
;

737 
z⁄ed_block_devi˚_öfo
 *
zbd_öfo
 = 
NULL
;

738 
i
, 
j
, 
ªt
 = -
ENOMEM
;

740 
z⁄es
 = 
	`ˇŒoc
(
ZBD_REPORT_MAX_ZONES
, (
zbd_z⁄e
));

741 i‡(!
z⁄es
)

742 
out
;

744 
ƒz
 = 
	`zbd_ªp‹t_z⁄es
(
td
, 
f
, 0, 
z⁄es
, 
ZBD_REPORT_MAX_ZONES
);

745 i‡(
ƒz
 < 0) {

746 
ªt
 = 
ƒz
;

747 
	`log_öfo
("fio:Ñeport zones (offset 0) failed for %s (%d).\n",

748 
f
->
fûe_«me
, -
ªt
);

749 
out
;

752 
z⁄e_size
 = 
z⁄es
[0].
Àn
;

753 
ƒ_z⁄es
 = (
f
->
ªÆ_fûe_size
 + 
z⁄e_size
 - 1) / zone_size;

755 i‡(
td
->
o
.
z⁄e_size
 == 0) {

756 
td
->
o
.
z⁄e_size
 = zone_size;

757 } i‡(
td
->
o
.
z⁄e_size
 != zone_size) {

758 
	`log_îr
("fio: %†jobÖ¨amëî z⁄esizê%Œu d€†nŸ m©ch disk z⁄êsizê%"
PRIu64
".\n",

759 
f
->
fûe_«me
, 
td
->
o
.
z⁄e_size
, zone_size);

760 
ªt
 = -
EINVAL
;

761 
out
;

764 
	`d¥öt
(
FD_ZBD
, "Devi˚ %†ha†%d z⁄e†o‡sizê%"
PRIu64
" KB\n",

765 
f
->
fûe_«me
, 
ƒ_z⁄es
, 
z⁄e_size
 / 1024);

767 
zbd_öfo
 = 
	`sˇŒoc
(1, (*zbd_info) +

768 (
ƒ_z⁄es
 + 1Ë* (
zbd_öfo
->
z⁄e_öfo
[0]));

769 i‡(!
zbd_öfo
)

770 
out
;

771 
	`muãx_öô_psh¨ed
(&
zbd_öfo
->
muãx
);

772 
zbd_öfo
->
ªfcou¡
 = 1;

773 
p
 = &
zbd_öfo
->
z⁄e_öfo
[0];

774 
off£t
 = 0, 
j
 = 0; j < 
ƒ_z⁄es
;) {

775 
z
 = &
z⁄es
[0];

776 
i
 = 0; i < 
ƒz
; i++, 
j
++, 
z
++, 
p
++) {

777 
	`muãx_öô_psh¨ed_wôh_ty≥
(&
p
->
muãx
,

778 
PTHREAD_MUTEX_RECURSIVE
);

779 
p
->
°¨t
 = 
z
->start;

780 
p
->
ˇ∑côy
 = 
z
->capacity;

782 
z
->
c⁄d
) {

783 
ZBD_ZONE_COND_NOT_WP
:

784 
ZBD_ZONE_COND_FULL
:

785 
p
->
wp
 =Ö->
°¨t
 +Ö->
ˇ∑côy
;

788 
	`as£π
(
z
->
°¨t
 <z->
wp
);

789 
	`as£π
(
z
->
wp
 <z->
°¨t
 + 
z⁄e_size
);

790 
p
->
wp
 = 
z
->wp;

794 
z
->
ty≥
) {

795 
ZBD_ZONE_TYPE_SWR
:

796 
p
->
has_wp
 = 1;

799 
p
->
has_wp
 = 0;

801 
p
->
ty≥
 = 
z
->type;

802 
p
->
c⁄d
 = 
z
->cond;

804 i‡(
j
 > 0 && 
p
->
°¨t
 !p[-1].°¨à+ 
z⁄e_size
) {

805 
	`log_öfo
("%s: invalid zone data\n",

806 
f
->
fûe_«me
);

807 
ªt
 = -
EINVAL
;

808 
out
;

811 
z
--;

812 
off£t
 = 
z
->
°¨t
 + z->
Àn
;

813 i‡(
j
 >
ƒ_z⁄es
)

816 
ƒz
 = 
	`zbd_ªp‹t_z⁄es
(
td
, 
f
, 
off£t
, 
z⁄es
,

817 
	`mö
((
uöt32_t
)(
ƒ_z⁄es
 - 
j
),

818 
ZBD_REPORT_MAX_ZONES
));

819 i‡(
ƒz
 < 0) {

820 
ªt
 = 
ƒz
;

821 
	`log_öfo
("fio:Ñï‹àz⁄e†(off£à%"
PRIu64
") failed for %s (%d).\n",

822 
off£t
, 
f
->
fûe_«me
, -
ªt
);

823 
out
;

828 
zbd_öfo
->
z⁄e_öfo
[
ƒ_z⁄es
].
°¨t
 = 
off£t
;

830 
f
->
zbd_öfo
 = zbd_info;

831 
f
->
zbd_öfo
->
z⁄e_size
 = zone_size;

832 
f
->
zbd_öfo
->
z⁄e_size_log2
 = 
	`is_powî_of_2
(
z⁄e_size
) ?

833 
	`ûog2
(
z⁄e_size
) : 0;

834 
f
->
zbd_öfo
->
ƒ_z⁄es
 =Çr_zones;

835 
zbd_öfo
 = 
NULL
;

836 
ªt
 = 0;

838 
out
:

839 
	`s‰ì
(
zbd_öfo
);

840 
	`‰ì
(
z⁄es
);

841  
ªt
;

842 
	}
}

844 
	$zbd_£t_max_›í_z⁄es
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

846 
z⁄ed_block_devi˚_öfo
 *
zbd
 = 
f
->
zbd_öfo
;

847 
max_›í_z⁄es
;

848 
ªt
;

850 i‡(
zbd
->
modñ
 !
ZBD_HOST_MANAGED
 || 
td
->
o
.
ign‹e_z⁄e_limôs
) {

852 
zbd
->
max_›í_z⁄es
 = 
td
->
o
.max_open_zones;

853 
out
;

857 
ªt
 = 
	`zbd_gë_max_›í_z⁄es
(
td
, 
f
, &
max_›í_z⁄es
);

858 i‡(
ªt
)

859  
ªt
;

861 i‡(!
max_›í_z⁄es
) {

863 
zbd
->
max_›í_z⁄es
 = 
td
->
o
.max_open_zones;

864 } i‡(!
td
->
o
.
max_›í_z⁄es
) {

866 
zbd
->
max_›í_z⁄es
 = max_open_zones;

867 } i‡(
td
->
o
.
max_›í_z⁄es
 <= max_open_zones) {

869 
zbd
->
max_›í_z⁄es
 = 
td
->
o
.max_open_zones;

872 
	`td_vîr‹
(
td
, 
EINVAL
,

874 
	`log_îr
("Specified --max_open_zones (%d) isÜargerÅhan max (%u)\n",

875 
td
->
o
.
max_›í_z⁄es
, max_open_zones);

876  -
EINVAL
;

879 
out
:

881 i‡(
zbd
->
max_›í_z⁄es
 > 
ZBD_MAX_OPEN_ZONES
) {

882 
	`td_vîr‹
(
td
, 
EINVAL
, "'max_open_zones' value isÅooÜarge");

883 
	`log_îr
("'max_open_zones' value isÜargerÅhan %u\n",

884 
ZBD_MAX_OPEN_ZONES
);

885  -
EINVAL
;

888 
	`d¥öt
(
FD_ZBD
, "%s: usög max o≥¿z⁄e†limô: %"
PRIu32
"\n",

889 
f
->
fûe_«me
, 
zbd
->
max_›í_z⁄es
);

892 
	}
}

899 
	$zbd_¸óã_z⁄e_öfo
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

901 
zbd_z⁄ed_modñ
 
zbd_modñ
;

902 
ªt
;

904 
	`as£π
(
td
->
o
.
z⁄e_mode
 =
ZONE_MODE_ZBD
);

906 
ªt
 = 
	`zbd_gë_z⁄ed_modñ
(
td
, 
f
, &
zbd_modñ
);

907 i‡(
ªt
)

908  
ªt
;

910 
zbd_modñ
) {

911 
ZBD_HOST_AWARE
:

912 
ZBD_HOST_MANAGED
:

913 
ªt
 = 
	`∑r£_z⁄e_öfo
(
td
, 
f
);

914 i‡(
ªt
)

915  
ªt
;

917 
ZBD_NONE
:

918 
ªt
 = 
	`öô_z⁄e_öfo
(
td
, 
f
);

919 i‡(
ªt
)

920  
ªt
;

923 
	`td_vîr‹
(
td
, 
EINVAL
, "Unsupported zoned model");

924 
	`log_îr
("Unsupported zoned model\n");

925  -
EINVAL
;

928 
	`as£π
(
f
->
zbd_öfo
);

929 
f
->
zbd_öfo
->
modñ
 = 
zbd_modñ
;

931 
ªt
 = 
	`zbd_£t_max_›í_z⁄es
(
td
, 
f
);

932 i‡(
ªt
) {

933 
	`zbd_‰ì_z⁄e_öfo
(
f
);

934  
ªt
;

938 
	}
}

940 
	$zbd_‰ì_z⁄e_öfo
(
fio_fûe
 *
f
)

942 
uöt32_t
 
ªfcou¡
;

944 
	`as£π
(
f
->
zbd_öfo
);

946 
	`±hªad_muãx_lock
(&
f
->
zbd_öfo
->
muãx
);

947 
ªfcou¡
 = --
f
->
zbd_öfo
->refcount;

948 
	`±hªad_muãx_u∆ock
(&
f
->
zbd_öfo
->
muãx
);

950 
	`as£π
((
öt32_t
)
ªfcou¡
 >= 0);

951 i‡(
ªfcou¡
 == 0)

952 
	`s‰ì
(
f
->
zbd_öfo
);

953 
f
->
zbd_öfo
 = 
NULL
;

954 
	}
}

964 
	$zbd_öô_z⁄e_öfo
(
thªad_d©a
 *
td
, 
fio_fûe
 *
fûe
)

966 
thªad_d©a
 *
td2
;

967 
fio_fûe
 *
f2
;

968 
i
, 
j
, 
ªt
;

970 
	`f‹_óch_td
(
td2
, 
i
) {

971 
	`f‹_óch_fûe
(
td2
, 
f2
, 
j
) {

972 i‡(
td2
 =
td
 && 
f2
 =
fûe
)

974 i‡(!
f2
->
zbd_öfo
 ||

975 
	`°rcmp
(
f2
->
fûe_«me
, 
fûe
->file_name) != 0)

977 
fûe
->
zbd_öfo
 = 
f2
->zbd_info;

978 
fûe
->
zbd_öfo
->
ªfcou¡
++;

983 
ªt
 = 
	`zbd_¸óã_z⁄e_öfo
(
td
, 
fûe
);

984 i‡(
ªt
 < 0)

985 
	`td_vîr‹
(
td
, -
ªt
, "zbd_create_zone_info() failed");

987  
ªt
;

988 
	}
}

990 
	$zbd_öô_fûes
(
thªad_d©a
 *
td
)

992 
fio_fûe
 *
f
;

993 
i
;

995 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

996 i‡(
	`zbd_öô_z⁄e_öfo
(
td
, 
f
))

1001 
	}
}

1003 
	$zbd_ªˇlc_›ti⁄s_wôh_z⁄e_gønuœrôy
(
thªad_d©a
 *
td
)

1005 
fio_fûe
 *
f
;

1006 
i
;

1008 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

1009 
z⁄ed_block_devi˚_öfo
 *
zbd
 = 
f
->
zbd_öfo
;

1010 
uöt64_t
 
z⁄e_size
;

1013 
z⁄e_size
 = 
zbd
 ? zbd->z⁄e_sizê: 
td
->
o
.zone_size;

1014 i‡(
z⁄e_size
 == 0)

1017 i‡(
td
->
o
.
size_nz
 > 0)

1018 
td
->
o
.
size
 =Åd->o.
size_nz
 * 
z⁄e_size
;

1019 i‡(
td
->
o
.
io_size_nz
 > 0)

1020 
td
->
o
.
io_size
 =Åd->o.
io_size_nz
 * 
z⁄e_size
;

1021 i‡(
td
->
o
.
°¨t_off£t_nz
 > 0)

1022 
td
->
o
.
°¨t_off£t
 =Åd->o.
°¨t_off£t_nz
 * 
z⁄e_size
;

1023 i‡(
td
->
o
.
off£t_ö¸emít_nz
 > 0)

1024 
td
->
o
.
off£t_ö¸emít
 =

1025 
td
->
o
.
off£t_ö¸emít_nz
 * 
z⁄e_size
;

1026 i‡(
td
->
o
.
z⁄e_skù_nz
 > 0)

1027 
td
->
o
.
z⁄e_skù
 =Åd->o.
z⁄e_skù_nz
 * 
z⁄e_size
;

1029 
	}
}

1031 
	$zbd_£tup_fûes
(
thªad_d©a
 *
td
)

1033 
fio_fûe
 *
f
;

1034 
i
;

1036 i‡(!
	`zbd_usög_dúe˘_io
()) {

1037 
	`log_îr
("Using direct I/O is mandatory for writingÅo ZBD drives\n\n");

1041 i‡(!
	`zbd_vîify_sizes
())

1044 i‡(!
	`zbd_vîify_bs
())

1047 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

1048 
z⁄ed_block_devi˚_öfo
 *
zbd
 = 
f
->
zbd_öfo
;

1049 
fio_z⁄e_öfo
 *
z
;

1050 
zi
;

1052 
	`as£π
(
zbd
);

1054 
f
->
mö_z⁄e
 = 
	`zbd_off£t_to_z⁄e_idx
(f, f->
fûe_off£t
);

1055 
f
->
max_z⁄e
 =

1056 
	`zbd_off£t_to_z⁄e_idx
(
f
, f->
fûe_off£t
 + f->
io_size
);

1064 i‡(
	`zbd_is_£q_job
(
f
))

1065 
	`as£π
(
f
->
mö_z⁄e
 < f->
max_z⁄e
);

1067 i‡(
td
->
o
.
max_›í_z⁄es
 > 0 &&

1068 
zbd
->
max_›í_z⁄es
 !
td
->
o
.max_open_zones) {

1069 
	`log_îr
("Different 'max_open_zones' values\n");

1078 i‡(
td
->
o
.
job_max_›í_z⁄es
 && !
zbd
->
max_›í_z⁄es
) {

1079 
	`log_îr
("'job_max_open_zones' cannot be used withoutá global open zonesÜimit\n");

1089 
td
->
o
.
max_›í_z⁄es
 = 
zbd
->max_open_zones;

1091 
zi
 = 
f
->
mö_z⁄e
; zò< f->
max_z⁄e
; zi++) {

1092 
z
 = &
zbd
->
z⁄e_öfo
[
zi
];

1093 i‡(
z
->
c⁄d
 !
ZBD_ZONE_COND_IMP_OPEN
 &&

1094 
z
->
c⁄d
 !
ZBD_ZONE_COND_EXP_OPEN
)

1096 i‡(
	`zbd_›í_z⁄e
(
td
, 
f
, 
z
))

1102 i‡(
	`zbd_ª£t_z⁄e
(
td
, 
f
, 
z
) < 0) {

1103 
	`log_îr
("FaûedÅÿªe° z⁄ê%d\n", 
zi
);

1110 
	}
}

1116 
	$_zbd_ª£t_wrôe_˙t
(c⁄° 
thªad_d©a
 *
td
,

1117 c⁄° 
fio_fûe
 *
f
)

1119 
	`as£π
(0 <
td
->
o
.
zrf
.
u
.
f
 &&Åd->o.zrf.u.f <= 1);

1121 
f
->
zbd_öfo
->
wrôe_˙t
 = 
td
->
o
.
zrf
.
u
.f ?

1122 
	`mö
(1.0 / 
td
->
o
.
zrf
.
u
.
f
, 0.0 + 
UINT_MAX
) : UINT_MAX;

1123 
	}
}

1125 
	$zbd_ª£t_wrôe_˙t
(c⁄° 
thªad_d©a
 *
td
,

1126 c⁄° 
fio_fûe
 *
f
)

1128 
	`±hªad_muãx_lock
(&
f
->
zbd_öfo
->
muãx
);

1129 
	`_zbd_ª£t_wrôe_˙t
(
td
, 
f
);

1130 
	`±hªad_muãx_u∆ock
(&
f
->
zbd_öfo
->
muãx
);

1131 
	}
}

1133 
boﬁ
 
	$zbd_dec_™d_ª£t_wrôe_˙t
(c⁄° 
thªad_d©a
 *
td
,

1134 c⁄° 
fio_fûe
 *
f
)

1136 
uöt32_t
 
wrôe_˙t
 = 0;

1138 
	`±hªad_muãx_lock
(&
f
->
zbd_öfo
->
muãx
);

1139 
	`as£π
(
f
->
zbd_öfo
->
wrôe_˙t
);

1140 i‡(
f
->
zbd_öfo
->
wrôe_˙t
)

1141 
wrôe_˙t
 = --
f
->
zbd_öfo
->write_cnt;

1142 i‡(
wrôe_˙t
 == 0)

1143 
	`_zbd_ª£t_wrôe_˙t
(
td
, 
f
);

1144 
	`±hªad_muãx_u∆ock
(&
f
->
zbd_öfo
->
muãx
);

1146  
wrôe_˙t
 == 0;

1147 
	}
}

1149 
	eswd_a˘i⁄
 {

1150 
	mCHECK_SWD
,

1151 
	mSET_SWD
,

1155 
uöt64_t
 
	$zbd_¥o˚ss_swd
(
thªad_d©a
 *
td
,

1156 c⁄° 
fio_fûe
 *
f
, 
swd_a˘i⁄
 
a
)

1158 
fio_z⁄e_öfo
 *
zb
, *
ze
, *
z
;

1159 
uöt64_t
 
swd
 = 0;

1160 
uöt64_t
 
wp_swd
 = 0;

1162 
zb
 = 
	`zbd_gë_z⁄e
(
f
, f->
mö_z⁄e
);

1163 
ze
 = 
	`zbd_gë_z⁄e
(
f
, f->
max_z⁄e
);

1164 
z
 = 
zb
; z < 
ze
; z++) {

1165 i‡(
z
->
has_wp
) {

1166 
	`z⁄e_lock
(
td
, 
f
, 
z
);

1167 
wp_swd
 +
z
->
wp
 - z->
°¨t
;

1169 
swd
 +
z
->
wp
 - z->
°¨t
;

1172 
	`±hªad_muãx_lock
(&
f
->
zbd_öfo
->
muãx
);

1173 
a
) {

1174 
CHECK_SWD
:

1175 
	`as£π
(
f
->
zbd_öfo
->
£˘‹s_wôh_d©a
 =
swd
);

1176 
	`as£π
(
f
->
zbd_öfo
->
wp_£˘‹s_wôh_d©a
 =
wp_swd
);

1178 
SET_SWD
:

1179 
f
->
zbd_öfo
->
£˘‹s_wôh_d©a
 = 
swd
;

1180 
f
->
zbd_öfo
->
wp_£˘‹s_wôh_d©a
 = 
wp_swd
;

1183 
	`±hªad_muãx_u∆ock
(&
f
->
zbd_öfo
->
muãx
);

1185 
z
 = 
zb
; z < 
ze
; z++)

1186 i‡(
z
->
has_wp
)

1187 
	`z⁄e_u∆ock
(
z
);

1189  
swd
;

1190 
	}
}

1196 c⁄° 
boﬁ
 
	gíabÀ_check_swd
 = 
Ál£
;

1199 
	$zbd_check_swd
(
thªad_d©a
 *
td
, c⁄° 
fio_fûe
 *
f
)

1201 i‡(!
íabÀ_check_swd
)

1204 
	`zbd_¥o˚ss_swd
(
td
, 
f
, 
CHECK_SWD
);

1205 
	}
}

1207 
	$zbd_fûe_ª£t
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

1209 
fio_z⁄e_öfo
 *
zb
, *
ze
;

1210 
uöt64_t
 
swd
;

1212 i‡(!
f
->
zbd_öfo
 || !
	`td_wrôe
(
td
))

1215 
zb
 = 
	`zbd_gë_z⁄e
(
f
, f->
mö_z⁄e
);

1216 
ze
 = 
	`zbd_gë_z⁄e
(
f
, f->
max_z⁄e
);

1217 
swd
 = 
	`zbd_¥o˚ss_swd
(
td
, 
f
, 
SET_SWD
);

1219 
	`d¥öt
(
FD_ZBD
, "%s(%s): swd = %" 
PRIu64
 "\n",

1220 
__func__
, 
f
->
fûe_«me
, 
swd
);

1227 i‡(
td
->
o
.
vîify
 !
VERIFY_NONE
 &&Åd->
run°©e
 !
TD_VERIFYING
)

1228 
	`zbd_ª£t_z⁄es
(
td
, 
f
, 
zb
, 
ze
);

1229 
	`zbd_ª£t_wrôe_˙t
(
td
, 
f
);

1230 
	}
}

1233 
uöt32_t
 
	$pick_øndom_z⁄e_idx
(c⁄° 
fio_fûe
 *
f
,

1234 c⁄° 
io_u
 *io_u)

1236  (
io_u
->
off£t
 - 
f
->
fûe_off£t
) *

1237 
f
->
zbd_öfo
->
num_›í_z⁄es
 / f->
io_size
;

1238 
	}
}

1240 
boﬁ
 
	$™y_io_ö_Êight
()

1242 
thªad_d©a
 *
td
;

1243 
i
;

1245 
	`f‹_óch_td
(
td
, 
i
) {

1246 i‡(
td
->
io_u_ö_Êight
)

1247  
åue
;

1250  
Ál£
;

1251 
	}
}

1261 
fio_z⁄e_öfo
 *
	$zbd_c⁄vît_to_›í_z⁄e
(
thªad_d©a
 *
td
,

1262 
io_u
 *io_u)

1264 c⁄° 
uöt64_t
 
mö_bs
 = 
td
->
o
.mö_bs[
io_u
->
ddú
];

1265 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

1266 
z⁄ed_block_devi˚_öfo
 *
zbdi
 = 
f
->
zbd_öfo
;

1267 
fio_z⁄e_öfo
 *
z
;

1268 
›í_z⁄e_idx
 = -1;

1269 
uöt32_t
 
z⁄e_idx
, 
√w_z⁄e_idx
;

1270 
i
;

1271 
boﬁ
 
waô_z⁄e_˛o£
;

1272 
boﬁ
 
ö_Êight
;

1273 
boﬁ
 
should_ªåy
 = 
åue
;

1275 
	`as£π
(
	`is_vÆid_off£t
(
f
, 
io_u
->
off£t
));

1277 i‡(
zbdi
->
max_›í_z⁄es
 || 
td
->
o
.
job_max_›í_z⁄es
) {

1282 
z⁄e_idx
 = 
zbdi
->
›í_z⁄es
[
	`pick_øndom_z⁄e_idx
(
f
, 
io_u
)];

1284 
z⁄e_idx
 = 
	`zbd_off£t_to_z⁄e_idx
(
f
, 
io_u
->
off£t
);

1286 i‡(
z⁄e_idx
 < 
f
->
mö_z⁄e
)

1287 
z⁄e_idx
 = 
f
->
mö_z⁄e
;

1288 i‡(
z⁄e_idx
 >
f
->
max_z⁄e
)

1289 
z⁄e_idx
 = 
f
->
max_z⁄e
 - 1;

1291 
	`d¥öt
(
FD_ZBD
,

1293 
__func__
, 
f
->
fûe_«me
, 
z⁄e_idx
, 
io_u
->
off£t
, io_u->
buÊí
);

1302 
uöt32_t
 
tmp_idx
;

1304 
z
 = 
	`zbd_gë_z⁄e
(
f
, 
z⁄e_idx
);

1305 i‡(
z
->
has_wp
)

1306 
	`z⁄e_lock
(
td
, 
f
, 
z
);

1308 
	`±hªad_muãx_lock
(&
zbdi
->
muãx
);

1310 i‡(
z
->
has_wp
) {

1311 i‡(
z
->
c⁄d
 !
ZBD_ZONE_COND_OFFLINE
 &&

1312 
zbdi
->
max_›í_z⁄es
 == 0 &&

1313 
td
->
o
.
job_max_›í_z⁄es
 == 0)

1314 
examöe_z⁄e
;

1315 i‡(
zbdi
->
num_›í_z⁄es
 == 0) {

1316 
	`d¥öt
(
FD_ZBD
, "%s(%s):Ço zonesáre open\n",

1317 
__func__
, 
f
->
fûe_«me
);

1318 
›í_Ÿhî_z⁄e
;

1327 
›í_z⁄e_idx
 = 
	`pick_øndom_z⁄e_idx
(
f
, 
io_u
);

1328 
	`as£π
(!
›í_z⁄e_idx
 ||

1329 
›í_z⁄e_idx
 < 
zbdi
->
num_›í_z⁄es
);

1330 
tmp_idx
 = 
›í_z⁄e_idx
;

1332 
i
 = 0; i < 
zbdi
->
num_›í_z⁄es
; i++) {

1333 
uöt32_t
 
tmpz
;

1335 i‡(
tmp_idx
 >
zbdi
->
num_›í_z⁄es
)

1336 
tmp_idx
 = 0;

1337 
tmpz
 = 
zbdi
->
›í_z⁄es
[
tmp_idx
];

1338 i‡(
f
->
mö_z⁄e
 <
tmpz
 &&Åmpz < f->
max_z⁄e
) {

1339 
›í_z⁄e_idx
 = 
tmp_idx
;

1340 
found_ˇndid©e_z⁄e
;

1343 
tmp_idx
++;

1346 
	`d¥öt
(
FD_ZBD
, "%s(%s):Ço candidate zone\n",

1347 
__func__
, 
f
->
fûe_«me
);

1349 
	`±hªad_muãx_u∆ock
(&
zbdi
->
muãx
);

1351 i‡(
z
->
has_wp
)

1352 
	`z⁄e_u∆ock
(
z
);

1354  
NULL
;

1356 
found_ˇndid©e_z⁄e
:

1357 
√w_z⁄e_idx
 = 
zbdi
->
›í_z⁄es
[
›í_z⁄e_idx
];

1358 i‡(
√w_z⁄e_idx
 =
z⁄e_idx
)

1360 
z⁄e_idx
 = 
√w_z⁄e_idx
;

1362 
	`±hªad_muãx_u∆ock
(&
zbdi
->
muãx
);

1364 i‡(
z
->
has_wp
)

1365 
	`z⁄e_u∆ock
(
z
);

1370 
examöe_z⁄e
:

1371 i‡(
z
->
wp
 + 
mö_bs
 <
	`zbd_z⁄e_ˇ∑côy_íd
(z)) {

1372 
	`±hªad_muãx_u∆ock
(&
zbdi
->
muãx
);

1373 
out
;

1376 
›í_Ÿhî_z⁄e
:

1378 
waô_z⁄e_˛o£
 =

1379 
zbdi
->
num_›í_z⁄es
 =
f
->
max_z⁄e
 - f->
mö_z⁄e
 ||

1380 (
zbdi
->
max_›í_z⁄es
 &&

1381 
zbdi
->
num_›í_z⁄es
 =zbdi->
max_›í_z⁄es
) ||

1382 (
td
->
o
.
job_max_›í_z⁄es
 &&

1383 
td
->
num_›í_z⁄es
 =td->
o
.
job_max_›í_z⁄es
);

1385 
	`±hªad_muãx_u∆ock
(&
zbdi
->
muãx
);

1393 i‡(
waô_z⁄e_˛o£
) {

1394 
	`d¥öt
(
FD_ZBD
,

1396 
__func__
, 
f
->
fûe_«me
);

1397 
	`io_u_quõs˚
(
td
);

1400 
ªåy
:

1402 
i
 = 
f
->
io_size
 / 
zbdi
->
z⁄e_size
; i > 0; i--) {

1403 
z⁄e_idx
++;

1404 i‡(
z
->
has_wp
)

1405 
	`z⁄e_u∆ock
(
z
);

1406 
z
++;

1407 i‡(!
	`is_vÆid_off£t
(
f
, 
z
->
°¨t
)) {

1409 
z⁄e_idx
 = 
f
->
mö_z⁄e
;

1410 
z
 = 
	`zbd_gë_z⁄e
(
f
, 
z⁄e_idx
);

1412 
	`as£π
(
	`is_vÆid_off£t
(
f
, 
z
->
°¨t
));

1413 i‡(!
z
->
has_wp
)

1415 
	`z⁄e_lock
(
td
, 
f
, 
z
);

1416 i‡(
z
->
›í
)

1418 i‡(
	`zbd_›í_z⁄e
(
td
, 
f
, 
z
))

1419 
out
;

1425 
	`±hªad_muãx_lock
(&
zbdi
->
muãx
);

1426 
i
 = 0; i < 
zbdi
->
num_›í_z⁄es
; i++) {

1427 
z⁄e_idx
 = 
zbdi
->
›í_z⁄es
[
i
];

1428 i‡(
z⁄e_idx
 < 
f
->
mö_z⁄e
 || z⁄e_idx >f->
max_z⁄e
)

1430 
	`±hªad_muãx_u∆ock
(&
zbdi
->
muãx
);

1431 
	`z⁄e_u∆ock
(
z
);

1433 
z
 = 
	`zbd_gë_z⁄e
(
f
, 
z⁄e_idx
);

1435 
	`z⁄e_lock
(
td
, 
f
, 
z
);

1436 i‡(
z
->
wp
 + 
mö_bs
 <
	`zbd_z⁄e_ˇ∑côy_íd
(z))

1437 
out
;

1438 
	`±hªad_muãx_lock
(&
zbdi
->
muãx
);

1446 
ö_Êight
 = 
	`™y_io_ö_Êight
();

1447 i‡(
ö_Êight
 || 
should_ªåy
) {

1448 
	`d¥öt
(
FD_ZBD
,

1450 
__func__
, 
f
->
fûe_«me
);

1451 
	`±hªad_muãx_u∆ock
(&
zbdi
->
muãx
);

1452 
	`z⁄e_u∆ock
(
z
);

1453 
	`io_u_quõs˚
(
td
);

1454 
	`z⁄e_lock
(
td
, 
f
, 
z
);

1455 
should_ªåy
 = 
ö_Êight
;

1456 
ªåy
;

1459 
	`±hªad_muãx_u∆ock
(&
zbdi
->
muãx
);

1461 
	`z⁄e_u∆ock
(
z
);

1463 
	`d¥öt
(
FD_ZBD
, "%s(%s): didÇot openánother zone\n",

1464 
__func__
, 
f
->
fûe_«me
);

1466  
NULL
;

1468 
out
:

1469 
	`d¥öt
(
FD_ZBD
, "%s(%s):Ñeturning zone %d\n",

1470 
__func__
, 
f
->
fûe_«me
, 
z⁄e_idx
);

1472 
io_u
->
off£t
 = 
z
->
°¨t
;

1473 
	`as£π
(
z
->
has_wp
);

1474 
	`as£π
(
z
->
c⁄d
 !
ZBD_ZONE_COND_OFFLINE
);

1476  
z
;

1477 
	}
}

1480 
fio_z⁄e_öfo
 *
	$zbd_ª∂ay_wrôe_‹dî
(
thªad_d©a
 *
td
,

1481 
io_u
 *io_u,

1482 
fio_z⁄e_öfo
 *
z
)

1484 c⁄° 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

1485 c⁄° 
uöt64_t
 
mö_bs
 = 
td
->
o
.mö_bs[
DDIR_WRITE
];

1487 i‡(!
	`zbd_›í_z⁄e
(
td
, 
f
, 
z
)) {

1488 
	`z⁄e_u∆ock
(
z
);

1489 
z
 = 
	`zbd_c⁄vît_to_›í_z⁄e
(
td
, 
io_u
);

1490 
	`as£π
(
z
);

1493 i‡(
z
->
vîify_block
 * 
mö_bs
 >z->
ˇ∑côy
) {

1494 
	`log_îr
("%s: %d * %"
PRIu64
" >= %"PRIu64"\n",

1495 
f
->
fûe_«me
, 
z
->
vîify_block
, 
mö_bs
, z->
ˇ∑côy
);

1500 
	`as£π
(
Ál£
);

1503 
io_u
->
off£t
 = 
z
->
°¨t
 + z->
vîify_block
 * 
mö_bs
;

1504 i‡(
io_u
->
off£t
 + io_u->
buÊí
 >
	`zbd_z⁄e_ˇ∑côy_íd
(
z
)) {

1505 
	`log_îr
("%s: %Œu + %Œu >%"
PRIu64
"\n",

1506 
f
->
fûe_«me
, 
io_u
->
off£t
, io_u->
buÊí
,

1507 
	`zbd_z⁄e_ˇ∑côy_íd
(
z
));

1508 
	`as£π
(
Ál£
);

1510 
z
->
vîify_block
 +
io_u
->
buÊí
 / 
mö_bs
;

1512  
z
;

1513 
	}
}

1522 
fio_z⁄e_öfo
 *

1523 
	$zbd_föd_z⁄e
(
thªad_d©a
 *
td
, 
io_u
 *io_u, 
uöt64_t
 
mö_byãs
,

1524 
fio_z⁄e_öfo
 *
zb
, fio_z⁄e_öfÿ*
zl
)

1526 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

1527 
fio_z⁄e_öfo
 *
z1
, *
z2
;

1528 c⁄° 
fio_z⁄e_öfo
 *c⁄° 
zf
 = 
	`zbd_gë_z⁄e
(
f
, f->
mö_z⁄e
);

1534 
z1
 = 
zb
 + 1, 
z2
 = zb - 1; z1 < 
zl
 || z2 >
zf
; z1++, z2--) {

1535 i‡(
z1
 < 
zl
 && z1->
c⁄d
 !
ZBD_ZONE_COND_OFFLINE
) {

1536 i‡(
z1
->
has_wp
)

1537 
	`z⁄e_lock
(
td
, 
f
, 
z1
);

1538 i‡(
z1
->
°¨t
 + 
mö_byãs
 <z1->
wp
)

1539  
z1
;

1540 i‡(
z1
->
has_wp
)

1541 
	`z⁄e_u∆ock
(
z1
);

1542 } i‡(!
	`td_øndom
(
td
)) {

1546 i‡(
	`td_øndom
(
td
Ë&& 
z2
 >
zf
 &&

1547 
z2
->
c⁄d
 !
ZBD_ZONE_COND_OFFLINE
) {

1548 i‡(
z2
->
has_wp
)

1549 
	`z⁄e_lock
(
td
, 
f
, 
z2
);

1550 i‡(
z2
->
°¨t
 + 
mö_byãs
 <z2->
wp
)

1551  
z2
;

1552 i‡(
z2
->
has_wp
)

1553 
	`z⁄e_u∆ock
(
z2
);

1557 
	`d¥öt
(
FD_ZBD
,

1558 "%s:Çÿz⁄êha†%"
PRIu64
" bytes ofÑeadable data\n",

1559 
f
->
fûe_«me
, 
mö_byãs
);

1561  
NULL
;

1562 
	}
}

1573 
	$zbd_íd_z⁄e_io
(
thªad_d©a
 *
td
, c⁄° 
io_u
 *io_u,

1574 
fio_z⁄e_öfo
 *
z
)

1576 c⁄° 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

1578 i‡(
io_u
->
ddú
 =
DDIR_WRITE
 &&

1579 
io_u
->
off£t
 + io_u->
buÊí
 >
	`zbd_z⁄e_ˇ∑côy_íd
(
z
)) {

1580 
	`±hªad_muãx_lock
(&
f
->
zbd_öfo
->
muãx
);

1581 
	`zbd_˛o£_z⁄e
(
td
, 
f
, 
z
);

1582 
	`±hªad_muãx_u∆ock
(&
f
->
zbd_öfo
->
muãx
);

1584 
	}
}

1595 
	$zbd_queue_io
(
thªad_d©a
 *
td
, 
io_u
 *io_u, 
q
,

1596 
boﬁ
 
suc˚ss
)

1598 c⁄° 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

1599 
z⁄ed_block_devi˚_öfo
 *
zbd_öfo
 = 
f
->zbd_info;

1600 
fio_z⁄e_öfo
 *
z
;

1601 
uöt64_t
 
z⁄e_íd
;

1603 
	`as£π
(
zbd_öfo
);

1605 
z
 = 
	`zbd_off£t_to_z⁄e
(
f
, 
io_u
->
off£t
);

1606 
	`as£π
(
z
->
has_wp
);

1608 i‡(!
suc˚ss
)

1609 
u∆ock
;

1611 
	`d¥öt
(
FD_ZBD
,

1613 
f
->
fûe_«me
, 
io_u
->
off£t
, io_u->
buÊí
, 
	`zbd_z⁄e_idx
(f, 
z
));

1615 
io_u
->
ddú
) {

1616 
DDIR_WRITE
:

1617 
z⁄e_íd
 = 
	`mö
((
uöt64_t
)(
io_u
->
off£t
 + io_u->
buÊí
),

1618 
	`zbd_z⁄e_ˇ∑côy_íd
(
z
));

1624 
	`±hªad_muãx_lock
(&
zbd_öfo
->
muãx
);

1625 i‡(
z
->
wp
 <
z⁄e_íd
) {

1626 
zbd_öfo
->
£˘‹s_wôh_d©a
 +
z⁄e_íd
 - 
z
->
wp
;

1627 
zbd_öfo
->
wp_£˘‹s_wôh_d©a
 +
z⁄e_íd
 - 
z
->
wp
;

1629 
	`±hªad_muãx_u∆ock
(&
zbd_öfo
->
muãx
);

1630 
z
->
wp
 = 
z⁄e_íd
;

1636 i‡(
q
 =
FIO_Q_COMPLETED
 && !
io_u
->
îr‹
)

1637 
	`zbd_íd_z⁄e_io
(
td
, 
io_u
, 
z
);

1639 
u∆ock
:

1640 i‡(!
suc˚ss
 || 
q
 !
FIO_Q_QUEUED
) {

1642 
	`z⁄e_u∆ock
(
z
);

1643 
io_u
->
zbd_put_io
 = 
NULL
;

1645 
	}
}

1651 
	$zbd_put_io
(
thªad_d©a
 *
td
, c⁄° 
io_u
 *io_u)

1653 c⁄° 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

1654 
z⁄ed_block_devi˚_öfo
 *
zbd_öfo
 = 
f
->zbd_info;

1655 
fio_z⁄e_öfo
 *
z
;

1657 
	`as£π
(
zbd_öfo
);

1659 
z
 = 
	`zbd_off£t_to_z⁄e
(
f
, 
io_u
->
off£t
);

1660 
	`as£π
(
z
->
has_wp
);

1662 
	`d¥öt
(
FD_ZBD
,

1664 
f
->
fûe_«me
, 
io_u
->
off£t
, io_u->
buÊí
, 
	`zbd_z⁄e_idx
(f, 
z
));

1666 
	`zbd_íd_z⁄e_io
(
td
, 
io_u
, 
z
);

1668 
	`z⁄e_u∆ock
(
z
);

1669 
	`zbd_check_swd
(
td
, 
f
);

1670 
	}
}

1675 #i‚de‡
EREMOTEIO


1676 
	#EREMOTEIO
 121

	)

1679 
boﬁ
 
	$zbd_u«lig√d_wrôe
(
îr‹_code
)

1681 
îr‹_code
) {

1682 
EIO
:

1683 
EREMOTEIO
:

1684  
åue
;

1686  
Ál£
;

1687 
	}
}

1701 
	$£tup_zbd_z⁄e_mode
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

1703 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

1704 
fio_ddú
 
ddú
 = 
io_u
->ddir;

1705 
fio_z⁄e_öfo
 *
z
;

1707 
	`as£π
(
td
->
o
.
z⁄e_mode
 =
ZONE_MODE_ZBD
);

1708 
	`as£π
(
td
->
o
.
z⁄e_size
);

1709 
	`as£π
(
f
->
zbd_öfo
);

1711 
z
 = 
	`zbd_off£t_to_z⁄e
(
f
, f->
œ°_pos
[
ddú
]);

1718 i‡(
z
->
ˇ∑côy
 < 
f
->
zbd_öfo
->
z⁄e_size
 &&

1719 !
	`td_øndom
(
td
Ë&& 
ddú
 =
DDIR_WRITE
 &&

1720 
f
->
œ°_pos
[
ddú
] >
	`zbd_z⁄e_ˇ∑côy_íd
(
z
)) {

1721 
	`d¥öt
(
FD_ZBD
,

1723 " (%"
PRIu64
" -> %"PRIu64") for zone %u (%"PRIu64")\n",

1724 
f
->
fûe_«me
, f->
œ°_pos
[
ddú
],

1725 
	`zbd_z⁄e_íd
(
z
), 
	`zbd_z⁄e_idx
(
f
, z), z->
ˇ∑côy
);

1726 
td
->
io_skù_byãs
 +
	`zbd_z⁄e_íd
(
z
Ë- 
f
->
œ°_pos
[
ddú
];

1727 
f
->
œ°_pos
[
ddú
] = 
	`zbd_z⁄e_íd
(
z
);

1733 i‡(
	`td_øndom
(
td
Ë|| !td->
o
.
z⁄e_skù
)

1743 i‡(
td
->
z⁄e_byãs
 >td->
o
.
z⁄e_size
 ||

1744 
f
->
œ°_pos
[
ddú
] >
	`zbd_z⁄e_íd
(
z
) ||

1745 (
ddú
 =
DDIR_READ
 &&

1746 (!
td
->
o
.
ªad_bey⁄d_wp
Ë&& 
f
->
œ°_pos
[
ddú
] >
z
->
wp
)) {

1750 
td
->
z⁄e_byãs
 = 0;

1751 
f
->
fûe_off£t
 +
td
->
o
.
z⁄e_size
 +Åd->o.
z⁄e_skù
;

1756 i‡(
f
->
fûe_off£t
 >f->
ªÆ_fûe_size
)

1757 
f
->
fûe_off£t
 = 
	`gë_°¨t_off£t
(
td
, f);

1759 
f
->
œ°_pos
[
ddú
] = f->
fûe_off£t
;

1760 
td
->
io_skù_byãs
 +td->
o
.
z⁄e_skù
;

1762 
	}
}

1773 
fio_ddú
 
	$zbd_adju°_ddú
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

1774 
fio_ddú
 
ddú
)

1782 
	`as£π
(
io_u
->
fûe
->
zbd_öfo
);

1783 i‡(
ddú
 !
DDIR_READ
 || !
	`td_rw
(
td
))

1784  
ddú
;

1786 i‡(
io_u
->
fûe
->
zbd_öfo
->
£˘‹s_wôh_d©a
 ||

1787 
td
->
o
.
ªad_bey⁄d_wp
)

1788  
DDIR_READ
;

1790  
DDIR_WRITE
;

1791 
	}
}

1802 
io_u_a˘i⁄
 
	$zbd_adju°_block
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

1804 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

1805 
z⁄ed_block_devi˚_öfo
 *
zbdi
 = 
f
->
zbd_öfo
;

1806 
fio_z⁄e_öfo
 *
zb
, *
zl
, *
‹ig_zb
;

1807 
uöt32_t
 
‹ig_Àn
 = 
io_u
->
buÊí
;

1808 
uöt64_t
 
mö_bs
 = 
td
->
o
.mö_bs[
io_u
->
ddú
];

1809 
uöt64_t
 
√w_Àn
;

1810 
öt64_t
 
ønge
;

1812 
	`as£π
(
zbdi
);

1813 
	`as£π
(
mö_bs
);

1814 
	`as£π
(
	`is_vÆid_off£t
(
f
, 
io_u
->
off£t
));

1815 
	`as£π
(
io_u
->
buÊí
);

1817 
zb
 = 
	`zbd_off£t_to_z⁄e
(
f
, 
io_u
->
off£t
);

1818 
‹ig_zb
 = 
zb
;

1820 i‡(!
zb
->
has_wp
) {

1822 i‡(
io_u
->
ddú
 !
DDIR_WRITE
)

1823  
io_u_ac˚±
;

1829 i‡(!(
zb
 + 1)->
has_wp
 ||

1830 
io_u
->
off£t
 + io_u->
buÊí
 <(
zb
 + 1)->
°¨t
)

1831  
io_u_ac˚±
;

1833 i‡(
io_u
->
off£t
 + 
mö_bs
 > (
zb
 + 1)->
°¨t
) {

1834 
	`d¥öt
(
FD_IO
,

1835 "%s: off=%Œu + mö_bs=%"
PRIu64
" >Çext zone %"PRIu64"\n",

1836 
f
->
fûe_«me
, 
io_u
->
off£t
,

1837 
mö_bs
, (
zb
 + 1)->
°¨t
);

1838 
io_u
->
off£t
 =

1839 
zb
->
°¨t
 + (zb + 1)->°¨à- 
io_u
->
off£t
;

1840 
√w_Àn
 = 
	`mö
(
io_u
->
buÊí
,

1841 (
zb
 + 1)->
°¨t
 - 
io_u
->
off£t
);

1843 
√w_Àn
 = (
zb
 + 1)->
°¨t
 - 
io_u
->
off£t
;

1846 
io_u
->
buÊí
 = 
√w_Àn
 / 
mö_bs
 * min_bs;

1848  
io_u_ac˚±
;

1855 i‡(
zb
->
c⁄d
 !
ZBD_ZONE_COND_OFFLINE
 &&

1856 
io_u
->
ddú
 =
DDIR_READ
 && 
td
->
o
.
ªad_bey⁄d_wp
)

1857  
io_u_ac˚±
;

1859 
	`zbd_check_swd
(
td
, 
f
);

1861 
	`z⁄e_lock
(
td
, 
f
, 
zb
);

1863 
io_u
->
ddú
) {

1864 
DDIR_READ
:

1865 i‡(
td
->
run°©e
 =
TD_VERIFYING
 && 
	`td_wrôe
(td)) {

1866 
zb
 = 
	`zbd_ª∂ay_wrôe_‹dî
(
td
, 
io_u
, zb);

1867 
ac˚±
;

1875 
ønge
 = 
zb
->
c⁄d
 !
ZBD_ZONE_COND_OFFLINE
 ?

1876 
zb
->
wp
 - zb->
°¨t
 : 0;

1877 i‡(
ønge
 < 
mö_bs
 ||

1878 ((!
	`td_øndom
(
td
)Ë&& (
io_u
->
off£t
 + 
mö_bs
 > 
zb
->
wp
))) {

1879 
	`z⁄e_u∆ock
(
zb
);

1880 
zl
 = 
	`zbd_gë_z⁄e
(
f
, f->
max_z⁄e
);

1881 
zb
 = 
	`zbd_föd_z⁄e
(
td
, 
io_u
, 
mö_bs
, zb, 
zl
);

1882 i‡(!
zb
) {

1883 
	`d¥öt
(
FD_ZBD
,

1885 
f
->
fûe_«me
, 
io_u
->
off£t
,

1886 
io_u
->
buÊí
);

1887 
eof
;

1893 
ønge
 = 
zb
->
wp
 - zb->
°¨t
;

1894 
	`as£π
(
ønge
 >
mö_bs
);

1896 i‡(!
	`td_øndom
(
td
))

1897 
io_u
->
off£t
 = 
zb
->
°¨t
;

1904 i‡(
ønge
 <
io_u
->
buÊí
)

1905 
io_u
->
off£t
 = 
zb
->
°¨t
;

1906 i‡(
	`td_øndom
(
td
))

1907 
io_u
->
off£t
 = 
zb
->
°¨t
 +

1908 ((
io_u
->
off£t
 - 
‹ig_zb
->
°¨t
) %

1909 (
ønge
 - 
io_u
->
buÊí
)Ë/ 
mö_bs
 * min_bs;

1915 i‡(!
zb
->
has_wp
)

1916  
io_u_ac˚±
;

1921 
√w_Àn
 = 
	`mö
(()
io_u
->
buÊí
,

1922 ()(
zb
->
wp
 - 
io_u
->
off£t
));

1923 
√w_Àn
 =Çew_À¿/ 
mö_bs
 * min_bs;

1924 i‡(
√w_Àn
 < 
io_u
->
buÊí
) {

1925 
io_u
->
buÊí
 = 
√w_Àn
;

1926 
	`d¥öt
(
FD_IO
, "ChangedÜength from %u into %llu\n",

1927 
‹ig_Àn
, 
io_u
->
buÊí
);

1930 
	`as£π
(
zb
->
°¨t
 <
io_u
->
off£t
);

1931 
	`as£π
(
io_u
->
off£t
 + io_u->
buÊí
 <
zb
->
wp
);

1933 
ac˚±
;

1935 
DDIR_WRITE
:

1936 i‡(
io_u
->
buÊí
 > 
zbdi
->
z⁄e_size
) {

1937 
	`td_vîr‹
(
td
, 
EINVAL
, "I/O buflenÉxceeds zone size");

1938 
	`d¥öt
(
FD_IO
,

1939 "%s: I/O buÊí %ŒuÉx˚ed†z⁄êsizê%"
PRIu64
"\n",

1940 
f
->
fûe_«me
, 
io_u
->
buÊí
, 
zbdi
->
z⁄e_size
);

1941 
eof
;

1944 i‡(!
	`zbd_›í_z⁄e
(
td
, 
f
, 
zb
)) {

1945 
	`z⁄e_u∆ock
(
zb
);

1946 
zb
 = 
	`zbd_c⁄vît_to_›í_z⁄e
(
td
, 
io_u
);

1947 i‡(!
zb
) {

1948 
	`d¥öt
(
FD_IO
, "%s: can't convertÅo open zone",

1949 
f
->
fûe_«me
);

1950 
eof
;

1955 i‡(
td
->
o
.
zrf
.
u
.
f
) {

1956 i‡(
zbdi
->
wp_£˘‹s_wôh_d©a
 >
f
->
io_size
 * 
td
->
o
.
zπ
.
u
.f &&

1957 
	`zbd_dec_™d_ª£t_wrôe_˙t
(
td
, 
f
))

1958 
zb
->
ª£t_z⁄e
 = 1;

1962 i‡(
zb
->
ª£t_z⁄e
 || 
	`zbd_z⁄e_fuŒ
(
f
, zb, 
mö_bs
)) {

1963 
	`as£π
(
td
->
o
.
vîify
 =
VERIFY_NONE
);

1971 
	`io_u_quõs˚
(
td
);

1972 
zb
->
ª£t_z⁄e
 = 0;

1973 i‡(
	`zbd_ª£t_z⁄e
(
td
, 
f
, 
zb
) < 0)

1974 
eof
;

1976 i‡(
zb
->
ˇ∑côy
 < 
mö_bs
) {

1977 
	`td_vîr‹
(
td
, 
EINVAL
, "ZCAP isÜess min_bs");

1978 
	`log_îr
("z⁄êˇ∑côy %"
PRIu64
" smallerÅhan minimum block size %"PRIu64"\n",

1979 
zb
->
ˇ∑côy
, 
mö_bs
);

1980 
eof
;

1985 
	`as£π
(!
	`zbd_z⁄e_fuŒ
(
f
, 
zb
, 
mö_bs
));

1986 
io_u
->
off£t
 = 
zb
->
wp
;

1987 i‡(!
	`is_vÆid_off£t
(
f
, 
io_u
->
off£t
)) {

1988 
	`td_vîr‹
(
td
, 
EINVAL
, "invalid WP value");

1989 
	`d¥öt
(
FD_ZBD
, "%s: droppedÑequest with offset %llu\n",

1990 
f
->
fûe_«me
, 
io_u
->
off£t
);

1991 
eof
;

1999 
√w_Àn
 = 
	`mö
(()
io_u
->
buÊí
,

2000 
	`zbd_z⁄e_ˇ∑côy_íd
(
zb
Ë- 
io_u
->
off£t
);

2001 
√w_Àn
 =Çew_À¿/ 
mö_bs
 * min_bs;

2002 i‡(
√w_Àn
 =
io_u
->
buÊí
)

2003 
ac˚±
;

2004 i‡(
√w_Àn
 >
mö_bs
) {

2005 
io_u
->
buÊí
 = 
√w_Àn
;

2006 
	`d¥öt
(
FD_IO
, "ChangedÜength from %u into %llu\n",

2007 
‹ig_Àn
, 
io_u
->
buÊí
);

2008 
ac˚±
;

2011 
	`td_vîr‹
(
td
, 
EIO
, "zoneÑemainderÅoo small");

2012 
	`log_îr
("z⁄êªmaödî %Œd smÆÀ∏th™ mö block sizê%"
PRIu64
"\n",

2013 (
	`zbd_z⁄e_ˇ∑côy_íd
(
zb
Ë- 
io_u
->
off£t
), 
mö_bs
);

2015 
eof
;

2017 
DDIR_TRIM
:

2019 i‡(!
	`td_øndom
(
td
Ë|| 
zb
->
wp
 > zb->
°¨t
)

2020 
ac˚±
;

2023 
	`z⁄e_u∆ock
(
zb
);

2024 
zl
 = 
	`zbd_gë_z⁄e
(
f
, f->
max_z⁄e
);

2025 
zb
 = 
	`zbd_föd_z⁄e
(
td
, 
io_u
, 1, zb, 
zl
);

2026 i‡(
zb
) {

2027 
io_u
->
off£t
 = 
zb
->
°¨t
;

2028 
	`d¥öt
(
FD_ZBD
, "%s: foundÇew zone(%lld) forÅrim\n",

2029 
f
->
fûe_«me
, 
io_u
->
off£t
);

2030 
ac˚±
;

2033 
eof
;

2035 
DDIR_SYNC
:

2037 
DDIR_DATASYNC
:

2038 
DDIR_SYNC_FILE_RANGE
:

2039 
DDIR_WAIT
:

2040 
DDIR_LAST
:

2041 
DDIR_INVAL
:

2042 
ac˚±
;

2045 
	`as£π
(
Ál£
);

2047 
ac˚±
:

2048 
	`as£π
(
zb
->
has_wp
);

2049 
	`as£π
(
zb
->
c⁄d
 !
ZBD_ZONE_COND_OFFLINE
);

2050 
	`as£π
(!
io_u
->
zbd_queue_io
);

2051 
	`as£π
(!
io_u
->
zbd_put_io
);

2053 
io_u
->
zbd_queue_io
 = zbd_queue_io;

2054 
io_u
->
zbd_put_io
 = zbd_put_io;

2063  
io_u_ac˚±
;

2065 
eof
:

2066 i‡(
zb
 && zb->
has_wp
)

2067 
	`z⁄e_u∆ock
(
zb
);

2069  
io_u_eof
;

2070 
	}
}

2073 *
	$zbd_wrôe_°©us
(c⁄° 
thªad_°©
 *
ts
)

2075 *
ªs
;

2077 i‡(
	`a•rötf
(&
ªs
, "; %"
PRIu64
" z⁄êª£ts", 
ts
->
ƒ_z⁄e_ª£ts
) < 0)

2078  
NULL
;

2079  
ªs
;

2080 
	}
}

2092 
	$zbd_do_io_u_åim
(c⁄° 
thªad_d©a
 *
td
, 
io_u
 *io_u)

2094 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

2095 
fio_z⁄e_öfo
 *
z
;

2096 
ªt
;

2098 
z
 = 
	`zbd_off£t_to_z⁄e
(
f
, 
io_u
->
off£t
);

2099 i‡(!
z
->
has_wp
)

2102 i‡(
io_u
->
off£t
 !
z
->
°¨t
) {

2103 
	`log_îr
("Trim offsetÇotát zone start (%lld)\n",

2104 
io_u
->
off£t
);

2105  -
EINVAL
;

2108 
ªt
 = 
	`zbd_ª£t_z⁄e
((
thªad_d©a
 *)
td
, 
f
, 
z
);

2109 i‡(
ªt
 < 0)

2110  
ªt
;

2112  
io_u_com∂ëed
;

2113 
	}
}

	@zbd.h

7 #i‚de‡
FIO_ZBD_H


8 
	#FIO_ZBD_H


	)

10 
	~"io_u.h
"

11 
	~"i€ngöes.h
"

12 
	~"o¶ib/blkz⁄ed.h
"

13 
	~"zbd_ty≥s.h
"

15 
	gfio_fûe
;

17 
	eio_u_a˘i⁄
 {

18 
	mio_u_ac˚±
 = 0,

19 
	mio_u_eof
 = 1,

20 
	mio_u_com∂ëed
 = 2,

37 
	sfio_z⁄e_öfo
 {

38 
±hªad_muãx_t
 
	mmuãx
;

39 
uöt64_t
 
	m°¨t
;

40 
uöt64_t
 
	mwp
;

41 
uöt64_t
 
	mˇ∑côy
;

42 
uöt32_t
 
	mvîify_block
;

43 
zbd_z⁄e_ty≥
 
	mty≥
:2;

44 
zbd_z⁄e_c⁄d
 
	mc⁄d
:4;

45 
	mhas_wp
:1;

46 
	m›í
:1;

47 
	mª£t_z⁄e
:1;

76 
	sz⁄ed_block_devi˚_öfo
 {

77 
zbd_z⁄ed_modñ
 
	mmodñ
;

78 
uöt32_t
 
	mmax_›í_z⁄es
;

79 
±hªad_muãx_t
 
	mmuãx
;

80 
uöt64_t
 
	mz⁄e_size
;

81 
uöt64_t
 
	m£˘‹s_wôh_d©a
;

82 
uöt64_t
 
	mwp_£˘‹s_wôh_d©a
;

83 
uöt32_t
 
	mz⁄e_size_log2
;

84 
uöt32_t
 
	mƒ_z⁄es
;

85 
uöt32_t
 
	mªfcou¡
;

86 
uöt32_t
 
	mnum_›í_z⁄es
;

87 
uöt32_t
 
	mwrôe_˙t
;

88 
uöt32_t
 
	m›í_z⁄es
[
ZBD_MAX_OPEN_ZONES
];

89 
fio_z⁄e_öfo
 
	mz⁄e_öfo
[0];

92 
zbd_öô_fûes
(
thªad_d©a
 *
td
);

93 
zbd_ªˇlc_›ti⁄s_wôh_z⁄e_gønuœrôy
(
thªad_d©a
 *
td
);

94 
zbd_£tup_fûes
(
thªad_d©a
 *
td
);

95 
zbd_‰ì_z⁄e_öfo
(
fio_fûe
 *
f
);

96 
zbd_fûe_ª£t
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
);

97 
boﬁ
 
zbd_u«lig√d_wrôe
(
îr‹_code
);

98 
£tup_zbd_z⁄e_mode
(
thªad_d©a
 *
td
, 
io_u
 *io_u);

99 
fio_ddú
 
zbd_adju°_ddú
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

100 
fio_ddú
 
ddú
);

101 
io_u_a˘i⁄
 
zbd_adju°_block
(
thªad_d©a
 *
td
, 
io_u
 *io_u);

102 *
zbd_wrôe_°©us
(c⁄° 
thªad_°©
 *
ts
);

103 
zbd_do_io_u_åim
(c⁄° 
thªad_d©a
 *
td
, 
io_u
 *io_u);

105 
ölöe
 
	$zbd_˛o£_fûe
(
fio_fûe
 *
f
)

107 i‡(
f
->
zbd_öfo
)

108 
	`zbd_‰ì_z⁄e_öfo
(
f
);

109 
	}
}

111 
ölöe
 
	$zbd_queue_io_u
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

112 
fio_q_°©us
 
°©us
)

114 i‡(
io_u
->
zbd_queue_io
) {

115 
io_u
->
	`zbd_queue_io
(
td
, io_u, 
°©us
, io_u->
îr‹
 == 0);

116 
io_u
->
zbd_queue_io
 = 
NULL
;

118 
	}
}

120 
ölöe
 
	$zbd_put_io_u
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

122 i‡(
io_u
->
zbd_put_io
) {

123 
io_u
->
	`zbd_put_io
(
td
, io_u);

124 
io_u
->
zbd_queue_io
 = 
NULL
;

125 
io_u
->
zbd_put_io
 = 
NULL
;

127 
	}
}

	@zbd_types.h

6 #i‚de‡
FIO_ZBD_TYPES_H


7 
	#FIO_ZBD_TYPES_H


	)

9 
	~<öây≥s.h
>

11 
	#ZBD_MAX_OPEN_ZONES
 4096

	)

16 
	ezbd_z⁄ed_modñ
 {

17 
	mZBD_NONE
 = 0x1,

18 
	mZBD_HOST_AWARE
 = 0x2,

19 
	mZBD_HOST_MANAGED
 = 0x3,

25 
	ezbd_z⁄e_ty≥
 {

26 
	mZBD_ZONE_TYPE_CNV
 = 0x1,

27 
	mZBD_ZONE_TYPE_SWR
 = 0x2,

28 
	mZBD_ZONE_TYPE_SWP
 = 0x3,

34 
	ezbd_z⁄e_c⁄d
 {

35 
	mZBD_ZONE_COND_NOT_WP
 = 0x0,

36 
	mZBD_ZONE_COND_EMPTY
 = 0x1,

37 
	mZBD_ZONE_COND_IMP_OPEN
 = 0x2,

38 
	mZBD_ZONE_COND_EXP_OPEN
 = 0x3,

39 
	mZBD_ZONE_COND_CLOSED
 = 0x4,

40 
	mZBD_ZONE_COND_READONLY
 = 0xD,

41 
	mZBD_ZONE_COND_FULL
 = 0xE,

42 
	mZBD_ZONE_COND_OFFLINE
 = 0xF,

48 
	szbd_z⁄e
 {

49 
uöt64_t
 
	m°¨t
;

50 
uöt64_t
 
	mwp
;

51 
uöt64_t
 
	mÀn
;

52 
uöt64_t
 
	mˇ∑côy
;

53 
zbd_z⁄e_ty≥
 
	mty≥
;

54 
zbd_z⁄e_c⁄d
 
	mc⁄d
;

	@zone-dist.c

1 
	~<°dlib.h
>

2 
	~"fio.h
"

3 
	~"z⁄e-di°.h
"

5 
	$__td_z⁄e_gí_ödex
(
thªad_d©a
 *
td
, 
fio_ddú
 
ddú
)

7 
i
, 
j
, 
•ªv
, 
≠ªv
;

8 
uöt64_t
 
•ªv_sz
;

10 
td
->
z⁄e_°©e_ödex
[
ddú
] = 
	`mÆloc
((
z⁄e_•lô_ödex
) * 100);

12 
•ªv_sz
 = 
•ªv
 = 
≠ªv
 = 0;

13 
i
 = 0; i < 
td
->
o
.
z⁄e_•lô_ƒ
[
ddú
]; i++) {

14 
z⁄e_•lô
 *
z•
 = &
td
->
o
.z⁄e_•lô[
ddú
][
i
];

16 
j
 = 
≠ªv
; j <á¥ev + 
z•
->
ac˚ss_≥rc
; j++) {

17 
z⁄e_•lô_ödex
 *
zsi
 = &
td
->
z⁄e_°©e_ödex
[
ddú
][
j
];

19 
zsi
->
size_≥rc
 = 
•ªv
 + 
z•
->size_perc;

20 
zsi
->
size_≥rc_¥ev
 = 
•ªv
;

22 
zsi
->
size
 = 
•ªv_sz
 + 
z•
->size;

23 
zsi
->
size_¥ev
 = 
•ªv_sz
;

26 
≠ªv
 +
z•
->
ac˚ss_≥rc
;

27 
•ªv
 +
z•
->
size_≥rc
;

28 
•ªv_sz
 +
z•
->
size
;

30 
	}
}

32 
boﬁ
 
	$has_z⁄es
(
thªad_d©a
 *
td
)

34 
i
, 
z⁄es
 = 0;

36 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++)

37 
z⁄es
 +
td
->
o
.
z⁄e_•lô_ƒ
[
i
];

39  
z⁄es
 != 0;

40 
	}
}

46 
	$td_z⁄e_gí_ödex
(
thªad_d©a
 *
td
)

48 
i
;

50 i‡(!
	`has_z⁄es
(
td
))

53 
td
->
z⁄e_°©e_ödex
 = 
	`mÆloc
(
DDIR_RWDIR_CNT
 *

54 (
z⁄e_•lô_ödex
 *));

56 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++)

57 
	`__td_z⁄e_gí_ödex
(
td
, 
i
);

58 
	}
}

60 
	$td_z⁄e_‰ì_ödex
(
thªad_d©a
 *
td
)

62 
i
;

64 i‡(!
td
->
z⁄e_°©e_ödex
)

67 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

68 
	`‰ì
(
td
->
z⁄e_°©e_ödex
[
i
]);

69 
td
->
z⁄e_°©e_ödex
[
i
] = 
NULL
;

72 
	`‰ì
(
td
->
z⁄e_°©e_ödex
);

73 
td
->
z⁄e_°©e_ödex
 = 
NULL
;

74 
	}
}

	@zone-dist.h

1 #i‚de‡
FIO_ZONE_DIST_H


2 
	#FIO_ZONE_DIST_H


	)

4 
td_z⁄e_gí_ödex
(
thªad_d©a
 *
td
);

5 
td_z⁄e_‰ì_ödex
(
thªad_d©a
 *
td
);

	@/usr/include/aio.h

22 #i‚de‡
_AIO_H


23 
	#_AIO_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<sys/ty≥s.h
>

27 
	~<bôs/ty≥s/sigevít_t.h
>

28 
	~<bôs/sigevít-c⁄°s.h
>

29 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

31 
__BEGIN_DECLS


34 
	saiocb


36 
	maio_fûdes
;

37 
	maio_lio_›code
;

38 
	maio_ªq¥io
;

39 vﬁ©ûê*
	maio_buf
;

40 
size_t
 
	maio_nbyãs
;

41 
sigevít
 
	maio_sigevít
;

44 
aiocb
 *
	m__√xt_¥io
;

45 
	m__abs_¥io
;

46 
	m__pﬁicy
;

47 
	m__îr‹_code
;

48 
__ssize_t
 
	m__ªtu∫_vÆue
;

50 #i‚de‡
__USE_FILE_OFFSET64


51 
__off_t
 
	maio_off£t
;

52 
	m__∑d
[ (
__off64_t
Ë-  (
__off_t
)];

54 
__off64_t
 
	maio_off£t
;

56 
	m__glibc_ª£rved
[32];

61 #ifde‡
__USE_LARGEFILE64


62 
	saiocb64


64 
	maio_fûdes
;

65 
	maio_lio_›code
;

66 
	maio_ªq¥io
;

67 vﬁ©ûê*
	maio_buf
;

68 
size_t
 
	maio_nbyãs
;

69 
sigevít
 
	maio_sigevít
;

72 
aiocb
 *
	m__√xt_¥io
;

73 
	m__abs_¥io
;

74 
	m__pﬁicy
;

75 
	m__îr‹_code
;

76 
__ssize_t
 
	m__ªtu∫_vÆue
;

78 
__off64_t
 
	maio_off£t
;

79 
	m__glibc_ª£rved
[32];

84 #ifde‡
__USE_GNU


87 
	saioöô


89 
	maio_thªads
;

90 
	maio_num
;

91 
	maio_locks
;

92 
	maio_u£dba
;

93 
	maio_debug
;

94 
	maio_numu£rs
;

95 
	maio_idÀ_time
;

97 
	maio_ª£rved
;

105 
	mAIO_CANCELED
,

106 
	#AIO_CANCELED
 
AIO_CANCELED


	)

107 
	mAIO_NOTCANCELED
,

108 
	#AIO_NOTCANCELED
 
AIO_NOTCANCELED


	)

109 
	mAIO_ALLDONE


110 
	#AIO_ALLDONE
 
AIO_ALLDONE


	)

117 
	mLIO_READ
,

118 
	#LIO_READ
 
LIO_READ


	)

119 
	mLIO_WRITE
,

120 
	#LIO_WRITE
 
LIO_WRITE


	)

121 
	mLIO_NOP


122 
	#LIO_NOP
 
LIO_NOP


	)

129 
	mLIO_WAIT
,

130 
	#LIO_WAIT
 
LIO_WAIT


	)

131 
	mLIO_NOWAIT


132 
	#LIO_NOWAIT
 
LIO_NOWAIT


	)

137 #ifde‡
__USE_GNU


138 
	$aio_öô
 (c⁄° 
aioöô
 *
__öô
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

142 #i‚de‡
__USE_FILE_OFFSET64


144 
	$aio_ªad
 (
aiocb
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

146 
	$aio_wrôe
 (
aiocb
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

149 
	$lio_li°io
 (
__mode
,

150 
aiocb
 *c⁄° 
__li°
[
__ª°ri˘_¨r
],

151 
__√¡
, 
sigevít
 *
__ª°ri˘
 
__sig
)

152 
__THROW
 
	`__n⁄nuŒ
 ((2));

155 
	$aio_îr‹
 (c⁄° 
aiocb
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

157 
__ssize_t
 
	$aio_ªtu∫
 (
aiocb
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

161 
	$aio_ˇn˚l
 (
__fûdes
, 
aiocb
 *
__aiocbp
Ë
__THROW
;

168 
	$aio_su•íd
 (c⁄° 
aiocb
 *c⁄° 
__li°
[], 
__√¡
,

169 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

170 
	`__n⁄nuŒ
 ((1));

174 
	$aio_fsync
 (
__›î©i⁄
, 
aiocb
 *
__aiocbp
)

175 
__THROW
 
	`__n⁄nuŒ
 ((2));

177 #ifde‡
__REDIRECT_NTH


178 
	`__REDIRECT_NTH
 (
aio_ªad
, (
aiocb
 *
__aiocbp
), 
aio_ªad64
)

179 
	`__n⁄nuŒ
 ((1));

180 
	`__REDIRECT_NTH
 (
aio_wrôe
, (
aiocb
 *
__aiocbp
), 
aio_wrôe64
)

181 
	`__n⁄nuŒ
 ((1));

183 
	`__REDIRECT_NTH
 (
lio_li°io
,

184 (
__mode
,

185 
aiocb
 *c⁄° 
__li°
[
__ª°ri˘_¨r
],

186 
__√¡
, 
sigevít
 *
__ª°ri˘
 
__sig
),

187 
lio_li°io64
Ë
	`__n⁄nuŒ
 ((2));

189 
	`__REDIRECT_NTH
 (
aio_îr‹
, (c⁄° 
aiocb
 *
__aiocbp
),

190 
aio_îr‹64
Ë
	`__n⁄nuŒ
 ((1));

191 
__ssize_t
 
	`__REDIRECT_NTH
 (
aio_ªtu∫
, (
aiocb
 *
__aiocbp
),

192 
aio_ªtu∫64
Ë
	`__n⁄nuŒ
 ((1));

194 
	`__REDIRECT_NTH
 (
aio_ˇn˚l
,

195 (
__fûdes
, 
aiocb
 *
__aiocbp
),

196 
aio_ˇn˚l64
);

198 
	`__REDIRECT_NTH
 (
aio_su•íd
,

199 (c⁄° 
aiocb
 *c⁄° 
__li°
[], 
__√¡
,

200 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
),

201 
aio_su•íd64
Ë
	`__n⁄nuŒ
 ((1));

203 
	`__REDIRECT_NTH
 (
aio_fsync
,

204 (
__›î©i⁄
, 
aiocb
 *
__aiocbp
),

205 
aio_fsync64
Ë
	`__n⁄nuŒ
 ((2));

208 
	#aio_ªad
 
aio_ªad64


	)

209 
	#aio_wrôe
 
aio_wrôe64


	)

210 
	#lio_li°io
 
lio_li°io64


	)

211 
	#aio_îr‹
 
aio_îr‹64


	)

212 
	#aio_ªtu∫
 
aio_ªtu∫64


	)

213 
	#aio_ˇn˚l
 
aio_ˇn˚l64


	)

214 
	#aio_su•íd
 
aio_su•íd64


	)

215 
	#aio_fsync
 
aio_fsync64


	)

219 #ifde‡
__USE_LARGEFILE64


220 
	$aio_ªad64
 (
aiocb64
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

221 
	$aio_wrôe64
 (
aiocb64
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

223 
	$lio_li°io64
 (
__mode
,

224 
aiocb64
 *c⁄° 
__li°
[
__ª°ri˘_¨r
],

225 
__√¡
, 
sigevít
 *
__ª°ri˘
 
__sig
)

226 
__THROW
 
	`__n⁄nuŒ
 ((2));

228 
	$aio_îr‹64
 (c⁄° 
aiocb64
 *
__aiocbp
)

229 
__THROW
 
	`__n⁄nuŒ
 ((1));

230 
__ssize_t
 
	$aio_ªtu∫64
 (
aiocb64
 *
__aiocbp
)

231 
__THROW
 
	`__n⁄nuŒ
 ((1));

233 
	$aio_ˇn˚l64
 (
__fûdes
, 
aiocb64
 *
__aiocbp
Ë
__THROW
;

235 
	$aio_su•íd64
 (c⁄° 
aiocb64
 *c⁄° 
__li°
[], 
__√¡
,

236 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

237 
__THROW
 
	`__n⁄nuŒ
 ((1));

239 
	$aio_fsync64
 (
__›î©i⁄
, 
aiocb64
 *
__aiocbp
)

240 
__THROW
 
	`__n⁄nuŒ
 ((2));

243 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/arpa/inet.h

18 #i‚de‡
_ARPA_INET_H


19 
	#_ARPA_INET_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<√töë/ö.h
>

25 #i‚de‡
__sockÀn_t_deföed


26 
__sockÀn_t
 
	tsockÀn_t
;

27 
	#__sockÀn_t_deföed


	)

30 
__BEGIN_DECLS


34 
ö_addr_t
 
	$öë_addr
 (c⁄° *
__˝
Ë
__THROW
;

37 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

41 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

42 
__THROW
;

45 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

49 
ö_addr_t
 
	$öë_√tw‹k
 (c⁄° *
__˝
Ë
__THROW
;

53 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

58 
	$öë_±⁄
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

59 *
__ª°ri˘
 
__buf
Ë
__THROW
;

64 c⁄° *
	$öë_¡›
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

65 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

66 
__THROW
;

70 #ifde‡
__USE_MISC


73 
	$öë_©⁄
 (c⁄° *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

77 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

82 *
	$öë_√t_¡›
 (
__af
, c⁄° *
__˝
, 
__bôs
,

83 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

88 
	$öë_√t_±⁄
 (
__af
, c⁄° *
__˝
,

89 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

94 
	$öë_nßp_addr
 (c⁄° *
__˝
,

95 *
__buf
, 
__Àn
Ë
__THROW
;

99 *
	$öë_nßp_¡ﬂ
 (
__Àn
, c⁄° *
__˝
,

100 *
__buf
Ë
__THROW
;

103 
__END_DECLS


	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


91 #i‡
deföed
 
__˝lu•lus


92 
	#as£π
(
ex¥
) \

93 (
°©ic_ˇ°
 <
boﬁ
> (
ex¥
) \

95 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

96 #ñi‡!
deföed
 
__GNUC__
 || deföed 
__STRICT_ANSI__


97 
	#as£π
(
ex¥
) \

98 ((
ex¥
) \

99 ? 
	`__ASSERT_VOID_CAST
 (0) \

100 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

107 
	#as£π
(
ex¥
) \

108 ((Ë ((
ex¥
Ë? 1 : 0), 
	`__exãnsi⁄__
 ({ \

109 i‡(
ex¥
) \

112 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
); \

113 
	}
}))

	)

116 #ifdef 
__USE_GNU


117 
	#as£π_≥º‹
(
î∫um
) \

118 (!(
î∫um
) \

119 ? 
	`__ASSERT_VOID_CAST
 (0) \

120 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

128 #i‡
deföed
 
__˝lu•lus
 ? 
__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

129 
	#__ASSERT_FUNCTION
 
__exãnsi⁄__
 
__PRETTY_FUNCTION__


	)

131 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

132 
	#__ASSERT_FUNCTION
 
__func__


	)

134 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

141 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


142 #unde‡
°©ic_as£π


143 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/byteswap.h

18 #i‚de‡
_BYTESWAP_H


19 
	#_BYTESWAP_H
 1

	)

21 
	~<„©uªs.h
>

24 
	~<bôs/byãsw≠.h
>

31 
	#bsw≠_16
(
x
Ë
	`__bsw≠_16
 (x)

	)

34 
	#bsw≠_32
(
x
Ë
	`__bsw≠_32
 (x)

	)

37 
	#bsw≠_64
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<bôs/ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

108 
__ex˘y≥
 (
iß um
);

109 
__ex˘y≥
 (
ißÕha
);

110 
__ex˘y≥
 (
is˙ål
);

111 
__ex˘y≥
 (
isdigô
);

112 
__ex˘y≥
 (
i¶owî
);

113 
__ex˘y≥
 (
isgøph
);

114 
__ex˘y≥
 (
i•röt
);

115 
__ex˘y≥
 (
i•un˘
);

116 
__ex˘y≥
 (
is•a˚
);

117 
__ex˘y≥
 (
isuµî
);

118 
__ex˘y≥
 (
isxdigô
);

122 
	$tﬁowî
 (
__c
Ë
__THROW
;

125 
	$touµî
 (
__c
Ë
__THROW
;

129 #ifdef 
__USE_ISOC99


130 
	`__ex˘y≥
 (
isbœnk
);

133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE


173 #ifde‡
__is˘y≥_f


174 
	$__is˘y≥_f
 (
Ænum
)

175 
	$__is˘y≥_f
 (
Æpha
)

176 
	$__is˘y≥_f
 (
˙ål
)

177 
	$__is˘y≥_f
 (
digô
)

178 
	$__is˘y≥_f
 (
lowî
)

179 
	$__is˘y≥_f
 (
gøph
)

180 
	$__is˘y≥_f
 (
¥öt
)

181 
	$__is˘y≥_f
 (
pun˘
)

182 
	$__is˘y≥_f
 (
•a˚
)

183 
	$__is˘y≥_f
 (
uµî
)

184 
	$__is˘y≥_f
 (
xdigô
)

185 #ifde‡
__USE_ISOC99


186 
	$__is˘y≥_f
 (
bœnk
)

188 #ñi‡
deföed
 
__is˘y≥


189 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

190 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

191 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

192 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

193 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

194 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

195 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

196 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

197 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

198 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

199 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

200 #ifde‡
__USE_ISOC99


201 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

205 #ifde‡
__USE_EXTERN_INLINES


206 
__exã∫_ölöe
 

207 
	`__NTH
 (
	$tﬁowî
 (
__c
))

209  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

210 
	}
}

212 
__exã∫_ölöe
 

213 
__NTH
 (
	$touµî
 (
__c
))

215  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

216 
	}
}

219 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


220 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

221 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

224 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


225 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

226 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

228 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

229 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

235 #ifde‡
__USE_XOPEN2K8


237 
	~<bôs/ty≥s/loˇÀ_t.h
>

241 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

242 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

244 
	#__ex˘y≥_l
(
«me
) \

245 
	`«me
 (, 
loˇÀ_t
Ë
__THROW


	)

251 
__ex˘y≥_l
 (
iß um_l
);

252 
__ex˘y≥_l
 (
ißÕha_l
);

253 
__ex˘y≥_l
 (
is˙ål_l
);

254 
__ex˘y≥_l
 (
isdigô_l
);

255 
__ex˘y≥_l
 (
i¶owî_l
);

256 
__ex˘y≥_l
 (
isgøph_l
);

257 
__ex˘y≥_l
 (
i•röt_l
);

258 
__ex˘y≥_l
 (
i•un˘_l
);

259 
__ex˘y≥_l
 (
is•a˚_l
);

260 
__ex˘y≥_l
 (
isuµî_l
);

261 
__ex˘y≥_l
 (
isxdigô_l
);

263 
__ex˘y≥_l
 (
isbœnk_l
);

267 
	$__tﬁowî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$tﬁowî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

271 
	$__touµî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

272 
	$touµî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

274 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


275 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

276 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

277 
	#__touµî_l
(
c
, 
loˇÀ
) \

278 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

279 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

280 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

284 #i‚de‡
__NO_CTYPE


285 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

286 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

287 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

288 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

289 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

290 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

291 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

292 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

293 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

294 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

295 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

297 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

299 #ifde‡
__USE_MISC


300 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

301 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

304 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

305 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

306 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

307 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

308 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

309 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

310 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

311 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

312 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

313 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

314 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

316 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

318 #ifde‡
__USE_MISC


319 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

320 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

327 
__END_DECLS


	@/usr/include/dirent.h

22 #i‚def 
_DIRENT_H


23 
	#_DIRENT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifde‡
__USE_XOPEN


32 #i‚de‡
__öo_t_deföed


33 #i‚de‡
__USE_FILE_OFFSET64


34 
__öo_t
 
	töo_t
;

36 
__öo64_t
 
	töo_t
;

38 
	#__öo_t_deföed


	)

40 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


41 
__öo64_t
 
	töo64_t
;

42 
	#__öo64_t_deföed


	)

61 
	~<bôs/dúít.h
>

63 #i‡
deföed
 
__USE_MISC
 && !deföed 
d_fûío


64 
	#d_öo
 
d_fûío


	)

81 #ifde‡
_DIRENT_HAVE_D_NAMLEN


82 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

83 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

85 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

86 #ifde‡
_DIRENT_HAVE_D_RECLEN


87 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

89 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name \

90 : 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

95 #ifde‡
__USE_MISC


99 
	mDT_UNKNOWN
 = 0,

100 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

101 
	mDT_FIFO
 = 1,

102 
	#DT_FIFO
 
DT_FIFO


	)

103 
	mDT_CHR
 = 2,

104 
	#DT_CHR
 
DT_CHR


	)

105 
	mDT_DIR
 = 4,

106 
	#DT_DIR
 
DT_DIR


	)

107 
	mDT_BLK
 = 6,

108 
	#DT_BLK
 
DT_BLK


	)

109 
	mDT_REG
 = 8,

110 
	#DT_REG
 
DT_REG


	)

111 
	mDT_LNK
 = 10,

112 
	#DT_LNK
 
DT_LNK


	)

113 
	mDT_SOCK
 = 12,

114 
	#DT_SOCK
 
DT_SOCK


	)

115 
	mDT_WHT
 = 14

116 
	#DT_WHT
 
DT_WHT


	)

120 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

121 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

127 
__dú°ªam
 
	tDIR
;

134 
DIR
 *
	$›ídú
 (c⁄° *
__«me
Ë
	`__n⁄nuŒ
 ((1));

136 #ifde‡
__USE_XOPEN2K8


141 
DIR
 *
	`fd›ídú
 (
__fd
);

149 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

161 #i‚de‡
__USE_FILE_OFFSET64


162 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

164 #ifde‡
__REDIRECT


165 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

166 
	`__n⁄nuŒ
 ((1));

168 
	#ªaddú
 
ªaddú64


	)

172 #ifde‡
__USE_LARGEFILE64


173 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

176 #ifde‡
__USE_POSIX


182 #i‚de‡
__USE_FILE_OFFSET64


183 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

184 
dúít
 *
__ª°ri˘
 
__íåy
,

185 
dúít
 **
__ª°ri˘
 
__ªsu…
)

186 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__©åibuã_dïªˇãd__
;

188 #ifde‡
__REDIRECT


189 
	`__REDIRECT
 (
ªaddú_r
,

190 (
DIR
 *
__ª°ri˘
 
__dúp
,

191 
dúít
 *
__ª°ri˘
 
__íåy
,

192 
dúít
 **
__ª°ri˘
 
__ªsu…
),

193 
ªaddú64_r
)

194 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__©åibuã_dïªˇãd__
;

196 
	#ªaddú_r
 
ªaddú64_r


	)

200 #ifde‡
__USE_LARGEFILE64


201 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

202 
dúít64
 *
__ª°ri˘
 
__íåy
,

203 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

204 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__©åibuã_dïªˇãd__
;

209 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


212 
	~<bôs/ty≥s.h
>

215 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

218 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

221 #ifde‡
__USE_XOPEN2K8


224 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

226 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


227 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

230 #ifde‡
__USE_MISC


231 #i‚de‡
MAXNAMLEN


233 
	~<bôs/posix1_lim.h
>

236 #ifde‡
NAME_MAX


237 
	#MAXNAMLEN
 
NAME_MAX


	)

239 
	#MAXNAMLEN
 255

	)

244 
	#__√ed_size_t


	)

245 
	~<°ddef.h
>

254 #i‚de‡
__USE_FILE_OFFSET64


255 
	$sˇndú
 (c⁄° *
__ª°ri˘
 
__dú
,

256 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

257 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

258 (*
__cmp
Ë(c⁄° 
dúít
 **,

259 c⁄° 
dúít
 **))

260 
	`__n⁄nuŒ
 ((1, 2));

262 #ifde‡
__REDIRECT


263 
	`__REDIRECT
 (
sˇndú
,

264 (c⁄° *
__ª°ri˘
 
__dú
,

265 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

266 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

267 (*
__cmp
Ë(c⁄° 
dúít
 **,

268 c⁄° 
dúít
 **)),

269 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

271 
	#sˇndú
 
sˇndú64


	)

275 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


278 
	$sˇndú64
 (c⁄° *
__ª°ri˘
 
__dú
,

279 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

280 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

281 (*
__cmp
Ë(c⁄° 
dúít64
 **,

282 c⁄° 
dúít64
 **))

283 
	`__n⁄nuŒ
 ((1, 2));

286 #ifde‡
__USE_GNU


292 #i‚de‡
__USE_FILE_OFFSET64


293 
	$sˇndú©
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

294 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

295 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

296 (*
__cmp
Ë(c⁄° 
dúít
 **,

297 c⁄° 
dúít
 **))

298 
	`__n⁄nuŒ
 ((2, 3));

300 #ifde‡
__REDIRECT


301 
	`__REDIRECT
 (
sˇndú©
,

302 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

303 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

304 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

305 (*
__cmp
Ë(c⁄° 
dúít
 **,

306 c⁄° 
dúít
 **)),

307 
sˇndú©64
Ë
	`__n⁄nuŒ
 ((2, 3));

309 
	#sˇndú©
 
sˇndú©64


	)

315 
	$sˇndú©64
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

316 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

317 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

318 (*
__cmp
Ë(c⁄° 
dúít64
 **,

319 c⁄° 
dúít64
 **))

320 
	`__n⁄nuŒ
 ((2, 3));

324 #i‚de‡
__USE_FILE_OFFSET64


325 
	$Æphas‹t
 (c⁄° 
dúít
 **
__e1
,

326 c⁄° 
dúít
 **
__e2
)

327 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

329 #ifde‡
__REDIRECT


330 
	`__REDIRECT_NTH
 (
Æphas‹t
,

331 (c⁄° 
dúít
 **
__e1
,

332 c⁄° 
dúít
 **
__e2
),

333 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

335 
	#Æphas‹t
 
Æphas‹t64


	)

339 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


340 
	$Æphas‹t64
 (c⁄° 
dúít64
 **
__e1
,

341 c⁄° 
dúít64
 **
__e2
)

342 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

347 #ifde‡
__USE_MISC


352 #i‚de‡
__USE_FILE_OFFSET64


353 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

354 
size_t
 
__nbyãs
,

355 
__off_t
 *
__ª°ri˘
 
__ba£p
)

356 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

358 #ifde‡
__REDIRECT


359 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

360 (
__fd
, *
__ª°ri˘
 
__buf
,

361 
size_t
 
__nbyãs
,

362 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

363 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

365 
	#gëdúíåõs
 
gëdúíåõs64


	)

369 #ifde‡
__USE_LARGEFILE64


370 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

371 
size_t
 
__nbyãs
,

372 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

373 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

377 #ifde‡
__USE_GNU


379 #i‚de‡
__USE_FILE_OFFSET64


380 
	$vîsi⁄s‹t
 (c⁄° 
dúít
 **
__e1
,

381 c⁄° 
dúít
 **
__e2
)

382 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

384 #ifde‡
__REDIRECT


385 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

386 (c⁄° 
dúít
 **
__e1
,

387 c⁄° 
dúít
 **
__e2
),

388 
vîsi⁄s‹t64
)

389 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

391 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

395 #ifde‡
__USE_LARGEFILE64


396 
	$vîsi⁄s‹t64
 (c⁄° 
dúít64
 **
__e1
,

397 c⁄° 
dúít64
 **
__e2
)

398 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

402 
__END_DECLS


404 
	~<bôs/dúít_ext.h
>

	@/usr/include/dlfcn.h

19 #i‚def 
_DLFCN_H


20 
	#_DLFCN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

27 
	~<bôs/dlf˙.h
>

30 #ifde‡
__USE_GNU


35 
	#RTLD_NEXT
 ((*Ë-1l)

	)

40 
	#RTLD_DEFAULT
 ((*Ë0)

	)

44 
	tLmid_t
;

47 
	#LM_ID_BASE
 0

	)

48 
	#LM_ID_NEWLM
 -1

	)

52 
__BEGIN_DECLS


56 *
	$dl›í
 (c⁄° *
__fûe
, 
__mode
Ë
__THROWNL
;

60 
	$dl˛o£
 (*
__h™dÀ
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1));

64 *
	$dlsym
 (*
__ª°ri˘
 
__h™dÀ
,

65 c⁄° *
__ª°ri˘
 
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

67 #ifde‡
__USE_GNU


69 *
	$dlm›í
 (
Lmid_t
 
__nsid
, c⁄° *
__fûe
, 
__mode
Ë
__THROWNL
;

73 *
	$dlvsym
 (*
__ª°ri˘
 
__h™dÀ
,

74 c⁄° *
__ª°ri˘
 
__«me
,

75 c⁄° *
__ª°ri˘
 
__vîsi⁄
)

76 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

82 *
	$dÀº‹
 (Ë
__THROW
;

85 #ifde‡
__USE_GNU


90 c⁄° *
dli_‚ame
;

91 *
dli_fba£
;

92 c⁄° *
dli_¢ame
;

93 *
dli_ßddr
;

94 } 
	tDl_öfo
;

98 
	$dœddr
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
)

99 
__THROW
 
	`__n⁄nuŒ
 ((2));

102 
	$dœddr1
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
,

103 **
__exåa_öfo
, 
__Êags
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

111 
RTLD_DL_SYMENT
 = 1,

114 
RTLD_DL_LINKMAP
 = 2

123 
	$dlöfo
 (*
__ª°ri˘
 
__h™dÀ
,

124 
__ªque°
, *
__ª°ri˘
 
__¨g
)

125 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

131 
RTLD_DI_LMID
 = 1,

135 
RTLD_DI_LINKMAP
 = 2,

137 
RTLD_DI_CONFIGADDR
 = 3,

144 
RTLD_DI_SERINFO
 = 4,

145 
RTLD_DI_SERINFOSIZE
 = 5,

149 
RTLD_DI_ORIGIN
 = 6,

151 
RTLD_DI_PROFILENAME
 = 7,

152 
RTLD_DI_PROFILEOUT
 = 8,

157 
RTLD_DI_TLS_MODID
 = 9,

163 
RTLD_DI_TLS_DATA
 = 10,

165 
RTLD_DI_MAX
 = 10

173 *
dls_«me
;

174 
dls_Êags
;

175 } 
	tDl_£Ω©h
;

181 
size_t
 
dls_size
;

182 
dls_˙t
;

183 #i‡
	`__GNUC_PREREQ
 (3, 0)

188 
__exãnsi⁄__
 union

190 
Dl_£Ω©h
 
dls_£Ω©h
[0];

191 
Dl_£Ω©h
 
__dls_£Ω©h_∑d
[1];

194 
Dl_£Ω©h
 
dls_£Ω©h
[1];

196 } 
	tDl_£röfo
;

200 
__END_DECLS


	@/usr/include/elf.h

19 #i‚de‡
_ELF_H


20 
	#_ELF_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


28 
	~<°döt.h
>

31 
uöt16_t
 
	tElf32_HÆf
;

32 
uöt16_t
 
	tElf64_HÆf
;

35 
uöt32_t
 
	tElf32_W‹d
;

36 
öt32_t
 
	tElf32_Sw‹d
;

37 
uöt32_t
 
	tElf64_W‹d
;

38 
öt32_t
 
	tElf64_Sw‹d
;

41 
uöt64_t
 
	tElf32_Xw‹d
;

42 
öt64_t
 
	tElf32_Sxw‹d
;

43 
uöt64_t
 
	tElf64_Xw‹d
;

44 
öt64_t
 
	tElf64_Sxw‹d
;

47 
uöt32_t
 
	tElf32_Addr
;

48 
uöt64_t
 
	tElf64_Addr
;

51 
uöt32_t
 
	tElf32_Off
;

52 
uöt64_t
 
	tElf64_Off
;

55 
uöt16_t
 
	tElf32_Se˘i⁄
;

56 
uöt16_t
 
	tElf64_Se˘i⁄
;

59 
Elf32_HÆf
 
	tElf32_Vîsym
;

60 
Elf64_HÆf
 
	tElf64_Vîsym
;

65 
	#EI_NIDENT
 (16)

	)

69 
	me_idít
[
EI_NIDENT
];

70 
Elf32_HÆf
 
	me_ty≥
;

71 
Elf32_HÆf
 
	me_machöe
;

72 
Elf32_W‹d
 
	me_vîsi⁄
;

73 
Elf32_Addr
 
	me_íåy
;

74 
Elf32_Off
 
	me_phoff
;

75 
Elf32_Off
 
	me_shoff
;

76 
Elf32_W‹d
 
	me_Êags
;

77 
Elf32_HÆf
 
	me_ehsize
;

78 
Elf32_HÆf
 
	me_phítsize
;

79 
Elf32_HÆf
 
	me_phnum
;

80 
Elf32_HÆf
 
	me_shítsize
;

81 
Elf32_HÆf
 
	me_shnum
;

82 
Elf32_HÆf
 
	me_sh°∫dx
;

83 } 
	tElf32_Ehdr
;

87 
	me_idít
[
EI_NIDENT
];

88 
Elf64_HÆf
 
	me_ty≥
;

89 
Elf64_HÆf
 
	me_machöe
;

90 
Elf64_W‹d
 
	me_vîsi⁄
;

91 
Elf64_Addr
 
	me_íåy
;

92 
Elf64_Off
 
	me_phoff
;

93 
Elf64_Off
 
	me_shoff
;

94 
Elf64_W‹d
 
	me_Êags
;

95 
Elf64_HÆf
 
	me_ehsize
;

96 
Elf64_HÆf
 
	me_phítsize
;

97 
Elf64_HÆf
 
	me_phnum
;

98 
Elf64_HÆf
 
	me_shítsize
;

99 
Elf64_HÆf
 
	me_shnum
;

100 
Elf64_HÆf
 
	me_sh°∫dx
;

101 } 
	tElf64_Ehdr
;

107 
	#EI_MAG0
 0

	)

108 
	#ELFMAG0
 0x7‡

	)

110 
	#EI_MAG1
 1

	)

111 
	#ELFMAG1
 'E'

	)

113 
	#EI_MAG2
 2

	)

114 
	#ELFMAG2
 'L'

	)

116 
	#EI_MAG3
 3

	)

117 
	#ELFMAG3
 'F'

	)

120 
	#ELFMAG
 "\177ELF"

	)

121 
	#SELFMAG
 4

	)

123 
	#EI_CLASS
 4

	)

124 
	#ELFCLASSNONE
 0

	)

125 
	#ELFCLASS32
 1

	)

126 
	#ELFCLASS64
 2

	)

127 
	#ELFCLASSNUM
 3

	)

129 
	#EI_DATA
 5

	)

130 
	#ELFDATANONE
 0

	)

131 
	#ELFDATA2LSB
 1

	)

132 
	#ELFDATA2MSB
 2

	)

133 
	#ELFDATANUM
 3

	)

135 
	#EI_VERSION
 6

	)

138 
	#EI_OSABI
 7

	)

139 
	#ELFOSABI_NONE
 0

	)

140 
	#ELFOSABI_SYSV
 0

	)

141 
	#ELFOSABI_HPUX
 1

	)

142 
	#ELFOSABI_NETBSD
 2

	)

143 
	#ELFOSABI_GNU
 3

	)

144 
	#ELFOSABI_LINUX
 
ELFOSABI_GNU


	)

145 
	#ELFOSABI_SOLARIS
 6

	)

146 
	#ELFOSABI_AIX
 7

	)

147 
	#ELFOSABI_IRIX
 8

	)

148 
	#ELFOSABI_FREEBSD
 9

	)

149 
	#ELFOSABI_TRU64
 10

	)

150 
	#ELFOSABI_MODESTO
 11

	)

151 
	#ELFOSABI_OPENBSD
 12

	)

152 
	#ELFOSABI_ARM_AEABI
 64

	)

153 
	#ELFOSABI_ARM
 97

	)

154 
	#ELFOSABI_STANDALONE
 255

	)

156 
	#EI_ABIVERSION
 8

	)

158 
	#EI_PAD
 9

	)

162 
	#ET_NONE
 0

	)

163 
	#ET_REL
 1

	)

164 
	#ET_EXEC
 2

	)

165 
	#ET_DYN
 3

	)

166 
	#ET_CORE
 4

	)

167 
	#ET_NUM
 5

	)

168 
	#ET_LOOS
 0x„00

	)

169 
	#ET_HIOS
 0x„f‡

	)

170 
	#ET_LOPROC
 0xff00

	)

171 
	#ET_HIPROC
 0xfff‡

	)

175 
	#EM_NONE
 0

	)

176 
	#EM_M32
 1

	)

177 
	#EM_SPARC
 2

	)

178 
	#EM_386
 3

	)

179 
	#EM_68K
 4

	)

180 
	#EM_88K
 5

	)

181 
	#EM_IAMCU
 6

	)

182 
	#EM_860
 7

	)

183 
	#EM_MIPS
 8

	)

184 
	#EM_S370
 9

	)

185 
	#EM_MIPS_RS3_LE
 10

	)

187 
	#EM_PARISC
 15

	)

189 
	#EM_VPP500
 17

	)

190 
	#EM_SPARC32PLUS
 18

	)

191 
	#EM_960
 19

	)

192 
	#EM_PPC
 20

	)

193 
	#EM_PPC64
 21

	)

194 
	#EM_S390
 22

	)

195 
	#EM_SPU
 23

	)

197 
	#EM_V800
 36

	)

198 
	#EM_FR20
 37

	)

199 
	#EM_RH32
 38

	)

200 
	#EM_RCE
 39

	)

201 
	#EM_ARM
 40

	)

202 
	#EM_FAKE_ALPHA
 41

	)

203 
	#EM_SH
 42

	)

204 
	#EM_SPARCV9
 43

	)

205 
	#EM_TRICORE
 44

	)

206 
	#EM_ARC
 45

	)

207 
	#EM_H8_300
 46

	)

208 
	#EM_H8_300H
 47

	)

209 
	#EM_H8S
 48

	)

210 
	#EM_H8_500
 49

	)

211 
	#EM_IA_64
 50

	)

212 
	#EM_MIPS_X
 51

	)

213 
	#EM_COLDFIRE
 52

	)

214 
	#EM_68HC12
 53

	)

215 
	#EM_MMA
 54

	)

216 
	#EM_PCP
 55

	)

217 
	#EM_NCPU
 56

	)

218 
	#EM_NDR1
 57

	)

219 
	#EM_STARCORE
 58

	)

220 
	#EM_ME16
 59

	)

221 
	#EM_ST100
 60

	)

222 
	#EM_TINYJ
 61

	)

223 
	#EM_X86_64
 62

	)

224 
	#EM_PDSP
 63

	)

225 
	#EM_PDP10
 64

	)

226 
	#EM_PDP11
 65

	)

227 
	#EM_FX66
 66

	)

228 
	#EM_ST9PLUS
 67

	)

229 
	#EM_ST7
 68

	)

230 
	#EM_68HC16
 69

	)

231 
	#EM_68HC11
 70

	)

232 
	#EM_68HC08
 71

	)

233 
	#EM_68HC05
 72

	)

234 
	#EM_SVX
 73

	)

235 
	#EM_ST19
 74

	)

236 
	#EM_VAX
 75

	)

237 
	#EM_CRIS
 76

	)

238 
	#EM_JAVELIN
 77

	)

239 
	#EM_FIREPATH
 78

	)

240 
	#EM_ZSP
 79

	)

241 
	#EM_MMIX
 80

	)

242 
	#EM_HUANY
 81

	)

243 
	#EM_PRISM
 82

	)

244 
	#EM_AVR
 83

	)

245 
	#EM_FR30
 84

	)

246 
	#EM_D10V
 85

	)

247 
	#EM_D30V
 86

	)

248 
	#EM_V850
 87

	)

249 
	#EM_M32R
 88

	)

250 
	#EM_MN10300
 89

	)

251 
	#EM_MN10200
 90

	)

252 
	#EM_PJ
 91

	)

253 
	#EM_OPENRISC
 92

	)

254 
	#EM_ARC_COMPACT
 93

	)

255 
	#EM_XTENSA
 94

	)

256 
	#EM_VIDEOCORE
 95

	)

257 
	#EM_TMM_GPP
 96

	)

258 
	#EM_NS32K
 97

	)

259 
	#EM_TPC
 98

	)

260 
	#EM_SNP1K
 99

	)

261 
	#EM_ST200
 100

	)

262 
	#EM_IP2K
 101

	)

263 
	#EM_MAX
 102

	)

264 
	#EM_CR
 103

	)

265 
	#EM_F2MC16
 104

	)

266 
	#EM_MSP430
 105

	)

267 
	#EM_BLACKFIN
 106

	)

268 
	#EM_SE_C33
 107

	)

269 
	#EM_SEP
 108

	)

270 
	#EM_ARCA
 109

	)

271 
	#EM_UNICORE
 110

	)

272 
	#EM_EXCESS
 111

	)

273 
	#EM_DXP
 112

	)

274 
	#EM_ALTERA_NIOS2
 113

	)

275 
	#EM_CRX
 114

	)

276 
	#EM_XGATE
 115

	)

277 
	#EM_C166
 116

	)

278 
	#EM_M16C
 117

	)

279 
	#EM_DSPIC30F
 118

	)

280 
	#EM_CE
 119

	)

281 
	#EM_M32C
 120

	)

283 
	#EM_TSK3000
 131

	)

284 
	#EM_RS08
 132

	)

285 
	#EM_SHARC
 133

	)

286 
	#EM_ECOG2
 134

	)

287 
	#EM_SCORE7
 135

	)

288 
	#EM_DSP24
 136

	)

289 
	#EM_VIDEOCORE3
 137

	)

290 
	#EM_LATTICEMICO32
 138

	)

291 
	#EM_SE_C17
 139

	)

292 
	#EM_TI_C6000
 140

	)

293 
	#EM_TI_C2000
 141

	)

294 
	#EM_TI_C5500
 142

	)

295 
	#EM_TI_ARP32
 143

	)

296 
	#EM_TI_PRU
 144

	)

298 
	#EM_MMDSP_PLUS
 160

	)

299 
	#EM_CYPRESS_M8C
 161

	)

300 
	#EM_R32C
 162

	)

301 
	#EM_TRIMEDIA
 163

	)

302 
	#EM_QDSP6
 164

	)

303 
	#EM_8051
 165

	)

304 
	#EM_STXP7X
 166

	)

305 
	#EM_NDS32
 167

	)

306 
	#EM_ECOG1X
 168

	)

307 
	#EM_MAXQ30
 169

	)

308 
	#EM_XIMO16
 170

	)

309 
	#EM_MANIK
 171

	)

310 
	#EM_CRAYNV2
 172

	)

311 
	#EM_RX
 173

	)

312 
	#EM_METAG
 174

	)

313 
	#EM_MCST_ELBRUS
 175

	)

314 
	#EM_ECOG16
 176

	)

315 
	#EM_CR16
 177

	)

316 
	#EM_ETPU
 178

	)

317 
	#EM_SLE9X
 179

	)

318 
	#EM_L10M
 180

	)

319 
	#EM_K10M
 181

	)

321 
	#EM_AARCH64
 183

	)

323 
	#EM_AVR32
 185

	)

324 
	#EM_STM8
 186

	)

325 
	#EM_TILE64
 187

	)

326 
	#EM_TILEPRO
 188

	)

327 
	#EM_MICROBLAZE
 189

	)

328 
	#EM_CUDA
 190

	)

329 
	#EM_TILEGX
 191

	)

330 
	#EM_CLOUDSHIELD
 192

	)

331 
	#EM_COREA_1ST
 193

	)

332 
	#EM_COREA_2ND
 194

	)

333 
	#EM_ARC_COMPACT2
 195

	)

334 
	#EM_OPEN8
 196

	)

335 
	#EM_RL78
 197

	)

336 
	#EM_VIDEOCORE5
 198

	)

337 
	#EM_78KOR
 199

	)

338 
	#EM_56800EX
 200

	)

339 
	#EM_BA1
 201

	)

340 
	#EM_BA2
 202

	)

341 
	#EM_XCORE
 203

	)

342 
	#EM_MCHP_PIC
 204

	)

344 
	#EM_KM32
 210

	)

345 
	#EM_KMX32
 211

	)

346 
	#EM_EMX16
 212

	)

347 
	#EM_EMX8
 213

	)

348 
	#EM_KVARC
 214

	)

349 
	#EM_CDP
 215

	)

350 
	#EM_COGE
 216

	)

351 
	#EM_COOL
 217

	)

352 
	#EM_NORC
 218

	)

353 
	#EM_CSR_KALIMBA
 219

	)

354 
	#EM_Z80
 220

	)

355 
	#EM_VISIUM
 221

	)

356 
	#EM_FT32
 222

	)

357 
	#EM_MOXIE
 223

	)

358 
	#EM_AMDGPU
 224

	)

360 
	#EM_RISCV
 243

	)

362 
	#EM_BPF
 247

	)

363 
	#EM_CSKY
 252

	)

365 
	#EM_NUM
 253

	)

369 
	#EM_ARC_A5
 
EM_ARC_COMPACT


	)

375 
	#EM_ALPHA
 0x9026

	)

379 
	#EV_NONE
 0

	)

380 
	#EV_CURRENT
 1

	)

381 
	#EV_NUM
 2

	)

387 
Elf32_W‹d
 
	msh_«me
;

388 
Elf32_W‹d
 
	msh_ty≥
;

389 
Elf32_W‹d
 
	msh_Êags
;

390 
Elf32_Addr
 
	msh_addr
;

391 
Elf32_Off
 
	msh_off£t
;

392 
Elf32_W‹d
 
	msh_size
;

393 
Elf32_W‹d
 
	msh_lök
;

394 
Elf32_W‹d
 
	msh_öfo
;

395 
Elf32_W‹d
 
	msh_addølign
;

396 
Elf32_W‹d
 
	msh_ítsize
;

397 } 
	tElf32_Shdr
;

401 
Elf64_W‹d
 
	msh_«me
;

402 
Elf64_W‹d
 
	msh_ty≥
;

403 
Elf64_Xw‹d
 
	msh_Êags
;

404 
Elf64_Addr
 
	msh_addr
;

405 
Elf64_Off
 
	msh_off£t
;

406 
Elf64_Xw‹d
 
	msh_size
;

407 
Elf64_W‹d
 
	msh_lök
;

408 
Elf64_W‹d
 
	msh_öfo
;

409 
Elf64_Xw‹d
 
	msh_addølign
;

410 
Elf64_Xw‹d
 
	msh_ítsize
;

411 } 
	tElf64_Shdr
;

415 
	#SHN_UNDEF
 0

	)

416 
	#SHN_LORESERVE
 0xff00

	)

417 
	#SHN_LOPROC
 0xff00

	)

418 
	#SHN_BEFORE
 0xff00

	)

420 
	#SHN_AFTER
 0xff01

	)

422 
	#SHN_HIPROC
 0xff1‡

	)

423 
	#SHN_LOOS
 0xff20

	)

424 
	#SHN_HIOS
 0xff3‡

	)

425 
	#SHN_ABS
 0xfff1

	)

426 
	#SHN_COMMON
 0xfff2

	)

427 
	#SHN_XINDEX
 0xfff‡

	)

428 
	#SHN_HIRESERVE
 0xfff‡

	)

432 
	#SHT_NULL
 0

	)

433 
	#SHT_PROGBITS
 1

	)

434 
	#SHT_SYMTAB
 2

	)

435 
	#SHT_STRTAB
 3

	)

436 
	#SHT_RELA
 4

	)

437 
	#SHT_HASH
 5

	)

438 
	#SHT_DYNAMIC
 6

	)

439 
	#SHT_NOTE
 7

	)

440 
	#SHT_NOBITS
 8

	)

441 
	#SHT_REL
 9

	)

442 
	#SHT_SHLIB
 10

	)

443 
	#SHT_DYNSYM
 11

	)

444 
	#SHT_INIT_ARRAY
 14

	)

445 
	#SHT_FINI_ARRAY
 15

	)

446 
	#SHT_PREINIT_ARRAY
 16

	)

447 
	#SHT_GROUP
 17

	)

448 
	#SHT_SYMTAB_SHNDX
 18

	)

449 
	#SHT_NUM
 19

	)

450 
	#SHT_LOOS
 0x60000000

	)

451 
	#SHT_GNU_ATTRIBUTES
 0x6ffffff5

	)

452 
	#SHT_GNU_HASH
 0x6ffffff6

	)

453 
	#SHT_GNU_LIBLIST
 0x6ffffff7

	)

454 
	#SHT_CHECKSUM
 0x6ffffff8

	)

455 
	#SHT_LOSUNW
 0x6fffffÁ

	)

456 
	#SHT_SUNW_move
 0x6fffffÁ

	)

457 
	#SHT_SUNW_COMDAT
 0x6ffffffb

	)

458 
	#SHT_SUNW_symöfo
 0x6ffffffc

	)

459 
	#SHT_GNU_vîdef
 0x6ffffffd

	)

460 
	#SHT_GNU_vî√ed
 0x6fffff„

	)

461 
	#SHT_GNU_vîsym
 0x6ffffff‡

	)

462 
	#SHT_HISUNW
 0x6ffffff‡

	)

463 
	#SHT_HIOS
 0x6ffffff‡

	)

464 
	#SHT_LOPROC
 0x70000000

	)

465 
	#SHT_HIPROC
 0x7ffffff‡

	)

466 
	#SHT_LOUSER
 0x80000000

	)

467 
	#SHT_HIUSER
 0x8ffffff‡

	)

471 
	#SHF_WRITE
 (1 << 0Ë

	)

472 
	#SHF_ALLOC
 (1 << 1Ë

	)

473 
	#SHF_EXECINSTR
 (1 << 2Ë

	)

474 
	#SHF_MERGE
 (1 << 4Ë

	)

475 
	#SHF_STRINGS
 (1 << 5Ë

	)

476 
	#SHF_INFO_LINK
 (1 << 6Ë

	)

477 
	#SHF_LINK_ORDER
 (1 << 7Ë

	)

478 
	#SHF_OS_NONCONFORMING
 (1 << 8Ë

	)

480 
	#SHF_GROUP
 (1 << 9Ë

	)

481 
	#SHF_TLS
 (1 << 10Ë

	)

482 
	#SHF_COMPRESSED
 (1 << 11Ë

	)

483 
	#SHF_MASKOS
 0x0ff00000

	)

484 
	#SHF_MASKPROC
 0xf0000000

	)

485 
	#SHF_ORDERED
 (1 << 30Ë

	)

487 
	#SHF_EXCLUDE
 (1U << 31Ë

	)

494 
Elf32_W‹d
 
	mch_ty≥
;

495 
Elf32_W‹d
 
	mch_size
;

496 
Elf32_W‹d
 
	mch_addølign
;

497 } 
	tElf32_Chdr
;

501 
Elf64_W‹d
 
	mch_ty≥
;

502 
Elf64_W‹d
 
	mch_ª£rved
;

503 
Elf64_Xw‹d
 
	mch_size
;

504 
Elf64_Xw‹d
 
	mch_addølign
;

505 } 
	tElf64_Chdr
;

508 
	#ELFCOMPRESS_ZLIB
 1

	)

509 
	#ELFCOMPRESS_LOOS
 0x60000000

	)

510 
	#ELFCOMPRESS_HIOS
 0x6ffffff‡

	)

511 
	#ELFCOMPRESS_LOPROC
 0x70000000

	)

512 
	#ELFCOMPRESS_HIPROC
 0x7ffffff‡

	)

515 
	#GRP_COMDAT
 0x1

	)

521 
Elf32_W‹d
 
	m°_«me
;

522 
Elf32_Addr
 
	m°_vÆue
;

523 
Elf32_W‹d
 
	m°_size
;

524 
	m°_öfo
;

525 
	m°_Ÿhî
;

526 
Elf32_Se˘i⁄
 
	m°_shndx
;

527 } 
	tElf32_Sym
;

531 
Elf64_W‹d
 
	m°_«me
;

532 
	m°_öfo
;

533 
	m°_Ÿhî
;

534 
Elf64_Se˘i⁄
 
	m°_shndx
;

535 
Elf64_Addr
 
	m°_vÆue
;

536 
Elf64_Xw‹d
 
	m°_size
;

537 } 
	tElf64_Sym
;

544 
Elf32_HÆf
 
	msi_boundto
;

545 
Elf32_HÆf
 
	msi_Êags
;

546 } 
	tElf32_Symöfo
;

550 
Elf64_HÆf
 
	msi_boundto
;

551 
Elf64_HÆf
 
	msi_Êags
;

552 } 
	tElf64_Symöfo
;

555 
	#SYMINFO_BT_SELF
 0xfff‡

	)

556 
	#SYMINFO_BT_PARENT
 0xff„

	)

557 
	#SYMINFO_BT_LOWRESERVE
 0xff00

	)

560 
	#SYMINFO_FLG_DIRECT
 0x0001

	)

561 
	#SYMINFO_FLG_PASSTHRU
 0x0002

	)

562 
	#SYMINFO_FLG_COPY
 0x0004

	)

563 
	#SYMINFO_FLG_LAZYLOAD
 0x0008

	)

566 
	#SYMINFO_NONE
 0

	)

567 
	#SYMINFO_CURRENT
 1

	)

568 
	#SYMINFO_NUM
 2

	)

573 
	#ELF32_ST_BIND
(
vÆ
Ë(((Ë(vÆ)Ë>> 4)

	)

574 
	#ELF32_ST_TYPE
(
vÆ
Ë((vÆË& 0xf)

	)

575 
	#ELF32_ST_INFO
(
böd
, 
ty≥
Ë(((bödË<< 4Ë+ (—y≥Ë& 0xf))

	)

578 
	#ELF64_ST_BIND
(
vÆ
Ë
	`ELF32_ST_BIND
 (vÆ)

	)

579 
	#ELF64_ST_TYPE
(
vÆ
Ë
	`ELF32_ST_TYPE
 (vÆ)

	)

580 
	#ELF64_ST_INFO
(
böd
, 
ty≥
Ë
	`ELF32_ST_INFO
 ((böd), (ty≥))

	)

584 
	#STB_LOCAL
 0

	)

585 
	#STB_GLOBAL
 1

	)

586 
	#STB_WEAK
 2

	)

587 
	#STB_NUM
 3

	)

588 
	#STB_LOOS
 10

	)

589 
	#STB_GNU_UNIQUE
 10

	)

590 
	#STB_HIOS
 12

	)

591 
	#STB_LOPROC
 13

	)

592 
	#STB_HIPROC
 15

	)

596 
	#STT_NOTYPE
 0

	)

597 
	#STT_OBJECT
 1

	)

598 
	#STT_FUNC
 2

	)

599 
	#STT_SECTION
 3

	)

600 
	#STT_FILE
 4

	)

601 
	#STT_COMMON
 5

	)

602 
	#STT_TLS
 6

	)

603 
	#STT_NUM
 7

	)

604 
	#STT_LOOS
 10

	)

605 
	#STT_GNU_IFUNC
 10

	)

606 
	#STT_HIOS
 12

	)

607 
	#STT_LOPROC
 13

	)

608 
	#STT_HIPROC
 15

	)

615 
	#STN_UNDEF
 0

	)

620 
	#ELF32_ST_VISIBILITY
(
o
Ë((oË& 0x03)

	)

623 
	#ELF64_ST_VISIBILITY
(
o
Ë
	`ELF32_ST_VISIBILITY
 (o)

	)

626 
	#STV_DEFAULT
 0

	)

627 
	#STV_INTERNAL
 1

	)

628 
	#STV_HIDDEN
 2

	)

629 
	#STV_PROTECTED
 3

	)

636 
Elf32_Addr
 
	mr_off£t
;

637 
Elf32_W‹d
 
	mr_öfo
;

638 } 
	tElf32_Rñ
;

647 
Elf64_Addr
 
	mr_off£t
;

648 
Elf64_Xw‹d
 
	mr_öfo
;

649 } 
	tElf64_Rñ
;

655 
Elf32_Addr
 
	mr_off£t
;

656 
Elf32_W‹d
 
	mr_öfo
;

657 
Elf32_Sw‹d
 
	mr_addíd
;

658 } 
	tElf32_Rña
;

662 
Elf64_Addr
 
	mr_off£t
;

663 
Elf64_Xw‹d
 
	mr_öfo
;

664 
Elf64_Sxw‹d
 
	mr_addíd
;

665 } 
	tElf64_Rña
;

669 
	#ELF32_R_SYM
(
vÆ
Ë((vÆË>> 8)

	)

670 
	#ELF32_R_TYPE
(
vÆ
Ë((vÆË& 0xff)

	)

671 
	#ELF32_R_INFO
(
sym
, 
ty≥
Ë(((symË<< 8Ë+ (—y≥Ë& 0xff))

	)

673 
	#ELF64_R_SYM
(
i
Ë((iË>> 32)

	)

674 
	#ELF64_R_TYPE
(
i
Ë((iË& 0xffffffff)

	)

675 
	#ELF64_R_INFO
(
sym
,
ty≥
Ë((((
Elf64_Xw‹d
Ë(sym)Ë<< 32Ë+ (ty≥))

	)

681 
Elf32_W‹d
 
	mp_ty≥
;

682 
Elf32_Off
 
	mp_off£t
;

683 
Elf32_Addr
 
	mp_vaddr
;

684 
Elf32_Addr
 
	mp_∑ddr
;

685 
Elf32_W‹d
 
	mp_fûesz
;

686 
Elf32_W‹d
 
	mp_memsz
;

687 
Elf32_W‹d
 
	mp_Êags
;

688 
Elf32_W‹d
 
	mp_Æign
;

689 } 
	tElf32_Phdr
;

693 
Elf64_W‹d
 
	mp_ty≥
;

694 
Elf64_W‹d
 
	mp_Êags
;

695 
Elf64_Off
 
	mp_off£t
;

696 
Elf64_Addr
 
	mp_vaddr
;

697 
Elf64_Addr
 
	mp_∑ddr
;

698 
Elf64_Xw‹d
 
	mp_fûesz
;

699 
Elf64_Xw‹d
 
	mp_memsz
;

700 
Elf64_Xw‹d
 
	mp_Æign
;

701 } 
	tElf64_Phdr
;

707 
	#PN_XNUM
 0xffff

	)

711 
	#PT_NULL
 0

	)

712 
	#PT_LOAD
 1

	)

713 
	#PT_DYNAMIC
 2

	)

714 
	#PT_INTERP
 3

	)

715 
	#PT_NOTE
 4

	)

716 
	#PT_SHLIB
 5

	)

717 
	#PT_PHDR
 6

	)

718 
	#PT_TLS
 7

	)

719 
	#PT_NUM
 8

	)

720 
	#PT_LOOS
 0x60000000

	)

721 
	#PT_GNU_EH_FRAME
 0x6474e550

	)

722 
	#PT_GNU_STACK
 0x6474e551

	)

723 
	#PT_GNU_RELRO
 0x6474e552

	)

724 
	#PT_LOSUNW
 0x6fffffÁ

	)

725 
	#PT_SUNWBSS
 0x6fffffÁ

	)

726 
	#PT_SUNWSTACK
 0x6ffffffb

	)

727 
	#PT_HISUNW
 0x6fffffff

	)

728 
	#PT_HIOS
 0x6ffffff‡

	)

729 
	#PT_LOPROC
 0x70000000

	)

730 
	#PT_HIPROC
 0x7ffffff‡

	)

734 
	#PF_X
 (1 << 0Ë

	)

735 
	#PF_W
 (1 << 1Ë

	)

736 
	#PF_R
 (1 << 2Ë

	)

737 
	#PF_MASKOS
 0x0ff00000

	)

738 
	#PF_MASKPROC
 0xf0000000

	)

742 
	#NT_PRSTATUS
 1

	)

743 
	#NT_PRFPREG
 2

	)

745 
	#NT_FPREGSET
 2

	)

746 
	#NT_PRPSINFO
 3

	)

747 
	#NT_PRXREG
 4

	)

748 
	#NT_TASKSTRUCT
 4

	)

749 
	#NT_PLATFORM
 5

	)

750 
	#NT_AUXV
 6

	)

751 
	#NT_GWINDOWS
 7

	)

752 
	#NT_ASRS
 8

	)

753 
	#NT_PSTATUS
 10

	)

754 
	#NT_PSINFO
 13

	)

755 
	#NT_PRCRED
 14

	)

756 
	#NT_UTSNAME
 15

	)

757 
	#NT_LWPSTATUS
 16

	)

758 
	#NT_LWPSINFO
 17

	)

759 
	#NT_PRFPXREG
 20

	)

760 
	#NT_SIGINFO
 0x53494749

	)

762 
	#NT_FILE
 0x46494c45

	)

764 
	#NT_PRXFPREG
 0x46e62b7‡

	)

765 
	#NT_PPC_VMX
 0x100

	)

766 
	#NT_PPC_SPE
 0x101

	)

767 
	#NT_PPC_VSX
 0x102

	)

768 
	#NT_PPC_TAR
 0x103

	)

769 
	#NT_PPC_PPR
 0x104

	)

770 
	#NT_PPC_DSCR
 0x105

	)

771 
	#NT_PPC_EBB
 0x106

	)

772 
	#NT_PPC_PMU
 0x107

	)

773 
	#NT_PPC_TM_CGPR
 0x108

	)

774 
	#NT_PPC_TM_CFPR
 0x109

	)

775 
	#NT_PPC_TM_CVMX
 0x10®

	)

776 
	#NT_PPC_TM_CVSX
 0x10b

	)

777 
	#NT_PPC_TM_SPR
 0x10¯

	)

778 
	#NT_PPC_TM_CTAR
 0x10d

	)

780 
	#NT_PPC_TM_CPPR
 0x10ê

	)

782 
	#NT_PPC_TM_CDSCR
 0x10‡

	)

784 
	#NT_PPC_PKEY
 0x110

	)

786 
	#NT_386_TLS
 0x200

	)

787 
	#NT_386_IOPERM
 0x201

	)

788 
	#NT_X86_XSTATE
 0x202

	)

789 
	#NT_S390_HIGH_GPRS
 0x300

	)

790 
	#NT_S390_TIMER
 0x301

	)

791 
	#NT_S390_TODCMP
 0x302

	)

792 
	#NT_S390_TODPREG
 0x303

	)

793 
	#NT_S390_CTRS
 0x304

	)

794 
	#NT_S390_PREFIX
 0x305

	)

795 
	#NT_S390_LAST_BREAK
 0x306

	)

796 
	#NT_S390_SYSTEM_CALL
 0x307

	)

797 
	#NT_S390_TDB
 0x308

	)

798 
	#NT_S390_VXRS_LOW
 0x309

	)

800 
	#NT_S390_VXRS_HIGH
 0x30®

	)

801 
	#NT_S390_GS_CB
 0x30b

	)

802 
	#NT_S390_GS_BC
 0x30¯

	)

804 
	#NT_S390_RI_CB
 0x30d

	)

805 
	#NT_ARM_VFP
 0x400

	)

806 
	#NT_ARM_TLS
 0x401

	)

807 
	#NT_ARM_HW_BREAK
 0x402

	)

808 
	#NT_ARM_HW_WATCH
 0x403

	)

809 
	#NT_ARM_SYSTEM_CALL
 0x404

	)

810 
	#NT_ARM_SVE
 0x405

	)

812 
	#NT_ARM_PAC_MASK
 0x406

	)

814 
	#NT_ARM_PACA_KEYS
 0x407

	)

816 
	#NT_ARM_PACG_KEYS
 0x408

	)

818 
	#NT_VMCOREDD
 0x700

	)

819 
	#NT_MIPS_DSP
 0x800

	)

820 
	#NT_MIPS_FP_MODE
 0x801

	)

821 
	#NT_MIPS_MSA
 0x802

	)

825 
	#NT_VERSION
 1

	)

832 
Elf32_Sw‹d
 
	md_èg
;

835 
Elf32_W‹d
 
	md_vÆ
;

836 
Elf32_Addr
 
	md_±r
;

837 } 
	md_un
;

838 } 
	tElf32_Dyn
;

842 
Elf64_Sxw‹d
 
	md_èg
;

845 
Elf64_Xw‹d
 
	md_vÆ
;

846 
Elf64_Addr
 
	md_±r
;

847 } 
	md_un
;

848 } 
	tElf64_Dyn
;

852 
	#DT_NULL
 0

	)

853 
	#DT_NEEDED
 1

	)

854 
	#DT_PLTRELSZ
 2

	)

855 
	#DT_PLTGOT
 3

	)

856 
	#DT_HASH
 4

	)

857 
	#DT_STRTAB
 5

	)

858 
	#DT_SYMTAB
 6

	)

859 
	#DT_RELA
 7

	)

860 
	#DT_RELASZ
 8

	)

861 
	#DT_RELAENT
 9

	)

862 
	#DT_STRSZ
 10

	)

863 
	#DT_SYMENT
 11

	)

864 
	#DT_INIT
 12

	)

865 
	#DT_FINI
 13

	)

866 
	#DT_SONAME
 14

	)

867 
	#DT_RPATH
 15

	)

868 
	#DT_SYMBOLIC
 16

	)

869 
	#DT_REL
 17

	)

870 
	#DT_RELSZ
 18

	)

871 
	#DT_RELENT
 19

	)

872 
	#DT_PLTREL
 20

	)

873 
	#DT_DEBUG
 21

	)

874 
	#DT_TEXTREL
 22

	)

875 
	#DT_JMPREL
 23

	)

876 
	#DT_BIND_NOW
 24

	)

877 
	#DT_INIT_ARRAY
 25

	)

878 
	#DT_FINI_ARRAY
 26

	)

879 
	#DT_INIT_ARRAYSZ
 27

	)

880 
	#DT_FINI_ARRAYSZ
 28

	)

881 
	#DT_RUNPATH
 29

	)

882 
	#DT_FLAGS
 30

	)

883 
	#DT_ENCODING
 32

	)

884 
	#DT_PREINIT_ARRAY
 32

	)

885 
	#DT_PREINIT_ARRAYSZ
 33

	)

886 
	#DT_SYMTAB_SHNDX
 34

	)

887 
	#DT_NUM
 35

	)

888 
	#DT_LOOS
 0x6000000d

	)

889 
	#DT_HIOS
 0x6ffff000

	)

890 
	#DT_LOPROC
 0x70000000

	)

891 
	#DT_HIPROC
 0x7ffffff‡

	)

892 
	#DT_PROCNUM
 
DT_MIPS_NUM


	)

897 
	#DT_VALRNGLO
 0x6ffffd00

	)

898 
	#DT_GNU_PRELINKED
 0x6ffffdf5

	)

899 
	#DT_GNU_CONFLICTSZ
 0x6ffffdf6

	)

900 
	#DT_GNU_LIBLISTSZ
 0x6ffffdf7

	)

901 
	#DT_CHECKSUM
 0x6ffffdf8

	)

902 
	#DT_PLTPADSZ
 0x6ffffdf9

	)

903 
	#DT_MOVEENT
 0x6ffffdÁ

	)

904 
	#DT_MOVESZ
 0x6ffffdfb

	)

905 
	#DT_FEATURE_1
 0x6ffffdf¯

	)

906 
	#DT_POSFLAG_1
 0x6ffffdfd

	)

908 
	#DT_SYMINSZ
 0x6ffffd„

	)

909 
	#DT_SYMINENT
 0x6ffffdf‡

	)

910 
	#DT_VALRNGHI
 0x6ffffdff

	)

911 
	#DT_VALTAGIDX
(
èg
Ë(
DT_VALRNGHI
 - (èg)Ë

	)

912 
	#DT_VALNUM
 12

	)

919 
	#DT_ADDRRNGLO
 0x6fff„00

	)

920 
	#DT_GNU_HASH
 0x6fff„f5

	)

921 
	#DT_TLSDESC_PLT
 0x6fff„f6

	)

922 
	#DT_TLSDESC_GOT
 0x6fff„f7

	)

923 
	#DT_GNU_CONFLICT
 0x6fff„f8

	)

924 
	#DT_GNU_LIBLIST
 0x6fff„f9

	)

925 
	#DT_CONFIG
 0x6fff„Á

	)

926 
	#DT_DEPAUDIT
 0x6fff„fb

	)

927 
	#DT_AUDIT
 0x6fff„f¯

	)

928 
	#DT_PLTPAD
 0x6fff„fd

	)

929 
	#DT_MOVETAB
 0x6fff„„

	)

930 
	#DT_SYMINFO
 0x6fff„f‡

	)

931 
	#DT_ADDRRNGHI
 0x6fff„ff

	)

932 
	#DT_ADDRTAGIDX
(
èg
Ë(
DT_ADDRRNGHI
 - (èg)Ë

	)

933 
	#DT_ADDRNUM
 11

	)

937 
	#DT_VERSYM
 0x6ffffff0

	)

939 
	#DT_RELACOUNT
 0x6ffffff9

	)

940 
	#DT_RELCOUNT
 0x6fffffÁ

	)

943 
	#DT_FLAGS_1
 0x6ffffffb

	)

944 
	#DT_VERDEF
 0x6ffffff¯

	)

946 
	#DT_VERDEFNUM
 0x6ffffffd

	)

947 
	#DT_VERNEED
 0x6fffff„

	)

949 
	#DT_VERNEEDNUM
 0x6ffffff‡

	)

950 
	#DT_VERSIONTAGIDX
(
èg
Ë(
DT_VERNEEDNUM
 - (èg)Ë

	)

951 
	#DT_VERSIONTAGNUM
 16

	)

955 
	#DT_AUXILIARY
 0x7ffffffd

	)

956 
	#DT_FILTER
 0x7ffffff‡

	)

957 
	#DT_EXTRATAGIDX
(
èg
Ë((
Elf32_W‹d
)-((
Elf32_Sw‹d
Ë—agË<<1>>1)-1)

	)

958 
	#DT_EXTRANUM
 3

	)

961 
	#DF_ORIGIN
 0x00000001

	)

962 
	#DF_SYMBOLIC
 0x00000002

	)

963 
	#DF_TEXTREL
 0x00000004

	)

964 
	#DF_BIND_NOW
 0x00000008

	)

965 
	#DF_STATIC_TLS
 0x00000010

	)

969 
	#DF_1_NOW
 0x00000001

	)

970 
	#DF_1_GLOBAL
 0x00000002

	)

971 
	#DF_1_GROUP
 0x00000004

	)

972 
	#DF_1_NODELETE
 0x00000008

	)

973 
	#DF_1_LOADFLTR
 0x00000010

	)

974 
	#DF_1_INITFIRST
 0x00000020

	)

975 
	#DF_1_NOOPEN
 0x00000040

	)

976 
	#DF_1_ORIGIN
 0x00000080

	)

977 
	#DF_1_DIRECT
 0x00000100

	)

978 
	#DF_1_TRANS
 0x00000200

	)

979 
	#DF_1_INTERPOSE
 0x00000400

	)

980 
	#DF_1_NODEFLIB
 0x00000800

	)

981 
	#DF_1_NODUMP
 0x00001000

	)

982 
	#DF_1_CONFALT
 0x00002000

	)

983 
	#DF_1_ENDFILTEE
 0x00004000

	)

984 
	#DF_1_DISPRELDNE
 0x00008000

	)

985 
	#DF_1_DISPRELPND
 0x00010000

	)

986 
	#DF_1_NODIRECT
 0x00020000

	)

987 
	#DF_1_IGNMULDEF
 0x00040000

	)

988 
	#DF_1_NOKSYMS
 0x00080000

	)

989 
	#DF_1_NOHDR
 0x00100000

	)

990 
	#DF_1_EDITED
 0x00200000

	)

991 
	#DF_1_NORELOC
 0x00400000

	)

992 
	#DF_1_SYMINTPOSE
 0x00800000

	)

993 
	#DF_1_GLOBAUDIT
 0x01000000

	)

994 
	#DF_1_SINGLETON
 0x02000000

	)

995 
	#DF_1_STUB
 0x04000000

	)

996 
	#DF_1_PIE
 0x08000000

	)

997 
	#DF_1_KMOD
 0x10000000

	)

998 
	#DF_1_WEAKFILTER
 0x20000000

	)

999 
	#DF_1_NOCOMMON
 0x40000000

	)

1002 
	#DTF_1_PARINIT
 0x00000001

	)

1003 
	#DTF_1_CONFEXP
 0x00000002

	)

1006 
	#DF_P1_LAZYLOAD
 0x00000001

	)

1007 
	#DF_P1_GROUPPERM
 0x00000002

	)

1014 
Elf32_HÆf
 
	mvd_vîsi⁄
;

1015 
Elf32_HÆf
 
	mvd_Êags
;

1016 
Elf32_HÆf
 
	mvd_ndx
;

1017 
Elf32_HÆf
 
	mvd_˙t
;

1018 
Elf32_W‹d
 
	mvd_hash
;

1019 
Elf32_W‹d
 
	mvd_aux
;

1020 
Elf32_W‹d
 
	mvd_√xt
;

1022 } 
	tElf32_Vîdef
;

1026 
Elf64_HÆf
 
	mvd_vîsi⁄
;

1027 
Elf64_HÆf
 
	mvd_Êags
;

1028 
Elf64_HÆf
 
	mvd_ndx
;

1029 
Elf64_HÆf
 
	mvd_˙t
;

1030 
Elf64_W‹d
 
	mvd_hash
;

1031 
Elf64_W‹d
 
	mvd_aux
;

1032 
Elf64_W‹d
 
	mvd_√xt
;

1034 } 
	tElf64_Vîdef
;

1038 
	#VER_DEF_NONE
 0

	)

1039 
	#VER_DEF_CURRENT
 1

	)

1040 
	#VER_DEF_NUM
 2

	)

1043 
	#VER_FLG_BASE
 0x1

	)

1044 
	#VER_FLG_WEAK
 0x2

	)

1047 
	#VER_NDX_LOCAL
 0

	)

1048 
	#VER_NDX_GLOBAL
 1

	)

1049 
	#VER_NDX_LORESERVE
 0xff00

	)

1050 
	#VER_NDX_ELIMINATE
 0xff01

	)

1056 
Elf32_W‹d
 
	mvda_«me
;

1057 
Elf32_W‹d
 
	mvda_√xt
;

1059 } 
	tElf32_Vîdaux
;

1063 
Elf64_W‹d
 
	mvda_«me
;

1064 
Elf64_W‹d
 
	mvda_√xt
;

1066 } 
	tElf64_Vîdaux
;

1073 
Elf32_HÆf
 
	mvn_vîsi⁄
;

1074 
Elf32_HÆf
 
	mvn_˙t
;

1075 
Elf32_W‹d
 
	mvn_fûe
;

1077 
Elf32_W‹d
 
	mvn_aux
;

1078 
Elf32_W‹d
 
	mvn_√xt
;

1080 } 
	tElf32_Vî√ed
;

1084 
Elf64_HÆf
 
	mvn_vîsi⁄
;

1085 
Elf64_HÆf
 
	mvn_˙t
;

1086 
Elf64_W‹d
 
	mvn_fûe
;

1088 
Elf64_W‹d
 
	mvn_aux
;

1089 
Elf64_W‹d
 
	mvn_√xt
;

1091 } 
	tElf64_Vî√ed
;

1095 
	#VER_NEED_NONE
 0

	)

1096 
	#VER_NEED_CURRENT
 1

	)

1097 
	#VER_NEED_NUM
 2

	)

1103 
Elf32_W‹d
 
	mv«_hash
;

1104 
Elf32_HÆf
 
	mv«_Êags
;

1105 
Elf32_HÆf
 
	mv«_Ÿhî
;

1106 
Elf32_W‹d
 
	mv«_«me
;

1107 
Elf32_W‹d
 
	mv«_√xt
;

1109 } 
	tElf32_Vî«ux
;

1113 
Elf64_W‹d
 
	mv«_hash
;

1114 
Elf64_HÆf
 
	mv«_Êags
;

1115 
Elf64_HÆf
 
	mv«_Ÿhî
;

1116 
Elf64_W‹d
 
	mv«_«me
;

1117 
Elf64_W‹d
 
	mv«_√xt
;

1119 } 
	tElf64_Vî«ux
;

1123 
	#VER_FLG_WEAK
 0x2

	)

1137 
uöt32_t
 
	ma_ty≥
;

1140 
uöt32_t
 
	ma_vÆ
;

1144 } 
	ma_un
;

1145 } 
	tElf32_auxv_t
;

1149 
uöt64_t
 
	ma_ty≥
;

1152 
uöt64_t
 
	ma_vÆ
;

1156 } 
	ma_un
;

1157 } 
	tElf64_auxv_t
;

1159 
	~<bôs/auxv.h
>

1165 
Elf32_W‹d
 
	mn_«mesz
;

1166 
Elf32_W‹d
 
	mn_descsz
;

1167 
Elf32_W‹d
 
	mn_ty≥
;

1168 } 
	tElf32_Nhdr
;

1172 
Elf64_W‹d
 
	mn_«mesz
;

1173 
Elf64_W‹d
 
	mn_descsz
;

1174 
Elf64_W‹d
 
	mn_ty≥
;

1175 } 
	tElf64_Nhdr
;

1180 
	#ELF_NOTE_SOLARIS
 "SUNW Sﬁ¨is"

	)

1183 
	#ELF_NOTE_GNU
 "GNU"

	)

1189 
	#ELF_NOTE_PAGESIZE_HINT
 1

	)

1200 
	#NT_GNU_ABI_TAG
 1

	)

1201 
	#ELF_NOTE_ABI
 
NT_GNU_ABI_TAG


	)

1205 
	#ELF_NOTE_OS_LINUX
 0

	)

1206 
	#ELF_NOTE_OS_GNU
 1

	)

1207 
	#ELF_NOTE_OS_SOLARIS2
 2

	)

1208 
	#ELF_NOTE_OS_FREEBSD
 3

	)

1216 
	#NT_GNU_HWCAP
 2

	)

1220 
	#NT_GNU_BUILD_ID
 3

	)

1223 
	#NT_GNU_GOLD_VERSION
 4

	)

1226 
	#NT_GNU_PROPERTY_TYPE_0
 5

	)

1229 
	#NOTE_GNU_PROPERTY_SECTION_NAME
 ".nŸe.gnu.¥›îty"

	)

1234 
	#GNU_PROPERTY_STACK_SIZE
 1

	)

1236 
	#GNU_PROPERTY_NO_COPY_ON_PROTECTED
 2

	)

1239 
	#GNU_PROPERTY_LOPROC
 0xc0000000

	)

1241 
	#GNU_PROPERTY_HIPROC
 0xdfffffff

	)

1243 
	#GNU_PROPERTY_LOUSER
 0xe0000000

	)

1245 
	#GNU_PROPERTY_HIUSER
 0xffffffff

	)

1249 
	#GNU_PROPERTY_X86_ISA_1_USED
 0xc0000000

	)

1252 
	#GNU_PROPERTY_X86_ISA_1_NEEDED
 0xc0000001

	)

1254 
	#GNU_PROPERTY_X86_FEATURE_1_AND
 0xc0000002

	)

1256 
	#GNU_PROPERTY_X86_ISA_1_486
 (1U << 0)

	)

1257 
	#GNU_PROPERTY_X86_ISA_1_586
 (1U << 1)

	)

1258 
	#GNU_PROPERTY_X86_ISA_1_686
 (1U << 2)

	)

1259 
	#GNU_PROPERTY_X86_ISA_1_SSE
 (1U << 3)

	)

1260 
	#GNU_PROPERTY_X86_ISA_1_SSE2
 (1U << 4)

	)

1261 
	#GNU_PROPERTY_X86_ISA_1_SSE3
 (1U << 5)

	)

1262 
	#GNU_PROPERTY_X86_ISA_1_SSSE3
 (1U << 6)

	)

1263 
	#GNU_PROPERTY_X86_ISA_1_SSE4_1
 (1U << 7)

	)

1264 
	#GNU_PROPERTY_X86_ISA_1_SSE4_2
 (1U << 8)

	)

1265 
	#GNU_PROPERTY_X86_ISA_1_AVX
 (1U << 9)

	)

1266 
	#GNU_PROPERTY_X86_ISA_1_AVX2
 (1U << 10)

	)

1267 
	#GNU_PROPERTY_X86_ISA_1_AVX512F
 (1U << 11)

	)

1268 
	#GNU_PROPERTY_X86_ISA_1_AVX512CD
 (1U << 12)

	)

1269 
	#GNU_PROPERTY_X86_ISA_1_AVX512ER
 (1U << 13)

	)

1270 
	#GNU_PROPERTY_X86_ISA_1_AVX512PF
 (1U << 14)

	)

1271 
	#GNU_PROPERTY_X86_ISA_1_AVX512VL
 (1U << 15)

	)

1272 
	#GNU_PROPERTY_X86_ISA_1_AVX512DQ
 (1U << 16)

	)

1273 
	#GNU_PROPERTY_X86_ISA_1_AVX512BW
 (1U << 17)

	)

1277 
	#GNU_PROPERTY_X86_FEATURE_1_IBT
 (1U << 0)

	)

1280 
	#GNU_PROPERTY_X86_FEATURE_1_SHSTK
 (1U << 1)

	)

1285 
Elf32_Xw‹d
 
	mm_vÆue
;

1286 
Elf32_W‹d
 
	mm_öfo
;

1287 
Elf32_W‹d
 
	mm_poff£t
;

1288 
Elf32_HÆf
 
	mm_ª≥©
;

1289 
Elf32_HÆf
 
	mm_°ride
;

1290 } 
	tElf32_Move
;

1294 
Elf64_Xw‹d
 
	mm_vÆue
;

1295 
Elf64_Xw‹d
 
	mm_öfo
;

1296 
Elf64_Xw‹d
 
	mm_poff£t
;

1297 
Elf64_HÆf
 
	mm_ª≥©
;

1298 
Elf64_HÆf
 
	mm_°ride
;

1299 } 
	tElf64_Move
;

1302 
	#ELF32_M_SYM
(
öfo
Ë((öfoË>> 8)

	)

1303 
	#ELF32_M_SIZE
(
öfo
Ë((Ë(öfo))

	)

1304 
	#ELF32_M_INFO
(
sym
, 
size
Ë(((symË<< 8Ë+ (Ë(size))

	)

1306 
	#ELF64_M_SYM
(
öfo
Ë
	`ELF32_M_SYM
 (öfo)

	)

1307 
	#ELF64_M_SIZE
(
öfo
Ë
	`ELF32_M_SIZE
 (öfo)

	)

1308 
	#ELF64_M_INFO
(
sym
, 
size
Ë
	`ELF32_M_INFO
 (sym, size)

	)

1314 
	#EF_CPU32
 0x00810000

	)

1318 
	#R_68K_NONE
 0

	)

1319 
	#R_68K_32
 1

	)

1320 
	#R_68K_16
 2

	)

1321 
	#R_68K_8
 3

	)

1322 
	#R_68K_PC32
 4

	)

1323 
	#R_68K_PC16
 5

	)

1324 
	#R_68K_PC8
 6

	)

1325 
	#R_68K_GOT32
 7

	)

1326 
	#R_68K_GOT16
 8

	)

1327 
	#R_68K_GOT8
 9

	)

1328 
	#R_68K_GOT32O
 10

	)

1329 
	#R_68K_GOT16O
 11

	)

1330 
	#R_68K_GOT8O
 12

	)

1331 
	#R_68K_PLT32
 13

	)

1332 
	#R_68K_PLT16
 14

	)

1333 
	#R_68K_PLT8
 15

	)

1334 
	#R_68K_PLT32O
 16

	)

1335 
	#R_68K_PLT16O
 17

	)

1336 
	#R_68K_PLT8O
 18

	)

1337 
	#R_68K_COPY
 19

	)

1338 
	#R_68K_GLOB_DAT
 20

	)

1339 
	#R_68K_JMP_SLOT
 21

	)

1340 
	#R_68K_RELATIVE
 22

	)

1341 
	#R_68K_TLS_GD32
 25

	)

1342 
	#R_68K_TLS_GD16
 26

	)

1343 
	#R_68K_TLS_GD8
 27

	)

1344 
	#R_68K_TLS_LDM32
 28

	)

1345 
	#R_68K_TLS_LDM16
 29

	)

1346 
	#R_68K_TLS_LDM8
 30

	)

1347 
	#R_68K_TLS_LDO32
 31

	)

1348 
	#R_68K_TLS_LDO16
 32

	)

1349 
	#R_68K_TLS_LDO8
 33

	)

1350 
	#R_68K_TLS_IE32
 34

	)

1351 
	#R_68K_TLS_IE16
 35

	)

1352 
	#R_68K_TLS_IE8
 36

	)

1353 
	#R_68K_TLS_LE32
 37

	)

1355 
	#R_68K_TLS_LE16
 38

	)

1357 
	#R_68K_TLS_LE8
 39

	)

1359 
	#R_68K_TLS_DTPMOD32
 40

	)

1360 
	#R_68K_TLS_DTPREL32
 41

	)

1361 
	#R_68K_TLS_TPREL32
 42

	)

1363 
	#R_68K_NUM
 43

	)

1369 
	#R_386_NONE
 0

	)

1370 
	#R_386_32
 1

	)

1371 
	#R_386_PC32
 2

	)

1372 
	#R_386_GOT32
 3

	)

1373 
	#R_386_PLT32
 4

	)

1374 
	#R_386_COPY
 5

	)

1375 
	#R_386_GLOB_DAT
 6

	)

1376 
	#R_386_JMP_SLOT
 7

	)

1377 
	#R_386_RELATIVE
 8

	)

1378 
	#R_386_GOTOFF
 9

	)

1379 
	#R_386_GOTPC
 10

	)

1380 
	#R_386_32PLT
 11

	)

1381 
	#R_386_TLS_TPOFF
 14

	)

1382 
	#R_386_TLS_IE
 15

	)

1384 
	#R_386_TLS_GOTIE
 16

	)

1386 
	#R_386_TLS_LE
 17

	)

1388 
	#R_386_TLS_GD
 18

	)

1390 
	#R_386_TLS_LDM
 19

	)

1393 
	#R_386_16
 20

	)

1394 
	#R_386_PC16
 21

	)

1395 
	#R_386_8
 22

	)

1396 
	#R_386_PC8
 23

	)

1397 
	#R_386_TLS_GD_32
 24

	)

1399 
	#R_386_TLS_GD_PUSH
 25

	)

1400 
	#R_386_TLS_GD_CALL
 26

	)

1402 
	#R_386_TLS_GD_POP
 27

	)

1403 
	#R_386_TLS_LDM_32
 28

	)

1405 
	#R_386_TLS_LDM_PUSH
 29

	)

1406 
	#R_386_TLS_LDM_CALL
 30

	)

1408 
	#R_386_TLS_LDM_POP
 31

	)

1409 
	#R_386_TLS_LDO_32
 32

	)

1410 
	#R_386_TLS_IE_32
 33

	)

1412 
	#R_386_TLS_LE_32
 34

	)

1414 
	#R_386_TLS_DTPMOD32
 35

	)

1415 
	#R_386_TLS_DTPOFF32
 36

	)

1416 
	#R_386_TLS_TPOFF32
 37

	)

1417 
	#R_386_SIZE32
 38

	)

1418 
	#R_386_TLS_GOTDESC
 39

	)

1419 
	#R_386_TLS_DESC_CALL
 40

	)

1422 
	#R_386_TLS_DESC
 41

	)

1426 
	#R_386_IRELATIVE
 42

	)

1427 
	#R_386_GOT32X
 43

	)

1430 
	#R_386_NUM
 44

	)

1436 
	#STT_SPARC_REGISTER
 13

	)

1440 
	#EF_SPARCV9_MM
 3

	)

1441 
	#EF_SPARCV9_TSO
 0

	)

1442 
	#EF_SPARCV9_PSO
 1

	)

1443 
	#EF_SPARCV9_RMO
 2

	)

1444 
	#EF_SPARC_LEDATA
 0x800000

	)

1445 
	#EF_SPARC_EXT_MASK
 0xFFFF00

	)

1446 
	#EF_SPARC_32PLUS
 0x000100

	)

1447 
	#EF_SPARC_SUN_US1
 0x000200

	)

1448 
	#EF_SPARC_HAL_R1
 0x000400

	)

1449 
	#EF_SPARC_SUN_US3
 0x000800

	)

1453 
	#R_SPARC_NONE
 0

	)

1454 
	#R_SPARC_8
 1

	)

1455 
	#R_SPARC_16
 2

	)

1456 
	#R_SPARC_32
 3

	)

1457 
	#R_SPARC_DISP8
 4

	)

1458 
	#R_SPARC_DISP16
 5

	)

1459 
	#R_SPARC_DISP32
 6

	)

1460 
	#R_SPARC_WDISP30
 7

	)

1461 
	#R_SPARC_WDISP22
 8

	)

1462 
	#R_SPARC_HI22
 9

	)

1463 
	#R_SPARC_22
 10

	)

1464 
	#R_SPARC_13
 11

	)

1465 
	#R_SPARC_LO10
 12

	)

1466 
	#R_SPARC_GOT10
 13

	)

1467 
	#R_SPARC_GOT13
 14

	)

1468 
	#R_SPARC_GOT22
 15

	)

1469 
	#R_SPARC_PC10
 16

	)

1470 
	#R_SPARC_PC22
 17

	)

1471 
	#R_SPARC_WPLT30
 18

	)

1472 
	#R_SPARC_COPY
 19

	)

1473 
	#R_SPARC_GLOB_DAT
 20

	)

1474 
	#R_SPARC_JMP_SLOT
 21

	)

1475 
	#R_SPARC_RELATIVE
 22

	)

1476 
	#R_SPARC_UA32
 23

	)

1480 
	#R_SPARC_PLT32
 24

	)

1481 
	#R_SPARC_HIPLT22
 25

	)

1482 
	#R_SPARC_LOPLT10
 26

	)

1483 
	#R_SPARC_PCPLT32
 27

	)

1484 
	#R_SPARC_PCPLT22
 28

	)

1485 
	#R_SPARC_PCPLT10
 29

	)

1486 
	#R_SPARC_10
 30

	)

1487 
	#R_SPARC_11
 31

	)

1488 
	#R_SPARC_64
 32

	)

1489 
	#R_SPARC_OLO10
 33

	)

1490 
	#R_SPARC_HH22
 34

	)

1491 
	#R_SPARC_HM10
 35

	)

1492 
	#R_SPARC_LM22
 36

	)

1493 
	#R_SPARC_PC_HH22
 37

	)

1494 
	#R_SPARC_PC_HM10
 38

	)

1495 
	#R_SPARC_PC_LM22
 39

	)

1496 
	#R_SPARC_WDISP16
 40

	)

1497 
	#R_SPARC_WDISP19
 41

	)

1498 
	#R_SPARC_GLOB_JMP
 42

	)

1499 
	#R_SPARC_7
 43

	)

1500 
	#R_SPARC_5
 44

	)

1501 
	#R_SPARC_6
 45

	)

1502 
	#R_SPARC_DISP64
 46

	)

1503 
	#R_SPARC_PLT64
 47

	)

1504 
	#R_SPARC_HIX22
 48

	)

1505 
	#R_SPARC_LOX10
 49

	)

1506 
	#R_SPARC_H44
 50

	)

1507 
	#R_SPARC_M44
 51

	)

1508 
	#R_SPARC_L44
 52

	)

1509 
	#R_SPARC_REGISTER
 53

	)

1510 
	#R_SPARC_UA64
 54

	)

1511 
	#R_SPARC_UA16
 55

	)

1512 
	#R_SPARC_TLS_GD_HI22
 56

	)

1513 
	#R_SPARC_TLS_GD_LO10
 57

	)

1514 
	#R_SPARC_TLS_GD_ADD
 58

	)

1515 
	#R_SPARC_TLS_GD_CALL
 59

	)

1516 
	#R_SPARC_TLS_LDM_HI22
 60

	)

1517 
	#R_SPARC_TLS_LDM_LO10
 61

	)

1518 
	#R_SPARC_TLS_LDM_ADD
 62

	)

1519 
	#R_SPARC_TLS_LDM_CALL
 63

	)

1520 
	#R_SPARC_TLS_LDO_HIX22
 64

	)

1521 
	#R_SPARC_TLS_LDO_LOX10
 65

	)

1522 
	#R_SPARC_TLS_LDO_ADD
 66

	)

1523 
	#R_SPARC_TLS_IE_HI22
 67

	)

1524 
	#R_SPARC_TLS_IE_LO10
 68

	)

1525 
	#R_SPARC_TLS_IE_LD
 69

	)

1526 
	#R_SPARC_TLS_IE_LDX
 70

	)

1527 
	#R_SPARC_TLS_IE_ADD
 71

	)

1528 
	#R_SPARC_TLS_LE_HIX22
 72

	)

1529 
	#R_SPARC_TLS_LE_LOX10
 73

	)

1530 
	#R_SPARC_TLS_DTPMOD32
 74

	)

1531 
	#R_SPARC_TLS_DTPMOD64
 75

	)

1532 
	#R_SPARC_TLS_DTPOFF32
 76

	)

1533 
	#R_SPARC_TLS_DTPOFF64
 77

	)

1534 
	#R_SPARC_TLS_TPOFF32
 78

	)

1535 
	#R_SPARC_TLS_TPOFF64
 79

	)

1536 
	#R_SPARC_GOTDATA_HIX22
 80

	)

1537 
	#R_SPARC_GOTDATA_LOX10
 81

	)

1538 
	#R_SPARC_GOTDATA_OP_HIX22
 82

	)

1539 
	#R_SPARC_GOTDATA_OP_LOX10
 83

	)

1540 
	#R_SPARC_GOTDATA_OP
 84

	)

1541 
	#R_SPARC_H34
 85

	)

1542 
	#R_SPARC_SIZE32
 86

	)

1543 
	#R_SPARC_SIZE64
 87

	)

1544 
	#R_SPARC_WDISP10
 88

	)

1545 
	#R_SPARC_JMP_IREL
 248

	)

1546 
	#R_SPARC_IRELATIVE
 249

	)

1547 
	#R_SPARC_GNU_VTINHERIT
 250

	)

1548 
	#R_SPARC_GNU_VTENTRY
 251

	)

1549 
	#R_SPARC_REV32
 252

	)

1551 
	#R_SPARC_NUM
 253

	)

1555 
	#DT_SPARC_REGISTER
 0x70000001

	)

1556 
	#DT_SPARC_NUM
 2

	)

1562 
	#EF_MIPS_NOREORDER
 1

	)

1563 
	#EF_MIPS_PIC
 2

	)

1564 
	#EF_MIPS_CPIC
 4

	)

1565 
	#EF_MIPS_XGOT
 8

	)

1566 
	#EF_MIPS_64BIT_WHIRL
 16

	)

1567 
	#EF_MIPS_ABI2
 32

	)

1568 
	#EF_MIPS_ABI_ON32
 64

	)

1569 
	#EF_MIPS_FP64
 512

	)

1570 
	#EF_MIPS_NAN2008
 1024

	)

1571 
	#EF_MIPS_ARCH
 0xf0000000

	)

1575 
	#EF_MIPS_ARCH_1
 0x00000000

	)

1576 
	#EF_MIPS_ARCH_2
 0x10000000

	)

1577 
	#EF_MIPS_ARCH_3
 0x20000000

	)

1578 
	#EF_MIPS_ARCH_4
 0x30000000

	)

1579 
	#EF_MIPS_ARCH_5
 0x40000000

	)

1580 
	#EF_MIPS_ARCH_32
 0x50000000

	)

1581 
	#EF_MIPS_ARCH_64
 0x60000000

	)

1582 
	#EF_MIPS_ARCH_32R2
 0x70000000

	)

1583 
	#EF_MIPS_ARCH_64R2
 0x80000000

	)

1587 
	#E_MIPS_ARCH_1
 
EF_MIPS_ARCH_1


	)

1588 
	#E_MIPS_ARCH_2
 
EF_MIPS_ARCH_2


	)

1589 
	#E_MIPS_ARCH_3
 
EF_MIPS_ARCH_3


	)

1590 
	#E_MIPS_ARCH_4
 
EF_MIPS_ARCH_4


	)

1591 
	#E_MIPS_ARCH_5
 
EF_MIPS_ARCH_5


	)

1592 
	#E_MIPS_ARCH_32
 
EF_MIPS_ARCH_32


	)

1593 
	#E_MIPS_ARCH_64
 
EF_MIPS_ARCH_64


	)

1597 
	#SHN_MIPS_ACOMMON
 0xff00

	)

1598 
	#SHN_MIPS_TEXT
 0xff01

	)

1599 
	#SHN_MIPS_DATA
 0xff02

	)

1600 
	#SHN_MIPS_SCOMMON
 0xff03

	)

1601 
	#SHN_MIPS_SUNDEFINED
 0xff04

	)

1605 
	#SHT_MIPS_LIBLIST
 0x70000000

	)

1606 
	#SHT_MIPS_MSYM
 0x70000001

	)

1607 
	#SHT_MIPS_CONFLICT
 0x70000002

	)

1608 
	#SHT_MIPS_GPTAB
 0x70000003

	)

1609 
	#SHT_MIPS_UCODE
 0x70000004

	)

1610 
	#SHT_MIPS_DEBUG
 0x70000005

	)

1611 
	#SHT_MIPS_REGINFO
 0x70000006

	)

1612 
	#SHT_MIPS_PACKAGE
 0x70000007

	)

1613 
	#SHT_MIPS_PACKSYM
 0x70000008

	)

1614 
	#SHT_MIPS_RELD
 0x70000009

	)

1615 
	#SHT_MIPS_IFACE
 0x7000000b

	)

1616 
	#SHT_MIPS_CONTENT
 0x7000000c

	)

1617 
	#SHT_MIPS_OPTIONS
 0x7000000d

	)

1618 
	#SHT_MIPS_SHDR
 0x70000010

	)

1619 
	#SHT_MIPS_FDESC
 0x70000011

	)

1620 
	#SHT_MIPS_EXTSYM
 0x70000012

	)

1621 
	#SHT_MIPS_DENSE
 0x70000013

	)

1622 
	#SHT_MIPS_PDESC
 0x70000014

	)

1623 
	#SHT_MIPS_LOCSYM
 0x70000015

	)

1624 
	#SHT_MIPS_AUXSYM
 0x70000016

	)

1625 
	#SHT_MIPS_OPTSYM
 0x70000017

	)

1626 
	#SHT_MIPS_LOCSTR
 0x70000018

	)

1627 
	#SHT_MIPS_LINE
 0x70000019

	)

1628 
	#SHT_MIPS_RFDESC
 0x7000001a

	)

1629 
	#SHT_MIPS_DELTASYM
 0x7000001b

	)

1630 
	#SHT_MIPS_DELTAINST
 0x7000001c

	)

1631 
	#SHT_MIPS_DELTACLASS
 0x7000001d

	)

1632 
	#SHT_MIPS_DWARF
 0x7000001ê

	)

1633 
	#SHT_MIPS_DELTADECL
 0x7000001f

	)

1634 
	#SHT_MIPS_SYMBOL_LIB
 0x70000020

	)

1635 
	#SHT_MIPS_EVENTS
 0x70000021

	)

1636 
	#SHT_MIPS_TRANSLATE
 0x70000022

	)

1637 
	#SHT_MIPS_PIXIE
 0x70000023

	)

1638 
	#SHT_MIPS_XLATE
 0x70000024

	)

1639 
	#SHT_MIPS_XLATE_DEBUG
 0x70000025

	)

1640 
	#SHT_MIPS_WHIRL
 0x70000026

	)

1641 
	#SHT_MIPS_EH_REGION
 0x70000027

	)

1642 
	#SHT_MIPS_XLATE_OLD
 0x70000028

	)

1643 
	#SHT_MIPS_PDR_EXCEPTION
 0x70000029

	)

1644 
	#SHT_MIPS_XHASH
 0x7000002b

	)

1648 
	#SHF_MIPS_GPREL
 0x10000000

	)

1649 
	#SHF_MIPS_MERGE
 0x20000000

	)

1650 
	#SHF_MIPS_ADDR
 0x40000000

	)

1651 
	#SHF_MIPS_STRINGS
 0x80000000

	)

1652 
	#SHF_MIPS_NOSTRIP
 0x08000000

	)

1653 
	#SHF_MIPS_LOCAL
 0x04000000

	)

1654 
	#SHF_MIPS_NAMES
 0x02000000

	)

1655 
	#SHF_MIPS_NODUPE
 0x01000000

	)

1661 
	#STO_MIPS_DEFAULT
 0x0

	)

1662 
	#STO_MIPS_INTERNAL
 0x1

	)

1663 
	#STO_MIPS_HIDDEN
 0x2

	)

1664 
	#STO_MIPS_PROTECTED
 0x3

	)

1665 
	#STO_MIPS_PLT
 0x8

	)

1666 
	#STO_MIPS_SC_ALIGN_UNUSED
 0xff

	)

1669 
	#STB_MIPS_SPLIT_COMMON
 13

	)

1677 
Elf32_W‹d
 
	mgt_cuºít_g_vÆue
;

1678 
Elf32_W‹d
 
	mgt_unu£d
;

1679 } 
	mgt_hódî
;

1682 
Elf32_W‹d
 
	mgt_g_vÆue
;

1683 
Elf32_W‹d
 
	mgt_byãs
;

1684 } 
	mgt_íåy
;

1685 } 
	tElf32_g±ab
;

1691 
Elf32_W‹d
 
	mri_g¥mask
;

1692 
Elf32_W‹d
 
	mri_˝rmask
[4];

1693 
Elf32_Sw‹d
 
	mri_gp_vÆue
;

1694 } 
	tElf32_RegInfo
;

1700 
	mköd
;

1702 
	msize
;

1703 
Elf32_Se˘i⁄
 
	m£˘i⁄
;

1705 
Elf32_W‹d
 
	möfo
;

1706 } 
	tElf_O±i⁄s
;

1710 
	#ODK_NULL
 0

	)

1711 
	#ODK_REGINFO
 1

	)

1712 
	#ODK_EXCEPTIONS
 2

	)

1713 
	#ODK_PAD
 3

	)

1714 
	#ODK_HWPATCH
 4

	)

1715 
	#ODK_FILL
 5

	)

1716 
	#ODK_TAGS
 6

	)

1717 
	#ODK_HWAND
 7

	)

1718 
	#ODK_HWOR
 8

	)

1722 
	#OEX_FPU_MIN
 0x1‡

	)

1723 
	#OEX_FPU_MAX
 0x1f00

	)

1724 
	#OEX_PAGE0
 0x10000

	)

1725 
	#OEX_SMM
 0x20000

	)

1726 
	#OEX_FPDBUG
 0x40000

	)

1727 
	#OEX_PRECISEFP
 
OEX_FPDBUG


	)

1728 
	#OEX_DISMISS
 0x80000

	)

1730 
	#OEX_FPU_INVAL
 0x10

	)

1731 
	#OEX_FPU_DIV0
 0x08

	)

1732 
	#OEX_FPU_OFLO
 0x04

	)

1733 
	#OEX_FPU_UFLO
 0x02

	)

1734 
	#OEX_FPU_INEX
 0x01

	)

1738 
	#OHW_R4KEOP
 0x1

	)

1739 
	#OHW_R8KPFETCH
 0x2

	)

1740 
	#OHW_R5KEOP
 0x4

	)

1741 
	#OHW_R5KCVTL
 0x8

	)

1743 
	#OPAD_PREFIX
 0x1

	)

1744 
	#OPAD_POSTFIX
 0x2

	)

1745 
	#OPAD_SYMBOL
 0x4

	)

1751 
Elf32_W‹d
 
	mhwp_Êags1
;

1752 
Elf32_W‹d
 
	mhwp_Êags2
;

1753 } 
	tElf_O±i⁄s_Hw
;

1757 
	#OHWA0_R4KEOP_CHECKED
 0x00000001

	)

1758 
	#OHWA1_R4KEOP_CLEAN
 0x00000002

	)

1762 
	#R_MIPS_NONE
 0

	)

1763 
	#R_MIPS_16
 1

	)

1764 
	#R_MIPS_32
 2

	)

1765 
	#R_MIPS_REL32
 3

	)

1766 
	#R_MIPS_26
 4

	)

1767 
	#R_MIPS_HI16
 5

	)

1768 
	#R_MIPS_LO16
 6

	)

1769 
	#R_MIPS_GPREL16
 7

	)

1770 
	#R_MIPS_LITERAL
 8

	)

1771 
	#R_MIPS_GOT16
 9

	)

1772 
	#R_MIPS_PC16
 10

	)

1773 
	#R_MIPS_CALL16
 11

	)

1774 
	#R_MIPS_GPREL32
 12

	)

1776 
	#R_MIPS_SHIFT5
 16

	)

1777 
	#R_MIPS_SHIFT6
 17

	)

1778 
	#R_MIPS_64
 18

	)

1779 
	#R_MIPS_GOT_DISP
 19

	)

1780 
	#R_MIPS_GOT_PAGE
 20

	)

1781 
	#R_MIPS_GOT_OFST
 21

	)

1782 
	#R_MIPS_GOT_HI16
 22

	)

1783 
	#R_MIPS_GOT_LO16
 23

	)

1784 
	#R_MIPS_SUB
 24

	)

1785 
	#R_MIPS_INSERT_A
 25

	)

1786 
	#R_MIPS_INSERT_B
 26

	)

1787 
	#R_MIPS_DELETE
 27

	)

1788 
	#R_MIPS_HIGHER
 28

	)

1789 
	#R_MIPS_HIGHEST
 29

	)

1790 
	#R_MIPS_CALL_HI16
 30

	)

1791 
	#R_MIPS_CALL_LO16
 31

	)

1792 
	#R_MIPS_SCN_DISP
 32

	)

1793 
	#R_MIPS_REL16
 33

	)

1794 
	#R_MIPS_ADD_IMMEDIATE
 34

	)

1795 
	#R_MIPS_PJUMP
 35

	)

1796 
	#R_MIPS_RELGOT
 36

	)

1797 
	#R_MIPS_JALR
 37

	)

1798 
	#R_MIPS_TLS_DTPMOD32
 38

	)

1799 
	#R_MIPS_TLS_DTPREL32
 39

	)

1800 
	#R_MIPS_TLS_DTPMOD64
 40

	)

1801 
	#R_MIPS_TLS_DTPREL64
 41

	)

1802 
	#R_MIPS_TLS_GD
 42

	)

1803 
	#R_MIPS_TLS_LDM
 43

	)

1804 
	#R_MIPS_TLS_DTPREL_HI16
 44

	)

1805 
	#R_MIPS_TLS_DTPREL_LO16
 45

	)

1806 
	#R_MIPS_TLS_GOTTPREL
 46

	)

1807 
	#R_MIPS_TLS_TPREL32
 47

	)

1808 
	#R_MIPS_TLS_TPREL64
 48

	)

1809 
	#R_MIPS_TLS_TPREL_HI16
 49

	)

1810 
	#R_MIPS_TLS_TPREL_LO16
 50

	)

1811 
	#R_MIPS_GLOB_DAT
 51

	)

1812 
	#R_MIPS_COPY
 126

	)

1813 
	#R_MIPS_JUMP_SLOT
 127

	)

1815 
	#R_MIPS_NUM
 128

	)

1819 
	#PT_MIPS_REGINFO
 0x70000000

	)

1820 
	#PT_MIPS_RTPROC
 0x70000001

	)

1821 
	#PT_MIPS_OPTIONS
 0x70000002

	)

1822 
	#PT_MIPS_ABIFLAGS
 0x70000003

	)

1826 
	#PF_MIPS_LOCAL
 0x10000000

	)

1830 
	#DT_MIPS_RLD_VERSION
 0x70000001

	)

1831 
	#DT_MIPS_TIME_STAMP
 0x70000002

	)

1832 
	#DT_MIPS_ICHECKSUM
 0x70000003

	)

1833 
	#DT_MIPS_IVERSION
 0x70000004

	)

1834 
	#DT_MIPS_FLAGS
 0x70000005

	)

1835 
	#DT_MIPS_BASE_ADDRESS
 0x70000006

	)

1836 
	#DT_MIPS_MSYM
 0x70000007

	)

1837 
	#DT_MIPS_CONFLICT
 0x70000008

	)

1838 
	#DT_MIPS_LIBLIST
 0x70000009

	)

1839 
	#DT_MIPS_LOCAL_GOTNO
 0x7000000®

	)

1840 
	#DT_MIPS_CONFLICTNO
 0x7000000b

	)

1841 
	#DT_MIPS_LIBLISTNO
 0x70000010

	)

1842 
	#DT_MIPS_SYMTABNO
 0x70000011

	)

1843 
	#DT_MIPS_UNREFEXTNO
 0x70000012

	)

1844 
	#DT_MIPS_GOTSYM
 0x70000013

	)

1845 
	#DT_MIPS_HIPAGENO
 0x70000014

	)

1846 
	#DT_MIPS_RLD_MAP
 0x70000016

	)

1847 
	#DT_MIPS_DELTA_CLASS
 0x70000017

	)

1848 
	#DT_MIPS_DELTA_CLASS_NO
 0x70000018

	)

1850 
	#DT_MIPS_DELTA_INSTANCE
 0x70000019

	)

1851 
	#DT_MIPS_DELTA_INSTANCE_NO
 0x7000001®

	)

1853 
	#DT_MIPS_DELTA_RELOC
 0x7000001b

	)

1854 
	#DT_MIPS_DELTA_RELOC_NO
 0x7000001¯

	)

1856 
	#DT_MIPS_DELTA_SYM
 0x7000001d

	)

1858 
	#DT_MIPS_DELTA_SYM_NO
 0x7000001ê

	)

1860 
	#DT_MIPS_DELTA_CLASSSYM
 0x70000020

	)

1862 
	#DT_MIPS_DELTA_CLASSSYM_NO
 0x70000021

	)

1864 
	#DT_MIPS_CXX_FLAGS
 0x70000022

	)

1865 
	#DT_MIPS_PIXIE_INIT
 0x70000023

	)

1866 
	#DT_MIPS_SYMBOL_LIB
 0x70000024

	)

1867 
	#DT_MIPS_LOCALPAGE_GOTIDX
 0x70000025

	)

1868 
	#DT_MIPS_LOCAL_GOTIDX
 0x70000026

	)

1869 
	#DT_MIPS_HIDDEN_GOTIDX
 0x70000027

	)

1870 
	#DT_MIPS_PROTECTED_GOTIDX
 0x70000028

	)

1871 
	#DT_MIPS_OPTIONS
 0x70000029

	)

1872 
	#DT_MIPS_INTERFACE
 0x7000002®

	)

1873 
	#DT_MIPS_DYNSTR_ALIGN
 0x7000002b

	)

1874 
	#DT_MIPS_INTERFACE_SIZE
 0x7000002¯

	)

1875 
	#DT_MIPS_RLD_TEXT_RESOLVE_ADDR
 0x7000002d

	)

1877 
	#DT_MIPS_PERF_SUFFIX
 0x7000002ê

	)

1879 
	#DT_MIPS_COMPACT_SIZE
 0x7000002‡

	)

1880 
	#DT_MIPS_GP_VALUE
 0x70000030

	)

1881 
	#DT_MIPS_AUX_DYNAMIC
 0x70000031

	)

1883 
	#DT_MIPS_PLTGOT
 0x70000032

	)

1887 
	#DT_MIPS_RWPLT
 0x70000034

	)

1891 
	#DT_MIPS_RLD_MAP_REL
 0x70000035

	)

1893 
	#DT_MIPS_XHASH
 0x70000036

	)

1894 
	#DT_MIPS_NUM
 0x37

	)

1898 
	#RHF_NONE
 0

	)

1899 
	#RHF_QUICKSTART
 (1 << 0Ë

	)

1900 
	#RHF_NOTPOT
 (1 << 1Ë

	)

1901 
	#RHF_NO_LIBRARY_REPLACEMENT
 (1 << 2Ë

	)

1902 
	#RHF_NO_MOVE
 (1 << 3)

	)

1903 
	#RHF_SGI_ONLY
 (1 << 4)

	)

1904 
	#RHF_GUARANTEE_INIT
 (1 << 5)

	)

1905 
	#RHF_DELTA_C_PLUS_PLUS
 (1 << 6)

	)

1906 
	#RHF_GUARANTEE_START_INIT
 (1 << 7)

	)

1907 
	#RHF_PIXIE
 (1 << 8)

	)

1908 
	#RHF_DEFAULT_DELAY_LOAD
 (1 << 9)

	)

1909 
	#RHF_REQUICKSTART
 (1 << 10)

	)

1910 
	#RHF_REQUICKSTARTED
 (1 << 11)

	)

1911 
	#RHF_CORD
 (1 << 12)

	)

1912 
	#RHF_NO_UNRES_UNDEF
 (1 << 13)

	)

1913 
	#RHF_RLD_ORDER_SAFE
 (1 << 14)

	)

1919 
Elf32_W‹d
 
	ml_«me
;

1920 
Elf32_W‹d
 
	ml_time_°amp
;

1921 
Elf32_W‹d
 
	ml_checksum
;

1922 
Elf32_W‹d
 
	ml_vîsi⁄
;

1923 
Elf32_W‹d
 
	ml_Êags
;

1924 } 
	tElf32_Lib
;

1928 
Elf64_W‹d
 
	ml_«me
;

1929 
Elf64_W‹d
 
	ml_time_°amp
;

1930 
Elf64_W‹d
 
	ml_checksum
;

1931 
Elf64_W‹d
 
	ml_vîsi⁄
;

1932 
Elf64_W‹d
 
	ml_Êags
;

1933 } 
	tElf64_Lib
;

1938 
	#LL_NONE
 0

	)

1939 
	#LL_EXACT_MATCH
 (1 << 0Ë

	)

1940 
	#LL_IGNORE_INT_VER
 (1 << 1Ë

	)

1941 
	#LL_REQUIRE_MINOR
 (1 << 2)

	)

1942 
	#LL_EXPORTS
 (1 << 3)

	)

1943 
	#LL_DELAY_LOAD
 (1 << 4)

	)

1944 
	#LL_DELTA
 (1 << 5)

	)

1948 
Elf32_Addr
 
	tElf32_C⁄Êi˘
;

1953 
Elf32_HÆf
 
	mvîsi⁄
;

1955 
	miß_Àvñ
;

1957 
	miß_ªv
;

1959 
	mg¥_size
;

1961 
	m˝r1_size
;

1963 
	m˝r2_size
;

1965 
	mÂ_abi
;

1967 
Elf32_W‹d
 
	miß_ext
;

1969 
Elf32_W‹d
 
	ma£s
;

1971 
Elf32_W‹d
 
	mÊags1
;

1972 
Elf32_W‹d
 
	mÊags2
;

1973 } 
	tElf_MIPS_ABIFœgs_v0
;

1977 
	#MIPS_AFL_REG_NONE
 0x00

	)

1978 
	#MIPS_AFL_REG_32
 0x01

	)

1979 
	#MIPS_AFL_REG_64
 0x02

	)

1980 
	#MIPS_AFL_REG_128
 0x03

	)

1984 
	#MIPS_AFL_ASE_DSP
 0x00000001

	)

1985 
	#MIPS_AFL_ASE_DSPR2
 0x00000002

	)

1986 
	#MIPS_AFL_ASE_EVA
 0x00000004

	)

1987 
	#MIPS_AFL_ASE_MCU
 0x00000008

	)

1988 
	#MIPS_AFL_ASE_MDMX
 0x00000010

	)

1989 
	#MIPS_AFL_ASE_MIPS3D
 0x00000020

	)

1990 
	#MIPS_AFL_ASE_MT
 0x00000040

	)

1991 
	#MIPS_AFL_ASE_SMARTMIPS
 0x00000080

	)

1992 
	#MIPS_AFL_ASE_VIRT
 0x00000100

	)

1993 
	#MIPS_AFL_ASE_MSA
 0x00000200

	)

1994 
	#MIPS_AFL_ASE_MIPS16
 0x00000400

	)

1995 
	#MIPS_AFL_ASE_MICROMIPS
 0x00000800

	)

1996 
	#MIPS_AFL_ASE_XPA
 0x00001000

	)

1997 
	#MIPS_AFL_ASE_MASK
 0x00001ff‡

	)

2001 
	#MIPS_AFL_EXT_XLR
 1

	)

2002 
	#MIPS_AFL_EXT_OCTEON2
 2

	)

2003 
	#MIPS_AFL_EXT_OCTEONP
 3

	)

2004 
	#MIPS_AFL_EXT_LOONGSON_3A
 4

	)

2005 
	#MIPS_AFL_EXT_OCTEON
 5

	)

2006 
	#MIPS_AFL_EXT_5900
 6

	)

2007 
	#MIPS_AFL_EXT_4650
 7

	)

2008 
	#MIPS_AFL_EXT_4010
 8

	)

2009 
	#MIPS_AFL_EXT_4100
 9

	)

2010 
	#MIPS_AFL_EXT_3900
 10

	)

2011 
	#MIPS_AFL_EXT_10000
 11

	)

2012 
	#MIPS_AFL_EXT_SB1
 12

	)

2013 
	#MIPS_AFL_EXT_4111
 13

	)

2014 
	#MIPS_AFL_EXT_4120
 14

	)

2015 
	#MIPS_AFL_EXT_5400
 15

	)

2016 
	#MIPS_AFL_EXT_5500
 16

	)

2017 
	#MIPS_AFL_EXT_LOONGSON_2E
 17

	)

2018 
	#MIPS_AFL_EXT_LOONGSON_2F
 18

	)

2021 
	#MIPS_AFL_FLAGS1_ODDSPREG
 1

	)

2027 
	mVÆ_GNU_MIPS_ABI_FP_ANY
 = 0,

2029 
	mVÆ_GNU_MIPS_ABI_FP_DOUBLE
 = 1,

2031 
	mVÆ_GNU_MIPS_ABI_FP_SINGLE
 = 2,

2033 
	mVÆ_GNU_MIPS_ABI_FP_SOFT
 = 3,

2035 
	mVÆ_GNU_MIPS_ABI_FP_OLD_64
 = 4,

2037 
	mVÆ_GNU_MIPS_ABI_FP_XX
 = 5,

2039 
	mVÆ_GNU_MIPS_ABI_FP_64
 = 6,

2041 
	mVÆ_GNU_MIPS_ABI_FP_64A
 = 7,

2043 
	mVÆ_GNU_MIPS_ABI_FP_MAX
 = 7

2050 
	#EF_PARISC_TRAPNIL
 0x00010000

	)

2051 
	#EF_PARISC_EXT
 0x00020000

	)

2052 
	#EF_PARISC_LSB
 0x00040000

	)

2053 
	#EF_PARISC_WIDE
 0x00080000

	)

2054 
	#EF_PARISC_NO_KABP
 0x00100000

	)

2056 
	#EF_PARISC_LAZYSWAP
 0x00400000

	)

2057 
	#EF_PARISC_ARCH
 0x0000fff‡

	)

2061 
	#EFA_PARISC_1_0
 0x020b

	)

2062 
	#EFA_PARISC_1_1
 0x0210

	)

2063 
	#EFA_PARISC_2_0
 0x0214

	)

2067 
	#SHN_PARISC_ANSI_COMMON
 0xff00

	)

2069 
	#SHN_PARISC_HUGE_COMMON
 0xff01

	)

2073 
	#SHT_PARISC_EXT
 0x70000000

	)

2074 
	#SHT_PARISC_UNWIND
 0x70000001

	)

2075 
	#SHT_PARISC_DOC
 0x70000002

	)

2079 
	#SHF_PARISC_SHORT
 0x20000000

	)

2080 
	#SHF_PARISC_HUGE
 0x40000000

	)

2081 
	#SHF_PARISC_SBP
 0x80000000

	)

2085 
	#STT_PARISC_MILLICODE
 13

	)

2087 
	#STT_HP_OPAQUE
 (
STT_LOOS
 + 0x1)

	)

2088 
	#STT_HP_STUB
 (
STT_LOOS
 + 0x2)

	)

2092 
	#R_PARISC_NONE
 0

	)

2093 
	#R_PARISC_DIR32
 1

	)

2094 
	#R_PARISC_DIR21L
 2

	)

2095 
	#R_PARISC_DIR17R
 3

	)

2096 
	#R_PARISC_DIR17F
 4

	)

2097 
	#R_PARISC_DIR14R
 6

	)

2098 
	#R_PARISC_PCREL32
 9

	)

2099 
	#R_PARISC_PCREL21L
 10

	)

2100 
	#R_PARISC_PCREL17R
 11

	)

2101 
	#R_PARISC_PCREL17F
 12

	)

2102 
	#R_PARISC_PCREL14R
 14

	)

2103 
	#R_PARISC_DPREL21L
 18

	)

2104 
	#R_PARISC_DPREL14R
 22

	)

2105 
	#R_PARISC_GPREL21L
 26

	)

2106 
	#R_PARISC_GPREL14R
 30

	)

2107 
	#R_PARISC_LTOFF21L
 34

	)

2108 
	#R_PARISC_LTOFF14R
 38

	)

2109 
	#R_PARISC_SECREL32
 41

	)

2110 
	#R_PARISC_SEGBASE
 48

	)

2111 
	#R_PARISC_SEGREL32
 49

	)

2112 
	#R_PARISC_PLTOFF21L
 50

	)

2113 
	#R_PARISC_PLTOFF14R
 54

	)

2114 
	#R_PARISC_LTOFF_FPTR32
 57

	)

2115 
	#R_PARISC_LTOFF_FPTR21L
 58

	)

2116 
	#R_PARISC_LTOFF_FPTR14R
 62

	)

2117 
	#R_PARISC_FPTR64
 64

	)

2118 
	#R_PARISC_PLABEL32
 65

	)

2119 
	#R_PARISC_PLABEL21L
 66

	)

2120 
	#R_PARISC_PLABEL14R
 70

	)

2121 
	#R_PARISC_PCREL64
 72

	)

2122 
	#R_PARISC_PCREL22F
 74

	)

2123 
	#R_PARISC_PCREL14WR
 75

	)

2124 
	#R_PARISC_PCREL14DR
 76

	)

2125 
	#R_PARISC_PCREL16F
 77

	)

2126 
	#R_PARISC_PCREL16WF
 78

	)

2127 
	#R_PARISC_PCREL16DF
 79

	)

2128 
	#R_PARISC_DIR64
 80

	)

2129 
	#R_PARISC_DIR14WR
 83

	)

2130 
	#R_PARISC_DIR14DR
 84

	)

2131 
	#R_PARISC_DIR16F
 85

	)

2132 
	#R_PARISC_DIR16WF
 86

	)

2133 
	#R_PARISC_DIR16DF
 87

	)

2134 
	#R_PARISC_GPREL64
 88

	)

2135 
	#R_PARISC_GPREL14WR
 91

	)

2136 
	#R_PARISC_GPREL14DR
 92

	)

2137 
	#R_PARISC_GPREL16F
 93

	)

2138 
	#R_PARISC_GPREL16WF
 94

	)

2139 
	#R_PARISC_GPREL16DF
 95

	)

2140 
	#R_PARISC_LTOFF64
 96

	)

2141 
	#R_PARISC_LTOFF14WR
 99

	)

2142 
	#R_PARISC_LTOFF14DR
 100

	)

2143 
	#R_PARISC_LTOFF16F
 101

	)

2144 
	#R_PARISC_LTOFF16WF
 102

	)

2145 
	#R_PARISC_LTOFF16DF
 103

	)

2146 
	#R_PARISC_SECREL64
 104

	)

2147 
	#R_PARISC_SEGREL64
 112

	)

2148 
	#R_PARISC_PLTOFF14WR
 115

	)

2149 
	#R_PARISC_PLTOFF14DR
 116

	)

2150 
	#R_PARISC_PLTOFF16F
 117

	)

2151 
	#R_PARISC_PLTOFF16WF
 118

	)

2152 
	#R_PARISC_PLTOFF16DF
 119

	)

2153 
	#R_PARISC_LTOFF_FPTR64
 120

	)

2154 
	#R_PARISC_LTOFF_FPTR14WR
 123

	)

2155 
	#R_PARISC_LTOFF_FPTR14DR
 124

	)

2156 
	#R_PARISC_LTOFF_FPTR16F
 125

	)

2157 
	#R_PARISC_LTOFF_FPTR16WF
 126

	)

2158 
	#R_PARISC_LTOFF_FPTR16DF
 127

	)

2159 
	#R_PARISC_LORESERVE
 128

	)

2160 
	#R_PARISC_COPY
 128

	)

2161 
	#R_PARISC_IPLT
 129

	)

2162 
	#R_PARISC_EPLT
 130

	)

2163 
	#R_PARISC_TPREL32
 153

	)

2164 
	#R_PARISC_TPREL21L
 154

	)

2165 
	#R_PARISC_TPREL14R
 158

	)

2166 
	#R_PARISC_LTOFF_TP21L
 162

	)

2167 
	#R_PARISC_LTOFF_TP14R
 166

	)

2168 
	#R_PARISC_LTOFF_TP14F
 167

	)

2169 
	#R_PARISC_TPREL64
 216

	)

2170 
	#R_PARISC_TPREL14WR
 219

	)

2171 
	#R_PARISC_TPREL14DR
 220

	)

2172 
	#R_PARISC_TPREL16F
 221

	)

2173 
	#R_PARISC_TPREL16WF
 222

	)

2174 
	#R_PARISC_TPREL16DF
 223

	)

2175 
	#R_PARISC_LTOFF_TP64
 224

	)

2176 
	#R_PARISC_LTOFF_TP14WR
 227

	)

2177 
	#R_PARISC_LTOFF_TP14DR
 228

	)

2178 
	#R_PARISC_LTOFF_TP16F
 229

	)

2179 
	#R_PARISC_LTOFF_TP16WF
 230

	)

2180 
	#R_PARISC_LTOFF_TP16DF
 231

	)

2181 
	#R_PARISC_GNU_VTENTRY
 232

	)

2182 
	#R_PARISC_GNU_VTINHERIT
 233

	)

2183 
	#R_PARISC_TLS_GD21L
 234

	)

2184 
	#R_PARISC_TLS_GD14R
 235

	)

2185 
	#R_PARISC_TLS_GDCALL
 236

	)

2186 
	#R_PARISC_TLS_LDM21L
 237

	)

2187 
	#R_PARISC_TLS_LDM14R
 238

	)

2188 
	#R_PARISC_TLS_LDMCALL
 239

	)

2189 
	#R_PARISC_TLS_LDO21L
 240

	)

2190 
	#R_PARISC_TLS_LDO14R
 241

	)

2191 
	#R_PARISC_TLS_DTPMOD32
 242

	)

2192 
	#R_PARISC_TLS_DTPMOD64
 243

	)

2193 
	#R_PARISC_TLS_DTPOFF32
 244

	)

2194 
	#R_PARISC_TLS_DTPOFF64
 245

	)

2195 
	#R_PARISC_TLS_LE21L
 
R_PARISC_TPREL21L


	)

2196 
	#R_PARISC_TLS_LE14R
 
R_PARISC_TPREL14R


	)

2197 
	#R_PARISC_TLS_IE21L
 
R_PARISC_LTOFF_TP21L


	)

2198 
	#R_PARISC_TLS_IE14R
 
R_PARISC_LTOFF_TP14R


	)

2199 
	#R_PARISC_TLS_TPREL32
 
R_PARISC_TPREL32


	)

2200 
	#R_PARISC_TLS_TPREL64
 
R_PARISC_TPREL64


	)

2201 
	#R_PARISC_HIRESERVE
 255

	)

2205 
	#PT_HP_TLS
 (
PT_LOOS
 + 0x0)

	)

2206 
	#PT_HP_CORE_NONE
 (
PT_LOOS
 + 0x1)

	)

2207 
	#PT_HP_CORE_VERSION
 (
PT_LOOS
 + 0x2)

	)

2208 
	#PT_HP_CORE_KERNEL
 (
PT_LOOS
 + 0x3)

	)

2209 
	#PT_HP_CORE_COMM
 (
PT_LOOS
 + 0x4)

	)

2210 
	#PT_HP_CORE_PROC
 (
PT_LOOS
 + 0x5)

	)

2211 
	#PT_HP_CORE_LOADABLE
 (
PT_LOOS
 + 0x6)

	)

2212 
	#PT_HP_CORE_STACK
 (
PT_LOOS
 + 0x7)

	)

2213 
	#PT_HP_CORE_SHM
 (
PT_LOOS
 + 0x8)

	)

2214 
	#PT_HP_CORE_MMF
 (
PT_LOOS
 + 0x9)

	)

2215 
	#PT_HP_PARALLEL
 (
PT_LOOS
 + 0x10)

	)

2216 
	#PT_HP_FASTBIND
 (
PT_LOOS
 + 0x11)

	)

2217 
	#PT_HP_OPT_ANNOT
 (
PT_LOOS
 + 0x12)

	)

2218 
	#PT_HP_HSL_ANNOT
 (
PT_LOOS
 + 0x13)

	)

2219 
	#PT_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

2221 
	#PT_PARISC_ARCHEXT
 0x70000000

	)

2222 
	#PT_PARISC_UNWIND
 0x70000001

	)

2226 
	#PF_PARISC_SBP
 0x08000000

	)

2228 
	#PF_HP_PAGE_SIZE
 0x00100000

	)

2229 
	#PF_HP_FAR_SHARED
 0x00200000

	)

2230 
	#PF_HP_NEAR_SHARED
 0x00400000

	)

2231 
	#PF_HP_CODE
 0x01000000

	)

2232 
	#PF_HP_MODIFY
 0x02000000

	)

2233 
	#PF_HP_LAZYSWAP
 0x04000000

	)

2234 
	#PF_HP_SBP
 0x08000000

	)

2241 
	#EF_ALPHA_32BIT
 1

	)

2242 
	#EF_ALPHA_CANRELAX
 2

	)

2247 
	#SHT_ALPHA_DEBUG
 0x70000001

	)

2248 
	#SHT_ALPHA_REGINFO
 0x70000002

	)

2252 
	#SHF_ALPHA_GPREL
 0x10000000

	)

2255 
	#STO_ALPHA_NOPV
 0x80

	)

2256 
	#STO_ALPHA_STD_GPLOAD
 0x88

	)

2260 
	#R_ALPHA_NONE
 0

	)

2261 
	#R_ALPHA_REFLONG
 1

	)

2262 
	#R_ALPHA_REFQUAD
 2

	)

2263 
	#R_ALPHA_GPREL32
 3

	)

2264 
	#R_ALPHA_LITERAL
 4

	)

2265 
	#R_ALPHA_LITUSE
 5

	)

2266 
	#R_ALPHA_GPDISP
 6

	)

2267 
	#R_ALPHA_BRADDR
 7

	)

2268 
	#R_ALPHA_HINT
 8

	)

2269 
	#R_ALPHA_SREL16
 9

	)

2270 
	#R_ALPHA_SREL32
 10

	)

2271 
	#R_ALPHA_SREL64
 11

	)

2272 
	#R_ALPHA_GPRELHIGH
 17

	)

2273 
	#R_ALPHA_GPRELLOW
 18

	)

2274 
	#R_ALPHA_GPREL16
 19

	)

2275 
	#R_ALPHA_COPY
 24

	)

2276 
	#R_ALPHA_GLOB_DAT
 25

	)

2277 
	#R_ALPHA_JMP_SLOT
 26

	)

2278 
	#R_ALPHA_RELATIVE
 27

	)

2279 
	#R_ALPHA_TLS_GD_HI
 28

	)

2280 
	#R_ALPHA_TLSGD
 29

	)

2281 
	#R_ALPHA_TLS_LDM
 30

	)

2282 
	#R_ALPHA_DTPMOD64
 31

	)

2283 
	#R_ALPHA_GOTDTPREL
 32

	)

2284 
	#R_ALPHA_DTPREL64
 33

	)

2285 
	#R_ALPHA_DTPRELHI
 34

	)

2286 
	#R_ALPHA_DTPRELLO
 35

	)

2287 
	#R_ALPHA_DTPREL16
 36

	)

2288 
	#R_ALPHA_GOTTPREL
 37

	)

2289 
	#R_ALPHA_TPREL64
 38

	)

2290 
	#R_ALPHA_TPRELHI
 39

	)

2291 
	#R_ALPHA_TPRELLO
 40

	)

2292 
	#R_ALPHA_TPREL16
 41

	)

2294 
	#R_ALPHA_NUM
 46

	)

2297 
	#LITUSE_ALPHA_ADDR
 0

	)

2298 
	#LITUSE_ALPHA_BASE
 1

	)

2299 
	#LITUSE_ALPHA_BYTOFF
 2

	)

2300 
	#LITUSE_ALPHA_JSR
 3

	)

2301 
	#LITUSE_ALPHA_TLS_GD
 4

	)

2302 
	#LITUSE_ALPHA_TLS_LDM
 5

	)

2305 
	#DT_ALPHA_PLTRO
 (
DT_LOPROC
 + 0)

	)

2306 
	#DT_ALPHA_NUM
 1

	)

2311 
	#EF_PPC_EMB
 0x80000000

	)

2314 
	#EF_PPC_RELOCATABLE
 0x00010000

	)

2315 
	#EF_PPC_RELOCATABLE_LIB
 0x00008000

	)

2319 
	#R_PPC_NONE
 0

	)

2320 
	#R_PPC_ADDR32
 1

	)

2321 
	#R_PPC_ADDR24
 2

	)

2322 
	#R_PPC_ADDR16
 3

	)

2323 
	#R_PPC_ADDR16_LO
 4

	)

2324 
	#R_PPC_ADDR16_HI
 5

	)

2325 
	#R_PPC_ADDR16_HA
 6

	)

2326 
	#R_PPC_ADDR14
 7

	)

2327 
	#R_PPC_ADDR14_BRTAKEN
 8

	)

2328 
	#R_PPC_ADDR14_BRNTAKEN
 9

	)

2329 
	#R_PPC_REL24
 10

	)

2330 
	#R_PPC_REL14
 11

	)

2331 
	#R_PPC_REL14_BRTAKEN
 12

	)

2332 
	#R_PPC_REL14_BRNTAKEN
 13

	)

2333 
	#R_PPC_GOT16
 14

	)

2334 
	#R_PPC_GOT16_LO
 15

	)

2335 
	#R_PPC_GOT16_HI
 16

	)

2336 
	#R_PPC_GOT16_HA
 17

	)

2337 
	#R_PPC_PLTREL24
 18

	)

2338 
	#R_PPC_COPY
 19

	)

2339 
	#R_PPC_GLOB_DAT
 20

	)

2340 
	#R_PPC_JMP_SLOT
 21

	)

2341 
	#R_PPC_RELATIVE
 22

	)

2342 
	#R_PPC_LOCAL24PC
 23

	)

2343 
	#R_PPC_UADDR32
 24

	)

2344 
	#R_PPC_UADDR16
 25

	)

2345 
	#R_PPC_REL32
 26

	)

2346 
	#R_PPC_PLT32
 27

	)

2347 
	#R_PPC_PLTREL32
 28

	)

2348 
	#R_PPC_PLT16_LO
 29

	)

2349 
	#R_PPC_PLT16_HI
 30

	)

2350 
	#R_PPC_PLT16_HA
 31

	)

2351 
	#R_PPC_SDAREL16
 32

	)

2352 
	#R_PPC_SECTOFF
 33

	)

2353 
	#R_PPC_SECTOFF_LO
 34

	)

2354 
	#R_PPC_SECTOFF_HI
 35

	)

2355 
	#R_PPC_SECTOFF_HA
 36

	)

2358 
	#R_PPC_TLS
 67

	)

2359 
	#R_PPC_DTPMOD32
 68

	)

2360 
	#R_PPC_TPREL16
 69

	)

2361 
	#R_PPC_TPREL16_LO
 70

	)

2362 
	#R_PPC_TPREL16_HI
 71

	)

2363 
	#R_PPC_TPREL16_HA
 72

	)

2364 
	#R_PPC_TPREL32
 73

	)

2365 
	#R_PPC_DTPREL16
 74

	)

2366 
	#R_PPC_DTPREL16_LO
 75

	)

2367 
	#R_PPC_DTPREL16_HI
 76

	)

2368 
	#R_PPC_DTPREL16_HA
 77

	)

2369 
	#R_PPC_DTPREL32
 78

	)

2370 
	#R_PPC_GOT_TLSGD16
 79

	)

2371 
	#R_PPC_GOT_TLSGD16_LO
 80

	)

2372 
	#R_PPC_GOT_TLSGD16_HI
 81

	)

2373 
	#R_PPC_GOT_TLSGD16_HA
 82

	)

2374 
	#R_PPC_GOT_TLSLD16
 83

	)

2375 
	#R_PPC_GOT_TLSLD16_LO
 84

	)

2376 
	#R_PPC_GOT_TLSLD16_HI
 85

	)

2377 
	#R_PPC_GOT_TLSLD16_HA
 86

	)

2378 
	#R_PPC_GOT_TPREL16
 87

	)

2379 
	#R_PPC_GOT_TPREL16_LO
 88

	)

2380 
	#R_PPC_GOT_TPREL16_HI
 89

	)

2381 
	#R_PPC_GOT_TPREL16_HA
 90

	)

2382 
	#R_PPC_GOT_DTPREL16
 91

	)

2383 
	#R_PPC_GOT_DTPREL16_LO
 92

	)

2384 
	#R_PPC_GOT_DTPREL16_HI
 93

	)

2385 
	#R_PPC_GOT_DTPREL16_HA
 94

	)

2386 
	#R_PPC_TLSGD
 95

	)

2387 
	#R_PPC_TLSLD
 96

	)

2391 
	#R_PPC_EMB_NADDR32
 101

	)

2392 
	#R_PPC_EMB_NADDR16
 102

	)

2393 
	#R_PPC_EMB_NADDR16_LO
 103

	)

2394 
	#R_PPC_EMB_NADDR16_HI
 104

	)

2395 
	#R_PPC_EMB_NADDR16_HA
 105

	)

2396 
	#R_PPC_EMB_SDAI16
 106

	)

2397 
	#R_PPC_EMB_SDA2I16
 107

	)

2398 
	#R_PPC_EMB_SDA2REL
 108

	)

2399 
	#R_PPC_EMB_SDA21
 109

	)

2400 
	#R_PPC_EMB_MRKREF
 110

	)

2401 
	#R_PPC_EMB_RELSEC16
 111

	)

2402 
	#R_PPC_EMB_RELST_LO
 112

	)

2403 
	#R_PPC_EMB_RELST_HI
 113

	)

2404 
	#R_PPC_EMB_RELST_HA
 114

	)

2405 
	#R_PPC_EMB_BIT_FLD
 115

	)

2406 
	#R_PPC_EMB_RELSDA
 116

	)

2409 
	#R_PPC_DIAB_SDA21_LO
 180

	)

2410 
	#R_PPC_DIAB_SDA21_HI
 181

	)

2411 
	#R_PPC_DIAB_SDA21_HA
 182

	)

2412 
	#R_PPC_DIAB_RELSDA_LO
 183

	)

2413 
	#R_PPC_DIAB_RELSDA_HI
 184

	)

2414 
	#R_PPC_DIAB_RELSDA_HA
 185

	)

2417 
	#R_PPC_IRELATIVE
 248

	)

2420 
	#R_PPC_REL16
 249

	)

2421 
	#R_PPC_REL16_LO
 250

	)

2422 
	#R_PPC_REL16_HI
 251

	)

2423 
	#R_PPC_REL16_HA
 252

	)

2427 
	#R_PPC_TOC16
 255

	)

2430 
	#DT_PPC_GOT
 (
DT_LOPROC
 + 0)

	)

2431 
	#DT_PPC_OPT
 (
DT_LOPROC
 + 1)

	)

2432 
	#DT_PPC_NUM
 2

	)

2435 
	#PPC_OPT_TLS
 1

	)

2438 
	#R_PPC64_NONE
 
R_PPC_NONE


	)

2439 
	#R_PPC64_ADDR32
 
R_PPC_ADDR32


	)

2440 
	#R_PPC64_ADDR24
 
R_PPC_ADDR24


	)

2441 
	#R_PPC64_ADDR16
 
R_PPC_ADDR16


	)

2442 
	#R_PPC64_ADDR16_LO
 
R_PPC_ADDR16_LO


	)

2443 
	#R_PPC64_ADDR16_HI
 
R_PPC_ADDR16_HI


	)

2444 
	#R_PPC64_ADDR16_HA
 
R_PPC_ADDR16_HA


	)

2445 
	#R_PPC64_ADDR14
 
R_PPC_ADDR14


	)

2446 
	#R_PPC64_ADDR14_BRTAKEN
 
R_PPC_ADDR14_BRTAKEN


	)

2447 
	#R_PPC64_ADDR14_BRNTAKEN
 
R_PPC_ADDR14_BRNTAKEN


	)

2448 
	#R_PPC64_REL24
 
R_PPC_REL24


	)

2449 
	#R_PPC64_REL14
 
R_PPC_REL14


	)

2450 
	#R_PPC64_REL14_BRTAKEN
 
R_PPC_REL14_BRTAKEN


	)

2451 
	#R_PPC64_REL14_BRNTAKEN
 
R_PPC_REL14_BRNTAKEN


	)

2452 
	#R_PPC64_GOT16
 
R_PPC_GOT16


	)

2453 
	#R_PPC64_GOT16_LO
 
R_PPC_GOT16_LO


	)

2454 
	#R_PPC64_GOT16_HI
 
R_PPC_GOT16_HI


	)

2455 
	#R_PPC64_GOT16_HA
 
R_PPC_GOT16_HA


	)

2457 
	#R_PPC64_COPY
 
R_PPC_COPY


	)

2458 
	#R_PPC64_GLOB_DAT
 
R_PPC_GLOB_DAT


	)

2459 
	#R_PPC64_JMP_SLOT
 
R_PPC_JMP_SLOT


	)

2460 
	#R_PPC64_RELATIVE
 
R_PPC_RELATIVE


	)

2462 
	#R_PPC64_UADDR32
 
R_PPC_UADDR32


	)

2463 
	#R_PPC64_UADDR16
 
R_PPC_UADDR16


	)

2464 
	#R_PPC64_REL32
 
R_PPC_REL32


	)

2465 
	#R_PPC64_PLT32
 
R_PPC_PLT32


	)

2466 
	#R_PPC64_PLTREL32
 
R_PPC_PLTREL32


	)

2467 
	#R_PPC64_PLT16_LO
 
R_PPC_PLT16_LO


	)

2468 
	#R_PPC64_PLT16_HI
 
R_PPC_PLT16_HI


	)

2469 
	#R_PPC64_PLT16_HA
 
R_PPC_PLT16_HA


	)

2471 
	#R_PPC64_SECTOFF
 
R_PPC_SECTOFF


	)

2472 
	#R_PPC64_SECTOFF_LO
 
R_PPC_SECTOFF_LO


	)

2473 
	#R_PPC64_SECTOFF_HI
 
R_PPC_SECTOFF_HI


	)

2474 
	#R_PPC64_SECTOFF_HA
 
R_PPC_SECTOFF_HA


	)

2475 
	#R_PPC64_ADDR30
 37

	)

2476 
	#R_PPC64_ADDR64
 38

	)

2477 
	#R_PPC64_ADDR16_HIGHER
 39

	)

2478 
	#R_PPC64_ADDR16_HIGHERA
 40

	)

2479 
	#R_PPC64_ADDR16_HIGHEST
 41

	)

2480 
	#R_PPC64_ADDR16_HIGHESTA
 42

	)

2481 
	#R_PPC64_UADDR64
 43

	)

2482 
	#R_PPC64_REL64
 44

	)

2483 
	#R_PPC64_PLT64
 45

	)

2484 
	#R_PPC64_PLTREL64
 46

	)

2485 
	#R_PPC64_TOC16
 47

	)

2486 
	#R_PPC64_TOC16_LO
 48

	)

2487 
	#R_PPC64_TOC16_HI
 49

	)

2488 
	#R_PPC64_TOC16_HA
 50

	)

2489 
	#R_PPC64_TOC
 51

	)

2490 
	#R_PPC64_PLTGOT16
 52

	)

2491 
	#R_PPC64_PLTGOT16_LO
 53

	)

2492 
	#R_PPC64_PLTGOT16_HI
 54

	)

2493 
	#R_PPC64_PLTGOT16_HA
 55

	)

2495 
	#R_PPC64_ADDR16_DS
 56

	)

2496 
	#R_PPC64_ADDR16_LO_DS
 57

	)

2497 
	#R_PPC64_GOT16_DS
 58

	)

2498 
	#R_PPC64_GOT16_LO_DS
 59

	)

2499 
	#R_PPC64_PLT16_LO_DS
 60

	)

2500 
	#R_PPC64_SECTOFF_DS
 61

	)

2501 
	#R_PPC64_SECTOFF_LO_DS
 62

	)

2502 
	#R_PPC64_TOC16_DS
 63

	)

2503 
	#R_PPC64_TOC16_LO_DS
 64

	)

2504 
	#R_PPC64_PLTGOT16_DS
 65

	)

2505 
	#R_PPC64_PLTGOT16_LO_DS
 66

	)

2508 
	#R_PPC64_TLS
 67

	)

2509 
	#R_PPC64_DTPMOD64
 68

	)

2510 
	#R_PPC64_TPREL16
 69

	)

2511 
	#R_PPC64_TPREL16_LO
 70

	)

2512 
	#R_PPC64_TPREL16_HI
 71

	)

2513 
	#R_PPC64_TPREL16_HA
 72

	)

2514 
	#R_PPC64_TPREL64
 73

	)

2515 
	#R_PPC64_DTPREL16
 74

	)

2516 
	#R_PPC64_DTPREL16_LO
 75

	)

2517 
	#R_PPC64_DTPREL16_HI
 76

	)

2518 
	#R_PPC64_DTPREL16_HA
 77

	)

2519 
	#R_PPC64_DTPREL64
 78

	)

2520 
	#R_PPC64_GOT_TLSGD16
 79

	)

2521 
	#R_PPC64_GOT_TLSGD16_LO
 80

	)

2522 
	#R_PPC64_GOT_TLSGD16_HI
 81

	)

2523 
	#R_PPC64_GOT_TLSGD16_HA
 82

	)

2524 
	#R_PPC64_GOT_TLSLD16
 83

	)

2525 
	#R_PPC64_GOT_TLSLD16_LO
 84

	)

2526 
	#R_PPC64_GOT_TLSLD16_HI
 85

	)

2527 
	#R_PPC64_GOT_TLSLD16_HA
 86

	)

2528 
	#R_PPC64_GOT_TPREL16_DS
 87

	)

2529 
	#R_PPC64_GOT_TPREL16_LO_DS
 88

	)

2530 
	#R_PPC64_GOT_TPREL16_HI
 89

	)

2531 
	#R_PPC64_GOT_TPREL16_HA
 90

	)

2532 
	#R_PPC64_GOT_DTPREL16_DS
 91

	)

2533 
	#R_PPC64_GOT_DTPREL16_LO_DS
 92

	)

2534 
	#R_PPC64_GOT_DTPREL16_HI
 93

	)

2535 
	#R_PPC64_GOT_DTPREL16_HA
 94

	)

2536 
	#R_PPC64_TPREL16_DS
 95

	)

2537 
	#R_PPC64_TPREL16_LO_DS
 96

	)

2538 
	#R_PPC64_TPREL16_HIGHER
 97

	)

2539 
	#R_PPC64_TPREL16_HIGHERA
 98

	)

2540 
	#R_PPC64_TPREL16_HIGHEST
 99

	)

2541 
	#R_PPC64_TPREL16_HIGHESTA
 100

	)

2542 
	#R_PPC64_DTPREL16_DS
 101

	)

2543 
	#R_PPC64_DTPREL16_LO_DS
 102

	)

2544 
	#R_PPC64_DTPREL16_HIGHER
 103

	)

2545 
	#R_PPC64_DTPREL16_HIGHERA
 104

	)

2546 
	#R_PPC64_DTPREL16_HIGHEST
 105

	)

2547 
	#R_PPC64_DTPREL16_HIGHESTA
 106

	)

2548 
	#R_PPC64_TLSGD
 107

	)

2549 
	#R_PPC64_TLSLD
 108

	)

2550 
	#R_PPC64_TOCSAVE
 109

	)

2553 
	#R_PPC64_ADDR16_HIGH
 110

	)

2554 
	#R_PPC64_ADDR16_HIGHA
 111

	)

2555 
	#R_PPC64_TPREL16_HIGH
 112

	)

2556 
	#R_PPC64_TPREL16_HIGHA
 113

	)

2557 
	#R_PPC64_DTPREL16_HIGH
 114

	)

2558 
	#R_PPC64_DTPREL16_HIGHA
 115

	)

2561 
	#R_PPC64_JMP_IREL
 247

	)

2562 
	#R_PPC64_IRELATIVE
 248

	)

2563 
	#R_PPC64_REL16
 249

	)

2564 
	#R_PPC64_REL16_LO
 250

	)

2565 
	#R_PPC64_REL16_HI
 251

	)

2566 
	#R_PPC64_REL16_HA
 252

	)

2572 
	#EF_PPC64_ABI
 3

	)

2575 
	#DT_PPC64_GLINK
 (
DT_LOPROC
 + 0)

	)

2576 
	#DT_PPC64_OPD
 (
DT_LOPROC
 + 1)

	)

2577 
	#DT_PPC64_OPDSZ
 (
DT_LOPROC
 + 2)

	)

2578 
	#DT_PPC64_OPT
 (
DT_LOPROC
 + 3)

	)

2579 
	#DT_PPC64_NUM
 4

	)

2582 
	#PPC64_OPT_TLS
 1

	)

2583 
	#PPC64_OPT_MULTI_TOC
 2

	)

2584 
	#PPC64_OPT_LOCALENTRY
 4

	)

2587 
	#STO_PPC64_LOCAL_BIT
 5

	)

2588 
	#STO_PPC64_LOCAL_MASK
 (7 << 
STO_PPC64_LOCAL_BIT
)

	)

2589 
	#PPC64_LOCAL_ENTRY_OFFSET
(
Ÿhî
) \

2590 (((1 << (((
Ÿhî
Ë& 
STO_PPC64_LOCAL_MASK
Ë>> 
STO_PPC64_LOCAL_BIT
)Ë>> 2Ë<< 2)

	)

2596 
	#EF_ARM_RELEXEC
 0x01

	)

2597 
	#EF_ARM_HASENTRY
 0x02

	)

2598 
	#EF_ARM_INTERWORK
 0x04

	)

2599 
	#EF_ARM_APCS_26
 0x08

	)

2600 
	#EF_ARM_APCS_FLOAT
 0x10

	)

2601 
	#EF_ARM_PIC
 0x20

	)

2602 
	#EF_ARM_ALIGN8
 0x40

	)

2603 
	#EF_ARM_NEW_ABI
 0x80

	)

2604 
	#EF_ARM_OLD_ABI
 0x100

	)

2605 
	#EF_ARM_SOFT_FLOAT
 0x200

	)

2606 
	#EF_ARM_VFP_FLOAT
 0x400

	)

2607 
	#EF_ARM_MAVERICK_FLOAT
 0x800

	)

2609 
	#EF_ARM_ABI_FLOAT_SOFT
 0x200

	)

2610 
	#EF_ARM_ABI_FLOAT_HARD
 0x400

	)

2615 
	#EF_ARM_SYMSARESORTED
 0x04

	)

2616 
	#EF_ARM_DYNSYMSUSESEGIDX
 0x08

	)

2617 
	#EF_ARM_MAPSYMSFIRST
 0x10

	)

2618 
	#EF_ARM_EABIMASK
 0XFF000000

	)

2621 
	#EF_ARM_BE8
 0x00800000

	)

2622 
	#EF_ARM_LE8
 0x00400000

	)

2624 
	#EF_ARM_EABI_VERSION
(
Êags
Ë((ÊagsË& 
EF_ARM_EABIMASK
)

	)

2625 
	#EF_ARM_EABI_UNKNOWN
 0x00000000

	)

2626 
	#EF_ARM_EABI_VER1
 0x01000000

	)

2627 
	#EF_ARM_EABI_VER2
 0x02000000

	)

2628 
	#EF_ARM_EABI_VER3
 0x03000000

	)

2629 
	#EF_ARM_EABI_VER4
 0x04000000

	)

2630 
	#EF_ARM_EABI_VER5
 0x05000000

	)

2633 
	#STT_ARM_TFUNC
 
STT_LOPROC


	)

2634 
	#STT_ARM_16BIT
 
STT_HIPROC


	)

2637 
	#SHF_ARM_ENTRYSECT
 0x10000000

	)

2638 
	#SHF_ARM_COMDEF
 0x80000000

	)

2642 
	#PF_ARM_SB
 0x10000000

	)

2644 
	#PF_ARM_PI
 0x20000000

	)

2645 
	#PF_ARM_ABS
 0x40000000

	)

2648 
	#PT_ARM_EXIDX
 (
PT_LOPROC
 + 1Ë

	)

2651 
	#SHT_ARM_EXIDX
 (
SHT_LOPROC
 + 1Ë

	)

2652 
	#SHT_ARM_PREEMPTMAP
 (
SHT_LOPROC
 + 2Ë

	)

2653 
	#SHT_ARM_ATTRIBUTES
 (
SHT_LOPROC
 + 3Ë

	)

2658 
	#R_AARCH64_NONE
 0

	)

2661 
	#R_AARCH64_P32_ABS32
 1

	)

2662 
	#R_AARCH64_P32_COPY
 180

	)

2663 
	#R_AARCH64_P32_GLOB_DAT
 181

	)

2664 
	#R_AARCH64_P32_JUMP_SLOT
 182

	)

2665 
	#R_AARCH64_P32_RELATIVE
 183

	)

2666 
	#R_AARCH64_P32_TLS_DTPMOD
 184

	)

2667 
	#R_AARCH64_P32_TLS_DTPREL
 185

	)

2668 
	#R_AARCH64_P32_TLS_TPREL
 186

	)

2669 
	#R_AARCH64_P32_TLSDESC
 187

	)

2670 
	#R_AARCH64_P32_IRELATIVE
 188

	)

2673 
	#R_AARCH64_ABS64
 257

	)

2674 
	#R_AARCH64_ABS32
 258

	)

2675 
	#R_AARCH64_ABS16
 259

	)

2676 
	#R_AARCH64_PREL64
 260

	)

2677 
	#R_AARCH64_PREL32
 261

	)

2678 
	#R_AARCH64_PREL16
 262

	)

2679 
	#R_AARCH64_MOVW_UABS_G0
 263

	)

2680 
	#R_AARCH64_MOVW_UABS_G0_NC
 264

	)

2681 
	#R_AARCH64_MOVW_UABS_G1
 265

	)

2682 
	#R_AARCH64_MOVW_UABS_G1_NC
 266

	)

2683 
	#R_AARCH64_MOVW_UABS_G2
 267

	)

2684 
	#R_AARCH64_MOVW_UABS_G2_NC
 268

	)

2685 
	#R_AARCH64_MOVW_UABS_G3
 269

	)

2686 
	#R_AARCH64_MOVW_SABS_G0
 270

	)

2687 
	#R_AARCH64_MOVW_SABS_G1
 271

	)

2688 
	#R_AARCH64_MOVW_SABS_G2
 272

	)

2689 
	#R_AARCH64_LD_PREL_LO19
 273

	)

2690 
	#R_AARCH64_ADR_PREL_LO21
 274

	)

2691 
	#R_AARCH64_ADR_PREL_PG_HI21
 275

	)

2692 
	#R_AARCH64_ADR_PREL_PG_HI21_NC
 276

	)

2693 
	#R_AARCH64_ADD_ABS_LO12_NC
 277

	)

2694 
	#R_AARCH64_LDST8_ABS_LO12_NC
 278

	)

2695 
	#R_AARCH64_TSTBR14
 279

	)

2696 
	#R_AARCH64_CONDBR19
 280

	)

2697 
	#R_AARCH64_JUMP26
 282

	)

2698 
	#R_AARCH64_CALL26
 283

	)

2699 
	#R_AARCH64_LDST16_ABS_LO12_NC
 284

	)

2700 
	#R_AARCH64_LDST32_ABS_LO12_NC
 285

	)

2701 
	#R_AARCH64_LDST64_ABS_LO12_NC
 286

	)

2702 
	#R_AARCH64_MOVW_PREL_G0
 287

	)

2703 
	#R_AARCH64_MOVW_PREL_G0_NC
 288

	)

2704 
	#R_AARCH64_MOVW_PREL_G1
 289

	)

2705 
	#R_AARCH64_MOVW_PREL_G1_NC
 290

	)

2706 
	#R_AARCH64_MOVW_PREL_G2
 291

	)

2707 
	#R_AARCH64_MOVW_PREL_G2_NC
 292

	)

2708 
	#R_AARCH64_MOVW_PREL_G3
 293

	)

2709 
	#R_AARCH64_LDST128_ABS_LO12_NC
 299

	)

2710 
	#R_AARCH64_MOVW_GOTOFF_G0
 300

	)

2711 
	#R_AARCH64_MOVW_GOTOFF_G0_NC
 301

	)

2712 
	#R_AARCH64_MOVW_GOTOFF_G1
 302

	)

2713 
	#R_AARCH64_MOVW_GOTOFF_G1_NC
 303

	)

2714 
	#R_AARCH64_MOVW_GOTOFF_G2
 304

	)

2715 
	#R_AARCH64_MOVW_GOTOFF_G2_NC
 305

	)

2716 
	#R_AARCH64_MOVW_GOTOFF_G3
 306

	)

2717 
	#R_AARCH64_GOTREL64
 307

	)

2718 
	#R_AARCH64_GOTREL32
 308

	)

2719 
	#R_AARCH64_GOT_LD_PREL19
 309

	)

2720 
	#R_AARCH64_LD64_GOTOFF_LO15
 310

	)

2721 
	#R_AARCH64_ADR_GOT_PAGE
 311

	)

2722 
	#R_AARCH64_LD64_GOT_LO12_NC
 312

	)

2723 
	#R_AARCH64_LD64_GOTPAGE_LO15
 313

	)

2724 
	#R_AARCH64_TLSGD_ADR_PREL21
 512

	)

2725 
	#R_AARCH64_TLSGD_ADR_PAGE21
 513

	)

2726 
	#R_AARCH64_TLSGD_ADD_LO12_NC
 514

	)

2727 
	#R_AARCH64_TLSGD_MOVW_G1
 515

	)

2728 
	#R_AARCH64_TLSGD_MOVW_G0_NC
 516

	)

2729 
	#R_AARCH64_TLSLD_ADR_PREL21
 517

	)

2730 
	#R_AARCH64_TLSLD_ADR_PAGE21
 518

	)

2731 
	#R_AARCH64_TLSLD_ADD_LO12_NC
 519

	)

2732 
	#R_AARCH64_TLSLD_MOVW_G1
 520

	)

2733 
	#R_AARCH64_TLSLD_MOVW_G0_NC
 521

	)

2734 
	#R_AARCH64_TLSLD_LD_PREL19
 522

	)

2735 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G2
 523

	)

2736 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G1
 524

	)

2737 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G1_NC
 525

	)

2738 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G0
 526

	)

2739 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G0_NC
 527

	)

2740 
	#R_AARCH64_TLSLD_ADD_DTPREL_HI12
 528

	)

2741 
	#R_AARCH64_TLSLD_ADD_DTPREL_LO12
 529

	)

2742 
	#R_AARCH64_TLSLD_ADD_DTPREL_LO12_NC
 530

	)

2743 
	#R_AARCH64_TLSLD_LDST8_DTPREL_LO12
 531

	)

2744 
	#R_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC
 532

	)

2745 
	#R_AARCH64_TLSLD_LDST16_DTPREL_LO12
 533

	)

2746 
	#R_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC
 534

	)

2747 
	#R_AARCH64_TLSLD_LDST32_DTPREL_LO12
 535

	)

2748 
	#R_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC
 536

	)

2749 
	#R_AARCH64_TLSLD_LDST64_DTPREL_LO12
 537

	)

2750 
	#R_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC
 538

	)

2751 
	#R_AARCH64_TLSIE_MOVW_GOTTPREL_G1
 539

	)

2752 
	#R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC
 540

	)

2753 
	#R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21
 541

	)

2754 
	#R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC
 542

	)

2755 
	#R_AARCH64_TLSIE_LD_GOTTPREL_PREL19
 543

	)

2756 
	#R_AARCH64_TLSLE_MOVW_TPREL_G2
 544

	)

2757 
	#R_AARCH64_TLSLE_MOVW_TPREL_G1
 545

	)

2758 
	#R_AARCH64_TLSLE_MOVW_TPREL_G1_NC
 546

	)

2759 
	#R_AARCH64_TLSLE_MOVW_TPREL_G0
 547

	)

2760 
	#R_AARCH64_TLSLE_MOVW_TPREL_G0_NC
 548

	)

2761 
	#R_AARCH64_TLSLE_ADD_TPREL_HI12
 549

	)

2762 
	#R_AARCH64_TLSLE_ADD_TPREL_LO12
 550

	)

2763 
	#R_AARCH64_TLSLE_ADD_TPREL_LO12_NC
 551

	)

2764 
	#R_AARCH64_TLSLE_LDST8_TPREL_LO12
 552

	)

2765 
	#R_AARCH64_TLSLE_LDST8_TPREL_LO12_NC
 553

	)

2766 
	#R_AARCH64_TLSLE_LDST16_TPREL_LO12
 554

	)

2767 
	#R_AARCH64_TLSLE_LDST16_TPREL_LO12_NC
 555

	)

2768 
	#R_AARCH64_TLSLE_LDST32_TPREL_LO12
 556

	)

2769 
	#R_AARCH64_TLSLE_LDST32_TPREL_LO12_NC
 557

	)

2770 
	#R_AARCH64_TLSLE_LDST64_TPREL_LO12
 558

	)

2771 
	#R_AARCH64_TLSLE_LDST64_TPREL_LO12_NC
 559

	)

2772 
	#R_AARCH64_TLSDESC_LD_PREL19
 560

	)

2773 
	#R_AARCH64_TLSDESC_ADR_PREL21
 561

	)

2774 
	#R_AARCH64_TLSDESC_ADR_PAGE21
 562

	)

2775 
	#R_AARCH64_TLSDESC_LD64_LO12
 563

	)

2776 
	#R_AARCH64_TLSDESC_ADD_LO12
 564

	)

2777 
	#R_AARCH64_TLSDESC_OFF_G1
 565

	)

2778 
	#R_AARCH64_TLSDESC_OFF_G0_NC
 566

	)

2779 
	#R_AARCH64_TLSDESC_LDR
 567

	)

2780 
	#R_AARCH64_TLSDESC_ADD
 568

	)

2781 
	#R_AARCH64_TLSDESC_CALL
 569

	)

2782 
	#R_AARCH64_TLSLE_LDST128_TPREL_LO12
 570

	)

2783 
	#R_AARCH64_TLSLE_LDST128_TPREL_LO12_NC
 571

	)

2784 
	#R_AARCH64_TLSLD_LDST128_DTPREL_LO12
 572

	)

2785 
	#R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC
 573

	)

2786 
	#R_AARCH64_COPY
 1024

	)

2787 
	#R_AARCH64_GLOB_DAT
 1025

	)

2788 
	#R_AARCH64_JUMP_SLOT
 1026

	)

2789 
	#R_AARCH64_RELATIVE
 1027

	)

2790 
	#R_AARCH64_TLS_DTPMOD
 1028

	)

2791 
	#R_AARCH64_TLS_DTPREL
 1029

	)

2792 
	#R_AARCH64_TLS_TPREL
 1030

	)

2793 
	#R_AARCH64_TLSDESC
 1031

	)

2794 
	#R_AARCH64_IRELATIVE
 1032

	)

2797 
	#DT_AARCH64_VARIANT_PCS
 (
DT_LOPROC
 + 5)

	)

2798 
	#DT_AARCH64_NUM
 6

	)

2801 
	#STO_AARCH64_VARIANT_PCS
 0x80

	)

2805 
	#R_ARM_NONE
 0

	)

2806 
	#R_ARM_PC24
 1

	)

2808 
	#R_ARM_ABS32
 2

	)

2809 
	#R_ARM_REL32
 3

	)

2810 
	#R_ARM_PC13
 4

	)

2811 
	#R_ARM_ABS16
 5

	)

2812 
	#R_ARM_ABS12
 6

	)

2813 
	#R_ARM_THM_ABS5
 7

	)

2814 
	#R_ARM_ABS8
 8

	)

2815 
	#R_ARM_SBREL32
 9

	)

2816 
	#R_ARM_THM_PC22
 10

	)

2817 
	#R_ARM_THM_PC8
 11

	)

2819 
	#R_ARM_AMP_VCALL9
 12

	)

2820 
	#R_ARM_SWI24
 13

	)

2821 
	#R_ARM_TLS_DESC
 13

	)

2822 
	#R_ARM_THM_SWI8
 14

	)

2823 
	#R_ARM_XPC25
 15

	)

2824 
	#R_ARM_THM_XPC22
 16

	)

2825 
	#R_ARM_TLS_DTPMOD32
 17

	)

2826 
	#R_ARM_TLS_DTPOFF32
 18

	)

2827 
	#R_ARM_TLS_TPOFF32
 19

	)

2828 
	#R_ARM_COPY
 20

	)

2829 
	#R_ARM_GLOB_DAT
 21

	)

2830 
	#R_ARM_JUMP_SLOT
 22

	)

2831 
	#R_ARM_RELATIVE
 23

	)

2832 
	#R_ARM_GOTOFF
 24

	)

2833 
	#R_ARM_GOTPC
 25

	)

2834 
	#R_ARM_GOT32
 26

	)

2835 
	#R_ARM_PLT32
 27

	)

2836 
	#R_ARM_CALL
 28

	)

2837 
	#R_ARM_JUMP24
 29

	)

2839 
	#R_ARM_THM_JUMP24
 30

	)

2840 
	#R_ARM_BASE_ABS
 31

	)

2841 
	#R_ARM_ALU_PCREL_7_0
 32

	)

2842 
	#R_ARM_ALU_PCREL_15_8
 33

	)

2843 
	#R_ARM_ALU_PCREL_23_15
 34

	)

2844 
	#R_ARM_LDR_SBREL_11_0
 35

	)

2845 
	#R_ARM_ALU_SBREL_19_12
 36

	)

2846 
	#R_ARM_ALU_SBREL_27_20
 37

	)

2847 
	#R_ARM_TARGET1
 38

	)

2848 
	#R_ARM_SBREL31
 39

	)

2849 
	#R_ARM_V4BX
 40

	)

2850 
	#R_ARM_TARGET2
 41

	)

2851 
	#R_ARM_PREL31
 42

	)

2852 
	#R_ARM_MOVW_ABS_NC
 43

	)

2853 
	#R_ARM_MOVT_ABS
 44

	)

2854 
	#R_ARM_MOVW_PREL_NC
 45

	)

2855 
	#R_ARM_MOVT_PREL
 46

	)

2856 
	#R_ARM_THM_MOVW_ABS_NC
 47

	)

2857 
	#R_ARM_THM_MOVT_ABS
 48

	)

2859 
	#R_ARM_THM_MOVW_PREL_NC
 49

	)

2861 
	#R_ARM_THM_MOVT_PREL
 50

	)

2863 
	#R_ARM_THM_JUMP19
 51

	)

2865 
	#R_ARM_THM_JUMP6
 52

	)

2867 
	#R_ARM_THM_ALU_PREL_11_0
 53

	)

2869 
	#R_ARM_THM_PC12
 54

	)

2871 
	#R_ARM_ABS32_NOI
 55

	)

2872 
	#R_ARM_REL32_NOI
 56

	)

2873 
	#R_ARM_ALU_PC_G0_NC
 57

	)

2874 
	#R_ARM_ALU_PC_G0
 58

	)

2875 
	#R_ARM_ALU_PC_G1_NC
 59

	)

2876 
	#R_ARM_ALU_PC_G1
 60

	)

2877 
	#R_ARM_ALU_PC_G2
 61

	)

2878 
	#R_ARM_LDR_PC_G1
 62

	)

2879 
	#R_ARM_LDR_PC_G2
 63

	)

2880 
	#R_ARM_LDRS_PC_G0
 64

	)

2882 
	#R_ARM_LDRS_PC_G1
 65

	)

2884 
	#R_ARM_LDRS_PC_G2
 66

	)

2886 
	#R_ARM_LDC_PC_G0
 67

	)

2887 
	#R_ARM_LDC_PC_G1
 68

	)

2888 
	#R_ARM_LDC_PC_G2
 69

	)

2889 
	#R_ARM_ALU_SB_G0_NC
 70

	)

2890 
	#R_ARM_ALU_SB_G0
 71

	)

2891 
	#R_ARM_ALU_SB_G1_NC
 72

	)

2892 
	#R_ARM_ALU_SB_G1
 73

	)

2893 
	#R_ARM_ALU_SB_G2
 74

	)

2894 
	#R_ARM_LDR_SB_G0
 75

	)

2896 
	#R_ARM_LDR_SB_G1
 76

	)

2898 
	#R_ARM_LDR_SB_G2
 77

	)

2900 
	#R_ARM_LDRS_SB_G0
 78

	)

2902 
	#R_ARM_LDRS_SB_G1
 79

	)

2904 
	#R_ARM_LDRS_SB_G2
 80

	)

2906 
	#R_ARM_LDC_SB_G0
 81

	)

2907 
	#R_ARM_LDC_SB_G1
 82

	)

2908 
	#R_ARM_LDC_SB_G2
 83

	)

2909 
	#R_ARM_MOVW_BREL_NC
 84

	)

2911 
	#R_ARM_MOVT_BREL
 85

	)

2913 
	#R_ARM_MOVW_BREL
 86

	)

2915 
	#R_ARM_THM_MOVW_BREL_NC
 87

	)

2917 
	#R_ARM_THM_MOVT_BREL
 88

	)

2919 
	#R_ARM_THM_MOVW_BREL
 89

	)

2921 
	#R_ARM_TLS_GOTDESC
 90

	)

2922 
	#R_ARM_TLS_CALL
 91

	)

2923 
	#R_ARM_TLS_DESCSEQ
 92

	)

2924 
	#R_ARM_THM_TLS_CALL
 93

	)

2925 
	#R_ARM_PLT32_ABS
 94

	)

2926 
	#R_ARM_GOT_ABS
 95

	)

2927 
	#R_ARM_GOT_PREL
 96

	)

2928 
	#R_ARM_GOT_BREL12
 97

	)

2930 
	#R_ARM_GOTOFF12
 98

	)

2932 
	#R_ARM_GOTRELAX
 99

	)

2933 
	#R_ARM_GNU_VTENTRY
 100

	)

2934 
	#R_ARM_GNU_VTINHERIT
 101

	)

2935 
	#R_ARM_THM_PC11
 102

	)

2936 
	#R_ARM_THM_PC9
 103

	)

2938 
	#R_ARM_TLS_GD32
 104

	)

2940 
	#R_ARM_TLS_LDM32
 105

	)

2942 
	#R_ARM_TLS_LDO32
 106

	)

2944 
	#R_ARM_TLS_IE32
 107

	)

2946 
	#R_ARM_TLS_LE32
 108

	)

2948 
	#R_ARM_TLS_LDO12
 109

	)

2950 
	#R_ARM_TLS_LE12
 110

	)

2952 
	#R_ARM_TLS_IE12GP
 111

	)

2954 
	#R_ARM_ME_TOO
 128

	)

2955 
	#R_ARM_THM_TLS_DESCSEQ
 129

	)

2956 
	#R_ARM_THM_TLS_DESCSEQ16
 129

	)

2957 
	#R_ARM_THM_TLS_DESCSEQ32
 130

	)

2958 
	#R_ARM_THM_GOT_BREL12
 131

	)

2960 
	#R_ARM_IRELATIVE
 160

	)

2961 
	#R_ARM_RXPC25
 249

	)

2962 
	#R_ARM_RSBREL32
 250

	)

2963 
	#R_ARM_THM_RPC22
 251

	)

2964 
	#R_ARM_RREL32
 252

	)

2965 
	#R_ARM_RABS22
 253

	)

2966 
	#R_ARM_RPC24
 254

	)

2967 
	#R_ARM_RBASE
 255

	)

2969 
	#R_ARM_NUM
 256

	)

2972 
	#R_CKCORE_NONE
 0

	)

2973 
	#R_CKCORE_ADDR32
 1

	)

2974 
	#R_CKCORE_PCRELIMM8BY4
 2

	)

2975 
	#R_CKCORE_PCRELIMM11BY2
 3

	)

2976 
	#R_CKCORE_PCREL32
 5

	)

2977 
	#R_CKCORE_PCRELJSR_IMM11BY2
 6

	)

2978 
	#R_CKCORE_RELATIVE
 9

	)

2979 
	#R_CKCORE_COPY
 10

	)

2980 
	#R_CKCORE_GLOB_DAT
 11

	)

2981 
	#R_CKCORE_JUMP_SLOT
 12

	)

2982 
	#R_CKCORE_GOTOFF
 13

	)

2983 
	#R_CKCORE_GOTPC
 14

	)

2984 
	#R_CKCORE_GOT32
 15

	)

2985 
	#R_CKCORE_PLT32
 16

	)

2986 
	#R_CKCORE_ADDRGOT
 17

	)

2987 
	#R_CKCORE_ADDRPLT
 18

	)

2988 
	#R_CKCORE_PCREL_IMM26BY2
 19

	)

2989 
	#R_CKCORE_PCREL_IMM16BY2
 20

	)

2990 
	#R_CKCORE_PCREL_IMM16BY4
 21

	)

2991 
	#R_CKCORE_PCREL_IMM10BY2
 22

	)

2992 
	#R_CKCORE_PCREL_IMM10BY4
 23

	)

2993 
	#R_CKCORE_ADDR_HI16
 24

	)

2995 
	#R_CKCORE_ADDR_LO16
 25

	)

2996 
	#R_CKCORE_GOTPC_HI16
 26

	)

2998 
	#R_CKCORE_GOTPC_LO16
 27

	)

2999 
	#R_CKCORE_GOTOFF_HI16
 28

	)

3001 
	#R_CKCORE_GOTOFF_LO16
 29

	)

3002 
	#R_CKCORE_GOT12
 30

	)

3003 
	#R_CKCORE_GOT_HI16
 31

	)

3005 
	#R_CKCORE_GOT_LO16
 32

	)

3006 
	#R_CKCORE_PLT12
 33

	)

3007 
	#R_CKCORE_PLT_HI16
 34

	)

3009 
	#R_CKCORE_PLT_LO16
 35

	)

3010 
	#R_CKCORE_ADDRGOT_HI16
 36

	)

3012 
	#R_CKCORE_ADDRGOT_LO16
 37

	)

3013 
	#R_CKCORE_ADDRPLT_HI16
 38

	)

3015 
	#R_CKCORE_ADDRPLT_LO16
 39

	)

3016 
	#R_CKCORE_PCREL_JSR_IMM26BY2
 40

	)

3017 
	#R_CKCORE_TOFFSET_LO16
 41

	)

3018 
	#R_CKCORE_DOFFSET_LO16
 42

	)

3019 
	#R_CKCORE_PCREL_IMM18BY2
 43

	)

3020 
	#R_CKCORE_DOFFSET_IMM18
 44

	)

3021 
	#R_CKCORE_DOFFSET_IMM18BY2
 45

	)

3022 
	#R_CKCORE_DOFFSET_IMM18BY4
 46

	)

3023 
	#R_CKCORE_GOT_IMM18BY4
 48

	)

3024 
	#R_CKCORE_PLT_IMM18BY4
 49

	)

3025 
	#R_CKCORE_PCREL_IMM7BY4
 50

	)

3026 
	#R_CKCORE_TLS_LE32
 51

	)

3027 
	#R_CKCORE_TLS_IE32
 52

	)

3028 
	#R_CKCORE_TLS_GD32
 53

	)

3029 
	#R_CKCORE_TLS_LDM32
 54

	)

3030 
	#R_CKCORE_TLS_LDO32
 55

	)

3031 
	#R_CKCORE_TLS_DTPMOD32
 56

	)

3032 
	#R_CKCORE_TLS_DTPOFF32
 57

	)

3033 
	#R_CKCORE_TLS_TPOFF32
 58

	)

3036 
	#EF_CSKY_ABIMASK
 0XF0000000

	)

3037 
	#EF_CSKY_OTHER
 0X0FFF0000

	)

3038 
	#EF_CSKY_PROCESSOR
 0X0000FFFF

	)

3040 
	#EF_CSKY_ABIV1
 0X10000000

	)

3041 
	#EF_CSKY_ABIV2
 0X20000000

	)

3044 
	#SHT_CSKY_ATTRIBUTES
 (
SHT_LOPROC
 + 1)

	)

3049 
	#EF_IA_64_MASKOS
 0x0000000‡

	)

3050 
	#EF_IA_64_ABI64
 0x00000010

	)

3051 
	#EF_IA_64_ARCH
 0xff000000

	)

3054 
	#PT_IA_64_ARCHEXT
 (
PT_LOPROC
 + 0Ë

	)

3055 
	#PT_IA_64_UNWIND
 (
PT_LOPROC
 + 1Ë

	)

3056 
	#PT_IA_64_HP_OPT_ANOT
 (
PT_LOOS
 + 0x12)

	)

3057 
	#PT_IA_64_HP_HSL_ANOT
 (
PT_LOOS
 + 0x13)

	)

3058 
	#PT_IA_64_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

3061 
	#PF_IA_64_NORECOV
 0x80000000

	)

3064 
	#SHT_IA_64_EXT
 (
SHT_LOPROC
 + 0Ë

	)

3065 
	#SHT_IA_64_UNWIND
 (
SHT_LOPROC
 + 1Ë

	)

3068 
	#SHF_IA_64_SHORT
 0x10000000

	)

3069 
	#SHF_IA_64_NORECOV
 0x20000000

	)

3072 
	#DT_IA_64_PLT_RESERVE
 (
DT_LOPROC
 + 0)

	)

3073 
	#DT_IA_64_NUM
 1

	)

3076 
	#R_IA64_NONE
 0x00

	)

3077 
	#R_IA64_IMM14
 0x21

	)

3078 
	#R_IA64_IMM22
 0x22

	)

3079 
	#R_IA64_IMM64
 0x23

	)

3080 
	#R_IA64_DIR32MSB
 0x24

	)

3081 
	#R_IA64_DIR32LSB
 0x25

	)

3082 
	#R_IA64_DIR64MSB
 0x26

	)

3083 
	#R_IA64_DIR64LSB
 0x27

	)

3084 
	#R_IA64_GPREL22
 0x2®

	)

3085 
	#R_IA64_GPREL64I
 0x2b

	)

3086 
	#R_IA64_GPREL32MSB
 0x2¯

	)

3087 
	#R_IA64_GPREL32LSB
 0x2d

	)

3088 
	#R_IA64_GPREL64MSB
 0x2ê

	)

3089 
	#R_IA64_GPREL64LSB
 0x2‡

	)

3090 
	#R_IA64_LTOFF22
 0x32

	)

3091 
	#R_IA64_LTOFF64I
 0x33

	)

3092 
	#R_IA64_PLTOFF22
 0x3®

	)

3093 
	#R_IA64_PLTOFF64I
 0x3b

	)

3094 
	#R_IA64_PLTOFF64MSB
 0x3ê

	)

3095 
	#R_IA64_PLTOFF64LSB
 0x3‡

	)

3096 
	#R_IA64_FPTR64I
 0x43

	)

3097 
	#R_IA64_FPTR32MSB
 0x44

	)

3098 
	#R_IA64_FPTR32LSB
 0x45

	)

3099 
	#R_IA64_FPTR64MSB
 0x46

	)

3100 
	#R_IA64_FPTR64LSB
 0x47

	)

3101 
	#R_IA64_PCREL60B
 0x48

	)

3102 
	#R_IA64_PCREL21B
 0x49

	)

3103 
	#R_IA64_PCREL21M
 0x4®

	)

3104 
	#R_IA64_PCREL21F
 0x4b

	)

3105 
	#R_IA64_PCREL32MSB
 0x4¯

	)

3106 
	#R_IA64_PCREL32LSB
 0x4d

	)

3107 
	#R_IA64_PCREL64MSB
 0x4ê

	)

3108 
	#R_IA64_PCREL64LSB
 0x4‡

	)

3109 
	#R_IA64_LTOFF_FPTR22
 0x52

	)

3110 
	#R_IA64_LTOFF_FPTR64I
 0x53

	)

3111 
	#R_IA64_LTOFF_FPTR32MSB
 0x54

	)

3112 
	#R_IA64_LTOFF_FPTR32LSB
 0x55

	)

3113 
	#R_IA64_LTOFF_FPTR64MSB
 0x56

	)

3114 
	#R_IA64_LTOFF_FPTR64LSB
 0x57

	)

3115 
	#R_IA64_SEGREL32MSB
 0x5¯

	)

3116 
	#R_IA64_SEGREL32LSB
 0x5d

	)

3117 
	#R_IA64_SEGREL64MSB
 0x5ê

	)

3118 
	#R_IA64_SEGREL64LSB
 0x5‡

	)

3119 
	#R_IA64_SECREL32MSB
 0x64

	)

3120 
	#R_IA64_SECREL32LSB
 0x65

	)

3121 
	#R_IA64_SECREL64MSB
 0x66

	)

3122 
	#R_IA64_SECREL64LSB
 0x67

	)

3123 
	#R_IA64_REL32MSB
 0x6¯

	)

3124 
	#R_IA64_REL32LSB
 0x6d

	)

3125 
	#R_IA64_REL64MSB
 0x6ê

	)

3126 
	#R_IA64_REL64LSB
 0x6‡

	)

3127 
	#R_IA64_LTV32MSB
 0x74

	)

3128 
	#R_IA64_LTV32LSB
 0x75

	)

3129 
	#R_IA64_LTV64MSB
 0x76

	)

3130 
	#R_IA64_LTV64LSB
 0x77

	)

3131 
	#R_IA64_PCREL21BI
 0x79

	)

3132 
	#R_IA64_PCREL22
 0x7®

	)

3133 
	#R_IA64_PCREL64I
 0x7b

	)

3134 
	#R_IA64_IPLTMSB
 0x80

	)

3135 
	#R_IA64_IPLTLSB
 0x81

	)

3136 
	#R_IA64_COPY
 0x84

	)

3137 
	#R_IA64_SUB
 0x85

	)

3138 
	#R_IA64_LTOFF22X
 0x86

	)

3139 
	#R_IA64_LDXMOV
 0x87

	)

3140 
	#R_IA64_TPREL14
 0x91

	)

3141 
	#R_IA64_TPREL22
 0x92

	)

3142 
	#R_IA64_TPREL64I
 0x93

	)

3143 
	#R_IA64_TPREL64MSB
 0x96

	)

3144 
	#R_IA64_TPREL64LSB
 0x97

	)

3145 
	#R_IA64_LTOFF_TPREL22
 0x9®

	)

3146 
	#R_IA64_DTPMOD64MSB
 0xa6

	)

3147 
	#R_IA64_DTPMOD64LSB
 0xa7

	)

3148 
	#R_IA64_LTOFF_DTPMOD22
 0xØ

	)

3149 
	#R_IA64_DTPREL14
 0xb1

	)

3150 
	#R_IA64_DTPREL22
 0xb2

	)

3151 
	#R_IA64_DTPREL64I
 0xb3

	)

3152 
	#R_IA64_DTPREL32MSB
 0xb4

	)

3153 
	#R_IA64_DTPREL32LSB
 0xb5

	)

3154 
	#R_IA64_DTPREL64MSB
 0xb6

	)

3155 
	#R_IA64_DTPREL64LSB
 0xb7

	)

3156 
	#R_IA64_LTOFF_DTPREL22
 0xb®

	)

3161 
	#EF_SH_MACH_MASK
 0x1f

	)

3162 
	#EF_SH_UNKNOWN
 0x0

	)

3163 
	#EF_SH1
 0x1

	)

3164 
	#EF_SH2
 0x2

	)

3165 
	#EF_SH3
 0x3

	)

3166 
	#EF_SH_DSP
 0x4

	)

3167 
	#EF_SH3_DSP
 0x5

	)

3168 
	#EF_SH4AL_DSP
 0x6

	)

3169 
	#EF_SH3E
 0x8

	)

3170 
	#EF_SH4
 0x9

	)

3171 
	#EF_SH2E
 0xb

	)

3172 
	#EF_SH4A
 0xc

	)

3173 
	#EF_SH2A
 0xd

	)

3174 
	#EF_SH4_NOFPU
 0x10

	)

3175 
	#EF_SH4A_NOFPU
 0x11

	)

3176 
	#EF_SH4_NOMMU_NOFPU
 0x12

	)

3177 
	#EF_SH2A_NOFPU
 0x13

	)

3178 
	#EF_SH3_NOMMU
 0x14

	)

3179 
	#EF_SH2A_SH4_NOFPU
 0x15

	)

3180 
	#EF_SH2A_SH3_NOFPU
 0x16

	)

3181 
	#EF_SH2A_SH4
 0x17

	)

3182 
	#EF_SH2A_SH3E
 0x18

	)

3185 
	#R_SH_NONE
 0

	)

3186 
	#R_SH_DIR32
 1

	)

3187 
	#R_SH_REL32
 2

	)

3188 
	#R_SH_DIR8WPN
 3

	)

3189 
	#R_SH_IND12W
 4

	)

3190 
	#R_SH_DIR8WPL
 5

	)

3191 
	#R_SH_DIR8WPZ
 6

	)

3192 
	#R_SH_DIR8BP
 7

	)

3193 
	#R_SH_DIR8W
 8

	)

3194 
	#R_SH_DIR8L
 9

	)

3195 
	#R_SH_SWITCH16
 25

	)

3196 
	#R_SH_SWITCH32
 26

	)

3197 
	#R_SH_USES
 27

	)

3198 
	#R_SH_COUNT
 28

	)

3199 
	#R_SH_ALIGN
 29

	)

3200 
	#R_SH_CODE
 30

	)

3201 
	#R_SH_DATA
 31

	)

3202 
	#R_SH_LABEL
 32

	)

3203 
	#R_SH_SWITCH8
 33

	)

3204 
	#R_SH_GNU_VTINHERIT
 34

	)

3205 
	#R_SH_GNU_VTENTRY
 35

	)

3206 
	#R_SH_TLS_GD_32
 144

	)

3207 
	#R_SH_TLS_LD_32
 145

	)

3208 
	#R_SH_TLS_LDO_32
 146

	)

3209 
	#R_SH_TLS_IE_32
 147

	)

3210 
	#R_SH_TLS_LE_32
 148

	)

3211 
	#R_SH_TLS_DTPMOD32
 149

	)

3212 
	#R_SH_TLS_DTPOFF32
 150

	)

3213 
	#R_SH_TLS_TPOFF32
 151

	)

3214 
	#R_SH_GOT32
 160

	)

3215 
	#R_SH_PLT32
 161

	)

3216 
	#R_SH_COPY
 162

	)

3217 
	#R_SH_GLOB_DAT
 163

	)

3218 
	#R_SH_JMP_SLOT
 164

	)

3219 
	#R_SH_RELATIVE
 165

	)

3220 
	#R_SH_GOTOFF
 166

	)

3221 
	#R_SH_GOTPC
 167

	)

3223 
	#R_SH_NUM
 256

	)

3229 
	#EF_S390_HIGH_GPRS
 0x00000001

	)

3233 
	#R_390_NONE
 0

	)

3234 
	#R_390_8
 1

	)

3235 
	#R_390_12
 2

	)

3236 
	#R_390_16
 3

	)

3237 
	#R_390_32
 4

	)

3238 
	#R_390_PC32
 5

	)

3239 
	#R_390_GOT12
 6

	)

3240 
	#R_390_GOT32
 7

	)

3241 
	#R_390_PLT32
 8

	)

3242 
	#R_390_COPY
 9

	)

3243 
	#R_390_GLOB_DAT
 10

	)

3244 
	#R_390_JMP_SLOT
 11

	)

3245 
	#R_390_RELATIVE
 12

	)

3246 
	#R_390_GOTOFF32
 13

	)

3247 
	#R_390_GOTPC
 14

	)

3248 
	#R_390_GOT16
 15

	)

3249 
	#R_390_PC16
 16

	)

3250 
	#R_390_PC16DBL
 17

	)

3251 
	#R_390_PLT16DBL
 18

	)

3252 
	#R_390_PC32DBL
 19

	)

3253 
	#R_390_PLT32DBL
 20

	)

3254 
	#R_390_GOTPCDBL
 21

	)

3255 
	#R_390_64
 22

	)

3256 
	#R_390_PC64
 23

	)

3257 
	#R_390_GOT64
 24

	)

3258 
	#R_390_PLT64
 25

	)

3259 
	#R_390_GOTENT
 26

	)

3260 
	#R_390_GOTOFF16
 27

	)

3261 
	#R_390_GOTOFF64
 28

	)

3262 
	#R_390_GOTPLT12
 29

	)

3263 
	#R_390_GOTPLT16
 30

	)

3264 
	#R_390_GOTPLT32
 31

	)

3265 
	#R_390_GOTPLT64
 32

	)

3266 
	#R_390_GOTPLTENT
 33

	)

3267 
	#R_390_PLTOFF16
 34

	)

3268 
	#R_390_PLTOFF32
 35

	)

3269 
	#R_390_PLTOFF64
 36

	)

3270 
	#R_390_TLS_LOAD
 37

	)

3271 
	#R_390_TLS_GDCALL
 38

	)

3273 
	#R_390_TLS_LDCALL
 39

	)

3275 
	#R_390_TLS_GD32
 40

	)

3277 
	#R_390_TLS_GD64
 41

	)

3279 
	#R_390_TLS_GOTIE12
 42

	)

3281 
	#R_390_TLS_GOTIE32
 43

	)

3283 
	#R_390_TLS_GOTIE64
 44

	)

3285 
	#R_390_TLS_LDM32
 45

	)

3287 
	#R_390_TLS_LDM64
 46

	)

3289 
	#R_390_TLS_IE32
 47

	)

3291 
	#R_390_TLS_IE64
 48

	)

3293 
	#R_390_TLS_IEENT
 49

	)

3295 
	#R_390_TLS_LE32
 50

	)

3297 
	#R_390_TLS_LE64
 51

	)

3299 
	#R_390_TLS_LDO32
 52

	)

3301 
	#R_390_TLS_LDO64
 53

	)

3303 
	#R_390_TLS_DTPMOD
 54

	)

3304 
	#R_390_TLS_DTPOFF
 55

	)

3305 
	#R_390_TLS_TPOFF
 56

	)

3307 
	#R_390_20
 57

	)

3308 
	#R_390_GOT20
 58

	)

3309 
	#R_390_GOTPLT20
 59

	)

3310 
	#R_390_TLS_GOTIE20
 60

	)

3312 
	#R_390_IRELATIVE
 61

	)

3314 
	#R_390_NUM
 62

	)

3318 
	#R_CRIS_NONE
 0

	)

3319 
	#R_CRIS_8
 1

	)

3320 
	#R_CRIS_16
 2

	)

3321 
	#R_CRIS_32
 3

	)

3322 
	#R_CRIS_8_PCREL
 4

	)

3323 
	#R_CRIS_16_PCREL
 5

	)

3324 
	#R_CRIS_32_PCREL
 6

	)

3325 
	#R_CRIS_GNU_VTINHERIT
 7

	)

3326 
	#R_CRIS_GNU_VTENTRY
 8

	)

3327 
	#R_CRIS_COPY
 9

	)

3328 
	#R_CRIS_GLOB_DAT
 10

	)

3329 
	#R_CRIS_JUMP_SLOT
 11

	)

3330 
	#R_CRIS_RELATIVE
 12

	)

3331 
	#R_CRIS_16_GOT
 13

	)

3332 
	#R_CRIS_32_GOT
 14

	)

3333 
	#R_CRIS_16_GOTPLT
 15

	)

3334 
	#R_CRIS_32_GOTPLT
 16

	)

3335 
	#R_CRIS_32_GOTREL
 17

	)

3336 
	#R_CRIS_32_PLT_GOTREL
 18

	)

3337 
	#R_CRIS_32_PLT_PCREL
 19

	)

3339 
	#R_CRIS_NUM
 20

	)

3343 
	#R_X86_64_NONE
 0

	)

3344 
	#R_X86_64_64
 1

	)

3345 
	#R_X86_64_PC32
 2

	)

3346 
	#R_X86_64_GOT32
 3

	)

3347 
	#R_X86_64_PLT32
 4

	)

3348 
	#R_X86_64_COPY
 5

	)

3349 
	#R_X86_64_GLOB_DAT
 6

	)

3350 
	#R_X86_64_JUMP_SLOT
 7

	)

3351 
	#R_X86_64_RELATIVE
 8

	)

3352 
	#R_X86_64_GOTPCREL
 9

	)

3354 
	#R_X86_64_32
 10

	)

3355 
	#R_X86_64_32S
 11

	)

3356 
	#R_X86_64_16
 12

	)

3357 
	#R_X86_64_PC16
 13

	)

3358 
	#R_X86_64_8
 14

	)

3359 
	#R_X86_64_PC8
 15

	)

3360 
	#R_X86_64_DTPMOD64
 16

	)

3361 
	#R_X86_64_DTPOFF64
 17

	)

3362 
	#R_X86_64_TPOFF64
 18

	)

3363 
	#R_X86_64_TLSGD
 19

	)

3365 
	#R_X86_64_TLSLD
 20

	)

3367 
	#R_X86_64_DTPOFF32
 21

	)

3368 
	#R_X86_64_GOTTPOFF
 22

	)

3370 
	#R_X86_64_TPOFF32
 23

	)

3371 
	#R_X86_64_PC64
 24

	)

3372 
	#R_X86_64_GOTOFF64
 25

	)

3373 
	#R_X86_64_GOTPC32
 26

	)

3375 
	#R_X86_64_GOT64
 27

	)

3376 
	#R_X86_64_GOTPCREL64
 28

	)

3378 
	#R_X86_64_GOTPC64
 29

	)

3379 
	#R_X86_64_GOTPLT64
 30

	)

3380 
	#R_X86_64_PLTOFF64
 31

	)

3382 
	#R_X86_64_SIZE32
 32

	)

3383 
	#R_X86_64_SIZE64
 33

	)

3384 
	#R_X86_64_GOTPC32_TLSDESC
 34

	)

3385 
	#R_X86_64_TLSDESC_CALL
 35

	)

3387 
	#R_X86_64_TLSDESC
 36

	)

3388 
	#R_X86_64_IRELATIVE
 37

	)

3389 
	#R_X86_64_RELATIVE64
 38

	)

3392 
	#R_X86_64_GOTPCRELX
 41

	)

3395 
	#R_X86_64_REX_GOTPCRELX
 42

	)

3398 
	#R_X86_64_NUM
 43

	)

3401 
	#SHT_X86_64_UNWIND
 0x70000001

	)

3405 
	#R_MN10300_NONE
 0

	)

3406 
	#R_MN10300_32
 1

	)

3407 
	#R_MN10300_16
 2

	)

3408 
	#R_MN10300_8
 3

	)

3409 
	#R_MN10300_PCREL32
 4

	)

3410 
	#R_MN10300_PCREL16
 5

	)

3411 
	#R_MN10300_PCREL8
 6

	)

3412 
	#R_MN10300_GNU_VTINHERIT
 7

	)

3413 
	#R_MN10300_GNU_VTENTRY
 8

	)

3414 
	#R_MN10300_24
 9

	)

3415 
	#R_MN10300_GOTPC32
 10

	)

3416 
	#R_MN10300_GOTPC16
 11

	)

3417 
	#R_MN10300_GOTOFF32
 12

	)

3418 
	#R_MN10300_GOTOFF24
 13

	)

3419 
	#R_MN10300_GOTOFF16
 14

	)

3420 
	#R_MN10300_PLT32
 15

	)

3421 
	#R_MN10300_PLT16
 16

	)

3422 
	#R_MN10300_GOT32
 17

	)

3423 
	#R_MN10300_GOT24
 18

	)

3424 
	#R_MN10300_GOT16
 19

	)

3425 
	#R_MN10300_COPY
 20

	)

3426 
	#R_MN10300_GLOB_DAT
 21

	)

3427 
	#R_MN10300_JMP_SLOT
 22

	)

3428 
	#R_MN10300_RELATIVE
 23

	)

3429 
	#R_MN10300_TLS_GD
 24

	)

3430 
	#R_MN10300_TLS_LD
 25

	)

3431 
	#R_MN10300_TLS_LDO
 26

	)

3432 
	#R_MN10300_TLS_GOTIE
 27

	)

3434 
	#R_MN10300_TLS_IE
 28

	)

3436 
	#R_MN10300_TLS_LE
 29

	)

3438 
	#R_MN10300_TLS_DTPMOD
 30

	)

3439 
	#R_MN10300_TLS_DTPOFF
 31

	)

3440 
	#R_MN10300_TLS_TPOFF
 32

	)

3441 
	#R_MN10300_SYM_DIFF
 33

	)

3443 
	#R_MN10300_ALIGN
 34

	)

3445 
	#R_MN10300_NUM
 35

	)

3449 
	#R_M32R_NONE
 0

	)

3450 
	#R_M32R_16
 1

	)

3451 
	#R_M32R_32
 2

	)

3452 
	#R_M32R_24
 3

	)

3453 
	#R_M32R_10_PCREL
 4

	)

3454 
	#R_M32R_18_PCREL
 5

	)

3455 
	#R_M32R_26_PCREL
 6

	)

3456 
	#R_M32R_HI16_ULO
 7

	)

3457 
	#R_M32R_HI16_SLO
 8

	)

3458 
	#R_M32R_LO16
 9

	)

3459 
	#R_M32R_SDA16
 10

	)

3460 
	#R_M32R_GNU_VTINHERIT
 11

	)

3461 
	#R_M32R_GNU_VTENTRY
 12

	)

3463 
	#R_M32R_16_RELA
 33

	)

3464 
	#R_M32R_32_RELA
 34

	)

3465 
	#R_M32R_24_RELA
 35

	)

3466 
	#R_M32R_10_PCREL_RELA
 36

	)

3467 
	#R_M32R_18_PCREL_RELA
 37

	)

3468 
	#R_M32R_26_PCREL_RELA
 38

	)

3469 
	#R_M32R_HI16_ULO_RELA
 39

	)

3470 
	#R_M32R_HI16_SLO_RELA
 40

	)

3471 
	#R_M32R_LO16_RELA
 41

	)

3472 
	#R_M32R_SDA16_RELA
 42

	)

3473 
	#R_M32R_RELA_GNU_VTINHERIT
 43

	)

3474 
	#R_M32R_RELA_GNU_VTENTRY
 44

	)

3475 
	#R_M32R_REL32
 45

	)

3477 
	#R_M32R_GOT24
 48

	)

3478 
	#R_M32R_26_PLTREL
 49

	)

3479 
	#R_M32R_COPY
 50

	)

3480 
	#R_M32R_GLOB_DAT
 51

	)

3481 
	#R_M32R_JMP_SLOT
 52

	)

3482 
	#R_M32R_RELATIVE
 53

	)

3483 
	#R_M32R_GOTOFF
 54

	)

3484 
	#R_M32R_GOTPC24
 55

	)

3485 
	#R_M32R_GOT16_HI_ULO
 56

	)

3487 
	#R_M32R_GOT16_HI_SLO
 57

	)

3489 
	#R_M32R_GOT16_LO
 58

	)

3490 
	#R_M32R_GOTPC_HI_ULO
 59

	)

3492 
	#R_M32R_GOTPC_HI_SLO
 60

	)

3494 
	#R_M32R_GOTPC_LO
 61

	)

3496 
	#R_M32R_GOTOFF_HI_ULO
 62

	)

3498 
	#R_M32R_GOTOFF_HI_SLO
 63

	)

3500 
	#R_M32R_GOTOFF_LO
 64

	)

3501 
	#R_M32R_NUM
 256

	)

3504 
	#R_MICROBLAZE_NONE
 0

	)

3505 
	#R_MICROBLAZE_32
 1

	)

3506 
	#R_MICROBLAZE_32_PCREL
 2

	)

3507 
	#R_MICROBLAZE_64_PCREL
 3

	)

3508 
	#R_MICROBLAZE_32_PCREL_LO
 4

	)

3509 
	#R_MICROBLAZE_64
 5

	)

3510 
	#R_MICROBLAZE_32_LO
 6

	)

3511 
	#R_MICROBLAZE_SRO32
 7

	)

3512 
	#R_MICROBLAZE_SRW32
 8

	)

3513 
	#R_MICROBLAZE_64_NONE
 9

	)

3514 
	#R_MICROBLAZE_32_SYM_OP_SYM
 10

	)

3515 
	#R_MICROBLAZE_GNU_VTINHERIT
 11

	)

3516 
	#R_MICROBLAZE_GNU_VTENTRY
 12

	)

3517 
	#R_MICROBLAZE_GOTPC_64
 13

	)

3518 
	#R_MICROBLAZE_GOT_64
 14

	)

3519 
	#R_MICROBLAZE_PLT_64
 15

	)

3520 
	#R_MICROBLAZE_REL
 16

	)

3521 
	#R_MICROBLAZE_JUMP_SLOT
 17

	)

3522 
	#R_MICROBLAZE_GLOB_DAT
 18

	)

3523 
	#R_MICROBLAZE_GOTOFF_64
 19

	)

3524 
	#R_MICROBLAZE_GOTOFF_32
 20

	)

3525 
	#R_MICROBLAZE_COPY
 21

	)

3526 
	#R_MICROBLAZE_TLS
 22

	)

3527 
	#R_MICROBLAZE_TLSGD
 23

	)

3528 
	#R_MICROBLAZE_TLSLD
 24

	)

3529 
	#R_MICROBLAZE_TLSDTPMOD32
 25

	)

3530 
	#R_MICROBLAZE_TLSDTPREL32
 26

	)

3531 
	#R_MICROBLAZE_TLSDTPREL64
 27

	)

3532 
	#R_MICROBLAZE_TLSGOTTPREL32
 28

	)

3533 
	#R_MICROBLAZE_TLSTPREL32
 29

	)

3536 
	#DT_NIOS2_GP
 0x70000002

	)

3539 
	#R_NIOS2_NONE
 0

	)

3540 
	#R_NIOS2_S16
 1

	)

3541 
	#R_NIOS2_U16
 2

	)

3542 
	#R_NIOS2_PCREL16
 3

	)

3543 
	#R_NIOS2_CALL26
 4

	)

3544 
	#R_NIOS2_IMM5
 5

	)

3545 
	#R_NIOS2_CACHE_OPX
 6

	)

3546 
	#R_NIOS2_IMM6
 7

	)

3547 
	#R_NIOS2_IMM8
 8

	)

3548 
	#R_NIOS2_HI16
 9

	)

3549 
	#R_NIOS2_LO16
 10

	)

3550 
	#R_NIOS2_HIADJ16
 11

	)

3551 
	#R_NIOS2_BFD_RELOC_32
 12

	)

3552 
	#R_NIOS2_BFD_RELOC_16
 13

	)

3553 
	#R_NIOS2_BFD_RELOC_8
 14

	)

3554 
	#R_NIOS2_GPREL
 15

	)

3555 
	#R_NIOS2_GNU_VTINHERIT
 16

	)

3556 
	#R_NIOS2_GNU_VTENTRY
 17

	)

3557 
	#R_NIOS2_UJMP
 18

	)

3558 
	#R_NIOS2_CJMP
 19

	)

3559 
	#R_NIOS2_CALLR
 20

	)

3560 
	#R_NIOS2_ALIGN
 21

	)

3562 
	#R_NIOS2_GOT16
 22

	)

3563 
	#R_NIOS2_CALL16
 23

	)

3564 
	#R_NIOS2_GOTOFF_LO
 24

	)

3565 
	#R_NIOS2_GOTOFF_HA
 25

	)

3566 
	#R_NIOS2_PCREL_LO
 26

	)

3567 
	#R_NIOS2_PCREL_HA
 27

	)

3568 
	#R_NIOS2_TLS_GD16
 28

	)

3569 
	#R_NIOS2_TLS_LDM16
 29

	)

3570 
	#R_NIOS2_TLS_LDO16
 30

	)

3571 
	#R_NIOS2_TLS_IE16
 31

	)

3572 
	#R_NIOS2_TLS_LE16
 32

	)

3573 
	#R_NIOS2_TLS_DTPMOD
 33

	)

3574 
	#R_NIOS2_TLS_DTPREL
 34

	)

3575 
	#R_NIOS2_TLS_TPREL
 35

	)

3576 
	#R_NIOS2_COPY
 36

	)

3577 
	#R_NIOS2_GLOB_DAT
 37

	)

3578 
	#R_NIOS2_JUMP_SLOT
 38

	)

3579 
	#R_NIOS2_RELATIVE
 39

	)

3580 
	#R_NIOS2_GOTOFF
 40

	)

3581 
	#R_NIOS2_CALL26_NOAT
 41

	)

3582 
	#R_NIOS2_GOT_LO
 42

	)

3583 
	#R_NIOS2_GOT_HA
 43

	)

3584 
	#R_NIOS2_CALL_LO
 44

	)

3585 
	#R_NIOS2_CALL_HA
 45

	)

3588 
	#R_TILEPRO_NONE
 0

	)

3589 
	#R_TILEPRO_32
 1

	)

3590 
	#R_TILEPRO_16
 2

	)

3591 
	#R_TILEPRO_8
 3

	)

3592 
	#R_TILEPRO_32_PCREL
 4

	)

3593 
	#R_TILEPRO_16_PCREL
 5

	)

3594 
	#R_TILEPRO_8_PCREL
 6

	)

3595 
	#R_TILEPRO_LO16
 7

	)

3596 
	#R_TILEPRO_HI16
 8

	)

3597 
	#R_TILEPRO_HA16
 9

	)

3598 
	#R_TILEPRO_COPY
 10

	)

3599 
	#R_TILEPRO_GLOB_DAT
 11

	)

3600 
	#R_TILEPRO_JMP_SLOT
 12

	)

3601 
	#R_TILEPRO_RELATIVE
 13

	)

3602 
	#R_TILEPRO_BROFF_X1
 14

	)

3603 
	#R_TILEPRO_JOFFLONG_X1
 15

	)

3604 
	#R_TILEPRO_JOFFLONG_X1_PLT
 16

	)

3605 
	#R_TILEPRO_IMM8_X0
 17

	)

3606 
	#R_TILEPRO_IMM8_Y0
 18

	)

3607 
	#R_TILEPRO_IMM8_X1
 19

	)

3608 
	#R_TILEPRO_IMM8_Y1
 20

	)

3609 
	#R_TILEPRO_MT_IMM15_X1
 21

	)

3610 
	#R_TILEPRO_MF_IMM15_X1
 22

	)

3611 
	#R_TILEPRO_IMM16_X0
 23

	)

3612 
	#R_TILEPRO_IMM16_X1
 24

	)

3613 
	#R_TILEPRO_IMM16_X0_LO
 25

	)

3614 
	#R_TILEPRO_IMM16_X1_LO
 26

	)

3615 
	#R_TILEPRO_IMM16_X0_HI
 27

	)

3616 
	#R_TILEPRO_IMM16_X1_HI
 28

	)

3617 
	#R_TILEPRO_IMM16_X0_HA
 29

	)

3618 
	#R_TILEPRO_IMM16_X1_HA
 30

	)

3619 
	#R_TILEPRO_IMM16_X0_PCREL
 31

	)

3620 
	#R_TILEPRO_IMM16_X1_PCREL
 32

	)

3621 
	#R_TILEPRO_IMM16_X0_LO_PCREL
 33

	)

3622 
	#R_TILEPRO_IMM16_X1_LO_PCREL
 34

	)

3623 
	#R_TILEPRO_IMM16_X0_HI_PCREL
 35

	)

3624 
	#R_TILEPRO_IMM16_X1_HI_PCREL
 36

	)

3625 
	#R_TILEPRO_IMM16_X0_HA_PCREL
 37

	)

3626 
	#R_TILEPRO_IMM16_X1_HA_PCREL
 38

	)

3627 
	#R_TILEPRO_IMM16_X0_GOT
 39

	)

3628 
	#R_TILEPRO_IMM16_X1_GOT
 40

	)

3629 
	#R_TILEPRO_IMM16_X0_GOT_LO
 41

	)

3630 
	#R_TILEPRO_IMM16_X1_GOT_LO
 42

	)

3631 
	#R_TILEPRO_IMM16_X0_GOT_HI
 43

	)

3632 
	#R_TILEPRO_IMM16_X1_GOT_HI
 44

	)

3633 
	#R_TILEPRO_IMM16_X0_GOT_HA
 45

	)

3634 
	#R_TILEPRO_IMM16_X1_GOT_HA
 46

	)

3635 
	#R_TILEPRO_MMSTART_X0
 47

	)

3636 
	#R_TILEPRO_MMEND_X0
 48

	)

3637 
	#R_TILEPRO_MMSTART_X1
 49

	)

3638 
	#R_TILEPRO_MMEND_X1
 50

	)

3639 
	#R_TILEPRO_SHAMT_X0
 51

	)

3640 
	#R_TILEPRO_SHAMT_X1
 52

	)

3641 
	#R_TILEPRO_SHAMT_Y0
 53

	)

3642 
	#R_TILEPRO_SHAMT_Y1
 54

	)

3643 
	#R_TILEPRO_DEST_IMM8_X1
 55

	)

3645 
	#R_TILEPRO_TLS_GD_CALL
 60

	)

3646 
	#R_TILEPRO_IMM8_X0_TLS_GD_ADD
 61

	)

3647 
	#R_TILEPRO_IMM8_X1_TLS_GD_ADD
 62

	)

3648 
	#R_TILEPRO_IMM8_Y0_TLS_GD_ADD
 63

	)

3649 
	#R_TILEPRO_IMM8_Y1_TLS_GD_ADD
 64

	)

3650 
	#R_TILEPRO_TLS_IE_LOAD
 65

	)

3651 
	#R_TILEPRO_IMM16_X0_TLS_GD
 66

	)

3652 
	#R_TILEPRO_IMM16_X1_TLS_GD
 67

	)

3653 
	#R_TILEPRO_IMM16_X0_TLS_GD_LO
 68

	)

3654 
	#R_TILEPRO_IMM16_X1_TLS_GD_LO
 69

	)

3655 
	#R_TILEPRO_IMM16_X0_TLS_GD_HI
 70

	)

3656 
	#R_TILEPRO_IMM16_X1_TLS_GD_HI
 71

	)

3657 
	#R_TILEPRO_IMM16_X0_TLS_GD_HA
 72

	)

3658 
	#R_TILEPRO_IMM16_X1_TLS_GD_HA
 73

	)

3659 
	#R_TILEPRO_IMM16_X0_TLS_IE
 74

	)

3660 
	#R_TILEPRO_IMM16_X1_TLS_IE
 75

	)

3661 
	#R_TILEPRO_IMM16_X0_TLS_IE_LO
 76

	)

3662 
	#R_TILEPRO_IMM16_X1_TLS_IE_LO
 77

	)

3663 
	#R_TILEPRO_IMM16_X0_TLS_IE_HI
 78

	)

3664 
	#R_TILEPRO_IMM16_X1_TLS_IE_HI
 79

	)

3665 
	#R_TILEPRO_IMM16_X0_TLS_IE_HA
 80

	)

3666 
	#R_TILEPRO_IMM16_X1_TLS_IE_HA
 81

	)

3667 
	#R_TILEPRO_TLS_DTPMOD32
 82

	)

3668 
	#R_TILEPRO_TLS_DTPOFF32
 83

	)

3669 
	#R_TILEPRO_TLS_TPOFF32
 84

	)

3670 
	#R_TILEPRO_IMM16_X0_TLS_LE
 85

	)

3671 
	#R_TILEPRO_IMM16_X1_TLS_LE
 86

	)

3672 
	#R_TILEPRO_IMM16_X0_TLS_LE_LO
 87

	)

3673 
	#R_TILEPRO_IMM16_X1_TLS_LE_LO
 88

	)

3674 
	#R_TILEPRO_IMM16_X0_TLS_LE_HI
 89

	)

3675 
	#R_TILEPRO_IMM16_X1_TLS_LE_HI
 90

	)

3676 
	#R_TILEPRO_IMM16_X0_TLS_LE_HA
 91

	)

3677 
	#R_TILEPRO_IMM16_X1_TLS_LE_HA
 92

	)

3679 
	#R_TILEPRO_GNU_VTINHERIT
 128

	)

3680 
	#R_TILEPRO_GNU_VTENTRY
 129

	)

3682 
	#R_TILEPRO_NUM
 130

	)

3686 
	#R_TILEGX_NONE
 0

	)

3687 
	#R_TILEGX_64
 1

	)

3688 
	#R_TILEGX_32
 2

	)

3689 
	#R_TILEGX_16
 3

	)

3690 
	#R_TILEGX_8
 4

	)

3691 
	#R_TILEGX_64_PCREL
 5

	)

3692 
	#R_TILEGX_32_PCREL
 6

	)

3693 
	#R_TILEGX_16_PCREL
 7

	)

3694 
	#R_TILEGX_8_PCREL
 8

	)

3695 
	#R_TILEGX_HW0
 9

	)

3696 
	#R_TILEGX_HW1
 10

	)

3697 
	#R_TILEGX_HW2
 11

	)

3698 
	#R_TILEGX_HW3
 12

	)

3699 
	#R_TILEGX_HW0_LAST
 13

	)

3700 
	#R_TILEGX_HW1_LAST
 14

	)

3701 
	#R_TILEGX_HW2_LAST
 15

	)

3702 
	#R_TILEGX_COPY
 16

	)

3703 
	#R_TILEGX_GLOB_DAT
 17

	)

3704 
	#R_TILEGX_JMP_SLOT
 18

	)

3705 
	#R_TILEGX_RELATIVE
 19

	)

3706 
	#R_TILEGX_BROFF_X1
 20

	)

3707 
	#R_TILEGX_JUMPOFF_X1
 21

	)

3708 
	#R_TILEGX_JUMPOFF_X1_PLT
 22

	)

3709 
	#R_TILEGX_IMM8_X0
 23

	)

3710 
	#R_TILEGX_IMM8_Y0
 24

	)

3711 
	#R_TILEGX_IMM8_X1
 25

	)

3712 
	#R_TILEGX_IMM8_Y1
 26

	)

3713 
	#R_TILEGX_DEST_IMM8_X1
 27

	)

3714 
	#R_TILEGX_MT_IMM14_X1
 28

	)

3715 
	#R_TILEGX_MF_IMM14_X1
 29

	)

3716 
	#R_TILEGX_MMSTART_X0
 30

	)

3717 
	#R_TILEGX_MMEND_X0
 31

	)

3718 
	#R_TILEGX_SHAMT_X0
 32

	)

3719 
	#R_TILEGX_SHAMT_X1
 33

	)

3720 
	#R_TILEGX_SHAMT_Y0
 34

	)

3721 
	#R_TILEGX_SHAMT_Y1
 35

	)

3722 
	#R_TILEGX_IMM16_X0_HW0
 36

	)

3723 
	#R_TILEGX_IMM16_X1_HW0
 37

	)

3724 
	#R_TILEGX_IMM16_X0_HW1
 38

	)

3725 
	#R_TILEGX_IMM16_X1_HW1
 39

	)

3726 
	#R_TILEGX_IMM16_X0_HW2
 40

	)

3727 
	#R_TILEGX_IMM16_X1_HW2
 41

	)

3728 
	#R_TILEGX_IMM16_X0_HW3
 42

	)

3729 
	#R_TILEGX_IMM16_X1_HW3
 43

	)

3730 
	#R_TILEGX_IMM16_X0_HW0_LAST
 44

	)

3731 
	#R_TILEGX_IMM16_X1_HW0_LAST
 45

	)

3732 
	#R_TILEGX_IMM16_X0_HW1_LAST
 46

	)

3733 
	#R_TILEGX_IMM16_X1_HW1_LAST
 47

	)

3734 
	#R_TILEGX_IMM16_X0_HW2_LAST
 48

	)

3735 
	#R_TILEGX_IMM16_X1_HW2_LAST
 49

	)

3736 
	#R_TILEGX_IMM16_X0_HW0_PCREL
 50

	)

3737 
	#R_TILEGX_IMM16_X1_HW0_PCREL
 51

	)

3738 
	#R_TILEGX_IMM16_X0_HW1_PCREL
 52

	)

3739 
	#R_TILEGX_IMM16_X1_HW1_PCREL
 53

	)

3740 
	#R_TILEGX_IMM16_X0_HW2_PCREL
 54

	)

3741 
	#R_TILEGX_IMM16_X1_HW2_PCREL
 55

	)

3742 
	#R_TILEGX_IMM16_X0_HW3_PCREL
 56

	)

3743 
	#R_TILEGX_IMM16_X1_HW3_PCREL
 57

	)

3744 
	#R_TILEGX_IMM16_X0_HW0_LAST_PCREL
 58

	)

3745 
	#R_TILEGX_IMM16_X1_HW0_LAST_PCREL
 59

	)

3746 
	#R_TILEGX_IMM16_X0_HW1_LAST_PCREL
 60

	)

3747 
	#R_TILEGX_IMM16_X1_HW1_LAST_PCREL
 61

	)

3748 
	#R_TILEGX_IMM16_X0_HW2_LAST_PCREL
 62

	)

3749 
	#R_TILEGX_IMM16_X1_HW2_LAST_PCREL
 63

	)

3750 
	#R_TILEGX_IMM16_X0_HW0_GOT
 64

	)

3751 
	#R_TILEGX_IMM16_X1_HW0_GOT
 65

	)

3752 
	#R_TILEGX_IMM16_X0_HW0_PLT_PCREL
 66

	)

3753 
	#R_TILEGX_IMM16_X1_HW0_PLT_PCREL
 67

	)

3754 
	#R_TILEGX_IMM16_X0_HW1_PLT_PCREL
 68

	)

3755 
	#R_TILEGX_IMM16_X1_HW1_PLT_PCREL
 69

	)

3756 
	#R_TILEGX_IMM16_X0_HW2_PLT_PCREL
 70

	)

3757 
	#R_TILEGX_IMM16_X1_HW2_PLT_PCREL
 71

	)

3758 
	#R_TILEGX_IMM16_X0_HW0_LAST_GOT
 72

	)

3759 
	#R_TILEGX_IMM16_X1_HW0_LAST_GOT
 73

	)

3760 
	#R_TILEGX_IMM16_X0_HW1_LAST_GOT
 74

	)

3761 
	#R_TILEGX_IMM16_X1_HW1_LAST_GOT
 75

	)

3762 
	#R_TILEGX_IMM16_X0_HW3_PLT_PCREL
 76

	)

3763 
	#R_TILEGX_IMM16_X1_HW3_PLT_PCREL
 77

	)

3764 
	#R_TILEGX_IMM16_X0_HW0_TLS_GD
 78

	)

3765 
	#R_TILEGX_IMM16_X1_HW0_TLS_GD
 79

	)

3766 
	#R_TILEGX_IMM16_X0_HW0_TLS_LE
 80

	)

3767 
	#R_TILEGX_IMM16_X1_HW0_TLS_LE
 81

	)

3768 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_LE
 82

	)

3769 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_LE
 83

	)

3770 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_LE
 84

	)

3771 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_LE
 85

	)

3772 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_GD
 86

	)

3773 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_GD
 87

	)

3774 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_GD
 88

	)

3775 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_GD
 89

	)

3777 
	#R_TILEGX_IMM16_X0_HW0_TLS_IE
 92

	)

3778 
	#R_TILEGX_IMM16_X1_HW0_TLS_IE
 93

	)

3779 
	#R_TILEGX_IMM16_X0_HW0_LAST_PLT_PCREL
 94

	)

3780 
	#R_TILEGX_IMM16_X1_HW0_LAST_PLT_PCREL
 95

	)

3781 
	#R_TILEGX_IMM16_X0_HW1_LAST_PLT_PCREL
 96

	)

3782 
	#R_TILEGX_IMM16_X1_HW1_LAST_PLT_PCREL
 97

	)

3783 
	#R_TILEGX_IMM16_X0_HW2_LAST_PLT_PCREL
 98

	)

3784 
	#R_TILEGX_IMM16_X1_HW2_LAST_PLT_PCREL
 99

	)

3785 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_IE
 100

	)

3786 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_IE
 101

	)

3787 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_IE
 102

	)

3788 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_IE
 103

	)

3790 
	#R_TILEGX_TLS_DTPMOD64
 106

	)

3791 
	#R_TILEGX_TLS_DTPOFF64
 107

	)

3792 
	#R_TILEGX_TLS_TPOFF64
 108

	)

3793 
	#R_TILEGX_TLS_DTPMOD32
 109

	)

3794 
	#R_TILEGX_TLS_DTPOFF32
 110

	)

3795 
	#R_TILEGX_TLS_TPOFF32
 111

	)

3796 
	#R_TILEGX_TLS_GD_CALL
 112

	)

3797 
	#R_TILEGX_IMM8_X0_TLS_GD_ADD
 113

	)

3798 
	#R_TILEGX_IMM8_X1_TLS_GD_ADD
 114

	)

3799 
	#R_TILEGX_IMM8_Y0_TLS_GD_ADD
 115

	)

3800 
	#R_TILEGX_IMM8_Y1_TLS_GD_ADD
 116

	)

3801 
	#R_TILEGX_TLS_IE_LOAD
 117

	)

3802 
	#R_TILEGX_IMM8_X0_TLS_ADD
 118

	)

3803 
	#R_TILEGX_IMM8_X1_TLS_ADD
 119

	)

3804 
	#R_TILEGX_IMM8_Y0_TLS_ADD
 120

	)

3805 
	#R_TILEGX_IMM8_Y1_TLS_ADD
 121

	)

3807 
	#R_TILEGX_GNU_VTINHERIT
 128

	)

3808 
	#R_TILEGX_GNU_VTENTRY
 129

	)

3810 
	#R_TILEGX_NUM
 130

	)

3813 
	#EF_RISCV_RVC
 0x0001

	)

3814 
	#EF_RISCV_FLOAT_ABI
 0x0006

	)

3815 
	#EF_RISCV_FLOAT_ABI_SOFT
 0x0000

	)

3816 
	#EF_RISCV_FLOAT_ABI_SINGLE
 0x0002

	)

3817 
	#EF_RISCV_FLOAT_ABI_DOUBLE
 0x0004

	)

3818 
	#EF_RISCV_FLOAT_ABI_QUAD
 0x0006

	)

3821 
	#R_RISCV_NONE
 0

	)

3822 
	#R_RISCV_32
 1

	)

3823 
	#R_RISCV_64
 2

	)

3824 
	#R_RISCV_RELATIVE
 3

	)

3825 
	#R_RISCV_COPY
 4

	)

3826 
	#R_RISCV_JUMP_SLOT
 5

	)

3827 
	#R_RISCV_TLS_DTPMOD32
 6

	)

3828 
	#R_RISCV_TLS_DTPMOD64
 7

	)

3829 
	#R_RISCV_TLS_DTPREL32
 8

	)

3830 
	#R_RISCV_TLS_DTPREL64
 9

	)

3831 
	#R_RISCV_TLS_TPREL32
 10

	)

3832 
	#R_RISCV_TLS_TPREL64
 11

	)

3833 
	#R_RISCV_BRANCH
 16

	)

3834 
	#R_RISCV_JAL
 17

	)

3835 
	#R_RISCV_CALL
 18

	)

3836 
	#R_RISCV_CALL_PLT
 19

	)

3837 
	#R_RISCV_GOT_HI20
 20

	)

3838 
	#R_RISCV_TLS_GOT_HI20
 21

	)

3839 
	#R_RISCV_TLS_GD_HI20
 22

	)

3840 
	#R_RISCV_PCREL_HI20
 23

	)

3841 
	#R_RISCV_PCREL_LO12_I
 24

	)

3842 
	#R_RISCV_PCREL_LO12_S
 25

	)

3843 
	#R_RISCV_HI20
 26

	)

3844 
	#R_RISCV_LO12_I
 27

	)

3845 
	#R_RISCV_LO12_S
 28

	)

3846 
	#R_RISCV_TPREL_HI20
 29

	)

3847 
	#R_RISCV_TPREL_LO12_I
 30

	)

3848 
	#R_RISCV_TPREL_LO12_S
 31

	)

3849 
	#R_RISCV_TPREL_ADD
 32

	)

3850 
	#R_RISCV_ADD8
 33

	)

3851 
	#R_RISCV_ADD16
 34

	)

3852 
	#R_RISCV_ADD32
 35

	)

3853 
	#R_RISCV_ADD64
 36

	)

3854 
	#R_RISCV_SUB8
 37

	)

3855 
	#R_RISCV_SUB16
 38

	)

3856 
	#R_RISCV_SUB32
 39

	)

3857 
	#R_RISCV_SUB64
 40

	)

3858 
	#R_RISCV_GNU_VTINHERIT
 41

	)

3859 
	#R_RISCV_GNU_VTENTRY
 42

	)

3860 
	#R_RISCV_ALIGN
 43

	)

3861 
	#R_RISCV_RVC_BRANCH
 44

	)

3862 
	#R_RISCV_RVC_JUMP
 45

	)

3863 
	#R_RISCV_RVC_LUI
 46

	)

3864 
	#R_RISCV_GPREL_I
 47

	)

3865 
	#R_RISCV_GPREL_S
 48

	)

3866 
	#R_RISCV_TPREL_I
 49

	)

3867 
	#R_RISCV_TPREL_S
 50

	)

3868 
	#R_RISCV_RELAX
 51

	)

3869 
	#R_RISCV_SUB6
 52

	)

3870 
	#R_RISCV_SET6
 53

	)

3871 
	#R_RISCV_SET8
 54

	)

3872 
	#R_RISCV_SET16
 55

	)

3873 
	#R_RISCV_SET32
 56

	)

3874 
	#R_RISCV_32_PCREL
 57

	)

3876 
	#R_RISCV_NUM
 58

	)

3880 
	#R_BPF_NONE
 0

	)

3881 
	#R_BPF_64_64
 1

	)

3882 
	#R_BPF_64_32
 10

	)

3886 
	#R_METAG_HIADDR16
 0

	)

3887 
	#R_METAG_LOADDR16
 1

	)

3888 
	#R_METAG_ADDR32
 2

	)

3889 
	#R_METAG_NONE
 3

	)

3890 
	#R_METAG_RELBRANCH
 4

	)

3891 
	#R_METAG_GETSETOFF
 5

	)

3894 
	#R_METAG_REG32OP1
 6

	)

3895 
	#R_METAG_REG32OP2
 7

	)

3896 
	#R_METAG_REG32OP3
 8

	)

3897 
	#R_METAG_REG16OP1
 9

	)

3898 
	#R_METAG_REG16OP2
 10

	)

3899 
	#R_METAG_REG16OP3
 11

	)

3900 
	#R_METAG_REG32OP4
 12

	)

3902 
	#R_METAG_HIOG
 13

	)

3903 
	#R_METAG_LOOG
 14

	)

3905 
	#R_METAG_REL8
 15

	)

3906 
	#R_METAG_REL16
 16

	)

3909 
	#R_METAG_GNU_VTINHERIT
 30

	)

3910 
	#R_METAG_GNU_VTENTRY
 31

	)

3913 
	#R_METAG_HI16_GOTOFF
 32

	)

3914 
	#R_METAG_LO16_GOTOFF
 33

	)

3915 
	#R_METAG_GETSET_GOTOFF
 34

	)

3916 
	#R_METAG_GETSET_GOT
 35

	)

3917 
	#R_METAG_HI16_GOTPC
 36

	)

3918 
	#R_METAG_LO16_GOTPC
 37

	)

3919 
	#R_METAG_HI16_PLT
 38

	)

3920 
	#R_METAG_LO16_PLT
 39

	)

3921 
	#R_METAG_RELBRANCH_PLT
 40

	)

3922 
	#R_METAG_GOTOFF
 41

	)

3923 
	#R_METAG_PLT
 42

	)

3924 
	#R_METAG_COPY
 43

	)

3925 
	#R_METAG_JMP_SLOT
 44

	)

3926 
	#R_METAG_RELATIVE
 45

	)

3927 
	#R_METAG_GLOB_DAT
 46

	)

3930 
	#R_METAG_TLS_GD
 47

	)

3931 
	#R_METAG_TLS_LDM
 48

	)

3932 
	#R_METAG_TLS_LDO_HI16
 49

	)

3933 
	#R_METAG_TLS_LDO_LO16
 50

	)

3934 
	#R_METAG_TLS_LDO
 51

	)

3935 
	#R_METAG_TLS_IE
 52

	)

3936 
	#R_METAG_TLS_IENONPIC
 53

	)

3937 
	#R_METAG_TLS_IENONPIC_HI16
 54

	)

3938 
	#R_METAG_TLS_IENONPIC_LO16
 55

	)

3939 
	#R_METAG_TLS_TPOFF
 56

	)

3940 
	#R_METAG_TLS_DTPMOD
 57

	)

3941 
	#R_METAG_TLS_DTPOFF
 58

	)

3942 
	#R_METAG_TLS_LE
 59

	)

3943 
	#R_METAG_TLS_LE_HI16
 60

	)

3944 
	#R_METAG_TLS_LE_LO16
 61

	)

3947 
	#R_NDS32_NONE
 0

	)

3948 
	#R_NDS32_32_RELA
 20

	)

3949 
	#R_NDS32_COPY
 39

	)

3950 
	#R_NDS32_GLOB_DAT
 40

	)

3951 
	#R_NDS32_JMP_SLOT
 41

	)

3952 
	#R_NDS32_RELATIVE
 42

	)

3953 
	#R_NDS32_TLS_TPOFF
 102

	)

3954 
	#R_NDS32_TLS_DESC
 119

	)

3956 
	g__END_DECLS


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


23 
	#_ERRNO_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/î∫o.h
>

32 #i‚de‡
__ASSEMBLER__


34 
__BEGIN_DECLS


37 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
__©åibuã_c⁄°__
;

38 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

40 #ifde‡
__USE_GNU


45 *
¥ogøm_övoˇti⁄_«me
;

46 *
¥ogøm_övoˇti⁄_sh‹t_«me
;

48 
	~<bôs/ty≥s/îr‹_t.h
>

52 
__END_DECLS


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

39 #ifde‡
__O_TMPFILE


40 
	#__OPEN_NEEDS_MODE
(
oÊag
) \

41 (((
oÊag
Ë& 
O_CREAT
Ë!0 || ((oÊagË& 
__O_TMPFILE
Ë=__O_TMPFILE)

	)

43 
	#__OPEN_NEEDS_MODE
(
oÊag
Ë(((oÊagË& 
O_CREAT
Ë!0)

	)

49 #i‚de‡
__mode_t_deföed


50 
__mode_t
 
	tmode_t
;

51 
	#__mode_t_deföed


	)

54 #i‚de‡
__off_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__off_t
 
	toff_t
;

58 
__off64_t
 
	toff_t
;

60 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

68 #i‚de‡
__pid_t_deföed


69 
__pid_t
 
	tpid_t
;

70 
	#__pid_t_deföed


	)

74 #ifde‡
__USE_XOPEN2K8


75 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 
	~<bôs/°©.h
>

80 
	#S_IFMT
 
__S_IFMT


	)

81 
	#S_IFDIR
 
__S_IFDIR


	)

82 
	#S_IFCHR
 
__S_IFCHR


	)

83 
	#S_IFBLK
 
__S_IFBLK


	)

84 
	#S_IFREG
 
__S_IFREG


	)

85 #ifde‡
__S_IFIFO


86 
	#S_IFIFO
 
__S_IFIFO


	)

88 #ifde‡
__S_IFLNK


89 
	#S_IFLNK
 
__S_IFLNK


	)

91 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


92 
	#S_IFSOCK
 
__S_IFSOCK


	)

97 
	#S_ISUID
 
__S_ISUID


	)

98 
	#S_ISGID
 
__S_ISGID


	)

100 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


102 
	#S_ISVTX
 
__S_ISVTX


	)

105 
	#S_IRUSR
 
__S_IREAD


	)

106 
	#S_IWUSR
 
__S_IWRITE


	)

107 
	#S_IXUSR
 
__S_IEXEC


	)

109 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

111 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

112 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

113 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

115 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

117 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

118 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

119 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

121 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

124 #ifdef 
__USE_MISC


125 #i‚de‡
R_OK


128 
	#R_OK
 4

	)

129 
	#W_OK
 2

	)

130 
	#X_OK
 1

	)

131 
	#F_OK
 0

	)

136 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


137 
	#SEEK_SET
 0

	)

138 
	#SEEK_CUR
 1

	)

139 
	#SEEK_END
 2

	)

147 #i‚de‡
__USE_FILE_OFFSET64


148 
f˙é
 (
__fd
, 
__cmd
, ...);

150 #ifde‡
__REDIRECT


151 
__REDIRECT
 (
f˙é
, (
__fd
, 
__cmd
, ...), 
f˙é64
);

153 
	#f˙é
 
f˙é64


	)

156 #ifde‡
__USE_LARGEFILE64


157 
f˙é64
 (
__fd
, 
__cmd
, ...);

167 #i‚de‡
__USE_FILE_OFFSET64


168 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

170 #ifde‡
__REDIRECT


171 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

172 
	`__n⁄nuŒ
 ((1));

174 
	#›í
 
›í64


	)

177 #ifde‡
__USE_LARGEFILE64


178 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

181 #ifde‡
__USE_ATFILE


191 #i‚de‡
__USE_FILE_OFFSET64


192 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

193 
	`__n⁄nuŒ
 ((2));

195 #ifde‡
__REDIRECT


196 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

197 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

199 
	#›í©
 
›í©64


	)

202 #ifde‡
__USE_LARGEFILE64


203 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

204 
	`__n⁄nuŒ
 ((2));

213 #i‚de‡
__USE_FILE_OFFSET64


214 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

216 #ifde‡
__REDIRECT


217 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

218 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

220 
	#¸ót
 
¸ót64


	)

223 #ifde‡
__USE_LARGEFILE64


224 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

227 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

228 && !
deföed
 
__USE_POSIX
))

237 
	#F_ULOCK
 0

	)

238 
	#F_LOCK
 1

	)

239 
	#F_TLOCK
 2

	)

240 
	#F_TEST
 3

	)

242 #i‚de‡
__USE_FILE_OFFSET64


243 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

245 #ifde‡
__REDIRECT


246 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

248 
	#lockf
 
lockf64


	)

251 #ifde‡
__USE_LARGEFILE64


252 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

256 #ifde‡
__USE_XOPEN2K


259 #i‚de‡
__USE_FILE_OFFSET64


260 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

261 
__advi£
Ë
__THROW
;

263 #ifde‡
__REDIRECT_NTH


264 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

265 
__off64_t
 
__Àn
, 
__advi£
),

266 
posix_Ádvi£64
);

268 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

271 #ifde‡
__USE_LARGEFILE64


272 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

273 
__advi£
Ë
__THROW
;

281 #i‚de‡
__USE_FILE_OFFSET64


282 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

284 #ifde‡
__REDIRECT


285 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

286 
__off64_t
 
__Àn
),

287 
posix_ÁŒoˇã64
);

289 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

292 #ifde‡
__USE_LARGEFILE64


293 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

299 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

300 && 
deföed
 
__va_¨g_∑ck_Àn


301 
	~<bôs/f˙é2.h
>

304 
__END_DECLS


	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

120 #unde‡
__USE_ISOC11


121 #unde‡
__USE_ISOC99


122 #unde‡
__USE_ISOC95


123 #unde‡
__USE_ISOCXX11


124 #unde‡
__USE_POSIX


125 #unde‡
__USE_POSIX2


126 #unde‡
__USE_POSIX199309


127 #unde‡
__USE_POSIX199506


128 #unde‡
__USE_XOPEN


129 #unde‡
__USE_XOPEN_EXTENDED


130 #unde‡
__USE_UNIX98


131 #unde‡
__USE_XOPEN2K


132 #unde‡
__USE_XOPEN2KXSI


133 #unde‡
__USE_XOPEN2K8


134 #unde‡
__USE_XOPEN2K8XSI


135 #unde‡
__USE_LARGEFILE


136 #unde‡
__USE_LARGEFILE64


137 #unde‡
__USE_FILE_OFFSET64


138 #unde‡
__USE_MISC


139 #unde‡
__USE_ATFILE


140 #unde‡
__USE_GNU


141 #unde‡
__USE_FORTIFY_LEVEL


142 #unde‡
__KERNEL_STRICT_NAMES


143 #unde‡
__GLIBC_USE_ISOC2X


144 #unde‡
__GLIBC_USE_DEPRECATED_GETS


145 #unde‡
__GLIBC_USE_DEPRECATED_SCANF


149 #i‚de‡
_LOOSE_KERNEL_NAMES


150 
	#__KERNEL_STRICT_NAMES


	)

160 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


161 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

162 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

164 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

171 #i‡
deföed
 
__˛™g_maj‹__
 && deföed 
__˛™g_mö‹__


172 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
) \

173 ((
__˛™g_maj‹__
 << 16Ë+ 
__˛™g_mö‹__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

175 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
Ë0

	)

179 
	#__GLIBC_USE
(
F
Ë
__GLIBC_USE_
 ## 
	)
F

185 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

186 && !
deföed
 
	g_DEFAULT_SOURCE


188 #unde‡
_DEFAULT_SOURCE


189 
	#_DEFAULT_SOURCE
 1

	)

193 #ifde‡
_GNU_SOURCE


194 #unde‡
_ISOC95_SOURCE


195 
	#_ISOC95_SOURCE
 1

	)

196 #unde‡
_ISOC99_SOURCE


197 
	#_ISOC99_SOURCE
 1

	)

198 #unde‡
_ISOC11_SOURCE


199 
	#_ISOC11_SOURCE
 1

	)

200 #unde‡
_ISOC2X_SOURCE


201 
	#_ISOC2X_SOURCE
 1

	)

202 #unde‡
_POSIX_SOURCE


203 
	#_POSIX_SOURCE
 1

	)

204 #unde‡
_POSIX_C_SOURCE


205 
	#_POSIX_C_SOURCE
 200809L

	)

206 #unde‡
_XOPEN_SOURCE


207 
	#_XOPEN_SOURCE
 700

	)

208 #unde‡
_XOPEN_SOURCE_EXTENDED


209 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

210 #unde‡
_LARGEFILE64_SOURCE


211 
	#_LARGEFILE64_SOURCE
 1

	)

212 #unde‡
_DEFAULT_SOURCE


213 
	#_DEFAULT_SOURCE
 1

	)

214 #unde‡
_ATFILE_SOURCE


215 
	#_ATFILE_SOURCE
 1

	)

220 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

221 || (!
deföed
 
	g__STRICT_ANSI__
 \

222 && !
deföed
 
	g_ISOC99_SOURCE
 && !deföed 
	g_ISOC11_SOURCE
 \

223 && !
deföed
 
	g_ISOC2X_SOURCE
 \

224 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

225 && !
deföed
 
	g_XOPEN_SOURCE
))

226 #unde‡
_DEFAULT_SOURCE


227 
	#_DEFAULT_SOURCE
 1

	)

231 #i‡(
deföed
 
_ISOC2X_SOURCE
 \

232 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ > 201710L))

233 
	#__GLIBC_USE_ISOC2X
 1

	)

235 
	#__GLIBC_USE_ISOC2X
 0

	)

239 #i‡(
deföed
 
_ISOC11_SOURCE
 || deföed 
_ISOC2X_SOURCE
 \

240 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

241 
	#__USE_ISOC11
 1

	)

245 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

246 || 
deföed
 
_ISOC2X_SOURCE
 \

247 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

248 
	#__USE_ISOC99
 1

	)

252 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

253 || 
deföed
 
_ISOC2X_SOURCE
 \

254 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

255 
	#__USE_ISOC95
 1

	)

258 #ifde‡
__˝lu•lus


260 #i‡
__˝lu•lus
 >= 201703L

261 
	#__USE_ISOC11
 1

	)

265 #i‡
__˝lu•lus
 >201103L || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__


266 
	#__USE_ISOCXX11
 1

	)

267 
	#__USE_ISOC99
 1

	)

274 #ifde‡
_DEFAULT_SOURCE


275 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


276 
	#__USE_POSIX_IMPLICITLY
 1

	)

278 #unde‡
_POSIX_SOURCE


279 
	#_POSIX_SOURCE
 1

	)

280 #unde‡
_POSIX_C_SOURCE


281 
	#_POSIX_C_SOURCE
 200809L

	)

284 #i‡((!
deföed
 
__STRICT_ANSI__
 \

285 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

286 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

287 
	#_POSIX_SOURCE
 1

	)

288 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

289 
	#_POSIX_C_SOURCE
 2

	)

290 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

291 
	#_POSIX_C_SOURCE
 199506L

	)

292 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

293 
	#_POSIX_C_SOURCE
 200112L

	)

295 
	#_POSIX_C_SOURCE
 200809L

	)

297 
	#__USE_POSIX_IMPLICITLY
 1

	)

306 #i‡((!
deföed
 
_POSIX_C_SOURCE
 || (_POSIX_C_SOURCE - 0) < 199506L) \

307 && (
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE
))

308 
	#_POSIX_SOURCE
 1

	)

309 #unde‡
_POSIX_C_SOURCE


310 
	#_POSIX_C_SOURCE
 199506L

	)

313 #i‡(
deföed
 
_POSIX_SOURCE
 \

314 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

315 || 
deföed
 
_XOPEN_SOURCE
)

316 
	#__USE_POSIX
 1

	)

319 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


320 
	#__USE_POSIX2
 1

	)

323 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

324 
	#__USE_POSIX199309
 1

	)

327 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

328 
	#__USE_POSIX199506
 1

	)

331 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

332 
	#__USE_XOPEN2K
 1

	)

333 #unde‡
__USE_ISOC95


334 
	#__USE_ISOC95
 1

	)

335 #unde‡
__USE_ISOC99


336 
	#__USE_ISOC99
 1

	)

339 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

340 
	#__USE_XOPEN2K8
 1

	)

341 #unde‡
_ATFILE_SOURCE


342 
	#_ATFILE_SOURCE
 1

	)

345 #ifdef 
_XOPEN_SOURCE


346 
	#__USE_XOPEN
 1

	)

347 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

348 
	#__USE_XOPEN_EXTENDED
 1

	)

349 
	#__USE_UNIX98
 1

	)

350 #unde‡
_LARGEFILE_SOURCE


351 
	#_LARGEFILE_SOURCE
 1

	)

352 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

353 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

354 
	#__USE_XOPEN2K8
 1

	)

355 
	#__USE_XOPEN2K8XSI
 1

	)

357 
	#__USE_XOPEN2K
 1

	)

358 
	#__USE_XOPEN2KXSI
 1

	)

359 #unde‡
__USE_ISOC95


360 
	#__USE_ISOC95
 1

	)

361 #unde‡
__USE_ISOC99


362 
	#__USE_ISOC99
 1

	)

365 #ifde‡
_XOPEN_SOURCE_EXTENDED


366 
	#__USE_XOPEN_EXTENDED
 1

	)

371 #ifde‡
_LARGEFILE_SOURCE


372 
	#__USE_LARGEFILE
 1

	)

375 #ifde‡
_LARGEFILE64_SOURCE


376 
	#__USE_LARGEFILE64
 1

	)

379 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

380 
	#__USE_FILE_OFFSET64
 1

	)

383 #i‡
deföed
 
_DEFAULT_SOURCE


384 
	#__USE_MISC
 1

	)

387 #ifdef 
_ATFILE_SOURCE


388 
	#__USE_ATFILE
 1

	)

391 #ifdef 
_GNU_SOURCE


392 
	#__USE_GNU
 1

	)

395 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

396 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

397 #i‡
_FORTIFY_SOURCE
 > 1

398 
	#__USE_FORTIFY_LEVEL
 2

	)

400 
	#__USE_FORTIFY_LEVEL
 1

	)

403 
	#__USE_FORTIFY_LEVEL
 0

	)

410 #i‡
deföed
 
__˝lu•lus
 ? __˝lu•lu†>201402L : deföed 
__USE_ISOC11


411 
	#__GLIBC_USE_DEPRECATED_GETS
 0

	)

413 
	#__GLIBC_USE_DEPRECATED_GETS
 1

	)

428 #i‡(
deföed
 
__USE_GNU
 \

429 && (
deföed
 
	g__˝lu•lus
 \

430 ? (
	g__˝lu•lus
 < 201103L && !
deföed
 
	g__GXX_EXPERIMENTAL_CXX0X__
) \

431 : (!
deföed
 
__STDC_VERSION__
 || __STDC_VERSION__ < 199901L)))

432 
	#__GLIBC_USE_DEPRECATED_SCANF
 1

	)

434 
	#__GLIBC_USE_DEPRECATED_SCANF
 0

	)

439 
	~<°dc-¥edef.h
>

447 #unde‡
__GNU_LIBRARY__


448 
	#__GNU_LIBRARY__
 6

	)

452 
	#__GLIBC__
 2

	)

453 
	#__GLIBC_MINOR__
 31

	)

455 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

456 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

459 #i‚de‡
__ASSEMBLER__


460 #i‚de‡
_SYS_CDEFS_H


461 
	~<sys/cdefs.h
>

466 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


467 
	#__USE_LARGEFILE
 1

	)

468 
	#__USE_LARGEFILE64
 1

	)

474 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

475 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

476 && 
deföed
 
	g__exã∫_ölöe


477 
	#__USE_EXTERN_INLINES
 1

	)

485 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


22 
	#_GETOPT_H
 1

	)

24 
	~<„©uªs.h
>

31 #i‚de‡
__gë›t_¨gv_c⁄°


32 
	#__gë›t_¨gv_c⁄°
 c⁄°

	)

35 
	~<bôs/gë›t_c‹e.h
>

36 
	~<bôs/gë›t_ext.h
>

	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/libgen.h

18 #i‚de‡
_LIBGEN_H


19 
	#_LIBGEN_H
 1

	)

21 
	~<„©uªs.h
>

23 
__BEGIN_DECLS


26 *
	$dú«me
 (*
__∑th
Ë
__THROW
;

34 *
	$__xpg_ba£«me
 (*
__∑th
Ë
__THROW
;

35 
	#ba£«me
 
__xpg_ba£«me


	)

37 
__END_DECLS


	@/usr/include/libintl.h

20 #i‚de‡
_LIBINTL_H


21 
	#_LIBINTL_H
 1

	)

23 
	~<„©uªs.h
>

27 
	#__USE_GNU_GETTEXT
 1

	)

31 
	#__GNU_GETTEXT_SUPPORTED_REVISION
(
maj‹
) \

32 ((
maj‹
Ë=0 ? 1 : -1)

	)

34 
__BEGIN_DECLS


39 *
	$gëãxt
 (c⁄° *
__msgid
)

40 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (1);

44 *
	$dgëãxt
 (c⁄° *
__domaö«me
, c⁄° *
__msgid
)

45 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

46 *
	$__dgëãxt
 (c⁄° *
__domaö«me
, c⁄° *
__msgid
)

47 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

51 *
	$dcgëãxt
 (c⁄° *
__domaö«me
,

52 c⁄° *
__msgid
, 
__ˇãg‹y
)

53 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

54 *
	$__dcgëãxt
 (c⁄° *
__domaö«me
,

55 c⁄° *
__msgid
, 
__ˇãg‹y
)

56 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

61 *
	$ngëãxt
 (c⁄° *
__msgid1
, c⁄° *
__msgid2
,

62 
__n
)

63 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (1Ë
	`__©åibuã_f‹m©_¨g__
 (2);

67 *
	$dngëãxt
 (c⁄° *
__domaö«me
, c⁄° *
__msgid1
,

68 c⁄° *
__msgid2
, 
__n
)

69 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (2Ë
	`__©åibuã_f‹m©_¨g__
 (3);

73 *
	$d˙gëãxt
 (c⁄° *
__domaö«me
, c⁄° *
__msgid1
,

74 c⁄° *
__msgid2
, 
__n
,

75 
__ˇãg‹y
)

76 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (2Ë
	`__©åibuã_f‹m©_¨g__
 (3);

82 *
	$ãxtdomaö
 (c⁄° *
__domaö«me
Ë
__THROW
;

86 *
	$bödãxtdomaö
 (c⁄° *
__domaö«me
,

87 c⁄° *
__dú«me
Ë
__THROW
;

91 *
	$böd_ãxtdomaö_code£t
 (c⁄° *
__domaö«me
,

92 c⁄° *
__code£t
Ë
__THROW
;

96 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


99 
	#__√ed_NULL


	)

100 
	~<°ddef.h
>

103 
	~<loˇÀ.h
>

109 
	#gëãxt
(
msgid
Ë
	`dgëãxt
 (
NULL
, msgid)

	)

111 
	#dgëãxt
(
domaö«me
, 
msgid
) \

112 
	`dcgëãxt
 (
domaö«me
, 
msgid
, 
LC_MESSAGES
)

	)

114 
	#ngëãxt
(
msgid1
, 
msgid2
, 
n
Ë
	`dngëãxt
 (
NULL
, msgid1, msgid2,Ç)

	)

116 
	#dngëãxt
(
domaö«me
, 
msgid1
, 
msgid2
, 
n
) \

117 
	`d˙gëãxt
 (
domaö«me
, 
msgid1
, 
msgid2
, 
n
, 
LC_MESSAGES
)

	)

121 
__END_DECLS


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

32 
	#MB_LEN_MAX
 16

	)

37 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

42 #i‚de‡
_LIMITS_H


43 
	#_LIMITS_H
 1

	)

45 
	~<bôs/w‹dsize.h
>

54 
	#CHAR_BIT
 8

	)

57 
	#SCHAR_MIN
 (-128)

	)

58 
	#SCHAR_MAX
 127

	)

61 
	#UCHAR_MAX
 255

	)

64 #ifde‡
__CHAR_UNSIGNED__


65 
	#CHAR_MIN
 0

	)

66 
	#CHAR_MAX
 
UCHAR_MAX


	)

68 
	#CHAR_MIN
 
SCHAR_MIN


	)

69 
	#CHAR_MAX
 
SCHAR_MAX


	)

73 
	#SHRT_MIN
 (-32768)

	)

74 
	#SHRT_MAX
 32767

	)

77 
	#USHRT_MAX
 65535

	)

80 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

81 
	#INT_MAX
 2147483647

	)

84 
	#UINT_MAX
 4294967295U

	)

87 #i‡
__WORDSIZE
 == 64

88 
	#LONG_MAX
 9223372036854775807L

	)

90 
	#LONG_MAX
 2147483647L

	)

92 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

95 #i‡
__WORDSIZE
 == 64

96 
	#ULONG_MAX
 18446744073709551615UL

	)

98 
	#ULONG_MAX
 4294967295UL

	)

101 #ifde‡
__USE_ISOC99


104 
	#LLONG_MAX
 9223372036854775807LL

	)

105 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

108 
	#ULLONG_MAX
 18446744073709551615ULL

	)

122 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


124 #ö˛ude_√xà<
limôs
.
h
>

130 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


131 #i‚de‡
LLONG_MIN


132 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

134 #i‚de‡
LLONG_MAX


135 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

137 #i‚de‡
ULLONG_MAX


138 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

145 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

146 #i‚de‡
CHAR_WIDTH


147 
	#CHAR_WIDTH
 8

	)

149 #i‚de‡
SCHAR_WIDTH


150 
	#SCHAR_WIDTH
 8

	)

152 #i‚de‡
UCHAR_WIDTH


153 
	#UCHAR_WIDTH
 8

	)

155 #i‚de‡
SHRT_WIDTH


156 
	#SHRT_WIDTH
 16

	)

158 #i‚de‡
USHRT_WIDTH


159 
	#USHRT_WIDTH
 16

	)

161 #i‚de‡
INT_WIDTH


162 
	#INT_WIDTH
 32

	)

164 #i‚de‡
UINT_WIDTH


165 
	#UINT_WIDTH
 32

	)

167 #i‚de‡
LONG_WIDTH


168 
	#LONG_WIDTH
 
__WORDSIZE


	)

170 #i‚de‡
ULONG_WIDTH


171 
	#ULONG_WIDTH
 
__WORDSIZE


	)

173 #i‚de‡
LLONG_WIDTH


174 
	#LLONG_WIDTH
 64

	)

176 #i‚de‡
ULLONG_WIDTH


177 
	#ULLONG_WIDTH
 64

	)

181 #ifdef 
__USE_POSIX


183 
	~<bôs/posix1_lim.h
>

186 #ifdef 
__USE_POSIX2


187 
	~<bôs/posix2_lim.h
>

190 #ifdef 
__USE_XOPEN


191 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/blkzoned.h

16 #i‚de‡
_BLKZONED_H


17 
	#_BLKZONED_H


	)

19 
	~<löux/ty≥s.h
>

20 
	~<löux/io˘l.h
>

32 
	eblk_z⁄e_ty≥
 {

33 
	mBLK_ZONE_TYPE_CONVENTIONAL
 = 0x1,

34 
	mBLK_ZONE_TYPE_SEQWRITE_REQ
 = 0x2,

35 
	mBLK_ZONE_TYPE_SEQWRITE_PREF
 = 0x3,

65 
	eblk_z⁄e_c⁄d
 {

66 
	mBLK_ZONE_COND_NOT_WP
 = 0x0,

67 
	mBLK_ZONE_COND_EMPTY
 = 0x1,

68 
	mBLK_ZONE_COND_IMP_OPEN
 = 0x2,

69 
	mBLK_ZONE_COND_EXP_OPEN
 = 0x3,

70 
	mBLK_ZONE_COND_CLOSED
 = 0x4,

71 
	mBLK_ZONE_COND_READONLY
 = 0xD,

72 
	mBLK_ZONE_COND_FULL
 = 0xE,

73 
	mBLK_ZONE_COND_OFFLINE
 = 0xF,

94 
	sblk_z⁄e
 {

95 
__u64
 
	m°¨t
;

96 
__u64
 
	mÀn
;

97 
__u64
 
	mwp
;

98 
__u8
 
	mty≥
;

99 
__u8
 
	mc⁄d
;

100 
__u8
 
	mn⁄_£q
;

101 
__u8
 
	mª£t
;

102 
__u8
 
	mª£rved
[36];

115 
	sblk_z⁄e_ªp‹t
 {

116 
__u64
 
	m£˘‹
;

117 
__u32
 
	mƒ_z⁄es
;

118 
__u8
 
	mª£rved
[4];

119 
blk_z⁄e
 
	mz⁄es
[0];

127 
	sblk_z⁄e_ønge
 {

128 
__u64
 
	m£˘‹
;

129 
__u64
 
	mƒ_£˘‹s
;

143 
	#BLKREPORTZONE
 
	`_IOWR
(0x12, 130, 
blk_z⁄e_ªp‹t
)

	)

144 
	#BLKRESETZONE
 
	`_IOW
(0x12, 131, 
blk_z⁄e_ønge
)

	)

145 
	#BLKGETZONESZ
 
	`_IOR
(0x12, 132, 
__u32
)

	)

146 
	#BLKGETNRZONES
 
	`_IOR
(0x12, 133, 
__u32
)

	)

	@/usr/include/linux/falloc.h

2 #i‚de‡
_FALLOC_H_


3 
	#_FALLOC_H_


	)

5 
	#FALLOC_FL_KEEP_SIZE
 0x01

	)

6 
	#FALLOC_FL_PUNCH_HOLE
 0x02

	)

7 
	#FALLOC_FL_NO_HIDE_STALE
 0x04

	)

29 
	#FALLOC_FL_COLLAPSE_RANGE
 0x08

	)

43 
	#FALLOC_FL_ZERO_RANGE
 0x10

	)

60 
	#FALLOC_FL_INSERT_RANGE
 0x20

	)

78 
	#FALLOC_FL_UNSHARE_RANGE
 0x40

	)

	@/usr/include/linux/fs.h

2 #i‚de‡
_LINUX_FS_H


3 
	#_LINUX_FS_H


	)

13 
	~<löux/limôs.h
>

14 
	~<löux/io˘l.h
>

15 
	~<löux/ty≥s.h
>

16 
	~<löux/fs¸y±.h
>

19 
	~<löux/mou¡.h
>

32 #unde‡
NR_OPEN


33 
	#INR_OPEN_CUR
 1024

	)

34 
	#INR_OPEN_MAX
 4096

	)

36 
	#BLOCK_SIZE_BITS
 10

	)

37 
	#BLOCK_SIZE
 (1<<
BLOCK_SIZE_BITS
)

	)

39 
	#SEEK_SET
 0

	)

40 
	#SEEK_CUR
 1

	)

41 
	#SEEK_END
 2

	)

42 
	#SEEK_DATA
 3

	)

43 
	#SEEK_HOLE
 4

	)

44 
	#SEEK_MAX
 
SEEK_HOLE


	)

46 
	#RENAME_NOREPLACE
 (1 << 0Ë

	)

47 
	#RENAME_EXCHANGE
 (1 << 1Ë

	)

48 
	#RENAME_WHITEOUT
 (1 << 2Ë

	)

50 
	sfûe_˛⁄e_ønge
 {

51 
__s64
 
	m§c_fd
;

52 
__u64
 
	m§c_off£t
;

53 
__u64
 
	m§c_Àngth
;

54 
__u64
 
	mde°_off£t
;

57 
	sf°rim_ønge
 {

58 
__u64
 
	m°¨t
;

59 
__u64
 
	mÀn
;

60 
__u64
 
	mmöÀn
;

64 
	#FILE_DEDUPE_RANGE_SAME
 0

	)

65 
	#FILE_DEDUPE_RANGE_DIFFERS
 1

	)

68 
	sfûe_dedu≥_ønge_öfo
 {

69 
__s64
 
	mde°_fd
;

70 
__u64
 
	mde°_off£t
;

71 
__u64
 
	mbyãs_dedu≥d
;

78 
__s32
 
	m°©us
;

79 
__u32
 
	mª£rved
;

83 
	sfûe_dedu≥_ønge
 {

84 
__u64
 
	m§c_off£t
;

85 
__u64
 
	m§c_Àngth
;

86 
__u16
 
	mde°_cou¡
;

87 
__u16
 
	mª£rved1
;

88 
__u32
 
	mª£rved2
;

89 
fûe_dedu≥_ønge_öfo
 
	möfo
[0];

93 
	sfûes_°©_°ru˘
 {

94 
	mƒ_fûes
;

95 
	mƒ_‰ì_fûes
;

96 
	mmax_fûes
;

99 
	söodes_°©_t
 {

100 
	mƒ_öodes
;

101 
	mƒ_unu£d
;

102 
	mdummy
[5];

106 
	#NR_FILE
 8192

	)

111 
	sfsx©å
 {

112 
__u32
 
	mfsx_xÊags
;

113 
__u32
 
	mfsx_extsize
;

114 
__u32
 
	mfsx_√xã¡s
;

115 
__u32
 
	mfsx_¥ojid
;

116 
__u32
 
	mfsx_cowextsize
;

117 
	mfsx_∑d
[8];

123 
	#FS_XFLAG_REALTIME
 0x00000001

	)

124 
	#FS_XFLAG_PREALLOC
 0x00000002

	)

125 
	#FS_XFLAG_IMMUTABLE
 0x00000008

	)

126 
	#FS_XFLAG_APPEND
 0x00000010

	)

127 
	#FS_XFLAG_SYNC
 0x00000020

	)

128 
	#FS_XFLAG_NOATIME
 0x00000040

	)

129 
	#FS_XFLAG_NODUMP
 0x00000080

	)

130 
	#FS_XFLAG_RTINHERIT
 0x00000100

	)

131 
	#FS_XFLAG_PROJINHERIT
 0x00000200

	)

132 
	#FS_XFLAG_NOSYMLINKS
 0x00000400

	)

133 
	#FS_XFLAG_EXTSIZE
 0x00000800

	)

134 
	#FS_XFLAG_EXTSZINHERIT
 0x00001000

	)

135 
	#FS_XFLAG_NODEFRAG
 0x00002000

	)

136 
	#FS_XFLAG_FILESTREAM
 0x00004000

	)

137 
	#FS_XFLAG_DAX
 0x00008000

	)

138 
	#FS_XFLAG_COWEXTSIZE
 0x00010000

	)

139 
	#FS_XFLAG_HASATTR
 0x80000000

	)

144 
	#BLKROSET
 
	`_IO
(0x12,93Ë

	)

145 
	#BLKROGET
 
	`_IO
(0x12,94Ë

	)

146 
	#BLKRRPART
 
	`_IO
(0x12,95Ë

	)

147 
	#BLKGETSIZE
 
	`_IO
(0x12,96Ë

	)

148 
	#BLKFLSBUF
 
	`_IO
(0x12,97Ë

	)

149 
	#BLKRASET
 
	`_IO
(0x12,98Ë

	)

150 
	#BLKRAGET
 
	`_IO
(0x12,99Ë

	)

151 
	#BLKFRASET
 
	`_IO
(0x12,100)

	)

152 
	#BLKFRAGET
 
	`_IO
(0x12,101)

	)

153 
	#BLKSECTSET
 
	`_IO
(0x12,102)

	)

154 
	#BLKSECTGET
 
	`_IO
(0x12,103)

	)

155 
	#BLKSSZGET
 
	`_IO
(0x12,104)

	)

157 
	#BLKPG
 
	`_IO
(0x12,105)

	)

161 
	#BLKELVGET
 
	`_IOR
(0x12,106,
size_t
)

	)

162 
	#BLKELVSET
 
	`_IOW
(0x12,107,
size_t
)

	)

167 
	#BLKBSZGET
 
	`_IOR
(0x12,112,
size_t
)

	)

168 
	#BLKBSZSET
 
	`_IOW
(0x12,113,
size_t
)

	)

169 
	#BLKGETSIZE64
 
	`_IOR
(0x12,114,
size_t
Ë

	)

170 
	#BLKTRACESETUP
 
	`_IOWR
(0x12,115,
blk_u£r_åa˚_£tup
)

	)

171 
	#BLKTRACESTART
 
	`_IO
(0x12,116)

	)

172 
	#BLKTRACESTOP
 
	`_IO
(0x12,117)

	)

173 
	#BLKTRACETEARDOWN
 
	`_IO
(0x12,118)

	)

174 
	#BLKDISCARD
 
	`_IO
(0x12,119)

	)

175 
	#BLKIOMIN
 
	`_IO
(0x12,120)

	)

176 
	#BLKIOOPT
 
	`_IO
(0x12,121)

	)

177 
	#BLKALIGNOFF
 
	`_IO
(0x12,122)

	)

178 
	#BLKPBSZGET
 
	`_IO
(0x12,123)

	)

179 
	#BLKDISCARDZEROES
 
	`_IO
(0x12,124)

	)

180 
	#BLKSECDISCARD
 
	`_IO
(0x12,125)

	)

181 
	#BLKROTATIONAL
 
	`_IO
(0x12,126)

	)

182 
	#BLKZEROOUT
 
	`_IO
(0x12,127)

	)

188 
	#BMAP_IOCTL
 1

	)

189 
	#FIBMAP
 
	`_IO
(0x00,1Ë

	)

190 
	#FIGETBSZ
 
	`_IO
(0x00,2Ë

	)

191 
	#FIFREEZE
 
	`_IOWR
('X', 119, Ë

	)

192 
	#FITHAW
 
	`_IOWR
('X', 120, Ë

	)

193 
	#FITRIM
 
	`_IOWR
('X', 121, 
f°rim_ønge
Ë

	)

194 
	#FICLONE
 
	`_IOW
(0x94, 9, )

	)

195 
	#FICLONERANGE
 
	`_IOW
(0x94, 13, 
fûe_˛⁄e_ønge
)

	)

196 
	#FIDEDUPERANGE
 
	`_IOWR
(0x94, 54, 
fûe_dedu≥_ønge
)

	)

198 
	#FSLABEL_MAX
 256

	)

200 
	#FS_IOC_GETFLAGS
 
	`_IOR
('f', 1, )

	)

201 
	#FS_IOC_SETFLAGS
 
	`_IOW
('f', 2, )

	)

202 
	#FS_IOC_GETVERSION
 
	`_IOR
('v', 1, )

	)

203 
	#FS_IOC_SETVERSION
 
	`_IOW
('v', 2, )

	)

204 
	#FS_IOC_FIEMAP
 
	`_IOWR
('f', 11, 
fõm≠
)

	)

205 
	#FS_IOC32_GETFLAGS
 
	`_IOR
('f', 1, )

	)

206 
	#FS_IOC32_SETFLAGS
 
	`_IOW
('f', 2, )

	)

207 
	#FS_IOC32_GETVERSION
 
	`_IOR
('v', 1, )

	)

208 
	#FS_IOC32_SETVERSION
 
	`_IOW
('v', 2, )

	)

209 
	#FS_IOC_FSGETXATTR
 
	`_IOR
('X', 31, 
fsx©å
)

	)

210 
	#FS_IOC_FSSETXATTR
 
	`_IOW
('X', 32, 
fsx©å
)

	)

211 
	#FS_IOC_GETFSLABEL
 
	`_IOR
(0x94, 49, [
FSLABEL_MAX
])

	)

212 
	#FS_IOC_SETFSLABEL
 
	`_IOW
(0x94, 50, [
FSLABEL_MAX
])

	)

234 
	#FS_SECRM_FL
 0x00000001

	)

235 
	#FS_UNRM_FL
 0x00000002

	)

236 
	#FS_COMPR_FL
 0x00000004

	)

237 
	#FS_SYNC_FL
 0x00000008

	)

238 
	#FS_IMMUTABLE_FL
 0x00000010

	)

239 
	#FS_APPEND_FL
 0x00000020

	)

240 
	#FS_NODUMP_FL
 0x00000040

	)

241 
	#FS_NOATIME_FL
 0x00000080

	)

243 
	#FS_DIRTY_FL
 0x00000100

	)

244 
	#FS_COMPRBLK_FL
 0x00000200

	)

245 
	#FS_NOCOMP_FL
 0x00000400

	)

247 
	#FS_ENCRYPT_FL
 0x00000800

	)

248 
	#FS_BTREE_FL
 0x00001000

	)

249 
	#FS_INDEX_FL
 0x00001000

	)

250 
	#FS_IMAGIC_FL
 0x00002000

	)

251 
	#FS_JOURNAL_DATA_FL
 0x00004000

	)

252 
	#FS_NOTAIL_FL
 0x00008000

	)

253 
	#FS_DIRSYNC_FL
 0x00010000

	)

254 
	#FS_TOPDIR_FL
 0x00020000

	)

255 
	#FS_HUGE_FILE_FL
 0x00040000

	)

256 
	#FS_EXTENT_FL
 0x00080000

	)

257 
	#FS_VERITY_FL
 0x00100000

	)

258 
	#FS_EA_INODE_FL
 0x00200000

	)

259 
	#FS_EOFBLOCKS_FL
 0x00400000

	)

260 
	#FS_NOCOW_FL
 0x00800000

	)

261 
	#FS_INLINE_DATA_FL
 0x10000000

	)

262 
	#FS_PROJINHERIT_FL
 0x20000000

	)

263 
	#FS_CASEFOLD_FL
 0x40000000

	)

264 
	#FS_RESERVED_FL
 0x80000000

	)

266 
	#FS_FL_USER_VISIBLE
 0x0003DFFF

	)

267 
	#FS_FL_USER_MODIFIABLE
 0x000380FF

	)

270 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

271 
	#SYNC_FILE_RANGE_WRITE
 2

	)

272 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

273 
	#SYNC_FILE_RANGE_WRITE_AND_WAIT
 (
SYNC_FILE_RANGE_WRITE
 | \

274 
SYNC_FILE_RANGE_WAIT_BEFORE
 | \

275 
SYNC_FILE_RANGE_WAIT_AFTER
)

	)

281 
	t__bôwi£
 
	t__kî√l_rwf_t
;

284 
	#RWF_HIPRI
 ((
__kî√l_rwf_t
)0x00000001)

	)

287 
	#RWF_DSYNC
 ((
__kî√l_rwf_t
)0x00000002)

	)

290 
	#RWF_SYNC
 ((
__kî√l_rwf_t
)0x00000004)

	)

293 
	#RWF_NOWAIT
 ((
__kî√l_rwf_t
)0x00000008)

	)

296 
	#RWF_APPEND
 ((
__kî√l_rwf_t
)0x00000010)

	)

299 
	#RWF_SUPPORTED
 (
RWF_HIPRI
 | 
RWF_DSYNC
 | 
RWF_SYNC
 | 
RWF_NOWAIT
 |\

300 
RWF_APPEND
)

	)

	@/usr/include/linux/limits.h

2 #i‚de‡
_LINUX_LIMITS_H


3 
	#_LINUX_LIMITS_H


	)

5 
	#NR_OPEN
 1024

	)

7 
	#NGROUPS_MAX
 65536

	)

8 
	#ARG_MAX
 131072

	)

9 
	#LINK_MAX
 127

	)

10 
	#MAX_CANON
 255

	)

11 
	#MAX_INPUT
 255

	)

12 
	#NAME_MAX
 255

	)

13 
	#PATH_MAX
 4096

	)

14 
	#PIPE_BUF
 4096

	)

15 
	#XATTR_NAME_MAX
 255

	)

16 
	#XATTR_SIZE_MAX
 65536

	)

17 
	#XATTR_LIST_MAX
 65536

	)

19 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/major.h

2 #i‚de‡
_LINUX_MAJOR_H


3 
	#_LINUX_MAJOR_H


	)

10 
	#UNNAMED_MAJOR
 0

	)

11 
	#MEM_MAJOR
 1

	)

12 
	#RAMDISK_MAJOR
 1

	)

13 
	#FLOPPY_MAJOR
 2

	)

14 
	#PTY_MASTER_MAJOR
 2

	)

15 
	#IDE0_MAJOR
 3

	)

16 
	#HD_MAJOR
 
IDE0_MAJOR


	)

17 
	#PTY_SLAVE_MAJOR
 3

	)

18 
	#TTY_MAJOR
 4

	)

19 
	#TTYAUX_MAJOR
 5

	)

20 
	#LP_MAJOR
 6

	)

21 
	#VCS_MAJOR
 7

	)

22 
	#LOOP_MAJOR
 7

	)

23 
	#SCSI_DISK0_MAJOR
 8

	)

24 
	#SCSI_TAPE_MAJOR
 9

	)

25 
	#MD_MAJOR
 9

	)

26 
	#MISC_MAJOR
 10

	)

27 
	#SCSI_CDROM_MAJOR
 11

	)

28 
	#MUX_MAJOR
 11

	)

29 
	#XT_DISK_MAJOR
 13

	)

30 
	#INPUT_MAJOR
 13

	)

31 
	#SOUND_MAJOR
 14

	)

32 
	#CDU31A_CDROM_MAJOR
 15

	)

33 
	#JOYSTICK_MAJOR
 15

	)

34 
	#GOLDSTAR_CDROM_MAJOR
 16

	)

35 
	#OPTICS_CDROM_MAJOR
 17

	)

36 
	#SANYO_CDROM_MAJOR
 18

	)

37 
	#CYCLADES_MAJOR
 19

	)

38 
	#CYCLADESAUX_MAJOR
 20

	)

39 
	#MITSUMI_X_CDROM_MAJOR
 20

	)

40 
	#MFM_ACORN_MAJOR
 21

	)

41 
	#SCSI_GENERIC_MAJOR
 21

	)

42 
	#IDE1_MAJOR
 22

	)

43 
	#DIGICU_MAJOR
 22

	)

44 
	#DIGI_MAJOR
 23

	)

45 
	#MITSUMI_CDROM_MAJOR
 23

	)

46 
	#CDU535_CDROM_MAJOR
 24

	)

47 
	#STL_SERIALMAJOR
 24

	)

48 
	#MATSUSHITA_CDROM_MAJOR
 25

	)

49 
	#STL_CALLOUTMAJOR
 25

	)

50 
	#MATSUSHITA_CDROM2_MAJOR
 26

	)

51 
	#QIC117_TAPE_MAJOR
 27

	)

52 
	#MATSUSHITA_CDROM3_MAJOR
 27

	)

53 
	#MATSUSHITA_CDROM4_MAJOR
 28

	)

54 
	#STL_SIOMEMMAJOR
 28

	)

55 
	#ACSI_MAJOR
 28

	)

56 
	#AZTECH_CDROM_MAJOR
 29

	)

57 
	#FB_MAJOR
 29

	)

58 
	#MTD_BLOCK_MAJOR
 31

	)

59 
	#CM206_CDROM_MAJOR
 32

	)

60 
	#IDE2_MAJOR
 33

	)

61 
	#IDE3_MAJOR
 34

	)

62 
	#Z8530_MAJOR
 34

	)

63 
	#XPRAM_MAJOR
 35

	)

64 
	#NETLINK_MAJOR
 36

	)

65 
	#PS2ESDI_MAJOR
 36

	)

66 
	#IDETAPE_MAJOR
 37

	)

67 
	#Z2RAM_MAJOR
 37

	)

68 
	#APBLOCK_MAJOR
 38

	)

69 
	#DDV_MAJOR
 39

	)

70 
	#NBD_MAJOR
 43

	)

71 
	#RISCOM8_NORMAL_MAJOR
 48

	)

72 
	#DAC960_MAJOR
 48

	)

73 
	#RISCOM8_CALLOUT_MAJOR
 49

	)

74 
	#MKISS_MAJOR
 55

	)

75 
	#DSP56K_MAJOR
 55

	)

77 
	#IDE4_MAJOR
 56

	)

78 
	#IDE5_MAJOR
 57

	)

80 
	#SCSI_DISK1_MAJOR
 65

	)

81 
	#SCSI_DISK2_MAJOR
 66

	)

82 
	#SCSI_DISK3_MAJOR
 67

	)

83 
	#SCSI_DISK4_MAJOR
 68

	)

84 
	#SCSI_DISK5_MAJOR
 69

	)

85 
	#SCSI_DISK6_MAJOR
 70

	)

86 
	#SCSI_DISK7_MAJOR
 71

	)

88 
	#COMPAQ_SMART2_MAJOR
 72

	)

89 
	#COMPAQ_SMART2_MAJOR1
 73

	)

90 
	#COMPAQ_SMART2_MAJOR2
 74

	)

91 
	#COMPAQ_SMART2_MAJOR3
 75

	)

92 
	#COMPAQ_SMART2_MAJOR4
 76

	)

93 
	#COMPAQ_SMART2_MAJOR5
 77

	)

94 
	#COMPAQ_SMART2_MAJOR6
 78

	)

95 
	#COMPAQ_SMART2_MAJOR7
 79

	)

97 
	#SPECIALIX_NORMAL_MAJOR
 75

	)

98 
	#SPECIALIX_CALLOUT_MAJOR
 76

	)

100 
	#AURORA_MAJOR
 79

	)

102 
	#I2O_MAJOR
 80

	)

104 
	#SHMIQ_MAJOR
 85

	)

105 
	#SCSI_CHANGER_MAJOR
 86

	)

107 
	#IDE6_MAJOR
 88

	)

108 
	#IDE7_MAJOR
 89

	)

109 
	#IDE8_MAJOR
 90

	)

110 
	#MTD_CHAR_MAJOR
 90

	)

111 
	#IDE9_MAJOR
 91

	)

113 
	#DASD_MAJOR
 94

	)

115 
	#MDISK_MAJOR
 95

	)

117 
	#UBD_MAJOR
 98

	)

119 
	#PP_MAJOR
 99

	)

120 
	#JSFD_MAJOR
 99

	)

122 
	#PHONE_MAJOR
 100

	)

124 
	#COMPAQ_CISS_MAJOR
 104

	)

125 
	#COMPAQ_CISS_MAJOR1
 105

	)

126 
	#COMPAQ_CISS_MAJOR2
 106

	)

127 
	#COMPAQ_CISS_MAJOR3
 107

	)

128 
	#COMPAQ_CISS_MAJOR4
 108

	)

129 
	#COMPAQ_CISS_MAJOR5
 109

	)

130 
	#COMPAQ_CISS_MAJOR6
 110

	)

131 
	#COMPAQ_CISS_MAJOR7
 111

	)

133 
	#VIODASD_MAJOR
 112

	)

134 
	#VIOCD_MAJOR
 113

	)

136 
	#ATARAID_MAJOR
 114

	)

138 
	#SCSI_DISK8_MAJOR
 128

	)

139 
	#SCSI_DISK9_MAJOR
 129

	)

140 
	#SCSI_DISK10_MAJOR
 130

	)

141 
	#SCSI_DISK11_MAJOR
 131

	)

142 
	#SCSI_DISK12_MAJOR
 132

	)

143 
	#SCSI_DISK13_MAJOR
 133

	)

144 
	#SCSI_DISK14_MAJOR
 134

	)

145 
	#SCSI_DISK15_MAJOR
 135

	)

147 
	#UNIX98_PTY_MASTER_MAJOR
 128

	)

148 
	#UNIX98_PTY_MAJOR_COUNT
 8

	)

149 
	#UNIX98_PTY_SLAVE_MAJOR
 (
UNIX98_PTY_MASTER_MAJOR
+
UNIX98_PTY_MAJOR_COUNT
)

	)

151 
	#DRBD_MAJOR
 147

	)

152 
	#RTF_MAJOR
 150

	)

153 
	#RAW_MAJOR
 162

	)

155 
	#USB_ACM_MAJOR
 166

	)

156 
	#USB_ACM_AUX_MAJOR
 167

	)

157 
	#USB_CHAR_MAJOR
 180

	)

159 
	#MMC_BLOCK_MAJOR
 179

	)

161 
	#VXVM_MAJOR
 199

	)

162 
	#VXSPEC_MAJOR
 200

	)

163 
	#VXDMP_MAJOR
 201

	)

165 
	#XENVBD_MAJOR
 202

	)

167 
	#MSR_MAJOR
 202

	)

168 
	#CPUID_MAJOR
 203

	)

170 
	#OSST_MAJOR
 206

	)

172 
	#IBM_TTY3270_MAJOR
 227

	)

173 
	#IBM_FS3270_MAJOR
 228

	)

175 
	#VIOTAPE_MAJOR
 230

	)

177 
	#BLOCK_EXT_MAJOR
 259

	)

178 
	#SCSI_OSD_MAJOR
 260

	)

	@/usr/include/linux/mempolicy.h

6 #i‚de‡
_LINUX_MEMPOLICY_H


7 
	#_LINUX_MEMPOLICY_H


	)

9 
	~<löux/î∫o.h
>

20 
	mMPOL_DEFAULT
,

21 
	mMPOL_PREFERRED
,

22 
	mMPOL_BIND
,

23 
	mMPOL_INTERLEAVE
,

24 
	mMPOL_LOCAL
,

25 
	mMPOL_MAX
,

29 
	#MPOL_F_STATIC_NODES
 (1 << 15)

	)

30 
	#MPOL_F_RELATIVE_NODES
 (1 << 14)

	)

36 
	#MPOL_MODE_FLAGS
 (
MPOL_F_STATIC_NODES
 | 
MPOL_F_RELATIVE_NODES
)

	)

39 
	#MPOL_F_NODE
 (1<<0Ë

	)

40 
	#MPOL_F_ADDR
 (1<<1Ë

	)

41 
	#MPOL_F_MEMS_ALLOWED
 (1<<2Ë

	)

44 
	#MPOL_MF_STRICT
 (1<<0Ë

	)

45 
	#MPOL_MF_MOVE
 (1<<1Ë

	)

47 
	#MPOL_MF_MOVE_ALL
 (1<<2Ë

	)

48 
	#MPOL_MF_LAZY
 (1<<3Ë

	)

49 
	#MPOL_MF_INTERNAL
 (1<<4Ë

	)

51 
	#MPOL_MF_VALID
 (
MPOL_MF_STRICT
 | \

52 
MPOL_MF_MOVE
 | \

53 
MPOL_MF_MOVE_ALL
)

	)

60 
	#MPOL_F_SHARED
 (1 << 0Ë

	)

61 
	#MPOL_F_LOCAL
 (1 << 1Ë

	)

62 
	#MPOL_F_MOF
 (1 << 3Ë

	)

63 
	#MPOL_F_MORON
 (1 << 4Ë

	)

	@/usr/include/linux/nvme_ioctl.h

7 #i‚de‡
_LINUX_NVME_IOCTL_H


8 
	#_LINUX_NVME_IOCTL_H


	)

10 
	~<löux/ty≥s.h
>

12 
	snvme_u£r_io
 {

13 
__u8
 
	m›code
;

14 
__u8
 
	mÊags
;

15 
__u16
 
	mc⁄åﬁ
;

16 
__u16
 
	mnblocks
;

17 
__u16
 
	mrsvd
;

18 
__u64
 
	mmëad©a
;

19 
__u64
 
	maddr
;

20 
__u64
 
	m¶ba
;

21 
__u32
 
	mdsmgmt
;

22 
__u32
 
	mª·ag
;

23 
__u16
 
	m≠±ag
;

24 
__u16
 
	m≠pmask
;

27 
	snvme_∑s°hru_cmd
 {

28 
__u8
 
	m›code
;

29 
__u8
 
	mÊags
;

30 
__u16
 
	mrsvd1
;

31 
__u32
 
	mnsid
;

32 
__u32
 
	mcdw2
;

33 
__u32
 
	mcdw3
;

34 
__u64
 
	mmëad©a
;

35 
__u64
 
	maddr
;

36 
__u32
 
	mmëad©a_Àn
;

37 
__u32
 
	md©a_Àn
;

38 
__u32
 
	mcdw10
;

39 
__u32
 
	mcdw11
;

40 
__u32
 
	mcdw12
;

41 
__u32
 
	mcdw13
;

42 
__u32
 
	mcdw14
;

43 
__u32
 
	mcdw15
;

44 
__u32
 
	mtimeout_ms
;

45 
__u32
 
	mªsu…
;

48 
	snvme_∑s°hru_cmd64
 {

49 
__u8
 
	m›code
;

50 
__u8
 
	mÊags
;

51 
__u16
 
	mrsvd1
;

52 
__u32
 
	mnsid
;

53 
__u32
 
	mcdw2
;

54 
__u32
 
	mcdw3
;

55 
__u64
 
	mmëad©a
;

56 
__u64
 
	maddr
;

57 
__u32
 
	mmëad©a_Àn
;

58 
__u32
 
	md©a_Àn
;

59 
__u32
 
	mcdw10
;

60 
__u32
 
	mcdw11
;

61 
__u32
 
	mcdw12
;

62 
__u32
 
	mcdw13
;

63 
__u32
 
	mcdw14
;

64 
__u32
 
	mcdw15
;

65 
__u32
 
	mtimeout_ms
;

66 
__u32
 
	mrsvd2
;

67 
__u64
 
	mªsu…
;

70 
	#nvme_admö_cmd
 
nvme_∑s°hru_cmd


	)

72 
	#NVME_IOCTL_ID
 
	`_IO
('N', 0x40)

	)

73 
	#NVME_IOCTL_ADMIN_CMD
 
	`_IOWR
('N', 0x41, 
nvme_admö_cmd
)

	)

74 
	#NVME_IOCTL_SUBMIT_IO
 
	`_IOW
('N', 0x42, 
nvme_u£r_io
)

	)

75 
	#NVME_IOCTL_IO_CMD
 
	`_IOWR
('N', 0x43, 
nvme_∑s°hru_cmd
)

	)

76 
	#NVME_IOCTL_RESET
 
	`_IO
('N', 0x44)

	)

77 
	#NVME_IOCTL_SUBSYS_RESET
 
	`_IO
('N', 0x45)

	)

78 
	#NVME_IOCTL_RESCAN
 
	`_IO
('N', 0x46)

	)

79 
	#NVME_IOCTL_ADMIN64_CMD
 
	`_IOWR
('N', 0x47, 
nvme_∑s°hru_cmd64
)

	)

80 
	#NVME_IOCTL_IO64_CMD
 
	`_IOWR
('N', 0x48, 
nvme_∑s°hru_cmd64
)

	)

	@/usr/include/linux/shm.h

2 #i‚de‡
_LINUX_SHM_H_


3 
	#_LINUX_SHM_H_


	)

5 
	~<löux/ùc.h
>

6 
	~<löux/î∫o.h
>

7 
	~<asm-gíîic/hugëlb_ícode.h
>

8 
	~<uni°d.h
>

19 
	#SHMMIN
 1

	)

20 
	#SHMMNI
 4096

	)

21 
	#SHMMAX
 (
ULONG_MAX
 - (1UL << 24)Ë

	)

22 
	#SHMALL
 (
ULONG_MAX
 - (1UL << 24)Ë

	)

23 
	#SHMSEG
 
SHMMNI


	)

26 
	sshmid_ds
 {

27 
ùc_≥rm
 
	mshm_≥rm
;

28 
	mshm_£gsz
;

29 
__kî√l_time_t
 
	mshm_©ime
;

30 
__kî√l_time_t
 
	mshm_dtime
;

31 
__kî√l_time_t
 
	mshm_˘ime
;

32 
__kî√l_ùc_pid_t
 
	mshm_˝id
;

33 
__kî√l_ùc_pid_t
 
	mshm_Õid
;

34 
	mshm_«âch
;

35 
	mshm_unu£d
;

36 *
	mshm_unu£d2
;

37 *
	mshm_unu£d3
;

41 
	~<asm/shmbuf.h
>

47 
	#SHM_R
 0400

	)

48 
	#SHM_W
 0200

	)

50 
	#SHM_HUGETLB
 04000

	)

51 
	#SHM_NORESERVE
 010000

	)

57 
	#SHM_HUGE_SHIFT
 
HUGETLB_FLAG_ENCODE_SHIFT


	)

58 
	#SHM_HUGE_MASK
 
HUGETLB_FLAG_ENCODE_MASK


	)

60 
	#SHM_HUGE_64KB
 
HUGETLB_FLAG_ENCODE_64KB


	)

61 
	#SHM_HUGE_512KB
 
HUGETLB_FLAG_ENCODE_512KB


	)

62 
	#SHM_HUGE_1MB
 
HUGETLB_FLAG_ENCODE_1MB


	)

63 
	#SHM_HUGE_2MB
 
HUGETLB_FLAG_ENCODE_2MB


	)

64 
	#SHM_HUGE_8MB
 
HUGETLB_FLAG_ENCODE_8MB


	)

65 
	#SHM_HUGE_16MB
 
HUGETLB_FLAG_ENCODE_16MB


	)

66 
	#SHM_HUGE_32MB
 
HUGETLB_FLAG_ENCODE_32MB


	)

67 
	#SHM_HUGE_256MB
 
HUGETLB_FLAG_ENCODE_256MB


	)

68 
	#SHM_HUGE_512MB
 
HUGETLB_FLAG_ENCODE_512MB


	)

69 
	#SHM_HUGE_1GB
 
HUGETLB_FLAG_ENCODE_1GB


	)

70 
	#SHM_HUGE_2GB
 
HUGETLB_FLAG_ENCODE_2GB


	)

71 
	#SHM_HUGE_16GB
 
HUGETLB_FLAG_ENCODE_16GB


	)

76 
	#SHM_RDONLY
 010000

	)

77 
	#SHM_RND
 020000

	)

78 
	#SHM_REMAP
 040000

	)

79 
	#SHM_EXEC
 0100000

	)

82 
	#SHM_LOCK
 11

	)

83 
	#SHM_UNLOCK
 12

	)

86 
	#SHM_STAT
 13

	)

87 
	#SHM_INFO
 14

	)

88 
	#SHM_STAT_ANY
 15

	)

91 
	sshmöfo
 {

92 
	mshmmax
;

93 
	mshmmö
;

94 
	mshmmni
;

95 
	mshm£g
;

96 
	mshmÆl
;

99 
	sshm_öfo
 {

100 
	mu£d_ids
;

101 
__kî√l_ul⁄g_t
 
	mshm_tŸ
;

102 
__kî√l_ul⁄g_t
 
	mshm_rss
;

103 
__kî√l_ul⁄g_t
 
	mshm_swp
;

104 
__kî√l_ul⁄g_t
 
	msw≠_©ãm±s
;

105 
__kî√l_ul⁄g_t
 
	msw≠_suc˚s£s
;

	@/usr/include/linux/stat.h

2 #i‚de‡
_LINUX_STAT_H


3 
	#_LINUX_STAT_H


	)

5 
	~<löux/ty≥s.h
>

7 #i‡
deföed
(
__KERNEL__
Ë|| !deföed(
__GLIBC__
) || (__GLIBC__ < 2)

9 
	#S_IFMT
 00170000

	)

10 
	#S_IFSOCK
 0140000

	)

11 
	#S_IFLNK
 0120000

	)

12 
	#S_IFREG
 0100000

	)

13 
	#S_IFBLK
 0060000

	)

14 
	#S_IFDIR
 0040000

	)

15 
	#S_IFCHR
 0020000

	)

16 
	#S_IFIFO
 0010000

	)

17 
	#S_ISUID
 0004000

	)

18 
	#S_ISGID
 0002000

	)

19 
	#S_ISVTX
 0001000

	)

21 
	#S_ISLNK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFLNK
)

	)

22 
	#S_ISREG
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFREG
)

	)

23 
	#S_ISDIR
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFDIR
)

	)

24 
	#S_ISCHR
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFCHR
)

	)

25 
	#S_ISBLK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFBLK
)

	)

26 
	#S_ISFIFO
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFIFO
)

	)

27 
	#S_ISSOCK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFSOCK
)

	)

29 
	#S_IRWXU
 00700

	)

30 
	#S_IRUSR
 00400

	)

31 
	#S_IWUSR
 00200

	)

32 
	#S_IXUSR
 00100

	)

34 
	#S_IRWXG
 00070

	)

35 
	#S_IRGRP
 00040

	)

36 
	#S_IWGRP
 00020

	)

37 
	#S_IXGRP
 00010

	)

39 
	#S_IRWXO
 00007

	)

40 
	#S_IROTH
 00004

	)

41 
	#S_IWOTH
 00002

	)

42 
	#S_IXOTH
 00001

	)

56 
	s°©x_time°amp
 {

57 
__s64
 
	mtv_£c
;

58 
__u32
 
	mtv_n£c
;

59 
__s32
 
	m__ª£rved
;

99 
	s°©x
 {

101 
__u32
 
	m°x_mask
;

102 
__u32
 
	m°x_blksize
;

103 
__u64
 
	m°x_©åibuãs
;

105 
__u32
 
	m°x_∆ök
;

106 
__u32
 
	m°x_uid
;

107 
__u32
 
	m°x_gid
;

108 
__u16
 
	m°x_mode
;

109 
__u16
 
	m__•¨e0
[1];

111 
__u64
 
	m°x_öo
;

112 
__u64
 
	m°x_size
;

113 
__u64
 
	m°x_blocks
;

114 
__u64
 
	m°x_©åibuãs_mask
;

116 
°©x_time°amp
 
	m°x_©ime
;

117 
°©x_time°amp
 
	m°x_btime
;

118 
°©x_time°amp
 
	m°x_˘ime
;

119 
°©x_time°amp
 
	m°x_mtime
;

121 
__u32
 
	m°x_rdev_maj‹
;

122 
__u32
 
	m°x_rdev_mö‹
;

123 
__u32
 
	m°x_dev_maj‹
;

124 
__u32
 
	m°x_dev_mö‹
;

126 
__u64
 
	m__•¨e2
[14];

138 
	#STATX_TYPE
 0x00000001U

	)

139 
	#STATX_MODE
 0x00000002U

	)

140 
	#STATX_NLINK
 0x00000004U

	)

141 
	#STATX_UID
 0x00000008U

	)

142 
	#STATX_GID
 0x00000010U

	)

143 
	#STATX_ATIME
 0x00000020U

	)

144 
	#STATX_MTIME
 0x00000040U

	)

145 
	#STATX_CTIME
 0x00000080U

	)

146 
	#STATX_INO
 0x00000100U

	)

147 
	#STATX_SIZE
 0x00000200U

	)

148 
	#STATX_BLOCKS
 0x00000400U

	)

149 
	#STATX_BASIC_STATS
 0x000007ffU

	)

150 
	#STATX_BTIME
 0x00000800U

	)

151 
	#STATX_ALL
 0x00000fffU

	)

152 
	#STATX__RESERVED
 0x80000000U

	)

165 
	#STATX_ATTR_COMPRESSED
 0x00000004

	)

166 
	#STATX_ATTR_IMMUTABLE
 0x00000010

	)

167 
	#STATX_ATTR_APPEND
 0x00000020

	)

168 
	#STATX_ATTR_NODUMP
 0x00000040

	)

169 
	#STATX_ATTR_ENCRYPTED
 0x00000800

	)

171 
	#STATX_ATTR_AUTOMOUNT
 0x00001000

	)

	@/usr/include/linux/types.h

2 #i‚de‡
_LINUX_TYPES_H


3 
	#_LINUX_TYPES_H


	)

5 
	~<asm/ty≥s.h
>

7 #i‚de‡
__ASSEMBLY__


9 
	~<löux/posix_ty≥s.h
>

17 #ifde‡
__CHECKER__


18 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

20 
	#__bôwi£__


	)

22 
	#__bôwi£
 
__bôwi£__


	)

24 
__u16
 
	t__bôwi£
 
	t__À16
;

25 
__u16
 
	t__bôwi£
 
	t__be16
;

26 
__u32
 
	t__bôwi£
 
	t__À32
;

27 
__u32
 
	t__bôwi£
 
	t__be32
;

28 
__u64
 
	t__bôwi£
 
	t__À64
;

29 
__u64
 
	t__bôwi£
 
	t__be64
;

31 
__u16
 
	t__bôwi£
 
	t__sum16
;

32 
__u32
 
	t__bôwi£
 
	t__wsum
;

43 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

44 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

45 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	t__bôwi£
 
	t__pﬁl_t
;

	@/usr/include/linux/unistd.h

2 #i‚de‡
_LINUX_UNISTD_H_


3 
	#_LINUX_UNISTD_H_


	)

8 
	~<asm/uni°d.h
>

	@/usr/include/locale.h

22 #i‚def 
_LOCALE_H


23 
	#_LOCALE_H
 1

	)

25 
	~<„©uªs.h
>

27 
	#__√ed_NULL


	)

28 
	~<°ddef.h
>

29 
	~<bôs/loˇÀ.h
>

31 
	g__BEGIN_DECLS


35 
	#LC_CTYPE
 
__LC_CTYPE


	)

36 
	#LC_NUMERIC
 
__LC_NUMERIC


	)

37 
	#LC_TIME
 
__LC_TIME


	)

38 
	#LC_COLLATE
 
__LC_COLLATE


	)

39 
	#LC_MONETARY
 
__LC_MONETARY


	)

40 
	#LC_MESSAGES
 
__LC_MESSAGES


	)

41 
	#LC_ALL
 
__LC_ALL


	)

42 
	#LC_PAPER
 
__LC_PAPER


	)

43 
	#LC_NAME
 
__LC_NAME


	)

44 
	#LC_ADDRESS
 
__LC_ADDRESS


	)

45 
	#LC_TELEPHONE
 
__LC_TELEPHONE


	)

46 
	#LC_MEASUREMENT
 
__LC_MEASUREMENT


	)

47 
	#LC_IDENTIFICATION
 
__LC_IDENTIFICATION


	)

51 
	slc⁄v


55 *
	mdecimÆ_poöt
;

56 *
	mthoußnds_£p
;

62 *
	mgroupög
;

68 *
	möt_cuº_symbﬁ
;

69 *
	mcuºícy_symbﬁ
;

70 *
	mm⁄_decimÆ_poöt
;

71 *
	mm⁄_thoußnds_£p
;

72 *
	mm⁄_groupög
;

73 *
	mposôive_sign
;

74 *
	m√g©ive_sign
;

75 
	möt_‰ac_digôs
;

76 
	m‰ac_digôs
;

78 
	mp_cs_¥e˚des
;

80 
	mp_£p_by_•a˚
;

82 
	mn_cs_¥e˚des
;

84 
	mn_£p_by_•a˚
;

91 
	mp_sign_po¢
;

92 
	mn_sign_po¢
;

93 #ifde‡
__USE_ISOC99


95 
	möt_p_cs_¥e˚des
;

97 
	möt_p_£p_by_•a˚
;

99 
	möt_n_cs_¥e˚des
;

101 
	möt_n_£p_by_•a˚
;

108 
	möt_p_sign_po¢
;

109 
	möt_n_sign_po¢
;

111 
	m__öt_p_cs_¥e˚des
;

112 
	m__öt_p_£p_by_•a˚
;

113 
	m__öt_n_cs_¥e˚des
;

114 
	m__öt_n_£p_by_•a˚
;

115 
	m__öt_p_sign_po¢
;

116 
	m__öt_n_sign_po¢
;

122 *
	$£éoˇÀ
 (
__ˇãg‹y
, c⁄° *
__loˇÀ
Ë
__THROW
;

125 
lc⁄v
 *
	$loˇÀc⁄v
 (Ë
__THROW
;

128 #ifdef 
__USE_XOPEN2K8


135 
	~<bôs/ty≥s/loˇÀ_t.h
>

141 
loˇÀ_t
 
	$√wloˇÀ
 (
__ˇãg‹y_mask
, c⁄° *
__loˇÀ
,

142 
loˇÀ_t
 
__ba£
Ë
__THROW
;

148 
	#LC_CTYPE_MASK
 (1 << 
__LC_CTYPE
)

	)

149 
	#LC_NUMERIC_MASK
 (1 << 
__LC_NUMERIC
)

	)

150 
	#LC_TIME_MASK
 (1 << 
__LC_TIME
)

	)

151 
	#LC_COLLATE_MASK
 (1 << 
__LC_COLLATE
)

	)

152 
	#LC_MONETARY_MASK
 (1 << 
__LC_MONETARY
)

	)

153 
	#LC_MESSAGES_MASK
 (1 << 
__LC_MESSAGES
)

	)

154 
	#LC_PAPER_MASK
 (1 << 
__LC_PAPER
)

	)

155 
	#LC_NAME_MASK
 (1 << 
__LC_NAME
)

	)

156 
	#LC_ADDRESS_MASK
 (1 << 
__LC_ADDRESS
)

	)

157 
	#LC_TELEPHONE_MASK
 (1 << 
__LC_TELEPHONE
)

	)

158 
	#LC_MEASUREMENT_MASK
 (1 << 
__LC_MEASUREMENT
)

	)

159 
	#LC_IDENTIFICATION_MASK
 (1 << 
__LC_IDENTIFICATION
)

	)

160 
	#LC_ALL_MASK
 (
LC_CTYPE_MASK
 \

161 | 
LC_NUMERIC_MASK
 \

162 | 
LC_TIME_MASK
 \

163 | 
LC_COLLATE_MASK
 \

164 | 
LC_MONETARY_MASK
 \

165 | 
LC_MESSAGES_MASK
 \

166 | 
LC_PAPER_MASK
 \

167 | 
LC_NAME_MASK
 \

168 | 
LC_ADDRESS_MASK
 \

169 | 
LC_TELEPHONE_MASK
 \

170 | 
LC_MEASUREMENT_MASK
 \

171 | 
LC_IDENTIFICATION_MASK
 \

172 )

	)

176 
loˇÀ_t
 
	$du∂oˇÀ
 (
loˇÀ_t
 
__d©a£t
Ë
__THROW
;

180 
	$‰ìloˇÀ
 (
loˇÀ_t
 
__d©a£t
Ë
__THROW
;

187 
loˇÀ_t
 
	$u£loˇÀ
 (
loˇÀ_t
 
__d©a£t
Ë
__THROW
;

191 
	#LC_GLOBAL_LOCALE
 ((
loˇÀ_t
Ë-1L)

	)

195 
__END_DECLS


	@/usr/include/malloc.h

19 #i‚de‡
_MALLOC_H


20 
	#_MALLOC_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<°ddef.h
>

24 
	~<°dio.h
>

26 #ifde‡
_LIBC


27 
	#__MALLOC_HOOK_VOLATILE


	)

28 
	#__MALLOC_DEPRECATED


	)

30 
	#__MALLOC_HOOK_VOLATILE
 vﬁ©ûe

	)

31 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

35 
__BEGIN_DECLS


38 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__


39 
	`__©åibuã_Æloc_size__
 ((1)Ë
__wur
;

42 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

43 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((1, 2)Ë
__wur
;

50 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

51 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
 
	`__©åibuã_Æloc_size__
 ((2));

58 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

59 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
 
	`__©åibuã_Æloc_size__
 ((2, 3));

62 
	$‰ì
 (*
__±r
Ë
__THROW
;

65 *
	$memÆign
 (
size_t
 
__Æignmít
, size_à
__size
)

66 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

69 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__


70 
	`__©åibuã_Æloc_size__
 ((1)Ë
__wur
;

74 *
	$pvÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

78 *(*
__m‹ec‹e
Ë(
±rdiff_t
 
__size
);

81 *
	$__deÁu…_m‹ec‹e
 (
±rdiff_t
 
__size
)

82 
__THROW
 
__©åibuã_mÆloc__
;

86 
	smÆlöfo


88 
¨ía
;

89 
‹dblks
;

90 
smblks
;

91 
hblks
;

92 
hblkhd
;

93 
usmblks
;

94 
fsmblks
;

95 
u‹dblks
;

96 
f‹dblks
;

97 
kìpco°
;

101 
mÆlöfo
 
	$mÆlöfo
 (Ë
__THROW
;

104 #i‚de‡
M_MXFAST


105 
	#M_MXFAST
 1

	)

107 #i‚de‡
M_NLBLKS


108 
	#M_NLBLKS
 2

	)

110 #i‚de‡
M_GRAIN


111 
	#M_GRAIN
 3

	)

113 #i‚de‡
M_KEEP


114 
	#M_KEEP
 4

	)

118 
	#M_TRIM_THRESHOLD
 -1

	)

119 
	#M_TOP_PAD
 -2

	)

120 
	#M_MMAP_THRESHOLD
 -3

	)

121 
	#M_MMAP_MAX
 -4

	)

122 
	#M_CHECK_ACTION
 -5

	)

123 
	#M_PERTURB
 -6

	)

124 
	#M_ARENA_TEST
 -7

	)

125 
	#M_ARENA_MAX
 -8

	)

128 
	$mÆl›t
 (
__∑øm
, 
__vÆ
Ë
__THROW
;

132 
	$mÆloc_åim
 (
size_t
 
__∑d
Ë
__THROW
;

136 
size_t
 
	$mÆloc_ußbÀ_size
 (*
__±r
Ë
__THROW
;

139 
	$mÆloc_°©s
 (Ë
__THROW
;

142 
	$mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
Ë
__THROW
;

145 (*
__MALLOC_HOOK_VOLATILE
 
__‰ì_hook
Ë(*
__±r
,

147 
__MALLOC_DEPRECATED
;

148 *(*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_hook
)(
size_t
 
__size
,

150 
__MALLOC_DEPRECATED
;

151 *(*
__MALLOC_HOOK_VOLATILE
 
__ªÆloc_hook
)(*
__±r
,

152 
size_t
 
__size
,

154 
__MALLOC_DEPRECATED
;

155 *(*
__MALLOC_HOOK_VOLATILE
 
__memÆign_hook
)(
size_t
 
__Æignmít
,

156 
size_t
 
__size
,

158 
__MALLOC_DEPRECATED
;

159 (*
__MALLOC_HOOK_VOLATILE
 
__a·î_m‹ec‹e_hook
) ();

162 
__END_DECLS


	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

29 #i‡
deföed
 
log
 && deföed 
__GNUC__


30 #w¨nög 
A
 
ma¸o
 
ˇŒed
 
log
 
was
 
Æªady
 
deföed
 
whí
 <
m©h
.
h
> wa†
ö˛uded
.

31 #w¨nög 
This
 
wûl
 
ˇu£
 
compû©i⁄
 
¥obÀms
.

34 
	g__BEGIN_DECLS


37 
	~<bôs/ty≥s.h
>

40 
	~<bôs/m©h-ve˘‹.h
>

43 
	~<bôs/Êﬂä.h
>

47 #i‡
__GNUC_PREREQ
 (3, 3)

48 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
 ())

	)

55 
	#HUGE_VAL
 1e10000

	)

57 #ifde‡
__USE_ISOC99


58 #i‡
__GNUC_PREREQ
 (3, 3)

59 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
 ())

	)

60 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
 ())

	)

62 
	#HUGE_VALF
 1e10000f

	)

63 
	#HUGE_VALL
 1e10000L

	)

66 #i‡
__HAVE_FLOAT16
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

67 
	#HUGE_VAL_F16
 (
	`__buûtö_huge_vÆf16
 ())

	)

69 #i‡
__HAVE_FLOAT32
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

70 
	#HUGE_VAL_F32
 (
	`__buûtö_huge_vÆf32
 ())

	)

72 #i‡
__HAVE_FLOAT64
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

73 
	#HUGE_VAL_F64
 (
	`__buûtö_huge_vÆf64
 ())

	)

75 #i‡
__HAVE_FLOAT128
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

76 
	#HUGE_VAL_F128
 (
	`__buûtö_huge_vÆf128
 ())

	)

78 #i‡
__HAVE_FLOAT32X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

79 
	#HUGE_VAL_F32X
 (
	`__buûtö_huge_vÆf32x
 ())

	)

81 #i‡
__HAVE_FLOAT64X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

82 
	#HUGE_VAL_F64X
 (
	`__buûtö_huge_vÆf64x
 ())

	)

84 #i‡
__HAVE_FLOAT128X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

85 
	#HUGE_VAL_F128X
 (
	`__buûtö_huge_vÆf128x
 ())

	)

88 #ifde‡
__USE_ISOC99


90 #i‡
__GNUC_PREREQ
 (3, 3)

91 
	#INFINITY
 (
	`__buûtö_öff
 ())

	)

93 
	#INFINITY
 
HUGE_VALF


	)

97 #i‡
__GNUC_PREREQ
 (3, 3)

98 
	#NAN
 (
	`__buûtö_«nf
 (""))

	)

103 
	#NAN
 (0.0‡/ 0.0f)

	)

107 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

109 #i‡
__GNUC_PREREQ
 (3, 3)

110 
	#SNANF
 (
	`__buûtö_«nsf
 (""))

	)

111 
	#SNAN
 (
	`__buûtö_«ns
 (""))

	)

112 
	#SNANL
 (
	`__buûtö_«n¶
 (""))

	)

115 #i‡
__HAVE_FLOAT16
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

116 
	#SNANF16
 (
	`__buûtö_«nsf16
 (""))

	)

118 #i‡
__HAVE_FLOAT32
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

119 
	#SNANF32
 (
	`__buûtö_«nsf32
 (""))

	)

121 #i‡
__HAVE_FLOAT64
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

122 
	#SNANF64
 (
	`__buûtö_«nsf64
 (""))

	)

124 #i‡
__HAVE_FLOAT128
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

125 
	#SNANF128
 (
	`__buûtö_«nsf128
 (""))

	)

127 #i‡
__HAVE_FLOAT32X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

128 
	#SNANF32X
 (
	`__buûtö_«nsf32x
 (""))

	)

130 #i‡
__HAVE_FLOAT64X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

131 
	#SNANF64X
 (
	`__buûtö_«nsf64x
 (""))

	)

133 #i‡
__HAVE_FLOAT128X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

134 
	#SNANF128X
 (
	`__buûtö_«nsf128x
 (""))

	)

138 
	~<bôs/Êt-evÆ-mëhod.h
>

140 #ifde‡
__USE_ISOC99


148 #i‡
__GLIBC_FLT_EVAL_METHOD
 == 0 || __GLIBC_FLT_EVAL_METHOD == 16

149 
	tÊﬂt_t
;

150 
	tdoubÀ_t
;

151 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 1

152 
	tÊﬂt_t
;

153 
	tdoubÀ_t
;

154 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 2

155 
	tÊﬂt_t
;

156 
	tdoubÀ_t
;

157 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 32

158 
_Flﬂt32
 
	tÊﬂt_t
;

159 
	tdoubÀ_t
;

160 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 33

161 
_Flﬂt32x
 
	tÊﬂt_t
;

162 
_Flﬂt32x
 
	tdoubÀ_t
;

163 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 64

164 
_Flﬂt64
 
	tÊﬂt_t
;

165 
_Flﬂt64
 
	tdoubÀ_t
;

166 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 65

167 
_Flﬂt64x
 
	tÊﬂt_t
;

168 
_Flﬂt64x
 
	tdoubÀ_t
;

169 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 128

170 
_Flﬂt128
 
	tÊﬂt_t
;

171 
_Flﬂt128
 
	tdoubÀ_t
;

172 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 129

173 
_Flﬂt128x
 
	tÊﬂt_t
;

174 
_Flﬂt128x
 
	tdoubÀ_t
;

190 
	~<bôs/Â-logb.h
>

191 #ifde‡
__USE_ISOC99


192 #i‡
__FP_LOGB0_IS_MIN


193 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

195 
	#FP_ILOGB0
 (-2147483647)

	)

197 #i‡
__FP_LOGBNAN_IS_MIN


198 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

200 
	#FP_ILOGBNAN
 2147483647

	)

203 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

204 #i‡
__WORDSIZE
 == 32

205 
	#__FP_LONG_MAX
 0x7fffffffL

	)

207 
	#__FP_LONG_MAX
 0x7fffffffffffffffL

	)

209 #i‡
__FP_LOGB0_IS_MIN


210 
	#FP_LLOGB0
 (-
__FP_LONG_MAX
 - 1)

	)

212 
	#FP_LLOGB0
 (-
__FP_LONG_MAX
)

	)

214 #i‡
__FP_LOGBNAN_IS_MIN


215 
	#FP_LLOGBNAN
 (-
__FP_LONG_MAX
 - 1)

	)

217 
	#FP_LLOGBNAN
 
__FP_LONG_MAX


	)

233 
	~<bôs/Â-Á°.h
>

235 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

239 
	mFP_INT_UPWARD
 =

240 
	#FP_INT_UPWARD
 0

	)

241 
FP_INT_UPWARD
,

242 
	mFP_INT_DOWNWARD
 =

243 
	#FP_INT_DOWNWARD
 1

	)

244 
FP_INT_DOWNWARD
,

245 
	mFP_INT_TOWARDZERO
 =

246 
	#FP_INT_TOWARDZERO
 2

	)

247 
FP_INT_TOWARDZERO
,

248 
	mFP_INT_TONEARESTFROMZERO
 =

249 
	#FP_INT_TONEARESTFROMZERO
 3

	)

250 
FP_INT_TONEARESTFROMZERO
,

251 
	mFP_INT_TONEAREST
 =

252 
	#FP_INT_TONEAREST
 4

	)

253 
FP_INT_TONEAREST
,

262 
	#__SIMD_DECL
(
fun˘i⁄
Ë
	`__CONCAT
 (
__DECL_SIMD_
, fun˘i⁄)

	)

264 
	#__MATHCALL_VEC
(
fun˘i⁄
, 
suffix
, 
¨gs
) \

265 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

266 
	`__MATHCALL
 (
fun˘i⁄
, 
suffix
, 
¨gs
)

	)

268 
	#__MATHDECL_VEC
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

269 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

270 
	`__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
)

	)

272 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

273 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

274 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

275 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

276 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

277 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

278 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

279 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

280 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

281 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

282 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

283 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

285 
	#_MdoubÀ_
 

	)

286 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

287 
	#__MATH_DECLARING_DOUBLE
 1

	)

288 
	#__MATH_DECLARING_FLOATN
 0

	)

289 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

290 
	~<bôs/m©hˇŒs.h
>

291 #unde‡
_MdoubÀ_


292 #unde‡
__MATH_PRECNAME


293 #unde‡
__MATH_DECLARING_DOUBLE


294 #unde‡
__MATH_DECLARING_FLOATN


296 #ifde‡
__USE_ISOC99


302 
	#_MdoubÀ_
 

	)

303 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

304 
	#__MATH_DECLARING_DOUBLE
 0

	)

305 
	#__MATH_DECLARING_FLOATN
 0

	)

306 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

307 
	~<bôs/m©hˇŒs.h
>

308 #unde‡
_MdoubÀ_


309 #unde‡
__MATH_PRECNAME


310 #unde‡
__MATH_DECLARING_DOUBLE


311 #unde‡
__MATH_DECLARING_FLOATN


313 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

314 || 
deföed
 
__LDBL_COMPAT
 \

315 || 
deföed
 
_LIBC_TEST


316 #ifde‡
__LDBL_COMPAT


318 #ifde‡
__USE_ISOC99


319 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

320 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

321 #ifde‡
__REDIRECT_NTH


322 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

323 
__∆dbl_√xâow¨df
)

324 
	`__©åibuã__
 ((
__c⁄°__
));

325 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

326 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

327 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

328 (
__x
, 
__y
),

329 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

333 #unde‡
__MATHDECL_1


334 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

335 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

336 
¨gs
, 
Æüs
)

	)

337 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

338 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

344 
	#_MdoubÀ_
 

	)

345 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

346 
	#__MATH_DECLARING_DOUBLE
 0

	)

347 
	#__MATH_DECLARING_FLOATN
 0

	)

348 
	#__MATH_DECLARE_LDOUBLE
 1

	)

349 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

350 
	~<bôs/m©hˇŒs.h
>

351 #unde‡
_MdoubÀ_


352 #unde‡
__MATH_PRECNAME


353 #unde‡
__MATH_DECLARING_DOUBLE


354 #unde‡
__MATH_DECLARING_FLOATN


363 #i‡
__HAVE_DISTINCT_FLOAT16
 || (
__HAVE_FLOAT16
 && !
deföed
 
_LIBC
)

364 
	#_MdoubÀ_
 
_Flﬂt16


	)

365 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f16
##
	)
r

366 
	#__MATH_DECLARING_DOUBLE
 0

	)

367 
	#__MATH_DECLARING_FLOATN
 1

	)

368 #i‡
__HAVE_DISTINCT_FLOAT16


369 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

371 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

372 
	~<bôs/m©hˇŒs.h
>

374 #unde‡
_MdoubÀ_


375 #unde‡
__MATH_PRECNAME


376 #unde‡
__MATH_DECLARING_DOUBLE


377 #unde‡
__MATH_DECLARING_FLOATN


380 #i‡
__HAVE_DISTINCT_FLOAT32
 || (
__HAVE_FLOAT32
 && !
deföed
 
_LIBC
)

381 
	#_MdoubÀ_
 
_Flﬂt32


	)

382 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f32
##
	)
r

383 
	#__MATH_DECLARING_DOUBLE
 0

	)

384 
	#__MATH_DECLARING_FLOATN
 1

	)

385 #i‡
__HAVE_DISTINCT_FLOAT32


386 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

388 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

389 
	~<bôs/m©hˇŒs.h
>

391 #unde‡
_MdoubÀ_


392 #unde‡
__MATH_PRECNAME


393 #unde‡
__MATH_DECLARING_DOUBLE


394 #unde‡
__MATH_DECLARING_FLOATN


397 #i‡
__HAVE_DISTINCT_FLOAT64
 || (
__HAVE_FLOAT64
 && !
deföed
 
_LIBC
)

398 
	#_MdoubÀ_
 
_Flﬂt64


	)

399 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f64
##
	)
r

400 
	#__MATH_DECLARING_DOUBLE
 0

	)

401 
	#__MATH_DECLARING_FLOATN
 1

	)

402 #i‡
__HAVE_DISTINCT_FLOAT64


403 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

405 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

406 
	~<bôs/m©hˇŒs.h
>

408 #unde‡
_MdoubÀ_


409 #unde‡
__MATH_PRECNAME


410 #unde‡
__MATH_DECLARING_DOUBLE


411 #unde‡
__MATH_DECLARING_FLOATN


414 #i‡
__HAVE_DISTINCT_FLOAT128
 || (
__HAVE_FLOAT128
 && !
deföed
 
_LIBC
)

415 
	#_MdoubÀ_
 
_Flﬂt128


	)

416 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f128
##
	)
r

417 
	#__MATH_DECLARING_DOUBLE
 0

	)

418 
	#__MATH_DECLARING_FLOATN
 1

	)

419 #i‡
__HAVE_DISTINCT_FLOAT128


420 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

422 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

423 
	~<bôs/m©hˇŒs.h
>

425 #unde‡
_MdoubÀ_


426 #unde‡
__MATH_PRECNAME


427 #unde‡
__MATH_DECLARING_DOUBLE


428 #unde‡
__MATH_DECLARING_FLOATN


431 #i‡
__HAVE_DISTINCT_FLOAT32X
 || (
__HAVE_FLOAT32X
 && !
deföed
 
_LIBC
)

432 
	#_MdoubÀ_
 
_Flﬂt32x


	)

433 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f32x
##
	)
r

434 
	#__MATH_DECLARING_DOUBLE
 0

	)

435 
	#__MATH_DECLARING_FLOATN
 1

	)

436 #i‡
__HAVE_DISTINCT_FLOAT32X


437 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

439 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

440 
	~<bôs/m©hˇŒs.h
>

442 #unde‡
_MdoubÀ_


443 #unde‡
__MATH_PRECNAME


444 #unde‡
__MATH_DECLARING_DOUBLE


445 #unde‡
__MATH_DECLARING_FLOATN


448 #i‡
__HAVE_DISTINCT_FLOAT64X
 || (
__HAVE_FLOAT64X
 && !
deföed
 
_LIBC
)

449 
	#_MdoubÀ_
 
_Flﬂt64x


	)

450 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f64x
##
	)
r

451 
	#__MATH_DECLARING_DOUBLE
 0

	)

452 
	#__MATH_DECLARING_FLOATN
 1

	)

453 #i‡
__HAVE_DISTINCT_FLOAT64X


454 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

456 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

457 
	~<bôs/m©hˇŒs.h
>

459 #unde‡
_MdoubÀ_


460 #unde‡
__MATH_PRECNAME


461 #unde‡
__MATH_DECLARING_DOUBLE


462 #unde‡
__MATH_DECLARING_FLOATN


465 #i‡
__HAVE_DISTINCT_FLOAT128X
 || (
__HAVE_FLOAT128X
 && !
deföed
 
_LIBC
)

466 
	#_MdoubÀ_
 
_Flﬂt128x


	)

467 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f128x
##
	)
r

468 
	#__MATH_DECLARING_DOUBLE
 0

	)

469 
	#__MATH_DECLARING_FLOATN
 1

	)

470 #i‡
__HAVE_DISTINCT_FLOAT128X


471 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

473 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

474 
	~<bôs/m©hˇŒs.h
>

476 #unde‡
_MdoubÀ_


477 #unde‡
__MATH_PRECNAME


478 #unde‡
__MATH_DECLARING_DOUBLE


479 #unde‡
__MATH_DECLARING_FLOATN


482 #unde‡
__MATHDECL_1


483 #unde‡
__MATHDECL


484 #unde‡
__MATHCALL


487 
	#__MATHCALL_NARROW_ARGS_1
 (
_M¨g_
 
__x
)

	)

488 
	#__MATHCALL_NARROW_ARGS_2
 (
_M¨g_
 
__x
, _M¨g_ 
__y
)

	)

489 
	#__MATHCALL_NARROW_ARGS_3
 (
_M¨g_
 
__x
, _M¨g_ 
__y
, _M¨g_ 
__z
)

	)

490 
	#__MATHCALL_NARROW_NORMAL
(
func
, 
«rgs
) \

491 
_Mªt_
 
func
 
__MATHCALL_NARROW_ARGS_
 ## 
«rgs
 
__THROW


	)

492 
	#__MATHCALL_NARROW_REDIR
(
func
, 
ªdú
, 
«rgs
) \

493 
_Mªt_
 
	`__REDIRECT_NTH
 (
func
, 
__MATHCALL_NARROW_ARGS_
 ## 
«rgs
, \

494 
ªdú
)

	)

495 
	#__MATHCALL_NARROW
(
func
, 
ªdú
, 
«rgs
) \

496 
	`__MATHCALL_NARROW_NORMAL
 (
func
, 
«rgs
)

	)

498 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

500 
	#_Mªt_
 

	)

501 
	#_M¨g_
 

	)

502 
	#__MATHCALL_NAME
(
«me
Ë
f
 ## 
	)
name

503 
	~<bôs/m©hˇŒs-«ºow.h
>

504 #unde‡
_Mªt_


505 #unde‡
_M¨g_


506 #unde‡
__MATHCALL_NAME


508 
	#_Mªt_
 

	)

509 
	#_M¨g_
 

	)

510 
	#__MATHCALL_NAME
(
«me
Ë
f
 ##Çamê## 
l


	)

511 #ifde‡
__LDBL_COMPAT


512 
	#__MATHCALL_REDIR_NAME
(
«me
Ë
f
 ## 
	)
name

513 #unde‡
__MATHCALL_NARROW


514 
	#__MATHCALL_NARROW
(
func
, 
ªdú
, 
«rgs
) \

515 
	`__MATHCALL_NARROW_REDIR
 (
func
, 
ªdú
, 
«rgs
)

	)

517 
	~<bôs/m©hˇŒs-«ºow.h
>

518 #unde‡
_Mªt_


519 #unde‡
_M¨g_


520 #unde‡
__MATHCALL_NAME


521 #ifde‡
__LDBL_COMPAT


522 #unde‡
__MATHCALL_REDIR_NAME


523 #unde‡
__MATHCALL_NARROW


524 
	#__MATHCALL_NARROW
(
func
, 
ªdú
, 
«rgs
) \

525 
	`__MATHCALL_NARROW_NORMAL
 (
func
, 
«rgs
)

	)

528 
	#_Mªt_
 

	)

529 
	#_M¨g_
 

	)

530 
	#__MATHCALL_NAME
(
«me
Ë
d
 ##Çamê## 
l


	)

531 #ifde‡
__LDBL_COMPAT


532 
	#__MATHCALL_REDIR_NAME
(
«me
Ë
__∆dbl_d
 ##Çamê## 
l


	)

533 #unde‡
__MATHCALL_NARROW


534 
	#__MATHCALL_NARROW
(
func
, 
ªdú
, 
«rgs
) \

535 
	`__MATHCALL_NARROW_REDIR
 (
func
, 
ªdú
, 
«rgs
)

	)

537 
	~<bôs/m©hˇŒs-«ºow.h
>

538 #unde‡
_Mªt_


539 #unde‡
_M¨g_


540 #unde‡
__MATHCALL_NAME


541 #ifde‡
__LDBL_COMPAT


542 #unde‡
__MATHCALL_REDIR_NAME


543 #unde‡
__MATHCALL_NARROW


544 
	#__MATHCALL_NARROW
(
func
, 
ªdú
, 
«rgs
) \

545 
	`__MATHCALL_NARROW_NORMAL
 (
func
, 
«rgs
)

	)

550 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

552 #i‡
__HAVE_FLOAT16
 && 
__HAVE_FLOAT32


553 
	#_Mªt_
 
_Flﬂt16


	)

554 
	#_M¨g_
 
_Flﬂt32


	)

555 
	#__MATHCALL_NAME
(
«me
Ë
f16
 ##Çamê## 
f32


	)

556 
	~<bôs/m©hˇŒs-«ºow.h
>

557 #unde‡
_Mªt_


558 #unde‡
_M¨g_


559 #unde‡
__MATHCALL_NAME


562 #i‡
__HAVE_FLOAT16
 && 
__HAVE_FLOAT32X


563 
	#_Mªt_
 
_Flﬂt16


	)

564 
	#_M¨g_
 
_Flﬂt32x


	)

565 
	#__MATHCALL_NAME
(
«me
Ë
f16
 ##Çamê## 
f32x


	)

566 
	~<bôs/m©hˇŒs-«ºow.h
>

567 #unde‡
_Mªt_


568 #unde‡
_M¨g_


569 #unde‡
__MATHCALL_NAME


572 #i‡
__HAVE_FLOAT16
 && 
__HAVE_FLOAT64


573 
	#_Mªt_
 
_Flﬂt16


	)

574 
	#_M¨g_
 
_Flﬂt64


	)

575 
	#__MATHCALL_NAME
(
«me
Ë
f16
 ##Çamê## 
f64


	)

576 
	~<bôs/m©hˇŒs-«ºow.h
>

577 #unde‡
_Mªt_


578 #unde‡
_M¨g_


579 #unde‡
__MATHCALL_NAME


582 #i‡
__HAVE_FLOAT16
 && 
__HAVE_FLOAT64X


583 
	#_Mªt_
 
_Flﬂt16


	)

584 
	#_M¨g_
 
_Flﬂt64x


	)

585 
	#__MATHCALL_NAME
(
«me
Ë
f16
 ##Çamê## 
f64x


	)

586 
	~<bôs/m©hˇŒs-«ºow.h
>

587 #unde‡
_Mªt_


588 #unde‡
_M¨g_


589 #unde‡
__MATHCALL_NAME


592 #i‡
__HAVE_FLOAT16
 && 
__HAVE_FLOAT128


593 
	#_Mªt_
 
_Flﬂt16


	)

594 
	#_M¨g_
 
_Flﬂt128


	)

595 
	#__MATHCALL_NAME
(
«me
Ë
f16
 ##Çamê## 
f128


	)

596 
	~<bôs/m©hˇŒs-«ºow.h
>

597 #unde‡
_Mªt_


598 #unde‡
_M¨g_


599 #unde‡
__MATHCALL_NAME


602 #i‡
__HAVE_FLOAT16
 && 
__HAVE_FLOAT128X


603 
	#_Mªt_
 
_Flﬂt16


	)

604 
	#_M¨g_
 
_Flﬂt128x


	)

605 
	#__MATHCALL_NAME
(
«me
Ë
f16
 ##Çamê## 
f128x


	)

606 
	~<bôs/m©hˇŒs-«ºow.h
>

607 #unde‡
_Mªt_


608 #unde‡
_M¨g_


609 #unde‡
__MATHCALL_NAME


612 #i‡
__HAVE_FLOAT32
 && 
__HAVE_FLOAT32X


613 
	#_Mªt_
 
_Flﬂt32


	)

614 
	#_M¨g_
 
_Flﬂt32x


	)

615 
	#__MATHCALL_NAME
(
«me
Ë
f32
 ##Çamê## 
f32x


	)

616 
	~<bôs/m©hˇŒs-«ºow.h
>

617 #unde‡
_Mªt_


618 #unde‡
_M¨g_


619 #unde‡
__MATHCALL_NAME


622 #i‡
__HAVE_FLOAT32
 && 
__HAVE_FLOAT64


623 
	#_Mªt_
 
_Flﬂt32


	)

624 
	#_M¨g_
 
_Flﬂt64


	)

625 
	#__MATHCALL_NAME
(
«me
Ë
f32
 ##Çamê## 
f64


	)

626 
	~<bôs/m©hˇŒs-«ºow.h
>

627 #unde‡
_Mªt_


628 #unde‡
_M¨g_


629 #unde‡
__MATHCALL_NAME


632 #i‡
__HAVE_FLOAT32
 && 
__HAVE_FLOAT64X


633 
	#_Mªt_
 
_Flﬂt32


	)

634 
	#_M¨g_
 
_Flﬂt64x


	)

635 
	#__MATHCALL_NAME
(
«me
Ë
f32
 ##Çamê## 
f64x


	)

636 
	~<bôs/m©hˇŒs-«ºow.h
>

637 #unde‡
_Mªt_


638 #unde‡
_M¨g_


639 #unde‡
__MATHCALL_NAME


642 #i‡
__HAVE_FLOAT32
 && 
__HAVE_FLOAT128


643 
	#_Mªt_
 
_Flﬂt32


	)

644 
	#_M¨g_
 
_Flﬂt128


	)

645 
	#__MATHCALL_NAME
(
«me
Ë
f32
 ##Çamê## 
f128


	)

646 
	~<bôs/m©hˇŒs-«ºow.h
>

647 #unde‡
_Mªt_


648 #unde‡
_M¨g_


649 #unde‡
__MATHCALL_NAME


652 #i‡
__HAVE_FLOAT32
 && 
__HAVE_FLOAT128X


653 
	#_Mªt_
 
_Flﬂt32


	)

654 
	#_M¨g_
 
_Flﬂt128x


	)

655 
	#__MATHCALL_NAME
(
«me
Ë
f32
 ##Çamê## 
f128x


	)

656 
	~<bôs/m©hˇŒs-«ºow.h
>

657 #unde‡
_Mªt_


658 #unde‡
_M¨g_


659 #unde‡
__MATHCALL_NAME


662 #i‡
__HAVE_FLOAT32X
 && 
__HAVE_FLOAT64


663 
	#_Mªt_
 
_Flﬂt32x


	)

664 
	#_M¨g_
 
_Flﬂt64


	)

665 
	#__MATHCALL_NAME
(
«me
Ë
f32x
 ##Çamê## 
f64


	)

666 
	~<bôs/m©hˇŒs-«ºow.h
>

667 #unde‡
_Mªt_


668 #unde‡
_M¨g_


669 #unde‡
__MATHCALL_NAME


672 #i‡
__HAVE_FLOAT32X
 && 
__HAVE_FLOAT64X


673 
	#_Mªt_
 
_Flﬂt32x


	)

674 
	#_M¨g_
 
_Flﬂt64x


	)

675 
	#__MATHCALL_NAME
(
«me
Ë
f32x
 ##Çamê## 
f64x


	)

676 
	~<bôs/m©hˇŒs-«ºow.h
>

677 #unde‡
_Mªt_


678 #unde‡
_M¨g_


679 #unde‡
__MATHCALL_NAME


682 #i‡
__HAVE_FLOAT32X
 && 
__HAVE_FLOAT128


683 
	#_Mªt_
 
_Flﬂt32x


	)

684 
	#_M¨g_
 
_Flﬂt128


	)

685 
	#__MATHCALL_NAME
(
«me
Ë
f32x
 ##Çamê## 
f128


	)

686 
	~<bôs/m©hˇŒs-«ºow.h
>

687 #unde‡
_Mªt_


688 #unde‡
_M¨g_


689 #unde‡
__MATHCALL_NAME


692 #i‡
__HAVE_FLOAT32X
 && 
__HAVE_FLOAT128X


693 
	#_Mªt_
 
_Flﬂt32x


	)

694 
	#_M¨g_
 
_Flﬂt128x


	)

695 
	#__MATHCALL_NAME
(
«me
Ë
f32x
 ##Çamê## 
f128x


	)

696 
	~<bôs/m©hˇŒs-«ºow.h
>

697 #unde‡
_Mªt_


698 #unde‡
_M¨g_


699 #unde‡
__MATHCALL_NAME


702 #i‡
__HAVE_FLOAT64
 && 
__HAVE_FLOAT64X


703 
	#_Mªt_
 
_Flﬂt64


	)

704 
	#_M¨g_
 
_Flﬂt64x


	)

705 
	#__MATHCALL_NAME
(
«me
Ë
f64
 ##Çamê## 
f64x


	)

706 
	~<bôs/m©hˇŒs-«ºow.h
>

707 #unde‡
_Mªt_


708 #unde‡
_M¨g_


709 #unde‡
__MATHCALL_NAME


712 #i‡
__HAVE_FLOAT64
 && 
__HAVE_FLOAT128


713 
	#_Mªt_
 
_Flﬂt64


	)

714 
	#_M¨g_
 
_Flﬂt128


	)

715 
	#__MATHCALL_NAME
(
«me
Ë
f64
 ##Çamê## 
f128


	)

716 
	~<bôs/m©hˇŒs-«ºow.h
>

717 #unde‡
_Mªt_


718 #unde‡
_M¨g_


719 #unde‡
__MATHCALL_NAME


722 #i‡
__HAVE_FLOAT64
 && 
__HAVE_FLOAT128X


723 
	#_Mªt_
 
_Flﬂt64


	)

724 
	#_M¨g_
 
_Flﬂt128x


	)

725 
	#__MATHCALL_NAME
(
«me
Ë
f64
 ##Çamê## 
f128x


	)

726 
	~<bôs/m©hˇŒs-«ºow.h
>

727 #unde‡
_Mªt_


728 #unde‡
_M¨g_


729 #unde‡
__MATHCALL_NAME


732 #i‡
__HAVE_FLOAT64X
 && 
__HAVE_FLOAT128


733 
	#_Mªt_
 
_Flﬂt64x


	)

734 
	#_M¨g_
 
_Flﬂt128


	)

735 
	#__MATHCALL_NAME
(
«me
Ë
f64x
 ##Çamê## 
f128


	)

736 
	~<bôs/m©hˇŒs-«ºow.h
>

737 #unde‡
_Mªt_


738 #unde‡
_M¨g_


739 #unde‡
__MATHCALL_NAME


742 #i‡
__HAVE_FLOAT64X
 && 
__HAVE_FLOAT128X


743 
	#_Mªt_
 
_Flﬂt64x


	)

744 
	#_M¨g_
 
_Flﬂt128x


	)

745 
	#__MATHCALL_NAME
(
«me
Ë
f64x
 ##Çamê## 
f128x


	)

746 
	~<bôs/m©hˇŒs-«ºow.h
>

747 #unde‡
_Mªt_


748 #unde‡
_M¨g_


749 #unde‡
__MATHCALL_NAME


752 #i‡
__HAVE_FLOAT128
 && 
__HAVE_FLOAT128X


753 
	#_Mªt_
 
_Flﬂt128


	)

754 
	#_M¨g_
 
_Flﬂt128x


	)

755 
	#__MATHCALL_NAME
(
«me
Ë
f128
 ##Çamê## 
f128x


	)

756 
	~<bôs/m©hˇŒs-«ºow.h
>

757 #unde‡
_Mªt_


758 #unde‡
_M¨g_


759 #unde‡
__MATHCALL_NAME


764 #unde‡
__MATHCALL_NARROW_ARGS_1


765 #unde‡
__MATHCALL_NARROW_ARGS_2


766 #unde‡
__MATHCALL_NARROW_ARGS_3


767 #unde‡
__MATHCALL_NARROW_NORMAL


768 #unde‡
__MATHCALL_NARROW_REDIR


769 #unde‡
__MATHCALL_NARROW


771 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


773 
signgam
;

776 #i‡(
__HAVE_DISTINCT_FLOAT16
 \

777 || 
__HAVE_DISTINCT_FLOAT32
 \

778 || 
__HAVE_DISTINCT_FLOAT64
 \

779 || 
__HAVE_DISTINCT_FLOAT32X
 \

780 || 
__HAVE_DISTINCT_FLOAT64X
 \

781 || 
__HAVE_DISTINCT_FLOAT128X
)

794 #ifde‡
__NO_LONG_DOUBLE_MATH


795 #i‡
__HAVE_DISTINCT_FLOAT128


798 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

799 ( (
TG_ARG
Ë= (Ë? 
FUNC
 ## 
f
 
ARGS
 : FUNC ARGS)

	)

800 #ñi‡
__HAVE_DISTINCT_FLOAT128


801 #i‡
__HAVE_GENERIC_SELECTION


802 #i‡
__HAVE_FLOATN_NOT_TYPEDEF
 && 
__HAVE_FLOAT32


803 
	#__MATH_TG_F32
(
FUNC
, 
ARGS
Ë
_Flﬂt32
: FUNC ## 
f
 ARGS,

	)

805 
	#__MATH_TG_F32
(
FUNC
, 
ARGS
)

	)

807 #i‡
__HAVE_FLOATN_NOT_TYPEDEF
 && 
__HAVE_FLOAT64X


808 #i‡
__HAVE_FLOAT64X_LONG_DOUBLE


809 
	#__MATH_TG_F64X
(
FUNC
, 
ARGS
Ë
_Flﬂt64x
: FUNC ## 
l
 ARGS,

	)

811 
	#__MATH_TG_F64X
(
FUNC
, 
ARGS
Ë
_Flﬂt64x
: FUNC ## 
f128
 ARGS,

	)

814 
	#__MATH_TG_F64X
(
FUNC
, 
ARGS
)

	)

816 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

817 
	`_Gíîic
 ((
TG_ARG
), \

818 : 
FUNC
 ## 
f
 
ARGS
, \

819 
	`__MATH_TG_F32
 (
FUNC
, 
ARGS
) \

820 : 
FUNC
 
ARGS
, \

821 : 
FUNC
 ## 
l
 
ARGS
, \

822 
	`__MATH_TG_F64X
 (
FUNC
, 
ARGS
) \

823 
_Flﬂt128
: 
FUNC
 ## 
f128
 
ARGS
)

	)

825 #i‡
__HAVE_FLOATN_NOT_TYPEDEF


828 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

829 
__buûtö_choo£_ex¥
 \

830 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
TG_ARG
), ), \

831 
FUNC
 ## 
f
 
ARGS
, \

832 
__buûtö_choo£_ex¥
 \

833 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
TG_ARG
), ), \

834 
FUNC
 
ARGS
, \

835 
__buûtö_choo£_ex¥
 \

836 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
TG_ARG
), ), \

837 
FUNC
 ## 
l
 
ARGS
, \

838 
FUNC
 ## 
f128
 
ARGS
)))

	)

841 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

842 ( (
TG_ARG
) ==  () \

843 ? 
FUNC
 ## 
f
 
ARGS
 \

844 :  (
TG_ARG
) ==  () \

845 ? 
FUNC
 
ARGS
 \

846 : 
FUNC
 ## 
l
 
ARGS
)

	)

850 #ifde‡
__USE_ISOC99


855 
FP_NAN
 =

856 
	#FP_NAN
 0

	)

857 
FP_NAN
,

858 
FP_INFINITE
 =

859 
	#FP_INFINITE
 1

	)

860 
FP_INFINITE
,

861 
FP_ZERO
 =

862 
	#FP_ZERO
 2

	)

863 
FP_ZERO
,

864 
FP_SUBNORMAL
 =

865 
	#FP_SUBNORMAL
 3

	)

866 
FP_SUBNORMAL
,

867 
FP_NORMAL
 =

868 
	#FP_NORMAL
 4

	)

869 
FP_NORMAL


877 #i‡((
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
) \

878 || 
	`__glibc_˛™g_¥îeq
 (2,8)) \

879 && (!
deföed
 
__OPTIMIZE_SIZE__
 || deföed 
__˝lu•lus
)

886 
	#Â˛assify
(
x
Ë
	`__buûtö_Â˛assify
 (
FP_NAN
, 
FP_INFINITE
, \

887 
FP_NORMAL
, 
FP_SUBNORMAL
, 
FP_ZERO
, 
x
)

	)

889 
	#Â˛assify
(
x
Ë
	`__MATH_TG
 ((x), 
__Â˛assify
, (x))

	)

893 #i‡
	`__GNUC_PREREQ
 (6,0Ë|| 
	`__glibc_˛™g_¥îeq
 (3,3)

894 
	#signbô
(
x
Ë
	`__buûtö_signbô
 (x)

	)

895 #ñi‡
deföed
 
__˝lu•lus


903 
	#signbô
(
x
Ë
	`__buûtö_signbôl
 (x)

	)

904 #ñi‡
	`__GNUC_PREREQ
 (4,0)

905 
	#signbô
(
x
Ë
	`__MATH_TG
 ((x), 
__buûtö_signbô
, (x))

	)

907 
	#signbô
(
x
Ë
	`__MATH_TG
 ((x), 
__signbô
, (x))

	)

911 #i‡(
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
) \

912 || 
	$__glibc_˛™g_¥îeq
 (2,8)

913 
	#isföôe
(
x
Ë
	`__buûtö_isföôe
 (x)

	)

915 
	#isföôe
(
x
Ë
	`__MATH_TG
 ((x), 
__föôe
, (x))

	)

919 #i‡(
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
) \

920 || 
	$__glibc_˛™g_¥îeq
 (2,8)

921 
	#i¢‹mÆ
(
x
Ë
	`__buûtö_i¢‹mÆ
 (x)

	)

923 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

928 #i‡(
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
) \

929 || 
	$__glibc_˛™g_¥îeq
 (2,8)

930 
	#i¢™
(
x
Ë
	`__buûtö_i¢™
 (x)

	)

932 
	#i¢™
(
x
Ë
	`__MATH_TG
 ((x), 
__i¢™
, (x))

	)

936 #i‡
__HAVE_DISTINCT_FLOAT128
 && !
	`__GNUC_PREREQ
 (7,0) \

937 && !
deföed
 
__SUPPORT_SNAN__
 && !deföed 
__˝lu•lus


943 
	#isöf
(
x
) \

944 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
x
), 
_Flﬂt128
) \

945 ? 
	`__isöff128
 (
x
Ë: 
	`__buûtö_isöf_sign
 (x))

	)

946 #ñi‡(
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
) \

947 || 
	$__glibc_˛™g_¥îeq
 (3,7)

948 
	#isöf
(
x
Ë
	`__buûtö_isöf_sign
 (x)

	)

950 
	#isöf
(
x
Ë
	`__MATH_TG
 ((x), 
__isöf
, (x))

	)

954 
	#MATH_ERRNO
 1

	)

955 
	#MATH_ERREXCEPT
 2

	)

962 #ifde‡
__FAST_MATH__


963 
	#m©h_îrh™dlög
 0

	)

964 #ñi‡
deföed
 
__NO_MATH_ERRNO__


965 
	#m©h_îrh™dlög
 (
MATH_ERREXCEPT
)

	)

967 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

972 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

973 
	~<bôs/isˇn⁄iˇl.h
>

976 #i‚de‡
__˝lu•lus


977 
	#issig«lög
(
x
Ë
	`__MATH_TG
 ((x), 
__issig«lög
, (x))

	)

986 
ölöe
 
	`issig«lög
 (
__vÆ
Ë{  
	`__issig«lögf
 (__val); }

987 
ölöe
 
	`issig«lög
 (
__vÆ
Ë{  
	`__issig«lög
 (__val); }

988 
ölöe
 

989 
	`issig«lög
 (
__vÆ
)

991 #ifde‡
__NO_LONG_DOUBLE_MATH


992  
	`__issig«lög
 (
__vÆ
);

994  
	`__issig«lögl
 (
__vÆ
);

997 #i‡
__HAVE_FLOAT128_UNLIKE_LDBL


1000 
ölöe
 
	`issig«lög
 (
_Flﬂt128
 
__vÆ
Ë{  
	`__issig«lögf128
 (__val); }

1002 
	}
}

1006 
	#issubn‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_SUBNORMAL
)

	)

1009 #i‚de‡
__˝lu•lus


1010 #ifde‡
__SUPPORT_SNAN__


1011 
	#iszîo
(
x
Ë(
	`Â˛assify
 (xË=
FP_ZERO
)

	)

1013 
	#iszîo
(
x
Ë(((
	`__ty≥of
 (x)Ë(x)Ë=0)

	)

1017 #ifde‡
__SUPPORT_SNAN__


1018 
ölöe
 

1019 
iszîo
 (
__vÆ
)

1021  
__Â˛assifyf
 (
__vÆ
Ë=
FP_ZERO
;

1023 
ölöe
 

1024 
iszîo
 (
__vÆ
)

1026  
__Â˛assify
 (
__vÆ
Ë=
FP_ZERO
;

1028 
ölöe
 

1029 
iszîo
 (
__vÆ
)

1031 #ifde‡
__NO_LONG_DOUBLE_MATH


1032  
__Â˛assify
 (
__vÆ
Ë=
FP_ZERO
;

1034  
__Â˛assifyl
 (
__vÆ
Ë=
FP_ZERO
;

1037 #i‡
__HAVE_FLOAT128_UNLIKE_LDBL


1040 
ölöe
 

1041 
iszîo
 (
_Flﬂt128
 
__vÆ
)

1043  
__Â˛assifyf128
 (
__vÆ
Ë=
FP_ZERO
;

1047 
ãm∂©e
 <
˛ass
 
__T
> 
ölöe
 
boﬁ


1048 
iszîo
 (
__T
 
__vÆ
)

1050  
__vÆ
 == 0;

1057 #ifde‡
__USE_XOPEN


1059 
	#MAXFLOAT
 3.40282347e+38F

	)

1064 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


1065 
	#M_E
 2.7182818284590452354

	)

1066 
	#M_LOG2E
 1.4426950408889634074

	)

1067 
	#M_LOG10E
 0.43429448190325182765

	)

1068 
	#M_LN2
 0.69314718055994530942

	)

1069 
	#M_LN10
 2.30258509299404568402

	)

1070 
	#M_PI
 3.14159265358979323846

	)

1071 
	#M_PI_2
 1.57079632679489661923

	)

1072 
	#M_PI_4
 0.78539816339744830962

	)

1073 
	#M_1_PI
 0.31830988618379067154

	)

1074 
	#M_2_PI
 0.63661977236758134308

	)

1075 
	#M_2_SQRTPI
 1.12837916709551257390

	)

1076 
	#M_SQRT2
 1.41421356237309504880

	)

1077 
	#M_SQRT1_2
 0.70710678118654752440

	)

1083 #ifde‡
__USE_GNU


1084 
	#M_El
 2.718281828459045235360287471352662498L

	)

1085 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

1086 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

1087 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

1088 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

1089 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

1090 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

1091 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

1092 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

1093 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

1094 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

1095 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

1096 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

1099 #i‡
__HAVE_FLOAT16
 && 
deföed
 
__USE_GNU


1100 
	#M_Ef16
 
	`__f16
 (2.718281828459045235360287471352662498Ë

	)

1101 
	#M_LOG2Ef16
 
	`__f16
 (1.442695040888963407359924681001892137Ë

	)

1102 
	#M_LOG10Ef16
 
	`__f16
 (0.434294481903251827651128918916605082Ë

	)

1103 
	#M_LN2f16
 
	`__f16
 (0.693147180559945309417232121458176568Ë

	)

1104 
	#M_LN10f16
 
	`__f16
 (2.302585092994045684017991454684364208Ë

	)

1105 
	#M_PIf16
 
	`__f16
 (3.141592653589793238462643383279502884Ë

	)

1106 
	#M_PI_2f16
 
	`__f16
 (1.570796326794896619231321691639751442Ë

	)

1107 
	#M_PI_4f16
 
	`__f16
 (0.785398163397448309615660845819875721Ë

	)

1108 
	#M_1_PIf16
 
	`__f16
 (0.318309886183790671537767526745028724Ë

	)

1109 
	#M_2_PIf16
 
	`__f16
 (0.636619772367581343075535053490057448Ë

	)

1110 
	#M_2_SQRTPIf16
 
	`__f16
 (1.128379167095512573896158903121545172Ë

	)

1111 
	#M_SQRT2f16
 
	`__f16
 (1.414213562373095048801688724209698079Ë

	)

1112 
	#M_SQRT1_2f16
 
	`__f16
 (0.707106781186547524400844362104849039Ë

	)

1115 #i‡
__HAVE_FLOAT32
 && 
deföed
 
__USE_GNU


1116 
	#M_Ef32
 
	`__f32
 (2.718281828459045235360287471352662498Ë

	)

1117 
	#M_LOG2Ef32
 
	`__f32
 (1.442695040888963407359924681001892137Ë

	)

1118 
	#M_LOG10Ef32
 
	`__f32
 (0.434294481903251827651128918916605082Ë

	)

1119 
	#M_LN2f32
 
	`__f32
 (0.693147180559945309417232121458176568Ë

	)

1120 
	#M_LN10f32
 
	`__f32
 (2.302585092994045684017991454684364208Ë

	)

1121 
	#M_PIf32
 
	`__f32
 (3.141592653589793238462643383279502884Ë

	)

1122 
	#M_PI_2f32
 
	`__f32
 (1.570796326794896619231321691639751442Ë

	)

1123 
	#M_PI_4f32
 
	`__f32
 (0.785398163397448309615660845819875721Ë

	)

1124 
	#M_1_PIf32
 
	`__f32
 (0.318309886183790671537767526745028724Ë

	)

1125 
	#M_2_PIf32
 
	`__f32
 (0.636619772367581343075535053490057448Ë

	)

1126 
	#M_2_SQRTPIf32
 
	`__f32
 (1.128379167095512573896158903121545172Ë

	)

1127 
	#M_SQRT2f32
 
	`__f32
 (1.414213562373095048801688724209698079Ë

	)

1128 
	#M_SQRT1_2f32
 
	`__f32
 (0.707106781186547524400844362104849039Ë

	)

1131 #i‡
__HAVE_FLOAT64
 && 
deföed
 
__USE_GNU


1132 
	#M_Ef64
 
	`__f64
 (2.718281828459045235360287471352662498Ë

	)

1133 
	#M_LOG2Ef64
 
	`__f64
 (1.442695040888963407359924681001892137Ë

	)

1134 
	#M_LOG10Ef64
 
	`__f64
 (0.434294481903251827651128918916605082Ë

	)

1135 
	#M_LN2f64
 
	`__f64
 (0.693147180559945309417232121458176568Ë

	)

1136 
	#M_LN10f64
 
	`__f64
 (2.302585092994045684017991454684364208Ë

	)

1137 
	#M_PIf64
 
	`__f64
 (3.141592653589793238462643383279502884Ë

	)

1138 
	#M_PI_2f64
 
	`__f64
 (1.570796326794896619231321691639751442Ë

	)

1139 
	#M_PI_4f64
 
	`__f64
 (0.785398163397448309615660845819875721Ë

	)

1140 
	#M_1_PIf64
 
	`__f64
 (0.318309886183790671537767526745028724Ë

	)

1141 
	#M_2_PIf64
 
	`__f64
 (0.636619772367581343075535053490057448Ë

	)

1142 
	#M_2_SQRTPIf64
 
	`__f64
 (1.128379167095512573896158903121545172Ë

	)

1143 
	#M_SQRT2f64
 
	`__f64
 (1.414213562373095048801688724209698079Ë

	)

1144 
	#M_SQRT1_2f64
 
	`__f64
 (0.707106781186547524400844362104849039Ë

	)

1147 #i‡
__HAVE_FLOAT128
 && 
deföed
 
__USE_GNU


1148 
	#M_Ef128
 
	`__f128
 (2.718281828459045235360287471352662498Ë

	)

1149 
	#M_LOG2Ef128
 
	`__f128
 (1.442695040888963407359924681001892137Ë

	)

1150 
	#M_LOG10Ef128
 
	`__f128
 (0.434294481903251827651128918916605082Ë

	)

1151 
	#M_LN2f128
 
	`__f128
 (0.693147180559945309417232121458176568Ë

	)

1152 
	#M_LN10f128
 
	`__f128
 (2.302585092994045684017991454684364208Ë

	)

1153 
	#M_PIf128
 
	`__f128
 (3.141592653589793238462643383279502884Ë

	)

1154 
	#M_PI_2f128
 
	`__f128
 (1.570796326794896619231321691639751442Ë

	)

1155 
	#M_PI_4f128
 
	`__f128
 (0.785398163397448309615660845819875721Ë

	)

1156 
	#M_1_PIf128
 
	`__f128
 (0.318309886183790671537767526745028724Ë

	)

1157 
	#M_2_PIf128
 
	`__f128
 (0.636619772367581343075535053490057448Ë

	)

1158 
	#M_2_SQRTPIf128
 
	`__f128
 (1.128379167095512573896158903121545172Ë

	)

1159 
	#M_SQRT2f128
 
	`__f128
 (1.414213562373095048801688724209698079Ë

	)

1160 
	#M_SQRT1_2f128
 
	`__f128
 (0.707106781186547524400844362104849039Ë

	)

1163 #i‡
__HAVE_FLOAT32X
 && 
deföed
 
__USE_GNU


1164 
	#M_Ef32x
 
	`__f32x
 (2.718281828459045235360287471352662498Ë

	)

1165 
	#M_LOG2Ef32x
 
	`__f32x
 (1.442695040888963407359924681001892137Ë

	)

1166 
	#M_LOG10Ef32x
 
	`__f32x
 (0.434294481903251827651128918916605082Ë

	)

1167 
	#M_LN2f32x
 
	`__f32x
 (0.693147180559945309417232121458176568Ë

	)

1168 
	#M_LN10f32x
 
	`__f32x
 (2.302585092994045684017991454684364208Ë

	)

1169 
	#M_PIf32x
 
	`__f32x
 (3.141592653589793238462643383279502884Ë

	)

1170 
	#M_PI_2f32x
 
	`__f32x
 (1.570796326794896619231321691639751442Ë

	)

1171 
	#M_PI_4f32x
 
	`__f32x
 (0.785398163397448309615660845819875721Ë

	)

1172 
	#M_1_PIf32x
 
	`__f32x
 (0.318309886183790671537767526745028724Ë

	)

1173 
	#M_2_PIf32x
 
	`__f32x
 (0.636619772367581343075535053490057448Ë

	)

1174 
	#M_2_SQRTPIf32x
 
	`__f32x
 (1.128379167095512573896158903121545172Ë

	)

1175 
	#M_SQRT2f32x
 
	`__f32x
 (1.414213562373095048801688724209698079Ë

	)

1176 
	#M_SQRT1_2f32x
 
	`__f32x
 (0.707106781186547524400844362104849039Ë

	)

1179 #i‡
__HAVE_FLOAT64X
 && 
deföed
 
__USE_GNU


1180 
	#M_Ef64x
 
	`__f64x
 (2.718281828459045235360287471352662498Ë

	)

1181 
	#M_LOG2Ef64x
 
	`__f64x
 (1.442695040888963407359924681001892137Ë

	)

1182 
	#M_LOG10Ef64x
 
	`__f64x
 (0.434294481903251827651128918916605082Ë

	)

1183 
	#M_LN2f64x
 
	`__f64x
 (0.693147180559945309417232121458176568Ë

	)

1184 
	#M_LN10f64x
 
	`__f64x
 (2.302585092994045684017991454684364208Ë

	)

1185 
	#M_PIf64x
 
	`__f64x
 (3.141592653589793238462643383279502884Ë

	)

1186 
	#M_PI_2f64x
 
	`__f64x
 (1.570796326794896619231321691639751442Ë

	)

1187 
	#M_PI_4f64x
 
	`__f64x
 (0.785398163397448309615660845819875721Ë

	)

1188 
	#M_1_PIf64x
 
	`__f64x
 (0.318309886183790671537767526745028724Ë

	)

1189 
	#M_2_PIf64x
 
	`__f64x
 (0.636619772367581343075535053490057448Ë

	)

1190 
	#M_2_SQRTPIf64x
 
	`__f64x
 (1.128379167095512573896158903121545172Ë

	)

1191 
	#M_SQRT2f64x
 
	`__f64x
 (1.414213562373095048801688724209698079Ë

	)

1192 
	#M_SQRT1_2f64x
 
	`__f64x
 (0.707106781186547524400844362104849039Ë

	)

1195 #i‡
__HAVE_FLOAT128X
 && 
deföed
 
__USE_GNU


1202 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


1203 
	#__NO_MATH_INLINES
 1

	)

1206 #ifde‡
__USE_ISOC99


1207 #i‡
__GNUC_PREREQ
 (3, 1)

1214 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

1215 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

1216 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

1217 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

1218 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

1219 
	#isun‹dîed
(
x
, 
y
Ë
	`__buûtö_isun‹dîed
(x, y)

	)

1221 
	#isgª©î
(
x
, 
y
) \

1222 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

1223 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; }))

	)

1224 
	#isgª©îequÆ
(
x
, 
y
) \

1225 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

1226 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

1227 
	#i¶ess
(
x
, 
y
) \

1228 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

1229 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

1230 
	#i¶es£quÆ
(
x
, 
y
) \

1231 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

1232 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

1233 
	#i¶essgª©î
(
x
, 
y
) \

1234 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

1235 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x !__y; }))

	)

1237 
	#isun‹dîed
(
x
, 
y
) \

1238 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__u
 = (x); __ty≥of__ (
y
Ë
__v
 = (y); \

1239 
__u
 !
__v
 && (__u !__u || __v !__v); }))

	)

1244 #ifde‡
__USE_EXTERN_INLINES


1245 
	~<bôs/m©hölöe.h
>

1249 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

1252 #i‡
__FLT_EVAL_METHOD__
 == 2 || __FLT_EVAL_METHOD__ > 64

1253 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (yË+ 0.0L)

	)

1254 #ñi‡
__FLT_EVAL_METHOD__
 == 1 || __FLT_EVAL_METHOD__ > 32

1255 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (yË+ 0.0)

	)

1256 #ñi‡
__FLT_EVAL_METHOD__
 == 0 || __FLT_EVAL_METHOD__ == 32

1257 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (yË+ 0.0f)

	)

1259 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (y))

	)

1264 #i‡!
deföed
 
__˝lu•lus
 || (__˝lu•lu†< 201103L && !deföed 
__GNUC__
)

1265 
	#i£qsig
(
x
, 
y
) \

1266 
	`__MATH_TG
 (
	`__MATH_EVAL_FMT2
 (
x
, 
y
), 
__i£qsig
, ((x), (y)))

	)

1279 
ãm∂©e
<
ty≥«me
> 
__i£qsig_ty≥
;

1281 
ãm∂©e
<> 
__i£qsig_ty≥
<>

1283 
__ˇŒ
 (
__x
, 
__y
Ë
throw
 ()

1285  
__i£qsigf
 (
__x
, 
__y
);

1289 
ãm∂©e
<> 
__i£qsig_ty≥
<>

1291 
__ˇŒ
 (
__x
, 
__y
Ë
throw
 ()

1293  
__i£qsig
 (
__x
, 
__y
);

1297 
ãm∂©e
<> 
__i£qsig_ty≥
<>

1299 
__ˇŒ
 (
__x
, 
__y
Ë
throw
 ()

1301 #i‚de‡
__NO_LONG_DOUBLE_MATH


1302  
__i£qsigl
 (
__x
, 
__y
);

1304  
__i£qsig
 (
__x
, 
__y
);

1309 #i‡
__HAVE_FLOAT128_UNLIKE_LDBL


1312 
ãm∂©e
<> 
__i£qsig_ty≥
<
_Flﬂt128
>

1314 
__ˇŒ
 (
_Flﬂt128
 
__x
, _Flﬂt128 
__y
Ë
throw
 ()

1316  
__i£qsigf128
 (
__x
, 
__y
);

1321 
ãm∂©e
<
ty≥«me
 
_T1
,Åy≥«mê
_T2
>

1322 
ölöe
 

1323 
i£qsig
 (
_T1
 
__x
, 
_T2
 
__y
Ë
throw
 ()

1325 #i‡
__˝lu•lus
 >= 201103L

1326 
de˛ty≥
 (
	t__MATH_EVAL_FMT2
 (
	t__x
, 
	t__y
)Ë
	t_T3
;

1328 
__ty≥of
 (
	t__MATH_EVAL_FMT2
 (
	t__x
, 
	t__y
)Ë
	t_T3
;

1330  
__i£qsig_ty≥
<
_T3
>::
__ˇŒ
 (
__x
, 
__y
);

1338 
__END_DECLS


	@/usr/include/mntent.h

19 #i‚def 
_MNTENT_H


20 
	#_MNTENT_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<∑ths.h
>

24 
	~<bôs/ty≥s/FILE.h
>

27 
	#MNTTAB
 
_PATH_MNTTAB


	)

30 
	#MOUNTED
 
_PATH_MOUNTED


	)

34 
	#MNTTYPE_IGNORE
 "ign‹e"

	)

35 
	#MNTTYPE_NFS
 "nfs"

	)

36 
	#MNTTYPE_SWAP
 "sw≠"

	)

40 
	#MNTOPT_DEFAULTS
 "deÁu…s"

	)

41 
	#MNTOPT_RO
 "ro"

	)

42 
	#MNTOPT_RW
 "rw"

	)

43 
	#MNTOPT_SUID
 "suid"

	)

44 
	#MNTOPT_NOSUID
 "nosuid"

	)

45 
	#MNTOPT_NOAUTO
 "nﬂuto"

	)

48 
__BEGIN_DECLS


51 
	sm¡ít


53 *
	mm¡_f¢ame
;

54 *
	mm¡_dú
;

55 *
	mm¡_ty≥
;

56 *
	mm¡_›ts
;

57 
	mm¡_‰eq
;

58 
	mm¡_∑s¢o
;

64 
FILE
 *
	$£tm¡ít
 (c⁄° *
__fûe
, c⁄° *
__mode
Ë
__THROW
;

69 
m¡ít
 *
	$gëm¡ít
 (
FILE
 *
__°ªam
Ë
__THROW
;

71 #ifde‡
__USE_MISC


73 
m¡ít
 *
	$gëm¡ít_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

74 
m¡ít
 *
__ª°ri˘
 
__ªsu…
,

75 *
__ª°ri˘
 
__buf„r
,

76 
__bufsize
Ë
__THROW
;

81 
	$addm¡ít
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

82 c⁄° 
m¡ít
 *
__ª°ri˘
 
__m¡
Ë
__THROW
;

85 
	$ídm¡ít
 (
FILE
 *
__°ªam
Ë
__THROW
;

89 *
	$hasm¡›t
 (c⁄° 
m¡ít
 *
__m¡
,

90 c⁄° *
__›t
Ë
__THROW
;

93 
__END_DECLS


	@/usr/include/mtd/mtd-user.h

21 #i‚de‡
__MTD_USER_H__


22 
	#__MTD_USER_H__


	)

25 
	~<mtd/mtd-abi.h
>

27 
mtd_öfo_u£r
 
	tmtd_öfo_t
;

28 
îa£_öfo_u£r
 
	tîa£_öfo_t
;

29 
ªgi⁄_öfo_u£r
 
	tªgi⁄_öfo_t
;

30 
«nd_ooböfo
 
	t«nd_ooböfo_t
;

31 
«nd_ec˛ayout_u£r
 
	t«nd_ec˛ayout_t
;

	@/usr/include/netdb.h

22 #i‚def 
_NETDB_H


23 
	#_NETDB_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<√töë/ö.h
>

28 
	~<bôs/°döt-uöä.h
>

29 #ifde‡
__USE_MISC


32 
	~<Ωc/√tdb.h
>

35 #ifde‡
__USE_GNU


36 
	~<bôs/ty≥s/sigevít_t.h
>

37 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

40 
	~<bôs/√tdb.h
>

43 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

44 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

45 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

46 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

47 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

48 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

51 
	g__BEGIN_DECLS


53 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


56 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

59 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

63 
	#HOST_NOT_FOUND
 1

	)

64 
	#TRY_AGAIN
 2

	)

66 
	#NO_RECOVERY
 3

	)

68 
	#NO_DATA
 4

	)

71 #ifde‡
__USE_MISC


72 
	#NETDB_INTERNAL
 -1

	)

73 
	#NETDB_SUCCESS
 0

	)

74 
	#NO_ADDRESS
 
NO_DATA


	)

77 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_XOPEN_EXTENDED


79 
	#IPPORT_RESERVED
 1024

	)

82 #ifde‡
__USE_GNU


84 
	#SCOPE_DELIMITER
 '%'

	)

87 #ifde‡
__USE_MISC


90 
	$hîr‹
 (c⁄° *
__°r
Ë
__THROW
;

93 c⁄° *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

98 
	sho°ít


100 *
h_«me
;

101 **
h_Æü£s
;

102 
h_addπy≥
;

103 
h_Àngth
;

104 **
h_addr_li°
;

105 #ifde‡
__USE_MISC


106 
	#h_addr
 
h_addr_li°
[0]

	)

115 
	`£tho°ít
 (
__°ay_›í
);

121 
	`ídho°ít
 ();

128 
ho°ít
 *
	`gëho°ít
 ();

135 
ho°ít
 *
	`gëho°byaddr
 (c⁄° *
__addr
, 
__sockÀn_t
 
__Àn
,

136 
__ty≥
);

142 
ho°ít
 *
	`gëho°by«me
 (c⁄° *
__«me
);

144 #ifde‡
__USE_MISC


153 
ho°ít
 *
	`gëho°by«me2
 (c⁄° *
__«me
, 
__af
);

165 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

166 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

167 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

168 *
__ª°ri˘
 
__h_î∫›
);

170 
	`gëho°byaddr_r
 (c⁄° *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

171 
__ty≥
,

172 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

173 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

174 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

175 *
__ª°ri˘
 
__h_î∫›
);

177 
	`gëho°by«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

178 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

179 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

180 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

181 *
__ª°ri˘
 
__h_î∫›
);

183 
	`gëho°by«me2_r
 (c⁄° *
__ª°ri˘
 
__«me
, 
__af
,

184 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

185 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

186 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

187 *
__ª°ri˘
 
__h_î∫›
);

196 
	`£äëít
 (
__°ay_›í
);

202 
	`íd√ã¡
 ();

209 
√ã¡
 *
	`gë√ã¡
 ();

216 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

222 
√ã¡
 *
	`gë√tby«me
 (c⁄° *
__«me
);

224 #ifdef 
__USE_MISC


235 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

236 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

237 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

238 *
__ª°ri˘
 
__h_î∫›
);

240 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

241 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

242 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

243 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

244 *
__ª°ri˘
 
__h_î∫›
);

246 
	`gë√tby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

247 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

248 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

249 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

250 *
__ª°ri˘
 
__h_î∫›
);

255 
	s£rvít


257 *
s_«me
;

258 **
s_Æü£s
;

259 
s_p‹t
;

260 *
s_¥Ÿo
;

268 
	`£t£rvít
 (
__°ay_›í
);

274 
	`íd£rvít
 ();

281 
£rvít
 *
	`gë£rvít
 ();

288 
£rvít
 *
	`gë£rvby«me
 (c⁄° *
__«me
, c⁄° *
__¥Ÿo
);

295 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, c⁄° *
__¥Ÿo
);

298 #ifdef 
__USE_MISC


306 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

307 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

308 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

310 
	`gë£rvby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

311 c⁄° *
__ª°ri˘
 
__¥Ÿo
,

312 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

313 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

314 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

316 
	`gë£rvbyp‹t_r
 (
__p‹t
, c⁄° *
__ª°ri˘
 
__¥Ÿo
,

317 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

318 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

319 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

324 
	s¥Ÿ€¡


326 *
p_«me
;

327 **
p_Æü£s
;

328 
p_¥Ÿo
;

336 
	`£çrŸ€¡
 (
__°ay_›í
);

342 
	`íd¥Ÿ€¡
 ();

349 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

355 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (c⁄° *
__«me
);

361 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

364 #ifdef 
__USE_MISC


372 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

373 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

374 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

376 
	`gë¥Ÿoby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

377 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

378 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

379 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

381 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

382 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

383 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

384 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

393 
	`£äëgª¡
 (c⁄° *
__√tgroup
);

401 
	`íd√tgª¡
 ();

410 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

411 **
__ª°ri˘
 
__u£Ω
,

412 **
__ª°ri˘
 
__domaöp
);

421 
	`ö√tgr
 (c⁄° *
__√tgroup
, c⁄° *
__ho°
,

422 c⁄° *
__u£r
, c⁄° *
__domaö
);

430 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

431 **
__ª°ri˘
 
__u£Ω
,

432 **
__ª°ri˘
 
__domaöp
,

433 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

437 #ifde‡
__USE_MISC


449 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

450 c⁄° *
__ª°ri˘
 
__locu£r
,

451 c⁄° *
__ª°ri˘
 
__ªmu£r
,

452 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

461 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

462 c⁄° *
__ª°ri˘
 
__locu£r
,

463 c⁄° *
__ª°ri˘
 
__ªmu£r
,

464 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

465 
ß_Ámûy_t
 
__af
);

477 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

478 c⁄° *
__ª°ri˘
 
__«me
,

479 c⁄° *
__ª°ri˘
 
__∑ss
,

480 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

489 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

490 c⁄° *
__ª°ri˘
 
__«me
,

491 c⁄° *
__ª°ri˘
 
__∑ss
,

492 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

493 
ß_Ámûy_t
 
__af
);

503 
	`ru£rok
 (c⁄° *
__rho°
, 
__su£r
,

504 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

513 
	`ru£rok_af
 (c⁄° *
__rho°
, 
__su£r
,

514 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

515 
ß_Ámûy_t
 
__af
);

526 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

527 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

537 
	`úu£rok_af
 (c⁄° *
__øddr
, 
__su£r
,

538 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

539 
ß_Ámûy_t
 
__af
);

549 
	`ºesvp‹t
 (*
__Æp‹t
);

558 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

563 #ifde‡
__USE_XOPEN2K


565 
	saddröfo


567 
ai_Êags
;

568 
ai_Ámûy
;

569 
ai_sockty≥
;

570 
ai_¥Ÿocﬁ
;

571 
sockÀn_t
 
ai_addæí
;

572 
sockaddr
 *
ai_addr
;

573 *
ai_ˇn⁄«me
;

574 
addröfo
 *
ai_√xt
;

577 #ifde‡
__USE_GNU


579 
	sgaicb


581 c⁄° *
¨_«me
;

582 c⁄° *
¨_£rvi˚
;

583 c⁄° 
addröfo
 *
¨_ªque°
;

584 
addröfo
 *
¨_ªsu…
;

586 
__ªtu∫
;

587 
__glibc_ª£rved
[5];

591 
	#GAI_WAIT
 0

	)

592 
	#GAI_NOWAIT
 1

	)

596 
	#AI_PASSIVE
 0x0001

	)

597 
	#AI_CANONNAME
 0x0002

	)

598 
	#AI_NUMERICHOST
 0x0004

	)

599 
	#AI_V4MAPPED
 0x0008

	)

600 
	#AI_ALL
 0x0010

	)

601 
	#AI_ADDRCONFIG
 0x0020

	)

603 #ifde‡
__USE_GNU


604 
	#AI_IDN
 0x0040

	)

607 
	#AI_CANONIDN
 0x0080

	)

608 
	#AI_IDN_ALLOW_UNASSIGNED
 \

609 
	`__glibc_ma¸o_w¨nög
 ("AI_IDN_ALLOW_UNASSIGNED i†dïªˇãd"Ë0x0100

	)

610 
	#AI_IDN_USE_STD3_ASCII_RULES
 \

611 
	`__glibc_ma¸o_w¨nög
 ("AI_IDN_USE_STD3_ASCII_RULES i†dïªˇãd"Ë0x0200

	)

613 
	#AI_NUMERICSERV
 0x0400

	)

616 
	#EAI_BADFLAGS
 -1

	)

617 
	#EAI_NONAME
 -2

	)

618 
	#EAI_AGAIN
 -3

	)

619 
	#EAI_FAIL
 -4

	)

620 
	#EAI_FAMILY
 -6

	)

621 
	#EAI_SOCKTYPE
 -7

	)

622 
	#EAI_SERVICE
 -8

	)

623 
	#EAI_MEMORY
 -10

	)

624 
	#EAI_SYSTEM
 -11

	)

625 
	#EAI_OVERFLOW
 -12

	)

626 #ifde‡
__USE_GNU


627 
	#EAI_NODATA
 -5

	)

628 
	#EAI_ADDRFAMILY
 -9

	)

629 
	#EAI_INPROGRESS
 -100

	)

630 
	#EAI_CANCELED
 -101

	)

631 
	#EAI_NOTCANCELED
 -102

	)

632 
	#EAI_ALLDONE
 -103

	)

633 
	#EAI_INTR
 -104

	)

634 
	#EAI_IDN_ENCODE
 -105

	)

637 #ifde‡
__USE_MISC


638 
	#NI_MAXHOST
 1025

	)

639 
	#NI_MAXSERV
 32

	)

642 
	#NI_NUMERICHOST
 1

	)

643 
	#NI_NUMERICSERV
 2

	)

644 
	#NI_NOFQDN
 4

	)

645 
	#NI_NAMEREQD
 8

	)

646 
	#NI_DGRAM
 16

	)

647 #ifde‡
__USE_GNU


648 
	#NI_IDN
 32

	)

649 
	#NI_IDN_ALLOW_UNASSIGNED
 \

650 
	`__glibc_ma¸o_w¨nög
 ("NI_IDN_ALLOW_UNASSIGNED i†dïªˇãd"Ë64

	)

651 
	#NI_IDN_USE_STD3_ASCII_RULES
 \

652 
	`__glibc_ma¸o_w¨nög
 ("NI_IDN_USE_STD3_ASCII_RULES i†dïªˇãd"Ë128

	)

660 
	`gëaddröfo
 (c⁄° *
__ª°ri˘
 
__«me
,

661 c⁄° *
__ª°ri˘
 
__£rvi˚
,

662 c⁄° 
addröfo
 *
__ª°ri˘
 
__ªq
,

663 
addröfo
 **
__ª°ri˘
 
__∑i
);

666 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

669 c⁄° *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

675 
	`gë«meöfo
 (c⁄° 
sockaddr
 *
__ª°ri˘
 
__ß
,

676 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

677 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

678 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

681 #ifde‡
__USE_GNU


690 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

691 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

701 
	`gai_su•íd
 (c⁄° 
gaicb
 *c⁄° 
__li°
[], 
__ít
,

702 c⁄° 
time•ec
 *
__timeout
);

705 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

708 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

711 
__END_DECLS


	@/usr/include/netinet/in.h

18 #i‚def 
_NETINET_IN_H


19 
	#_NETINET_IN_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<bôs/°döt-uöä.h
>

23 
	~<sys/sockë.h
>

24 
	~<bôs/ty≥s.h
>

27 
__BEGIN_DECLS


30 
uöt32_t
 
	tö_addr_t
;

31 
	sö_addr


33 
ö_addr_t
 
	ms_addr
;

37 
	~<bôs/ö.h
>

42 
	mIPPROTO_IP
 = 0,

43 
	#IPPROTO_IP
 
IPPROTO_IP


	)

44 
	mIPPROTO_ICMP
 = 1,

45 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

46 
	mIPPROTO_IGMP
 = 2,

47 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

48 
	mIPPROTO_IPIP
 = 4,

49 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

50 
	mIPPROTO_TCP
 = 6,

51 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

52 
	mIPPROTO_EGP
 = 8,

53 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

54 
	mIPPROTO_PUP
 = 12,

55 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

56 
	mIPPROTO_UDP
 = 17,

57 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

58 
	mIPPROTO_IDP
 = 22,

59 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

60 
	mIPPROTO_TP
 = 29,

61 
	#IPPROTO_TP
 
IPPROTO_TP


	)

62 
	mIPPROTO_DCCP
 = 33,

63 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

64 
	mIPPROTO_IPV6
 = 41,

65 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

66 
	mIPPROTO_RSVP
 = 46,

67 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

68 
	mIPPROTO_GRE
 = 47,

69 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

70 
	mIPPROTO_ESP
 = 50,

71 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

72 
	mIPPROTO_AH
 = 51,

73 
	#IPPROTO_AH
 
IPPROTO_AH


	)

74 
	mIPPROTO_MTP
 = 92,

75 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

76 
	mIPPROTO_BEETPH
 = 94,

77 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

78 
	mIPPROTO_ENCAP
 = 98,

79 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

80 
	mIPPROTO_PIM
 = 103,

81 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

82 
	mIPPROTO_COMP
 = 108,

83 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

84 
	mIPPROTO_SCTP
 = 132,

85 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

86 
	mIPPROTO_UDPLITE
 = 136,

87 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

88 
	mIPPROTO_MPLS
 = 137,

89 
	#IPPROTO_MPLS
 
IPPROTO_MPLS


	)

90 
	mIPPROTO_RAW
 = 255,

91 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

92 
	mIPPROTO_MAX


98 #i‡!
__USE_KERNEL_IPV6_DEFS


101 
	mIPPROTO_HOPOPTS
 = 0,

102 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

103 
	mIPPROTO_ROUTING
 = 43,

104 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

105 
	mIPPROTO_FRAGMENT
 = 44,

106 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

107 
	mIPPROTO_ICMPV6
 = 58,

108 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

109 
	mIPPROTO_NONE
 = 59,

110 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

111 
	mIPPROTO_DSTOPTS
 = 60,

112 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

113 
	mIPPROTO_MH
 = 135

114 
	#IPPROTO_MH
 
IPPROTO_MH


	)

119 
uöt16_t
 
	tö_p‹t_t
;

124 
	mIPPORT_ECHO
 = 7,

125 
	mIPPORT_DISCARD
 = 9,

126 
	mIPPORT_SYSTAT
 = 11,

127 
	mIPPORT_DAYTIME
 = 13,

128 
	mIPPORT_NETSTAT
 = 15,

129 
	mIPPORT_FTP
 = 21,

130 
	mIPPORT_TELNET
 = 23,

131 
	mIPPORT_SMTP
 = 25,

132 
	mIPPORT_TIMESERVER
 = 37,

133 
	mIPPORT_NAMESERVER
 = 42,

134 
	mIPPORT_WHOIS
 = 43,

135 
	mIPPORT_MTP
 = 57,

137 
	mIPPORT_TFTP
 = 69,

138 
	mIPPORT_RJE
 = 77,

139 
	mIPPORT_FINGER
 = 79,

140 
	mIPPORT_TTYLINK
 = 87,

141 
	mIPPORT_SUPDUP
 = 95,

144 
	mIPPORT_EXECSERVER
 = 512,

145 
	mIPPORT_LOGINSERVER
 = 513,

146 
	mIPPORT_CMDSERVER
 = 514,

147 
	mIPPORT_EFSSERVER
 = 520,

150 
	mIPPORT_BIFFUDP
 = 512,

151 
	mIPPORT_WHOSERVER
 = 513,

152 
	mIPPORT_ROUTESERVER
 = 520,

155 
	mIPPORT_RESERVED
 = 1024,

158 
	mIPPORT_USERRESERVED
 = 5000

166 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

167 
	#IN_CLASSA_NET
 0xff000000

	)

168 
	#IN_CLASSA_NSHIFT
 24

	)

169 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

170 
	#IN_CLASSA_MAX
 128

	)

172 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

173 
	#IN_CLASSB_NET
 0xffff0000

	)

174 
	#IN_CLASSB_NSHIFT
 16

	)

175 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

176 
	#IN_CLASSB_MAX
 65536

	)

178 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

179 
	#IN_CLASSC_NET
 0xffffff00

	)

180 
	#IN_CLASSC_NSHIFT
 8

	)

181 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

183 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

184 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

186 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

187 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

190 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

192 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

194 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

197 
	#IN_LOOPBACKNET
 127

	)

199 #i‚de‡
INADDR_LOOPBACK


200 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

204 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

205 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

206 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

207 
	#INADDR_ALLSNOOPERS_GROUP
 ((
ö_addr_t
Ë0xe000006aË

	)

208 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

210 #i‡!
__USE_KERNEL_IPV6_DEFS


212 
	sö6_addr


216 
uöt8_t
 
	m__u6_addr8
[16];

217 
uöt16_t
 
	m__u6_addr16
[8];

218 
uöt32_t
 
	m__u6_addr32
[4];

219 } 
	m__ö6_u
;

220 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

221 #ifde‡
__USE_MISC


222 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

223 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

228 c⁄° 
ö6_addr
 
ö6addr_™y
;

229 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

230 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

231 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

233 
	#INET_ADDRSTRLEN
 16

	)

234 
	#INET6_ADDRSTRLEN
 46

	)

238 
	ssockaddr_ö


240 
__SOCKADDR_COMMON
 (
sö_
);

241 
ö_p‹t_t
 
	msö_p‹t
;

242 
ö_addr
 
	msö_addr
;

245 
	msö_zîo
[ (
sockaddr
)

246 - 
__SOCKADDR_COMMON_SIZE


247 -  (
ö_p‹t_t
)

248 -  (
ö_addr
)];

251 #i‡!
__USE_KERNEL_IPV6_DEFS


253 
	ssockaddr_ö6


255 
__SOCKADDR_COMMON
 (
sö6_
);

256 
ö_p‹t_t
 
	msö6_p‹t
;

257 
uöt32_t
 
	msö6_Êowöfo
;

258 
ö6_addr
 
	msö6_addr
;

259 
uöt32_t
 
	msö6_sc›e_id
;

263 #ifde‡
__USE_MISC


265 
	sù_mªq


268 
ö_addr
 
	mimr_mu…üddr
;

271 
ö_addr
 
	mimr_öãrÁ˚
;

274 
	sù_mªq_sour˚


277 
ö_addr
 
	mimr_mu…üddr
;

280 
ö_addr
 
	mimr_öãrÁ˚
;

283 
ö_addr
 
	mimr_sour˚addr
;

287 #i‡!
__USE_KERNEL_IPV6_DEFS


289 
	sùv6_mªq


292 
ö6_addr
 
	mùv6mr_mu…üddr
;

295 
	mùv6mr_öãrÁ˚
;

299 #ifde‡
__USE_MISC


301 
	sgroup_ªq


304 
uöt32_t
 
	mgr_öãrÁ˚
;

307 
sockaddr_°‹age
 
	mgr_group
;

310 
	sgroup_sour˚_ªq


313 
uöt32_t
 
	mg§_öãrÁ˚
;

316 
sockaddr_°‹age
 
	mg§_group
;

319 
sockaddr_°‹age
 
	mg§_sour˚
;

324 
	sù_msfûãr


327 
ö_addr
 
	mimsf_mu…üddr
;

330 
ö_addr
 
	mimsf_öãrÁ˚
;

333 
uöt32_t
 
	mimsf_fmode
;

336 
uöt32_t
 
	mimsf_num§c
;

338 
ö_addr
 
	mimsf_¶i°
[1];

341 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

342 -  (
ö_addr
) \

343 + (
num§c
Ë*  (
ö_addr
))

	)

345 
	sgroup_fûãr


348 
uöt32_t
 
	mgf_öãrÁ˚
;

351 
sockaddr_°‹age
 
	mgf_group
;

354 
uöt32_t
 
	mgf_fmode
;

357 
uöt32_t
 
	mgf_num§c
;

359 
sockaddr_°‹age
 
	mgf_¶i°
[1];

362 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

363 -  (
sockaddr_°‹age
) \

364 + ((
num§c
) \

365 *  (
sockaddr_°‹age
)))

	)

375 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

376 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

377 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

378 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

379 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

380 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

381 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

383 
	~<ídün.h
>

386 
	~<bôs/byãsw≠.h
>

387 
	~<bôs/uöä-idítôy.h
>

389 #ifde‡
__OPTIMIZE__


393 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


396 
	#¡ohl
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

397 
	#¡ohs
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

398 
	#ht⁄l
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

399 
	#ht⁄s
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

401 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


402 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

403 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

404 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

405 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

410 #ifde‡
__GNUC__


411 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

412 (
__exãnsi⁄__
 \

413 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

414 
__a
->
__ö6_u
.
__u6_addr32
[0] == 0 \

415 && 
__a
->
__ö6_u
.
__u6_addr32
[1] == 0 \

416 && 
__a
->
__ö6_u
.
__u6_addr32
[2] == 0 \

417 && 
__a
->
__ö6_u
.
__u6_addr32
[3] =0; 
	}
}))

	)

419 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

420 (
__exãnsi⁄__
 \

421 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

422 
__a
->
__ö6_u
.
__u6_addr32
[0] == 0 \

423 && 
__a
->
__ö6_u
.
__u6_addr32
[1] == 0 \

424 && 
__a
->
__ö6_u
.
__u6_addr32
[2] == 0 \

425 && 
__a
->
__ö6_u
.
__u6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

427 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

428 (
__exãnsi⁄__
 \

429 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

430 (
__a
->
__ö6_u
.
__u6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

432 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

433 (
__exãnsi⁄__
 \

434 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

435 (
__a
->
__ö6_u
.
__u6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

437 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

438 (
__exãnsi⁄__
 \

439 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

440 
__a
->
__ö6_u
.
__u6_addr32
[0] == 0 \

441 && 
__a
->
__ö6_u
.
__u6_addr32
[1] == 0 \

442 && 
__a
->
__ö6_u
.
__u6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

444 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

445 (
__exãnsi⁄__
 \

446 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

447 
__a
->
__ö6_u
.
__u6_addr32
[0] == 0 \

448 && 
__a
->
__ö6_u
.
__u6_addr32
[1] == 0 \

449 && 
__a
->
__ö6_u
.
__u6_addr32
[2] == 0 \

450 && 
	`¡ohl
 (
__a
->
__ö6_u
.
__u6_addr32
[3]Ë> 1; }))

	)

452 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

453 (
__exãnsi⁄__
 \

454 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

455 c⁄° 
ö6_addr
 *
__b
 = (c⁄° ö6_add∏*Ë(
b
); \

456 
__a
->
__ö6_u
.
__u6_addr32
[0] =
__b
->__in6_u.__u6_addr32[0] \

457 && 
__a
->
__ö6_u
.
__u6_addr32
[1] =
__b
->__in6_u.__u6_addr32[1] \

458 && 
__a
->
__ö6_u
.
__u6_addr32
[2] =
__b
->__in6_u.__u6_addr32[2] \

459 && 
__a
->
__ö6_u
.
__u6_addr32
[3] =
__b
->__ö6_u.__u6_addr32[3]; }))

	)

461 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

462 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

463 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

464 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

465 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =0)

	)

467 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

468 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

469 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

470 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

471 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

473 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

474 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

475 =
	`ht⁄l
 (0x„800000))

	)

477 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

478 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

479 =
	`ht⁄l
 (0x„c00000))

	)

481 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

482 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

483 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

484 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

486 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

487 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

488 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

489 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0) \

490 && (
	`¡ohl
 (((c⁄° 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

492 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

493 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] =((c⁄° uöt32_à*Ë(
b
))[0]) \

494 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] =((c⁄° uöt32_à*Ë(
b
))[1]) \

495 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =((c⁄° uöt32_à*Ë(
b
))[2]) \

496 && (((c⁄° 
uöt32_t
 *Ë(
a
))[3] =((c⁄° uöt32_à*Ë(
b
))[3]))

	)

499 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((c⁄° 
uöt8_t
 *Ë◊))[0] =0xff)

	)

501 #ifde‡
__USE_MISC


503 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

506 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

507 
__THROW
;

511 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

512 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

513 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

515 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

516 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

517 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

519 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

520 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

521 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

523 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

524 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

525 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

527 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

528 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

529 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

532 #ifde‡
__USE_GNU


533 
cmsghdr
;

535 #i‡!
__USE_KERNEL_IPV6_DEFS


537 
	sö6_pktöfo


539 
ö6_addr
 
ùi6_addr
;

540 
ùi6_ifödex
;

544 
	sù6_mtuöfo


546 
sockaddr_ö6
 
ù6m_addr
;

547 
uöt32_t
 
ù6m_mtu
;

552 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

553 
__THROW
 
__©åibuã_dïªˇãd__
;

554 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

555 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

556 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

557 c⁄° 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

558 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

559 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

560 
__mu…x
, 
__∂usy
)

561 
__THROW
 
__©åibuã_dïªˇãd__
;

562 
	$öë6_›ti⁄_√xt
 (c⁄° 
cmsghdr
 *
__cmsg
,

563 
uöt8_t
 **
__çåp
)

564 
__THROW
 
__©åibuã_dïªˇãd__
;

565 
	$öë6_›ti⁄_föd
 (c⁄° 
cmsghdr
 *
__cmsg
,

566 
uöt8_t
 **
__çåp
, 
__ty≥
)

567 
__THROW
 
__©åibuã_dïªˇãd__
;

571 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

572 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

573 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

574 **
__d©abuÂ
Ë
__THROW
;

575 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

576 
__THROW
;

577 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

578 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

579 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

580 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

581 **
__d©abuÂ
Ë
__THROW
;

582 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

583 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

584 **
__d©abuÂ
Ë
__THROW
;

585 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

586 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

590 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

591 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

592 
__£gmíts
Ë
__THROW
;

593 
	$öë6_πh_add
 (*
__bp
, c⁄° 
ö6_addr
 *
__addr
Ë
__THROW
;

594 
	$öë6_πh_ªvî£
 (c⁄° *
__ö
, *
__out
Ë
__THROW
;

595 
	$öë6_πh_£gmíts
 (c⁄° *
__bp
Ë
__THROW
;

596 
ö6_addr
 *
	$öë6_πh_gëaddr
 (c⁄° *
__bp
, 
__ödex
)

597 
__THROW
;

603 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

604 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

605 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

606 
__THROW
;

609 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

610 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

611 
uöt32_t
 
__num§c
,

612 c⁄° 
ö_addr
 *
__¶i°
)

613 
__THROW
;

617 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

618 c⁄° 
sockaddr
 *
__group
,

619 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

620 
uöt32_t
 *
__num§c
,

621 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

624 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

625 c⁄° 
sockaddr
 *
__group
,

626 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

627 
uöt32_t
 
__num§c
,

628 c⁄° 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

631 
__END_DECLS


	@/usr/include/netinet/tcp.h

32 #i‚de‡
_NETINET_TCP_H


33 
	#_NETINET_TCP_H
 1

	)

35 
	~<„©uªs.h
>

40 
	#TCP_NODELAY
 1

	)

41 
	#TCP_MAXSEG
 2

	)

42 
	#TCP_CORK
 3

	)

43 
	#TCP_KEEPIDLE
 4

	)

44 
	#TCP_KEEPINTVL
 5

	)

45 
	#TCP_KEEPCNT
 6

	)

46 
	#TCP_SYNCNT
 7

	)

47 
	#TCP_LINGER2
 8

	)

48 
	#TCP_DEFER_ACCEPT
 9

	)

49 
	#TCP_WINDOW_CLAMP
 10

	)

50 
	#TCP_INFO
 11

	)

51 
	#TCP_QUICKACK
 12

	)

52 
	#TCP_CONGESTION
 13

	)

53 
	#TCP_MD5SIG
 14

	)

54 
	#TCP_COOKIE_TRANSACTIONS
 15

	)

55 
	#TCP_THIN_LINEAR_TIMEOUTS
 16

	)

56 
	#TCP_THIN_DUPACK
 17

	)

57 
	#TCP_USER_TIMEOUT
 18

	)

58 
	#TCP_REPAIR
 19

	)

59 
	#TCP_REPAIR_QUEUE
 20

	)

60 
	#TCP_QUEUE_SEQ
 21

	)

61 
	#TCP_REPAIR_OPTIONS
 22

	)

62 
	#TCP_FASTOPEN
 23

	)

63 
	#TCP_TIMESTAMP
 24

	)

64 
	#TCP_NOTSENT_LOWAT
 25

	)

66 
	#TCP_CC_INFO
 26

	)

68 
	#TCP_SAVE_SYN
 27

	)

70 
	#TCP_SAVED_SYN
 28

	)

72 
	#TCP_REPAIR_WINDOW
 29

	)

73 
	#TCP_FASTOPEN_CONNECT
 30

	)

74 
	#TCP_ULP
 31

	)

75 
	#TCP_MD5SIG_EXT
 32

	)

76 
	#TCP_FASTOPEN_KEY
 33

	)

77 
	#TCP_FASTOPEN_NO_COOKIE
 34

	)

78 
	#TCP_ZEROCOPY_RECEIVE
 35

	)

79 
	#TCP_INQ
 36

	)

81 
	#TCP_CM_INQ
 
TCP_INQ


	)

82 
	#TCP_TX_DELAY
 37

	)

84 
	#TCP_REPAIR_ON
 1

	)

85 
	#TCP_REPAIR_OFF
 0

	)

86 
	#TCP_REPAIR_OFF_NO_WP
 -1

	)

88 #ifde‡
__USE_MISC


89 
	~<sys/ty≥s.h
>

90 
	~<sys/sockë.h
>

91 
	~<°döt.h
>

93 
uöt32_t
 
	tt˝_£q
;

98 
	st˝hdr


100 
__exãnsi⁄__
 union

104 
uöt16_t
 
	mth_•‹t
;

105 
uöt16_t
 
	mth_dp‹t
;

106 
t˝_£q
 
	mth_£q
;

107 
t˝_£q
 
	mth_ack
;

108 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


109 
uöt8_t
 
	mth_x2
:4;

110 
uöt8_t
 
	mth_off
:4;

112 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


113 
uöt8_t
 
	mth_off
:4;

114 
uöt8_t
 
	mth_x2
:4;

116 
uöt8_t
 
	mth_Êags
;

117 
	#TH_FIN
 0x01

	)

118 
	#TH_SYN
 0x02

	)

119 
	#TH_RST
 0x04

	)

120 
	#TH_PUSH
 0x08

	)

121 
	#TH_ACK
 0x10

	)

122 
	#TH_URG
 0x20

	)

123 
uöt16_t
 
	mth_wö
;

124 
uöt16_t
 
	mth_sum
;

125 
uöt16_t
 
	mth_uΩ
;

129 
uöt16_t
 
	msour˚
;

130 
uöt16_t
 
	mde°
;

131 
uöt32_t
 
	m£q
;

132 
uöt32_t
 
	mack_£q
;

133 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


134 
uöt16_t
 
	mªs1
:4;

135 
uöt16_t
 
	mdoff
:4;

136 
uöt16_t
 
	mfö
:1;

137 
uöt16_t
 
	msyn
:1;

138 
uöt16_t
 
	mr°
:1;

139 
uöt16_t
 
	mpsh
:1;

140 
uöt16_t
 
	mack
:1;

141 
uöt16_t
 
	murg
:1;

142 
uöt16_t
 
	mªs2
:2;

143 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


144 
uöt16_t
 
	mdoff
:4;

145 
uöt16_t
 
	mªs1
:4;

146 
uöt16_t
 
	mªs2
:2;

147 
uöt16_t
 
	murg
:1;

148 
uöt16_t
 
	mack
:1;

149 
uöt16_t
 
	mpsh
:1;

150 
uöt16_t
 
	mr°
:1;

151 
uöt16_t
 
	msyn
:1;

152 
uöt16_t
 
	mfö
:1;

156 
uöt16_t
 
	mwödow
;

157 
uöt16_t
 
	mcheck
;

158 
uöt16_t
 
	murg_±r
;

165 
	mTCP_ESTABLISHED
 = 1,

166 
	mTCP_SYN_SENT
,

167 
	mTCP_SYN_RECV
,

168 
	mTCP_FIN_WAIT1
,

169 
	mTCP_FIN_WAIT2
,

170 
	mTCP_TIME_WAIT
,

171 
	mTCP_CLOSE
,

172 
	mTCP_CLOSE_WAIT
,

173 
	mTCP_LAST_ACK
,

174 
	mTCP_LISTEN
,

175 
	mTCP_CLOSING


178 
	#TCPOPT_EOL
 0

	)

179 
	#TCPOPT_NOP
 1

	)

180 
	#TCPOPT_MAXSEG
 2

	)

181 
	#TCPOLEN_MAXSEG
 4

	)

182 
	#TCPOPT_WINDOW
 3

	)

183 
	#TCPOLEN_WINDOW
 3

	)

184 
	#TCPOPT_SACK_PERMITTED
 4

	)

185 
	#TCPOLEN_SACK_PERMITTED
 2

	)

186 
	#TCPOPT_SACK
 5

	)

187 
	#TCPOPT_TIMESTAMP
 8

	)

188 
	#TCPOLEN_TIMESTAMP
 10

	)

189 
	#TCPOLEN_TSTAMP_APPA
 (
TCPOLEN_TIMESTAMP
+2Ë

	)

191 
	#TCPOPT_TSTAMP_HDR
 \

192 (
TCPOPT_NOP
<<24|TCPOPT_NOP<<16|
TCPOPT_TIMESTAMP
<<8|
TCPOLEN_TIMESTAMP
)

	)

200 
	#TCP_MSS
 512

	)

202 
	#TCP_MAXWIN
 65535

	)

204 
	#TCP_MAX_WINSHIFT
 14

	)

206 
	#SOL_TCP
 6

	)

209 
	#TCPI_OPT_TIMESTAMPS
 1

	)

210 
	#TCPI_OPT_SACK
 2

	)

211 
	#TCPI_OPT_WSCALE
 4

	)

212 
	#TCPI_OPT_ECN
 8

	)

213 
	#TCPI_OPT_ECN_SEEN
 16

	)

214 
	#TCPI_OPT_SYN_DATA
 32

	)

217 
	et˝_ˇ_°©e


219 
	mTCP_CA_O≥n
 = 0,

220 
	mTCP_CA_Dis‹dî
 = 1,

221 
	mTCP_CA_CWR
 = 2,

222 
	mTCP_CA_Recovîy
 = 3,

223 
	mTCP_CA_Loss
 = 4

226 
	st˝_öfo


228 
uöt8_t
 
	mt˝i_°©e
;

229 
uöt8_t
 
	mt˝i_ˇ_°©e
;

230 
uöt8_t
 
	mt˝i_ªå™smôs
;

231 
uöt8_t
 
	mt˝i_¥obes
;

232 
uöt8_t
 
	mt˝i_backoff
;

233 
uöt8_t
 
	mt˝i_›ti⁄s
;

234 
uöt8_t
 
	mt˝i_¢d_wsˇÀ
 : 4, 
	mt˝i_rcv_wsˇÀ
 : 4;

236 
uöt32_t
 
	mt˝i_πo
;

237 
uöt32_t
 
	mt˝i_©o
;

238 
uöt32_t
 
	mt˝i_¢d_mss
;

239 
uöt32_t
 
	mt˝i_rcv_mss
;

241 
uöt32_t
 
	mt˝i_u«cked
;

242 
uöt32_t
 
	mt˝i_ßcked
;

243 
uöt32_t
 
	mt˝i_lo°
;

244 
uöt32_t
 
	mt˝i_ªå™s
;

245 
uöt32_t
 
	mt˝i_Áckës
;

248 
uöt32_t
 
	mt˝i_œ°_d©a_£¡
;

249 
uöt32_t
 
	mt˝i_œ°_ack_£¡
;

250 
uöt32_t
 
	mt˝i_œ°_d©a_ªcv
;

251 
uöt32_t
 
	mt˝i_œ°_ack_ªcv
;

254 
uöt32_t
 
	mt˝i_pmtu
;

255 
uöt32_t
 
	mt˝i_rcv_s°hªsh
;

256 
uöt32_t
 
	mt˝i_πt
;

257 
uöt32_t
 
	mt˝i_πtv¨
;

258 
uöt32_t
 
	mt˝i_¢d_s°hªsh
;

259 
uöt32_t
 
	mt˝i_¢d_cwnd
;

260 
uöt32_t
 
	mt˝i_advmss
;

261 
uöt32_t
 
	mt˝i_ª‹dîög
;

263 
uöt32_t
 
	mt˝i_rcv_πt
;

264 
uöt32_t
 
	mt˝i_rcv_•a˚
;

266 
uöt32_t
 
	mt˝i_tŸÆ_ªå™s
;

271 
	#TCP_MD5SIG_MAXKEYLEN
 80

	)

274 
	#TCP_MD5SIG_FLAG_PREFIX
 1

	)

276 
	st˝_md5sig


278 
sockaddr_°‹age
 
	mt˝m_addr
;

279 
uöt8_t
 
	mt˝m_Êags
;

280 
uöt8_t
 
	mt˝m_¥efixÀn
;

281 
uöt16_t
 
	mt˝m_keyÀn
;

282 
uöt32_t
 
	m__t˝m_∑d
;

283 
uöt8_t
 
	mt˝m_key
[
TCP_MD5SIG_MAXKEYLEN
];

287 
	st˝_ª∑ú_›t


289 
uöt32_t
 
	m›t_code
;

290 
uöt32_t
 
	m›t_vÆ
;

296 
	mTCP_NO_QUEUE
,

297 
	mTCP_RECV_QUEUE
,

298 
	mTCP_SEND_QUEUE
,

299 
	mTCP_QUEUES_NR
,

303 
	#TCP_COOKIE_MIN
 8

	)

304 
	#TCP_COOKIE_MAX
 16

	)

305 
	#TCP_COOKIE_PAIR_SIZE
 (2*
TCP_COOKIE_MAX
)

	)

308 
	#TCP_COOKIE_IN_ALWAYS
 (1 << 0Ë

	)

309 
	#TCP_COOKIE_OUT_NEVER
 (1 << 1Ë

	)

313 
	#TCP_S_DATA_IN
 (1 << 2Ë

	)

314 
	#TCP_S_DATA_OUT
 (1 << 3Ë

	)

316 
	#TCP_MSS_DEFAULT
 536U

	)

317 
	#TCP_MSS_DESIRED
 1220U

	)

319 
	st˝_cookõ_å™ß˘i⁄s


321 
uöt16_t
 
	mt˝˘_Êags
;

322 
uöt8_t
 
	m__t˝˘_∑d1
;

323 
uöt8_t
 
	mt˝˘_cookõ_desúed
;

324 
uöt16_t
 
	mt˝˘_s_d©a_desúed
;

325 
uöt16_t
 
	mt˝˘_u£d
;

326 
uöt8_t
 
	mt˝˘_vÆue
[
TCP_MSS_DEFAULT
];

330 
	st˝_ª∑ú_wödow


332 
uöt32_t
 
	m¢d_wl1
;

333 
uöt32_t
 
	m¢d_wnd
;

334 
uöt32_t
 
	mmax_wödow
;

335 
uöt32_t
 
	mrcv_wnd
;

336 
uöt32_t
 
	mrcv_wup
;

340 
	st˝_zîoc›y_ª˚ive


342 
uöt64_t
 
	maddªss
;

343 
uöt32_t
 
	mÀngth
;

344 
uöt32_t
 
	mªcv_skù_höt
;

	@/usr/include/openssl/hmac.h

10 #i‚de‡
HEADER_HMAC_H


11 
	#HEADER_HMAC_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

15 
	~<›ís¶/evp.h
>

17 #i‡
OPENSSL_API_COMPAT
 < 0x10200000L

18 
	#HMAC_MAX_MD_CBLOCK
 128

	)

21 #ifde‡ 
__˝lu•lus


25 
size_t
 
HMAC_size
(c⁄° 
HMAC_CTX
 *
e
);

26 
HMAC_CTX
 *
HMAC_CTX_√w
();

27 
HMAC_CTX_ª£t
(
HMAC_CTX
 *
˘x
);

28 
HMAC_CTX_‰ì
(
HMAC_CTX
 *
˘x
);

30 
DEPRECATEDIN_1_1_0
(
__owur
 
HMAC_Inô
(
HMAC_CTX
 *
˘x
, c⁄° *
key
, 
Àn
,

31 c⁄° 
EVP_MD
 *
md
))

33  
HMAC_Inô_ex
(
HMAC_CTX
 *
˘x
, c⁄° *
key
, 
Àn
,

34 c⁄° 
EVP_MD
 *
md
, 
ENGINE
 *
im∂
);

35  
HMAC_Upd©e
(
HMAC_CTX
 *
˘x
, c⁄° *
d©a
,

36 
size_t
 
Àn
);

37  
HMAC_FöÆ
(
HMAC_CTX
 *
˘x
, *
md
,

38 *
Àn
);

39 *
HMAC
(c⁄° 
EVP_MD
 *
evp_md
, c⁄° *
key
, 
key_Àn
,

40 c⁄° *
d
, 
size_t
 
n
, *
md
,

41 *
md_Àn
);

42 
__owur
 
HMAC_CTX_c›y
(
HMAC_CTX
 *
d˘x
, HMAC_CTX *
s˘x
);

44 
HMAC_CTX_£t_Êags
(
HMAC_CTX
 *
˘x
, 
Êags
);

45 c⁄° 
EVP_MD
 *
HMAC_CTX_gë_md
(c⁄° 
HMAC_CTX
 *
˘x
);

47 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/md5.h

10 #i‚de‡
HEADER_MD5_H


11 
	#HEADER_MD5_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

15 #i‚de‡
OPENSSL_NO_MD5


16 
	~<›ís¶/e_os2.h
>

17 
	~<°ddef.h
>

18 #ifde‡ 
__˝lu•lus


27 
	#MD5_LONG
 

	)

29 
	#MD5_CBLOCK
 64

	)

30 
	#MD5_LBLOCK
 (
MD5_CBLOCK
/4)

	)

31 
	#MD5_DIGEST_LENGTH
 16

	)

33 
	sMD5°©e_°
 {

34 
MD5_LONG
 
A
, 
B
, 
C
, 
D
;

35 
MD5_LONG
 
Nl
, 
Nh
;

36 
MD5_LONG
 
d©a
[
MD5_LBLOCK
];

37 
num
;

38 } 
	tMD5_CTX
;

40 
MD5_Inô
(
MD5_CTX
 *
c
);

41 
MD5_Upd©e
(
MD5_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

42 
MD5_FöÆ
(*
md
, 
MD5_CTX
 *
c
);

43 *
MD5
(c⁄° *
d
, 
size_t
 
n
, *
md
);

44 
MD5_Tønsf‹m
(
MD5_CTX
 *
c
, c⁄° *
b
);

45 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/sha.h

10 #i‚de‡
HEADER_SHA_H


11 
	#HEADER_SHA_H


	)

13 
	~<›ís¶/e_os2.h
>

14 
	~<°ddef.h
>

16 #ifde‡ 
__˝lu•lus


25 
	#SHA_LONG
 

	)

27 
	#SHA_LBLOCK
 16

	)

28 
	#SHA_CBLOCK
 (
SHA_LBLOCK
*4)

	)

31 
	#SHA_LAST_BLOCK
 (
SHA_CBLOCK
-8)

	)

32 
	#SHA_DIGEST_LENGTH
 20

	)

34 
	sSHA°©e_°
 {

35 
SHA_LONG
 
h0
, 
h1
, 
h2
, 
h3
, 
h4
;

36 
SHA_LONG
 
Nl
, 
Nh
;

37 
SHA_LONG
 
d©a
[
SHA_LBLOCK
];

38 
num
;

39 } 
	tSHA_CTX
;

41 
SHA1_Inô
(
SHA_CTX
 *
c
);

42 
SHA1_Upd©e
(
SHA_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

43 
SHA1_FöÆ
(*
md
, 
SHA_CTX
 *
c
);

44 *
SHA1
(c⁄° *
d
, 
size_t
 
n
, *
md
);

45 
SHA1_Tønsf‹m
(
SHA_CTX
 *
c
, c⁄° *
d©a
);

47 
	#SHA256_CBLOCK
 (
SHA_LBLOCK
*4)

	)

51 
	sSHA256°©e_°
 {

52 
SHA_LONG
 
h
[8];

53 
SHA_LONG
 
Nl
, 
Nh
;

54 
SHA_LONG
 
d©a
[
SHA_LBLOCK
];

55 
num
, 
md_Àn
;

56 } 
	tSHA256_CTX
;

58 
SHA224_Inô
(
SHA256_CTX
 *
c
);

59 
SHA224_Upd©e
(
SHA256_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

60 
SHA224_FöÆ
(*
md
, 
SHA256_CTX
 *
c
);

61 *
SHA224
(c⁄° *
d
, 
size_t
 
n
, *
md
);

62 
SHA256_Inô
(
SHA256_CTX
 *
c
);

63 
SHA256_Upd©e
(
SHA256_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

64 
SHA256_FöÆ
(*
md
, 
SHA256_CTX
 *
c
);

65 *
SHA256
(c⁄° *
d
, 
size_t
 
n
, *
md
);

66 
SHA256_Tønsf‹m
(
SHA256_CTX
 *
c
, c⁄° *
d©a
);

68 
	#SHA224_DIGEST_LENGTH
 28

	)

69 
	#SHA256_DIGEST_LENGTH
 32

	)

70 
	#SHA384_DIGEST_LENGTH
 48

	)

71 
	#SHA512_DIGEST_LENGTH
 64

	)

83 
	#SHA512_CBLOCK
 (
SHA_LBLOCK
*8)

	)

84 #i‡(
deföed
(
_WIN32
Ë|| deföed(
_WIN64
)Ë&& !deföed(
__MINGW32__
)

85 
	#SHA_LONG64
 
__öt64


	)

86 
	#U64
(
C
ËC##
UI64


	)

87 #ñi‡
deföed
(
__¨ch64__
)

88 
	#SHA_LONG64
 

	)

89 
	#U64
(
C
ËC##
UL


	)

91 
	#SHA_LONG64
 

	)

92 
	#U64
(
C
ËC##
ULL


	)

95 
	sSHA512°©e_°
 {

96 
SHA_LONG64
 
h
[8];

97 
SHA_LONG64
 
Nl
, 
Nh
;

99 
SHA_LONG64
 
d
[
SHA_LBLOCK
];

100 
p
[
SHA512_CBLOCK
];

101 } 
u
;

102 
num
, 
md_Àn
;

103 } 
	tSHA512_CTX
;

105 
SHA384_Inô
(
SHA512_CTX
 *
c
);

106 
SHA384_Upd©e
(
SHA512_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

107 
SHA384_FöÆ
(*
md
, 
SHA512_CTX
 *
c
);

108 *
SHA384
(c⁄° *
d
, 
size_t
 
n
, *
md
);

109 
SHA512_Inô
(
SHA512_CTX
 *
c
);

110 
SHA512_Upd©e
(
SHA512_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

111 
SHA512_FöÆ
(*
md
, 
SHA512_CTX
 *
c
);

112 *
SHA512
(c⁄° *
d
, 
size_t
 
n
, *
md
);

113 
SHA512_Tønsf‹m
(
SHA512_CTX
 *
c
, c⁄° *
d©a
);

115 #ifde‡ 
__˝lu•lus


	@/usr/include/poll.h

1 
	~<sys/pﬁl.h
>

	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sched.h
>

23 
	~<time.h
>

25 
	~<bôs/ídün.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

29 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

35 
	mPTHREAD_CREATE_JOINABLE
,

36 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

37 
	mPTHREAD_CREATE_DETACHED


38 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

45 
	mPTHREAD_MUTEX_TIMED_NP
,

46 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

47 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

48 
	mPTHREAD_MUTEX_ADAPTIVE_NP


49 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


51 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

52 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

53 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

54 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


56 #ifde‡
__USE_GNU


58 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


63 #ifde‡
__USE_XOPEN2K


67 
	mPTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

69 
	mPTHREAD_MUTEX_ROBUST
,

70 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


75 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


79 
	mPTHREAD_PRIO_NONE
,

80 
	mPTHREAD_PRIO_INHERIT
,

81 
	mPTHREAD_PRIO_PROTECT


86 
	#PTHREAD_MUTEX_INITIALIZER
 \

87 { { 
	`__PTHREAD_MUTEX_INITIALIZER
 (
PTHREAD_MUTEX_TIMED_NP
Ë} }

	)

88 #ifde‡
__USE_GNU


89 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

90 { { 
	`__PTHREAD_MUTEX_INITIALIZER
 (
PTHREAD_MUTEX_RECURSIVE_NP
Ë} }

	)

91 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

92 { { 
	`__PTHREAD_MUTEX_INITIALIZER
 (
PTHREAD_MUTEX_ERRORCHECK_NP
Ë} }

	)

93 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

94 { { 
	`__PTHREAD_MUTEX_INITIALIZER
 (
PTHREAD_MUTEX_ADAPTIVE_NP
Ë} }

	)

99 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


102 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

103 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

104 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

105 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


110 
	#PTHREAD_RWLOCK_INITIALIZER
 \

111 { { 
	`__PTHREAD_RWLOCK_INITIALIZER
 (
PTHREAD_RWLOCK_DEFAULT_NP
Ë} }

	)

112 #ifde‡
__USE_GNU


113 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

114 { { 
	`__PTHREAD_RWLOCK_INITIALIZER
 (
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
Ë} }

	)

122 
	mPTHREAD_INHERIT_SCHED
,

123 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

124 
	mPTHREAD_EXPLICIT_SCHED


125 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

132 
	mPTHREAD_SCOPE_SYSTEM
,

133 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

134 
	mPTHREAD_SCOPE_PROCESS


135 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

142 
	mPTHREAD_PROCESS_PRIVATE
,

143 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

144 
	mPTHREAD_PROCESS_SHARED


145 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

151 
	#PTHREAD_COND_INITIALIZER
 { { {0}, {0}, {0, 0}, {0, 0}, 0, 0, {0, 0} } }

	)

155 
	s_±hªad_˛ónup_buf„r


157 (*
	m__routöe
) (*);

158 *
	m__¨g
;

159 
	m__ˇn˚…y≥
;

160 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

166 
	mPTHREAD_CANCEL_ENABLE
,

167 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

168 
	mPTHREAD_CANCEL_DISABLE


169 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

173 
	mPTHREAD_CANCEL_DEFERRED
,

174 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

175 
	mPTHREAD_CANCEL_ASYNCHRONOUS


176 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

178 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

182 
	#PTHREAD_ONCE_INIT
 0

	)

185 #ifde‡
__USE_XOPEN2K


189 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

193 
__BEGIN_DECLS


198 
	$±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

199 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

200 *(*
__°¨t_routöe
) (*),

201 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

207 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

215 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

217 #ifde‡
__USE_GNU


220 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

228 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

229 c⁄° 
time•ec
 *
__ab°ime
);

238 
	`±hªad_˛ockjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

239 
˛ockid_t
 
__˛ockid
,

240 c⁄° 
time•ec
 *
__ab°ime
);

247 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

251 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

254 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

255 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

263 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

266 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1));

270 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

271 *
__dëach°©e
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

275 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

276 
__dëach°©e
)

277 
__THROW
 
	`__n⁄nuŒ
 ((1));

281 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

282 
size_t
 *
__gu¨dsize
)

283 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

286 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

287 
size_t
 
__gu¨dsize
)

288 
__THROW
 
	`__n⁄nuŒ
 ((1));

292 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

293 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

297 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

298 c⁄° 
sched_∑øm
 *
__ª°ri˘


299 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

302 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


303 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

304 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

307 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

308 
__THROW
 
	`__n⁄nuŒ
 ((1));

311 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


312 
__©å
, *
__ª°ri˘
 
__öhîô
)

313 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

316 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

317 
__öhîô
)

318 
__THROW
 
	`__n⁄nuŒ
 ((1));

322 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

323 *
__ª°ri˘
 
__sc›e
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

327 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

328 
__THROW
 
	`__n⁄nuŒ
 ((1));

331 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


332 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

339 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

340 *
__°ackaddr
)

341 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

344 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


345 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

346 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

351 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

352 
size_t
 
__°acksize
)

353 
__THROW
 
	`__n⁄nuŒ
 ((1));

355 #ifde‡
__USE_XOPEN2K


357 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

358 **
__ª°ri˘
 
__°ackaddr
,

359 
size_t
 *
__ª°ri˘
 
__°acksize
)

360 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

365 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

366 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

369 #ifde‡
__USE_GNU


372 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

373 
size_t
 
__˝u£tsize
,

374 c⁄° 
˝u_£t_t
 *
__˝u£t
)

375 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

379 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

380 
size_t
 
__˝u£tsize
,

381 
˝u_£t_t
 *
__˝u£t
)

382 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

385 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

386 
__THROW
 
	`__n⁄nuŒ
 ((1));

390 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1));

396 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

397 
__THROW
 
	`__n⁄nuŒ
 ((2));

405 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

406 c⁄° 
sched_∑øm
 *
__∑øm
)

407 
__THROW
 
	`__n⁄nuŒ
 ((3));

410 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

411 *
__ª°ri˘
 
__pﬁicy
,

412 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

413 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

416 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

417 
__THROW
;

420 #ifde‡
__USE_GNU


422 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

423 
size_t
 
__buÊí
)

424 
__THROW
 
	`__n⁄nuŒ
 ((2));

427 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

428 
__THROW
 
	`__n⁄nuŒ
 ((2));

432 #ifde‡
__USE_UNIX98


434 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

437 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

440 #ifde‡
__USE_GNU


445 
	$±hªad_yõld
 (Ë
__THROW
;

450 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

451 c⁄° 
˝u_£t_t
 *
__˝u£t
)

452 
__THROW
 
	`__n⁄nuŒ
 ((3));

455 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

456 
˝u_£t_t
 *
__˝u£t
)

457 
__THROW
 
	`__n⁄nuŒ
 ((3));

470 
	$±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

471 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

482 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

486 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

489 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

494 
	`±hªad_ã°ˇn˚l
 ();

503 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

504 
__mask_was_ßved
;

505 } 
__ˇn˚l_jmp_buf
[1];

506 *
__∑d
[4];

507 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

510 #i‚de‡
__˛ónup_f˘_©åibuã


511 
	#__˛ónup_f˘_©åibuã


	)

516 
	s__±hªad_˛ónup_‰ame


518 (*
__ˇn˚l_routöe
) (*);

519 *
__ˇn˚l_¨g
;

520 
__do_ô
;

521 
__ˇn˚l_ty≥
;

524 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


525 #ifde‡
__˝lu•lus


527 ˛as†
	c__±hªad_˛ónup_˛ass


529 (*
__ˇn˚l_routöe
) (*);

530 *
__ˇn˚l_¨g
;

531 
__do_ô
;

532 
__ˇn˚l_ty≥
;

534 
public
:

535 
	$__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

536 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

537 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

538 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

539 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

540 &
__ˇn˚l_ty≥
); 
	}
}

541 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

551 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

553 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

557 
	#±hªad_˛ónup_p›
(
execuã
) \

558 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

559 } 0)

	)

561 #ifde‡
__USE_GNU


565 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

567 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

568 
__˛‰ame
.
	`__de„r
 ()

	)

573 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

574 
__˛‰ame
.
	`__ª°‹e
 (); \

575 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

576 } 0)

	)

583 
__exã∫_ölöe
 

584 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

586 i‡(
__‰ame
->
__do_ô
)

587 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

588 
	}
}

597 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

599 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

600 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

601 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

602 .
__do_ô
 = 1 };

	)

606 
	#±hªad_˛ónup_p›
(
execuã
) \

607 
__˛‰ame
.
__do_ô
 = (
execuã
); \

608 } 0)

	)

610 #ifde‡
__USE_GNU


614 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

616 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

617 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

618 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

619 .
__do_ô
 = 1 }; \

620 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

621 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

626 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

627 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

628 
__˛‰ame
.
__do_ô
 = (
execuã
); \

629 } 0)

	)

640 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

642 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

643 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

644 *
__ˇn˚l_¨g
 = (
¨g
); \

645 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

646 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

647 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

649 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

650 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

654 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

655 dÿ{

	)

656 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

657 
__˛ónup_f˘_©åibuã
;

661 
	#±hªad_˛ónup_p›
(
execuã
) \

664 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

665 i‡(
execuã
) \

666 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

667 } 0)

	)

668 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

669 
__˛ónup_f˘_©åibuã
;

671 #ifde‡
__USE_GNU


675 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

677 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

678 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

679 *
__ˇn˚l_¨g
 = (
¨g
); \

680 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

681 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

682 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

684 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

685 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

689 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

690 dÿ{

	)

691 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

692 
__˛ónup_f˘_©åibuã
;

697 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

700 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

701 i‡(
execuã
) \

702 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

703 
	}
} 0)

	)

704 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

705 
__˛ónup_f˘_©åibuã
;

709 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

710 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

711 #i‚de‡
SHARED


712 
	`__©åibuã__
 ((
__wók__
))

718 
__jmp_buf_èg
;

719 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

725 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

726 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

727 
__THROW
 
	`__n⁄nuŒ
 ((1));

730 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

731 
__THROW
 
	`__n⁄nuŒ
 ((1));

734 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

735 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

738 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

739 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

741 #ifde‡
__USE_XOPEN2K


743 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

744 c⁄° 
time•ec
 *
__ª°ri˘


745 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

748 #ifde‡
__USE_GNU


749 
	$±hªad_muãx_˛ocklock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

750 
˛ockid_t
 
__˛ockid
,

751 c⁄° 
time•ec
 *
__ª°ri˘


752 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

756 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

757 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

761 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

762 
__ª°ri˘
 
__muãx
,

763 *
__ª°ri˘
 
__¥io˚ûög
)

764 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

768 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

769 
__¥io˚ûög
,

770 *
__ª°ri˘
 
__ﬁd_˚ûög
)

771 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

774 #ifde‡
__USE_XOPEN2K8


776 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

777 
__THROW
 
	`__n⁄nuŒ
 ((1));

778 #ifde‡
__USE_GNU


779 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

780 
__THROW
 
	`__n⁄nuŒ
 ((1));

789 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

790 
__THROW
 
	`__n⁄nuŒ
 ((1));

793 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

794 
__THROW
 
	`__n⁄nuŒ
 ((1));

797 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

798 
__ª°ri˘
 
__©å
,

799 *
__ª°ri˘
 
__psh¨ed
)

800 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

803 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

804 
__psh¨ed
)

805 
__THROW
 
	`__n⁄nuŒ
 ((1));

807 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


809 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


810 
__©å
, *
__ª°ri˘
 
__köd
)

811 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

816 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

817 
__THROW
 
	`__n⁄nuŒ
 ((1));

821 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

822 
__ª°ri˘
 
__©å
,

823 *
__ª°ri˘
 
__¥Ÿocﬁ
)

824 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

828 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

829 
__¥Ÿocﬁ
)

830 
__THROW
 
	`__n⁄nuŒ
 ((1));

833 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

834 
__ª°ri˘
 
__©å
,

835 *
__ª°ri˘
 
__¥io˚ûög
)

836 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

839 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

840 
__¥io˚ûög
)

841 
__THROW
 
	`__n⁄nuŒ
 ((1));

843 #ifde‡
__USE_XOPEN2K


845 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

846 *
__robu°√ss
)

847 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

848 #ifde‡
__USE_GNU


849 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

850 *
__robu°√ss
)

851 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

855 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

856 
__robu°√ss
)

857 
__THROW
 
	`__n⁄nuŒ
 ((1));

858 #ifde‡
__USE_GNU


859 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

860 
__robu°√ss
)

861 
__THROW
 
	`__n⁄nuŒ
 ((1));

866 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


871 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

872 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


873 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

876 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

877 
__THROW
 
	`__n⁄nuŒ
 ((1));

880 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

881 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

884 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

885 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

887 #ifde‡
__USE_XOPEN2K


889 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

890 c⁄° 
time•ec
 *
__ª°ri˘


891 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

894 #ifde‡
__USE_GNU


895 
	$±hªad_rwlock_˛ockrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

896 
˛ockid_t
 
__˛ockid
,

897 c⁄° 
time•ec
 *
__ª°ri˘


898 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

902 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

903 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

906 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

907 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

909 #ifde‡
__USE_XOPEN2K


911 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

912 c⁄° 
time•ec
 *
__ª°ri˘


913 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

916 #ifde‡
__USE_GNU


917 
	$±hªad_rwlock_˛ockwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

918 
˛ockid_t
 
__˛ockid
,

919 c⁄° 
time•ec
 *
__ª°ri˘


920 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

924 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

925 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

931 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

932 
__THROW
 
	`__n⁄nuŒ
 ((1));

935 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

936 
__THROW
 
	`__n⁄nuŒ
 ((1));

939 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

940 
__ª°ri˘
 
__©å
,

941 *
__ª°ri˘
 
__psh¨ed
)

942 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

945 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

946 
__psh¨ed
)

947 
__THROW
 
	`__n⁄nuŒ
 ((1));

950 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

951 
__ª°ri˘
 
__©å
,

952 *
__ª°ri˘
 
__¥ef
)

953 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

956 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

957 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

965 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

966 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

967 
__THROW
 
	`__n⁄nuŒ
 ((1));

970 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

971 
__THROW
 
	`__n⁄nuŒ
 ((1));

974 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

975 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

978 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

979 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

986 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

987 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

988 
	`__n⁄nuŒ
 ((1, 2));

997 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

998 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

999 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1000 
	`__n⁄nuŒ
 ((1, 2, 3));

1002 #ifde‡
__USE_GNU


1010 
	$±hªad_c⁄d_˛ockwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1011 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1012 
__˛ockid_t
 
__˛ock_id
,

1013 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1014 
	`__n⁄nuŒ
 ((1, 2, 4));

1020 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1021 
__THROW
 
	`__n⁄nuŒ
 ((1));

1024 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1025 
__THROW
 
	`__n⁄nuŒ
 ((1));

1028 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1029 
__ª°ri˘
 
__©å
,

1030 *
__ª°ri˘
 
__psh¨ed
)

1031 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1034 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1035 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1037 #ifde‡
__USE_XOPEN2K


1039 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1040 
__ª°ri˘
 
__©å
,

1041 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1042 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1045 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1046 
__˛ockid_t
 
__˛ock_id
)

1047 
__THROW
 
	`__n⁄nuŒ
 ((1));

1051 #ifde‡
__USE_XOPEN2K


1056 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1057 
__THROW
 
	`__n⁄nuŒ
 ((1));

1060 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1061 
__THROW
 
	`__n⁄nuŒ
 ((1));

1064 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1065 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1068 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1069 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1072 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1073 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1080 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1081 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1082 
__©å
, 
__cou¡
)

1083 
__THROW
 
	`__n⁄nuŒ
 ((1));

1086 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1087 
__THROW
 
	`__n⁄nuŒ
 ((1));

1090 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1091 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1095 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1096 
__THROW
 
	`__n⁄nuŒ
 ((1));

1099 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1100 
__THROW
 
	`__n⁄nuŒ
 ((1));

1103 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1104 
__ª°ri˘
 
__©å
,

1105 *
__ª°ri˘
 
__psh¨ed
)

1106 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1109 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1110 
__psh¨ed
)

1111 
__THROW
 
	`__n⁄nuŒ
 ((1));

1123 
	$±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1124 (*
__de°r_fun˘i⁄
) (*))

1125 
__THROW
 
	`__n⁄nuŒ
 ((1));

1128 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1131 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1134 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1135 c⁄° *
__poöãr
Ë
__THROW
 ;

1138 #ifde‡
__USE_XOPEN2K


1140 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1141 
__˛ockid_t
 *
__˛ock_id
)

1142 
__THROW
 
	`__n⁄nuŒ
 ((2));

1157 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1158 (*
__∑ª¡
) (),

1159 (*
__chûd
Ë()Ë
__THROW
;

1162 #ifde‡
__USE_EXTERN_INLINES


1164 
__exã∫_ölöe
 

1165 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1167  
__thªad1
 =
__thªad2
;

1168 
	}
}

1171 
	g__END_DECLS


	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

31 
	~<bôs/ty≥s/time_t.h
>

32 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

33 #i‚de‡
__USE_XOPEN2K


34 
	~<time.h
>

37 #i‚de‡
__pid_t_deföed


38 
__pid_t
 
	tpid_t
;

39 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

44 
	~<bôs/˝u-£t.h
>

47 
	#sched_¥i‹ôy
 
sched_¥i‹ôy


	)

48 
	#__sched_¥i‹ôy
 
sched_¥i‹ôy


	)

51 
__BEGIN_DECLS


54 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

55 
__THROW
;

58 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

61 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

62 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

65 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

68 
	$sched_yõld
 (Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

77 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

80 #ifde‡
__USE_GNU


82 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

83 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

84 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

86 
˝u£ç
)

	)

87 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

88 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

90 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

91 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

92 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

93 
˝u£ç
)

	)

94 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

95 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

97 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

98 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

100 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

102 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

103 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

104 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

105 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

106 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

107 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

108 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

109 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

110 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

111 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

112 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

113 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

115 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

116 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

117 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

121 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

122 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

125 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

126 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

129 
__END_DECLS


	@/usr/include/scsi/sg.h

25 #i‚de‡
_SCSI_SG_H


26 
	#_SCSI_SG_H
 1

	)

28 
	~<„©uªs.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

37 
	ssg_iovec


39 * 
	miov_ba£
;

40 
size_t
 
	miov_Àn
;

41 } 
	tsg_iovec_t
;

44 
	ssg_io_hdr


46 
	möãrÁ˚_id
;

47 
	mdx„r_dúe˘i⁄
;

48 
	mcmd_Àn
;

49 
	mmx_sb_Àn
;

50 
	miovec_cou¡
;

51 
	mdx„r_Àn
;

52 * 
	mdx„Ω
;

54 * 
	mcmdp
;

55 * 
	msbp
;

56 
	mtimeout
;

57 
	mÊags
;

58 
	m∑ck_id
;

59 * 
	mu§_±r
;

60 
	m°©us
;

61 
	mmasked_°©us
;

62 
	mmsg_°©us
;

63 
	msb_Àn_wr
;

64 
	mho°_°©us
;

65 
	mdrivî_°©us
;

66 
	mªsid
;

67 
	mduøti⁄
;

68 
	möfo
;

69 } 
	tsg_io_hdr_t
;

73 
	#SG_DXFER_NONE
 -1

	)

74 
	#SG_DXFER_TO_DEV
 -2

	)

75 
	#SG_DXFER_FROM_DEV
 -3

	)

76 
	#SG_DXFER_TO_FROM_DEV
 -4

	)

83 
	#SG_FLAG_DIRECT_IO
 1

	)

84 
	#SG_FLAG_LUN_INHIBIT
 2

	)

86 
	#SG_FLAG_NO_DXFER
 0x10000

	)

90 
	#SG_INFO_OK_MASK
 0x1

	)

91 
	#SG_INFO_OK
 0x0

	)

92 
	#SG_INFO_CHECK
 0x1

	)

94 
	#SG_INFO_DIRECT_IO_MASK
 0x6

	)

95 
	#SG_INFO_INDIRECT_IO
 0x0

	)

96 
	#SG_INFO_DIRECT_IO
 0x2

	)

97 
	#SG_INFO_MIXED_IO
 0x4

	)

102 
	ssg_scsi_id
 {

104 
	mho°_no
;

105 
	mch™√l
;

107 
	mscsi_id
;

108 
	mlun
;

110 
	mscsi_ty≥
;

112 
	mh_cmd_≥r_lun
;

114 
	md_queue_dïth
;

116 
	munu£d
[2];

120 
	ssg_ªq_öfo
 {

121 
	mªq_°©e
;

122 
	m‹ph™
;

123 
	msg_io_ow√d
;

124 
	m¥obÀm
;

125 
	m∑ck_id
;

126 * 
	mu§_±r
;

127 
	mduøti⁄
;

129 
	munu£d
;

130 } 
	tsg_ªq_öfo_t
;

137 
	#SG_EMULATED_HOST
 0x2203

	)

141 
	#SG_SET_TRANSFORM
 0x2204

	)

143 
	#SG_GET_TRANSFORM
 0x2205

	)

145 
	#SG_SET_RESERVED_SIZE
 0x2275

	)

146 
	#SG_GET_RESERVED_SIZE
 0x2272

	)

149 
	#SG_GET_SCSI_ID
 0x2276

	)

153 
	#SG_SET_FORCE_LOW_DMA
 0x2279

	)

154 
	#SG_GET_LOW_DMA
 0x227®

	)

160 
	#SG_SET_FORCE_PACK_ID
 0x227b

	)

161 
	#SG_GET_PACK_ID
 0x227¯

	)

163 
	#SG_GET_NUM_WAITING
 0x227d

	)

166 
	#SG_GET_SG_TABLESIZE
 0x227F

	)

168 
	#SG_GET_VERSION_NUM
 0x2282

	)

171 
	#SG_SCSI_RESET
 0x2284

	)

173 
	#SG_SCSI_RESET_NOTHING
 0

	)

174 
	#SG_SCSI_RESET_DEVICE
 1

	)

175 
	#SG_SCSI_RESET_BUS
 2

	)

176 
	#SG_SCSI_RESET_HOST
 3

	)

179 
	#SG_IO
 0x2285

	)

181 
	#SG_GET_REQUEST_TABLE
 0x2286

	)

184 
	#SG_SET_KEEP_ORPHAN
 0x2287

	)

185 
	#SG_GET_KEEP_ORPHAN
 0x2288

	)

188 
	#SG_SCATTER_SZ
 (8 * 4096Ë

	)

196 
	#SG_DEFAULT_RETRIES
 1

	)

199 
	#SG_DEF_FORCE_LOW_DMA
 0

	)

200 
	#SG_DEF_FORCE_PACK_ID
 0

	)

201 
	#SG_DEF_KEEP_ORPHAN
 0

	)

202 
	#SG_DEF_RESERVED_SIZE
 
SG_SCATTER_SZ


	)

205 
	#SG_MAX_QUEUE
 16

	)

207 
	#SG_BIG_BUFF
 
SG_DEF_RESERVED_SIZE


	)

210 
sg_io_hdr
 
	tSg_io_hdr
;

211 
sg_io_vec
 
	tSg_io_vec
;

212 
sg_scsi_id
 
	tSg_scsi_id
;

213 
sg_ªq_öfo
 
	tSg_ªq_öfo
;

220 
	#SG_MAX_SENSE
 16

	)

222 
	ssg_hódî


225 
	m∑ck_Àn
;

227 
	mª∂y_Àn
;

229 
	m∑ck_id
;

231 
	mªsu…
;

233 
	mtwñve_byã
:1;

235 
	mèrgë_°©us
:5;

237 
	mho°_°©us
:8;

239 
	mdrivî_°©us
:8;

241 
	mŸhî_Êags
:10;

246 
	m£n£_buf„r
[
SG_MAX_SENSE
];

254 
	#SG_SET_TIMEOUT
 0x2201

	)

255 
	#SG_GET_TIMEOUT
 0x2202

	)

258 
	#SG_GET_COMMAND_Q
 0x2270

	)

259 
	#SG_SET_COMMAND_Q
 0x2271

	)

263 
	#SG_SET_DEBUG
 0x227ê

	)

265 
	#SG_NEXT_CMD_LEN
 0x2283

	)

270 
	#SG_DEFAULT_TIMEOUT
 (60*
HZ
Ë

	)

271 
	#SG_DEF_COMMAND_Q
 0

	)

273 
	#SG_DEF_UNDERRUN_FLAG
 0

	)

	@/usr/include/semaphore.h

18 #i‚de‡
_SEMAPHORE_H


19 
	#_SEMAPHORE_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sys/ty≥s.h
>

23 #ifde‡
__USE_XOPEN2K


24 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

28 
	~<bôs/£m≠h‹e.h
>

31 
__BEGIN_DECLS


35 
	$£m_öô
 (
£m_t
 *
__£m
, 
__psh¨ed
, 
__vÆue
)

36 
__THROW
 
	`__n⁄nuŒ
 ((1));

39 
	$£m_de°roy
 (
£m_t
 *
__£m
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

42 
£m_t
 *
	$£m_›í
 (c⁄° *
__«me
, 
__oÊag
, ...)

43 
__THROW
 
	`__n⁄nuŒ
 ((1));

46 
	$£m_˛o£
 (
£m_t
 *
__£m
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

49 
	$£m_u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

55 
	$£m_waô
 (
£m_t
 *
__£m
Ë
	`__n⁄nuŒ
 ((1));

57 #ifde‡
__USE_XOPEN2K


62 
	$£m_timedwaô
 (
£m_t
 *
__ª°ri˘
 
__£m
,

63 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

64 
	`__n⁄nuŒ
 ((1, 2));

67 #ifde‡
__USE_GNU


68 
	$£m_˛ockwaô
 (
£m_t
 *
__ª°ri˘
 
__£m
,

69 
˛ockid_t
 
˛ock
,

70 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

71 
	`__n⁄nuŒ
 ((1, 3));

75 
	$£m_åywaô
 (
£m_t
 *
__£m
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1));

78 
	$£m_po°
 (
£m_t
 *
__£m
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1));

81 
	$£m_gëvÆue
 (
£m_t
 *
__ª°ri˘
 
__£m
, *__ª°ri˘ 
__svÆ
)

82 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

85 
__END_DECLS


	@/usr/include/setjmp.h

22 #i‚def 
_SETJMP_H


23 
	#_SETJMP_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/ty≥s/__sig£t_t.h
>

33 
	s__jmp_buf_èg


39 
__jmp_buf
 
	m__jmpbuf
;

40 
	m__mask_was_ßved
;

41 
__sig£t_t
 
	m__ßved_mask
;

45 
__jmp_buf_èg
 
	tjmp_buf
[1];

49 
	$£tjmp
 (
jmp_buf
 
__ív
Ë
__THROWNL
;

54 
	$__sig£tjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__ßvemask
Ë
__THROWNL
;

58 
	$_£tjmp
 (
__jmp_buf_èg
 
__ív
[1]Ë
__THROWNL
;

62 
	#£tjmp
(
ív
Ë
	`_£tjmp
 (ív)

	)

67 
	$l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

68 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

70 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


74 
	$_l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

75 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

79 #ifdef 
__USE_POSIX


83 
__jmp_buf_èg
 
	tsigjmp_buf
[1];

87 
	#sig£tjmp
(
ív
, 
ßvemask
Ë
	`__sig£tjmp
 (ív, savemask)

	)

93 
	$sigl⁄gjmp
 (
sigjmp_buf
 
__ív
, 
__vÆ
)

94 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

99 #i‡
__USE_FORTIFY_LEVEL
 > 0

100 
	~<bôs/£tjmp2.h
>

103 
__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


23 
	#_SIGNAL_H


	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

30 
	~<bôs/signum.h
>

32 
	~<bôs/ty≥s/sig_©omic_t.h
>

34 #i‡
deföed
 
__USE_POSIX


35 
	~<bôs/ty≥s/sig£t_t.h
>

38 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


39 #i‚de‡
__pid_t_deföed


40 
__pid_t
 
	tpid_t
;

41 
	#__pid_t_deföed


	)

43 #ifde‡
__USE_XOPEN


45 #i‚de‡
__uid_t_deföed


46 
__uid_t
 
	tuid_t
;

47 
	#__uid_t_deföed


	)

51 #ifde‡
__USE_POSIX199309


53 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

56 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


57 
	~<bôs/ty≥s/sigöfo_t.h
>

58 
	~<bôs/sigöfo-c⁄°s.h
>

61 #ifde‡
__USE_MISC


62 
	~<bôs/ty≥s/sigvÆ_t.h
>

65 #ifde‡
__USE_POSIX199309


66 
	~<bôs/ty≥s/sigevít_t.h
>

67 
	~<bôs/sigevít-c⁄°s.h
>

72 (*
	t__sigh™dÀr_t
) ();

77 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

78 
__THROW
;

79 #ifde‡
__USE_GNU


80 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

81 
__THROW
;

87 #ifde‡
__USE_MISC


88 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

89 
__THROW
;

92 #ifde‡
__REDIRECT_NTH


93 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

94 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

95 
__sysv_sig«l
);

97 
	#sig«l
 
__sysv_sig«l


	)

101 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8


104 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

105 
__THROW
;

111 #ifde‡
__USE_POSIX


112 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

115 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


119 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

123 
	$øi£
 (
__sig
Ë
__THROW
;

125 #ifde‡
__USE_MISC


127 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

128 
__THROW
;

129 
	$gsig«l
 (
__sig
Ë
__THROW
;

132 #ifde‡
__USE_XOPEN2K8


134 
	`psig«l
 (
__sig
, c⁄° *
__s
);

137 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

149 #ifde‡
__USE_XOPEN_EXTENDED


150 #ifde‡
__GNUC__


151 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

153 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

155 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

160 #ifde‡
__USE_MISC


167 
	#sigmask
(
sig
Ë(()(1u << ((sigË- 1)))

	)

170 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

173 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

176 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

180 #ifde‡
__USE_MISC


181 
	#NSIG
 
_NSIG


	)

184 #ifde‡
__USE_GNU


185 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

189 #ifde‡
__USE_MISC


190 
__sigh™dÀr_t
 
	tsig_t
;

193 #ifde‡
__USE_POSIX


196 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

202 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

205 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

208 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

209 
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #ifde‡
__USE_GNU


213 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

216 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

217 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

220 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

221 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

226 
	~<bôs/siga˘i⁄.h
>

229 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

230 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

237 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

240 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

241 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

244 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__USE_POSIX199506


252 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

253 
	`__n⁄nuŒ
 ((1, 2));

256 #ifde‡
__USE_POSIX199309


261 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

262 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

269 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

270 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

271 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

272 
	`__n⁄nuŒ
 ((1));

276 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

277 
__THROW
;

282 #ifde‡
__USE_MISC


286 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

287 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

291 
	~<bôs/sigc⁄ãxt.h
>

294 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

299 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


300 
	#__√ed_size_t


	)

301 
	~<°ddef.h
>

303 
	~<bôs/ty≥s/°ack_t.h
>

304 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


306 
	~<sys/uc⁄ãxt.h
>

310 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_MISC


314 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

316 
	~<bôs/sig°ack.h
>

317 
	~<bôs/ss_Êags.h
>

321 
	$sigÆt°ack
 (c⁄° 
°ack_t
 *
__ª°ri˘
 
__ss
,

322 
°ack_t
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

325 #i‡((
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

326 || 
deföed
 
__USE_MISC
)

327 
	~<bôs/ty≥s/°ru˘_sig°ack.h
>

330 #i‡((
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

331 || 
deföed
 
__USE_MISC
)

335 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

336 
__THROW
 
__©åibuã_dïªˇãd__
;

339 #ifde‡
__USE_XOPEN_EXTENDED


343 
	$sighﬁd
 (
__sig
Ë
__THROW
;

346 
	$sigªl£
 (
__sig
Ë
__THROW
;

349 
	$sigign‹e
 (
__sig
Ë
__THROW
;

352 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

355 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


358 
	~<bôs/±hªadty≥s.h
>

359 
	~<bôs/sigthªad.h
>

366 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

368 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

370 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

371 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

374 
	~<bôs/sig«l_ext.h
>

376 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/wch¨.h
>

29 
	~<bôs/w‹dsize.h
>

34 
	~<bôs/°döt-öä.h
>

37 
	~<bôs/°döt-uöä.h
>

43 
__öt_Àa°8_t
 
	töt_Àa°8_t
;

44 
__öt_Àa°16_t
 
	töt_Àa°16_t
;

45 
__öt_Àa°32_t
 
	töt_Àa°32_t
;

46 
__öt_Àa°64_t
 
	töt_Àa°64_t
;

49 
__uöt_Àa°8_t
 
	tuöt_Àa°8_t
;

50 
__uöt_Àa°16_t
 
	tuöt_Àa°16_t
;

51 
__uöt_Àa°32_t
 
	tuöt_Àa°32_t
;

52 
__uöt_Àa°64_t
 
	tuöt_Àa°64_t
;

58 sig√d 
	töt_Á°8_t
;

59 #i‡
__WORDSIZE
 == 64

60 
	töt_Á°16_t
;

61 
	töt_Á°32_t
;

62 
	töt_Á°64_t
;

64 
	töt_Á°16_t
;

65 
	töt_Á°32_t
;

66 
__exãnsi⁄__


67 
	töt_Á°64_t
;

71 
	tuöt_Á°8_t
;

72 #i‡
__WORDSIZE
 == 64

73 
	tuöt_Á°16_t
;

74 
	tuöt_Á°32_t
;

75 
	tuöt_Á°64_t
;

77 
	tuöt_Á°16_t
;

78 
	tuöt_Á°32_t
;

79 
__exãnsi⁄__


80 
	tuöt_Á°64_t
;

85 #i‡
__WORDSIZE
 == 64

86 #i‚de‡
__öçå_t_deföed


87 
	töçå_t
;

88 
	#__öçå_t_deföed


	)

90 
	tuöçå_t
;

92 #i‚de‡
__öçå_t_deföed


93 
	töçå_t
;

94 
	#__öçå_t_deföed


	)

96 
	tuöçå_t
;

101 
__ötmax_t
 
	tötmax_t
;

102 
__uötmax_t
 
	tuötmax_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	#__INT64_C
(
c
Ë¯## 
L


	)

107 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

109 
	#__INT64_C
(
c
Ë¯## 
LL


	)

110 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

116 
	#INT8_MIN
 (-128)

	)

117 
	#INT16_MIN
 (-32767-1)

	)

118 
	#INT32_MIN
 (-2147483647-1)

	)

119 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

121 
	#INT8_MAX
 (127)

	)

122 
	#INT16_MAX
 (32767)

	)

123 
	#INT32_MAX
 (2147483647)

	)

124 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

127 
	#UINT8_MAX
 (255)

	)

128 
	#UINT16_MAX
 (65535)

	)

129 
	#UINT32_MAX
 (4294967295U)

	)

130 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

134 
	#INT_LEAST8_MIN
 (-128)

	)

135 
	#INT_LEAST16_MIN
 (-32767-1)

	)

136 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

137 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

139 
	#INT_LEAST8_MAX
 (127)

	)

140 
	#INT_LEAST16_MAX
 (32767)

	)

141 
	#INT_LEAST32_MAX
 (2147483647)

	)

142 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

145 
	#UINT_LEAST8_MAX
 (255)

	)

146 
	#UINT_LEAST16_MAX
 (65535)

	)

147 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

148 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

152 
	#INT_FAST8_MIN
 (-128)

	)

153 #i‡
__WORDSIZE
 == 64

154 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

155 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

157 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

158 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

160 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

162 
	#INT_FAST8_MAX
 (127)

	)

163 #i‡
__WORDSIZE
 == 64

164 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

165 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

167 
	#INT_FAST16_MAX
 (2147483647)

	)

168 
	#INT_FAST32_MAX
 (2147483647)

	)

170 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

173 
	#UINT_FAST8_MAX
 (255)

	)

174 #i‡
__WORDSIZE
 == 64

175 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

176 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

178 
	#UINT_FAST16_MAX
 (4294967295U)

	)

179 
	#UINT_FAST32_MAX
 (4294967295U)

	)

181 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

185 #i‡
__WORDSIZE
 == 64

186 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

187 
	#INTPTR_MAX
 (9223372036854775807L)

	)

188 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

190 
	#INTPTR_MIN
 (-2147483647-1)

	)

191 
	#INTPTR_MAX
 (2147483647)

	)

192 
	#UINTPTR_MAX
 (4294967295U)

	)

197 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

199 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

202 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

208 #i‡
__WORDSIZE
 == 64

209 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

210 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

212 #i‡
__WORDSIZE32_PTRDIFF_LONG


213 
	#PTRDIFF_MIN
 (-2147483647L-1)

	)

214 
	#PTRDIFF_MAX
 (2147483647L)

	)

216 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

217 
	#PTRDIFF_MAX
 (2147483647)

	)

222 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

223 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

226 #i‡
__WORDSIZE
 == 64

227 
	#SIZE_MAX
 (18446744073709551615UL)

	)

229 #i‡
__WORDSIZE32_SIZE_ULONG


230 
	#SIZE_MAX
 (4294967295UL)

	)

232 
	#SIZE_MAX
 (4294967295U)

	)

237 #i‚de‡
WCHAR_MIN


239 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

240 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

244 
	#WINT_MIN
 (0u)

	)

245 
	#WINT_MAX
 (4294967295u)

	)

248 
	#INT8_C
(
c
Ë
	)
c

249 
	#INT16_C
(
c
Ë
	)
c

250 
	#INT32_C
(
c
Ë
	)
c

251 #i‡
__WORDSIZE
 == 64

252 
	#INT64_C
(
c
Ë¯## 
L


	)

254 
	#INT64_C
(
c
Ë¯## 
LL


	)

258 
	#UINT8_C
(
c
Ë
	)
c

259 
	#UINT16_C
(
c
Ë
	)
c

260 
	#UINT32_C
(
c
Ë¯## 
U


	)

261 #i‡
__WORDSIZE
 == 64

262 
	#UINT64_C
(
c
Ë¯## 
UL


	)

264 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

268 #i‡
__WORDSIZE
 == 64

269 
	#INTMAX_C
(
c
Ë¯## 
L


	)

270 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

272 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

273 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

276 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

278 
	#INT8_WIDTH
 8

	)

279 
	#UINT8_WIDTH
 8

	)

280 
	#INT16_WIDTH
 16

	)

281 
	#UINT16_WIDTH
 16

	)

282 
	#INT32_WIDTH
 32

	)

283 
	#UINT32_WIDTH
 32

	)

284 
	#INT64_WIDTH
 64

	)

285 
	#UINT64_WIDTH
 64

	)

287 
	#INT_LEAST8_WIDTH
 8

	)

288 
	#UINT_LEAST8_WIDTH
 8

	)

289 
	#INT_LEAST16_WIDTH
 16

	)

290 
	#UINT_LEAST16_WIDTH
 16

	)

291 
	#INT_LEAST32_WIDTH
 32

	)

292 
	#UINT_LEAST32_WIDTH
 32

	)

293 
	#INT_LEAST64_WIDTH
 64

	)

294 
	#UINT_LEAST64_WIDTH
 64

	)

296 
	#INT_FAST8_WIDTH
 8

	)

297 
	#UINT_FAST8_WIDTH
 8

	)

298 
	#INT_FAST16_WIDTH
 
__WORDSIZE


	)

299 
	#UINT_FAST16_WIDTH
 
__WORDSIZE


	)

300 
	#INT_FAST32_WIDTH
 
__WORDSIZE


	)

301 
	#UINT_FAST32_WIDTH
 
__WORDSIZE


	)

302 
	#INT_FAST64_WIDTH
 64

	)

303 
	#UINT_FAST64_WIDTH
 64

	)

305 
	#INTPTR_WIDTH
 
__WORDSIZE


	)

306 
	#UINTPTR_WIDTH
 
__WORDSIZE


	)

308 
	#INTMAX_WIDTH
 64

	)

309 
	#UINTMAX_WIDTH
 64

	)

311 
	#PTRDIFF_WIDTH
 
__WORDSIZE


	)

312 
	#SIG_ATOMIC_WIDTH
 32

	)

313 
	#SIZE_WIDTH
 
__WORDSIZE


	)

314 
	#WCHAR_WIDTH
 32

	)

315 
	#WINT_WIDTH
 32

	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


24 
	#_STDIO_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	#__√ed___va_li°


	)

36 
	~<°d¨g.h
>

38 
	~<bôs/ty≥s.h
>

39 
	~<bôs/ty≥s/__Âos_t.h
>

40 
	~<bôs/ty≥s/__Âos64_t.h
>

41 
	~<bôs/ty≥s/__FILE.h
>

42 
	~<bôs/ty≥s/FILE.h
>

43 
	~<bôs/ty≥s/°ru˘_FILE.h
>

45 #ifde‡
__USE_GNU


46 
	~<bôs/ty≥s/cookõ_io_fun˘i⁄s_t.h
>

49 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


50 #ifde‡
__GNUC__


51 #i‚de‡
_VA_LIST_DEFINED


52 
__gnuc_va_li°
 
	tva_li°
;

53 
	#_VA_LIST_DEFINED


	)

56 
	~<°d¨g.h
>

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__off_t_deföed


62 #i‚de‡
__USE_FILE_OFFSET64


63 
__off_t
 
	toff_t
;

65 
__off64_t
 
	toff_t
;

67 
	#__off_t_deföed


	)

69 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


70 
__off64_t
 
	toff64_t
;

71 
	#__off64_t_deföed


	)

75 #ifde‡
__USE_XOPEN2K8


76 #i‚de‡
__ssize_t_deföed


77 
__ssize_t
 
	tssize_t
;

78 
	#__ssize_t_deföed


	)

83 #i‚de‡
__USE_FILE_OFFSET64


84 
__Âos_t
 
	tÂos_t
;

86 
__Âos64_t
 
	tÂos_t
;

88 #ifde‡
__USE_LARGEFILE64


89 
__Âos64_t
 
	tÂos64_t
;

93 
	#_IOFBF
 0

	)

94 
	#_IOLBF
 1

	)

95 
	#_IONBF
 2

	)

99 
	#BUFSIZ
 8192

	)

104 
	#EOF
 (-1)

	)

109 
	#SEEK_SET
 0

	)

110 
	#SEEK_CUR
 1

	)

111 
	#SEEK_END
 2

	)

112 #ifde‡
__USE_GNU


113 
	#SEEK_DATA
 3

	)

114 
	#SEEK_HOLE
 4

	)

118 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


120 
	#P_tmpdú
 "/tmp"

	)

133 
	~<bôs/°dio_lim.h
>

137 
FILE
 *
°dö
;

138 
FILE
 *
°dout
;

139 
FILE
 *
°dîr
;

141 
	#°dö
 
°dö


	)

142 
	#°dout
 
°dout


	)

143 
	#°dîr
 
°dîr


	)

146 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

148 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

150 #ifde‡
__USE_ATFILE


152 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

153 c⁄° *
__√w
Ë
__THROW
;

156 #ifde‡
__USE_GNU


158 
	#RENAME_NOREPLACE
 (1 << 0)

	)

159 
	#RENAME_EXCHANGE
 (1 << 1)

	)

160 
	#RENAME_WHITEOUT
 (1 << 2)

	)

164 
	$ª«mót2
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

165 c⁄° *
__√w
, 
__Êags
Ë
__THROW
;

172 #i‚de‡
__USE_FILE_OFFSET64


173 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

175 #ifde‡
__REDIRECT


176 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

178 
	#tmpfûe
 
tmpfûe64


	)

182 #ifde‡
__USE_LARGEFILE64


183 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

187 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

189 #ifde‡
__USE_MISC


192 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

196 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


204 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

205 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

213 
	`f˛o£
 (
FILE
 *
__°ªam
);

218 
	`fÊush
 (
FILE
 *
__°ªam
);

220 #ifde‡
__USE_MISC


227 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

230 #ifde‡
__USE_GNU


237 
	`f˛o£Æl
 ();

241 #i‚de‡
__USE_FILE_OFFSET64


246 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

247 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

252 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

253 c⁄° *
__ª°ri˘
 
__modes
,

254 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

256 #ifde‡
__REDIRECT


257 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

258 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

259 
__wur
;

260 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

261 c⁄° *
__ª°ri˘
 
__modes
,

262 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

263 
__wur
;

265 
	#f›í
 
f›í64


	)

266 
	#‰e›í
 
‰e›í64


	)

269 #ifde‡
__USE_LARGEFILE64


270 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

271 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

272 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
,

274 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

277 #ifdef 
__USE_POSIX


279 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

282 #ifdef 
__USE_GNU


285 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

286 c⁄° *
__ª°ri˘
 
__modes
,

287 
cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

290 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

292 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

293 
__THROW
 
__wur
;

298 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

304 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

308 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

309 
__modes
, 
size_t
 
__n
Ë
__THROW
;

311 #ifdef 
__USE_MISC


314 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

315 
size_t
 
__size
Ë
__THROW
;

318 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

326 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

327 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

332 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

334 
	$•rötf
 (*
__ª°ri˘
 
__s
,

335 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

341 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

342 
__gnuc_va_li°
 
__¨g
);

347 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
);

349 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

350 
__gnuc_va_li°
 
__¨g
Ë
__THROWNL
;

352 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


354 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

355 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

356 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

358 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

359 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

360 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

363 #i‡
	`__GLIBC_USE
 (
LIB_EXT2
)

366 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

367 
__gnuc_va_li°
 
__¨g
)

368 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

369 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

370 c⁄° *
__ª°ri˘
 
__fmt
, ...)

371 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

372 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

373 c⁄° *
__ª°ri˘
 
__fmt
, ...)

374 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

377 #ifde‡
__USE_XOPEN2K8


379 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

380 
__gnuc_va_li°
 
__¨g
)

381 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

382 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

383 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

391 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

392 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

397 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

399 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

400 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

405 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
Ë&& !
deföed
 
__LDBL_COMPAT


406 #ifde‡
__REDIRECT


407 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

408 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

409 
__isoc99_fsˇnf
Ë
__wur
;

410 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

411 
__isoc99_sˇnf
Ë
__wur
;

412 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

413 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

414 
__isoc99_ssˇnf
);

416 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

417 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

418 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

419 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

420 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

421 
	#fsˇnf
 
__isoc99_fsˇnf


	)

422 
	#sˇnf
 
__isoc99_sˇnf


	)

423 
	#ssˇnf
 
__isoc99_ssˇnf


	)

427 #ifdef 
__USE_ISOC99


432 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

433 
__gnuc_va_li°
 
__¨g
)

434 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

440 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

441 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

444 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

445 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

446 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

449 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
)

450 #i‡
deföed
 
__REDIRECT
 && !deföed 
__LDBL_COMPAT


451 
	`__REDIRECT
 (
vfsˇnf
,

452 (
FILE
 *
__ª°ri˘
 
__s
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
),

454 
__isoc99_vfsˇnf
)

455 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

456 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

457 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

458 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

459 
	`__REDIRECT_NTH
 (
vssˇnf
,

460 (c⁄° *
__ª°ri˘
 
__s
,

461 c⁄° *
__ª°ri˘
 
__f‹m©
,

462 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

463 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

464 #ñi‡!
deföed
 
__REDIRECT


465 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

466 c⁄° *
__ª°ri˘
 
__f‹m©
,

467 
__gnuc_va_li°
 
__¨g
Ë
__wur
;

468 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

469 
__gnuc_va_li°
 
__¨g
Ë
__wur
;

470 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

471 c⁄° *
__ª°ri˘
 
__f‹m©
,

472 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

473 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

474 
	#vsˇnf
 
__isoc99_vsˇnf


	)

475 
	#vssˇnf
 
__isoc99_vssˇnf


	)

485 
	`fgëc
 (
FILE
 *
__°ªam
);

486 
	`gëc
 (
FILE
 *
__°ªam
);

492 
	`gëch¨
 ();

494 #ifde‡
__USE_POSIX199506


499 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

500 
	`gëch¨_u∆ocked
 ();

503 #ifde‡
__USE_MISC


510 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

521 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

522 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

528 
	`putch¨
 (
__c
);

530 #ifde‡
__USE_MISC


537 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

540 #ifde‡
__USE_POSIX199506


545 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

546 
	`putch¨_u∆ocked
 (
__c
);

550 #i‡
deföed
 
__USE_MISC
 \

551 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

553 
	`gëw
 (
FILE
 *
__°ªam
);

556 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

564 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

565 
__wur
;

567 #i‡
	`__GLIBC_USE
 (
DEPRECATED_GETS
)

577 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

580 #ifde‡
__USE_GNU


587 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

588 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

592 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

603 
__ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

604 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

605 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

606 
__ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

607 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

608 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

616 
__ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

617 
size_t
 *
__ª°ri˘
 
__n
,

618 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

626 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

632 
	`puts
 (c⁄° *
__s
);

639 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

646 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

647 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

652 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

653 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

655 #ifde‡
__USE_GNU


662 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

663 
FILE
 *
__ª°ri˘
 
__°ªam
);

666 #ifde‡
__USE_MISC


673 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

674 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

675 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

676 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

684 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

689 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

694 
	`ªwöd
 (
FILE
 *
__°ªam
);

701 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


702 #i‚de‡
__USE_FILE_OFFSET64


707 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

712 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

714 #ifde‡
__REDIRECT


715 
	`__REDIRECT
 (
f£eko
,

716 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

717 
f£eko64
);

718 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

720 
	#f£eko
 
f£eko64


	)

721 
	#·ñlo
 
·ñlo64


	)

726 #i‚de‡
__USE_FILE_OFFSET64


731 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

736 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

738 #ifde‡
__REDIRECT


739 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

740 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

741 
	`__REDIRECT
 (
f£ços
,

742 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

744 
	#fgëpos
 
fgëpos64


	)

745 
	#f£ços
 
f£ços64


	)

749 #ifde‡
__USE_LARGEFILE64


750 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

751 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

752 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

753 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

757 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

759 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

761 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

763 #ifde‡
__USE_MISC


765 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

766 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

767 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

775 
	`≥º‹
 (c⁄° *
__s
);

781 
	~<bôs/sys_îæi°.h
>

784 #ifdef 
__USE_POSIX


786 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

789 #ifde‡
__USE_MISC


791 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

795 #ifde‡
__USE_POSIX2


800 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

806 
	`p˛o£
 (
FILE
 *
__°ªam
);

810 #ifdef 
__USE_POSIX


812 *
	$˘îmid
 (*
__s
Ë
__THROW
;

816 #i‡(
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
Ë|| deföed 
__USE_GNU


818 *
	`cu£rid
 (*
__s
);

822 #ifdef 
__USE_GNU


823 
ob°ack
;

826 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

827 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

828 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

829 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

830 c⁄° *
__ª°ri˘
 
__f‹m©
,

831 
__gnuc_va_li°
 
__¨gs
)

832 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

836 #ifde‡
__USE_POSIX199506


840 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

844 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

847 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

850 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


853 
	~<bôs/gë›t_posix.h
>

858 
	`__uÊow
 (
FILE
 *);

859 
	`__ovîÊow
 (
FILE
 *, );

863 #ifde‡
__USE_EXTERN_INLINES


864 
	~<bôs/°dio.h
>

866 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


867 
	~<bôs/°dio2.h
>

869 #ifde‡
__LDBL_COMPAT


870 
	~<bôs/°dio-ldbl.h
>

873 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

25 
	~<bôs/libc-hódî-°¨t.h
>

28 
	#__√ed_size_t


	)

29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

31 
	~<°ddef.h
>

33 
	g__BEGIN_DECLS


35 
	#_STDLIB_H
 1

	)

37 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


39 
	~<bôs/waôÊags.h
>

40 
	~<bôs/waô°©us.h
>

43 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (°©us)

	)

44 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (°©us)

	)

45 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (°©us)

	)

46 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (°©us)

	)

47 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (°©us)

	)

48 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (°©us)

	)

49 #ifde‡
__WIFCONTINUED


50 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (°©us)

	)

55 
	~<bôs/Êﬂä.h
>

60 
	mquŸ
;

61 
	mªm
;

62 } 
	tdiv_t
;

65 #i‚de‡
__ldiv_t_deföed


68 
	mquŸ
;

69 
	mªm
;

70 } 
	tldiv_t
;

71 
	#__ldiv_t_deföed
 1

	)

74 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


76 
__exãnsi⁄__
 struct

78 
	mquŸ
;

79 
	mªm
;

80 } 
	tŒdiv_t
;

81 
	#__Œdiv_t_deföed
 1

	)

86 
	#RAND_MAX
 2147483647

	)

91 
	#EXIT_FAILURE
 1

	)

92 
	#EXIT_SUCCESS
 0

	)

96 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

97 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

101 
	$©of
 (c⁄° *
__≈å
)

102 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

104 
	$©oi
 (c⁄° *
__≈å
)

105 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

107 
	$©ﬁ
 (c⁄° *
__≈å
)

108 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

110 #ifde‡
__USE_ISOC99


112 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

113 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

117 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

118 **
__ª°ri˘
 
__íd±r
)

119 
__THROW
 
	`__n⁄nuŒ
 ((1));

121 #ifdef 
__USE_ISOC99


123 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

124 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

126 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

127 **
__ª°ri˘
 
__íd±r
)

128 
__THROW
 
	`__n⁄nuŒ
 ((1));

133 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

134 
_Flﬂt16
 
	$°πof16
 (c⁄° *
__ª°ri˘
 
__≈å
,

135 **
__ª°ri˘
 
__íd±r
)

136 
__THROW
 
	`__n⁄nuŒ
 ((1));

139 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

140 
_Flﬂt32
 
	$°πof32
 (c⁄° *
__ª°ri˘
 
__≈å
,

141 **
__ª°ri˘
 
__íd±r
)

142 
__THROW
 
	`__n⁄nuŒ
 ((1));

145 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

146 
_Flﬂt64
 
	$°πof64
 (c⁄° *
__ª°ri˘
 
__≈å
,

147 **
__ª°ri˘
 
__íd±r
)

148 
__THROW
 
	`__n⁄nuŒ
 ((1));

151 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

152 
_Flﬂt128
 
	$°πof128
 (c⁄° *
__ª°ri˘
 
__≈å
,

153 **
__ª°ri˘
 
__íd±r
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1));

157 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

158 
_Flﬂt32x
 
	$°πof32x
 (c⁄° *
__ª°ri˘
 
__≈å
,

159 **
__ª°ri˘
 
__íd±r
)

160 
__THROW
 
	`__n⁄nuŒ
 ((1));

163 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

164 
_Flﬂt64x
 
	$°πof64x
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

169 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

170 
_Flﬂt128x
 
	$°πof128x
 (c⁄° *
__ª°ri˘
 
__≈å
,

171 **
__ª°ri˘
 
__íd±r
)

172 
__THROW
 
	`__n⁄nuŒ
 ((1));

176 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1));

180 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

181 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

182 
__THROW
 
	`__n⁄nuŒ
 ((1));

184 #ifde‡
__USE_MISC


186 
__exãnsi⁄__


187 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

191 
__exãnsi⁄__


192 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

193 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

194 
__THROW
 
	`__n⁄nuŒ
 ((1));

197 #ifde‡
__USE_ISOC99


199 
__exãnsi⁄__


200 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

204 
__exãnsi⁄__


205 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

206 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

207 
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

212 
	$°r‰omd
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

213 
__f
)

214 
__THROW
 
	`__n⁄nuŒ
 ((3));

216 
	$°r‰omf
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

217 
__f
)

218 
__THROW
 
	`__n⁄nuŒ
 ((3));

220 
	$°r‰oml
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

221 
__f
)

222 
__THROW
 
	`__n⁄nuŒ
 ((3));

225 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

226 
	$°r‰omf16
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

227 
_Flﬂt16
 
__f
)

228 
__THROW
 
	`__n⁄nuŒ
 ((3));

231 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

232 
	$°r‰omf32
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

233 
_Flﬂt32
 
__f
)

234 
__THROW
 
	`__n⁄nuŒ
 ((3));

237 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

238 
	$°r‰omf64
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

239 
_Flﬂt64
 
__f
)

240 
__THROW
 
	`__n⁄nuŒ
 ((3));

243 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

244 
	$°r‰omf128
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

245 
_Flﬂt128
 
__f
)

246 
__THROW
 
	`__n⁄nuŒ
 ((3));

249 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

250 
	$°r‰omf32x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

251 
_Flﬂt32x
 
__f
)

252 
__THROW
 
	`__n⁄nuŒ
 ((3));

255 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

256 
	$°r‰omf64x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

257 
_Flﬂt64x
 
__f
)

258 
__THROW
 
	`__n⁄nuŒ
 ((3));

261 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

262 
	$°r‰omf128x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

263 
_Flﬂt128x
 
__f
)

264 
__THROW
 
	`__n⁄nuŒ
 ((3));

268 #ifde‡
__USE_GNU


272 
	~<bôs/ty≥s/loˇÀ_t.h
>

274 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

275 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

276 
loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

278 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

279 **
__ª°ri˘
 
__íd±r
,

280 
__ba£
, 
loˇÀ_t
 
__loc
)

281 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

283 
__exãnsi⁄__


284 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

285 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

286 
loˇÀ_t
 
__loc
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

289 
__exãnsi⁄__


290 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

291 **
__ª°ri˘
 
__íd±r
,

292 
__ba£
, 
loˇÀ_t
 
__loc
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

295 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

296 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

299 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

300 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

301 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

303 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

304 **
__ª°ri˘
 
__íd±r
,

305 
loˇÀ_t
 
__loc
)

306 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

308 #i‡
__HAVE_FLOAT16


309 
_Flﬂt16
 
	$°πof16_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

310 **
__ª°ri˘
 
__íd±r
,

311 
loˇÀ_t
 
__loc
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

315 #i‡
__HAVE_FLOAT32


316 
_Flﬂt32
 
	$°πof32_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

317 **
__ª°ri˘
 
__íd±r
,

318 
loˇÀ_t
 
__loc
)

319 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

322 #i‡
__HAVE_FLOAT64


323 
_Flﬂt64
 
	$°πof64_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

324 **
__ª°ri˘
 
__íd±r
,

325 
loˇÀ_t
 
__loc
)

326 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

329 #i‡
__HAVE_FLOAT128


330 
_Flﬂt128
 
	$°πof128_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 **
__ª°ri˘
 
__íd±r
,

332 
loˇÀ_t
 
__loc
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

336 #i‡
__HAVE_FLOAT32X


337 
_Flﬂt32x
 
	$°πof32x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

338 **
__ª°ri˘
 
__íd±r
,

339 
loˇÀ_t
 
__loc
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

343 #i‡
__HAVE_FLOAT64X


344 
_Flﬂt64x
 
	$°πof64x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

345 **
__ª°ri˘
 
__íd±r
,

346 
loˇÀ_t
 
__loc
)

347 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

350 #i‡
__HAVE_FLOAT128X


351 
_Flﬂt128x
 
	$°πof128x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

352 **
__ª°ri˘
 
__íd±r
,

353 
loˇÀ_t
 
__loc
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

359 #ifde‡
__USE_EXTERN_INLINES


360 
__exã∫_ölöe
 

361 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

363  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

364 
	}
}

365 
__exã∫_ölöe
 

366 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

368  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

369 
	}
}

371 #ifde‡
__USE_ISOC99


372 
__exãnsi⁄__
 
__exã∫_ölöe
 

373 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

375  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

376 
	}
}

381 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


385 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

388 
	$a64l
 (c⁄° *
__s
)

389 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

393 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


394 
	~<sys/ty≥s.h
>

401 
	$øndom
 (Ë
__THROW
;

404 
	$§™dom
 (
__£ed
Ë
__THROW
;

410 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

411 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

415 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

418 #ifde‡
__USE_MISC


423 
	søndom_d©a


425 
öt32_t
 *
Âå
;

426 
öt32_t
 *
Ωå
;

427 
öt32_t
 *
°©e
;

428 
ønd_ty≥
;

429 
ønd_deg
;

430 
ønd_£p
;

431 
öt32_t
 *
íd_±r
;

434 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

435 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

437 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

438 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

441 
size_t
 
__°©ñí
,

442 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

443 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

445 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

446 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

447 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$ønd
 (Ë
__THROW
;

455 
	$§™d
 (
__£ed
Ë
__THROW
;

457 #ifde‡
__USE_POSIX199506


459 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

463 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


467 
	$dønd48
 (Ë
__THROW
;

468 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

471 
	$Ã™d48
 (Ë
__THROW
;

472 
	$ƒ™d48
 (
__xsubi
[3])

473 
__THROW
 
	`__n⁄nuŒ
 ((1));

476 
	$mønd48
 (Ë
__THROW
;

477 
	$jønd48
 (
__xsubi
[3])

478 
__THROW
 
	`__n⁄nuŒ
 ((1));

481 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

482 *
	$£ed48
 (
__£ed16v
[3])

483 
__THROW
 
	`__n⁄nuŒ
 ((1));

484 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

486 #ifde‡
__USE_MISC


490 
	sdønd48_d©a


492 
__x
[3];

493 
__ﬁd_x
[3];

494 
__c
;

495 
__öô
;

496 
__exãnsi⁄__
 
__a
;

501 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

502 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

503 
	$î™d48_r
 (
__xsubi
[3],

504 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

505 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

508 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

509 *
__ª°ri˘
 
__ªsu…
)

510 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

511 
	$ƒ™d48_r
 (
__xsubi
[3],

512 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

513 *
__ª°ri˘
 
__ªsu…
)

514 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

517 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

518 *
__ª°ri˘
 
__ªsu…
)

519 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

520 
	$jønd48_r
 (
__xsubi
[3],

521 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

522 *
__ª°ri˘
 
__ªsu…
)

523 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

526 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

527 
__THROW
 
	`__n⁄nuŒ
 ((2));

529 
	$£ed48_r
 (
__£ed16v
[3],

530 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

532 
	$lc⁄g48_r
 (
__∑øm
[7],

533 
dønd48_d©a
 *
__buf„r
)

534 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

539 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__


540 
	`__©åibuã_Æloc_size__
 ((1)Ë
__wur
;

542 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

543 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((1, 2)Ë
__wur
;

550 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

551 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
 
	`__©åibuã_Æloc_size__
 ((2));

553 #ifde‡
__USE_MISC


559 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

560 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__


561 
	`__©åibuã_Æloc_size__
 ((2, 3));

565 
	$‰ì
 (*
__±r
Ë
__THROW
;

567 #ifde‡
__USE_MISC


568 
	~<Æloˇ.h
>

571 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

572 || 
deföed
 
__USE_MISC


574 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__


575 
	`__©åibuã_Æloc_size__
 ((1)Ë
__wur
;

578 #ifde‡
__USE_XOPEN2K


580 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

584 #ifde‡
__USE_ISOC11


586 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

587 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

591 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

595 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

597 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


599 #ifde‡
__˝lu•lus


600 "C++" 
	$©_quick_exô
 ((*
__func
) ())

601 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

603 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

607 #ifdef 
__USE_MISC


610 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

611 
__THROW
 
	`__n⁄nuŒ
 ((1));

617 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

619 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


623 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

626 #ifde‡
__USE_ISOC99


629 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

634 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

636 #ifde‡
__USE_GNU


639 *
	$£cuª_gëív
 (c⁄° *
__«me
)

640 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


647 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

650 #ifde‡
__USE_XOPEN2K


653 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

654 
__THROW
 
	`__n⁄nuŒ
 ((2));

657 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

660 #ifdef 
__USE_MISC


664 
	$˛óªnv
 (Ë
__THROW
;

668 #i‡
deföed
 
__USE_MISC
 \

669 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

675 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

678 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


687 #i‚de‡
__USE_FILE_OFFSET64


688 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

690 #ifde‡
__REDIRECT


691 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

692 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

694 
	#mk°emp
 
mk°emp64


	)

697 #ifde‡
__USE_LARGEFILE64


698 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 #ifde‡
__USE_MISC


709 #i‚de‡
__USE_FILE_OFFSET64


710 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 #ifde‡
__REDIRECT


713 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

714 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

716 
	#mk°emps
 
mk°emps64


	)

719 #ifde‡
__USE_LARGEFILE64


720 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

721 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

725 #ifde‡
__USE_XOPEN2K8


731 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

734 #ifde‡
__USE_GNU


741 #i‚de‡
__USE_FILE_OFFSET64


742 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

744 #ifde‡
__REDIRECT


745 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

746 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

748 
	#mko°emp
 
mko°emp64


	)

751 #ifde‡
__USE_LARGEFILE64


752 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

761 #i‚de‡
__USE_FILE_OFFSET64


762 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

763 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

765 #ifde‡
__REDIRECT


766 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

767 
__Êags
), 
mko°emps64
)

768 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

770 
	#mko°emps
 
mko°emps64


	)

773 #ifde‡
__USE_LARGEFILE64


774 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

775 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

784 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

787 #ifdef 
__USE_GNU


790 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

794 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


800 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

801 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

806 #i‚de‡
__COMPAR_FN_T


807 
	#__COMPAR_FN_T


	)

808 (*
	t__com∑r_‚_t
) (const *, const *);

810 #ifdef 
__USE_GNU


811 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

814 #ifde‡
__USE_GNU


815 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

820 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

821 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

822 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

824 #ifde‡
__USE_EXTERN_INLINES


825 
	~<bôs/°dlib-b£¨ch.h
>

830 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

831 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

832 #ifde‡
__USE_GNU


833 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

834 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

835 
	`__n⁄nuŒ
 ((1, 4));

840 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

841 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

843 #ifde‡
__USE_ISOC99


844 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

845 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

852 
div_t
 
	$div
 (
__numî
, 
__díom
)

853 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

854 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

855 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

857 #ifde‡
__USE_ISOC99


858 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

859 
__díom
)

860 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

864 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

865 || 
deföed
 
__USE_MISC


872 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

873 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

878 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

879 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

884 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

885 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

888 #ifde‡
__USE_MISC


890 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

891 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

892 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

893 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

894 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

895 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

896 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

897 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

902 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

903 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

904 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

905 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

906 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

907 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

909 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

910 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

911 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

912 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

913 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

914 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

915 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

916 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

922 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

925 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

926 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

929 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

933 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

934 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

936 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

937 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

938 
__THROW
;

941 #ifde‡
__USE_MISC


946 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

950 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


957 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

958 *c⁄° *
__ª°ri˘
 
__tokís
,

959 **
__ª°ri˘
 
__vÆuï
)

960 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

966 #ifde‡
__USE_XOPEN2KXSI


968 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

971 #ifde‡
__USE_XOPEN_EXTENDED


976 
	$gø¡±
 (
__fd
Ë
__THROW
;

980 
	$u∆ock±
 (
__fd
Ë
__THROW
;

985 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

988 #ifde‡
__USE_GNU


992 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

993 
__THROW
 
	`__n⁄nuŒ
 ((2));

996 
	`gë±
 ();

999 #ifde‡
__USE_MISC


1003 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

1004 
__THROW
 
	`__n⁄nuŒ
 ((1));

1007 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K


1010 
	$ây¶Ÿ
 (Ë
__THROW
;

1013 
	~<bôs/°dlib-Êﬂt.h
>

1016 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1017 
	~<bôs/°dlib.h
>

1019 #ifde‡
__LDBL_COMPAT


1020 
	~<bôs/°dlib-ldbl.h
>

1023 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #i‡
deföed
 
__˝lu•lus
 && (
__GNUC_PREREQ
 (4, 4) \

37 || 
	$__glibc_˛™g_¥îeq
 (3, 5))

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

43 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

44 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

47 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

48 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || 
	`__GLIBC_USE
 (
ISOC2X
)

54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

61 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

64 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

65 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

68 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


71 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

72 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

73 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

74 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

76 #ifde‡
__OPTIMIZE__


77 
__exã∫_Æways_ölöe
 *

78 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


80  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

83 
__exã∫_Æways_ölöe
 const *

84 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


86  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

89 
	}
}

91 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

92 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 #ifde‡
__USE_GNU


98 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


99 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

100 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

101 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

104 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

105 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


110 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

111 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

112 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

115 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

122 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

123 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

125 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

126 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

130 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

131 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

134 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

137 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

138 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

144 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

148 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
 
	`__n⁄nuŒ
 ((2));

151 #ifde‡
__USE_XOPEN2K8


153 
	~<bôs/ty≥s/loˇÀ_t.h
>

156 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__l
)

157 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

160 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

161 
loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

164 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8
 \

165 || 
	`__GLIBC_USE
 (
LIB_EXT2
Ë|| 
	$__GLIBC_USE
 (
ISOC2X
))

167 *
	$°rdup
 (c⁄° *
__s
)

168 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

174 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
Ë|| __GLIBC_USE (
ISOC2X
)

175 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

179 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


181 
	#°rdu∑
(
s
) \

182 (
__exãnsi⁄__
 \

184 c⁄° *
__ﬁd
 = (
s
); \

185 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

186 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

187 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

188 
	}
}))

	)

191 
	#°∫du∑
(
s
, 
n
) \

192 (
__exãnsi⁄__
 \

194 c⁄° *
__ﬁd
 = (
s
); \

195 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

196 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

197 
__√w
[
__Àn
] = '\0'; \

198 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

199 }))

	)

203 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


206 *
°rchr
 (*
__s
, 
__c
)

207 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

208 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

209 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

211 #ifde‡
__OPTIMIZE__


212 
__exã∫_Æways_ölöe
 *

213 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


215  
__buûtö_°rchr
 (
__s
, 
__c
);

218 
__exã∫_Æways_ölöe
 const *

219 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


221  
__buûtö_°rchr
 (
__s
, 
__c
);

226 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

227 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

230 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


233 *
	`°ºchr
 (*
__s
, 
__c
)

234 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

235 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

236 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

238 #ifde‡
__OPTIMIZE__


239 
__exã∫_Æways_ölöe
 *

240 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


242  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

245 
__exã∫_Æways_ölöe
 const *

246 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


248  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

251 
	}
}

253 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

254 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

257 #ifde‡
__USE_GNU


260 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


261 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

262 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

263 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

264 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

266 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

267 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

274 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

277 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

278 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

280 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


283 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

284 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

285 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

286 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 #ifde‡
__OPTIMIZE__


289 
__exã∫_Æways_ölöe
 *

290 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


292  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

295 
__exã∫_Æways_ölöe
 const *

296 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


298  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

301 
	}
}

303 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

304 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

307 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


310 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

311 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

312 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

313 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

315 #ifde‡
__OPTIMIZE__


316 
__exã∫_Æways_ölöe
 *

317 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


319  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

322 
__exã∫_Æways_ölöe
 const *

323 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


325  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

328 
	}
}

330 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

331 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

336 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

337 
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

342 c⁄° *
__ª°ri˘
 
__dñim
,

343 **
__ª°ri˘
 
__ßve_±r
)

344 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

345 #ifde‡
__USE_POSIX


346 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

347 **
__ª°ri˘
 
__ßve_±r
)

348 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

351 #ifde‡
__USE_GNU


353 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


354 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

355 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

356 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

357 c⁄° *
__√edÀ
)

358 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

360 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

361 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

365 #ifde‡
__USE_GNU


369 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

370 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

371 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

375 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

376 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

377 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

379 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

380 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

385 
size_t
 
	$°æí
 (c⁄° *
__s
)

386 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

388 #ifdef 
__USE_XOPEN2K8


391 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

392 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

397 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

398 #ifde‡
__USE_XOPEN2K


406 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


409 #ifde‡
__REDIRECT_NTH


410 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

411 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

412 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

414 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

415 
__THROW
 
	`__n⁄nuŒ
 ((2));

416 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

421 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

422 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

426 #ifde‡
__USE_XOPEN2K8


428 *
	$°ªº‹_l
 (
__î∫um
, 
loˇÀ_t
 
__l
Ë
__THROW
;

431 #ifde‡
__USE_MISC


432 
	~<°rögs.h
>

436 
	$ex∂icô_bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

440 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

441 c⁄° *
__ª°ri˘
 
__dñim
)

442 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

445 #ifdef 
__USE_XOPEN2K8


447 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

450 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

451 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

452 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

453 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

457 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

458 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

459 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

460 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

461 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

462 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

465 #ifdef 
__USE_GNU


467 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

468 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

471 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

474 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

476 #i‚de‡
ba£«me


481 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


482 "C++" *
	$ba£«me
 (*
__fûíame
)

483 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

484 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

485 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

487 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

492 #i‡
	`__GNUC_PREREQ
 (3,4)

493 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


495 
	~<bôs/°rög_f‹tifõd.h
>

499 
__END_DECLS


	@/usr/include/syslog.h

1 
	~<sys/sy¶og.h
>

	@/usr/include/time.h

22 #i‚def 
_TIME_H


23 
	#_TIME_H
 1

	)

25 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

33 
	~<bôs/time.h
>

37 
	~<bôs/ty≥s/˛ock_t.h
>

38 
	~<bôs/ty≥s/time_t.h
>

39 
	~<bôs/ty≥s/°ru˘_tm.h
>

41 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_ISOC11


42 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

45 #ifde‡
__USE_POSIX199309


46 
	~<bôs/ty≥s/˛ockid_t.h
>

47 
	~<bôs/ty≥s/timî_t.h
>

48 
	~<bôs/ty≥s/°ru˘_ôimî•ec.h
>

49 
	gsigevít
;

52 #ifde‡
__USE_XOPEN2K


53 #i‚de‡
__pid_t_deföed


54 
__pid_t
 
	tpid_t
;

55 
	#__pid_t_deföed


	)

59 #ifde‡
__USE_XOPEN2K8


60 
	~<bôs/ty≥s/loˇÀ_t.h
>

63 #ifde‡
__USE_ISOC11


65 
	#TIME_UTC
 1

	)

68 
__BEGIN_DECLS


72 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

75 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

78 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

79 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

82 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

88 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
,

90 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

92 #ifde‡
__USE_XOPEN


95 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

96 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

97 
__THROW
;

100 #ifde‡
__USE_XOPEN2K8


104 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

105 c⁄° *
__ª°ri˘
 
__f‹m©
,

106 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

107 
loˇÀ_t
 
__loc
Ë
__THROW
;

110 #ifde‡
__USE_GNU


111 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

112 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

113 
loˇÀ_t
 
__loc
Ë
__THROW
;

119 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

123 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

125 #i‡
deföed
 
__USE_POSIX
 || 
	`__GLIBC_USE
 (
ISOC2X
)

128 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

129 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

133 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

134 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

139 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

142 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

144 #i‡
deföed
 
__USE_POSIX
 || 
	`__GLIBC_USE
 (
ISOC2X
)

149 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

150 *
__ª°ri˘
 
__buf
Ë
__THROW
;

153 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

154 *
__ª°ri˘
 
__buf
Ë
__THROW
;

159 *
__tz«me
[2];

160 
__daylight
;

161 
__timez⁄e
;

164 #ifdef 
__USE_POSIX


166 *
tz«me
[2];

170 
	$tz£t
 (Ë
__THROW
;

173 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


174 
daylight
;

175 
timez⁄e
;

181 
	#__i¶óp
(
yór
) \

182 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

185 #ifde‡
__USE_MISC


190 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

193 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

196 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

200 #ifde‡
__USE_POSIX199309


205 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

206 
time•ec
 *
__ªmaöög
);

210 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

213 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

216 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

217 
__THROW
;

219 #ifde‡
__USE_XOPEN2K


224 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

225 c⁄° 
time•ec
 *
__ªq
,

226 
time•ec
 *
__ªm
);

229 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

234 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

235 
sigevít
 *
__ª°ri˘
 
__evp
,

236 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

239 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

242 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

243 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

244 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

247 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

248 
__THROW
;

251 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

255 #ifde‡
__USE_ISOC11


257 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1));

262 #ifde‡
__USE_XOPEN_EXTENDED


274 
gëd©e_îr
;

283 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

286 #ifde‡
__USE_GNU


297 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

298 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

301 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bôs/posix_›t.h
>

205 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


206 
	~<bôs/ívú⁄míts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bôs/ty≥s.h
>

219 #i‚def 
__ssize_t_deföed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_deföed


	)

224 
	#__√ed_size_t


	)

225 
	#__√ed_NULL


	)

226 
	~<°ddef.h
>

228 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


231 #i‚de‡
__gid_t_deföed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_deföed


	)

236 #i‚de‡
__uid_t_deföed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_deföed


	)

241 #i‚de‡
__off_t_deföed


242 #i‚de‡
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_deföed


	)

249 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_deföed


	)

254 #i‚de‡
__u£c⁄ds_t_deföed


255 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

256 
	#__u£c⁄ds_t_deföed


	)

259 #i‚de‡
__pid_t_deföed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_deföed


	)

265 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


266 #i‚de‡
__öçå_t_deföed


267 
__öçå_t
 
	töçå_t
;

268 
	#__öçå_t_deföed


	)

272 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


273 #i‚de‡
__sockÀn_t_deföed


274 
__sockÀn_t
 
	tsockÀn_t
;

275 
	#__sockÀn_t_deföed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_GNU


292 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

300 #ifde‡
__USE_ATFILE


304 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

310 #i‚def 
_STDIO_H


311 
	#SEEK_SET
 0

	)

312 
	#SEEK_CUR
 1

	)

313 
	#SEEK_END
 2

	)

314 #ifde‡
__USE_GNU


315 
	#SEEK_DATA
 3

	)

316 
	#SEEK_HOLE
 4

	)

320 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


322 
	#L_SET
 
SEEK_SET


	)

323 
	#L_INCR
 
SEEK_CUR


	)

324 
	#L_XTND
 
SEEK_END


	)

333 #i‚de‡
__USE_FILE_OFFSET64


334 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

336 #ifde‡
__REDIRECT_NTH


337 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

338 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

339 
l£ek64
);

341 
	#l£ek
 
l£ek64


	)

344 #ifde‡
__USE_LARGEFILE64


345 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

346 
__THROW
;

353 
	`˛o£
 (
__fd
);

360 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

366 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

368 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


369 #i‚de‡
__USE_FILE_OFFSET64


376 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

377 
__off_t
 
__off£t
Ë
__wur
;

384 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

385 
__off_t
 
__off£t
Ë
__wur
;

387 #ifde‡
__REDIRECT


388 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

389 
__off64_t
 
__off£t
),

390 
¥ód64
Ë
__wur
;

391 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

392 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

393 
pwrôe64
Ë
__wur
;

395 
	#¥ód
 
¥ód64


	)

396 
	#pwrôe
 
pwrôe64


	)

400 #ifde‡
__USE_LARGEFILE64


404 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

405 
__off64_t
 
__off£t
Ë
__wur
;

408 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

409 
__off64_t
 
__off£t
Ë
__wur
;

417 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

419 #ifde‡
__USE_GNU


422 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

432 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

444 
	`¶ìp
 (
__£c⁄ds
);

446 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

447 || 
deföed
 
__USE_MISC


452 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

453 
__THROW
;

460 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

469 
	`∑u£
 ();

473 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

474 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

476 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


478 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

483 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

484 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

488 #ifde‡
__USE_ATFILE


491 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

492 
__gid_t
 
__group
, 
__Êag
)

493 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

497 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

499 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


501 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

511 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

513 #ifdef 
__USE_GNU


517 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

520 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

521 || 
deföed
 
__USE_MISC


525 *
	$gëwd
 (*
__buf
)

526 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

531 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

534 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

536 #ifde‡
__USE_GNU


539 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

543 **
__ívú⁄
;

544 #ifde‡
__USE_GNU


545 **
ívú⁄
;

551 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

552 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

554 #ifde‡
__USE_XOPEN2K8


557 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

558 
__THROW
 
	`__n⁄nuŒ
 ((2));

563 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

564 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

568 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

578 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

585 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 #ifde‡
__USE_GNU


590 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

591 *c⁄° 
__ívp
[])

592 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

596 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


598 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

603 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

609 
	~<bôs/c⁄‚ame.h
>

612 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

613 
__THROW
 
	`__n⁄nuŒ
 ((1));

616 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

619 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

621 #ifdef 
__USE_POSIX2


623 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

628 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

631 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

637 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

638 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


639 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

646 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

648 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


660 
	$£çgΩ
 (Ë
__THROW
;

667 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

669 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


671 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

675 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

678 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

681 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

689 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

691 #ifdef 
__USE_GNU


693 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

700 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

702 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


705 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

708 #ifde‡
__USE_XOPEN2K


710 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

717 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

719 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


722 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

725 #ifde‡
__USE_XOPEN2K


727 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

730 #ifde‡
__USE_GNU


733 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

734 
__THROW
;

738 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

739 
__THROW
;

743 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

744 
__THROW
 
__wur
;

748 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

749 
__THROW
 
__wur
;

756 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

758 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

759 || 
deföed
 
__USE_MISC


764 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

770 *
	$ây«me
 (
__fd
Ë
__THROW
;

774 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

775 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

779 
	$ißây
 (
__fd
Ë
__THROW
;

781 #ifde‡
__USE_MISC


784 
	$ây¶Ÿ
 (Ë
__THROW
;

789 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

790 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

792 #ifde‡
__USE_ATFILE


795 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

796 c⁄° *
__to
, 
__Êags
)

797 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

800 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


802 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

803 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

808 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

809 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

810 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

813 #ifde‡
__USE_ATFILE


815 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

816 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

819 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

820 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

821 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

825 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

827 #ifde‡
__USE_ATFILE


829 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

830 
__THROW
 
	`__n⁄nuŒ
 ((2));

834 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

838 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

841 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

848 *
	`gëlogö
 ();

849 #ifde‡
__USE_POSIX199506


856 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

859 #ifdef 
__USE_MISC


861 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

865 #ifdef 
__USE_POSIX2


869 
	~<bôs/gë›t_posix.h
>

873 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


877 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

881 #i‡
deföed
 
__USE_MISC


884 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

885 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

895 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

896 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

897 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

898 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

904 
	$vh™gup
 (Ë
__THROW
;

907 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

915 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

916 
size_t
 
__off£t
, 
__sˇÀ
)

917 
__THROW
 
	`__n⁄nuŒ
 ((1));

923 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

927 *
	$gëu£rshñl
 (Ë
__THROW
;

928 
	$ídu£rshñl
 (Ë
__THROW
;

929 
	$£tu£rshñl
 (Ë
__THROW
;

935 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

939 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

942 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

946 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

954 
	`fsync
 (
__fd
);

957 #ifde‡
__USE_GNU


960 
	$syncfs
 (
__fd
Ë
__THROW
;

964 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


967 
	`gëho°id
 ();

970 
	$sync
 (Ë
__THROW
;

973 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


976 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

981 
	$gëdèbÀsize
 (Ë
__THROW
;

987 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


990 #i‚de‡
__USE_FILE_OFFSET64


991 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

992 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

994 #ifde‡
__REDIRECT_NTH


995 
	`__REDIRECT_NTH
 (
åunˇã
,

996 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

997 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

999 
	#åunˇã
 
åunˇã64


	)

1002 #ifde‡
__USE_LARGEFILE64


1003 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1004 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1009 #i‡
deföed
 
__USE_POSIX199309
 \

1010 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1013 #i‚de‡
__USE_FILE_OFFSET64


1014 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1016 #ifde‡
__REDIRECT_NTH


1017 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1018 
·runˇã64
Ë
__wur
;

1020 
	#·runˇã
 
·runˇã64


	)

1023 #ifde‡
__USE_LARGEFILE64


1024 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1030 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1031 || 
deföed
 
__USE_MISC


1035 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1041 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1045 #ifde‡
__USE_MISC


1056 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1061 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1073 
	#F_ULOCK
 0

	)

1074 
	#F_LOCK
 1

	)

1075 
	#F_TLOCK
 2

	)

1076 
	#F_TEST
 3

	)

1078 #i‚de‡
__USE_FILE_OFFSET64


1079 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1081 #ifde‡
__REDIRECT


1082 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1083 
lockf64
Ë
__wur
;

1085 
	#lockf
 
lockf64


	)

1088 #ifde‡
__USE_LARGEFILE64


1089 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1094 #ifde‡
__USE_GNU


1099 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1100 (
__exãnsi⁄__
 \

1101 ({ 
__ªsu…
; \

1102 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1103 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1104 
__ªsu…
; 
	}
}))

	)

1107 
ssize_t
 
c›y_fûe_ønge
 (
__öfd
, 
__off64_t
 *
__pöoff
,

1108 
__outfd
, 
__off64_t
 *
__poutoff
,

1109 
size_t
 
__Àngth
, 
__Êags
);

1112 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1115 
fd©async
 (
__fûdes
);

1118 #ifde‡
__USE_MISC


1124 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1125 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1128 #ifdef 
__USE_XOPEN


1133 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1134 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1141 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1143 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1146 *
	`cu£rid
 (*
__s
);

1152 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_XOPEN2K


1153 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1154 (*
__∑ª¡
) (),

1155 (*
__chûd
Ë()Ë
__THROW
;

1158 #ifde‡
__USE_MISC


1161 
	$gëíå›y
 (*
__buf„r
, 
size_t
 
__Àngth
Ë
__wur
;

1165 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1166 
	~<bôs/uni°d.h
>

1170 
	~<bôs/uni°d_ext.h
>

1172 
__END_DECLS


	@/usr/include/zlib.h

31 #i‚de‡
ZLIB_H


32 
	#ZLIB_H


	)

34 
	~"zc⁄f.h
"

36 #ifde‡
__˝lu•lus


40 
	#ZLIB_VERSION
 "1.2.11"

	)

41 
	#ZLIB_VERNUM
 0x12b0

	)

42 
	#ZLIB_VER_MAJOR
 1

	)

43 
	#ZLIB_VER_MINOR
 2

	)

44 
	#ZLIB_VER_REVISION
 11

	)

45 
	#ZLIB_VER_SUBREVISION
 0

	)

81 
voidpf
 (*
	tÆloc_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, 
	tuI¡
 
	tôems
, uI¡ 
	tsize
));

82 (*
‰ì_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, voidp‡
	taddªss
));

84 
öã∫Æ_°©e
;

86 
	sz_°ªam_s
 {

87 
z_c⁄°
 
Byãf
 *
√xt_ö
;

88 
uI¡
 
avaû_ö
;

89 
uL⁄g
 
tŸÆ_ö
;

91 
Byãf
 *
√xt_out
;

92 
uI¡
 
avaû_out
;

93 
uL⁄g
 
tŸÆ_out
;

95 
z_c⁄°
 *
msg
;

96 
öã∫Æ_°©e
 
FAR
 *
°©e
;

98 
Æloc_func
 
zÆloc
;

99 
‰ì_func
 
z‰ì
;

100 
voidpf
 
›aque
;

102 
d©a_ty≥
;

104 
uL⁄g
 
adÀr
;

105 
uL⁄g
 
ª£rved
;

106 } 
	tz_°ªam
;

108 
z_°ªam
 
	tFAR
 *
	tz_°ªamp
;

114 
	sgz_hódî_s
 {

115 
ãxt
;

116 
uL⁄g
 
time
;

117 
xÊags
;

118 
os
;

119 
Byãf
 *
exåa
;

120 
uI¡
 
exåa_Àn
;

121 
uI¡
 
exåa_max
;

122 
Byãf
 *
«me
;

123 
uI¡
 
«me_max
;

124 
Byãf
 *
commít
;

125 
uI¡
 
comm_max
;

126 
h¸c
;

127 
d⁄e
;

129 } 
	tgz_hódî
;

131 
gz_hódî
 
	tFAR
 *
	tgz_hódîp
;

168 
	#Z_NO_FLUSH
 0

	)

169 
	#Z_PARTIAL_FLUSH
 1

	)

170 
	#Z_SYNC_FLUSH
 2

	)

171 
	#Z_FULL_FLUSH
 3

	)

172 
	#Z_FINISH
 4

	)

173 
	#Z_BLOCK
 5

	)

174 
	#Z_TREES
 6

	)

177 
	#Z_OK
 0

	)

178 
	#Z_STREAM_END
 1

	)

179 
	#Z_NEED_DICT
 2

	)

180 
	#Z_ERRNO
 (-1)

	)

181 
	#Z_STREAM_ERROR
 (-2)

	)

182 
	#Z_DATA_ERROR
 (-3)

	)

183 
	#Z_MEM_ERROR
 (-4)

	)

184 
	#Z_BUF_ERROR
 (-5)

	)

185 
	#Z_VERSION_ERROR
 (-6)

	)

190 
	#Z_NO_COMPRESSION
 0

	)

191 
	#Z_BEST_SPEED
 1

	)

192 
	#Z_BEST_COMPRESSION
 9

	)

193 
	#Z_DEFAULT_COMPRESSION
 (-1)

	)

196 
	#Z_FILTERED
 1

	)

197 
	#Z_HUFFMAN_ONLY
 2

	)

198 
	#Z_RLE
 3

	)

199 
	#Z_FIXED
 4

	)

200 
	#Z_DEFAULT_STRATEGY
 0

	)

203 
	#Z_BINARY
 0

	)

204 
	#Z_TEXT
 1

	)

205 
	#Z_ASCII
 
Z_TEXT


	)

206 
	#Z_UNKNOWN
 2

	)

209 
	#Z_DEFLATED
 8

	)

212 
	#Z_NULL
 0

	)

214 
	#zlib_vîsi⁄
 
	`zlibVîsi⁄
()

	)

220 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zlibVîsi⁄
 
OF
(());

250 
ZEXTERN
 
ZEXPORT
 
deÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

363 
ZEXTERN
 
ZEXPORT
 
deÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

400 
ZEXTERN
 
ZEXPORT
 
öÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

520 
ZEXTERN
 
ZEXPORT
 
öÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

611 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

612 c⁄° 
Byãf
 *
di˘i⁄¨y
,

613 
uI¡
 
di˘Lígth
));

655 
ZEXTERN
 
ZEXPORT
 
deÊ©eGëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

656 
Byãf
 *
di˘i⁄¨y
,

657 
uI¡
 *
di˘Lígth
));

677 
ZEXTERN
 
ZEXPORT
 
deÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

678 
z_°ªamp
 
sour˚
));

695 
ZEXTERN
 
ZEXPORT
 
deÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

706 
ZEXTERN
 
ZEXPORT
 
deÊ©eP¨ams
 
OF
((
z_°ªamp
 
°rm
,

707 
Àvñ
,

708 
°øãgy
));

744 
ZEXTERN
 
ZEXPORT
 
deÊ©eTu√
 
OF
((
z_°ªamp
 
°rm
,

745 
good_Àngth
,

746 
max_œzy
,

747 
ni˚_Àngth
,

748 
max_chaö
));

761 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
deÊ©eBound
 
OF
((
z_°ªamp
 
°rm
,

762 
uL⁄g
 
sour˚Lí
));

776 
ZEXTERN
 
ZEXPORT
 
deÊ©ePídög
 
OF
((
z_°ªamp
 
°rm
,

777 *
≥ndög
,

778 *
bôs
));

791 
ZEXTERN
 
ZEXPORT
 
deÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

792 
bôs
,

793 
vÆue
));

808 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëHódî
 
OF
((
z_°ªamp
 
°rm
,

809 
gz_hódîp
 
hód
));

885 
ZEXTERN
 
ZEXPORT
 
öÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

886 c⁄° 
Byãf
 *
di˘i⁄¨y
,

887 
uI¡
 
di˘Lígth
));

908 
ZEXTERN
 
ZEXPORT
 
öÊ©eGëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

909 
Byãf
 *
di˘i⁄¨y
,

910 
uI¡
 *
di˘Lígth
));

923 
ZEXTERN
 
ZEXPORT
 
öÊ©eSync
 
OF
((
z_°ªamp
 
°rm
));

942 
ZEXTERN
 
ZEXPORT
 
öÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

943 
z_°ªamp
 
sour˚
));

958 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

968 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t2
 
OF
((
z_°ªamp
 
°rm
,

969 
wödowBôs
));

982 
ZEXTERN
 
ZEXPORT
 
öÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

983 
bôs
,

984 
vÆue
));

1003 
ZEXTERN
 
ZEXPORT
 
öÊ©eM¨k
 
OF
((
z_°ªamp
 
°rm
));

1031 
ZEXTERN
 
ZEXPORT
 
öÊ©eGëHódî
 
OF
((
z_°ªamp
 
°rm
,

1032 
gz_hódîp
 
hód
));

1093 (*
ö_func
Ë
	tOF
((
	tFAR
 *,

1094 
	tz_c⁄°
 
	tFAR
 * FAR *));

1095 (*
out_func
Ë
	tOF
((
	tFAR
 *, FAR *, ));

1097 
ZEXTERN
 
ZEXPORT
 
öÊ©eBack
 
OF
((
z_°ªamp
 
°rm
,

1098 
ö_func
 
ö
, 
FAR
 *
ö_desc
,

1099 
out_func
 
out
, 
FAR
 *
out_desc
));

1167 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackEnd
 
OF
((
z_°ªamp
 
°rm
));

1175 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
zlibCompûeFœgs
 
OF
(());

1216 #i‚de‡
Z_SOLO


1228 
ZEXTERN
 
ZEXPORT
 
com¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1229 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1243 
ZEXTERN
 
ZEXPORT
 
com¥ess2
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1244 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
,

1245 
Àvñ
));

1259 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
com¥essBound
 
OF
((uL⁄g 
sour˚Lí
));

1266 
ZEXTERN
 
ZEXPORT
 
uncom¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1267 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1284 
ZEXTERN
 
ZEXPORT
 
uncom¥ess2
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1285 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 *
sour˚Lí
));

1301 
gzFûe_s
 *
	tgzFûe
;

1341 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gzd›í
 
OF
((
fd
, c⁄° *
mode
));

1364 
ZEXTERN
 
ZEXPORT
 
gzbuf„r
 
OF
((
gzFûe
 
fûe
, 
size
));

1380 
ZEXTERN
 
ZEXPORT
 
gz£ç¨ams
 
OF
((
gzFûe
 
fûe
, 
Àvñ
, 
°øãgy
));

1391 
ZEXTERN
 
ZEXPORT
 
gzªad
 
OF
((
gzFûe
 
fûe
, 
voidp
 
buf
, 
Àn
));

1421 
ZEXTERN
 
z_size_t
 
ZEXPORT
 
gz‰ód
 
OF
((
voidp
 
buf
, z_size_à
size
, z_size_à
nôems
,

1422 
gzFûe
 
fûe
));

1447 
ZEXTERN
 
ZEXPORT
 
gzwrôe
 
OF
((
gzFûe
 
fûe
,

1448 
voidpc
 
buf
, 
Àn
));

1455 
ZEXTERN
 
z_size_t
 
ZEXPORT
 
gzfwrôe
 
OF
((
voidpc
 
buf
, z_size_à
size
,

1456 
z_size_t
 
nôems
, 
gzFûe
 
fûe
));

1469 
ZEXTERN
 
ZEXPORTVA
 
gz¥ötf
 
Z_ARG
((
gzFûe
 
fûe
, c⁄° *
f‹m©
, ...));

1484 
ZEXTERN
 
ZEXPORT
 
gzputs
 
OF
((
gzFûe
 
fûe
, c⁄° *
s
));

1492 
ZEXTERN
 * 
ZEXPORT
 
gzgës
 
OF
((
gzFûe
 
fûe
, *
buf
, 
Àn
));

1505 
ZEXTERN
 
ZEXPORT
 
gzputc
 
OF
((
gzFûe
 
fûe
, 
c
));

1511 
ZEXTERN
 
ZEXPORT
 
gzgëc
 
OF
((
gzFûe
 
fûe
));

1520 
ZEXTERN
 
ZEXPORT
 
gzungëc
 
OF
((
c
, 
gzFûe
 
fûe
));

1532 
ZEXTERN
 
ZEXPORT
 
gzÊush
 
OF
((
gzFûe
 
fûe
, 
Êush
));

1567 
ZEXTERN
 
ZEXPORT
 
gzªwöd
 
OF
((
gzFûe
 
fûe
));

1595 
ZEXTERN
 
ZEXPORT
 
gzeof
 
OF
((
gzFûe
 
fûe
));

1610 
ZEXTERN
 
ZEXPORT
 
gzdúe˘
 
OF
((
gzFûe
 
fûe
));

1631 
ZEXTERN
 
ZEXPORT
 
gz˛o£
 
OF
((
gzFûe
 
fûe
));

1644 
ZEXTERN
 
ZEXPORT
 
gz˛o£_r
 
OF
((
gzFûe
 
fûe
));

1645 
ZEXTERN
 
ZEXPORT
 
gz˛o£_w
 
OF
((
gzFûe
 
fûe
));

1656 
ZEXTERN
 c⁄° * 
ZEXPORT
 
gzîr‹
 
OF
((
gzFûe
 
fûe
, *
î∫um
));

1672 
ZEXTERN
 
ZEXPORT
 
gz˛óªº
 
OF
((
gzFûe
 
fûe
));

1689 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32
 
OF
((uL⁄g 
adÀr
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1708 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_z
 
OF
((uL⁄g 
adÀr
, c⁄° 
Byãf
 *
buf
,

1709 
z_size_t
 
Àn
));

1726 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32
 
OF
((uL⁄g 
¸c
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1743 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_z
 
OF
((uL⁄g 
adÀr
, c⁄° 
Byãf
 *
buf
,

1744 
z_size_t
 
Àn
));

1765 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
,

1766 c⁄° *
vîsi⁄
, 
°ªam_size
));

1767 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
,

1768 c⁄° *
vîsi⁄
, 
°ªam_size
));

1769 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
, 
mëhod
,

1770 
wödowBôs
, 
memLevñ
,

1771 
°øãgy
, c⁄° *
vîsi⁄
,

1772 
°ªam_size
));

1773 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1774 c⁄° *
vîsi⁄
, 
°ªam_size
));

1775 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackInô_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1776 
FAR
 *
wödow
,

1777 c⁄° *
vîsi⁄
,

1778 
°ªam_size
));

1779 #ifde‡
Z_PREFIX_SET


1780 
	#z_deÊ©eInô
(
°rm
, 
Àvñ
) \

1781 
	`deÊ©eInô_
((
°rm
), (
Àvñ
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1782 
	#z_öÊ©eInô
(
°rm
) \

1783 
	`öÊ©eInô_
((
°rm
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1784 
	#z_deÊ©eInô2
(
°rm
, 
Àvñ
, 
mëhod
, 
wödowBôs
, 
memLevñ
, 
°øãgy
) \

1785 
	`deÊ©eInô2_
((
°rm
),(
Àvñ
),(
mëhod
),(
wödowBôs
),(
memLevñ
),\

1786 (
°øãgy
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1787 
	#z_öÊ©eInô2
(
°rm
, 
wödowBôs
) \

1788 
	`öÊ©eInô2_
((
°rm
), (
wödowBôs
), 
ZLIB_VERSION
, \

1789 ()(
z_°ªam
))

	)

1790 
	#z_öÊ©eBackInô
(
°rm
, 
wödowBôs
, 
wödow
) \

1791 
	`öÊ©eBackInô_
((
°rm
), (
wödowBôs
), (
wödow
), \

1792 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1794 
	#deÊ©eInô
(
°rm
, 
Àvñ
) \

1795 
	`deÊ©eInô_
((
°rm
), (
Àvñ
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1796 
	#öÊ©eInô
(
°rm
) \

1797 
	`öÊ©eInô_
((
°rm
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1798 
	#deÊ©eInô2
(
°rm
, 
Àvñ
, 
mëhod
, 
wödowBôs
, 
memLevñ
, 
°øãgy
) \

1799 
	`deÊ©eInô2_
((
°rm
),(
Àvñ
),(
mëhod
),(
wödowBôs
),(
memLevñ
),\

1800 (
°øãgy
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1801 
	#öÊ©eInô2
(
°rm
, 
wödowBôs
) \

1802 
	`öÊ©eInô2_
((
°rm
), (
wödowBôs
), 
ZLIB_VERSION
, \

1803 ()(
z_°ªam
))

	)

1804 
	#öÊ©eBackInô
(
°rm
, 
wödowBôs
, 
wödow
) \

1805 
	`öÊ©eBackInô_
((
°rm
), (
wödowBôs
), (
wödow
), \

1806 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1809 #i‚de‡
Z_SOLO


1818 
	sgzFûe_s
 {

1819 
have
;

1820 *
√xt
;

1821 
z_off64_t
 
pos
;

1823 
ZEXTERN
 
ZEXPORT
 
gzgëc_
 
OF
((
gzFûe
 
fûe
));

1824 #ifde‡
Z_PREFIX_SET


1825 #unde‡
z_gzgëc


1826 
	#z_gzgëc
(
g
) \

1827 ((
g
)->
have
 ? ((g)->have--, (g)->
pos
++, *((g)->
√xt
)++Ë: (
gzgëc
)(g))

	)

1829 
	#gzgëc
(
g
) \

1830 ((
g
)->
have
 ? ((g)->have--, (g)->
pos
++, *((g)->
√xt
)++Ë: (
gzgëc
)(g))

	)

1839 #ifde‡
Z_LARGE64


1840 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1841 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, z_off64_t, ));

1842 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1843 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gzoff£t64
 
OF
((
gzFûe
));

1844 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off64_t
));

1845 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off64_t
));

1848 #i‡!
deföed
(
ZLIB_INTERNAL
Ë&& deföed(
Z_WANT64
)

1849 #ifde‡
Z_PREFIX_SET


1850 
	#z_gz›í
 
z_gz›í64


	)

1851 
	#z_gz£ek
 
z_gz£ek64


	)

1852 
	#z_gzãŒ
 
z_gzãŒ64


	)

1853 
	#z_gzoff£t
 
z_gzoff£t64


	)

1854 
	#z_adÀr32_comböe
 
z_adÀr32_comböe64


	)

1855 
	#z_¸c32_comböe
 
z_¸c32_comböe64


	)

1857 
	#gz›í
 
gz›í64


	)

1858 
	#gz£ek
 
gz£ek64


	)

1859 
	#gzãŒ
 
gzãŒ64


	)

1860 
	#gzoff£t
 
gzoff£t64


	)

1861 
	#adÀr32_comböe
 
adÀr32_comböe64


	)

1862 
	#¸c32_comböe
 
¸c32_comböe64


	)

1864 #i‚de‡
Z_LARGE64


1865 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1866 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, z_off_t, ));

1867 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1868 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzoff£t64
 
OF
((
gzFûe
));

1869 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1870 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1873 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í
 
OF
((const *, const *));

1874 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek
 
OF
((
gzFûe
, z_off_t, ));

1875 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ
 
OF
((
gzFûe
));

1876 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzoff£t
 
OF
((
gzFûe
));

1877 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1878 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1883 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1884 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1889 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zEº‹
 
OF
(());

1890 
ZEXTERN
 
ZEXPORT
 
öÊ©eSyncPoöt
 
OF
((
z_°ªamp
));

1891 
ZEXTERN
 c⁄° 
z_¸c_t
 
FAR
 * 
ZEXPORT
 
gë_¸c_èbÀ
 
OF
(());

1892 
ZEXTERN
 
ZEXPORT
 
öÊ©eUndîmöe
 
OF
((
z_°ªamp
, ));

1893 
ZEXTERN
 
ZEXPORT
 
öÊ©eVÆid©e
 
OF
((
z_°ªamp
, ));

1894 
ZEXTERN
 
ZEXPORT
 
öÊ©eCodesU£d
 
OF
 ((
z_°ªamp
));

1895 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£tKìp
 
OF
((
z_°ªamp
));

1896 
ZEXTERN
 
ZEXPORT
 
deÊ©eRe£tKìp
 
OF
((
z_°ªamp
));

1897 #i‡(
deföed
(
_WIN32
Ë|| deföed(
__CYGWIN__
)Ë&& !deföed(
Z_SOLO
)

1898 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í_w
 
OF
((c⁄° 
wch¨_t
 *
∑th
,

1899 c⁄° *
mode
));

1901 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

1902 #i‚de‡
Z_SOLO


1903 
ZEXTERN
 
ZEXPORTVA
 
gzv¥ötf
 
Z_ARG
((
gzFûe
 
fûe
,

1904 c⁄° *
f‹m©
,

1905 
va_li°
 
va
));

1909 #ifde‡
__˝lu•lus


	@/usr/include/asm-generic/hugetlb_encode.h

1 #i‚de‡
_ASM_GENERIC_HUGETLB_ENCODE_H_


2 
	#_ASM_GENERIC_HUGETLB_ENCODE_H_


	)

20 
	#HUGETLB_FLAG_ENCODE_SHIFT
 26

	)

21 
	#HUGETLB_FLAG_ENCODE_MASK
 0x3f

	)

23 
	#HUGETLB_FLAG_ENCODE_64KB
 (16 << 
HUGETLB_FLAG_ENCODE_SHIFT
)

	)

24 
	#HUGETLB_FLAG_ENCODE_512KB
 (19 << 
HUGETLB_FLAG_ENCODE_SHIFT
)

	)

25 
	#HUGETLB_FLAG_ENCODE_1MB
 (20 << 
HUGETLB_FLAG_ENCODE_SHIFT
)

	)

26 
	#HUGETLB_FLAG_ENCODE_2MB
 (21 << 
HUGETLB_FLAG_ENCODE_SHIFT
)

	)

27 
	#HUGETLB_FLAG_ENCODE_8MB
 (23 << 
HUGETLB_FLAG_ENCODE_SHIFT
)

	)

28 
	#HUGETLB_FLAG_ENCODE_16MB
 (24 << 
HUGETLB_FLAG_ENCODE_SHIFT
)

	)

29 
	#HUGETLB_FLAG_ENCODE_32MB
 (25 << 
HUGETLB_FLAG_ENCODE_SHIFT
)

	)

30 
	#HUGETLB_FLAG_ENCODE_256MB
 (28 << 
HUGETLB_FLAG_ENCODE_SHIFT
)

	)

31 
	#HUGETLB_FLAG_ENCODE_512MB
 (29 << 
HUGETLB_FLAG_ENCODE_SHIFT
)

	)

32 
	#HUGETLB_FLAG_ENCODE_1GB
 (30 << 
HUGETLB_FLAG_ENCODE_SHIFT
)

	)

33 
	#HUGETLB_FLAG_ENCODE_2GB
 (31 << 
HUGETLB_FLAG_ENCODE_SHIFT
)

	)

34 
	#HUGETLB_FLAG_ENCODE_16GB
 (34 << 
HUGETLB_FLAG_ENCODE_SHIFT
)

	)

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

24 
	~<bôs/ídün.h
>

26 #ifde‡
__USE_MISC


27 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

28 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

29 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

30 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

33 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


35 
	~<bôs/byãsw≠.h
>

36 
	~<bôs/uöä-idítôy.h
>

38 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


39 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

40 
	#htﬁe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

41 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

42 
	#À16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

44 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

45 
	#htﬁe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

46 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

47 
	#À32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

49 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

50 
	#htﬁe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

51 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

52 
	#À64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

55 
	#htobe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

56 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

57 
	#be16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

58 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

60 
	#htobe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

61 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

62 
	#be32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

63 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

65 
	#htobe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

66 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

67 
	#be64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

68 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/linux/errno.h

1 
	~<asm/î∫o.h
>

	@/usr/include/linux/fscrypt.h

8 #i‚de‡
_LINUX_FSCRYPT_H


9 
	#_LINUX_FSCRYPT_H


	)

11 
	~<löux/ty≥s.h
>

14 
	#FSCRYPT_POLICY_FLAGS_PAD_4
 0x00

	)

15 
	#FSCRYPT_POLICY_FLAGS_PAD_8
 0x01

	)

16 
	#FSCRYPT_POLICY_FLAGS_PAD_16
 0x02

	)

17 
	#FSCRYPT_POLICY_FLAGS_PAD_32
 0x03

	)

18 
	#FSCRYPT_POLICY_FLAGS_PAD_MASK
 0x03

	)

19 
	#FSCRYPT_POLICY_FLAG_DIRECT_KEY
 0x04

	)

22 
	#FSCRYPT_MODE_AES_256_XTS
 1

	)

23 
	#FSCRYPT_MODE_AES_256_CTS
 4

	)

24 
	#FSCRYPT_MODE_AES_128_CBC
 5

	)

25 
	#FSCRYPT_MODE_AES_128_CTS
 6

	)

26 
	#FSCRYPT_MODE_ADIANTUM
 9

	)

35 
	#FSCRYPT_POLICY_V1
 0

	)

36 
	#FSCRYPT_KEY_DESCRIPTOR_SIZE
 8

	)

37 
	sfs¸y±_pﬁicy_v1
 {

38 
__u8
 
	mvîsi⁄
;

39 
__u8
 
	mc⁄ã¡s_í¸y±i⁄_mode
;

40 
__u8
 
	mfûíames_í¸y±i⁄_mode
;

41 
__u8
 
	mÊags
;

42 
__u8
 
	mma°î_key_des¸ùt‹
[
FSCRYPT_KEY_DESCRIPTOR_SIZE
];

44 
	#fs¸y±_pﬁicy
 
fs¸y±_pﬁicy_v1


	)

50 
	#FSCRYPT_KEY_DESC_PREFIX
 "fs¸y±:"

	)

51 
	#FSCRYPT_KEY_DESC_PREFIX_SIZE
 8

	)

52 
	#FSCRYPT_MAX_KEY_SIZE
 64

	)

53 
	sfs¸y±_key
 {

54 
__u32
 
	mmode
;

55 
__u8
 
	møw
[
FSCRYPT_MAX_KEY_SIZE
];

56 
__u32
 
	msize
;

62 
	#FSCRYPT_POLICY_V2
 2

	)

63 
	#FSCRYPT_KEY_IDENTIFIER_SIZE
 16

	)

64 
	sfs¸y±_pﬁicy_v2
 {

65 
__u8
 
	mvîsi⁄
;

66 
__u8
 
	mc⁄ã¡s_í¸y±i⁄_mode
;

67 
__u8
 
	mfûíames_í¸y±i⁄_mode
;

68 
__u8
 
	mÊags
;

69 
__u8
 
	m__ª£rved
[4];

70 
__u8
 
	mma°î_key_idítifõr
[
FSCRYPT_KEY_IDENTIFIER_SIZE
];

74 
	sfs¸y±_gë_pﬁicy_ex_¨g
 {

75 
__u64
 
	mpﬁicy_size
;

77 
__u8
 
	mvîsi⁄
;

78 
fs¸y±_pﬁicy_v1
 
	mv1
;

79 
fs¸y±_pﬁicy_v2
 
	mv2
;

80 } 
	mpﬁicy
;

87 
	#FSCRYPT_KEY_SPEC_TYPE_DESCRIPTOR
 1

	)

94 
	#FSCRYPT_KEY_SPEC_TYPE_IDENTIFIER
 2

	)

100 
	sfs¸y±_key_•ecifõr
 {

101 
__u32
 
	mty≥
;

102 
__u32
 
	m__ª£rved
;

104 
__u8
 
	m__ª£rved
[32];

105 
__u8
 
	mdes¸ùt‹
[
FSCRYPT_KEY_DESCRIPTOR_SIZE
];

106 
__u8
 
	midítifõr
[
FSCRYPT_KEY_IDENTIFIER_SIZE
];

107 } 
	mu
;

111 
	sfs¸y±_add_key_¨g
 {

112 
fs¸y±_key_•ecifõr
 
	mkey_•ec
;

113 
__u32
 
	møw_size
;

114 
__u32
 
	m__ª£rved
[9];

115 
__u8
 
	møw
[];

119 
	sfs¸y±_ªmove_key_¨g
 {

120 
fs¸y±_key_•ecifõr
 
	mkey_•ec
;

121 
	#FSCRYPT_KEY_REMOVAL_STATUS_FLAG_FILES_BUSY
 0x00000001

	)

122 
	#FSCRYPT_KEY_REMOVAL_STATUS_FLAG_OTHER_USERS
 0x00000002

	)

123 
__u32
 
	mªmovÆ_°©us_Êags
;

124 
__u32
 
	m__ª£rved
[5];

128 
	sfs¸y±_gë_key_°©us_¨g
 {

130 
fs¸y±_key_•ecifõr
 
	mkey_•ec
;

131 
__u32
 
	m__ª£rved
[6];

134 
	#FSCRYPT_KEY_STATUS_ABSENT
 1

	)

135 
	#FSCRYPT_KEY_STATUS_PRESENT
 2

	)

136 
	#FSCRYPT_KEY_STATUS_INCOMPLETELY_REMOVED
 3

	)

137 
__u32
 
	m°©us
;

138 
	#FSCRYPT_KEY_STATUS_FLAG_ADDED_BY_SELF
 0x00000001

	)

139 
__u32
 
	m°©us_Êags
;

140 
__u32
 
	mu£r_cou¡
;

141 
__u32
 
	m__out_ª£rved
[13];

144 
	#FS_IOC_SET_ENCRYPTION_POLICY
 
	`_IOR
('f', 19, 
fs¸y±_pﬁicy
)

	)

145 
	#FS_IOC_GET_ENCRYPTION_PWSALT
 
	`_IOW
('f', 20, 
__u8
[16])

	)

146 
	#FS_IOC_GET_ENCRYPTION_POLICY
 
	`_IOW
('f', 21, 
fs¸y±_pﬁicy
)

	)

147 
	#FS_IOC_GET_ENCRYPTION_POLICY_EX
 
	`_IOWR
('f', 22, 
__u8
[9]Ë

	)

148 
	#FS_IOC_ADD_ENCRYPTION_KEY
 
	`_IOWR
('f', 23, 
fs¸y±_add_key_¨g
)

	)

149 
	#FS_IOC_REMOVE_ENCRYPTION_KEY
 
	`_IOWR
('f', 24, 
fs¸y±_ªmove_key_¨g
)

	)

150 
	#FS_IOC_REMOVE_ENCRYPTION_KEY_ALL_USERS
 
	`_IOWR
('f', 25, 
fs¸y±_ªmove_key_¨g
)

	)

151 
	#FS_IOC_GET_ENCRYPTION_KEY_STATUS
 
	`_IOWR
('f', 26, 
fs¸y±_gë_key_°©us_¨g
)

	)

156 
	#FS_KEY_DESCRIPTOR_SIZE
 
FSCRYPT_KEY_DESCRIPTOR_SIZE


	)

157 
	#FS_POLICY_FLAGS_PAD_4
 
FSCRYPT_POLICY_FLAGS_PAD_4


	)

158 
	#FS_POLICY_FLAGS_PAD_8
 
FSCRYPT_POLICY_FLAGS_PAD_8


	)

159 
	#FS_POLICY_FLAGS_PAD_16
 
FSCRYPT_POLICY_FLAGS_PAD_16


	)

160 
	#FS_POLICY_FLAGS_PAD_32
 
FSCRYPT_POLICY_FLAGS_PAD_32


	)

161 
	#FS_POLICY_FLAGS_PAD_MASK
 
FSCRYPT_POLICY_FLAGS_PAD_MASK


	)

162 
	#FS_POLICY_FLAG_DIRECT_KEY
 
FSCRYPT_POLICY_FLAG_DIRECT_KEY


	)

163 
	#FS_POLICY_FLAGS_VALID
 0x07

	)

164 
	#FS_ENCRYPTION_MODE_INVALID
 0

	)

165 
	#FS_ENCRYPTION_MODE_AES_256_XTS
 
FSCRYPT_MODE_AES_256_XTS


	)

166 
	#FS_ENCRYPTION_MODE_AES_256_GCM
 2

	)

167 
	#FS_ENCRYPTION_MODE_AES_256_CBC
 3

	)

168 
	#FS_ENCRYPTION_MODE_AES_256_CTS
 
FSCRYPT_MODE_AES_256_CTS


	)

169 
	#FS_ENCRYPTION_MODE_AES_128_CBC
 
FSCRYPT_MODE_AES_128_CBC


	)

170 
	#FS_ENCRYPTION_MODE_AES_128_CTS
 
FSCRYPT_MODE_AES_128_CTS


	)

171 
	#FS_ENCRYPTION_MODE_SPECK128_256_XTS
 7

	)

172 
	#FS_ENCRYPTION_MODE_SPECK128_256_CTS
 8

	)

173 
	#FS_ENCRYPTION_MODE_ADIANTUM
 
FSCRYPT_MODE_ADIANTUM


	)

174 
	#FS_KEY_DESC_PREFIX
 
FSCRYPT_KEY_DESC_PREFIX


	)

175 
	#FS_KEY_DESC_PREFIX_SIZE
 
FSCRYPT_KEY_DESC_PREFIX_SIZE


	)

176 
	#FS_MAX_KEY_SIZE
 
FSCRYPT_MAX_KEY_SIZE


	)

	@/usr/include/linux/ioctl.h

2 #i‚de‡
_LINUX_IOCTL_H


3 
	#_LINUX_IOCTL_H


	)

5 
	~<asm/io˘l.h
>

	@/usr/include/linux/ipc.h

2 #i‚de‡
_LINUX_IPC_H


3 
	#_LINUX_IPC_H


	)

5 
	~<löux/ty≥s.h
>

7 
	#IPC_PRIVATE
 ((
__kî√l_key_t
Ë0)

	)

10 
	sùc_≥rm


12 
__kî√l_key_t
 
	mkey
;

13 
__kî√l_uid_t
 
	muid
;

14 
__kî√l_gid_t
 
	mgid
;

15 
__kî√l_uid_t
 
	mcuid
;

16 
__kî√l_gid_t
 
	mcgid
;

17 
__kî√l_mode_t
 
	mmode
;

18 
	m£q
;

22 
	~<asm/ùcbuf.h
>

25 
	#IPC_CREAT
 00001000

	)

26 
	#IPC_EXCL
 00002000

	)

27 
	#IPC_NOWAIT
 00004000

	)

32 
	#IPC_DIPC
 00010000

	)

33 
	#IPC_OWN
 00020000

	)

39 
	#IPC_RMID
 0

	)

40 
	#IPC_SET
 1

	)

41 
	#IPC_STAT
 2

	)

42 
	#IPC_INFO
 3

	)

48 
	#IPC_OLD
 0

	)

50 
	#IPC_64
 0x0100

	)

58 
	sùc_kludge
 {

59 
msgbuf
 *
	mmsgp
;

60 
	mmsgtyp
;

63 
	#SEMOP
 1

	)

64 
	#SEMGET
 2

	)

65 
	#SEMCTL
 3

	)

66 
	#SEMTIMEDOP
 4

	)

67 
	#MSGSND
 11

	)

68 
	#MSGRCV
 12

	)

69 
	#MSGGET
 13

	)

70 
	#MSGCTL
 14

	)

71 
	#SHMAT
 21

	)

72 
	#SHMDT
 22

	)

73 
	#SHMGET
 23

	)

74 
	#SHMCTL
 24

	)

77 
	#DIPC
 25

	)

79 
	#IPCCALL
(
vîsi⁄
,
›
Ë((vîsi⁄)<<16 | (›))

	)

	@/usr/include/linux/mount.h

1 #i‚de‡
_LINUX_MOUNT_H


2 
	#_LINUX_MOUNT_H


	)

11 
	#MS_RDONLY
 1

	)

12 
	#MS_NOSUID
 2

	)

13 
	#MS_NODEV
 4

	)

14 
	#MS_NOEXEC
 8

	)

15 
	#MS_SYNCHRONOUS
 16

	)

16 
	#MS_REMOUNT
 32

	)

17 
	#MS_MANDLOCK
 64

	)

18 
	#MS_DIRSYNC
 128

	)

19 
	#MS_NOATIME
 1024

	)

20 
	#MS_NODIRATIME
 2048

	)

21 
	#MS_BIND
 4096

	)

22 
	#MS_MOVE
 8192

	)

23 
	#MS_REC
 16384

	)

24 
	#MS_VERBOSE
 32768

	)

26 
	#MS_SILENT
 32768

	)

27 
	#MS_POSIXACL
 (1<<16Ë

	)

28 
	#MS_UNBINDABLE
 (1<<17Ë

	)

29 
	#MS_PRIVATE
 (1<<18Ë

	)

30 
	#MS_SLAVE
 (1<<19Ë

	)

31 
	#MS_SHARED
 (1<<20Ë

	)

32 
	#MS_RELATIME
 (1<<21Ë

	)

33 
	#MS_KERNMOUNT
 (1<<22Ë

	)

34 
	#MS_I_VERSION
 (1<<23Ë

	)

35 
	#MS_STRICTATIME
 (1<<24Ë

	)

36 
	#MS_LAZYTIME
 (1<<25Ë

	)

39 
	#MS_SUBMOUNT
 (1<<26)

	)

40 
	#MS_NOREMOTELOCK
 (1<<27)

	)

41 
	#MS_NOSEC
 (1<<28)

	)

42 
	#MS_BORN
 (1<<29)

	)

43 
	#MS_ACTIVE
 (1<<30)

	)

44 
	#MS_NOUSER
 (1<<31)

	)

49 
	#MS_RMT_MASK
 (
MS_RDONLY
|
MS_SYNCHRONOUS
|
MS_MANDLOCK
|
MS_I_VERSION
|\

50 
MS_LAZYTIME
)

	)

55 
	#MS_MGC_VAL
 0xC0ED0000

	)

56 
	#MS_MGC_MSK
 0xffff0000

	)

61 
	#OPEN_TREE_CLONE
 1

	)

62 
	#OPEN_TREE_CLOEXEC
 
O_CLOEXEC


	)

67 
	#MOVE_MOUNT_F_SYMLINKS
 0x00000001

	)

68 
	#MOVE_MOUNT_F_AUTOMOUNTS
 0x00000002

	)

69 
	#MOVE_MOUNT_F_EMPTY_PATH
 0x00000004

	)

70 
	#MOVE_MOUNT_T_SYMLINKS
 0x00000010

	)

71 
	#MOVE_MOUNT_T_AUTOMOUNTS
 0x00000020

	)

72 
	#MOVE_MOUNT_T_EMPTY_PATH
 0x00000040

	)

73 
	#MOVE_MOUNT__MASK
 0x00000077

	)

78 
	#FSOPEN_CLOEXEC
 0x00000001

	)

83 
	#FSPICK_CLOEXEC
 0x00000001

	)

84 
	#FSPICK_SYMLINK_NOFOLLOW
 0x00000002

	)

85 
	#FSPICK_NO_AUTOMOUNT
 0x00000004

	)

86 
	#FSPICK_EMPTY_PATH
 0x00000008

	)

91 
	efsc⁄fig_comm™d
 {

92 
	mFSCONFIG_SET_FLAG
 = 0,

93 
	mFSCONFIG_SET_STRING
 = 1,

94 
	mFSCONFIG_SET_BINARY
 = 2,

95 
	mFSCONFIG_SET_PATH
 = 3,

96 
	mFSCONFIG_SET_PATH_EMPTY
 = 4,

97 
	mFSCONFIG_SET_FD
 = 5,

98 
	mFSCONFIG_CMD_CREATE
 = 6,

99 
	mFSCONFIG_CMD_RECONFIGURE
 = 7,

105 
	#FSMOUNT_CLOEXEC
 0x00000001

	)

110 
	#MOUNT_ATTR_RDONLY
 0x00000001

	)

111 
	#MOUNT_ATTR_NOSUID
 0x00000002

	)

112 
	#MOUNT_ATTR_NODEV
 0x00000004

	)

113 
	#MOUNT_ATTR_NOEXEC
 0x00000008

	)

114 
	#MOUNT_ATTR__ATIME
 0x00000070

	)

115 
	#MOUNT_ATTR_RELATIME
 0x00000000

	)

116 
	#MOUNT_ATTR_NOATIME
 0x00000010

	)

117 
	#MOUNT_ATTR_STRICTATIME
 0x00000020

	)

118 
	#MOUNT_ATTR_NODIRATIME
 0x00000080

	)

	@/usr/include/linux/posix_types.h

2 #i‚de‡
_LINUX_POSIX_TYPES_H


3 
	#_LINUX_POSIX_TYPES_H


	)

5 
	~<löux/°ddef.h
>

22 #unde‡
__FD_SETSIZE


23 
	#__FD_SETSIZE
 1024

	)

26 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

27 } 
	t__kî√l_fd_£t
;

30 (*
	t__kî√l_sigh™dÀr_t
)();

33 
	t__kî√l_key_t
;

34 
	t__kî√l_mqd_t
;

36 
	~<asm/posix_ty≥s.h
>

	@/usr/include/mtd/mtd-abi.h

21 #i‚de‡
__MTD_ABI_H__


22 
	#__MTD_ABI_H__


	)

24 
	~<löux/ty≥s.h
>

26 
	sîa£_öfo_u£r
 {

27 
__u32
 
	m°¨t
;

28 
__u32
 
	mÀngth
;

31 
	sîa£_öfo_u£r64
 {

32 
__u64
 
	m°¨t
;

33 
__u64
 
	mÀngth
;

36 
	smtd_oob_buf
 {

37 
__u32
 
	m°¨t
;

38 
__u32
 
	mÀngth
;

39 *
	m±r
;

42 
	smtd_oob_buf64
 {

43 
__u64
 
	m°¨t
;

44 
__u32
 
	m∑d
;

45 
__u32
 
	mÀngth
;

46 
__u64
 
	mu§_±r
;

63 
	mMTD_OPS_PLACE_OOB
 = 0,

64 
	mMTD_OPS_AUTO_OOB
 = 1,

65 
	mMTD_OPS_RAW
 = 2,

84 
	smtd_wrôe_ªq
 {

85 
__u64
 
	m°¨t
;

86 
__u64
 
	mÀn
;

87 
__u64
 
	moobÀn
;

88 
__u64
 
	mu§_d©a
;

89 
__u64
 
	mu§_oob
;

90 
__u8
 
	mmode
;

91 
__u8
 
	m∑ddög
[7];

94 
	#MTD_ABSENT
 0

	)

95 
	#MTD_RAM
 1

	)

96 
	#MTD_ROM
 2

	)

97 
	#MTD_NORFLASH
 3

	)

98 
	#MTD_NANDFLASH
 4

	)

99 
	#MTD_DATAFLASH
 6

	)

100 
	#MTD_UBIVOLUME
 7

	)

101 
	#MTD_MLCNANDFLASH
 8

	)

103 
	#MTD_WRITEABLE
 0x400

	)

104 
	#MTD_BIT_WRITEABLE
 0x800

	)

105 
	#MTD_NO_ERASE
 0x1000

	)

106 
	#MTD_POWERUP_LOCK
 0x2000

	)

109 
	#MTD_CAP_ROM
 0

	)

110 
	#MTD_CAP_RAM
 (
MTD_WRITEABLE
 | 
MTD_BIT_WRITEABLE
 | 
MTD_NO_ERASE
)

	)

111 
	#MTD_CAP_NORFLASH
 (
MTD_WRITEABLE
 | 
MTD_BIT_WRITEABLE
)

	)

112 
	#MTD_CAP_NANDFLASH
 (
MTD_WRITEABLE
)

	)

113 
	#MTD_CAP_NVRAM
 (
MTD_WRITEABLE
 | 
MTD_BIT_WRITEABLE
 | 
MTD_NO_ERASE
)

	)

116 
	#MTD_NANDECC_OFF
 0

	)

117 
	#MTD_NANDECC_PLACE
 1

	)

118 
	#MTD_NANDECC_AUTOPLACE
 2

	)

119 
	#MTD_NANDECC_PLACEONLY
 3

	)

120 
	#MTD_NANDECC_AUTOPL_USR
 4

	)

123 
	#MTD_OTP_OFF
 0

	)

124 
	#MTD_OTP_FACTORY
 1

	)

125 
	#MTD_OTP_USER
 2

	)

127 
	smtd_öfo_u£r
 {

128 
__u8
 
	mty≥
;

129 
__u32
 
	mÊags
;

130 
__u32
 
	msize
;

131 
__u32
 
	mîa£size
;

132 
__u32
 
	mwrôesize
;

133 
__u32
 
	moobsize
;

134 
__u64
 
	m∑ddög
;

137 
	sªgi⁄_öfo_u£r
 {

138 
__u32
 
	moff£t
;

140 
__u32
 
	mîa£size
;

141 
__u32
 
	mnumblocks
;

142 
__u32
 
	mªgi⁄ödex
;

145 
	sŸp_öfo
 {

146 
__u32
 
	m°¨t
;

147 
__u32
 
	mÀngth
;

148 
__u32
 
	mlocked
;

158 
	#MEMGETINFO
 
	`_IOR
('M', 1, 
mtd_öfo_u£r
)

	)

160 
	#MEMERASE
 
	`_IOW
('M', 2, 
îa£_öfo_u£r
)

	)

162 
	#MEMWRITEOOB
 
	`_IOWR
('M', 3, 
mtd_oob_buf
)

	)

164 
	#MEMREADOOB
 
	`_IOWR
('M', 4, 
mtd_oob_buf
)

	)

166 
	#MEMLOCK
 
	`_IOW
('M', 5, 
îa£_öfo_u£r
)

	)

168 
	#MEMUNLOCK
 
	`_IOW
('M', 6, 
îa£_öfo_u£r
)

	)

170 
	#MEMGETREGIONCOUNT
 
	`_IOR
('M', 7, )

	)

172 
	#MEMGETREGIONINFO
 
	`_IOWR
('M', 8, 
ªgi⁄_öfo_u£r
)

	)

174 
	#MEMGETOOBSEL
 
	`_IOR
('M', 10, 
«nd_ooböfo
)

	)

176 
	#MEMGETBADBLOCK
 
	`_IOW
('M', 11, 
__kî√l_loff_t
)

	)

178 
	#MEMSETBADBLOCK
 
	`_IOW
('M', 12, 
__kî√l_loff_t
)

	)

180 
	#OTPSELECT
 
	`_IOR
('M', 13, )

	)

182 
	#OTPGETREGIONCOUNT
 
	`_IOW
('M', 14, )

	)

184 
	#OTPGETREGIONINFO
 
	`_IOW
('M', 15, 
Ÿp_öfo
)

	)

186 
	#OTPLOCK
 
	`_IOR
('M', 16, 
Ÿp_öfo
)

	)

188 
	#ECCGETLAYOUT
 
	`_IOR
('M', 17, 
«nd_ec˛ayout_u£r
)

	)

190 
	#ECCGETSTATS
 
	`_IOR
('M', 18, 
mtd_ecc_°©s
)

	)

192 
	#MTDFILEMODE
 
	`_IO
('M', 19)

	)

194 
	#MEMERASE64
 
	`_IOW
('M', 20, 
îa£_öfo_u£r64
)

	)

196 
	#MEMWRITEOOB64
 
	`_IOWR
('M', 21, 
mtd_oob_buf64
)

	)

198 
	#MEMREADOOB64
 
	`_IOWR
('M', 22, 
mtd_oob_buf64
)

	)

200 
	#MEMISLOCKED
 
	`_IOR
('M', 23, 
îa£_öfo_u£r
)

	)

206 
	#MEMWRITE
 
	`_IOWR
('M', 24, 
mtd_wrôe_ªq
)

	)

212 
	s«nd_ooböfo
 {

213 
__u32
 
	mu£ecc
;

214 
__u32
 
	meccbyãs
;

215 
__u32
 
	moob‰ì
[8][2];

216 
__u32
 
	mec˝os
[32];

219 
	s«nd_oob‰ì
 {

220 
__u32
 
	moff£t
;

221 
__u32
 
	mÀngth
;

224 
	#MTD_MAX_OOBFREE_ENTRIES
 8

	)

225 
	#MTD_MAX_ECCPOS_ENTRIES
 64

	)

234 
	s«nd_ec˛ayout_u£r
 {

235 
__u32
 
	meccbyãs
;

236 
__u32
 
	mec˝os
[
MTD_MAX_ECCPOS_ENTRIES
];

237 
__u32
 
	moobavaû
;

238 
«nd_oob‰ì
 
	moob‰ì
[
MTD_MAX_OOBFREE_ENTRIES
];

249 
	smtd_ecc_°©s
 {

250 
__u32
 
	mc‹ª˘ed
;

251 
__u32
 
	mÁûed
;

252 
__u32
 
	mbadblocks
;

253 
__u32
 
	mbbtblocks
;

273 
	emtd_fûe_modes
 {

274 
	mMTD_FILE_MODE_NORMAL
 = 
MTD_OTP_OFF
,

275 
	mMTD_FILE_MODE_OTP_FACTORY
 = 
MTD_OTP_FACTORY
,

276 
	mMTD_FILE_MODE_OTP_USER
 = 
MTD_OTP_USER
,

277 
	mMTD_FILE_MODE_RAW
,

280 
__ölöe__
 
	$mtd_ty≥_is_«nd_u£r
(c⁄° 
mtd_öfo_u£r
 *
mtd
)

282  
mtd
->
ty≥
 =
MTD_NANDFLASH
 || mtd->ty≥ =
MTD_MLCNANDFLASH
;

283 
	}
}

	@/usr/include/openssl/e_os2.h

10 #i‚de‡
HEADER_E_OS2_H


11 
	#HEADER_E_OS2_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

15 #ifde‡ 
__˝lu•lus


25 
	#OPENSSL_SYS_UNIX


	)

33 #i‡
deföed
(
OPENSSL_SYS_MSDOS
)

34 #unde‡
OPENSSL_SYS_UNIX


45 #i‡
deföed
(
OPENSSL_SYS_UEFI
)

46 #unde‡
OPENSSL_SYS_UNIX


47 #ñi‡
deföed
(
OPENSSL_SYS_UWIN
)

48 #unde‡
OPENSSL_SYS_UNIX


49 
	#OPENSSL_SYS_WIN32_UWIN


	)

51 #i‡
deföed
(
__CYGWIN__
Ë|| deföed(
OPENSSL_SYS_CYGWIN
)

52 
	#OPENSSL_SYS_WIN32_CYGWIN


	)

54 #i‡
deföed
(
_WIN32
Ë|| deföed(
OPENSSL_SYS_WIN32
)

55 #unde‡
OPENSSL_SYS_UNIX


56 #i‡!
deföed
(
OPENSSL_SYS_WIN32
)

57 
	#OPENSSL_SYS_WIN32


	)

60 #i‡
deföed
(
_WIN64
Ë|| deföed(
OPENSSL_SYS_WIN64
)

61 #unde‡
OPENSSL_SYS_UNIX


62 #i‡!
deföed
(
OPENSSL_SYS_WIN64
)

63 
	#OPENSSL_SYS_WIN64


	)

66 #i‡
deföed
(
OPENSSL_SYS_WINNT
)

67 #unde‡
OPENSSL_SYS_UNIX


69 #i‡
deföed
(
OPENSSL_SYS_WINCE
)

70 #unde‡
OPENSSL_SYS_UNIX


76 #i‡
deföed
(
OPENSSL_SYS_WIN32
Ë|| deföed(
OPENSSL_SYS_WIN64
Ë|| deföed(
OPENSSL_SYS_WINNT
Ë|| deföed(
OPENSSL_SYS_WINCE
)

77 #unde‡
OPENSSL_SYS_UNIX


78 
	#OPENSSL_SYS_WINDOWS


	)

79 #i‚de‡
OPENSSL_SYS_MSDOS


80 
	#OPENSSL_SYS_MSDOS


	)

89 #ifde‡
OPENSSL_SYS_WINDOWS


90 #i‚de‡
OPENSSL_OPT_WINDLL


91 #i‡
deföed
(
_WINDLL
)

93 
	#OPENSSL_OPT_WINDLL


	)

99 #i‡
deföed
(
__VMS
Ë|| deföed(
VMS
Ë|| deföed(
OPENSSL_SYS_VMS
)

100 #i‡!
deföed
(
OPENSSL_SYS_VMS
)

101 #unde‡
OPENSSL_SYS_UNIX


103 
	#OPENSSL_SYS_VMS


	)

104 #i‡
deföed
(
__DECC
)

105 
	#OPENSSL_SYS_VMS_DECC


	)

106 #ñi‡
deföed
(
__DECCXX
)

107 
	#OPENSSL_SYS_VMS_DECC


	)

108 
	#OPENSSL_SYS_VMS_DECCXX


	)

110 
	#OPENSSL_SYS_VMS_NODECC


	)

115 #ifde‡
OPENSSL_SYS_UNIX


116 #i‡
deföed
(
löux
Ë|| deföed(
__löux__
Ë&& !deföed(
OPENSSL_SYS_LINUX
)

117 
	#OPENSSL_SYS_LINUX


	)

119 #i‡
deföed
(
_AIX
Ë&& !deföed(
OPENSSL_SYS_AIX
)

120 
	#OPENSSL_SYS_AIX


	)

125 #i‡
deföed
(
__VOS__
Ë&& !deföed(
OPENSSL_SYS_VOS
)

126 
	#OPENSSL_SYS_VOS


	)

127 #ifde‡
__HPPA__


128 
	#OPENSSL_SYS_VOS_HPPA


	)

130 #ifde‡
__IA32__


131 
	#OPENSSL_SYS_VOS_IA32


	)

140 #ifde‡
OPENSSL_SYS_MSDOS


141 
	#OPENSSL_UNISTD_IO
 <
io
.
h
>

	)

142 
	#OPENSSL_DECLARE_EXIT
 
	`exô
();

	)

144 
	#OPENSSL_UNISTD_IO
 
OPENSSL_UNISTD


	)

145 
	#OPENSSL_DECLARE_EXIT


	)

167 #i‡
deföed
(
OPENSSL_SYS_WINDOWS
Ë&& deföed(
OPENSSL_OPT_WINDLL
)

168 
	#OPENSSL_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

169 
	#OPENSSL_EXTERN
 
	`__de˛•ec
(
dŒimp‹t
)

	)

171 
	#OPENSSL_EXPORT
 

	)

172 
	#OPENSSL_EXTERN
 

	)

186 #ifde‡
OPENSSL_EXPORT_VAR_AS_FUNCTION


187 
	#OPENSSL_IMPLEMENT_GLOBAL
(
ty≥
,
«me
,
vÆue
) \

188 
ty≥
 *
_shadow_
##
	`«me
() \

189 { 
ty≥
 
_hide_
##
«me
=
vÆue
;  &_hide_##«me; }

	)

190 
	#OPENSSL_DECLARE_GLOBAL
(
ty≥
,
«me
Ëty≥ *
_shadow_
##
	`«me
()

	)

191 
	#OPENSSL_GLOBAL_REF
(
«me
Ë(*(
_shadow_
##
	`«me
()))

	)

193 
	#OPENSSL_IMPLEMENT_GLOBAL
(
ty≥
,
«me
,
vÆue
Ëty≥ 
_shadow_
##«me=vÆue;

	)

194 
	#OPENSSL_DECLARE_GLOBAL
(
ty≥
,
«me
Ë
OPENSSL_EXPORT
Åy≥ 
_shadow_
##
	)
name

195 
	#OPENSSL_GLOBAL_REF
(
«me
Ë
_shadow_
##
	)
name

198 #ifde‡
_WIN32


199 #ifde‡
_WIN64


200 
	#os¶_ssize_t
 
__öt64


	)

201 
	#OSSL_SSIZE_MAX
 
_I64_MAX


	)

203 
	#os¶_ssize_t
 

	)

204 
	#OSSL_SSIZE_MAX
 
INT_MAX


	)

208 #i‡
deföed
(
OPENSSL_SYS_UEFI
Ë&& !deföed(
os¶_ssize_t
)

209 
	#os¶_ssize_t
 
INTN


	)

210 
	#OSSL_SSIZE_MAX
 
MAX_INTN


	)

213 #i‚de‡
os¶_ssize_t


214 
	#os¶_ssize_t
 
ssize_t


	)

215 #i‡
deföed
(
SSIZE_MAX
)

216 
	#OSSL_SSIZE_MAX
 
SSIZE_MAX


	)

217 #ñi‡
deföed
(
_POSIX_SSIZE_MAX
)

218 
	#OSSL_SSIZE_MAX
 
_POSIX_SSIZE_MAX


	)

220 
	#OSSL_SSIZE_MAX
 ((
ssize_t
)(
SIZE_MAX
>>1))

	)

224 #ifde‡
DEBUG_UNUSED


225 
	#__owur
 
	`__©åibuã__
((
__w¨n_unu£d_ªsu…__
))

	)

227 
	#__owur


	)

231 #i‡
deföed
(
OPENSSL_SYS_UEFI
)

232 
INT8
 
	töt8_t
;

233 
UINT8
 
	tuöt8_t
;

234 
INT16
 
	töt16_t
;

235 
UINT16
 
	tuöt16_t
;

236 
INT32
 
	töt32_t
;

237 
UINT32
 
	tuöt32_t
;

238 
INT64
 
	töt64_t
;

239 
UINT64
 
	tuöt64_t
;

240 #ñi‡(
deföed
(
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L) || \

241 
deföed
(
__osf__
Ë|| deföed(
__sgi
Ë|| deföed(
__hpux
) || \

242 
deföed
(
OPENSSL_SYS_VMS
Ë|| deföed (
__O≥nBSD__
)

243 
	~<öây≥s.h
>

244 #ñi‡
deföed
(
_MSC_VER
) && _MSC_VER<=1500

249 sig√d 
	töt8_t
;

250 
	tuöt8_t
;

251 
	töt16_t
;

252 
	tuöt16_t
;

253 
	töt32_t
;

254 
	tuöt32_t
;

255 
__öt64
 
	töt64_t
;

256 
	t__öt64
 
	tuöt64_t
;

258 
	~<°döt.h
>

262 #i‡!
deföed
(
ölöe
Ë&& !deföed(
__˝lu•lus
)

263 #i‡
deföed
(
__STDC_VERSION__
) && __STDC_VERSION__>=199901L

265 
	#os¶_ölöe
 
ölöe


	)

266 #ñi‡
deföed
(
__GNUC__
) && __GNUC__>=2

267 
	#os¶_ölöe
 
__ölöe__


	)

268 #ñi‡
deföed
(
_MSC_VER
)

274 
	#os¶_ölöe
 
__ölöe


	)

276 
	#os¶_ölöe


	)

279 
	#os¶_ölöe
 
ölöe


	)

282 #i‡
deföed
(
__STDC_VERSION__
) && __STDC_VERSION__ >= 201112L

283 
	#os¶_n‹ëu∫
 
_N‹ëu∫


	)

284 #ñi‡
deföed
(
__GNUC__
) && __GNUC__ >= 2

285 
	#os¶_n‹ëu∫
 
	`__©åibuã__
((
n‹ëu∫
))

	)

287 
	#os¶_n‹ëu∫


	)

291 #i‡
deföed
(
__GNUC__
)

292 
	#os¶_unu£d
 
	`__©åibuã__
((
unu£d
))

	)

294 
	#os¶_unu£d


	)

297 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/evp.h

10 #i‚de‡
HEADER_ENVELOPE_H


11 
	#HEADER_ENVELOPE_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

14 
	~<›ís¶/os¶_typ.h
>

15 
	~<›ís¶/symhacks.h
>

16 
	~<›ís¶/bio.h
>

17 
	~<›ís¶/ev≥º.h
>

19 
	#EVP_MAX_MD_SIZE
 64

	)

20 
	#EVP_MAX_KEY_LENGTH
 64

	)

21 
	#EVP_MAX_IV_LENGTH
 16

	)

22 
	#EVP_MAX_BLOCK_LENGTH
 32

	)

24 
	#PKCS5_SALT_LEN
 8

	)

26 
	#PKCS5_DEFAULT_ITER
 2048

	)

28 
	~<›ís¶/obje˘s.h
>

30 
	#EVP_PK_RSA
 0x0001

	)

31 
	#EVP_PK_DSA
 0x0002

	)

32 
	#EVP_PK_DH
 0x0004

	)

33 
	#EVP_PK_EC
 0x0008

	)

34 
	#EVP_PKT_SIGN
 0x0010

	)

35 
	#EVP_PKT_ENC
 0x0020

	)

36 
	#EVP_PKT_EXCH
 0x0040

	)

37 
	#EVP_PKS_RSA
 0x0100

	)

38 
	#EVP_PKS_DSA
 0x0200

	)

39 
	#EVP_PKS_EC
 0x0400

	)

41 
	#EVP_PKEY_NONE
 
NID_undef


	)

42 
	#EVP_PKEY_RSA
 
NID_rßEn¸y±i⁄


	)

43 
	#EVP_PKEY_RSA2
 
NID_rß


	)

44 
	#EVP_PKEY_RSA_PSS
 
NID_rßsßPss


	)

45 
	#EVP_PKEY_DSA
 
NID_dß


	)

46 
	#EVP_PKEY_DSA1
 
NID_dß_2


	)

47 
	#EVP_PKEY_DSA2
 
NID_dßWôhSHA


	)

48 
	#EVP_PKEY_DSA3
 
NID_dßWôhSHA1


	)

49 
	#EVP_PKEY_DSA4
 
NID_dßWôhSHA1_2


	)

50 
	#EVP_PKEY_DH
 
NID_dhKeyAgªemít


	)

51 
	#EVP_PKEY_DHX
 
NID_dhpubli˙umbî


	)

52 
	#EVP_PKEY_EC
 
NID_X9_62_id_ecPublicKey


	)

53 
	#EVP_PKEY_SM2
 
NID_sm2


	)

54 
	#EVP_PKEY_HMAC
 
NID_hmac


	)

55 
	#EVP_PKEY_CMAC
 
NID_cmac


	)

56 
	#EVP_PKEY_SCRYPT
 
NID_id_s¸y±


	)

57 
	#EVP_PKEY_TLS1_PRF
 
NID_és1_¥f


	)

58 
	#EVP_PKEY_HKDF
 
NID_hkdf


	)

59 
	#EVP_PKEY_POLY1305
 
NID_pﬁy1305


	)

60 
	#EVP_PKEY_SIPHASH
 
NID_sùhash


	)

61 
	#EVP_PKEY_X25519
 
NID_X25519


	)

62 
	#EVP_PKEY_ED25519
 
NID_ED25519


	)

63 
	#EVP_PKEY_X448
 
NID_X448


	)

64 
	#EVP_PKEY_ED448
 
NID_ED448


	)

66 #ifde‡ 
__˝lu•lus


70 
	#EVP_PKEY_MO_SIGN
 0x0001

	)

71 
	#EVP_PKEY_MO_VERIFY
 0x0002

	)

72 
	#EVP_PKEY_MO_ENCRYPT
 0x0004

	)

73 
	#EVP_PKEY_MO_DECRYPT
 0x0008

	)

75 #i‚de‡
EVP_MD


76 
EVP_MD
 *
EVP_MD_mëh_√w
(
md_ty≥
, 
pkey_ty≥
);

77 
EVP_MD
 *
EVP_MD_mëh_dup
(c⁄° EVP_MD *
md
);

78 
EVP_MD_mëh_‰ì
(
EVP_MD
 *
md
);

80 
EVP_MD_mëh_£t_öput_blocksize
(
EVP_MD
 *
md
, 
blocksize
);

81 
EVP_MD_mëh_£t_ªsu…_size
(
EVP_MD
 *
md
, 
ªsu…size
);

82 
EVP_MD_mëh_£t_≠p_d©asize
(
EVP_MD
 *
md
, 
d©asize
);

83 
EVP_MD_mëh_£t_Êags
(
EVP_MD
 *
md
, 
Êags
);

84 
EVP_MD_mëh_£t_öô
(
EVP_MD
 *
md
, (*
öô
)(
EVP_MD_CTX
 *
˘x
));

85 
EVP_MD_mëh_£t_upd©e
(
EVP_MD
 *
md
, (*
upd©e
)(
EVP_MD_CTX
 *
˘x
,

86 c⁄° *
d©a
,

87 
size_t
 
cou¡
));

88 
EVP_MD_mëh_£t_föÆ
(
EVP_MD
 *
md
, (*
föÆ
)(
EVP_MD_CTX
 *
˘x
,

89 *
md
));

90 
EVP_MD_mëh_£t_c›y
(
EVP_MD
 *
md
, (*
c›y
)(
EVP_MD_CTX
 *
to
,

91 c⁄° 
EVP_MD_CTX
 *
‰om
));

92 
EVP_MD_mëh_£t_˛ónup
(
EVP_MD
 *
md
, (*
˛ónup
)(
EVP_MD_CTX
 *
˘x
));

93 
EVP_MD_mëh_£t_˘æ
(
EVP_MD
 *
md
, (*
˘æ
)(
EVP_MD_CTX
 *
˘x
, 
cmd
,

94 
p1
, *
p2
));

96 
EVP_MD_mëh_gë_öput_blocksize
(c⁄° 
EVP_MD
 *
md
);

97 
EVP_MD_mëh_gë_ªsu…_size
(c⁄° 
EVP_MD
 *
md
);

98 
EVP_MD_mëh_gë_≠p_d©asize
(c⁄° 
EVP_MD
 *
md
);

99 
EVP_MD_mëh_gë_Êags
(c⁄° 
EVP_MD
 *
md
);

100 (*
EVP_MD_mëh_gë_öô
(c⁄° 
EVP_MD
 *
md
))(
EVP_MD_CTX
 *
˘x
);

101 (*
EVP_MD_mëh_gë_upd©e
(c⁄° 
EVP_MD
 *
md
))(
EVP_MD_CTX
 *
˘x
,

102 c⁄° *
d©a
,

103 
size_t
 
cou¡
);

104 (*
EVP_MD_mëh_gë_föÆ
(c⁄° 
EVP_MD
 *
md
))(
EVP_MD_CTX
 *
˘x
,

105 *
md
);

106 (*
EVP_MD_mëh_gë_c›y
(c⁄° 
EVP_MD
 *
md
))(
EVP_MD_CTX
 *
to
,

107 c⁄° 
EVP_MD_CTX
 *
‰om
);

108 (*
EVP_MD_mëh_gë_˛ónup
(c⁄° 
EVP_MD
 *
md
))(
EVP_MD_CTX
 *
˘x
);

109 (*
EVP_MD_mëh_gë_˘æ
(c⁄° 
EVP_MD
 *
md
))(
EVP_MD_CTX
 *
˘x
, 
cmd
,

110 
p1
, *
p2
);

113 
	#EVP_MD_FLAG_ONESHOT
 0x0001

	)

116 
	#EVP_MD_FLAG_XOF
 0x0002

	)

120 
	#EVP_MD_FLAG_DIGALGID_MASK
 0x0018

	)

124 
	#EVP_MD_FLAG_DIGALGID_NULL
 0x0000

	)

128 
	#EVP_MD_FLAG_DIGALGID_ABSENT
 0x0008

	)

132 
	#EVP_MD_FLAG_DIGALGID_CUSTOM
 0x0018

	)

135 
	#EVP_MD_FLAG_FIPS
 0x0400

	)

139 
	#EVP_MD_CTRL_DIGALGID
 0x1

	)

140 
	#EVP_MD_CTRL_MICALG
 0x2

	)

141 
	#EVP_MD_CTRL_XOF_LEN
 0x3

	)

145 
	#EVP_MD_CTRL_ALG_CTRL
 0x1000

	)

151 
	#EVP_MD_CTX_FLAG_ONESHOT
 0x0001

	)

153 
	#EVP_MD_CTX_FLAG_CLEANED
 0x0002

	)

155 
	#EVP_MD_CTX_FLAG_REUSE
 0x0004

	)

162 
	#EVP_MD_CTX_FLAG_NON_FIPS_ALLOW
 0x0008

	)

170 
	#EVP_MD_CTX_FLAG_PAD_MASK
 0xF0

	)

171 
	#EVP_MD_CTX_FLAG_PAD_PKCS1
 0x00

	)

172 
	#EVP_MD_CTX_FLAG_PAD_X931
 0x10

	)

173 
	#EVP_MD_CTX_FLAG_PAD_PSS
 0x20

	)

175 
	#EVP_MD_CTX_FLAG_NO_INIT
 0x0100

	)

182 
	#EVP_MD_CTX_FLAG_FINALISE
 0x0200

	)

185 
EVP_CIPHER
 *
EVP_CIPHER_mëh_√w
(
cùhî_ty≥
, 
block_size
, 
key_Àn
);

186 
EVP_CIPHER
 *
EVP_CIPHER_mëh_dup
(c⁄° EVP_CIPHER *
cùhî
);

187 
EVP_CIPHER_mëh_‰ì
(
EVP_CIPHER
 *
cùhî
);

189 
EVP_CIPHER_mëh_£t_iv_Àngth
(
EVP_CIPHER
 *
cùhî
, 
iv_Àn
);

190 
EVP_CIPHER_mëh_£t_Êags
(
EVP_CIPHER
 *
cùhî
, 
Êags
);

191 
EVP_CIPHER_mëh_£t_im∂_˘x_size
(
EVP_CIPHER
 *
cùhî
, 
˘x_size
);

192 
EVP_CIPHER_mëh_£t_öô
(
EVP_CIPHER
 *
cùhî
,

193 (*
öô
Ë(
EVP_CIPHER_CTX
 *
˘x
,

194 c⁄° *
key
,

195 c⁄° *
iv
,

196 
íc
));

197 
EVP_CIPHER_mëh_£t_do_cùhî
(
EVP_CIPHER
 *
cùhî
,

198 (*
do_cùhî
Ë(
EVP_CIPHER_CTX
 *
˘x
,

199 *
out
,

200 c⁄° *
ö
,

201 
size_t
 
öl
));

202 
EVP_CIPHER_mëh_£t_˛ónup
(
EVP_CIPHER
 *
cùhî
,

203 (*
˛ónup
Ë(
EVP_CIPHER_CTX
 *));

204 
EVP_CIPHER_mëh_£t_£t_a¢1_∑øms
(
EVP_CIPHER
 *
cùhî
,

205 (*
£t_a¢1_∑ømëîs
Ë(
EVP_CIPHER_CTX
 *,

206 
ASN1_TYPE
 *));

207 
EVP_CIPHER_mëh_£t_gë_a¢1_∑øms
(
EVP_CIPHER
 *
cùhî
,

208 (*
gë_a¢1_∑ømëîs
Ë(
EVP_CIPHER_CTX
 *,

209 
ASN1_TYPE
 *));

210 
EVP_CIPHER_mëh_£t_˘æ
(
EVP_CIPHER
 *
cùhî
,

211 (*
˘æ
Ë(
EVP_CIPHER_CTX
 *, 
ty≥
,

212 
¨g
, *
±r
));

214 (*
EVP_CIPHER_mëh_gë_öô
(c⁄° 
EVP_CIPHER
 *
cùhî
))(
EVP_CIPHER_CTX
 *
˘x
,

215 c⁄° *
key
,

216 c⁄° *
iv
,

217 
íc
);

218 (*
EVP_CIPHER_mëh_gë_do_cùhî
(c⁄° 
EVP_CIPHER
 *
cùhî
))(
EVP_CIPHER_CTX
 *
˘x
,

219 *
out
,

220 c⁄° *
ö
,

221 
size_t
 
öl
);

222 (*
EVP_CIPHER_mëh_gë_˛ónup
(c⁄° 
EVP_CIPHER
 *
cùhî
))(
EVP_CIPHER_CTX
 *);

223 (*
EVP_CIPHER_mëh_gë_£t_a¢1_∑øms
(c⁄° 
EVP_CIPHER
 *
cùhî
))(
EVP_CIPHER_CTX
 *,

224 
ASN1_TYPE
 *);

225 (*
EVP_CIPHER_mëh_gë_gë_a¢1_∑øms
(c⁄° 
EVP_CIPHER
 *
cùhî
))(
EVP_CIPHER_CTX
 *,

226 
ASN1_TYPE
 *);

227 (*
EVP_CIPHER_mëh_gë_˘æ
(c⁄° 
EVP_CIPHER
 *
cùhî
))(
EVP_CIPHER_CTX
 *,

228 
ty≥
, 
¨g
,

229 *
±r
);

235 
	#EVP_CIPH_STREAM_CIPHER
 0x0

	)

236 
	#EVP_CIPH_ECB_MODE
 0x1

	)

237 
	#EVP_CIPH_CBC_MODE
 0x2

	)

238 
	#EVP_CIPH_CFB_MODE
 0x3

	)

239 
	#EVP_CIPH_OFB_MODE
 0x4

	)

240 
	#EVP_CIPH_CTR_MODE
 0x5

	)

241 
	#EVP_CIPH_GCM_MODE
 0x6

	)

242 
	#EVP_CIPH_CCM_MODE
 0x7

	)

243 
	#EVP_CIPH_XTS_MODE
 0x10001

	)

244 
	#EVP_CIPH_WRAP_MODE
 0x10002

	)

245 
	#EVP_CIPH_OCB_MODE
 0x10003

	)

246 
	#EVP_CIPH_MODE
 0xF0007

	)

248 
	#EVP_CIPH_VARIABLE_LENGTH
 0x8

	)

250 
	#EVP_CIPH_CUSTOM_IV
 0x10

	)

252 
	#EVP_CIPH_ALWAYS_CALL_INIT
 0x20

	)

254 
	#EVP_CIPH_CTRL_INIT
 0x40

	)

256 
	#EVP_CIPH_CUSTOM_KEY_LENGTH
 0x80

	)

258 
	#EVP_CIPH_NO_PADDING
 0x100

	)

260 
	#EVP_CIPH_RAND_KEY
 0x200

	)

262 
	#EVP_CIPH_CUSTOM_COPY
 0x400

	)

264 
	#EVP_CIPH_CUSTOM_IV_LENGTH
 0x800

	)

266 
	#EVP_CIPH_FLAG_DEFAULT_ASN1
 0x1000

	)

268 
	#EVP_CIPH_FLAG_LENGTH_BITS
 0x2000

	)

270 
	#EVP_CIPH_FLAG_FIPS
 0x4000

	)

272 
	#EVP_CIPH_FLAG_NON_FIPS_ALLOW
 0x8000

	)

276 
	#EVP_CIPH_FLAG_CUSTOM_CIPHER
 0x100000

	)

277 
	#EVP_CIPH_FLAG_AEAD_CIPHER
 0x200000

	)

278 
	#EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK
 0x400000

	)

280 
	#EVP_CIPH_FLAG_PIPELINE
 0X800000

	)

287 
	#EVP_CIPHER_CTX_FLAG_WRAP_ALLOW
 0x1

	)

291 
	#EVP_CTRL_INIT
 0x0

	)

292 
	#EVP_CTRL_SET_KEY_LENGTH
 0x1

	)

293 
	#EVP_CTRL_GET_RC2_KEY_BITS
 0x2

	)

294 
	#EVP_CTRL_SET_RC2_KEY_BITS
 0x3

	)

295 
	#EVP_CTRL_GET_RC5_ROUNDS
 0x4

	)

296 
	#EVP_CTRL_SET_RC5_ROUNDS
 0x5

	)

297 
	#EVP_CTRL_RAND_KEY
 0x6

	)

298 
	#EVP_CTRL_PBE_PRF_NID
 0x7

	)

299 
	#EVP_CTRL_COPY
 0x8

	)

300 
	#EVP_CTRL_AEAD_SET_IVLEN
 0x9

	)

301 
	#EVP_CTRL_AEAD_GET_TAG
 0x10

	)

302 
	#EVP_CTRL_AEAD_SET_TAG
 0x11

	)

303 
	#EVP_CTRL_AEAD_SET_IV_FIXED
 0x12

	)

304 
	#EVP_CTRL_GCM_SET_IVLEN
 
EVP_CTRL_AEAD_SET_IVLEN


	)

305 
	#EVP_CTRL_GCM_GET_TAG
 
EVP_CTRL_AEAD_GET_TAG


	)

306 
	#EVP_CTRL_GCM_SET_TAG
 
EVP_CTRL_AEAD_SET_TAG


	)

307 
	#EVP_CTRL_GCM_SET_IV_FIXED
 
EVP_CTRL_AEAD_SET_IV_FIXED


	)

308 
	#EVP_CTRL_GCM_IV_GEN
 0x13

	)

309 
	#EVP_CTRL_CCM_SET_IVLEN
 
EVP_CTRL_AEAD_SET_IVLEN


	)

310 
	#EVP_CTRL_CCM_GET_TAG
 
EVP_CTRL_AEAD_GET_TAG


	)

311 
	#EVP_CTRL_CCM_SET_TAG
 
EVP_CTRL_AEAD_SET_TAG


	)

312 
	#EVP_CTRL_CCM_SET_IV_FIXED
 
EVP_CTRL_AEAD_SET_IV_FIXED


	)

313 
	#EVP_CTRL_CCM_SET_L
 0x14

	)

314 
	#EVP_CTRL_CCM_SET_MSGLEN
 0x15

	)

320 
	#EVP_CTRL_AEAD_TLS1_AAD
 0x16

	)

322 
	#EVP_CTRL_AEAD_SET_MAC_KEY
 0x17

	)

324 
	#EVP_CTRL_GCM_SET_IV_INV
 0x18

	)

326 
	#EVP_CTRL_TLS1_1_MULTIBLOCK_AAD
 0x19

	)

327 
	#EVP_CTRL_TLS1_1_MULTIBLOCK_ENCRYPT
 0x1a

	)

328 
	#EVP_CTRL_TLS1_1_MULTIBLOCK_DECRYPT
 0x1b

	)

329 
	#EVP_CTRL_TLS1_1_MULTIBLOCK_MAX_BUFSIZE
 0x1c

	)

331 
	#EVP_CTRL_SSL3_MASTER_SECRET
 0x1d

	)

334 
	#EVP_CTRL_SET_SBOX
 0x1e

	)

339 
	#EVP_CTRL_SBOX_USED
 0x1f

	)

343 
	#EVP_CTRL_KEY_MESH
 0x20

	)

345 
	#EVP_CTRL_BLOCK_PADDING_MODE
 0x21

	)

348 
	#EVP_CTRL_SET_PIPELINE_OUTPUT_BUFS
 0x22

	)

350 
	#EVP_CTRL_SET_PIPELINE_INPUT_BUFS
 0x23

	)

352 
	#EVP_CTRL_SET_PIPELINE_INPUT_LENS
 0x24

	)

354 
	#EVP_CTRL_GET_IVLEN
 0x25

	)

357 
	#EVP_PADDING_PKCS7
 1

	)

358 
	#EVP_PADDING_ISO7816_4
 2

	)

359 
	#EVP_PADDING_ANSI923
 3

	)

360 
	#EVP_PADDING_ISO10126
 4

	)

361 
	#EVP_PADDING_ZERO
 5

	)

364 
	#EVP_AEAD_TLS1_AAD_LEN
 13

	)

367 *
out
;

368 c⁄° *
öp
;

369 
size_t
 
Àn
;

370 
öãæóve
;

371 } 
	tEVP_CTRL_TLS1_1_MULTIBLOCK_PARAM
;

375 
	#EVP_GCM_TLS_FIXED_IV_LEN
 4

	)

377 
	#EVP_GCM_TLS_EXPLICIT_IV_LEN
 8

	)

379 
	#EVP_GCM_TLS_TAG_LEN
 16

	)

383 
	#EVP_CCM_TLS_FIXED_IV_LEN
 4

	)

385 
	#EVP_CCM_TLS_EXPLICIT_IV_LEN
 8

	)

387 
	#EVP_CCM_TLS_IV_LEN
 12

	)

389 
	#EVP_CCM_TLS_TAG_LEN
 16

	)

391 
	#EVP_CCM8_TLS_TAG_LEN
 8

	)

394 
	#EVP_CHACHAPOLY_TLS_TAG_LEN
 16

	)

396 
	sevp_cùhî_öfo_°
 {

397 c⁄° 
EVP_CIPHER
 *
cùhî
;

398 
iv
[
EVP_MAX_IV_LENGTH
];

399 } 
	tEVP_CIPHER_INFO
;

403 (
EVP_PBE_KEYGEN
Ë(
	tEVP_CIPHER_CTX
 *
	t˘x
, c⁄° *
	t∑ss
,

404 
	t∑s¶í
, 
	tASN1_TYPE
 *
	t∑øm
,

405 c⁄° 
	tEVP_CIPHER
 *
	tcùhî
, c⁄° 
	tEVP_MD
 *
	tmd
,

406 
	tí_de
);

408 #i‚de‡
OPENSSL_NO_RSA


409 
	#EVP_PKEY_assign_RSA
(
pkey
,
rß
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_RSA
,\

410 (*)(
rß
))

	)

413 #i‚de‡
OPENSSL_NO_DSA


414 
	#EVP_PKEY_assign_DSA
(
pkey
,
dß
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_DSA
,\

415 (*)(
dß
))

	)

418 #i‚de‡
OPENSSL_NO_DH


419 
	#EVP_PKEY_assign_DH
(
pkey
,
dh
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_DH
,\

420 (*)(
dh
))

	)

423 #i‚de‡
OPENSSL_NO_EC


424 
	#EVP_PKEY_assign_EC_KEY
(
pkey
,
eckey
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_EC
,\

425 (*)(
eckey
))

	)

427 #i‚de‡
OPENSSL_NO_SIPHASH


428 
	#EVP_PKEY_assign_SIPHASH
(
pkey
,
shkey
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_SIPHASH
,\

429 (*)(
shkey
))

	)

432 #i‚de‡
OPENSSL_NO_POLY1305


433 
	#EVP_PKEY_assign_POLY1305
(
pkey
,
pﬁykey
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_POLY1305
,\

434 (*)(
pﬁykey
))

	)

438 
	#EVP_gë_dige°bynid
(
a
Ë
	`EVP_gë_dige°by«me
(
	`OBJ_nid2¢
◊))

	)

439 
	#EVP_gë_dige°byobj
(
a
Ë
	`EVP_gë_dige°bynid
(
	`OBJ_obj2nid
◊))

	)

440 
	#EVP_gë_cùhîbynid
(
a
Ë
	`EVP_gë_cùhîby«me
(
	`OBJ_nid2¢
◊))

	)

441 
	#EVP_gë_cùhîbyobj
(
a
Ë
	`EVP_gë_cùhîbynid
(
	`OBJ_obj2nid
◊))

	)

443 
EVP_MD_ty≥
(c⁄° 
EVP_MD
 *
md
);

444 
	#EVP_MD_nid
(
e
Ë
	`EVP_MD_ty≥
”)

	)

445 
	#EVP_MD_«me
(
e
Ë
	`OBJ_nid2¢
(
	`EVP_MD_nid
”))

	)

446 
EVP_MD_pkey_ty≥
(c⁄° 
EVP_MD
 *
md
);

447 
EVP_MD_size
(c⁄° 
EVP_MD
 *
md
);

448 
EVP_MD_block_size
(c⁄° 
EVP_MD
 *
md
);

449 
EVP_MD_Êags
(c⁄° 
EVP_MD
 *
md
);

451 c⁄° 
EVP_MD
 *
EVP_MD_CTX_md
(c⁄° 
EVP_MD_CTX
 *
˘x
);

452 (*
EVP_MD_CTX_upd©e_‚
(
EVP_MD_CTX
 *
˘x
))(EVP_MD_CTX *ctx,

453 c⁄° *
d©a
, 
size_t
 
cou¡
);

454 
EVP_MD_CTX_£t_upd©e_‚
(
EVP_MD_CTX
 *
˘x
,

455 (*
upd©e
Ë(
EVP_MD_CTX
 *
˘x
,

456 c⁄° *
d©a
, 
size_t
 
cou¡
));

457 
	#EVP_MD_CTX_size
(
e
Ë
	`EVP_MD_size
(
	`EVP_MD_CTX_md
”))

	)

458 
	#EVP_MD_CTX_block_size
(
e
Ë
	`EVP_MD_block_size
(
	`EVP_MD_CTX_md
”))

	)

459 
	#EVP_MD_CTX_ty≥
(
e
Ë
	`EVP_MD_ty≥
(
	`EVP_MD_CTX_md
”))

	)

460 
EVP_PKEY_CTX
 *
EVP_MD_CTX_pkey_˘x
(c⁄° 
EVP_MD_CTX
 *
˘x
);

461 
EVP_MD_CTX_£t_pkey_˘x
(
EVP_MD_CTX
 *
˘x
, 
EVP_PKEY_CTX
 *
p˘x
);

462 *
EVP_MD_CTX_md_d©a
(c⁄° 
EVP_MD_CTX
 *
˘x
);

464 
EVP_CIPHER_nid
(c⁄° 
EVP_CIPHER
 *
cùhî
);

465 
	#EVP_CIPHER_«me
(
e
Ë
	`OBJ_nid2¢
(
	`EVP_CIPHER_nid
”))

	)

466 
EVP_CIPHER_block_size
(c⁄° 
EVP_CIPHER
 *
cùhî
);

467 
EVP_CIPHER_im∂_˘x_size
(c⁄° 
EVP_CIPHER
 *
cùhî
);

468 
EVP_CIPHER_key_Àngth
(c⁄° 
EVP_CIPHER
 *
cùhî
);

469 
EVP_CIPHER_iv_Àngth
(c⁄° 
EVP_CIPHER
 *
cùhî
);

470 
EVP_CIPHER_Êags
(c⁄° 
EVP_CIPHER
 *
cùhî
);

471 
	#EVP_CIPHER_mode
(
e
Ë(
	`EVP_CIPHER_Êags
”Ë& 
EVP_CIPH_MODE
)

	)

473 c⁄° 
EVP_CIPHER
 *
EVP_CIPHER_CTX_cùhî
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

474 
EVP_CIPHER_CTX_í¸y±ög
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

475 
EVP_CIPHER_CTX_nid
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

476 
EVP_CIPHER_CTX_block_size
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

477 
EVP_CIPHER_CTX_key_Àngth
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

478 
EVP_CIPHER_CTX_iv_Àngth
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

479 c⁄° *
EVP_CIPHER_CTX_iv
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

480 c⁄° *
EVP_CIPHER_CTX_‹igöÆ_iv
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

481 *
EVP_CIPHER_CTX_iv_noc⁄°
(
EVP_CIPHER_CTX
 *
˘x
);

482 *
EVP_CIPHER_CTX_buf_noc⁄°
(
EVP_CIPHER_CTX
 *
˘x
);

483 
EVP_CIPHER_CTX_num
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

484 
EVP_CIPHER_CTX_£t_num
(
EVP_CIPHER_CTX
 *
˘x
, 
num
);

485 
EVP_CIPHER_CTX_c›y
(
EVP_CIPHER_CTX
 *
out
, c⁄° EVP_CIPHER_CTX *
ö
);

486 *
EVP_CIPHER_CTX_gë_≠p_d©a
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

487 
EVP_CIPHER_CTX_£t_≠p_d©a
(
EVP_CIPHER_CTX
 *
˘x
, *
d©a
);

488 *
EVP_CIPHER_CTX_gë_cùhî_d©a
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

489 *
EVP_CIPHER_CTX_£t_cùhî_d©a
(
EVP_CIPHER_CTX
 *
˘x
, *
cùhî_d©a
);

490 
	#EVP_CIPHER_CTX_ty≥
(
c
Ë
	`EVP_CIPHER_ty≥
(
	`EVP_CIPHER_CTX_cùhî
(c))

	)

491 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

492 
	#EVP_CIPHER_CTX_Êags
(
c
Ë
	`EVP_CIPHER_Êags
(
	`EVP_CIPHER_CTX_cùhî
(c))

	)

494 
	#EVP_CIPHER_CTX_mode
(
c
Ë
	`EVP_CIPHER_mode
(
	`EVP_CIPHER_CTX_cùhî
(c))

	)

496 
	#EVP_ENCODE_LENGTH
(
l
Ë(((÷)+2)/3*4)+(÷)/48+1)*2+80)

	)

497 
	#EVP_DECODE_LENGTH
(
l
Ë((÷)+3)/4*3+80)

	)

499 
	#EVP_SignInô_ex
(
a
,
b
,
c
Ë
	`EVP_Dige°Inô_ex
◊,b,c)

	)

500 
	#EVP_SignInô
(
a
,
b
Ë
	`EVP_Dige°Inô
◊,b)

	)

501 
	#EVP_SignUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

502 
	#EVP_VîifyInô_ex
(
a
,
b
,
c
Ë
	`EVP_Dige°Inô_ex
◊,b,c)

	)

503 
	#EVP_VîifyInô
(
a
,
b
Ë
	`EVP_Dige°Inô
◊,b)

	)

504 
	#EVP_VîifyUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

505 
	#EVP_O≥nUpd©e
(
a
,
b
,
c
,
d
,
e
Ë
	`EVP_De¸y±Upd©e
◊,b,c,d,e)

	)

506 
	#EVP_SólUpd©e
(
a
,
b
,
c
,
d
,
e
Ë
	`EVP_En¸y±Upd©e
◊,b,c,d,e)

	)

507 
	#EVP_Dige°SignUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

508 
	#EVP_Dige°VîifyUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

510 #ifde‡
CONST_STRICT


511 
BIO_£t_md
(
BIO
 *, c⁄° 
EVP_MD
 *
md
);

513 
	#BIO_£t_md
(
b
,
md
Ë
	`BIO_˘æ
(b,
BIO_C_SET_MD
,0,(*)(md))

	)

515 
	#BIO_gë_md
(
b
,
mdp
Ë
	`BIO_˘æ
(b,
BIO_C_GET_MD
,0,(*)(mdp))

	)

516 
	#BIO_gë_md_˘x
(
b
,
md˝
Ë
	`BIO_˘æ
(b,
BIO_C_GET_MD_CTX
,0, \

517 (*)(
md˝
))

	)

518 
	#BIO_£t_md_˘x
(
b
,
md˝
Ë
	`BIO_˘æ
(b,
BIO_C_SET_MD_CTX
,0, \

519 (*)(
md˝
))

	)

520 
	#BIO_gë_cùhî_°©us
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_CIPHER_STATUS
,0,
NULL
)

	)

521 
	#BIO_gë_cùhî_˘x
(
b
,
c_µ
Ë
	`BIO_˘æ
(b,
BIO_C_GET_CIPHER_CTX
,0, \

522 (*)(
c_µ
))

	)

524  
EVP_Cùhî
(
EVP_CIPHER_CTX
 *
c
,

525 *
out
,

526 c⁄° *
ö
, 
öl
);

528 
	#EVP_add_cùhî_Æüs
(
n
,
Æüs
) \

529 
	`OBJ_NAME_add
((
Æüs
),
OBJ_NAME_TYPE_CIPHER_METH
|
OBJ_NAME_ALIAS
,(
n
))

	)

530 
	#EVP_add_dige°_Æüs
(
n
,
Æüs
) \

531 
	`OBJ_NAME_add
((
Æüs
),
OBJ_NAME_TYPE_MD_METH
|
OBJ_NAME_ALIAS
,(
n
))

	)

532 
	#EVP_dñëe_cùhî_Æüs
(
Æüs
) \

533 
	`OBJ_NAME_ªmove
(
Æüs
,
OBJ_NAME_TYPE_CIPHER_METH
|
OBJ_NAME_ALIAS
);

	)

534 
	#EVP_dñëe_dige°_Æüs
(
Æüs
) \

535 
	`OBJ_NAME_ªmove
(
Æüs
,
OBJ_NAME_TYPE_MD_METH
|
OBJ_NAME_ALIAS
);

	)

537 
EVP_MD_CTX_˘æ
(
EVP_MD_CTX
 *
˘x
, 
cmd
, 
p1
, *
p2
);

538 
EVP_MD_CTX
 *
EVP_MD_CTX_√w
();

539 
EVP_MD_CTX_ª£t
(
EVP_MD_CTX
 *
˘x
);

540 
EVP_MD_CTX_‰ì
(
EVP_MD_CTX
 *
˘x
);

541 
	#EVP_MD_CTX_¸óã
(Ë
	`EVP_MD_CTX_√w
()

	)

542 
	#EVP_MD_CTX_öô
(
˘x
Ë
	`EVP_MD_CTX_ª£t
((˘x))

	)

543 
	#EVP_MD_CTX_de°roy
(
˘x
Ë
	`EVP_MD_CTX_‰ì
((˘x))

	)

544 
__owur
 
EVP_MD_CTX_c›y_ex
(
EVP_MD_CTX
 *
out
, c⁄° EVP_MD_CTX *
ö
);

545 
EVP_MD_CTX_£t_Êags
(
EVP_MD_CTX
 *
˘x
, 
Êags
);

546 
EVP_MD_CTX_˛ór_Êags
(
EVP_MD_CTX
 *
˘x
, 
Êags
);

547 
EVP_MD_CTX_ã°_Êags
(c⁄° 
EVP_MD_CTX
 *
˘x
, 
Êags
);

548 
__owur
 
EVP_Dige°Inô_ex
(
EVP_MD_CTX
 *
˘x
, c⁄° 
EVP_MD
 *
ty≥
,

549 
ENGINE
 *
im∂
);

550 
__owur
 
EVP_Dige°Upd©e
(
EVP_MD_CTX
 *
˘x
, c⁄° *
d
,

551 
size_t
 
˙t
);

552 
__owur
 
EVP_Dige°FöÆ_ex
(
EVP_MD_CTX
 *
˘x
, *
md
,

553 *
s
);

554 
__owur
 
EVP_Dige°
(c⁄° *
d©a
, 
size_t
 
cou¡
,

555 *
md
, *
size
,

556 c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
im∂
);

558 
__owur
 
EVP_MD_CTX_c›y
(
EVP_MD_CTX
 *
out
, c⁄° EVP_MD_CTX *
ö
);

559 
__owur
 
EVP_Dige°Inô
(
EVP_MD_CTX
 *
˘x
, c⁄° 
EVP_MD
 *
ty≥
);

560 
__owur
 
EVP_Dige°FöÆ
(
EVP_MD_CTX
 *
˘x
, *
md
,

561 *
s
);

562 
__owur
 
EVP_Dige°FöÆXOF
(
EVP_MD_CTX
 *
˘x
, *
md
,

563 
size_t
 
Àn
);

565 
EVP_ªad_pw_°rög
(*
buf
, 
Àngth
, c⁄° *
¥om±
, 
vîify
);

566 
EVP_ªad_pw_°rög_mö
(*
buf
, 
möÀn
, 
maxÀn
,

567 c⁄° *
¥om±
, 
vîify
);

568 
EVP_£t_pw_¥om±
(c⁄° *
¥om±
);

569 *
EVP_gë_pw_¥om±
();

571 
__owur
 
EVP_ByãsToKey
(c⁄° 
EVP_CIPHER
 *
ty≥
, c⁄° 
EVP_MD
 *
md
,

572 c⁄° *
ß…
,

573 c⁄° *
d©a
, 
d©Æ
, 
cou¡
,

574 *
key
, *
iv
);

576 
EVP_CIPHER_CTX_£t_Êags
(
EVP_CIPHER_CTX
 *
˘x
, 
Êags
);

577 
EVP_CIPHER_CTX_˛ór_Êags
(
EVP_CIPHER_CTX
 *
˘x
, 
Êags
);

578 
EVP_CIPHER_CTX_ã°_Êags
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
, 
Êags
);

580 
__owur
 
EVP_En¸y±Inô
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
cùhî
,

581 c⁄° *
key
, c⁄° *
iv
);

582  
EVP_En¸y±Inô_ex
(
EVP_CIPHER_CTX
 *
˘x
,

583 c⁄° 
EVP_CIPHER
 *
cùhî
, 
ENGINE
 *
im∂
,

584 c⁄° *
key
,

585 c⁄° *
iv
);

586  
EVP_En¸y±Upd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

587 *
oué
, c⁄° *
ö
, 
öl
);

588  
EVP_En¸y±FöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

589 *
oué
);

590  
EVP_En¸y±FöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

591 *
oué
);

593 
__owur
 
EVP_De¸y±Inô
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
cùhî
,

594 c⁄° *
key
, c⁄° *
iv
);

595  
EVP_De¸y±Inô_ex
(
EVP_CIPHER_CTX
 *
˘x
,

596 c⁄° 
EVP_CIPHER
 *
cùhî
, 
ENGINE
 *
im∂
,

597 c⁄° *
key
,

598 c⁄° *
iv
);

599  
EVP_De¸y±Upd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

600 *
oué
, c⁄° *
ö
, 
öl
);

601 
__owur
 
EVP_De¸y±FöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
,

602 *
oué
);

603  
EVP_De¸y±FöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
,

604 *
oué
);

606 
__owur
 
EVP_CùhîInô
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
cùhî
,

607 c⁄° *
key
, c⁄° *
iv
,

608 
íc
);

609  
EVP_CùhîInô_ex
(
EVP_CIPHER_CTX
 *
˘x
,

610 c⁄° 
EVP_CIPHER
 *
cùhî
, 
ENGINE
 *
im∂
,

611 c⁄° *
key
,

612 c⁄° *
iv
, 
íc
);

613 
__owur
 
EVP_CùhîUpd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

614 *
oué
, c⁄° *
ö
, 
öl
);

615 
__owur
 
EVP_CùhîFöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
,

616 *
oué
);

617 
__owur
 
EVP_CùhîFöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
,

618 *
oué
);

620 
__owur
 
EVP_SignFöÆ
(
EVP_MD_CTX
 *
˘x
, *
md
, *
s
,

621 
EVP_PKEY
 *
pkey
);

623 
__owur
 
EVP_Dige°Sign
(
EVP_MD_CTX
 *
˘x
, *
sigªt
,

624 
size_t
 *
sigÀn
, c⁄° *
tbs
,

625 
size_t
 
tb¶í
);

627 
__owur
 
EVP_VîifyFöÆ
(
EVP_MD_CTX
 *
˘x
, c⁄° *
sigbuf
,

628 
sigÀn
, 
EVP_PKEY
 *
pkey
);

630 
__owur
 
EVP_Dige°Vîify
(
EVP_MD_CTX
 *
˘x
, c⁄° *
sigªt
,

631 
size_t
 
sigÀn
, c⁄° *
tbs
,

632 
size_t
 
tb¶í
);

634  
EVP_Dige°SignInô
(
EVP_MD_CTX
 *
˘x
, 
EVP_PKEY_CTX
 **
p˘x
,

635 c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
e
,

636 
EVP_PKEY
 *
pkey
);

637 
__owur
 
EVP_Dige°SignFöÆ
(
EVP_MD_CTX
 *
˘x
, *
sigªt
,

638 
size_t
 *
sigÀn
);

640 
__owur
 
EVP_Dige°VîifyInô
(
EVP_MD_CTX
 *
˘x
, 
EVP_PKEY_CTX
 **
p˘x
,

641 c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
e
,

642 
EVP_PKEY
 *
pkey
);

643 
__owur
 
EVP_Dige°VîifyFöÆ
(
EVP_MD_CTX
 *
˘x
, c⁄° *
sig
,

644 
size_t
 
sigÀn
);

646 #i‚de‡
OPENSSL_NO_RSA


647 
__owur
 
EVP_O≥nInô
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
ty≥
,

648 c⁄° *
ek
, 
ekl
,

649 c⁄° *
iv
, 
EVP_PKEY
 *
¥iv
);

650 
__owur
 
EVP_O≥nFöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
);

652 
__owur
 
EVP_SólInô
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
ty≥
,

653 **
ek
, *
ekl
, *
iv
,

654 
EVP_PKEY
 **
pubk
, 
≈ubk
);

655 
__owur
 
EVP_SólFöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
);

658 
EVP_ENCODE_CTX
 *
EVP_ENCODE_CTX_√w
();

659 
EVP_ENCODE_CTX_‰ì
(
EVP_ENCODE_CTX
 *
˘x
);

660 
EVP_ENCODE_CTX_c›y
(
EVP_ENCODE_CTX
 *
d˘x
, EVP_ENCODE_CTX *
s˘x
);

661 
EVP_ENCODE_CTX_num
(
EVP_ENCODE_CTX
 *
˘x
);

662 
EVP_EncodeInô
(
EVP_ENCODE_CTX
 *
˘x
);

663 
EVP_EncodeUpd©e
(
EVP_ENCODE_CTX
 *
˘x
, *
out
, *
oué
,

664 c⁄° *
ö
, 
öl
);

665 
EVP_EncodeFöÆ
(
EVP_ENCODE_CTX
 *
˘x
, *
out
, *
oué
);

666 
EVP_EncodeBlock
(*
t
, c⁄° *
f
, 
n
);

668 
EVP_DecodeInô
(
EVP_ENCODE_CTX
 *
˘x
);

669 
EVP_DecodeUpd©e
(
EVP_ENCODE_CTX
 *
˘x
, *
out
, *
oué
,

670 c⁄° *
ö
, 
öl
);

671 
EVP_DecodeFöÆ
(
EVP_ENCODE_CTX
 *
˘x
, 

672 *
out
, *
oué
);

673 
EVP_DecodeBlock
(*
t
, c⁄° *
f
, 
n
);

675 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

676 
	#EVP_CIPHER_CTX_öô
(
c
Ë
	`EVP_CIPHER_CTX_ª£t
(c)

	)

677 
	#EVP_CIPHER_CTX_˛ónup
(
c
Ë
	`EVP_CIPHER_CTX_ª£t
(c)

	)

679 
EVP_CIPHER_CTX
 *
EVP_CIPHER_CTX_√w
();

680 
EVP_CIPHER_CTX_ª£t
(
EVP_CIPHER_CTX
 *
c
);

681 
EVP_CIPHER_CTX_‰ì
(
EVP_CIPHER_CTX
 *
c
);

682 
EVP_CIPHER_CTX_£t_key_Àngth
(
EVP_CIPHER_CTX
 *
x
, 
keyÀn
);

683 
EVP_CIPHER_CTX_£t_∑ddög
(
EVP_CIPHER_CTX
 *
c
, 
∑d
);

684 
EVP_CIPHER_CTX_˘æ
(
EVP_CIPHER_CTX
 *
˘x
, 
ty≥
, 
¨g
, *
±r
);

685 
EVP_CIPHER_CTX_ønd_key
(
EVP_CIPHER_CTX
 *
˘x
, *
key
);

687 c⁄° 
BIO_METHOD
 *
BIO_f_md
();

688 c⁄° 
BIO_METHOD
 *
BIO_f_ba£64
();

689 c⁄° 
BIO_METHOD
 *
BIO_f_cùhî
();

690 c⁄° 
BIO_METHOD
 *
BIO_f_ªlübÀ
();

691 
__owur
 
BIO_£t_cùhî
(
BIO
 *
b
, c⁄° 
EVP_CIPHER
 *
c
, c⁄° *
k
,

692 c⁄° *
i
, 
íc
);

694 c⁄° 
EVP_MD
 *
EVP_md_nuŒ
();

695 #i‚de‡
OPENSSL_NO_MD2


696 c⁄° 
EVP_MD
 *
EVP_md2
();

698 #i‚de‡
OPENSSL_NO_MD4


699 c⁄° 
EVP_MD
 *
EVP_md4
();

701 #i‚de‡
OPENSSL_NO_MD5


702 c⁄° 
EVP_MD
 *
EVP_md5
();

703 c⁄° 
EVP_MD
 *
EVP_md5_sha1
();

705 #i‚de‡
OPENSSL_NO_BLAKE2


706 c⁄° 
EVP_MD
 *
EVP_bœke2b512
();

707 c⁄° 
EVP_MD
 *
EVP_bœke2s256
();

709 c⁄° 
EVP_MD
 *
EVP_sha1
();

710 c⁄° 
EVP_MD
 *
EVP_sha224
();

711 c⁄° 
EVP_MD
 *
EVP_sha256
();

712 c⁄° 
EVP_MD
 *
EVP_sha384
();

713 c⁄° 
EVP_MD
 *
EVP_sha512
();

714 c⁄° 
EVP_MD
 *
EVP_sha512_224
();

715 c⁄° 
EVP_MD
 *
EVP_sha512_256
();

716 c⁄° 
EVP_MD
 *
EVP_sha3_224
();

717 c⁄° 
EVP_MD
 *
EVP_sha3_256
();

718 c⁄° 
EVP_MD
 *
EVP_sha3_384
();

719 c⁄° 
EVP_MD
 *
EVP_sha3_512
();

720 c⁄° 
EVP_MD
 *
EVP_shake128
();

721 c⁄° 
EVP_MD
 *
EVP_shake256
();

722 #i‚de‡
OPENSSL_NO_MDC2


723 c⁄° 
EVP_MD
 *
EVP_mdc2
();

725 #i‚de‡
OPENSSL_NO_RMD160


726 c⁄° 
EVP_MD
 *
EVP_rùemd160
();

728 #i‚de‡
OPENSSL_NO_WHIRLPOOL


729 c⁄° 
EVP_MD
 *
EVP_whúÕoﬁ
();

731 #i‚de‡
OPENSSL_NO_SM3


732 c⁄° 
EVP_MD
 *
EVP_sm3
();

734 c⁄° 
EVP_CIPHER
 *
EVP_íc_nuŒ
();

735 #i‚de‡
OPENSSL_NO_DES


736 c⁄° 
EVP_CIPHER
 *
EVP_des_ecb
();

737 c⁄° 
EVP_CIPHER
 *
EVP_des_ede
();

738 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3
();

739 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_ecb
();

740 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_ecb
();

741 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb64
();

742 
	#EVP_des_cfb
 
EVP_des_cfb64


	)

743 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb1
();

744 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb8
();

745 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cfb64
();

746 
	#EVP_des_ede_cfb
 
EVP_des_ede_cfb64


	)

747 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb64
();

748 
	#EVP_des_ede3_cfb
 
EVP_des_ede3_cfb64


	)

749 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb1
();

750 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb8
();

751 c⁄° 
EVP_CIPHER
 *
EVP_des_ofb
();

752 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_ofb
();

753 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_ofb
();

754 c⁄° 
EVP_CIPHER
 *
EVP_des_cbc
();

755 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cbc
();

756 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cbc
();

757 c⁄° 
EVP_CIPHER
 *
EVP_desx_cbc
();

758 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_wøp
();

765 #i‚de‡
OPENSSL_NO_RC4


766 c⁄° 
EVP_CIPHER
 *
EVP_rc4
();

767 c⁄° 
EVP_CIPHER
 *
EVP_rc4_40
();

768 #i‚de‡
OPENSSL_NO_MD5


769 c⁄° 
EVP_CIPHER
 *
EVP_rc4_hmac_md5
();

772 #i‚de‡
OPENSSL_NO_IDEA


773 c⁄° 
EVP_CIPHER
 *
EVP_idó_ecb
();

774 c⁄° 
EVP_CIPHER
 *
EVP_idó_cfb64
();

775 
	#EVP_idó_cfb
 
EVP_idó_cfb64


	)

776 c⁄° 
EVP_CIPHER
 *
EVP_idó_ofb
();

777 c⁄° 
EVP_CIPHER
 *
EVP_idó_cbc
();

779 #i‚de‡
OPENSSL_NO_RC2


780 c⁄° 
EVP_CIPHER
 *
EVP_rc2_ecb
();

781 c⁄° 
EVP_CIPHER
 *
EVP_rc2_cbc
();

782 c⁄° 
EVP_CIPHER
 *
EVP_rc2_40_cbc
();

783 c⁄° 
EVP_CIPHER
 *
EVP_rc2_64_cbc
();

784 c⁄° 
EVP_CIPHER
 *
EVP_rc2_cfb64
();

785 
	#EVP_rc2_cfb
 
EVP_rc2_cfb64


	)

786 c⁄° 
EVP_CIPHER
 *
EVP_rc2_ofb
();

788 #i‚de‡
OPENSSL_NO_BF


789 c⁄° 
EVP_CIPHER
 *
EVP_bf_ecb
();

790 c⁄° 
EVP_CIPHER
 *
EVP_bf_cbc
();

791 c⁄° 
EVP_CIPHER
 *
EVP_bf_cfb64
();

792 
	#EVP_bf_cfb
 
EVP_bf_cfb64


	)

793 c⁄° 
EVP_CIPHER
 *
EVP_bf_ofb
();

795 #i‚de‡
OPENSSL_NO_CAST


796 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_ecb
();

797 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_cbc
();

798 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_cfb64
();

799 
	#EVP_ˇ°5_cfb
 
EVP_ˇ°5_cfb64


	)

800 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_ofb
();

802 #i‚de‡
OPENSSL_NO_RC5


803 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_cbc
();

804 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_ecb
();

805 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_cfb64
();

806 
	#EVP_rc5_32_12_16_cfb
 
EVP_rc5_32_12_16_cfb64


	)

807 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_ofb
();

809 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ecb
();

810 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cbc
();

811 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb1
();

812 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb8
();

813 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb128
();

814 
	#EVP_´s_128_cfb
 
EVP_´s_128_cfb128


	)

815 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ofb
();

816 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_˘r
();

817 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ccm
();

818 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_gcm
();

819 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_xts
();

820 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_wøp
();

821 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_wøp_∑d
();

822 #i‚de‡
OPENSSL_NO_OCB


823 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ocb
();

825 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ecb
();

826 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cbc
();

827 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb1
();

828 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb8
();

829 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb128
();

830 
	#EVP_´s_192_cfb
 
EVP_´s_192_cfb128


	)

831 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ofb
();

832 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_˘r
();

833 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ccm
();

834 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_gcm
();

835 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_wøp
();

836 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_wøp_∑d
();

837 #i‚de‡
OPENSSL_NO_OCB


838 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ocb
();

840 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ecb
();

841 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cbc
();

842 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb1
();

843 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb8
();

844 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb128
();

845 
	#EVP_´s_256_cfb
 
EVP_´s_256_cfb128


	)

846 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ofb
();

847 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_˘r
();

848 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ccm
();

849 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_gcm
();

850 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_xts
();

851 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_wøp
();

852 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_wøp_∑d
();

853 #i‚de‡
OPENSSL_NO_OCB


854 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ocb
();

856 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cbc_hmac_sha1
();

857 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cbc_hmac_sha1
();

858 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cbc_hmac_sha256
();

859 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cbc_hmac_sha256
();

860 #i‚de‡
OPENSSL_NO_ARIA


861 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_128_ecb
();

862 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_128_cbc
();

863 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_128_cfb1
();

864 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_128_cfb8
();

865 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_128_cfb128
();

866 
	#EVP_¨ü_128_cfb
 
EVP_¨ü_128_cfb128


	)

867 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_128_˘r
();

868 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_128_ofb
();

869 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_128_gcm
();

870 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_128_ccm
();

871 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_192_ecb
();

872 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_192_cbc
();

873 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_192_cfb1
();

874 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_192_cfb8
();

875 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_192_cfb128
();

876 
	#EVP_¨ü_192_cfb
 
EVP_¨ü_192_cfb128


	)

877 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_192_˘r
();

878 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_192_ofb
();

879 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_192_gcm
();

880 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_192_ccm
();

881 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_256_ecb
();

882 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_256_cbc
();

883 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_256_cfb1
();

884 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_256_cfb8
();

885 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_256_cfb128
();

886 
	#EVP_¨ü_256_cfb
 
EVP_¨ü_256_cfb128


	)

887 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_256_˘r
();

888 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_256_ofb
();

889 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_256_gcm
();

890 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_256_ccm
();

892 #i‚de‡
OPENSSL_NO_CAMELLIA


893 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_ecb
();

894 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cbc
();

895 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb1
();

896 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb8
();

897 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb128
();

898 
	#EVP_ˇmñlü_128_cfb
 
EVP_ˇmñlü_128_cfb128


	)

899 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_ofb
();

900 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_˘r
();

901 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_ecb
();

902 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cbc
();

903 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb1
();

904 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb8
();

905 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb128
();

906 
	#EVP_ˇmñlü_192_cfb
 
EVP_ˇmñlü_192_cfb128


	)

907 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_ofb
();

908 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_˘r
();

909 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_ecb
();

910 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cbc
();

911 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb1
();

912 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb8
();

913 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb128
();

914 
	#EVP_ˇmñlü_256_cfb
 
EVP_ˇmñlü_256_cfb128


	)

915 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_ofb
();

916 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_˘r
();

918 #i‚de‡
OPENSSL_NO_CHACHA


919 c⁄° 
EVP_CIPHER
 *
EVP_chacha20
();

920 #i‚de‡
OPENSSL_NO_POLY1305


921 c⁄° 
EVP_CIPHER
 *
EVP_chacha20_pﬁy1305
();

925 #i‚de‡
OPENSSL_NO_SEED


926 c⁄° 
EVP_CIPHER
 *
EVP_£ed_ecb
();

927 c⁄° 
EVP_CIPHER
 *
EVP_£ed_cbc
();

928 c⁄° 
EVP_CIPHER
 *
EVP_£ed_cfb128
();

929 
	#EVP_£ed_cfb
 
EVP_£ed_cfb128


	)

930 c⁄° 
EVP_CIPHER
 *
EVP_£ed_ofb
();

933 #i‚de‡
OPENSSL_NO_SM4


934 c⁄° 
EVP_CIPHER
 *
EVP_sm4_ecb
();

935 c⁄° 
EVP_CIPHER
 *
EVP_sm4_cbc
();

936 c⁄° 
EVP_CIPHER
 *
EVP_sm4_cfb128
();

937 
	#EVP_sm4_cfb
 
EVP_sm4_cfb128


	)

938 c⁄° 
EVP_CIPHER
 *
EVP_sm4_ofb
();

939 c⁄° 
EVP_CIPHER
 *
EVP_sm4_˘r
();

942 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

943 
	#OPENSSL_add_Æl_Æg‹ôhms_c⁄f
() \

944 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_ADD_ALL_CIPHERS
 \

945 | 
OPENSSL_INIT_ADD_ALL_DIGESTS
 \

946 | 
OPENSSL_INIT_LOAD_CONFIG
, 
NULL
)

	)

947 
	#OPENSSL_add_Æl_Æg‹ôhms_noc⁄f
() \

948 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_ADD_ALL_CIPHERS
 \

949 | 
OPENSSL_INIT_ADD_ALL_DIGESTS
, 
NULL
)

	)

951 #ifde‡
OPENSSL_LOAD_CONF


952 
	#O≥nSSL_add_Æl_Æg‹ôhms
(Ë
	`OPENSSL_add_Æl_Æg‹ôhms_c⁄f
()

	)

954 
	#O≥nSSL_add_Æl_Æg‹ôhms
(Ë
	`OPENSSL_add_Æl_Æg‹ôhms_noc⁄f
()

	)

957 
	#O≥nSSL_add_Æl_cùhîs
() \

958 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_ADD_ALL_CIPHERS
, 
NULL
)

	)

959 
	#O≥nSSL_add_Æl_dige°s
() \

960 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_ADD_ALL_DIGESTS
, 
NULL
)

	)

962 
	#EVP_˛ónup
(Ë0Ë

	)

965 
EVP_add_cùhî
(c⁄° 
EVP_CIPHER
 *
cùhî
);

966 
EVP_add_dige°
(c⁄° 
EVP_MD
 *
dige°
);

968 c⁄° 
EVP_CIPHER
 *
EVP_gë_cùhîby«me
(c⁄° *
«me
);

969 c⁄° 
EVP_MD
 *
EVP_gë_dige°by«me
(c⁄° *
«me
);

971 
EVP_CIPHER_do_Æl
((*
‚
Ë(c⁄° 
EVP_CIPHER
 *
cùh
,

972 c⁄° *
‰om
, c⁄° *
to
, *
x
),

973 *
¨g
);

974 
EVP_CIPHER_do_Æl_s‹ãd
((*
‚
)

975 (c⁄° 
EVP_CIPHER
 *
cùh
, c⁄° *
‰om
,

976 c⁄° *
to
, *
x
), *
¨g
);

978 
EVP_MD_do_Æl
((*
‚
Ë(c⁄° 
EVP_MD
 *
cùh
,

979 c⁄° *
‰om
, c⁄° *
to
, *
x
),

980 *
¨g
);

981 
EVP_MD_do_Æl_s‹ãd
((*
‚
)

982 (c⁄° 
EVP_MD
 *
cùh
, c⁄° *
‰om
,

983 c⁄° *
to
, *
x
), *
¨g
);

985 
EVP_PKEY_de¸y±_ﬁd
(*
dec_key
,

986 c⁄° *
íc_key
, 
íc_key_Àn
,

987 
EVP_PKEY
 *
¥iv©e_key
);

988 
EVP_PKEY_í¸y±_ﬁd
(*
íc_key
,

989 c⁄° *
key
, 
key_Àn
,

990 
EVP_PKEY
 *
pub_key
);

991 
EVP_PKEY_ty≥
(
ty≥
);

992 
EVP_PKEY_id
(c⁄° 
EVP_PKEY
 *
pkey
);

993 
EVP_PKEY_ba£_id
(c⁄° 
EVP_PKEY
 *
pkey
);

994 
EVP_PKEY_bôs
(c⁄° 
EVP_PKEY
 *
pkey
);

995 
EVP_PKEY_£curôy_bôs
(c⁄° 
EVP_PKEY
 *
pkey
);

996 
EVP_PKEY_size
(c⁄° 
EVP_PKEY
 *
pkey
);

997 
EVP_PKEY_£t_ty≥
(
EVP_PKEY
 *
pkey
, 
ty≥
);

998 
EVP_PKEY_£t_ty≥_°r
(
EVP_PKEY
 *
pkey
, c⁄° *
°r
, 
Àn
);

999 
EVP_PKEY_£t_Æüs_ty≥
(
EVP_PKEY
 *
pkey
, 
ty≥
);

1000 #i‚de‡
OPENSSL_NO_ENGINE


1001 
EVP_PKEY_£t1_ígöe
(
EVP_PKEY
 *
pkey
, 
ENGINE
 *
e
);

1002 
ENGINE
 *
EVP_PKEY_gë0_ígöe
(c⁄° 
EVP_PKEY
 *
pkey
);

1004 
EVP_PKEY_assign
(
EVP_PKEY
 *
pkey
, 
ty≥
, *
key
);

1005 *
EVP_PKEY_gë0
(c⁄° 
EVP_PKEY
 *
pkey
);

1006 c⁄° *
EVP_PKEY_gë0_hmac
(c⁄° 
EVP_PKEY
 *
pkey
, 
size_t
 *
Àn
);

1007 #i‚de‡
OPENSSL_NO_POLY1305


1008 c⁄° *
EVP_PKEY_gë0_pﬁy1305
(c⁄° 
EVP_PKEY
 *
pkey
, 
size_t
 *
Àn
);

1010 #i‚de‡
OPENSSL_NO_SIPHASH


1011 c⁄° *
EVP_PKEY_gë0_sùhash
(c⁄° 
EVP_PKEY
 *
pkey
, 
size_t
 *
Àn
);

1014 #i‚de‡
OPENSSL_NO_RSA


1015 
rß_°
;

1016 
EVP_PKEY_£t1_RSA
(
EVP_PKEY
 *
pkey
, 
rß_°
 *
key
);

1017 
rß_°
 *
EVP_PKEY_gë0_RSA
(
EVP_PKEY
 *
pkey
);

1018 
rß_°
 *
EVP_PKEY_gë1_RSA
(
EVP_PKEY
 *
pkey
);

1020 #i‚de‡
OPENSSL_NO_DSA


1021 
dß_°
;

1022 
EVP_PKEY_£t1_DSA
(
EVP_PKEY
 *
pkey
, 
dß_°
 *
key
);

1023 
dß_°
 *
EVP_PKEY_gë0_DSA
(
EVP_PKEY
 *
pkey
);

1024 
dß_°
 *
EVP_PKEY_gë1_DSA
(
EVP_PKEY
 *
pkey
);

1026 #i‚de‡
OPENSSL_NO_DH


1027 
dh_°
;

1028 
EVP_PKEY_£t1_DH
(
EVP_PKEY
 *
pkey
, 
dh_°
 *
key
);

1029 
dh_°
 *
EVP_PKEY_gë0_DH
(
EVP_PKEY
 *
pkey
);

1030 
dh_°
 *
EVP_PKEY_gë1_DH
(
EVP_PKEY
 *
pkey
);

1032 #i‚de‡
OPENSSL_NO_EC


1033 
ec_key_°
;

1034 
EVP_PKEY_£t1_EC_KEY
(
EVP_PKEY
 *
pkey
, 
ec_key_°
 *
key
);

1035 
ec_key_°
 *
EVP_PKEY_gë0_EC_KEY
(
EVP_PKEY
 *
pkey
);

1036 
ec_key_°
 *
EVP_PKEY_gë1_EC_KEY
(
EVP_PKEY
 *
pkey
);

1039 
EVP_PKEY
 *
EVP_PKEY_√w
();

1040 
EVP_PKEY_up_ªf
(
EVP_PKEY
 *
pkey
);

1041 
EVP_PKEY_‰ì
(
EVP_PKEY
 *
pkey
);

1043 
EVP_PKEY
 *
d2i_PublicKey
(
ty≥
, EVP_PKEY **
a
, c⁄° **
µ
,

1044 
Àngth
);

1045 
i2d_PublicKey
(
EVP_PKEY
 *
a
, **
µ
);

1047 
EVP_PKEY
 *
d2i_Priv©eKey
(
ty≥
, EVP_PKEY **
a
, c⁄° **
µ
,

1048 
Àngth
);

1049 
EVP_PKEY
 *
d2i_AutoPriv©eKey
(EVP_PKEY **
a
, c⁄° **
µ
,

1050 
Àngth
);

1051 
i2d_Priv©eKey
(
EVP_PKEY
 *
a
, **
µ
);

1053 
EVP_PKEY_c›y_∑ømëîs
(
EVP_PKEY
 *
to
, c⁄° EVP_PKEY *
‰om
);

1054 
EVP_PKEY_missög_∑ømëîs
(c⁄° 
EVP_PKEY
 *
pkey
);

1055 
EVP_PKEY_ßve_∑ømëîs
(
EVP_PKEY
 *
pkey
, 
mode
);

1056 
EVP_PKEY_cmp_∑ømëîs
(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
);

1058 
EVP_PKEY_cmp
(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
);

1060 
EVP_PKEY_¥öt_public
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
,

1061 
ödít
, 
ASN1_PCTX
 *
p˘x
);

1062 
EVP_PKEY_¥öt_¥iv©e
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
,

1063 
ödít
, 
ASN1_PCTX
 *
p˘x
);

1064 
EVP_PKEY_¥öt_∑øms
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
,

1065 
ödít
, 
ASN1_PCTX
 *
p˘x
);

1067 
EVP_PKEY_gë_deÁu…_dige°_nid
(
EVP_PKEY
 *
pkey
, *
≤id
);

1069 
EVP_PKEY_£t1_és_ícodedpoöt
(
EVP_PKEY
 *
pkey
,

1070 c⁄° *
±
, 
size_t
 
±Àn
);

1071 
size_t
 
EVP_PKEY_gë1_és_ícodedpoöt
(
EVP_PKEY
 *
pkey
, **
µt
);

1073 
EVP_CIPHER_ty≥
(c⁄° 
EVP_CIPHER
 *
˘x
);

1076 
EVP_CIPHER_∑øm_to_a¢1
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

1077 
EVP_CIPHER_a¢1_to_∑øm
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

1080 
EVP_CIPHER_£t_a¢1_iv
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

1081 
EVP_CIPHER_gë_a¢1_iv
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

1084 
PKCS5_PBE_keyivgí
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
∑ss
, 
∑s¶í
,

1085 
ASN1_TYPE
 *
∑øm
, c⁄° 
EVP_CIPHER
 *
cùhî
,

1086 c⁄° 
EVP_MD
 *
md
, 
í_de
);

1087 
PKCS5_PBKDF2_HMAC_SHA1
(c⁄° *
∑ss
, 
∑s¶í
,

1088 c⁄° *
ß…
, 
ß…Àn
, 
ôî
,

1089 
keyÀn
, *
out
);

1090 
PKCS5_PBKDF2_HMAC
(c⁄° *
∑ss
, 
∑s¶í
,

1091 c⁄° *
ß…
, 
ß…Àn
, 
ôî
,

1092 c⁄° 
EVP_MD
 *
dige°
, 
keyÀn
, *
out
);

1093 
PKCS5_v2_PBE_keyivgí
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
∑ss
, 
∑s¶í
,

1094 
ASN1_TYPE
 *
∑øm
, c⁄° 
EVP_CIPHER
 *
cùhî
,

1095 c⁄° 
EVP_MD
 *
md
, 
í_de
);

1097 #i‚de‡
OPENSSL_NO_SCRYPT


1098 
EVP_PBE_s¸y±
(c⁄° *
∑ss
, 
size_t
 
∑s¶í
,

1099 c⁄° *
ß…
, 
size_t
 
ß…Àn
,

1100 
uöt64_t
 
N
, uöt64_à
r
, uöt64_à
p
, uöt64_à
maxmem
,

1101 *
key
, 
size_t
 
keyÀn
);

1103 
PKCS5_v2_s¸y±_keyivgí
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
∑ss
,

1104 
∑s¶í
, 
ASN1_TYPE
 *
∑øm
,

1105 c⁄° 
EVP_CIPHER
 *
c
, c⁄° 
EVP_MD
 *
md
, 
í_de
);

1108 
PKCS5_PBE_add
();

1110 
EVP_PBE_CùhîInô
(
ASN1_OBJECT
 *
pbe_obj
, c⁄° *
∑ss
, 
∑s¶í
,

1111 
ASN1_TYPE
 *
∑øm
, 
EVP_CIPHER_CTX
 *
˘x
, 
í_de
);

1116 
	#EVP_PBE_TYPE_OUTER
 0x0

	)

1118 
	#EVP_PBE_TYPE_PRF
 0x1

	)

1120 
	#EVP_PBE_TYPE_KDF
 0x2

	)

1122 
EVP_PBE_Æg_add_ty≥
(
pbe_ty≥
, 
pbe_nid
, 
cùhî_nid
,

1123 
md_nid
, 
EVP_PBE_KEYGEN
 *
keygí
);

1124 
EVP_PBE_Æg_add
(
nid
, c⁄° 
EVP_CIPHER
 *
cùhî
, c⁄° 
EVP_MD
 *
md
,

1125 
EVP_PBE_KEYGEN
 *
keygí
);

1126 
EVP_PBE_föd
(
ty≥
, 
pbe_nid
, *
p˙id
, *
pmnid
,

1127 
EVP_PBE_KEYGEN
 **
pkeygí
);

1128 
EVP_PBE_˛ónup
();

1129 
EVP_PBE_gë
(*
±y≥
, *
µbe_nid
, 
size_t
 
num
);

1131 
	#ASN1_PKEY_ALIAS
 0x1

	)

1132 
	#ASN1_PKEY_DYNAMIC
 0x2

	)

1133 
	#ASN1_PKEY_SIGPARAM_NULL
 0x4

	)

1135 
	#ASN1_PKEY_CTRL_PKCS7_SIGN
 0x1

	)

1136 
	#ASN1_PKEY_CTRL_PKCS7_ENCRYPT
 0x2

	)

1137 
	#ASN1_PKEY_CTRL_DEFAULT_MD_NID
 0x3

	)

1138 
	#ASN1_PKEY_CTRL_CMS_SIGN
 0x5

	)

1139 
	#ASN1_PKEY_CTRL_CMS_ENVELOPE
 0x7

	)

1140 
	#ASN1_PKEY_CTRL_CMS_RI_TYPE
 0x8

	)

1142 
	#ASN1_PKEY_CTRL_SET1_TLS_ENCPT
 0x9

	)

1143 
	#ASN1_PKEY_CTRL_GET1_TLS_ENCPT
 0xa

	)

1145 
EVP_PKEY_a¢1_gë_cou¡
();

1146 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_gë0
(
idx
);

1147 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_föd
(
ENGINE
 **
≥
, 
ty≥
);

1148 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_föd_°r
(
ENGINE
 **
≥
,

1149 c⁄° *
°r
, 
Àn
);

1150 
EVP_PKEY_a¢1_add0
(c⁄° 
EVP_PKEY_ASN1_METHOD
 *
amëh
);

1151 
EVP_PKEY_a¢1_add_Æüs
(
to
, 
‰om
);

1152 
EVP_PKEY_a¢1_gë0_öfo
(*
µkey_id
, *
pkey_ba£_id
,

1153 *
µkey_Êags
, c⁄° **
pöfo
,

1154 c⁄° **
µem_°r
,

1155 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
amëh
);

1157 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_gë0_a¢1
(c⁄° 
EVP_PKEY
 *
pkey
);

1158 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_√w
(
id
, 
Êags
,

1159 c⁄° *
≥m_°r
,

1160 c⁄° *
öfo
);

1161 
EVP_PKEY_a¢1_c›y
(
EVP_PKEY_ASN1_METHOD
 *
d°
,

1162 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
§c
);

1163 
EVP_PKEY_a¢1_‰ì
(
EVP_PKEY_ASN1_METHOD
 *
amëh
);

1164 
EVP_PKEY_a¢1_£t_public
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1165 (*
pub_decode
Ë(
EVP_PKEY
 *
pk
,

1166 
X509_PUBKEY
 *
pub
),

1167 (*
pub_ícode
Ë(
X509_PUBKEY
 *
pub
,

1168 c⁄° 
EVP_PKEY
 *
pk
),

1169 (*
pub_cmp
Ë(c⁄° 
EVP_PKEY
 *
a
,

1170 c⁄° 
EVP_PKEY
 *
b
),

1171 (*
pub_¥öt
Ë(
BIO
 *
out
,

1172 c⁄° 
EVP_PKEY
 *
pkey
,

1173 
ödít
, 
ASN1_PCTX
 *
p˘x
),

1174 (*
pkey_size
Ë(c⁄° 
EVP_PKEY
 *
pk
),

1175 (*
pkey_bôs
Ë(c⁄° 
EVP_PKEY
 *
pk
));

1176 
EVP_PKEY_a¢1_£t_¥iv©e
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1177 (*
¥iv_decode
Ë(
EVP_PKEY
 *
pk
,

1178 c⁄° 
PKCS8_PRIV_KEY_INFO


1179 *
p8öf
),

1180 (*
¥iv_ícode
Ë(
PKCS8_PRIV_KEY_INFO
 *
p8
,

1181 c⁄° 
EVP_PKEY
 *
pk
),

1182 (*
¥iv_¥öt
Ë(
BIO
 *
out
,

1183 c⁄° 
EVP_PKEY
 *
pkey
,

1184 
ödít
,

1185 
ASN1_PCTX
 *
p˘x
));

1186 
EVP_PKEY_a¢1_£t_∑øm
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1187 (*
∑øm_decode
Ë(
EVP_PKEY
 *
pkey
,

1188 c⁄° **
pdî
,

1189 
dîÀn
),

1190 (*
∑øm_ícode
Ë(c⁄° 
EVP_PKEY
 *
pkey
,

1191 **
pdî
),

1192 (*
∑øm_missög
Ë(c⁄° 
EVP_PKEY
 *
pk
),

1193 (*
∑øm_c›y
Ë(
EVP_PKEY
 *
to
,

1194 c⁄° 
EVP_PKEY
 *
‰om
),

1195 (*
∑øm_cmp
Ë(c⁄° 
EVP_PKEY
 *
a
,

1196 c⁄° 
EVP_PKEY
 *
b
),

1197 (*
∑øm_¥öt
Ë(
BIO
 *
out
,

1198 c⁄° 
EVP_PKEY
 *
pkey
,

1199 
ödít
,

1200 
ASN1_PCTX
 *
p˘x
));

1202 
EVP_PKEY_a¢1_£t_‰ì
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1203 (*
pkey_‰ì
Ë(
EVP_PKEY
 *
pkey
));

1204 
EVP_PKEY_a¢1_£t_˘æ
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1205 (*
pkey_˘æ
Ë(
EVP_PKEY
 *
pkey
, 
›
,

1206 
¨g1
, *
¨g2
));

1207 
EVP_PKEY_a¢1_£t_ôem
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1208 (*
ôem_vîify
Ë(
EVP_MD_CTX
 *
˘x
,

1209 c⁄° 
ASN1_ITEM
 *
ô
,

1210 *
a¢
,

1211 
X509_ALGOR
 *
a
,

1212 
ASN1_BIT_STRING
 *
sig
,

1213 
EVP_PKEY
 *
pkey
),

1214 (*
ôem_sign
Ë(
EVP_MD_CTX
 *
˘x
,

1215 c⁄° 
ASN1_ITEM
 *
ô
,

1216 *
a¢
,

1217 
X509_ALGOR
 *
Æg1
,

1218 
X509_ALGOR
 *
Æg2
,

1219 
ASN1_BIT_STRING
 *
sig
));

1221 
EVP_PKEY_a¢1_£t_sigöf
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1222 (*
sigöf_£t
Ë(
X509_SIG_INFO
 *
sigöf
,

1223 c⁄° 
X509_ALGOR
 *
Æg
,

1224 c⁄° 
ASN1_STRING
 *
sig
));

1226 
EVP_PKEY_a¢1_£t_check
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1227 (*
pkey_check
Ë(c⁄° 
EVP_PKEY
 *
pk
));

1229 
EVP_PKEY_a¢1_£t_public_check
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1230 (*
pkey_pub_check
Ë(c⁄° 
EVP_PKEY
 *
pk
));

1232 
EVP_PKEY_a¢1_£t_∑øm_check
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1233 (*
pkey_∑øm_check
Ë(c⁄° 
EVP_PKEY
 *
pk
));

1235 
EVP_PKEY_a¢1_£t_£t_¥iv_key
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1236 (*
£t_¥iv_key
Ë(
EVP_PKEY
 *
pk
,

1238 *
¥iv
,

1239 
size_t
 
Àn
));

1240 
EVP_PKEY_a¢1_£t_£t_pub_key
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1241 (*
£t_pub_key
Ë(
EVP_PKEY
 *
pk
,

1242 c⁄° *
pub
,

1243 
size_t
 
Àn
));

1244 
EVP_PKEY_a¢1_£t_gë_¥iv_key
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1245 (*
gë_¥iv_key
Ë(c⁄° 
EVP_PKEY
 *
pk
,

1246 *
¥iv
,

1247 
size_t
 *
Àn
));

1248 
EVP_PKEY_a¢1_£t_gë_pub_key
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1249 (*
gë_pub_key
Ë(c⁄° 
EVP_PKEY
 *
pk
,

1250 *
pub
,

1251 
size_t
 *
Àn
));

1253 
EVP_PKEY_a¢1_£t_£curôy_bôs
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1254 (*
pkey_£curôy_bôs
Ë(c⁄° 
EVP_PKEY


1255 *
pk
));

1257 
	#EVP_PKEY_OP_UNDEFINED
 0

	)

1258 
	#EVP_PKEY_OP_PARAMGEN
 (1<<1)

	)

1259 
	#EVP_PKEY_OP_KEYGEN
 (1<<2)

	)

1260 
	#EVP_PKEY_OP_SIGN
 (1<<3)

	)

1261 
	#EVP_PKEY_OP_VERIFY
 (1<<4)

	)

1262 
	#EVP_PKEY_OP_VERIFYRECOVER
 (1<<5)

	)

1263 
	#EVP_PKEY_OP_SIGNCTX
 (1<<6)

	)

1264 
	#EVP_PKEY_OP_VERIFYCTX
 (1<<7)

	)

1265 
	#EVP_PKEY_OP_ENCRYPT
 (1<<8)

	)

1266 
	#EVP_PKEY_OP_DECRYPT
 (1<<9)

	)

1267 
	#EVP_PKEY_OP_DERIVE
 (1<<10)

	)

1269 
	#EVP_PKEY_OP_TYPE_SIG
 \

1270 (
EVP_PKEY_OP_SIGN
 | 
EVP_PKEY_OP_VERIFY
 | 
EVP_PKEY_OP_VERIFYRECOVER
 \

1271 | 
EVP_PKEY_OP_SIGNCTX
 | 
EVP_PKEY_OP_VERIFYCTX
)

	)

1273 
	#EVP_PKEY_OP_TYPE_CRYPT
 \

1274 (
EVP_PKEY_OP_ENCRYPT
 | 
EVP_PKEY_OP_DECRYPT
)

	)

1276 
	#EVP_PKEY_OP_TYPE_NOGEN
 \

1277 (
EVP_PKEY_OP_TYPE_SIG
 | 
EVP_PKEY_OP_TYPE_CRYPT
 | 
EVP_PKEY_OP_DERIVE
)

	)

1279 
	#EVP_PKEY_OP_TYPE_GEN
 \

1280 (
EVP_PKEY_OP_PARAMGEN
 | 
EVP_PKEY_OP_KEYGEN
)

	)

1282 
	#EVP_PKEY_CTX_£t_sig«tuª_md
(
˘x
, 
md
) \

1283 
	`EVP_PKEY_CTX_˘æ
(
˘x
, -1, 
EVP_PKEY_OP_TYPE_SIG
, \

1284 
EVP_PKEY_CTRL_MD
, 0, (*)(
md
))

	)

1286 
	#EVP_PKEY_CTX_gë_sig«tuª_md
(
˘x
, 
pmd
) \

1287 
	`EVP_PKEY_CTX_˘æ
(
˘x
, -1, 
EVP_PKEY_OP_TYPE_SIG
, \

1288 
EVP_PKEY_CTRL_GET_MD
, 0, (*)(
pmd
))

	)

1290 
	#EVP_PKEY_CTX_£t_mac_key
(
˘x
, 
key
, 
Àn
) \

1291 
	`EVP_PKEY_CTX_˘æ
(
˘x
, -1, 
EVP_PKEY_OP_KEYGEN
, \

1292 
EVP_PKEY_CTRL_SET_MAC_KEY
, 
Àn
, (*)(
key
))

	)

1294 
	#EVP_PKEY_CTRL_MD
 1

	)

1295 
	#EVP_PKEY_CTRL_PEER_KEY
 2

	)

1297 
	#EVP_PKEY_CTRL_PKCS7_ENCRYPT
 3

	)

1298 
	#EVP_PKEY_CTRL_PKCS7_DECRYPT
 4

	)

1300 
	#EVP_PKEY_CTRL_PKCS7_SIGN
 5

	)

1302 
	#EVP_PKEY_CTRL_SET_MAC_KEY
 6

	)

1304 
	#EVP_PKEY_CTRL_DIGESTINIT
 7

	)

1307 
	#EVP_PKEY_CTRL_SET_IV
 8

	)

1309 
	#EVP_PKEY_CTRL_CMS_ENCRYPT
 9

	)

1310 
	#EVP_PKEY_CTRL_CMS_DECRYPT
 10

	)

1311 
	#EVP_PKEY_CTRL_CMS_SIGN
 11

	)

1313 
	#EVP_PKEY_CTRL_CIPHER
 12

	)

1315 
	#EVP_PKEY_CTRL_GET_MD
 13

	)

1317 
	#EVP_PKEY_CTRL_SET_DIGEST_SIZE
 14

	)

1319 
	#EVP_PKEY_ALG_CTRL
 0x1000

	)

1321 
	#EVP_PKEY_FLAG_AUTOARGLEN
 2

	)

1325 
	#EVP_PKEY_FLAG_SIGCTX_CUSTOM
 4

	)

1327 c⁄° 
EVP_PKEY_METHOD
 *
EVP_PKEY_mëh_föd
(
ty≥
);

1328 
EVP_PKEY_METHOD
 *
EVP_PKEY_mëh_√w
(
id
, 
Êags
);

1329 
EVP_PKEY_mëh_gë0_öfo
(*
µkey_id
, *
pÊags
,

1330 c⁄° 
EVP_PKEY_METHOD
 *
mëh
);

1331 
EVP_PKEY_mëh_c›y
(
EVP_PKEY_METHOD
 *
d°
, c⁄° EVP_PKEY_METHOD *
§c
);

1332 
EVP_PKEY_mëh_‰ì
(
EVP_PKEY_METHOD
 *
pmëh
);

1333 
EVP_PKEY_mëh_add0
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
);

1334 
EVP_PKEY_mëh_ªmove
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
);

1335 
size_t
 
EVP_PKEY_mëh_gë_cou¡
();

1336 c⁄° 
EVP_PKEY_METHOD
 *
EVP_PKEY_mëh_gë0
(
size_t
 
idx
);

1338 
EVP_PKEY_CTX
 *
EVP_PKEY_CTX_√w
(
EVP_PKEY
 *
pkey
, 
ENGINE
 *
e
);

1339 
EVP_PKEY_CTX
 *
EVP_PKEY_CTX_√w_id
(
id
, 
ENGINE
 *
e
);

1340 
EVP_PKEY_CTX
 *
EVP_PKEY_CTX_dup
(EVP_PKEY_CTX *
˘x
);

1341 
EVP_PKEY_CTX_‰ì
(
EVP_PKEY_CTX
 *
˘x
);

1343 
EVP_PKEY_CTX_˘æ
(
EVP_PKEY_CTX
 *
˘x
, 
keyty≥
, 
›ty≥
,

1344 
cmd
, 
p1
, *
p2
);

1345 
EVP_PKEY_CTX_˘æ_°r
(
EVP_PKEY_CTX
 *
˘x
, c⁄° *
ty≥
,

1346 c⁄° *
vÆue
);

1347 
EVP_PKEY_CTX_˘æ_uöt64
(
EVP_PKEY_CTX
 *
˘x
, 
keyty≥
, 
›ty≥
,

1348 
cmd
, 
uöt64_t
 
vÆue
);

1350 
EVP_PKEY_CTX_°r2˘æ
(
EVP_PKEY_CTX
 *
˘x
, 
cmd
, c⁄° *
°r
);

1351 
EVP_PKEY_CTX_hex2˘æ
(
EVP_PKEY_CTX
 *
˘x
, 
cmd
, c⁄° *
hex
);

1353 
EVP_PKEY_CTX_md
(
EVP_PKEY_CTX
 *
˘x
, 
›ty≥
, 
cmd
, c⁄° *
md
);

1355 
EVP_PKEY_CTX_gë_›î©i⁄
(
EVP_PKEY_CTX
 *
˘x
);

1356 
EVP_PKEY_CTX_£t0_keygí_öfo
(
EVP_PKEY_CTX
 *
˘x
, *
d©
, 
d©Àn
);

1358 
EVP_PKEY
 *
EVP_PKEY_√w_mac_key
(
ty≥
, 
ENGINE
 *
e
,

1359 c⁄° *
key
, 
keyÀn
);

1360 
EVP_PKEY
 *
EVP_PKEY_√w_øw_¥iv©e_key
(
ty≥
, 
ENGINE
 *
e
,

1361 c⁄° *
¥iv
,

1362 
size_t
 
Àn
);

1363 
EVP_PKEY
 *
EVP_PKEY_√w_øw_public_key
(
ty≥
, 
ENGINE
 *
e
,

1364 c⁄° *
pub
,

1365 
size_t
 
Àn
);

1366 
EVP_PKEY_gë_øw_¥iv©e_key
(c⁄° 
EVP_PKEY
 *
pkey
, *
¥iv
,

1367 
size_t
 *
Àn
);

1368 
EVP_PKEY_gë_øw_public_key
(c⁄° 
EVP_PKEY
 *
pkey
, *
pub
,

1369 
size_t
 *
Àn
);

1371 
EVP_PKEY
 *
EVP_PKEY_√w_CMAC_key
(
ENGINE
 *
e
, c⁄° *
¥iv
,

1372 
size_t
 
Àn
, c⁄° 
EVP_CIPHER
 *
cùhî
);

1374 
EVP_PKEY_CTX_£t_d©a
(
EVP_PKEY_CTX
 *
˘x
, *
d©a
);

1375 *
EVP_PKEY_CTX_gë_d©a
(
EVP_PKEY_CTX
 *
˘x
);

1376 
EVP_PKEY
 *
EVP_PKEY_CTX_gë0_pkey
(
EVP_PKEY_CTX
 *
˘x
);

1378 
EVP_PKEY
 *
EVP_PKEY_CTX_gë0_≥îkey
(
EVP_PKEY_CTX
 *
˘x
);

1380 
EVP_PKEY_CTX_£t_≠p_d©a
(
EVP_PKEY_CTX
 *
˘x
, *
d©a
);

1381 *
EVP_PKEY_CTX_gë_≠p_d©a
(
EVP_PKEY_CTX
 *
˘x
);

1383 
EVP_PKEY_sign_öô
(
EVP_PKEY_CTX
 *
˘x
);

1384 
EVP_PKEY_sign
(
EVP_PKEY_CTX
 *
˘x
,

1385 *
sig
, 
size_t
 *
sigÀn
,

1386 c⁄° *
tbs
, 
size_t
 
tb¶í
);

1387 
EVP_PKEY_vîify_öô
(
EVP_PKEY_CTX
 *
˘x
);

1388 
EVP_PKEY_vîify
(
EVP_PKEY_CTX
 *
˘x
,

1389 c⁄° *
sig
, 
size_t
 
sigÀn
,

1390 c⁄° *
tbs
, 
size_t
 
tb¶í
);

1391 
EVP_PKEY_vîify_ªcovî_öô
(
EVP_PKEY_CTX
 *
˘x
);

1392 
EVP_PKEY_vîify_ªcovî
(
EVP_PKEY_CTX
 *
˘x
,

1393 *
rout
, 
size_t
 *
rouéí
,

1394 c⁄° *
sig
, 
size_t
 
sigÀn
);

1395 
EVP_PKEY_í¸y±_öô
(
EVP_PKEY_CTX
 *
˘x
);

1396 
EVP_PKEY_í¸y±
(
EVP_PKEY_CTX
 *
˘x
,

1397 *
out
, 
size_t
 *
ouéí
,

1398 c⁄° *
ö
, 
size_t
 
öÀn
);

1399 
EVP_PKEY_de¸y±_öô
(
EVP_PKEY_CTX
 *
˘x
);

1400 
EVP_PKEY_de¸y±
(
EVP_PKEY_CTX
 *
˘x
,

1401 *
out
, 
size_t
 *
ouéí
,

1402 c⁄° *
ö
, 
size_t
 
öÀn
);

1404 
EVP_PKEY_dîive_öô
(
EVP_PKEY_CTX
 *
˘x
);

1405 
EVP_PKEY_dîive_£t_≥î
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 *
≥î
);

1406 
EVP_PKEY_dîive
(
EVP_PKEY_CTX
 *
˘x
, *
key
, 
size_t
 *
keyÀn
);

1408 
	tEVP_PKEY_gí_cb
(
	tEVP_PKEY_CTX
 *
	t˘x
);

1410 
EVP_PKEY_∑ømgí_öô
(
EVP_PKEY_CTX
 *
˘x
);

1411 
EVP_PKEY_∑ømgí
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 **
µkey
);

1412 
EVP_PKEY_keygí_öô
(
EVP_PKEY_CTX
 *
˘x
);

1413 
EVP_PKEY_keygí
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 **
µkey
);

1414 
EVP_PKEY_check
(
EVP_PKEY_CTX
 *
˘x
);

1415 
EVP_PKEY_public_check
(
EVP_PKEY_CTX
 *
˘x
);

1416 
EVP_PKEY_∑øm_check
(
EVP_PKEY_CTX
 *
˘x
);

1418 
EVP_PKEY_CTX_£t_cb
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY_gí_cb
 *
cb
);

1419 
EVP_PKEY_gí_cb
 *
EVP_PKEY_CTX_gë_cb
(
EVP_PKEY_CTX
 *
˘x
);

1421 
EVP_PKEY_CTX_gë_keygí_öfo
(
EVP_PKEY_CTX
 *
˘x
, 
idx
);

1423 
EVP_PKEY_mëh_£t_öô
(
EVP_PKEY_METHOD
 *
pmëh
,

1424 (*
öô
Ë(
EVP_PKEY_CTX
 *
˘x
));

1426 
EVP_PKEY_mëh_£t_c›y
(
EVP_PKEY_METHOD
 *
pmëh
,

1427 (*
c›y
Ë(
EVP_PKEY_CTX
 *
d°
,

1428 
EVP_PKEY_CTX
 *
§c
));

1430 
EVP_PKEY_mëh_£t_˛ónup
(
EVP_PKEY_METHOD
 *
pmëh
,

1431 (*
˛ónup
Ë(
EVP_PKEY_CTX
 *
˘x
));

1433 
EVP_PKEY_mëh_£t_∑ømgí
(
EVP_PKEY_METHOD
 *
pmëh
,

1434 (*
∑ømgí_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1435 (*
∑ømgí
Ë(
EVP_PKEY_CTX
 *
˘x
,

1436 
EVP_PKEY
 *
pkey
));

1438 
EVP_PKEY_mëh_£t_keygí
(
EVP_PKEY_METHOD
 *
pmëh
,

1439 (*
keygí_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1440 (*
keygí
Ë(
EVP_PKEY_CTX
 *
˘x
,

1441 
EVP_PKEY
 *
pkey
));

1443 
EVP_PKEY_mëh_£t_sign
(
EVP_PKEY_METHOD
 *
pmëh
,

1444 (*
sign_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1445 (*
sign
Ë(
EVP_PKEY_CTX
 *
˘x
,

1446 *
sig
, 
size_t
 *
sigÀn
,

1447 c⁄° *
tbs
,

1448 
size_t
 
tb¶í
));

1450 
EVP_PKEY_mëh_£t_vîify
(
EVP_PKEY_METHOD
 *
pmëh
,

1451 (*
vîify_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1452 (*
vîify
Ë(
EVP_PKEY_CTX
 *
˘x
,

1453 c⁄° *
sig
,

1454 
size_t
 
sigÀn
,

1455 c⁄° *
tbs
,

1456 
size_t
 
tb¶í
));

1458 
EVP_PKEY_mëh_£t_vîify_ªcovî
(
EVP_PKEY_METHOD
 *
pmëh
,

1459 (*
vîify_ªcovî_öô
Ë(
EVP_PKEY_CTX


1460 *
˘x
),

1461 (*
vîify_ªcovî
Ë(
EVP_PKEY_CTX


1462 *
˘x
,

1464 *
sig
,

1465 
size_t
 *
sigÀn
,

1467 *
tbs
,

1468 
size_t
 
tb¶í
));

1470 
EVP_PKEY_mëh_£t_sign˘x
(
EVP_PKEY_METHOD
 *
pmëh
,

1471 (*
sign˘x_öô
Ë(
EVP_PKEY_CTX
 *
˘x
,

1472 
EVP_MD_CTX
 *
m˘x
),

1473 (*
sign˘x
Ë(
EVP_PKEY_CTX
 *
˘x
,

1474 *
sig
,

1475 
size_t
 *
sigÀn
,

1476 
EVP_MD_CTX
 *
m˘x
));

1478 
EVP_PKEY_mëh_£t_vîify˘x
(
EVP_PKEY_METHOD
 *
pmëh
,

1479 (*
vîify˘x_öô
Ë(
EVP_PKEY_CTX
 *
˘x
,

1480 
EVP_MD_CTX
 *
m˘x
),

1481 (*
vîify˘x
Ë(
EVP_PKEY_CTX
 *
˘x
,

1482 c⁄° *
sig
,

1483 
sigÀn
,

1484 
EVP_MD_CTX
 *
m˘x
));

1486 
EVP_PKEY_mëh_£t_í¸y±
(
EVP_PKEY_METHOD
 *
pmëh
,

1487 (*
í¸y±_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1488 (*
í¸y±‚
Ë(
EVP_PKEY_CTX
 *
˘x
,

1489 *
out
,

1490 
size_t
 *
ouéí
,

1491 c⁄° *
ö
,

1492 
size_t
 
öÀn
));

1494 
EVP_PKEY_mëh_£t_de¸y±
(
EVP_PKEY_METHOD
 *
pmëh
,

1495 (*
de¸y±_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1496 (*
de¸y±
Ë(
EVP_PKEY_CTX
 *
˘x
,

1497 *
out
,

1498 
size_t
 *
ouéí
,

1499 c⁄° *
ö
,

1500 
size_t
 
öÀn
));

1502 
EVP_PKEY_mëh_£t_dîive
(
EVP_PKEY_METHOD
 *
pmëh
,

1503 (*
dîive_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1504 (*
dîive
Ë(
EVP_PKEY_CTX
 *
˘x
,

1505 *
key
,

1506 
size_t
 *
keyÀn
));

1508 
EVP_PKEY_mëh_£t_˘æ
(
EVP_PKEY_METHOD
 *
pmëh
,

1509 (*
˘æ
Ë(
EVP_PKEY_CTX
 *
˘x
, 
ty≥
, 
p1
,

1510 *
p2
),

1511 (*
˘æ_°r
Ë(
EVP_PKEY_CTX
 *
˘x
,

1512 c⁄° *
ty≥
,

1513 c⁄° *
vÆue
));

1515 
EVP_PKEY_mëh_£t_dige°sign
(
EVP_PKEY_METHOD
 *
pmëh
,

1516 (*
dige°sign
Ë(
EVP_MD_CTX
 *
˘x
,

1517 *
sig
,

1518 
size_t
 *
sigÀn
,

1519 c⁄° *
tbs
,

1520 
size_t
 
tb¶í
));

1522 
EVP_PKEY_mëh_£t_dige°vîify
(
EVP_PKEY_METHOD
 *
pmëh
,

1523 (*
dige°vîify
Ë(
EVP_MD_CTX
 *
˘x
,

1524 c⁄° *
sig
,

1525 
size_t
 
sigÀn
,

1526 c⁄° *
tbs
,

1527 
size_t
 
tb¶í
));

1529 
EVP_PKEY_mëh_£t_check
(
EVP_PKEY_METHOD
 *
pmëh
,

1530 (*
check
Ë(
EVP_PKEY
 *
pkey
));

1532 
EVP_PKEY_mëh_£t_public_check
(
EVP_PKEY_METHOD
 *
pmëh
,

1533 (*
check
Ë(
EVP_PKEY
 *
pkey
));

1535 
EVP_PKEY_mëh_£t_∑øm_check
(
EVP_PKEY_METHOD
 *
pmëh
,

1536 (*
check
Ë(
EVP_PKEY
 *
pkey
));

1538 
EVP_PKEY_mëh_£t_dige°_cu°om
(
EVP_PKEY_METHOD
 *
pmëh
,

1539 (*
dige°_cu°om
Ë(
EVP_PKEY_CTX
 *
˘x
,

1540 
EVP_MD_CTX
 *
m˘x
));

1542 
EVP_PKEY_mëh_gë_öô
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1543 (**
pöô
Ë(
EVP_PKEY_CTX
 *
˘x
));

1545 
EVP_PKEY_mëh_gë_c›y
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1546 (**
pc›y
Ë(
EVP_PKEY_CTX
 *
d°
,

1547 
EVP_PKEY_CTX
 *
§c
));

1549 
EVP_PKEY_mëh_gë_˛ónup
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1550 (**
p˛ónup
Ë(
EVP_PKEY_CTX
 *
˘x
));

1552 
EVP_PKEY_mëh_gë_∑ømgí
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1553 (**
µ¨amgí_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1554 (**
µ¨amgí
Ë(
EVP_PKEY_CTX
 *
˘x
,

1555 
EVP_PKEY
 *
pkey
));

1557 
EVP_PKEY_mëh_gë_keygí
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1558 (**
pkeygí_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1559 (**
pkeygí
Ë(
EVP_PKEY_CTX
 *
˘x
,

1560 
EVP_PKEY
 *
pkey
));

1562 
EVP_PKEY_mëh_gë_sign
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1563 (**
psign_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1564 (**
psign
Ë(
EVP_PKEY_CTX
 *
˘x
,

1565 *
sig
, 
size_t
 *
sigÀn
,

1566 c⁄° *
tbs
,

1567 
size_t
 
tb¶í
));

1569 
EVP_PKEY_mëh_gë_vîify
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1570 (**
pvîify_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1571 (**
pvîify
Ë(
EVP_PKEY_CTX
 *
˘x
,

1572 c⁄° *
sig
,

1573 
size_t
 
sigÀn
,

1574 c⁄° *
tbs
,

1575 
size_t
 
tb¶í
));

1577 
EVP_PKEY_mëh_gë_vîify_ªcovî
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1578 (**
pvîify_ªcovî_öô
Ë(
EVP_PKEY_CTX


1579 *
˘x
),

1580 (**
pvîify_ªcovî
Ë(
EVP_PKEY_CTX


1581 *
˘x
,

1583 *
sig
,

1584 
size_t
 *
sigÀn
,

1586 *
tbs
,

1587 
size_t
 
tb¶í
));

1589 
EVP_PKEY_mëh_gë_sign˘x
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1590 (**
psign˘x_öô
Ë(
EVP_PKEY_CTX
 *
˘x
,

1591 
EVP_MD_CTX
 *
m˘x
),

1592 (**
psign˘x
Ë(
EVP_PKEY_CTX
 *
˘x
,

1593 *
sig
,

1594 
size_t
 *
sigÀn
,

1595 
EVP_MD_CTX
 *
m˘x
));

1597 
EVP_PKEY_mëh_gë_vîify˘x
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1598 (**
pvîify˘x_öô
Ë(
EVP_PKEY_CTX
 *
˘x
,

1599 
EVP_MD_CTX
 *
m˘x
),

1600 (**
pvîify˘x
Ë(
EVP_PKEY_CTX
 *
˘x
,

1601 c⁄° *
sig
,

1602 
sigÀn
,

1603 
EVP_MD_CTX
 *
m˘x
));

1605 
EVP_PKEY_mëh_gë_í¸y±
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1606 (**
≥n¸y±_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1607 (**
≥n¸y±‚
Ë(
EVP_PKEY_CTX
 *
˘x
,

1608 *
out
,

1609 
size_t
 *
ouéí
,

1610 c⁄° *
ö
,

1611 
size_t
 
öÀn
));

1613 
EVP_PKEY_mëh_gë_de¸y±
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1614 (**
pde¸y±_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1615 (**
pde¸y±
Ë(
EVP_PKEY_CTX
 *
˘x
,

1616 *
out
,

1617 
size_t
 *
ouéí
,

1618 c⁄° *
ö
,

1619 
size_t
 
öÀn
));

1621 
EVP_PKEY_mëh_gë_dîive
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1622 (**
pdîive_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1623 (**
pdîive
Ë(
EVP_PKEY_CTX
 *
˘x
,

1624 *
key
,

1625 
size_t
 *
keyÀn
));

1627 
EVP_PKEY_mëh_gë_˘æ
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1628 (**
p˘æ
Ë(
EVP_PKEY_CTX
 *
˘x
, 
ty≥
, 
p1
,

1629 *
p2
),

1630 (**
p˘æ_°r
Ë(
EVP_PKEY_CTX
 *
˘x
,

1631 c⁄° *
ty≥
,

1632 c⁄° *
vÆue
));

1634 
EVP_PKEY_mëh_gë_dige°sign
(
EVP_PKEY_METHOD
 *
pmëh
,

1635 (**
dige°sign
Ë(
EVP_MD_CTX
 *
˘x
,

1636 *
sig
,

1637 
size_t
 *
sigÀn
,

1638 c⁄° *
tbs
,

1639 
size_t
 
tb¶í
));

1641 
EVP_PKEY_mëh_gë_dige°vîify
(
EVP_PKEY_METHOD
 *
pmëh
,

1642 (**
dige°vîify
Ë(
EVP_MD_CTX
 *
˘x
,

1643 c⁄° *
sig
,

1644 
size_t
 
sigÀn
,

1645 c⁄° *
tbs
,

1646 
size_t
 
tb¶í
));

1648 
EVP_PKEY_mëh_gë_check
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1649 (**
pcheck
Ë(
EVP_PKEY
 *
pkey
));

1651 
EVP_PKEY_mëh_gë_public_check
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1652 (**
pcheck
Ë(
EVP_PKEY
 *
pkey
));

1654 
EVP_PKEY_mëh_gë_∑øm_check
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1655 (**
pcheck
Ë(
EVP_PKEY
 *
pkey
));

1657 
EVP_PKEY_mëh_gë_dige°_cu°om
(
EVP_PKEY_METHOD
 *
pmëh
,

1658 (**
pdige°_cu°om
Ë(
EVP_PKEY_CTX
 *
˘x
,

1659 
EVP_MD_CTX
 *
m˘x
));

1660 
EVP_add_Æg_moduÀ
();

1663 #ifde‡ 
__˝lu•lus


	@/usr/include/paths.h

32 #i‚de‡
_PATHS_H_


33 
	#_PATHS_H_


	)

36 
	#_PATH_DEFPATH
 "/u§/bö:/bö"

	)

38 
	#_PATH_STDPATH
 \

39 "/u§/bö:/bö:/u§/sbö:/sbö"

	)

41 
	#_PATH_BSHELL
 "/bö/sh"

	)

42 
	#_PATH_CONSOLE
 "/dev/c⁄sﬁe"

	)

43 
	#_PATH_CSHELL
 "/bö/csh"

	)

44 
	#_PATH_DEVDB
 "/v¨/run/dev.db"

	)

45 
	#_PATH_DEVNULL
 "/dev/nuŒ"

	)

46 
	#_PATH_DRUM
 "/dev/drum"

	)

47 
	#_PATH_GSHADOW
 "/ëc/gshadow"

	)

48 
	#_PATH_KLOG
 "/¥oc/kmsg"

	)

49 
	#_PATH_KMEM
 "/dev/kmem"

	)

50 
	#_PATH_LASTLOG
 "/v¨/log/œ°log"

	)

51 
	#_PATH_MAILDIR
 "/v¨/maû"

	)

52 
	#_PATH_MAN
 "/u§/sh¨e/m™"

	)

53 
	#_PATH_MEM
 "/dev/mem"

	)

54 
	#_PATH_MNTTAB
 "/ëc/f°ab"

	)

55 
	#_PATH_MOUNTED
 "/ëc/mèb"

	)

56 
	#_PATH_NOLOGIN
 "/ëc/nﬁogö"

	)

57 
	#_PATH_PRESERVE
 "/v¨/lib"

	)

58 
	#_PATH_RWHODIR
 "/v¨/•oﬁ/rwho"

	)

59 
	#_PATH_SENDMAIL
 "/u§/sbö/£ndmaû"

	)

60 
	#_PATH_SHADOW
 "/ëc/shadow"

	)

61 
	#_PATH_SHELLS
 "/ëc/shñls"

	)

62 
	#_PATH_TTY
 "/dev/ây"

	)

63 
	#_PATH_UNIX
 "/boŸ/vmlöux"

	)

64 
	#_PATH_UTMP
 "/v¨/run/utmp"

	)

65 
	#_PATH_VI
 "/u§/bö/vi"

	)

66 
	#_PATH_WTMP
 "/v¨/log/wtmp"

	)

69 
	#_PATH_DEV
 "/dev/"

	)

70 
	#_PATH_TMP
 "/tmp/"

	)

71 
	#_PATH_VARDB
 "/v¨/lib/misc/"

	)

72 
	#_PATH_VARRUN
 "/v¨/run/"

	)

73 
	#_PATH_VARTMP
 "/v¨/tmp/"

	)

	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (c⁄° *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (c⁄° *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

58 
	#__STDC_ISO_10646__
 201706L

	)

	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

21 
	~<„©uªs.h
>

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

26 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

27 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

30 
	g__BEGIN_DECLS


32 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


34 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

35 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

38 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

39 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

42 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

45 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


48 *
	`ödex
 (*
__s
, 
__c
)

49 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

50 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

51 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

53 #i‡
deföed
 
__OPTIMIZE__


54 
__exã∫_Æways_ölöe
 *

55 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


57  
	`__buûtö_ödex
 (
__s
, 
__c
);

60 
__exã∫_Æways_ölöe
 const *

61 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


63  
	`__buûtö_ödex
 (
__s
, 
__c
);

66 
	}
}

68 *
	$ödex
 (c⁄° *
__s
, 
__c
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

73 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


76 *
	`rödex
 (*
__s
, 
__c
)

77 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

79 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #i‡
deföed
 
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


85  
	`__buûtö_rödex
 (
__s
, 
__c
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


91  
	`__buûtö_rödex
 (
__s
, 
__c
);

94 
	}
}

96 *
	$rödex
 (c⁄° *
__s
, 
__c
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

101 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


104 
	$ffs
 (
__i
Ë
__THROW
 
__©åibuã_c⁄°__
;

109 #ifdef 
__USE_MISC


110 
	$ff¶
 (
__l
Ë
__THROW
 
__©åibuã_c⁄°__
;

111 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

112 
__THROW
 
__©åibuã_c⁄°__
;

116 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

117 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

120 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

123 #ifdef 
__USE_XOPEN2K8


125 
	~<bôs/ty≥s/loˇÀ_t.h
>

128 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__loc
)

129 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

133 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

134 
size_t
 
__n
, 
loˇÀ_t
 
__loc
)

135 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

138 
__END_DECLS


140 #i‡
	`__GNUC_PREREQ
 (3,4Ë&& 
__USE_FORTIFY_LEVEL
 > 0 \

141 && 
deföed
 
__f‹tify_fun˘i⁄


143 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


144 
	~<bôs/°rögs_f‹tifõd.h
>

	@/usr/include/zconf.h

8 #i‚de‡
ZCONF_H


9 
	#ZCONF_H


	)

17 #ifde‡
Z_PREFIX


18 
	#Z_PREFIX_SET


	)

21 
	#_di°_code
 
z__di°_code


	)

22 
	#_Àngth_code
 
z__Àngth_code


	)

23 
	#_å_Æign
 
z__å_Æign


	)

24 
	#_å_Êush_bôs
 
z__å_Êush_bôs


	)

25 
	#_å_Êush_block
 
z__å_Êush_block


	)

26 
	#_å_öô
 
z__å_öô


	)

27 
	#_å_°‹ed_block
 
z__å_°‹ed_block


	)

28 
	#_å_èŒy
 
z__å_èŒy


	)

29 
	#adÀr32
 
z_adÀr32


	)

30 
	#adÀr32_comböe
 
z_adÀr32_comböe


	)

31 
	#adÀr32_comböe64
 
z_adÀr32_comböe64


	)

32 
	#adÀr32_z
 
z_adÀr32_z


	)

33 #i‚de‡
Z_SOLO


34 
	#com¥ess
 
z_com¥ess


	)

35 
	#com¥ess2
 
z_com¥ess2


	)

36 
	#com¥essBound
 
z_com¥essBound


	)

38 
	#¸c32
 
z_¸c32


	)

39 
	#¸c32_comböe
 
z_¸c32_comböe


	)

40 
	#¸c32_comböe64
 
z_¸c32_comböe64


	)

41 
	#¸c32_z
 
z_¸c32_z


	)

42 
	#deÊ©e
 
z_deÊ©e


	)

43 
	#deÊ©eBound
 
z_deÊ©eBound


	)

44 
	#deÊ©eC›y
 
z_deÊ©eC›y


	)

45 
	#deÊ©eEnd
 
z_deÊ©eEnd


	)

46 
	#deÊ©eGëDi˘i⁄¨y
 
z_deÊ©eGëDi˘i⁄¨y


	)

47 
	#deÊ©eInô
 
z_deÊ©eInô


	)

48 
	#deÊ©eInô2
 
z_deÊ©eInô2


	)

49 
	#deÊ©eInô2_
 
z_deÊ©eInô2_


	)

50 
	#deÊ©eInô_
 
z_deÊ©eInô_


	)

51 
	#deÊ©eP¨ams
 
z_deÊ©eP¨ams


	)

52 
	#deÊ©ePídög
 
z_deÊ©ePídög


	)

53 
	#deÊ©ePrime
 
z_deÊ©ePrime


	)

54 
	#deÊ©eRe£t
 
z_deÊ©eRe£t


	)

55 
	#deÊ©eRe£tKìp
 
z_deÊ©eRe£tKìp


	)

56 
	#deÊ©eSëDi˘i⁄¨y
 
z_deÊ©eSëDi˘i⁄¨y


	)

57 
	#deÊ©eSëHódî
 
z_deÊ©eSëHódî


	)

58 
	#deÊ©eTu√
 
z_deÊ©eTu√


	)

59 
	#deÊ©e_c›yright
 
z_deÊ©e_c›yright


	)

60 
	#gë_¸c_èbÀ
 
z_gë_¸c_èbÀ


	)

61 #i‚de‡
Z_SOLO


62 
	#gz_îr‹
 
z_gz_îr‹


	)

63 
	#gz_ötmax
 
z_gz_ötmax


	)

64 
	#gz_°rwöîr‹
 
z_gz_°rwöîr‹


	)

65 
	#gzbuf„r
 
z_gzbuf„r


	)

66 
	#gz˛óªº
 
z_gz˛óªº


	)

67 
	#gz˛o£
 
z_gz˛o£


	)

68 
	#gz˛o£_r
 
z_gz˛o£_r


	)

69 
	#gz˛o£_w
 
z_gz˛o£_w


	)

70 
	#gzdúe˘
 
z_gzdúe˘


	)

71 
	#gzd›í
 
z_gzd›í


	)

72 
	#gzeof
 
z_gzeof


	)

73 
	#gzîr‹
 
z_gzîr‹


	)

74 
	#gzÊush
 
z_gzÊush


	)

75 
	#gz‰ód
 
z_gz‰ód


	)

76 
	#gzfwrôe
 
z_gzfwrôe


	)

77 
	#gzgëc
 
z_gzgëc


	)

78 
	#gzgëc_
 
z_gzgëc_


	)

79 
	#gzgës
 
z_gzgës


	)

80 
	#gzoff£t
 
z_gzoff£t


	)

81 
	#gzoff£t64
 
z_gzoff£t64


	)

82 
	#gz›í
 
z_gz›í


	)

83 
	#gz›í64
 
z_gz›í64


	)

84 #ifde‡
_WIN32


85 
	#gz›í_w
 
z_gz›í_w


	)

87 
	#gz¥ötf
 
z_gz¥ötf


	)

88 
	#gzputc
 
z_gzputc


	)

89 
	#gzputs
 
z_gzputs


	)

90 
	#gzªad
 
z_gzªad


	)

91 
	#gzªwöd
 
z_gzªwöd


	)

92 
	#gz£ek
 
z_gz£ek


	)

93 
	#gz£ek64
 
z_gz£ek64


	)

94 
	#gz£ç¨ams
 
z_gz£ç¨ams


	)

95 
	#gzãŒ
 
z_gzãŒ


	)

96 
	#gzãŒ64
 
z_gzãŒ64


	)

97 
	#gzungëc
 
z_gzungëc


	)

98 
	#gzv¥ötf
 
z_gzv¥ötf


	)

99 
	#gzwrôe
 
z_gzwrôe


	)

101 
	#öÊ©e
 
z_öÊ©e


	)

102 
	#öÊ©eBack
 
z_öÊ©eBack


	)

103 
	#öÊ©eBackEnd
 
z_öÊ©eBackEnd


	)

104 
	#öÊ©eBackInô
 
z_öÊ©eBackInô


	)

105 
	#öÊ©eBackInô_
 
z_öÊ©eBackInô_


	)

106 
	#öÊ©eCodesU£d
 
z_öÊ©eCodesU£d


	)

107 
	#öÊ©eC›y
 
z_öÊ©eC›y


	)

108 
	#öÊ©eEnd
 
z_öÊ©eEnd


	)

109 
	#öÊ©eGëDi˘i⁄¨y
 
z_öÊ©eGëDi˘i⁄¨y


	)

110 
	#öÊ©eGëHódî
 
z_öÊ©eGëHódî


	)

111 
	#öÊ©eInô
 
z_öÊ©eInô


	)

112 
	#öÊ©eInô2
 
z_öÊ©eInô2


	)

113 
	#öÊ©eInô2_
 
z_öÊ©eInô2_


	)

114 
	#öÊ©eInô_
 
z_öÊ©eInô_


	)

115 
	#öÊ©eM¨k
 
z_öÊ©eM¨k


	)

116 
	#öÊ©ePrime
 
z_öÊ©ePrime


	)

117 
	#öÊ©eRe£t
 
z_öÊ©eRe£t


	)

118 
	#öÊ©eRe£t2
 
z_öÊ©eRe£t2


	)

119 
	#öÊ©eRe£tKìp
 
z_öÊ©eRe£tKìp


	)

120 
	#öÊ©eSëDi˘i⁄¨y
 
z_öÊ©eSëDi˘i⁄¨y


	)

121 
	#öÊ©eSync
 
z_öÊ©eSync


	)

122 
	#öÊ©eSyncPoöt
 
z_öÊ©eSyncPoöt


	)

123 
	#öÊ©eUndîmöe
 
z_öÊ©eUndîmöe


	)

124 
	#öÊ©eVÆid©e
 
z_öÊ©eVÆid©e


	)

125 
	#öÊ©e_c›yright
 
z_öÊ©e_c›yright


	)

126 
	#öÊ©e_Á°
 
z_öÊ©e_Á°


	)

127 
	#öÊ©e_èbÀ
 
z_öÊ©e_èbÀ


	)

128 #i‚de‡
Z_SOLO


129 
	#uncom¥ess
 
z_uncom¥ess


	)

130 
	#uncom¥ess2
 
z_uncom¥ess2


	)

132 
	#zEº‹
 
z_zEº‹


	)

133 #i‚de‡
Z_SOLO


134 
	#zˇŒoc
 
z_zˇŒoc


	)

135 
	#zc‰ì
 
z_zc‰ì


	)

137 
	#zlibCompûeFœgs
 
z_zlibCompûeFœgs


	)

138 
	#zlibVîsi⁄
 
z_zlibVîsi⁄


	)

141 
	#Byã
 
z_Byã


	)

142 
	#Byãf
 
z_Byãf


	)

143 
	#Æloc_func
 
z_Æloc_func


	)

144 
	#ch¨f
 
z_ch¨f


	)

145 
	#‰ì_func
 
z_‰ì_func


	)

146 #i‚de‡
Z_SOLO


147 
	#gzFûe
 
z_gzFûe


	)

149 
	#gz_hódî
 
z_gz_hódî


	)

150 
	#gz_hódîp
 
z_gz_hódîp


	)

151 
	#ö_func
 
z_ö_func


	)

152 
	#ötf
 
z_ötf


	)

153 
	#out_func
 
z_out_func


	)

154 
	#uI¡
 
z_uI¡


	)

155 
	#uI¡f
 
z_uI¡f


	)

156 
	#uL⁄g
 
z_uL⁄g


	)

157 
	#uL⁄gf
 
z_uL⁄gf


	)

158 
	#voidp
 
z_voidp


	)

159 
	#voidpc
 
z_voidpc


	)

160 
	#voidpf
 
z_voidpf


	)

163 
	#gz_hódî_s
 
z_gz_hódî_s


	)

164 
	#öã∫Æ_°©e
 
z_öã∫Æ_°©e


	)

168 #i‡
deföed
(
__MSDOS__
Ë&& !deföed(
MSDOS
)

169 
	#MSDOS


	)

171 #i‡(
deföed
(
OS_2
Ë|| deföed(
__OS2__
)Ë&& !deföed(
OS2
)

172 
	#OS2


	)

174 #i‡
deföed
(
_WINDOWS
Ë&& !deföed(
WINDOWS
)

175 
	#WINDOWS


	)

177 #i‡
deföed
(
_WIN32
Ë|| deföed(
_WIN32_WCE
Ë|| deföed(
__WIN32__
)

178 #i‚de‡
WIN32


179 
	#WIN32


	)

182 #i‡(
deföed
(
MSDOS
Ë|| deföed(
OS2
Ë|| deföed(
WINDOWS
)Ë&& !deföed(
WIN32
)

183 #i‡!
deföed
(
__GNUC__
Ë&& !deföed(
__FLAT__
Ë&& !deföed(
__386__
)

184 #i‚de‡
SYS16BIT


185 
	#SYS16BIT


	)

194 #ifde‡
SYS16BIT


195 
	#MAXSEG_64K


	)

197 #ifde‡
MSDOS


198 
	#UNALIGNED_OK


	)

201 #ifde‡
__STDC_VERSION__


202 #i‚de‡
STDC


203 
	#STDC


	)

205 #i‡
__STDC_VERSION__
 >= 199901L

206 #i‚de‡
STDC99


207 
	#STDC99


	)

211 #i‡!
deföed
(
STDC
Ë&& (deföed(
__STDC__
Ë|| deföed(
__˝lu•lus
))

212 
	#STDC


	)

214 #i‡!
deföed
(
STDC
Ë&& (deföed(
__GNUC__
Ë|| deföed(
__BORLANDC__
))

215 
	#STDC


	)

217 #i‡!
deföed
(
STDC
Ë&& (deföed(
MSDOS
Ë|| deföed(
WINDOWS
Ë|| deföed(
WIN32
))

218 
	#STDC


	)

220 #i‡!
deföed
(
STDC
Ë&& (deföed(
OS2
Ë|| deföed(
__HOS_AIX__
))

221 
	#STDC


	)

224 #i‡
deföed
(
__OS400__
Ë&& !deföed(
STDC
)

225 
	#STDC


	)

228 #i‚de‡
STDC


230 c⁄°

	)

234 #i‡
deföed
(
ZLIB_CONST
Ë&& !deföed(
z_c⁄°
)

235 
	#z_c⁄°
 c⁄°

	)

237 
	#z_c⁄°


	)

240 #ifde‡
Z_SOLO


241 
	tz_size_t
;

243 
	#z_l⁄gl⁄g
 

	)

244 #i‡
deföed
(
NO_SIZE_T
)

245 
	tNO_SIZE_T
 
	tz_size_t
;

246 #ñi‡
deföed
(
STDC
)

247 
	~<°ddef.h
>

248 
size_t
 
	tz_size_t
;

250 
	tz_size_t
;

252 #unde‡
z_l⁄gl⁄g


256 #i‚de‡
MAX_MEM_LEVEL


257 #ifde‡
MAXSEG_64K


258 
	#MAX_MEM_LEVEL
 8

	)

260 
	#MAX_MEM_LEVEL
 9

	)

269 #i‚de‡
MAX_WBITS


270 
	#MAX_WBITS
 15

	)

288 #i‚de‡
OF


289 #ifde‡
STDC


290 
	#OF
(
¨gs
Ë
	)
args

292 
	#OF
(
¨gs
Ë()

	)

296 #i‚de‡
Z_ARG


297 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

298 
	#Z_ARG
(
¨gs
Ë
	)
args

300 
	#Z_ARG
(
¨gs
Ë()

	)

310 #ifde‡
SYS16BIT


311 #i‡
deföed
(
M_I86SM
Ë|| deföed(
M_I86MM
)

313 
	#SMALL_MEDIUM


	)

314 #ifde‡
_MSC_VER


315 
	#FAR
 
_Ár


	)

317 
	#FAR
 
Ár


	)

320 #i‡(
deföed
(
__SMALL__
Ë|| deföed(
__MEDIUM__
))

322 
	#SMALL_MEDIUM


	)

323 #ifde‡
__BORLANDC__


324 
	#FAR
 
_Ár


	)

326 
	#FAR
 
Ár


	)

331 #i‡
deföed
(
WINDOWS
Ë|| deföed(
WIN32
)

335 #ifde‡
ZLIB_DLL


336 #i‡
deföed
(
WIN32
Ë&& (!deföed(
__BORLANDC__
) || (__BORLANDC__ >= 0x500))

337 #ifde‡
ZLIB_INTERNAL


338 
	#ZEXTERN
 
	`__de˛•ec
(
dŒexp‹t
)

	)

340 
	#ZEXTERN
 
	`__de˛•ec
(
dŒimp‹t
)

	)

348 #ifde‡
ZLIB_WINAPI


349 #ifde‡
FAR


350 #unde‡
FAR


352 
	~<wödows.h
>

355 
	#ZEXPORT
 
WINAPI


	)

356 #ifde‡
WIN32


357 
	#ZEXPORTVA
 
WINAPIV


	)

359 
	#ZEXPORTVA
 
FAR
 
CDECL


	)

364 #i‡
deföed
 (
__BEOS__
)

365 #ifde‡
ZLIB_DLL


366 #ifde‡
ZLIB_INTERNAL


367 
	#ZEXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

368 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒexp‹t
)

	)

370 
	#ZEXPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

371 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒimp‹t
)

	)

376 #i‚de‡
ZEXTERN


377 
	#ZEXTERN
 

	)

379 #i‚de‡
ZEXPORT


380 
	#ZEXPORT


	)

382 #i‚de‡
ZEXPORTVA


383 
	#ZEXPORTVA


	)

386 #i‚de‡
FAR


387 
	#FAR


	)

390 #i‡!
deföed
(
__MACTYPES__
)

391 
	tByã
;

393 
	tuI¡
;

394 
	tuL⁄g
;

396 #ifde‡
SMALL_MEDIUM


398 
	#Byãf
 
Byã
 
FAR


	)

400 
Byã
 
	tFAR
 
	tByãf
;

402 
	tFAR
 
	tch¨f
;

403 
	tFAR
 
	tötf
;

404 
uI¡
 
	tFAR
 
	tuI¡f
;

405 
uL⁄g
 
	tFAR
 
	tuL⁄gf
;

407 #ifde‡
STDC


408 c⁄° *
	tvoidpc
;

409 
	tFAR
 *
	tvoidpf
;

410 *
	tvoidp
;

412 
Byã
 c⁄° *
	tvoidpc
;

413 
Byã
 
	tFAR
 *
	tvoidpf
;

414 
Byã
 *
	tvoidp
;

417 #i‡!
deföed
(
Z_U4
Ë&& !deföed(
Z_SOLO
Ë&& deföed(
STDC
)

418 
	~<limôs.h
>

419 #i‡(
UINT_MAX
 == 0xffffffffUL)

420 
	#Z_U4
 

	)

421 #ñi‡(
ULONG_MAX
 == 0xffffffffUL)

422 
	#Z_U4
 

	)

423 #ñi‡(
USHRT_MAX
 == 0xffffffffUL)

424 
	#Z_U4
 

	)

428 #ifde‡
Z_U4


429 
Z_U4
 
	tz_¸c_t
;

431 
	tz_¸c_t
;

435 
	#Z_HAVE_UNISTD_H


	)

439 
	#Z_HAVE_STDARG_H


	)

442 #ifde‡
STDC


443 #i‚de‡
Z_SOLO


444 
	~<sys/ty≥s.h
>

448 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

449 #i‚de‡
Z_SOLO


450 
	~<°d¨g.h
>

454 #ifde‡
_WIN32


455 #i‚de‡
Z_SOLO


456 
	~<°ddef.h
>

466 #i‡
deföed
(
_LARGEFILE64_SOURCE
) && -_LARGEFILE64_SOURCE - -1 == 1

467 #unde‡
_LARGEFILE64_SOURCE


470 #i‡
deföed
(
__WATCOMC__
Ë&& !deföed(
Z_HAVE_UNISTD_H
)

471 
	#Z_HAVE_UNISTD_H


	)

473 #i‚de‡
Z_SOLO


474 #i‡
deföed
(
Z_HAVE_UNISTD_H
Ë|| deföed(
_LARGEFILE64_SOURCE
)

475 
	~<uni°d.h
>

476 #ifde‡
VMS


477 
	~<unixio.h
>

479 #i‚de‡
z_off_t


480 
	#z_off_t
 
off_t


	)

485 #i‡
deföed
(
_LFS64_LARGEFILE
) && _LFS64_LARGEFILE-0

486 
	#Z_LFS64


	)

489 #i‡
deföed
(
_LARGEFILE64_SOURCE
Ë&& deföed(
Z_LFS64
)

490 
	#Z_LARGE64


	)

493 #i‡
deföed
(
_FILE_OFFSET_BITS
Ë&& _FILE_OFFSET_BITS-0 =64 && deföed(
Z_LFS64
)

494 
	#Z_WANT64


	)

497 #i‡!
deföed
(
SEEK_SET
Ë&& !deföed(
Z_SOLO
)

498 
	#SEEK_SET
 0

	)

499 
	#SEEK_CUR
 1

	)

500 
	#SEEK_END
 2

	)

503 #i‚de‡
z_off_t


504 
	#z_off_t
 

	)

507 #i‡!
deföed
(
_WIN32
Ë&& deföed(
Z_LARGE64
)

508 
	#z_off64_t
 
off64_t


	)

510 #i‡
deföed
(
_WIN32
Ë&& !deföed(
__GNUC__
Ë&& !deföed(
Z_SOLO
)

511 
	#z_off64_t
 
__öt64


	)

513 
	#z_off64_t
 
z_off_t


	)

518 #i‡
deföed
(
__MVS__
)

519 #¥agm®
m≠
(
deÊ©eInô_
,"DEIN")

520 #¥agm®
m≠
(
deÊ©eInô2_
,"DEIN2")

521 #¥agm®
m≠
(
deÊ©eEnd
,"DEEND")

522 #¥agm®
m≠
(
deÊ©eBound
,"DEBND")

523 #¥agm®
m≠
(
öÊ©eInô_
,"ININ")

524 #¥agm®
m≠
(
öÊ©eInô2_
,"ININ2")

525 #¥agm®
m≠
(
öÊ©eEnd
,"INEND")

526 #¥agm®
m≠
(
öÊ©eSync
,"INSY")

527 #¥agm®
m≠
(
öÊ©eSëDi˘i⁄¨y
,"INSEDI")

528 #¥agm®
m≠
(
com¥essBound
,"CMBND")

529 #¥agm®
m≠
(
öÊ©e_èbÀ
,"INTABL")

530 #¥agm®
m≠
(
öÊ©e_Á°
,"INFA")

531 #¥agm®
m≠
(
öÊ©e_c›yright
,"INCOPY")

	@/usr/include/linux/stddef.h

4 #i‚de‡
__Æways_ölöe


5 
	#__Æways_ölöe
 
__ölöe__


	)

	@/usr/include/openssl/bio.h

10 #i‚de‡
HEADER_BIO_H


11 
	#HEADER_BIO_H


	)

13 
	~<›ís¶/e_os2.h
>

15 #i‚de‡
OPENSSL_NO_STDIO


16 
	~<°dio.h
>

18 
	~<°d¨g.h
>

20 
	~<›ís¶/¸y±o.h
>

21 
	~<›ís¶/bi€º.h
>

23 #ifde‡ 
__˝lu•lus


28 
	#BIO_TYPE_DESCRIPTOR
 0x0100

	)

29 
	#BIO_TYPE_FILTER
 0x0200

	)

30 
	#BIO_TYPE_SOURCE_SINK
 0x0400

	)

33 
	#BIO_TYPE_NONE
 0

	)

34 
	#BIO_TYPE_MEM
 ( 1|
BIO_TYPE_SOURCE_SINK
)

	)

35 
	#BIO_TYPE_FILE
 ( 2|
BIO_TYPE_SOURCE_SINK
)

	)

37 
	#BIO_TYPE_FD
 ( 4|
BIO_TYPE_SOURCE_SINK
|
BIO_TYPE_DESCRIPTOR
)

	)

38 
	#BIO_TYPE_SOCKET
 ( 5|
BIO_TYPE_SOURCE_SINK
|
BIO_TYPE_DESCRIPTOR
)

	)

39 
	#BIO_TYPE_NULL
 ( 6|
BIO_TYPE_SOURCE_SINK
)

	)

40 
	#BIO_TYPE_SSL
 ( 7|
BIO_TYPE_FILTER
)

	)

41 
	#BIO_TYPE_MD
 ( 8|
BIO_TYPE_FILTER
)

	)

42 
	#BIO_TYPE_BUFFER
 ( 9|
BIO_TYPE_FILTER
)

	)

43 
	#BIO_TYPE_CIPHER
 (10|
BIO_TYPE_FILTER
)

	)

44 
	#BIO_TYPE_BASE64
 (11|
BIO_TYPE_FILTER
)

	)

45 
	#BIO_TYPE_CONNECT
 (12|
BIO_TYPE_SOURCE_SINK
|
BIO_TYPE_DESCRIPTOR
)

	)

46 
	#BIO_TYPE_ACCEPT
 (13|
BIO_TYPE_SOURCE_SINK
|
BIO_TYPE_DESCRIPTOR
)

	)

48 
	#BIO_TYPE_NBIO_TEST
 (16|
BIO_TYPE_FILTER
)

	)

49 
	#BIO_TYPE_NULL_FILTER
 (17|
BIO_TYPE_FILTER
)

	)

50 
	#BIO_TYPE_BIO
 (19|
BIO_TYPE_SOURCE_SINK
)

	)

51 
	#BIO_TYPE_LINEBUFFER
 (20|
BIO_TYPE_FILTER
)

	)

52 
	#BIO_TYPE_DGRAM
 (21|
BIO_TYPE_SOURCE_SINK
|
BIO_TYPE_DESCRIPTOR
)

	)

53 
	#BIO_TYPE_ASN1
 (22|
BIO_TYPE_FILTER
)

	)

54 
	#BIO_TYPE_COMP
 (23|
BIO_TYPE_FILTER
)

	)

55 #i‚de‡
OPENSSL_NO_SCTP


56 
	#BIO_TYPE_DGRAM_SCTP
 (24|
BIO_TYPE_SOURCE_SINK
|
BIO_TYPE_DESCRIPTOR
)

	)

59 
	#BIO_TYPE_START
 128

	)

65 
	#BIO_NOCLOSE
 0x00

	)

66 
	#BIO_CLOSE
 0x01

	)

71 
	#BIO_CTRL_RESET
 1

	)

72 
	#BIO_CTRL_EOF
 2

	)

73 
	#BIO_CTRL_INFO
 3

	)

74 
	#BIO_CTRL_SET
 4

	)

75 
	#BIO_CTRL_GET
 5

	)

76 
	#BIO_CTRL_PUSH
 6

	)

77 
	#BIO_CTRL_POP
 7

	)

78 
	#BIO_CTRL_GET_CLOSE
 8

	)

79 
	#BIO_CTRL_SET_CLOSE
 9

	)

80 
	#BIO_CTRL_PENDING
 10

	)

81 
	#BIO_CTRL_FLUSH
 11

	)

82 
	#BIO_CTRL_DUP
 12

	)

83 
	#BIO_CTRL_WPENDING
 13

	)

84 
	#BIO_CTRL_SET_CALLBACK
 14

	)

85 
	#BIO_CTRL_GET_CALLBACK
 15

	)

87 
	#BIO_CTRL_PEEK
 29

	)

88 
	#BIO_CTRL_SET_FILENAME
 30

	)

91 
	#BIO_CTRL_DGRAM_CONNECT
 31

	)

92 
	#BIO_CTRL_DGRAM_SET_CONNECTED
 32

	)

94 
	#BIO_CTRL_DGRAM_SET_RECV_TIMEOUT
 33

	)

95 
	#BIO_CTRL_DGRAM_GET_RECV_TIMEOUT
 34

	)

96 
	#BIO_CTRL_DGRAM_SET_SEND_TIMEOUT
 35

	)

97 
	#BIO_CTRL_DGRAM_GET_SEND_TIMEOUT
 36

	)

99 
	#BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP
 37

	)

100 
	#BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP
 38

	)

103 
	#BIO_CTRL_DGRAM_MTU_DISCOVER
 39

	)

106 
	#BIO_CTRL_DGRAM_QUERY_MTU
 40

	)

107 
	#BIO_CTRL_DGRAM_GET_FALLBACK_MTU
 47

	)

108 
	#BIO_CTRL_DGRAM_GET_MTU
 41

	)

109 
	#BIO_CTRL_DGRAM_SET_MTU
 42

	)

113 
	#BIO_CTRL_DGRAM_MTU_EXCEEDED
 43

	)

117 
	#BIO_CTRL_DGRAM_GET_PEER
 46

	)

118 
	#BIO_CTRL_DGRAM_SET_PEER
 44

	)

120 
	#BIO_CTRL_DGRAM_SET_NEXT_TIMEOUT
 45

	)

122 
	#BIO_CTRL_DGRAM_SET_DONT_FRAG
 48

	)

124 
	#BIO_CTRL_DGRAM_GET_MTU_OVERHEAD
 49

	)

127 
	#BIO_CTRL_DGRAM_SCTP_SET_IN_HANDSHAKE
 50

	)

128 #i‚de‡
OPENSSL_NO_SCTP


130 
	#BIO_CTRL_DGRAM_SCTP_ADD_AUTH_KEY
 51

	)

131 
	#BIO_CTRL_DGRAM_SCTP_NEXT_AUTH_KEY
 52

	)

132 
	#BIO_CTRL_DGRAM_SCTP_AUTH_CCS_RCVD
 53

	)

133 
	#BIO_CTRL_DGRAM_SCTP_GET_SNDINFO
 60

	)

134 
	#BIO_CTRL_DGRAM_SCTP_SET_SNDINFO
 61

	)

135 
	#BIO_CTRL_DGRAM_SCTP_GET_RCVINFO
 62

	)

136 
	#BIO_CTRL_DGRAM_SCTP_SET_RCVINFO
 63

	)

137 
	#BIO_CTRL_DGRAM_SCTP_GET_PRINFO
 64

	)

138 
	#BIO_CTRL_DGRAM_SCTP_SET_PRINFO
 65

	)

139 
	#BIO_CTRL_DGRAM_SCTP_SAVE_SHUTDOWN
 70

	)

142 
	#BIO_CTRL_DGRAM_SET_PEEK_MODE
 71

	)

145 
	#BIO_FP_READ
 0x02

	)

146 
	#BIO_FP_WRITE
 0x04

	)

147 
	#BIO_FP_APPEND
 0x08

	)

148 
	#BIO_FP_TEXT
 0x10

	)

150 
	#BIO_FLAGS_READ
 0x01

	)

151 
	#BIO_FLAGS_WRITE
 0x02

	)

152 
	#BIO_FLAGS_IO_SPECIAL
 0x04

	)

153 
	#BIO_FLAGS_RWS
 (
BIO_FLAGS_READ
|
BIO_FLAGS_WRITE
|
BIO_FLAGS_IO_SPECIAL
)

	)

154 
	#BIO_FLAGS_SHOULD_RETRY
 0x08

	)

155 #i‚de‡
BIO_FLAGS_UPLINK


160 
	#BIO_FLAGS_UPLINK
 0

	)

163 
	#BIO_FLAGS_BASE64_NO_NL
 0x100

	)

170 
	#BIO_FLAGS_MEM_RDONLY
 0x200

	)

171 
	#BIO_FLAGS_NONCLEAR_RST
 0x400

	)

172 
	#BIO_FLAGS_IN_EOF
 0x800

	)

174 
bio_addr_°
 
	tBIO_ADDR
;

175 
bio_addröfo_°
 
	tBIO_ADDRINFO
;

177 
BIO_gë_√w_ödex
();

178 
BIO_£t_Êags
(
BIO
 *
b
, 
Êags
);

179 
BIO_ã°_Êags
(c⁄° 
BIO
 *
b
, 
Êags
);

180 
BIO_˛ór_Êags
(
BIO
 *
b
, 
Êags
);

182 
	#BIO_gë_Êags
(
b
Ë
	`BIO_ã°_Êags
(b, ~(0x0))

	)

183 
	#BIO_£t_ªåy_•ecül
(
b
) \

184 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_IO_SPECIAL
|
BIO_FLAGS_SHOULD_RETRY
))

	)

185 
	#BIO_£t_ªåy_ªad
(
b
) \

186 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_READ
|
BIO_FLAGS_SHOULD_RETRY
))

	)

187 
	#BIO_£t_ªåy_wrôe
(
b
) \

188 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_WRITE
|
BIO_FLAGS_SHOULD_RETRY
))

	)

191 
	#BIO_˛ór_ªåy_Êags
(
b
) \

192 
	`BIO_˛ór_Êags
(
b
, (
BIO_FLAGS_RWS
|
BIO_FLAGS_SHOULD_RETRY
))

	)

193 
	#BIO_gë_ªåy_Êags
(
b
) \

194 
	`BIO_ã°_Êags
(
b
, (
BIO_FLAGS_RWS
|
BIO_FLAGS_SHOULD_RETRY
))

	)

197 
	#BIO_should_ªad
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_READ
)

	)

198 
	#BIO_should_wrôe
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_WRITE
)

	)

199 
	#BIO_should_io_•ecül
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_IO_SPECIAL
)

	)

200 
	#BIO_ªåy_ty≥
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_RWS
)

	)

201 
	#BIO_should_ªåy
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_SHOULD_RETRY
)

	)

213 
	#BIO_RR_SSL_X509_LOOKUP
 0x01

	)

215 
	#BIO_RR_CONNECT
 0x02

	)

217 
	#BIO_RR_ACCEPT
 0x03

	)

220 
	#BIO_CB_FREE
 0x01

	)

221 
	#BIO_CB_READ
 0x02

	)

222 
	#BIO_CB_WRITE
 0x03

	)

223 
	#BIO_CB_PUTS
 0x04

	)

224 
	#BIO_CB_GETS
 0x05

	)

225 
	#BIO_CB_CTRL
 0x06

	)

231 
	#BIO_CB_RETURN
 0x80

	)

232 
	#BIO_CB_ªtu∫
(
a
Ë(◊)|
BIO_CB_RETURN
)

	)

233 
	#BIO_cb_¥e
(
a
Ë(!(◊)&
BIO_CB_RETURN
))

	)

234 
	#BIO_cb_po°
(
a
Ë(◊)&
BIO_CB_RETURN
)

	)

236 (*
BIO_ˇŒback_‚
)(
	tBIO
 *
	tb
, 
	t›î
, c⁄° *
	t¨gp
, 
	t¨gi
,

237 
	t¨gl
, 
	tªt
);

238 (*
BIO_ˇŒback_‚_ex
)(
	tBIO
 *
	tb
, 
	t›î
, c⁄° *
	t¨gp
,

239 
	tsize_t
 
	tÀn
, 
	t¨gi
,

240 
	t¨gl
, 
	tªt
, 
	tsize_t
 *
	t¥o˚s£d
);

241 
BIO_ˇŒback_‚
 
BIO_gë_ˇŒback
(c⁄° 
BIO
 *
b
);

242 
BIO_£t_ˇŒback
(
BIO
 *
b
, 
BIO_ˇŒback_‚
 
ˇŒback
);

244 
BIO_ˇŒback_‚_ex
 
BIO_gë_ˇŒback_ex
(c⁄° 
BIO
 *
b
);

245 
BIO_£t_ˇŒback_ex
(
BIO
 *
b
, 
BIO_ˇŒback_‚_ex
 
ˇŒback
);

247 *
BIO_gë_ˇŒback_¨g
(c⁄° 
BIO
 *
b
);

248 
BIO_£t_ˇŒback_¨g
(
BIO
 *
b
, *
¨g
);

250 
bio_mëhod_°
 
	tBIO_METHOD
;

252 c⁄° *
BIO_mëhod_«me
(c⁄° 
BIO
 *
b
);

253 
BIO_mëhod_ty≥
(c⁄° 
BIO
 *
b
);

255 
	tBIO_öfo_cb
(
	tBIO
 *, , );

256 
BIO_öfo_cb
 
	tbio_öfo_cb
;

258 
DEFINE_STACK_OF
(
BIO
)

261 
	ta¢1_ps_func
 (
	tBIO
 *
	tb
, **
	tpbuf
, *
	t∂í
,

262 *
	t∑rg
);

264 #i‚de‡
OPENSSL_NO_SCTP


266 
	sbio_dgøm_s˘p_¢döfo
 {

267 
uöt16_t
 
¢d_sid
;

268 
uöt16_t
 
¢d_Êags
;

269 
uöt32_t
 
¢d_µid
;

270 
uöt32_t
 
¢d_c⁄ãxt
;

273 
	sbio_dgøm_s˘p_rcvöfo
 {

274 
uöt16_t
 
rcv_sid
;

275 
uöt16_t
 
rcv_s¢
;

276 
uöt16_t
 
rcv_Êags
;

277 
uöt32_t
 
rcv_µid
;

278 
uöt32_t
 
rcv_t¢
;

279 
uöt32_t
 
rcv_cumt¢
;

280 
uöt32_t
 
rcv_c⁄ãxt
;

283 
	sbio_dgøm_s˘p_¥öfo
 {

284 
uöt16_t
 
¥_pﬁicy
;

285 
uöt32_t
 
¥_vÆue
;

293 
	#BIO_C_SET_CONNECT
 100

	)

294 
	#BIO_C_DO_STATE_MACHINE
 101

	)

295 
	#BIO_C_SET_NBIO
 102

	)

297 
	#BIO_C_SET_FD
 104

	)

298 
	#BIO_C_GET_FD
 105

	)

299 
	#BIO_C_SET_FILE_PTR
 106

	)

300 
	#BIO_C_GET_FILE_PTR
 107

	)

301 
	#BIO_C_SET_FILENAME
 108

	)

302 
	#BIO_C_SET_SSL
 109

	)

303 
	#BIO_C_GET_SSL
 110

	)

304 
	#BIO_C_SET_MD
 111

	)

305 
	#BIO_C_GET_MD
 112

	)

306 
	#BIO_C_GET_CIPHER_STATUS
 113

	)

307 
	#BIO_C_SET_BUF_MEM
 114

	)

308 
	#BIO_C_GET_BUF_MEM_PTR
 115

	)

309 
	#BIO_C_GET_BUFF_NUM_LINES
 116

	)

310 
	#BIO_C_SET_BUFF_SIZE
 117

	)

311 
	#BIO_C_SET_ACCEPT
 118

	)

312 
	#BIO_C_SSL_MODE
 119

	)

313 
	#BIO_C_GET_MD_CTX
 120

	)

315 
	#BIO_C_SET_BUFF_READ_DATA
 122

	)

316 
	#BIO_C_GET_CONNECT
 123

	)

317 
	#BIO_C_GET_ACCEPT
 124

	)

318 
	#BIO_C_SET_SSL_RENEGOTIATE_BYTES
 125

	)

319 
	#BIO_C_GET_SSL_NUM_RENEGOTIATES
 126

	)

320 
	#BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT
 127

	)

321 
	#BIO_C_FILE_SEEK
 128

	)

322 
	#BIO_C_GET_CIPHER_CTX
 129

	)

323 
	#BIO_C_SET_BUF_MEM_EOF_RETURN
 130

	)

325 
	#BIO_C_SET_BIND_MODE
 131

	)

326 
	#BIO_C_GET_BIND_MODE
 132

	)

327 
	#BIO_C_FILE_TELL
 133

	)

328 
	#BIO_C_GET_SOCKS
 134

	)

329 
	#BIO_C_SET_SOCKS
 135

	)

331 
	#BIO_C_SET_WRITE_BUF_SIZE
 136

	)

332 
	#BIO_C_GET_WRITE_BUF_SIZE
 137

	)

333 
	#BIO_C_MAKE_BIO_PAIR
 138

	)

334 
	#BIO_C_DESTROY_BIO_PAIR
 139

	)

335 
	#BIO_C_GET_WRITE_GUARANTEE
 140

	)

336 
	#BIO_C_GET_READ_REQUEST
 141

	)

337 
	#BIO_C_SHUTDOWN_WR
 142

	)

338 
	#BIO_C_NREAD0
 143

	)

339 
	#BIO_C_NREAD
 144

	)

340 
	#BIO_C_NWRITE0
 145

	)

341 
	#BIO_C_NWRITE
 146

	)

342 
	#BIO_C_RESET_READ_REQUEST
 147

	)

343 
	#BIO_C_SET_MD_CTX
 148

	)

345 
	#BIO_C_SET_PREFIX
 149

	)

346 
	#BIO_C_GET_PREFIX
 150

	)

347 
	#BIO_C_SET_SUFFIX
 151

	)

348 
	#BIO_C_GET_SUFFIX
 152

	)

350 
	#BIO_C_SET_EX_ARG
 153

	)

351 
	#BIO_C_GET_EX_ARG
 154

	)

353 
	#BIO_C_SET_CONNECT_MODE
 155

	)

355 
	#BIO_£t_≠p_d©a
(
s
,
¨g
Ë
	`BIO_£t_ex_d©a
(s,0,¨g)

	)

356 
	#BIO_gë_≠p_d©a
(
s
Ë
	`BIO_gë_ex_d©a
(s,0)

	)

358 
	#BIO_£t_nbio
(
b
,
n
Ë
	`BIO_˘æ
(b,
BIO_C_SET_NBIO
,“),
NULL
)

	)

360 #i‚de‡
OPENSSL_NO_SOCK


363 
	#BIO_FAMILY_IPV4
 4

	)

364 
	#BIO_FAMILY_IPV6
 6

	)

365 
	#BIO_FAMILY_IPANY
 256

	)

368 
	#BIO_£t_c⁄n_ho°«me
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,0, \

369 (*)(
«me
))

	)

370 
	#BIO_£t_c⁄n_p‹t
(
b
,
p‹t
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,1, \

371 (*)(
p‹t
))

	)

372 
	#BIO_£t_c⁄n_addªss
(
b
,
addr
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,2, \

373 (*)(
addr
))

	)

374 
	#BIO_£t_c⁄n_ù_Ámûy
(
b
,
f
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_CONNECT
,3,f)

	)

375 
	#BIO_gë_c⁄n_ho°«me
(
b
Ë((c⁄° *)
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,0))

	)

376 
	#BIO_gë_c⁄n_p‹t
(
b
Ë((c⁄° *)
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,1))

	)

377 
	#BIO_gë_c⁄n_addªss
(
b
Ë((c⁄° 
BIO_ADDR
 *)
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,2))

	)

378 
	#BIO_gë_c⁄n_ù_Ámûy
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_CONNECT
,3,
NULL
)

	)

379 
	#BIO_£t_c⁄n_mode
(
b
,
n
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT_MODE
,“),
NULL
)

	)

382 
	#BIO_£t_ac˚±_«me
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,0, \

383 (*)(
«me
))

	)

384 
	#BIO_£t_ac˚±_p‹t
(
b
,
p‹t
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,1, \

385 (*)(
p‹t
))

	)

386 
	#BIO_gë_ac˚±_«me
(
b
Ë((c⁄° *)
	`BIO_±r_˘æ
(b,
BIO_C_GET_ACCEPT
,0))

	)

387 
	#BIO_gë_ac˚±_p‹t
(
b
Ë((c⁄° *)
	`BIO_±r_˘æ
(b,
BIO_C_GET_ACCEPT
,1))

	)

388 
	#BIO_gë_≥î_«me
(
b
Ë((c⁄° *)
	`BIO_±r_˘æ
(b,
BIO_C_GET_ACCEPT
,2))

	)

389 
	#BIO_gë_≥î_p‹t
(
b
Ë((c⁄° *)
	`BIO_±r_˘æ
(b,
BIO_C_GET_ACCEPT
,3))

	)

391 
	#BIO_£t_nbio_ac˚±
(
b
,
n
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,2,“)?(*)"a":
NULL
)

	)

392 
	#BIO_£t_ac˚±_bios
(
b
,
bio
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,3, \

393 (*)(
bio
))

	)

394 
	#BIO_£t_ac˚±_ù_Ámûy
(
b
,
f
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_ACCEPT
,4,f)

	)

395 
	#BIO_gë_ac˚±_ù_Ámûy
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_ACCEPT
,4,
NULL
)

	)

398 
	#BIO_BIND_NORMAL
 0

	)

399 
	#BIO_BIND_REUSEADDR
 
BIO_SOCK_REUSEADDR


	)

400 
	#BIO_BIND_REUSEADDR_IF_UNUSED
 
BIO_SOCK_REUSEADDR


	)

401 
	#BIO_£t_böd_mode
(
b
,
mode
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BIND_MODE
,mode,
NULL
)

	)

402 
	#BIO_gë_böd_mode
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BIND_MODE
,0,
NULL
)

	)

405 
	#BIO_do_c⁄√˘
(
b
Ë
	`BIO_do_h™dshake
(b)

	)

406 
	#BIO_do_ac˚±
(
b
Ë
	`BIO_do_h™dshake
(b)

	)

409 
	#BIO_do_h™dshake
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_DO_STATE_MACHINE
,0,
NULL
)

	)

412 
	#BIO_£t_fd
(
b
,
fd
,
c
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_FD
,c,fd)

	)

413 
	#BIO_gë_fd
(
b
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_GET_FD
,0,(*)(c))

	)

416 
	#BIO_£t_Â
(
b
,
Â
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILE_PTR
,c,(*)(Â))

	)

417 
	#BIO_gë_Â
(
b
,
Âp
Ë
	`BIO_˘æ
(b,
BIO_C_GET_FILE_PTR
,0,(*)(Âp))

	)

420 
	#BIO_£ek
(
b
,
ofs
Ë()
	`BIO_˘æ
(b,
BIO_C_FILE_SEEK
,ofs,
NULL
)

	)

421 
	#BIO_ãŒ
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_FILE_TELL
,0,
NULL
)

	)

427 #ifde‡
CONST_STRICT


432 
BIO_ªad_fûíame
(
BIO
 *
b
, c⁄° *
«me
);

434 
	#BIO_ªad_fûíame
(
b
,
«me
Ë()
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

435 
BIO_CLOSE
|
BIO_FP_READ
,(*)(
«me
))

	)

437 
	#BIO_wrôe_fûíame
(
b
,
«me
Ë()
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

438 
BIO_CLOSE
|
BIO_FP_WRITE
,
«me
)

	)

439 
	#BIO_≠≥nd_fûíame
(
b
,
«me
Ë()
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

440 
BIO_CLOSE
|
BIO_FP_APPEND
,
«me
)

	)

441 
	#BIO_rw_fûíame
(
b
,
«me
Ë()
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

442 
BIO_CLOSE
|
BIO_FP_READ
|
BIO_FP_WRITE
,
«me
)

	)

450 
	#BIO_£t_s¶
(
b
,
s¶
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_SSL
,c,(*)(s¶))

	)

451 
	#BIO_gë_s¶
(
b
,
s¶p
Ë
	`BIO_˘æ
(b,
BIO_C_GET_SSL
,0,(*)(s¶p))

	)

452 
	#BIO_£t_s¶_mode
(
b
,
˛õ¡
Ë
	`BIO_˘æ
(b,
BIO_C_SSL_MODE
,˛õ¡,
NULL
)

	)

453 
	#BIO_£t_s¶_ª√gŸüã_byãs
(
b
,
num
) \

454 
	`BIO_˘æ
(
b
,
BIO_C_SET_SSL_RENEGOTIATE_BYTES
,
num
,
NULL
)

	)

455 
	#BIO_gë_num_ª√gŸüãs
(
b
) \

456 
	`BIO_˘æ
(
b
,
BIO_C_GET_SSL_NUM_RENEGOTIATES
,0,
NULL
)

	)

457 
	#BIO_£t_s¶_ª√gŸüã_timeout
(
b
,
£c⁄ds
) \

458 
	`BIO_˘æ
(
b
,
BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT
,
£c⁄ds
,
NULL
)

	)

463 
	#BIO_gë_mem_d©a
(
b
,
µ
Ë
	`BIO_˘æ
(b,
BIO_CTRL_INFO
,0,(*)’p))

	)

464 
	#BIO_£t_mem_buf
(
b
,
bm
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUF_MEM
,c,(*)(bm))

	)

465 
	#BIO_gë_mem_±r
(
b
,
µ
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BUF_MEM_PTR
,0, \

466 (*)(
µ
))

	)

467 
	#BIO_£t_mem_eof_ªtu∫
(
b
,
v
) \

468 
	`BIO_˘æ
(
b
,
BIO_C_SET_BUF_MEM_EOF_RETURN
,
v
,
NULL
)

	)

471 
	#BIO_gë_buf„r_num_löes
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BUFF_NUM_LINES
,0,
NULL
)

	)

472 
	#BIO_£t_buf„r_size
(
b
,
size
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,
NULL
)

	)

473 
	#BIO_£t_ªad_buf„r_size
(
b
,
size
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,0)

	)

474 
	#BIO_£t_wrôe_buf„r_size
(
b
,
size
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,1)

	)

475 
	#BIO_£t_buf„r_ªad_d©a
(
b
,
buf
,
num
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUFF_READ_DATA
,num,buf)

	)

478 
	#BIO_dup_°©e
(
b
,
ªt
Ë
	`BIO_˘æ
(b,
BIO_CTRL_DUP
,0,(*)‘ë))

	)

480 
	#BIO_ª£t
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_RESET
,0,
NULL
)

	)

481 
	#BIO_eof
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_EOF
,0,
NULL
)

	)

482 
	#BIO_£t_˛o£
(
b
,
c
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_SET_CLOSE
,(c),
NULL
)

	)

483 
	#BIO_gë_˛o£
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_GET_CLOSE
,0,
NULL
)

	)

484 
	#BIO_≥ndög
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_PENDING
,0,
NULL
)

	)

485 
	#BIO_w≥ndög
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_WPENDING
,0,
NULL
)

	)

487 
size_t
 
BIO_˘æ_≥ndög
(
BIO
 *
b
);

488 
size_t
 
BIO_˘æ_w≥ndög
(
BIO
 *
b
);

489 
	#BIO_Êush
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_FLUSH
,0,
NULL
)

	)

490 
	#BIO_gë_öfo_ˇŒback
(
b
,
cbp
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_GET_CALLBACK
,0, \

491 
cbp
)

	)

492 
	#BIO_£t_öfo_ˇŒback
(
b
,
cb
Ë()
	`BIO_ˇŒback_˘æ
(b,
BIO_CTRL_SET_CALLBACK
,cb)

	)

495 
	#BIO_buf„r_gë_num_löes
(
b
Ë
	`BIO_˘æ
(b,
BIO_CTRL_GET
,0,
NULL
)

	)

496 
	#BIO_buf„r_≥ek
(
b
,
s
,
l
Ë
	`BIO_˘æ
(b,
BIO_CTRL_PEEK
,÷),(s))

	)

499 
	#BIO_£t_wrôe_buf_size
(
b
,
size
Ë()
	`BIO_˘æ
(b,
BIO_C_SET_WRITE_BUF_SIZE
,size,
NULL
)

	)

500 
	#BIO_gë_wrôe_buf_size
(
b
,
size
Ë(
size_t
)
	`BIO_˘æ
(b,
BIO_C_GET_WRITE_BUF_SIZE
,size,
NULL
)

	)

501 
	#BIO_make_bio_∑ú
(
b1
,
b2
Ë()
	`BIO_˘æ
(b1,
BIO_C_MAKE_BIO_PAIR
,0,b2)

	)

502 
	#BIO_de°roy_bio_∑ú
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_DESTROY_BIO_PAIR
,0,
NULL
)

	)

503 
	#BIO_shutdown_wr
(
b
Ë()
	`BIO_˘æ
(b, 
BIO_C_SHUTDOWN_WR
, 0, 
NULL
)

	)

505 
	#BIO_gë_wrôe_gu¨™ãe
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_GET_WRITE_GUARANTEE
,0,
NULL
)

	)

506 
	#BIO_gë_ªad_ªque°
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_GET_READ_REQUEST
,0,
NULL
)

	)

507 
size_t
 
BIO_˘æ_gë_wrôe_gu¨™ãe
(
BIO
 *
b
);

508 
size_t
 
BIO_˘æ_gë_ªad_ªque°
(
BIO
 *
b
);

509 
BIO_˘æ_ª£t_ªad_ªque°
(
BIO
 *
b
);

512 
	#BIO_˘æ_dgøm_c⁄√˘
(
b
,
≥î
) \

513 ()
	`BIO_˘æ
(
b
,
BIO_CTRL_DGRAM_CONNECT
,0, (*)(
≥î
))

	)

514 
	#BIO_˘æ_£t_c⁄√˘ed
(
b
,
≥î
) \

515 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_SET_CONNECTED
, 0, (*)(
≥î
))

	)

516 
	#BIO_dgøm_ªcv_timedout
(
b
) \

517 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP
, 0, 
NULL
)

	)

518 
	#BIO_dgøm_£nd_timedout
(
b
) \

519 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP
, 0, 
NULL
)

	)

520 
	#BIO_dgøm_gë_≥î
(
b
,
≥î
) \

521 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_PEER
, 0, (*)(
≥î
))

	)

522 
	#BIO_dgøm_£t_≥î
(
b
,
≥î
) \

523 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_SET_PEER
, 0, (*)(
≥î
))

	)

524 
	#BIO_dgøm_gë_mtu_ovîhód
(
b
) \

525 ()
	`BIO_˘æ
((
b
), 
BIO_CTRL_DGRAM_GET_MTU_OVERHEAD
, 0, 
NULL
)

	)

527 
	#BIO_gë_ex_√w_ödex
(
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
) \

528 
	`CRYPTO_gë_ex_√w_ödex
(
CRYPTO_EX_INDEX_BIO
, 
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
)

	)

529 
BIO_£t_ex_d©a
(
BIO
 *
bio
, 
idx
, *
d©a
);

530 *
BIO_gë_ex_d©a
(
BIO
 *
bio
, 
idx
);

531 
uöt64_t
 
BIO_numbî_ªad
(
BIO
 *
bio
);

532 
uöt64_t
 
BIO_numbî_wrôãn
(
BIO
 *
bio
);

535 
BIO_a¢1_£t_¥efix
(
BIO
 *
b
, 
a¢1_ps_func
 *
¥efix
,

536 
a¢1_ps_func
 *
¥efix_‰ì
);

537 
BIO_a¢1_gë_¥efix
(
BIO
 *
b
, 
a¢1_ps_func
 **
µªfix
,

538 
a¢1_ps_func
 **
µªfix_‰ì
);

539 
BIO_a¢1_£t_suffix
(
BIO
 *
b
, 
a¢1_ps_func
 *
suffix
,

540 
a¢1_ps_func
 *
suffix_‰ì
);

541 
BIO_a¢1_gë_suffix
(
BIO
 *
b
, 
a¢1_ps_func
 **
psuffix
,

542 
a¢1_ps_func
 **
psuffix_‰ì
);

544 c⁄° 
BIO_METHOD
 *
BIO_s_fûe
();

545 
BIO
 *
BIO_√w_fûe
(c⁄° *
fûíame
, c⁄° *
mode
);

546 #i‚de‡
OPENSSL_NO_STDIO


547 
BIO
 *
BIO_√w_Â
(
FILE
 *
°ªam
, 
˛o£_Êag
);

549 
BIO
 *
BIO_√w
(c⁄° 
BIO_METHOD
 *
ty≥
);

550 
BIO_‰ì
(
BIO
 *
a
);

551 
BIO_£t_d©a
(
BIO
 *
a
, *
±r
);

552 *
BIO_gë_d©a
(
BIO
 *
a
);

553 
BIO_£t_öô
(
BIO
 *
a
, 
öô
);

554 
BIO_gë_öô
(
BIO
 *
a
);

555 
BIO_£t_shutdown
(
BIO
 *
a
, 
shut
);

556 
BIO_gë_shutdown
(
BIO
 *
a
);

557 
BIO_v‰ì
(
BIO
 *
a
);

558 
BIO_up_ªf
(
BIO
 *
a
);

559 
BIO_ªad
(
BIO
 *
b
, *
d©a
, 
dÀn
);

560 
BIO_ªad_ex
(
BIO
 *
b
, *
d©a
, 
size_t
 
dÀn
, size_à*
ªadbyãs
);

561 
BIO_gës
(
BIO
 *
bp
, *
buf
, 
size
);

562 
BIO_wrôe
(
BIO
 *
b
, c⁄° *
d©a
, 
dÀn
);

563 
BIO_wrôe_ex
(
BIO
 *
b
, c⁄° *
d©a
, 
size_t
 
dÀn
, size_à*
wrôãn
);

564 
BIO_puts
(
BIO
 *
bp
, c⁄° *
buf
);

565 
BIO_ödít
(
BIO
 *
b
, 
ödít
, 
max
);

566 
BIO_˘æ
(
BIO
 *
bp
, 
cmd
, 
œrg
, *
∑rg
);

567 
BIO_ˇŒback_˘æ
(
BIO
 *
b
, 
cmd
, 
BIO_öfo_cb
 *
Â
);

568 *
BIO_±r_˘æ
(
BIO
 *
bp
, 
cmd
, 
œrg
);

569 
BIO_öt_˘æ
(
BIO
 *
bp
, 
cmd
, 
œrg
, 
ürg
);

570 
BIO
 *
BIO_push
(BIO *
b
, BIO *
≠≥nd
);

571 
BIO
 *
BIO_p›
(BIO *
b
);

572 
BIO_‰ì_Æl
(
BIO
 *
a
);

573 
BIO
 *
BIO_föd_ty≥
(BIO *
b
, 
bio_ty≥
);

574 
BIO
 *
BIO_√xt
(BIO *
b
);

575 
BIO_£t_√xt
(
BIO
 *
b
, BIO *
√xt
);

576 
BIO
 *
BIO_gë_ªåy_BIO
(BIO *
bio
, *
ªas⁄
);

577 
BIO_gë_ªåy_ªas⁄
(
BIO
 *
bio
);

578 
BIO_£t_ªåy_ªas⁄
(
BIO
 *
bio
, 
ªas⁄
);

579 
BIO
 *
BIO_dup_chaö
(BIO *
ö
);

581 
BIO_ƒód0
(
BIO
 *
bio
, **
buf
);

582 
BIO_ƒód
(
BIO
 *
bio
, **
buf
, 
num
);

583 
BIO_nwrôe0
(
BIO
 *
bio
, **
buf
);

584 
BIO_nwrôe
(
BIO
 *
bio
, **
buf
, 
num
);

586 
BIO_debug_ˇŒback
(
BIO
 *
bio
, 
cmd
, c⁄° *
¨gp
, 
¨gi
,

587 
¨gl
, 
ªt
);

589 c⁄° 
BIO_METHOD
 *
BIO_s_mem
();

590 c⁄° 
BIO_METHOD
 *
BIO_s_£cmem
();

591 
BIO
 *
BIO_√w_mem_buf
(c⁄° *
buf
, 
Àn
);

592 #i‚de‡
OPENSSL_NO_SOCK


593 c⁄° 
BIO_METHOD
 *
BIO_s_sockë
();

594 c⁄° 
BIO_METHOD
 *
BIO_s_c⁄√˘
();

595 c⁄° 
BIO_METHOD
 *
BIO_s_ac˚±
();

597 c⁄° 
BIO_METHOD
 *
BIO_s_fd
();

598 c⁄° 
BIO_METHOD
 *
BIO_s_log
();

599 c⁄° 
BIO_METHOD
 *
BIO_s_bio
();

600 c⁄° 
BIO_METHOD
 *
BIO_s_nuŒ
();

601 c⁄° 
BIO_METHOD
 *
BIO_f_nuŒ
();

602 c⁄° 
BIO_METHOD
 *
BIO_f_buf„r
();

603 c⁄° 
BIO_METHOD
 *
BIO_f_löebuf„r
();

604 c⁄° 
BIO_METHOD
 *
BIO_f_nbio_ã°
();

605 #i‚de‡
OPENSSL_NO_DGRAM


606 c⁄° 
BIO_METHOD
 *
BIO_s_d©agøm
();

607 
BIO_dgøm_n⁄_Áèl_îr‹
(
îr‹
);

608 
BIO
 *
BIO_√w_dgøm
(
fd
, 
˛o£_Êag
);

609 #i‚de‡
OPENSSL_NO_SCTP


610 c⁄° 
BIO_METHOD
 *
BIO_s_d©agøm_s˘p
();

611 
BIO
 *
BIO_√w_dgøm_s˘p
(
fd
, 
˛o£_Êag
);

612 
BIO_dgøm_is_s˘p
(
BIO
 *
bio
);

613 
BIO_dgøm_s˘p_nŸifiˇti⁄_cb
(
BIO
 *
b
,

614 (*
h™dÀ_nŸifiˇti⁄s
Ë(
BIO
 *
bio
,

615 *
c⁄ãxt
,

616 *
buf
),

617 *
c⁄ãxt
);

618 
BIO_dgøm_s˘p_waô_f‹_dry
(
BIO
 *
b
);

619 
BIO_dgøm_s˘p_msg_waôög
(
BIO
 *
b
);

623 #i‚de‡
OPENSSL_NO_SOCK


624 
BIO_sock_should_ªåy
(
i
);

625 
BIO_sock_n⁄_Áèl_îr‹
(
îr‹
);

628 
BIO_fd_should_ªåy
(
i
);

629 
BIO_fd_n⁄_Áèl_îr‹
(
îr‹
);

630 
BIO_dump_cb
((*
cb
Ë(c⁄° *
d©a
, 
size_t
 
Àn
, *
u
),

631 *
u
, c⁄° *
s
, 
Àn
);

632 
BIO_dump_ödít_cb
((*
cb
Ë(c⁄° *
d©a
, 
size_t
 
Àn
, *
u
),

633 *
u
, c⁄° *
s
, 
Àn
, 
ödít
);

634 
BIO_dump
(
BIO
 *
b
, c⁄° *
byãs
, 
Àn
);

635 
BIO_dump_ödít
(
BIO
 *
b
, c⁄° *
byãs
, 
Àn
, 
ödít
);

636 #i‚de‡
OPENSSL_NO_STDIO


637 
BIO_dump_Â
(
FILE
 *
Â
, c⁄° *
s
, 
Àn
);

638 
BIO_dump_ödít_Â
(
FILE
 *
Â
, c⁄° *
s
, 
Àn
, 
ödít
);

640 
BIO_hex_°rög
(
BIO
 *
out
, 
ödít
, 
width
, *
d©a
,

641 
d©Æí
);

643 #i‚de‡
OPENSSL_NO_SOCK


644 
BIO_ADDR
 *
BIO_ADDR_√w
();

645 
BIO_ADDR_øwmake
(
BIO_ADDR
 *
≠
, 
Ámûy
,

646 c⁄° *
whîe
, 
size_t
 
whîñí
, 
p‹t
);

647 
BIO_ADDR_‰ì
(
BIO_ADDR
 *);

648 
BIO_ADDR_˛ór
(
BIO_ADDR
 *
≠
);

649 
BIO_ADDR_Ámûy
(c⁄° 
BIO_ADDR
 *
≠
);

650 
BIO_ADDR_øwaddªss
(c⁄° 
BIO_ADDR
 *
≠
, *
p
, 
size_t
 *
l
);

651 
BIO_ADDR_øwp‹t
(c⁄° 
BIO_ADDR
 *
≠
);

652 *
BIO_ADDR_ho°«me_°rög
(c⁄° 
BIO_ADDR
 *
≠
, 
numîic
);

653 *
BIO_ADDR_£rvi˚_°rög
(c⁄° 
BIO_ADDR
 *
≠
, 
numîic
);

654 *
BIO_ADDR_∑th_°rög
(c⁄° 
BIO_ADDR
 *
≠
);

656 c⁄° 
BIO_ADDRINFO
 *
BIO_ADDRINFO_√xt
(c⁄° BIO_ADDRINFO *
bai
);

657 
BIO_ADDRINFO_Ámûy
(c⁄° 
BIO_ADDRINFO
 *
bai
);

658 
BIO_ADDRINFO_sockty≥
(c⁄° 
BIO_ADDRINFO
 *
bai
);

659 
BIO_ADDRINFO_¥Ÿocﬁ
(c⁄° 
BIO_ADDRINFO
 *
bai
);

660 c⁄° 
BIO_ADDR
 *
BIO_ADDRINFO_addªss
(c⁄° 
BIO_ADDRINFO
 *
bai
);

661 
BIO_ADDRINFO_‰ì
(
BIO_ADDRINFO
 *
bai
);

663 
	eBIO_ho°£rv_¥i‹ôõs
 {

664 
BIO_PARSE_PRIO_HOST
, 
BIO_PARSE_PRIO_SERV


666 
BIO_∑r£_ho°£rv
(c⁄° *
ho°£rv
, **
ho°
, **
£rvi˚
,

667 
BIO_ho°£rv_¥i‹ôõs
 
ho°£rv_¥io
);

668 
	eBIO_lookup_ty≥
 {

669 
BIO_LOOKUP_CLIENT
, 
BIO_LOOKUP_SERVER


671 
BIO_lookup
(c⁄° *
ho°
, c⁄° *
£rvi˚
,

672 
BIO_lookup_ty≥
 
lookup_ty≥
,

673 
Ámûy
, 
sockty≥
, 
BIO_ADDRINFO
 **
ªs
);

674 
BIO_lookup_ex
(c⁄° *
ho°
, c⁄° *
£rvi˚
,

675 
lookup_ty≥
, 
Ámûy
, 
sockty≥
, 
¥Ÿocﬁ
,

676 
BIO_ADDRINFO
 **
ªs
);

677 
BIO_sock_îr‹
(
sock
);

678 
BIO_sockë_io˘l
(
fd
, 
ty≥
, *
¨g
);

679 
BIO_sockë_nbio
(
fd
, 
mode
);

680 
BIO_sock_öô
();

681 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

682 
	#BIO_sock_˛ónup
(Ë0Ë

	)

684 
BIO_£t_t˝_ndñay
(
sock
, 
tu∫_⁄
);

686 
DEPRECATEDIN_1_1_0
(
ho°ít
 *
BIO_gëho°by«me
(c⁄° *
«me
))

687 
DEPRECATEDIN_1_1_0
(
BIO_gë_p‹t
(c⁄° *
°r
, *
p‹t_±r
))

688 
DEPRECATEDIN_1_1_0
(
BIO_gë_ho°_ù
(c⁄° *
°r
, *
ù
))

689 
DEPRECATEDIN_1_1_0
(
BIO_gë_ac˚±_sockë
(*
ho°_p‹t
, 
mode
))

690 
DEPRECATEDIN_1_1_0
(
BIO_ac˚±
(
sock
, **
ù_p‹t
))

692 
	uBIO_sock_öfo_u
 {

693 
BIO_ADDR
 *
addr
;

695 
	eBIO_sock_öfo_ty≥
 {

696 
BIO_SOCK_INFO_ADDRESS


698 
BIO_sock_öfo
(
sock
,

699 
BIO_sock_öfo_ty≥
 
ty≥
, 
BIO_sock_öfo_u
 *
öfo
);

701 
	#BIO_SOCK_REUSEADDR
 0x01

	)

702 
	#BIO_SOCK_V6_ONLY
 0x02

	)

703 
	#BIO_SOCK_KEEPALIVE
 0x04

	)

704 
	#BIO_SOCK_NONBLOCK
 0x08

	)

705 
	#BIO_SOCK_NODELAY
 0x10

	)

707 
BIO_sockë
(
domaö
, 
sockty≥
, 
¥Ÿocﬁ
, 
›ti⁄s
);

708 
BIO_c⁄√˘
(
sock
, c⁄° 
BIO_ADDR
 *
addr
, 
›ti⁄s
);

709 
BIO_böd
(
sock
, c⁄° 
BIO_ADDR
 *
addr
, 
›ti⁄s
);

710 
BIO_li°í
(
sock
, c⁄° 
BIO_ADDR
 *
addr
, 
›ti⁄s
);

711 
BIO_ac˚±_ex
(
ac˚±_sock
, 
BIO_ADDR
 *
addr
, 
›ti⁄s
);

712 
BIO_˛o£sockë
(
sock
);

714 
BIO
 *
BIO_√w_sockë
(
sock
, 
˛o£_Êag
);

715 
BIO
 *
BIO_√w_c⁄√˘
(c⁄° *
ho°_p‹t
);

716 
BIO
 *
BIO_√w_ac˚±
(c⁄° *
ho°_p‹t
);

719 
BIO
 *
BIO_√w_fd
(
fd
, 
˛o£_Êag
);

721 
BIO_√w_bio_∑ú
(
BIO
 **
bio1
, 
size_t
 
wrôebuf1
,

722 
BIO
 **
bio2
, 
size_t
 
wrôebuf2
);

729 
BIO_c›y_√xt_ªåy
(
BIO
 *
b
);

735 
	#os¶_bio__©å__
(
x
)

	)

736 #i‡
deföed
(
__GNUC__
Ë&& deföed(
__STDC_VERSION__
) \

737 && !
deföed
(
__APPLE__
)

742 #i‡
__STDC_VERSION__
 >= 199901L

743 #unde‡
os¶_bio__©å__


744 
	#os¶_bio__©å__
 
__©åibuã__


	)

745 #i‡
__GNUC__
*10 + 
__GNUC_MINOR__
 >= 44

746 
	#os¶_bio__¥ötf__
 
__gnu_¥ötf__


	)

748 
	#os¶_bio__¥ötf__
 
__¥ötf__


	)

752 
BIO_¥ötf
(
BIO
 *
bio
, c⁄° *
f‹m©
, ...)

753 
os¶_bio__©å__
((
__f‹m©__
(
os¶_bio__¥ötf__
, 2, 3)));

754 
BIO_v¥ötf
(
BIO
 *
bio
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

755 
os¶_bio__©å__
((
__f‹m©__
(
os¶_bio__¥ötf__
, 2, 0)));

756 
BIO_¢¥ötf
(*
buf
, 
size_t
 
n
, c⁄° *
f‹m©
, ...)

757 
os¶_bio__©å__
((
__f‹m©__
(
os¶_bio__¥ötf__
, 3, 4)));

758 
BIO_v¢¥ötf
(*
buf
, 
size_t
 
n
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

759 
os¶_bio__©å__
((
__f‹m©__
(
os¶_bio__¥ötf__
, 3, 0)));

760 #unde‡
os¶_bio__©å__


761 #unde‡
os¶_bio__¥ötf__


764 
BIO_METHOD
 *
BIO_mëh_√w
(
ty≥
, c⁄° *
«me
);

765 
BIO_mëh_‰ì
(
BIO_METHOD
 *
biom
);

766 (*
BIO_mëh_gë_wrôe
(c⁄° 
BIO_METHOD
 *
biom
)Ë(
BIO
 *, const *, );

767 (*
BIO_mëh_gë_wrôe_ex
(c⁄° 
BIO_METHOD
 *
biom
)Ë(
BIO
 *, c⁄° *, 
size_t
,

768 
size_t
 *);

769 
BIO_mëh_£t_wrôe
(
BIO_METHOD
 *
biom
,

770 (*
wrôe
Ë(
BIO
 *, const *, ));

771 
BIO_mëh_£t_wrôe_ex
(
BIO_METHOD
 *
biom
,

772 (*
bwrôe
Ë(
BIO
 *, c⁄° *, 
size_t
, size_t *));

773 (*
BIO_mëh_gë_ªad
(c⁄° 
BIO_METHOD
 *
biom
)Ë(
BIO
 *, *, );

774 (*
BIO_mëh_gë_ªad_ex
(c⁄° 
BIO_METHOD
 *
biom
)Ë(
BIO
 *, *, 
size_t
, size_t *);

775 
BIO_mëh_£t_ªad
(
BIO_METHOD
 *
biom
,

776 (*
ªad
Ë(
BIO
 *, *, ));

777 
BIO_mëh_£t_ªad_ex
(
BIO_METHOD
 *
biom
,

778 (*
bªad
Ë(
BIO
 *, *, 
size_t
, size_t *));

779 (*
BIO_mëh_gë_puts
(c⁄° 
BIO_METHOD
 *
biom
)Ë(
BIO
 *, const *);

780 
BIO_mëh_£t_puts
(
BIO_METHOD
 *
biom
,

781 (*
puts
Ë(
BIO
 *, const *));

782 (*
BIO_mëh_gë_gës
(c⁄° 
BIO_METHOD
 *
biom
)Ë(
BIO
 *, *, );

783 
BIO_mëh_£t_gës
(
BIO_METHOD
 *
biom
,

784 (*
gës
Ë(
BIO
 *, *, ));

785 (*
BIO_mëh_gë_˘æ
(c⁄° 
BIO_METHOD
 *
biom
)Ë(
BIO
 *, , , *);

786 
BIO_mëh_£t_˘æ
(
BIO_METHOD
 *
biom
,

787 (*
˘æ
Ë(
BIO
 *, , , *));

788 (*
BIO_mëh_gë_¸óã
(c⁄° 
BIO_METHOD
 *
bi⁄
)Ë(
BIO
 *);

789 
BIO_mëh_£t_¸óã
(
BIO_METHOD
 *
biom
, (*
¸óã
Ë(
BIO
 *));

790 (*
BIO_mëh_gë_de°roy
(c⁄° 
BIO_METHOD
 *
biom
)Ë(
BIO
 *);

791 
BIO_mëh_£t_de°roy
(
BIO_METHOD
 *
biom
, (*
de°roy
Ë(
BIO
 *));

792 (*
BIO_mëh_gë_ˇŒback_˘æ
(c⁄° 
BIO_METHOD
 *
biom
))

793 (
BIO
 *, , 
BIO_öfo_cb
 *);

794 
BIO_mëh_£t_ˇŒback_˘æ
(
BIO_METHOD
 *
biom
,

795 (*
ˇŒback_˘æ
Ë(
BIO
 *, ,

796 
BIO_öfo_cb
 *));

798 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/evperr.h

11 #i‚de‡
HEADER_EVPERR_H


12 
	#HEADER_EVPERR_H


	)

14 
	~<›ís¶/symhacks.h
>

16 #ifde‡ 
__˝lu•lus


19 
ERR_lﬂd_EVP_°rögs
();

24 
	#EVP_F_AESNI_INIT_KEY
 165

	)

25 
	#EVP_F_AESNI_XTS_INIT_KEY
 207

	)

26 
	#EVP_F_AES_GCM_CTRL
 196

	)

27 
	#EVP_F_AES_INIT_KEY
 133

	)

28 
	#EVP_F_AES_OCB_CIPHER
 169

	)

29 
	#EVP_F_AES_T4_INIT_KEY
 178

	)

30 
	#EVP_F_AES_T4_XTS_INIT_KEY
 208

	)

31 
	#EVP_F_AES_WRAP_CIPHER
 170

	)

32 
	#EVP_F_AES_XTS_INIT_KEY
 209

	)

33 
	#EVP_F_ALG_MODULE_INIT
 177

	)

34 
	#EVP_F_ARIA_CCM_INIT_KEY
 175

	)

35 
	#EVP_F_ARIA_GCM_CTRL
 197

	)

36 
	#EVP_F_ARIA_GCM_INIT_KEY
 176

	)

37 
	#EVP_F_ARIA_INIT_KEY
 185

	)

38 
	#EVP_F_B64_NEW
 198

	)

39 
	#EVP_F_CAMELLIA_INIT_KEY
 159

	)

40 
	#EVP_F_CHACHA20_POLY1305_CTRL
 182

	)

41 
	#EVP_F_CMLL_T4_INIT_KEY
 179

	)

42 
	#EVP_F_DES_EDE3_WRAP_CIPHER
 171

	)

43 
	#EVP_F_DO_SIGVER_INIT
 161

	)

44 
	#EVP_F_ENC_NEW
 199

	)

45 
	#EVP_F_EVP_CIPHERINIT_EX
 123

	)

46 
	#EVP_F_EVP_CIPHER_ASN1_TO_PARAM
 204

	)

47 
	#EVP_F_EVP_CIPHER_CTX_COPY
 163

	)

48 
	#EVP_F_EVP_CIPHER_CTX_CTRL
 124

	)

49 
	#EVP_F_EVP_CIPHER_CTX_SET_KEY_LENGTH
 122

	)

50 
	#EVP_F_EVP_CIPHER_PARAM_TO_ASN1
 205

	)

51 
	#EVP_F_EVP_DECRYPTFINAL_EX
 101

	)

52 
	#EVP_F_EVP_DECRYPTUPDATE
 166

	)

53 
	#EVP_F_EVP_DIGESTFINALXOF
 174

	)

54 
	#EVP_F_EVP_DIGESTINIT_EX
 128

	)

55 
	#EVP_F_EVP_ENCRYPTDECRYPTUPDATE
 219

	)

56 
	#EVP_F_EVP_ENCRYPTFINAL_EX
 127

	)

57 
	#EVP_F_EVP_ENCRYPTUPDATE
 167

	)

58 
	#EVP_F_EVP_MD_CTX_COPY_EX
 110

	)

59 
	#EVP_F_EVP_MD_SIZE
 162

	)

60 
	#EVP_F_EVP_OPENINIT
 102

	)

61 
	#EVP_F_EVP_PBE_ALG_ADD
 115

	)

62 
	#EVP_F_EVP_PBE_ALG_ADD_TYPE
 160

	)

63 
	#EVP_F_EVP_PBE_CIPHERINIT
 116

	)

64 
	#EVP_F_EVP_PBE_SCRYPT
 181

	)

65 
	#EVP_F_EVP_PKCS82PKEY
 111

	)

66 
	#EVP_F_EVP_PKEY2PKCS8
 113

	)

67 
	#EVP_F_EVP_PKEY_ASN1_ADD0
 188

	)

68 
	#EVP_F_EVP_PKEY_CHECK
 186

	)

69 
	#EVP_F_EVP_PKEY_COPY_PARAMETERS
 103

	)

70 
	#EVP_F_EVP_PKEY_CTX_CTRL
 137

	)

71 
	#EVP_F_EVP_PKEY_CTX_CTRL_STR
 150

	)

72 
	#EVP_F_EVP_PKEY_CTX_DUP
 156

	)

73 
	#EVP_F_EVP_PKEY_CTX_MD
 168

	)

74 
	#EVP_F_EVP_PKEY_DECRYPT
 104

	)

75 
	#EVP_F_EVP_PKEY_DECRYPT_INIT
 138

	)

76 
	#EVP_F_EVP_PKEY_DECRYPT_OLD
 151

	)

77 
	#EVP_F_EVP_PKEY_DERIVE
 153

	)

78 
	#EVP_F_EVP_PKEY_DERIVE_INIT
 154

	)

79 
	#EVP_F_EVP_PKEY_DERIVE_SET_PEER
 155

	)

80 
	#EVP_F_EVP_PKEY_ENCRYPT
 105

	)

81 
	#EVP_F_EVP_PKEY_ENCRYPT_INIT
 139

	)

82 
	#EVP_F_EVP_PKEY_ENCRYPT_OLD
 152

	)

83 
	#EVP_F_EVP_PKEY_GET0_DH
 119

	)

84 
	#EVP_F_EVP_PKEY_GET0_DSA
 120

	)

85 
	#EVP_F_EVP_PKEY_GET0_EC_KEY
 131

	)

86 
	#EVP_F_EVP_PKEY_GET0_HMAC
 183

	)

87 
	#EVP_F_EVP_PKEY_GET0_POLY1305
 184

	)

88 
	#EVP_F_EVP_PKEY_GET0_RSA
 121

	)

89 
	#EVP_F_EVP_PKEY_GET0_SIPHASH
 172

	)

90 
	#EVP_F_EVP_PKEY_GET_RAW_PRIVATE_KEY
 202

	)

91 
	#EVP_F_EVP_PKEY_GET_RAW_PUBLIC_KEY
 203

	)

92 
	#EVP_F_EVP_PKEY_KEYGEN
 146

	)

93 
	#EVP_F_EVP_PKEY_KEYGEN_INIT
 147

	)

94 
	#EVP_F_EVP_PKEY_METH_ADD0
 194

	)

95 
	#EVP_F_EVP_PKEY_METH_NEW
 195

	)

96 
	#EVP_F_EVP_PKEY_NEW
 106

	)

97 
	#EVP_F_EVP_PKEY_NEW_CMAC_KEY
 193

	)

98 
	#EVP_F_EVP_PKEY_NEW_RAW_PRIVATE_KEY
 191

	)

99 
	#EVP_F_EVP_PKEY_NEW_RAW_PUBLIC_KEY
 192

	)

100 
	#EVP_F_EVP_PKEY_PARAMGEN
 148

	)

101 
	#EVP_F_EVP_PKEY_PARAMGEN_INIT
 149

	)

102 
	#EVP_F_EVP_PKEY_PARAM_CHECK
 189

	)

103 
	#EVP_F_EVP_PKEY_PUBLIC_CHECK
 190

	)

104 
	#EVP_F_EVP_PKEY_SET1_ENGINE
 187

	)

105 
	#EVP_F_EVP_PKEY_SET_ALIAS_TYPE
 206

	)

106 
	#EVP_F_EVP_PKEY_SIGN
 140

	)

107 
	#EVP_F_EVP_PKEY_SIGN_INIT
 141

	)

108 
	#EVP_F_EVP_PKEY_VERIFY
 142

	)

109 
	#EVP_F_EVP_PKEY_VERIFY_INIT
 143

	)

110 
	#EVP_F_EVP_PKEY_VERIFY_RECOVER
 144

	)

111 
	#EVP_F_EVP_PKEY_VERIFY_RECOVER_INIT
 145

	)

112 
	#EVP_F_EVP_SIGNFINAL
 107

	)

113 
	#EVP_F_EVP_VERIFYFINAL
 108

	)

114 
	#EVP_F_INT_CTX_NEW
 157

	)

115 
	#EVP_F_OK_NEW
 200

	)

116 
	#EVP_F_PKCS5_PBE_KEYIVGEN
 117

	)

117 
	#EVP_F_PKCS5_V2_PBE_KEYIVGEN
 118

	)

118 
	#EVP_F_PKCS5_V2_PBKDF2_KEYIVGEN
 164

	)

119 
	#EVP_F_PKCS5_V2_SCRYPT_KEYIVGEN
 180

	)

120 
	#EVP_F_PKEY_SET_TYPE
 158

	)

121 
	#EVP_F_RC2_MAGIC_TO_METH
 109

	)

122 
	#EVP_F_RC5_CTRL
 125

	)

123 
	#EVP_F_R_32_12_16_INIT_KEY
 242

	)

124 
	#EVP_F_S390X_AES_GCM_CTRL
 201

	)

125 
	#EVP_F_UPDATE
 173

	)

130 
	#EVP_R_AES_KEY_SETUP_FAILED
 143

	)

131 
	#EVP_R_ARIA_KEY_SETUP_FAILED
 176

	)

132 
	#EVP_R_BAD_DECRYPT
 100

	)

133 
	#EVP_R_BAD_KEY_LENGTH
 195

	)

134 
	#EVP_R_BUFFER_TOO_SMALL
 155

	)

135 
	#EVP_R_CAMELLIA_KEY_SETUP_FAILED
 157

	)

136 
	#EVP_R_CIPHER_PARAMETER_ERROR
 122

	)

137 
	#EVP_R_COMMAND_NOT_SUPPORTED
 147

	)

138 
	#EVP_R_COPY_ERROR
 173

	)

139 
	#EVP_R_CTRL_NOT_IMPLEMENTED
 132

	)

140 
	#EVP_R_CTRL_OPERATION_NOT_IMPLEMENTED
 133

	)

141 
	#EVP_R_DATA_NOT_MULTIPLE_OF_BLOCK_LENGTH
 138

	)

142 
	#EVP_R_DECODE_ERROR
 114

	)

143 
	#EVP_R_DIFFERENT_KEY_TYPES
 101

	)

144 
	#EVP_R_DIFFERENT_PARAMETERS
 153

	)

145 
	#EVP_R_ERROR_LOADING_SECTION
 165

	)

146 
	#EVP_R_ERROR_SETTING_FIPS_MODE
 166

	)

147 
	#EVP_R_EXPECTING_AN_HMAC_KEY
 174

	)

148 
	#EVP_R_EXPECTING_AN_RSA_KEY
 127

	)

149 
	#EVP_R_EXPECTING_A_DH_KEY
 128

	)

150 
	#EVP_R_EXPECTING_A_DSA_KEY
 129

	)

151 
	#EVP_R_EXPECTING_A_EC_KEY
 142

	)

152 
	#EVP_R_EXPECTING_A_POLY1305_KEY
 164

	)

153 
	#EVP_R_EXPECTING_A_SIPHASH_KEY
 175

	)

154 
	#EVP_R_FIPS_MODE_NOT_SUPPORTED
 167

	)

155 
	#EVP_R_GET_RAW_KEY_FAILED
 182

	)

156 
	#EVP_R_ILLEGAL_SCRYPT_PARAMETERS
 171

	)

157 
	#EVP_R_INITIALIZATION_ERROR
 134

	)

158 
	#EVP_R_INPUT_NOT_INITIALIZED
 111

	)

159 
	#EVP_R_INVALID_DIGEST
 152

	)

160 
	#EVP_R_INVALID_FIPS_MODE
 168

	)

161 
	#EVP_R_INVALID_IV_LENGTH
 194

	)

162 
	#EVP_R_INVALID_KEY
 163

	)

163 
	#EVP_R_INVALID_KEY_LENGTH
 130

	)

164 
	#EVP_R_INVALID_OPERATION
 148

	)

165 
	#EVP_R_KEYGEN_FAILURE
 120

	)

166 
	#EVP_R_KEY_SETUP_FAILED
 180

	)

167 
	#EVP_R_MEMORY_LIMIT_EXCEEDED
 172

	)

168 
	#EVP_R_MESSAGE_DIGEST_IS_NULL
 159

	)

169 
	#EVP_R_METHOD_NOT_SUPPORTED
 144

	)

170 
	#EVP_R_MISSING_PARAMETERS
 103

	)

171 
	#EVP_R_NOT_XOF_OR_INVALID_LENGTH
 178

	)

172 
	#EVP_R_NO_CIPHER_SET
 131

	)

173 
	#EVP_R_NO_DEFAULT_DIGEST
 158

	)

174 
	#EVP_R_NO_DIGEST_SET
 139

	)

175 
	#EVP_R_NO_KEY_SET
 154

	)

176 
	#EVP_R_NO_OPERATION_SET
 149

	)

177 
	#EVP_R_ONLY_ONESHOT_SUPPORTED
 177

	)

178 
	#EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE
 150

	)

179 
	#EVP_R_OPERATON_NOT_INITIALIZED
 151

	)

180 
	#EVP_R_OUTPUT_WOULD_OVERFLOW
 184

	)

181 
	#EVP_R_PARTIALLY_OVERLAPPING
 162

	)

182 
	#EVP_R_PBKDF2_ERROR
 181

	)

183 
	#EVP_R_PKEY_APPLICATION_ASN1_METHOD_ALREADY_REGISTERED
 179

	)

184 
	#EVP_R_PRIVATE_KEY_DECODE_ERROR
 145

	)

185 
	#EVP_R_PRIVATE_KEY_ENCODE_ERROR
 146

	)

186 
	#EVP_R_PUBLIC_KEY_NOT_RSA
 106

	)

187 
	#EVP_R_UNKNOWN_CIPHER
 160

	)

188 
	#EVP_R_UNKNOWN_DIGEST
 161

	)

189 
	#EVP_R_UNKNOWN_OPTION
 169

	)

190 
	#EVP_R_UNKNOWN_PBE_ALGORITHM
 121

	)

191 
	#EVP_R_UNSUPPORTED_ALGORITHM
 156

	)

192 
	#EVP_R_UNSUPPORTED_CIPHER
 107

	)

193 
	#EVP_R_UNSUPPORTED_KEYLENGTH
 123

	)

194 
	#EVP_R_UNSUPPORTED_KEY_DERIVATION_FUNCTION
 124

	)

195 
	#EVP_R_UNSUPPORTED_KEY_SIZE
 108

	)

196 
	#EVP_R_UNSUPPORTED_NUMBER_OF_ROUNDS
 135

	)

197 
	#EVP_R_UNSUPPORTED_PRF
 125

	)

198 
	#EVP_R_UNSUPPORTED_PRIVATE_KEY_ALGORITHM
 118

	)

199 
	#EVP_R_UNSUPPORTED_SALT_TYPE
 126

	)

200 
	#EVP_R_WRAP_MODE_NOT_ALLOWED
 170

	)

201 
	#EVP_R_WRONG_FINAL_BLOCK_LENGTH
 109

	)

202 
	#EVP_R_XTS_DUPLICATED_KEYS
 183

	)

	@/usr/include/openssl/objects.h

10 #i‚de‡
HEADER_OBJECTS_H


11 
	#HEADER_OBJECTS_H


	)

13 
	~<›ís¶/obj_mac.h
>

14 
	~<›ís¶/bio.h
>

15 
	~<›ís¶/a¢1.h
>

16 
	~<›ís¶/obje˘£º.h
>

18 
	#OBJ_NAME_TYPE_UNDEF
 0x00

	)

19 
	#OBJ_NAME_TYPE_MD_METH
 0x01

	)

20 
	#OBJ_NAME_TYPE_CIPHER_METH
 0x02

	)

21 
	#OBJ_NAME_TYPE_PKEY_METH
 0x03

	)

22 
	#OBJ_NAME_TYPE_COMP_METH
 0x04

	)

23 
	#OBJ_NAME_TYPE_NUM
 0x05

	)

25 
	#OBJ_NAME_ALIAS
 0x8000

	)

27 
	#OBJ_BSEARCH_VALUE_ON_NOMATCH
 0x01

	)

28 
	#OBJ_BSEARCH_FIRST_VALUE_ON_MATCH
 0x02

	)

31 #ifde‡ 
__˝lu•lus


35 
	sobj_«me_°
 {

36 
ty≥
;

37 
Æüs
;

38 c⁄° *
«me
;

39 c⁄° *
d©a
;

40 } 
	tOBJ_NAME
;

42 
	#OBJ_¸óã_™d_add_obje˘
(
a
,
b
,
c
Ë
	`OBJ_¸óã
◊,b,c)

	)

44 
OBJ_NAME_öô
();

45 
OBJ_NAME_√w_ödex
((*
hash_func
) (const *),

46 (*
cmp_func
) (const *, const *),

47 (*
‰ì_func
) (const *, , const *));

48 c⁄° *
OBJ_NAME_gë
(c⁄° *
«me
, 
ty≥
);

49 
OBJ_NAME_add
(c⁄° *
«me
, 
ty≥
, c⁄° *
d©a
);

50 
OBJ_NAME_ªmove
(c⁄° *
«me
, 
ty≥
);

51 
OBJ_NAME_˛ónup
(
ty≥
);

52 
OBJ_NAME_do_Æl
(
ty≥
, (*
‚
Ë(c⁄° 
OBJ_NAME
 *, *
¨g
),

53 *
¨g
);

54 
OBJ_NAME_do_Æl_s‹ãd
(
ty≥
,

55 (*
‚
Ë(c⁄° 
OBJ_NAME
 *, *
¨g
),

56 *
¨g
);

58 
ASN1_OBJECT
 *
OBJ_dup
(c⁄° ASN1_OBJECT *
o
);

59 
ASN1_OBJECT
 *
OBJ_nid2obj
(
n
);

60 c⁄° *
OBJ_nid2 
(
n
);

61 c⁄° *
OBJ_nid2¢
(
n
);

62 
OBJ_obj2nid
(c⁄° 
ASN1_OBJECT
 *
o
);

63 
ASN1_OBJECT
 *
OBJ_txt2obj
(c⁄° *
s
, 
no_«me
);

64 
OBJ_obj2txt
(*
buf
, 
buf_Àn
, c⁄° 
ASN1_OBJECT
 *
a
, 
no_«me
);

65 
OBJ_txt2nid
(c⁄° *
s
);

66 
OBJ_ 2nid
(c⁄° *
s
);

67 
OBJ_¢2nid
(c⁄° *
s
);

68 
OBJ_cmp
(c⁄° 
ASN1_OBJECT
 *
a
, c⁄° ASN1_OBJECT *
b
);

69 c⁄° *
OBJ_b£¨ch_
(c⁄° *
key
, c⁄° *
ba£
, 
num
, 
size
,

70 (*
cmp
) (const *, const *));

71 c⁄° *
OBJ_b£¨ch_ex_
(c⁄° *
key
, c⁄° *
ba£
, 
num
,

72 
size
,

73 (*
cmp
) (const *, const *),

74 
Êags
);

76 
	#_DECLARE_OBJ_BSEARCH_CMP_FN
(
sc›e
, 
ty≥1
, 
ty≥2
, 
nm
) \

77 
nm
##
	`_cmp_BSEARCH_CMP_FN
(const *, const *); \

78 
nm
##
	`_cmp
(
ty≥1
 c⁄° *, 
ty≥2
 const *); \

79 
sc›e
 
ty≥2
 * 
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
)

	)

81 
	#DECLARE_OBJ_BSEARCH_CMP_FN
(
ty≥1
, 
ty≥2
, 
cmp
) \

82 
	`_DECLARE_OBJ_BSEARCH_CMP_FN
(, 
ty≥1
, 
ty≥2
, 
cmp
)

	)

83 
	#DECLARE_OBJ_BSEARCH_GLOBAL_CMP_FN
(
ty≥1
, 
ty≥2
, 
nm
) \

84 
ty≥2
 * 
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
)

	)

113 
	#IMPLEMENT_OBJ_BSEARCH_CMP_FN
(
ty≥1
, 
ty≥2
, 
nm
) \

114 
nm
##
	`_cmp_BSEARCH_CMP_FN
(c⁄° *
a_
, c⁄° *
b_
) \

116 
ty≥1
 c⁄° *
a
 = 
a_
; \

117 
ty≥2
 c⁄° *
b
 = 
b_
; \

118  
nm
##
	`_cmp
(
a
,
b
); \

120 
ty≥2
 *
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
) \

122  (
ty≥2
 *)
	`OBJ_b£¨ch_
(
key
, 
ba£
, 
num
, (type2), \

123 
nm
##
_cmp_BSEARCH_CMP_FN
); \

125 
	`dummy_¥ŸŸy≥
()

	)

127 
	#IMPLEMENT_OBJ_BSEARCH_GLOBAL_CMP_FN
(
ty≥1
, 
ty≥2
, 
nm
) \

128 
nm
##
	`_cmp_BSEARCH_CMP_FN
(c⁄° *
a_
, c⁄° *
b_
) \

130 
ty≥1
 c⁄° *
a
 = 
a_
; \

131 
ty≥2
 c⁄° *
b
 = 
b_
; \

132  
nm
##
	`_cmp
(
a
,
b
); \

134 
ty≥2
 *
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
) \

136  (
ty≥2
 *)
	`OBJ_b£¨ch_
(
key
, 
ba£
, 
num
, (type2), \

137 
nm
##
_cmp_BSEARCH_CMP_FN
); \

139 
	`dummy_¥ŸŸy≥
()

	)

141 
	#OBJ_b£¨ch
(
ty≥1
,
key
,
ty≥2
,
ba£
,
num
,
cmp
) \

142 ((
ty≥2
 *)
	`OBJ_b£¨ch_
(
	`CHECKED_PTR_OF
(
ty≥1
,
key
),CHECKED_PTR_OF—y≥2,
ba£
), \

143 
num
,(
ty≥2
), \

144 (()
	`CHECKED_PTR_OF
(
ty≥1
,
cmp
##
_ty≥_1
), \

145 ()
	`CHECKED_PTR_OF
(
ty≥2
,
cmp
##
_ty≥_2
), \

146 
cmp
##
_BSEARCH_CMP_FN
)))

	)

148 
	#OBJ_b£¨ch_ex
(
ty≥1
,
key
,
ty≥2
,
ba£
,
num
,
cmp
,
Êags
) \

149 ((
ty≥2
 *)
	`OBJ_b£¨ch_ex_
(
	`CHECKED_PTR_OF
(
ty≥1
,
key
),CHECKED_PTR_OF—y≥2,
ba£
), \

150 
num
,(
ty≥2
), \

151 (()
	`CHECKED_PTR_OF
(
ty≥1
,
cmp
##
_ty≥_1
), \

152 ()
ty≥_2
=
	`CHECKED_PTR_OF
(
ty≥2
,
cmp
##
_ty≥_2
), \

153 
cmp
##
_BSEARCH_CMP_FN
)),
Êags
)

	)

155 
OBJ_√w_nid
(
num
);

156 
OBJ_add_obje˘
(c⁄° 
ASN1_OBJECT
 *
obj
);

157 
OBJ_¸óã
(c⁄° *
oid
, c⁄° *
¢
, c⁄° *
 
);

158 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

159 
	#OBJ_˛ónup
(Ë0Ë

	)

161 
OBJ_¸óã_obje˘s
(
BIO
 *
ö
);

163 
size_t
 
OBJ_Àngth
(c⁄° 
ASN1_OBJECT
 *
obj
);

164 c⁄° *
OBJ_gë0_d©a
(c⁄° 
ASN1_OBJECT
 *
obj
);

166 
OBJ_föd_sigid_Ægs
(
signid
, *
pdig_nid
, *
µkey_nid
);

167 
OBJ_föd_sigid_by_Ægs
(*
psignid
, 
dig_nid
, 
pkey_nid
);

168 
OBJ_add_sigid
(
signid
, 
dig_id
, 
pkey_id
);

169 
OBJ_sigid_‰ì
();

172 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ossl_typ.h

10 #i‚de‡
HEADER_OPENSSL_TYPES_H


11 
	#HEADER_OPENSSL_TYPES_H


	)

13 
	~<limôs.h
>

15 #ifde‡ 
__˝lu•lus


19 
	~<›ís¶/e_os2.h
>

21 #ifde‡
NO_ASN1_TYPEDEFS


22 
	#ASN1_INTEGER
 
ASN1_STRING


	)

23 
	#ASN1_ENUMERATED
 
ASN1_STRING


	)

24 
	#ASN1_BIT_STRING
 
ASN1_STRING


	)

25 
	#ASN1_OCTET_STRING
 
ASN1_STRING


	)

26 
	#ASN1_PRINTABLESTRING
 
ASN1_STRING


	)

27 
	#ASN1_T61STRING
 
ASN1_STRING


	)

28 
	#ASN1_IA5STRING
 
ASN1_STRING


	)

29 
	#ASN1_UTCTIME
 
ASN1_STRING


	)

30 
	#ASN1_GENERALIZEDTIME
 
ASN1_STRING


	)

31 
	#ASN1_TIME
 
ASN1_STRING


	)

32 
	#ASN1_GENERALSTRING
 
ASN1_STRING


	)

33 
	#ASN1_UNIVERSALSTRING
 
ASN1_STRING


	)

34 
	#ASN1_BMPSTRING
 
ASN1_STRING


	)

35 
	#ASN1_VISIBLESTRING
 
ASN1_STRING


	)

36 
	#ASN1_UTF8STRING
 
ASN1_STRING


	)

37 
	#ASN1_BOOLEAN
 

	)

38 
	#ASN1_NULL
 

	)

40 
a¢1_°rög_°
 
	tASN1_INTEGER
;

41 
a¢1_°rög_°
 
	tASN1_ENUMERATED
;

42 
a¢1_°rög_°
 
	tASN1_BIT_STRING
;

43 
a¢1_°rög_°
 
	tASN1_OCTET_STRING
;

44 
a¢1_°rög_°
 
	tASN1_PRINTABLESTRING
;

45 
a¢1_°rög_°
 
	tASN1_T61STRING
;

46 
a¢1_°rög_°
 
	tASN1_IA5STRING
;

47 
a¢1_°rög_°
 
	tASN1_GENERALSTRING
;

48 
a¢1_°rög_°
 
	tASN1_UNIVERSALSTRING
;

49 
a¢1_°rög_°
 
	tASN1_BMPSTRING
;

50 
a¢1_°rög_°
 
	tASN1_UTCTIME
;

51 
a¢1_°rög_°
 
	tASN1_TIME
;

52 
a¢1_°rög_°
 
	tASN1_GENERALIZEDTIME
;

53 
a¢1_°rög_°
 
	tASN1_VISIBLESTRING
;

54 
a¢1_°rög_°
 
	tASN1_UTF8STRING
;

55 
a¢1_°rög_°
 
	tASN1_STRING
;

56 
	tASN1_BOOLEAN
;

57 
	tASN1_NULL
;

60 
a¢1_obje˘_°
 
	tASN1_OBJECT
;

62 
ASN1_ITEM_°
 
	tASN1_ITEM
;

63 
a¢1_p˘x_°
 
	tASN1_PCTX
;

64 
a¢1_s˘x_°
 
	tASN1_SCTX
;

66 #ifde‡
_WIN32


67 #unde‡
X509_NAME


68 #unde‡
X509_EXTENSIONS


69 #unde‡
PKCS7_ISSUER_AND_SERIAL


70 #unde‡
PKCS7_SIGNER_INFO


71 #unde‡
OCSP_REQUEST


72 #unde‡
OCSP_RESPONSE


75 #ifde‡
BIGNUM


76 #unde‡
BIGNUM


78 
d™e_°
;

79 
bio_°
 
	tBIO
;

80 
bignum_°
 
	tBIGNUM
;

81 
bignum_˘x
 
	tBN_CTX
;

82 
bn_blödög_°
 
	tBN_BLINDING
;

83 
bn_m⁄t_˘x_°
 
	tBN_MONT_CTX
;

84 
bn_ª˝_˘x_°
 
	tBN_RECP_CTX
;

85 
bn_gícb_°
 
	tBN_GENCB
;

87 
buf_mem_°
 
	tBUF_MEM
;

89 
evp_cùhî_°
 
	tEVP_CIPHER
;

90 
evp_cùhî_˘x_°
 
	tEVP_CIPHER_CTX
;

91 
evp_md_°
 
	tEVP_MD
;

92 
evp_md_˘x_°
 
	tEVP_MD_CTX
;

93 
evp_pkey_°
 
	tEVP_PKEY
;

95 
evp_pkey_a¢1_mëhod_°
 
	tEVP_PKEY_ASN1_METHOD
;

97 
evp_pkey_mëhod_°
 
	tEVP_PKEY_METHOD
;

98 
evp_pkey_˘x_°
 
	tEVP_PKEY_CTX
;

100 
evp_Encode_Ctx_°
 
	tEVP_ENCODE_CTX
;

102 
hmac_˘x_°
 
	tHMAC_CTX
;

104 
dh_°
 
	tDH
;

105 
dh_mëhod
 
	tDH_METHOD
;

107 
dß_°
 
	tDSA
;

108 
dß_mëhod
 
	tDSA_METHOD
;

110 
rß_°
 
	tRSA
;

111 
rß_mëh_°
 
	tRSA_METHOD
;

112 
rß_pss_∑øms_°
 
	tRSA_PSS_PARAMS
;

114 
ec_key_°
 
	tEC_KEY
;

115 
ec_key_mëhod_°
 
	tEC_KEY_METHOD
;

117 
ønd_mëh_°
 
	tRAND_METHOD
;

118 
ønd_drbg_°
 
	tRAND_DRBG
;

120 
s¶_d™e_°
 
	tSSL_DANE
;

121 
x509_°
 
	tX509
;

122 
X509_Æg‹_°
 
	tX509_ALGOR
;

123 
X509_¸l_°
 
	tX509_CRL
;

124 
x509_¸l_mëhod_°
 
	tX509_CRL_METHOD
;

125 
x509_ªvoked_°
 
	tX509_REVOKED
;

126 
X509_«me_°
 
	tX509_NAME
;

127 
X509_pubkey_°
 
	tX509_PUBKEY
;

128 
x509_°‹e_°
 
	tX509_STORE
;

129 
x509_°‹e_˘x_°
 
	tX509_STORE_CTX
;

131 
x509_obje˘_°
 
	tX509_OBJECT
;

132 
x509_lookup_°
 
	tX509_LOOKUP
;

133 
x509_lookup_mëhod_°
 
	tX509_LOOKUP_METHOD
;

134 
X509_VERIFY_PARAM_°
 
	tX509_VERIFY_PARAM
;

136 
x509_sig_öfo_°
 
	tX509_SIG_INFO
;

138 
pkcs8_¥iv_key_öfo_°
 
	tPKCS8_PRIV_KEY_INFO
;

140 
v3_ext_˘x
 
	tX509V3_CTX
;

141 
c⁄f_°
 
	tCONF
;

142 
os¶_öô_£âögs_°
 
	tOPENSSL_INIT_SETTINGS
;

144 
ui_°
 
	tUI
;

145 
ui_mëhod_°
 
	tUI_METHOD
;

147 
ígöe_°
 
	tENGINE
;

148 
s¶_°
 
	tSSL
;

149 
s¶_˘x_°
 
	tSSL_CTX
;

151 
comp_˘x_°
 
	tCOMP_CTX
;

152 
comp_mëhod_°
 
	tCOMP_METHOD
;

154 
X509_POLICY_NODE_°
 
	tX509_POLICY_NODE
;

155 
X509_POLICY_LEVEL_°
 
	tX509_POLICY_LEVEL
;

156 
X509_POLICY_TREE_°
 
	tX509_POLICY_TREE
;

157 
X509_POLICY_CACHE_°
 
	tX509_POLICY_CACHE
;

159 
AUTHORITY_KEYID_°
 
	tAUTHORITY_KEYID
;

160 
DIST_POINT_°
 
	tDIST_POINT
;

161 
ISSUING_DIST_POINT_°
 
	tISSUING_DIST_POINT
;

162 
NAME_CONSTRAINTS_°
 
	tNAME_CONSTRAINTS
;

164 
¸y±o_ex_d©a_°
 
	tCRYPTO_EX_DATA
;

166 
oc•_ªq_˘x_°
 
	tOCSP_REQ_CTX
;

167 
oc•_ª•⁄£_°
 
	tOCSP_RESPONSE
;

168 
oc•_ª•⁄dî_id_°
 
	tOCSP_RESPID
;

170 
s˘_°
 
	tSCT
;

171 
s˘_˘x_°
 
	tSCT_CTX
;

172 
˘log_°
 
	tCTLOG
;

173 
˘log_°‹e_°
 
	tCTLOG_STORE
;

174 
˘_pﬁicy_evÆ_˘x_°
 
	tCT_POLICY_EVAL_CTX
;

176 
os¶_°‹e_öfo_°
 
	tOSSL_STORE_INFO
;

177 
os¶_°‹e_£¨ch_°
 
	tOSSL_STORE_SEARCH
;

179 #i‡
deföed
(
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L && \

180 
deföed
(
INTMAX_MAX
Ë&& deföed(
UINTMAX_MAX
)

181 
ötmax_t
 
	tos¶_ötmax_t
;

182 
uötmax_t
 
	tos¶_uötmax_t
;

190 
	tos¶_ötmax_t
;

191 
	tos¶_uötmax_t
;

194 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/symhacks.h

10 #i‚de‡
HEADER_SYMHACKS_H


11 
	#HEADER_SYMHACKS_H


	)

13 
	~<›ís¶/e_os2.h
>

16 #i‡
deföed
(
OPENSSL_SYS_VMS
)

17 #unde‡
ERR_lﬂd_CRYPTO_°rögs


18 
	#ERR_lﬂd_CRYPTO_°rögs
 
ERR_lﬂd_CRYPTOlib_°rögs


	)

19 #unde‡
OCSP_¸lID_√w


20 
	#OCSP_¸lID_√w
 
OCSP_¸lID2_√w


	)

22 #unde‡
d2i_ECPARAMETERS


23 
	#d2i_ECPARAMETERS
 
d2i_UC_ECPARAMETERS


	)

24 #unde‡
i2d_ECPARAMETERS


25 
	#i2d_ECPARAMETERS
 
i2d_UC_ECPARAMETERS


	)

26 #unde‡
d2i_ECPKPARAMETERS


27 
	#d2i_ECPKPARAMETERS
 
d2i_UC_ECPKPARAMETERS


	)

28 #unde‡
i2d_ECPKPARAMETERS


29 
	#i2d_ECPKPARAMETERS
 
i2d_UC_ECPKPARAMETERS


	)

32 #unde‡
cms_D©a_¸óã


33 
	#cms_D©a_¸óã
 
¥iv_cms_D©a_¸óã


	)

	@/usr/include/openssl/asn1.h

10 #i‚de‡
HEADER_ASN1_H


11 
	#HEADER_ASN1_H


	)

13 
	~<time.h
>

14 
	~<›ís¶/e_os2.h
>

15 
	~<›ís¶/›ís¶c⁄f.h
>

16 
	~<›ís¶/bio.h
>

17 
	~<›ís¶/ß„°ack.h
>

18 
	~<›ís¶/a¢1îr.h
>

19 
	~<›ís¶/symhacks.h
>

21 
	~<›ís¶/os¶_typ.h
>

22 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

23 
	~<›ís¶/bn.h
>

26 #ifde‡
OPENSSL_BUILD_SHLIBCRYPTO


27 #unde‡
OPENSSL_EXTERN


28 
	#OPENSSL_EXTERN
 
OPENSSL_EXPORT


	)

31 #ifde‡ 
__˝lu•lus


35 
	#V_ASN1_UNIVERSAL
 0x00

	)

36 
	#V_ASN1_APPLICATION
 0x40

	)

37 
	#V_ASN1_CONTEXT_SPECIFIC
 0x80

	)

38 
	#V_ASN1_PRIVATE
 0xc0

	)

40 
	#V_ASN1_CONSTRUCTED
 0x20

	)

41 
	#V_ASN1_PRIMITIVE_TAG
 0x1f

	)

42 
	#V_ASN1_PRIMATIVE_TAG
 
V_ASN1_PRIMITIVE_TAG


	)

44 
	#V_ASN1_APP_CHOOSE
 -2

	)

45 
	#V_ASN1_OTHER
 -3

	)

46 
	#V_ASN1_ANY
 -4

	)

48 
	#V_ASN1_UNDEF
 -1

	)

50 
	#V_ASN1_EOC
 0

	)

51 
	#V_ASN1_BOOLEAN
 1

	)

52 
	#V_ASN1_INTEGER
 2

	)

53 
	#V_ASN1_BIT_STRING
 3

	)

54 
	#V_ASN1_OCTET_STRING
 4

	)

55 
	#V_ASN1_NULL
 5

	)

56 
	#V_ASN1_OBJECT
 6

	)

57 
	#V_ASN1_OBJECT_DESCRIPTOR
 7

	)

58 
	#V_ASN1_EXTERNAL
 8

	)

59 
	#V_ASN1_REAL
 9

	)

60 
	#V_ASN1_ENUMERATED
 10

	)

61 
	#V_ASN1_UTF8STRING
 12

	)

62 
	#V_ASN1_SEQUENCE
 16

	)

63 
	#V_ASN1_SET
 17

	)

64 
	#V_ASN1_NUMERICSTRING
 18

	)

65 
	#V_ASN1_PRINTABLESTRING
 19

	)

66 
	#V_ASN1_T61STRING
 20

	)

67 
	#V_ASN1_TELETEXSTRING
 20

	)

68 
	#V_ASN1_VIDEOTEXSTRING
 21

	)

69 
	#V_ASN1_IA5STRING
 22

	)

70 
	#V_ASN1_UTCTIME
 23

	)

71 
	#V_ASN1_GENERALIZEDTIME
 24

	)

72 
	#V_ASN1_GRAPHICSTRING
 25

	)

73 
	#V_ASN1_ISO64STRING
 26

	)

74 
	#V_ASN1_VISIBLESTRING
 26

	)

75 
	#V_ASN1_GENERALSTRING
 27

	)

76 
	#V_ASN1_UNIVERSALSTRING
 28

	)

77 
	#V_ASN1_BMPSTRING
 30

	)

85 
	#V_ASN1_NEG
 0x100

	)

86 
	#V_ASN1_NEG_INTEGER
 (2 | 
V_ASN1_NEG
)

	)

87 
	#V_ASN1_NEG_ENUMERATED
 (10 | 
V_ASN1_NEG
)

	)

90 
	#B_ASN1_NUMERICSTRING
 0x0001

	)

91 
	#B_ASN1_PRINTABLESTRING
 0x0002

	)

92 
	#B_ASN1_T61STRING
 0x0004

	)

93 
	#B_ASN1_TELETEXSTRING
 0x0004

	)

94 
	#B_ASN1_VIDEOTEXSTRING
 0x0008

	)

95 
	#B_ASN1_IA5STRING
 0x0010

	)

96 
	#B_ASN1_GRAPHICSTRING
 0x0020

	)

97 
	#B_ASN1_ISO64STRING
 0x0040

	)

98 
	#B_ASN1_VISIBLESTRING
 0x0040

	)

99 
	#B_ASN1_GENERALSTRING
 0x0080

	)

100 
	#B_ASN1_UNIVERSALSTRING
 0x0100

	)

101 
	#B_ASN1_OCTET_STRING
 0x0200

	)

102 
	#B_ASN1_BIT_STRING
 0x0400

	)

103 
	#B_ASN1_BMPSTRING
 0x0800

	)

104 
	#B_ASN1_UNKNOWN
 0x1000

	)

105 
	#B_ASN1_UTF8STRING
 0x2000

	)

106 
	#B_ASN1_UTCTIME
 0x4000

	)

107 
	#B_ASN1_GENERALIZEDTIME
 0x8000

	)

108 
	#B_ASN1_SEQUENCE
 0x10000

	)

110 
	#MBSTRING_FLAG
 0x1000

	)

111 
	#MBSTRING_UTF8
 (
MBSTRING_FLAG
)

	)

112 
	#MBSTRING_ASC
 (
MBSTRING_FLAG
|1)

	)

113 
	#MBSTRING_BMP
 (
MBSTRING_FLAG
|2)

	)

114 
	#MBSTRING_UNIV
 (
MBSTRING_FLAG
|4)

	)

115 
	#SMIME_OLDMIME
 0x400

	)

116 
	#SMIME_CRLFEOL
 0x800

	)

117 
	#SMIME_STREAM
 0x1000

	)

118 
X509_Æg‹_°
;

119 
DEFINE_STACK_OF
(
X509_ALGOR
)

121 
	#ASN1_STRING_FLAG_BITS_LEFT
 0x08

	)

127 
	#ASN1_STRING_FLAG_NDEF
 0x010

	)

135 
	#ASN1_STRING_FLAG_CONT
 0x020

	)

140 
	#ASN1_STRING_FLAG_MSTRING
 0x040

	)

142 
	#ASN1_STRING_FLAG_EMBED
 0x080

	)

144 
	#ASN1_STRING_FLAG_X509_TIME
 0x100

	)

146 
	sa¢1_°rög_°
 {

147 
Àngth
;

148 
ty≥
;

149 *
d©a
;

155 
Êags
;

164 
	sASN1_ENCODING_°
 {

165 *
íc
;

166 
Àn
;

167 
modifõd
;

168 } 
	tASN1_ENCODING
;

171 
	#ASN1_LONG_UNDEF
 0x7fffffffL

	)

173 
	#STABLE_FLAGS_MALLOC
 0x01

	)

180 
	#STABLE_FLAGS_CLEAR
 
STABLE_FLAGS_MALLOC


	)

181 
	#STABLE_NO_MASK
 0x02

	)

182 
	#DIRSTRING_TYPE
 \

183 (
B_ASN1_PRINTABLESTRING
|
B_ASN1_T61STRING
|
B_ASN1_BMPSTRING
|
B_ASN1_UTF8STRING
)

	)

184 
	#PKCS9STRING_TYPE
 (
DIRSTRING_TYPE
|
B_ASN1_IA5STRING
)

	)

186 
	sa¢1_°rög_èbÀ_°
 {

187 
nid
;

188 
mösize
;

189 
maxsize
;

190 
mask
;

191 
Êags
;

192 } 
	tASN1_STRING_TABLE
;

194 
DEFINE_STACK_OF
(
ASN1_STRING_TABLE
)

198 
	#ub_«me
 32768

	)

199 
	#ub_comm⁄_«me
 64

	)

200 
	#ub_loˇlôy_«me
 128

	)

201 
	#ub_°©e_«me
 128

	)

202 
	#ub_‹g™iz©i⁄_«me
 64

	)

203 
	#ub_‹g™iz©i⁄_unô_«me
 64

	)

204 
	#ub_tôÀ
 64

	)

205 
	#ub_emaû_addªss
 128

	)

210 
ASN1_TEMPLATE_°
 
	tASN1_TEMPLATE
;

211 
ASN1_TLC_°
 
	tASN1_TLC
;

213 
ASN1_VALUE_°
 
	tASN1_VALUE
;

217 
	#DECLARE_ASN1_FUNCTIONS
(
ty≥
Ë
	`DECLARE_ASN1_FUNCTIONS_«me
—y≥,Åy≥)

	)

219 
	#DECLARE_ASN1_ALLOC_FUNCTIONS
(
ty≥
) \

220 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
,Åy≥)

	)

222 
	#DECLARE_ASN1_FUNCTIONS_«me
(
ty≥
, 
«me
) \

223 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

224 
	`DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
«me
,Çame)

	)

226 
	#DECLARE_ASN1_FUNCTIONS_‚ame
(
ty≥
, 
ô«me
, 
«me
) \

227 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

228 
	`DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
ô«me
, 
«me
)

	)

230 
	#DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
ô«me
, 
«me
) \

231 
ty≥
 *
d2i_
##
	`«me
—y≥ **
a
, c⁄° **
ö
, 
Àn
); \

232 
i2d_
##
	`«me
(
ty≥
 *
a
, **
out
); \

233 
	`DECLARE_ASN1_ITEM
(
ô«me
)

	)

235 
	#DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
ty≥
, 
«me
) \

236 
ty≥
 *
d2i_
##
	`«me
—y≥ **
a
, c⁄° **
ö
, 
Àn
); \

237 
i2d_
##
	`«me
(c⁄° 
ty≥
 *
a
, **
out
); \

238 
	`DECLARE_ASN1_ITEM
(
«me
)

	)

240 
	#DECLARE_ASN1_NDEF_FUNCTION
(
«me
) \

241 
i2d_
##
«me
##
	`_NDEF
“amê*
a
, **
out
);

	)

243 
	#DECLARE_ASN1_FUNCTIONS_c⁄°
(
«me
) \

244 
	`DECLARE_ASN1_ALLOC_FUNCTIONS
(
«me
) \

245 
	`DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
«me
,Çame)

	)

247 
	#DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

248 
ty≥
 *
«me
##
	`_√w
(); \

249 
«me
##
	`_‰ì
(
ty≥
 *
a
);

	)

251 
	#DECLARE_ASN1_PRINT_FUNCTION
(
°«me
) \

252 
	`DECLARE_ASN1_PRINT_FUNCTION_‚ame
(
°«me
, säame)

	)

254 
	#DECLARE_ASN1_PRINT_FUNCTION_‚ame
(
°«me
, 
‚ame
) \

255 
‚ame
##
	`_¥öt_˘x
(
BIO
 *
out
, 
°«me
 *
x
, 
ödít
, \

256 c⁄° 
ASN1_PCTX
 *
p˘x
);

	)

258 
	#D2I_OF
(
ty≥
Ëty≥ *(*)—y≥ **,c⁄° **,)

	)

259 
	#I2D_OF
(
ty≥
Ë(*)—y≥ *,**)

	)

260 
	#I2D_OF_c⁄°
(
ty≥
Ë(*)(c⁄°Åy≥ *,**)

	)

262 
	#CHECKED_D2I_OF
(
ty≥
, 
d2i
) \

263 ((
d2i_of_void
*Ë(1 ? 
d2i
 : ((
	`D2I_OF
(
ty≥
))0)))

	)

264 
	#CHECKED_I2D_OF
(
ty≥
, 
i2d
) \

265 ((
i2d_of_void
*Ë(1 ? 
i2d
 : ((
	`I2D_OF
(
ty≥
))0)))

	)

266 
	#CHECKED_NEW_OF
(
ty≥
, 
x√w
) \

267 ((*(*)()Ë(1 ? 
x√w
 : ((
ty≥
 *(*)())0)))

	)

268 
	#CHECKED_PTR_OF
(
ty≥
, 
p
) \

269 ((*Ë(1 ? 
p
 : (
ty≥
*)0))

	)

270 
	#CHECKED_PPTR_OF
(
ty≥
, 
p
) \

271 ((**Ë(1 ? 
p
 : (
ty≥
**)0))

	)

273 
	#TYPEDEF_D2I_OF
(
ty≥
Ëty≥ *
	td2i_of_
##
	tty≥
—y≥ **,c⁄° **,)

	)

274 
	tTYPEDEF_I2D_OF
(
	tty≥
Ë
	ti2d_of_
##ty≥—y≥ *,**)

	)

275 
	tTYPEDEF_D2I2D_OF
(
	tty≥
Ë
	tTYPEDEF_D2I_OF
—y≥); 
	`TYPEDEF_I2D_OF
(
ty≥
)

	)

277 
TYPEDEF_D2I2D_OF
();

315 #i‚de‡
OPENSSL_EXPORT_VAR_AS_FUNCTION


318 c⁄° 
	tASN1_ITEM
 
	tASN1_ITEM_EXP
;

321 
	#ASN1_ITEM_±r
(
ùå
Ë(ùå)

	)

324 
	#ASN1_ITEM_ªf
(
ùå
Ë(&(ùå##
_ô
))

	)

326 
	#ASN1_ITEM_Ωå
(
ªf
Ë(&‘ef##
_ô
))

	)

328 
	#DECLARE_ASN1_ITEM
(
«me
) \

329 
OPENSSL_EXTERN
 c⁄° 
ASN1_ITEM
 
«me
##
_ô
;

	)

339 c⁄° 
	tASN1_ITEM
 *
	tASN1_ITEM_EXP
 ();

342 
	#ASN1_ITEM_±r
(
ùå
Ë(
	`ùå
())

	)

345 
	#ASN1_ITEM_ªf
(
ùå
Ë(ùå##
_ô
)

	)

347 
	#ASN1_ITEM_Ωå
(
ªf
Ë‘ef##
	`_ô
())

	)

349 
	#DECLARE_ASN1_ITEM
(
«me
) \

350 c⁄° 
ASN1_ITEM
 * 
«me
##
	`_ô
();

	)

361 
	#ASN1_STRFLGS_ESC_2253
 1

	)

362 
	#ASN1_STRFLGS_ESC_CTRL
 2

	)

363 
	#ASN1_STRFLGS_ESC_MSB
 4

	)

370 
	#ASN1_STRFLGS_ESC_QUOTE
 8

	)

375 
	#CHARTYPE_PRINTABLESTRING
 0x10

	)

377 
	#CHARTYPE_FIRST_ESC_2253
 0x20

	)

379 
	#CHARTYPE_LAST_ESC_2253
 0x40

	)

390 
	#ASN1_STRFLGS_UTF8_CONVERT
 0x10

	)

398 
	#ASN1_STRFLGS_IGNORE_TYPE
 0x20

	)

401 
	#ASN1_STRFLGS_SHOW_TYPE
 0x40

	)

411 
	#ASN1_STRFLGS_DUMP_ALL
 0x80

	)

412 
	#ASN1_STRFLGS_DUMP_UNKNOWN
 0x100

	)

419 
	#ASN1_STRFLGS_DUMP_DER
 0x200

	)

424 
	#ASN1_STRFLGS_ESC_2254
 0x400

	)

431 
	#ASN1_STRFLGS_RFC2253
 (
ASN1_STRFLGS_ESC_2253
 | \

432 
ASN1_STRFLGS_ESC_CTRL
 | \

433 
ASN1_STRFLGS_ESC_MSB
 | \

434 
ASN1_STRFLGS_UTF8_CONVERT
 | \

435 
ASN1_STRFLGS_DUMP_UNKNOWN
 | \

436 
ASN1_STRFLGS_DUMP_DER
)

	)

438 
DEFINE_STACK_OF
(
ASN1_INTEGER
)

440 
DEFINE_STACK_OF
(
ASN1_GENERALSTRING
)

442 
DEFINE_STACK_OF
(
ASN1_UTF8STRING
)

444 
	sa¢1_ty≥_°
 {

445 
ty≥
;

447 *
±r
;

448 
ASN1_BOOLEAN
 
boﬁón
;

449 
ASN1_STRING
 *
a¢1_°rög
;

450 
ASN1_OBJECT
 *
obje˘
;

451 
ASN1_INTEGER
 *
öãgî
;

452 
ASN1_ENUMERATED
 *
íumî©ed
;

453 
ASN1_BIT_STRING
 *
bô_°rög
;

454 
ASN1_OCTET_STRING
 *
o˘ë_°rög
;

455 
ASN1_PRINTABLESTRING
 *
¥öèbÀ°rög
;

456 
ASN1_T61STRING
 *
t61°rög
;

457 
ASN1_IA5STRING
 *
ü5°rög
;

458 
ASN1_GENERALSTRING
 *
gíîÆ°rög
;

459 
ASN1_BMPSTRING
 *
bmp°rög
;

460 
ASN1_UNIVERSALSTRING
 *
univîßl°rög
;

461 
ASN1_UTCTIME
 *
ut˘ime
;

462 
ASN1_GENERALIZEDTIME
 *
gíîÆizedtime
;

463 
ASN1_VISIBLESTRING
 *
visibÀ°rög
;

464 
ASN1_UTF8STRING
 *
utf8°rög
;

469 
ASN1_STRING
 *
£t
;

470 
ASN1_STRING
 *
£quí˚
;

471 
ASN1_VALUE
 *
a¢1_vÆue
;

472 } 
vÆue
;

473 } 
	tASN1_TYPE
;

475 
DEFINE_STACK_OF
(
ASN1_TYPE
)

477 
STACK_OF
(
	tASN1_TYPE
Ë
	tASN1_SEQUENCE_ANY
;

479 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
ASN1_SEQUENCE_ANY
, ASN1_SEQUENCE_ANY)

480 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
ASN1_SEQUENCE_ANY
, 
ASN1_SET_ANY
)

483 
	sBIT_STRING_BITNAME_°
 {

484 
bônum
;

485 c⁄° *
 ame
;

486 c⁄° *
¢ame
;

487 } 
	tBIT_STRING_BITNAME
;

489 
	#B_ASN1_TIME
 \

490 
B_ASN1_UTCTIME
 | \

491 
B_ASN1_GENERALIZEDTIME


	)

493 
	#B_ASN1_PRINTABLE
 \

494 
B_ASN1_NUMERICSTRING
| \

495 
B_ASN1_PRINTABLESTRING
| \

496 
B_ASN1_T61STRING
| \

497 
B_ASN1_IA5STRING
| \

498 
B_ASN1_BIT_STRING
| \

499 
B_ASN1_UNIVERSALSTRING
|\

500 
B_ASN1_BMPSTRING
|\

501 
B_ASN1_UTF8STRING
|\

502 
B_ASN1_SEQUENCE
|\

503 
B_ASN1_UNKNOWN


	)

505 
	#B_ASN1_DIRECTORYSTRING
 \

506 
B_ASN1_PRINTABLESTRING
| \

507 
B_ASN1_TELETEXSTRING
|\

508 
B_ASN1_BMPSTRING
|\

509 
B_ASN1_UNIVERSALSTRING
|\

510 
B_ASN1_UTF8STRING


	)

512 
	#B_ASN1_DISPLAYTEXT
 \

513 
B_ASN1_IA5STRING
| \

514 
B_ASN1_VISIBLESTRING
| \

515 
B_ASN1_BMPSTRING
|\

516 
B_ASN1_UTF8STRING


	)

518 
DECLARE_ASN1_FUNCTIONS_‚ame
(
ASN1_TYPE
, 
ASN1_ANY
, ASN1_TYPE)

520 
ASN1_TYPE_gë
(c⁄° 
ASN1_TYPE
 *
a
);

521 
ASN1_TYPE_£t
(
ASN1_TYPE
 *
a
, 
ty≥
, *
vÆue
);

522 
ASN1_TYPE_£t1
(
ASN1_TYPE
 *
a
, 
ty≥
, c⁄° *
vÆue
);

523 
ASN1_TYPE_cmp
(c⁄° 
ASN1_TYPE
 *
a
, c⁄° ASN1_TYPE *
b
);

525 
ASN1_TYPE
 *
ASN1_TYPE_∑ck_£quí˚
(c⁄° 
ASN1_ITEM
 *
ô
, *
s
, ASN1_TYPE **
t
);

526 *
ASN1_TYPE_u≈ack_£quí˚
(c⁄° 
ASN1_ITEM
 *
ô
, c⁄° 
ASN1_TYPE
 *
t
);

528 
ASN1_OBJECT
 *
ASN1_OBJECT_√w
();

529 
ASN1_OBJECT_‰ì
(
ASN1_OBJECT
 *
a
);

530 
i2d_ASN1_OBJECT
(c⁄° 
ASN1_OBJECT
 *
a
, **
µ
);

531 
ASN1_OBJECT
 *
d2i_ASN1_OBJECT
(ASN1_OBJECT **
a
, c⁄° **
µ
,

532 
Àngth
);

534 
DECLARE_ASN1_ITEM
(
ASN1_OBJECT
)

536 
DEFINE_STACK_OF
(
ASN1_OBJECT
)

538 
ASN1_STRING
 *
ASN1_STRING_√w
();

539 
ASN1_STRING_‰ì
(
ASN1_STRING
 *
a
);

540 
ASN1_STRING_˛ór_‰ì
(
ASN1_STRING
 *
a
);

541 
ASN1_STRING_c›y
(
ASN1_STRING
 *
d°
, c⁄° ASN1_STRING *
°r
);

542 
ASN1_STRING
 *
ASN1_STRING_dup
(c⁄° ASN1_STRING *
a
);

543 
ASN1_STRING
 *
ASN1_STRING_ty≥_√w
(
ty≥
);

544 
ASN1_STRING_cmp
(c⁄° 
ASN1_STRING
 *
a
, c⁄° ASN1_STRING *
b
);

549 
ASN1_STRING_£t
(
ASN1_STRING
 *
°r
, c⁄° *
d©a
, 
Àn
);

550 
ASN1_STRING_£t0
(
ASN1_STRING
 *
°r
, *
d©a
, 
Àn
);

551 
ASN1_STRING_Àngth
(c⁄° 
ASN1_STRING
 *
x
);

552 
ASN1_STRING_Àngth_£t
(
ASN1_STRING
 *
x
, 
n
);

553 
ASN1_STRING_ty≥
(c⁄° 
ASN1_STRING
 *
x
);

554 
DEPRECATEDIN_1_1_0
(*
ASN1_STRING_d©a
(
ASN1_STRING
 *
x
))

555 c⁄° *
ASN1_STRING_gë0_d©a
(c⁄° 
ASN1_STRING
 *
x
);

557 
DECLARE_ASN1_FUNCTIONS
(
ASN1_BIT_STRING
)

558 
ASN1_BIT_STRING_£t
(
ASN1_BIT_STRING
 *
a
, *
d
, 
Àngth
);

559 
ASN1_BIT_STRING_£t_bô
(
ASN1_BIT_STRING
 *
a
, 
n
, 
vÆue
);

560 
ASN1_BIT_STRING_gë_bô
(c⁄° 
ASN1_BIT_STRING
 *
a
, 
n
);

561 
ASN1_BIT_STRING_check
(c⁄° 
ASN1_BIT_STRING
 *
a
,

562 c⁄° *
Êags
, 
Êags_Àn
);

564 
ASN1_BIT_STRING_«me_¥öt
(
BIO
 *
out
, 
ASN1_BIT_STRING
 *
bs
,

565 
BIT_STRING_BITNAME
 *
tbl
, 
ödít
);

566 
ASN1_BIT_STRING_num_asc
(c⁄° *
«me
, 
BIT_STRING_BITNAME
 *
tbl
);

567 
ASN1_BIT_STRING_£t_asc
(
ASN1_BIT_STRING
 *
bs
, c⁄° *
«me
, 
vÆue
,

568 
BIT_STRING_BITNAME
 *
tbl
);

570 
DECLARE_ASN1_FUNCTIONS
(
ASN1_INTEGER
)

571 
ASN1_INTEGER
 *
d2i_ASN1_UINTEGER
(ASN1_INTEGER **
a
, c⁄° **
µ
,

572 
Àngth
);

573 
ASN1_INTEGER
 *
ASN1_INTEGER_dup
(c⁄° ASN1_INTEGER *
x
);

574 
ASN1_INTEGER_cmp
(c⁄° 
ASN1_INTEGER
 *
x
, c⁄° ASN1_INTEGER *
y
);

576 
DECLARE_ASN1_FUNCTIONS
(
ASN1_ENUMERATED
)

578 
ASN1_UTCTIME_check
(c⁄° 
ASN1_UTCTIME
 *
a
);

579 
ASN1_UTCTIME
 *
ASN1_UTCTIME_£t
(ASN1_UTCTIME *
s
, 
time_t
 
t
);

580 
ASN1_UTCTIME
 *
ASN1_UTCTIME_adj
(ASN1_UTCTIME *
s
, 
time_t
 
t
,

581 
off£t_day
, 
off£t_£c
);

582 
ASN1_UTCTIME_£t_°rög
(
ASN1_UTCTIME
 *
s
, c⁄° *
°r
);

583 
ASN1_UTCTIME_cmp_time_t
(c⁄° 
ASN1_UTCTIME
 *
s
, 
time_t
 
t
);

585 
ASN1_GENERALIZEDTIME_check
(c⁄° 
ASN1_GENERALIZEDTIME
 *
a
);

586 
ASN1_GENERALIZEDTIME
 *
ASN1_GENERALIZEDTIME_£t
(ASN1_GENERALIZEDTIME *
s
,

587 
time_t
 
t
);

588 
ASN1_GENERALIZEDTIME
 *
ASN1_GENERALIZEDTIME_adj
(ASN1_GENERALIZEDTIME *
s
,

589 
time_t
 
t
, 
off£t_day
,

590 
off£t_£c
);

591 
ASN1_GENERALIZEDTIME_£t_°rög
(
ASN1_GENERALIZEDTIME
 *
s
, c⁄° *
°r
);

593 
ASN1_TIME_diff
(*
pday
, *
p£c
,

594 c⁄° 
ASN1_TIME
 *
‰om
, c⁄° ASN1_TIME *
to
);

596 
DECLARE_ASN1_FUNCTIONS
(
ASN1_OCTET_STRING
)

597 
ASN1_OCTET_STRING
 *
ASN1_OCTET_STRING_dup
(c⁄° ASN1_OCTET_STRING *
a
);

598 
ASN1_OCTET_STRING_cmp
(c⁄° 
ASN1_OCTET_STRING
 *
a
,

599 c⁄° 
ASN1_OCTET_STRING
 *
b
);

600 
ASN1_OCTET_STRING_£t
(
ASN1_OCTET_STRING
 *
°r
, c⁄° *
d©a
,

601 
Àn
);

603 
DECLARE_ASN1_FUNCTIONS
(
ASN1_VISIBLESTRING
)

604 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UNIVERSALSTRING
)

605 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UTF8STRING
)

606 
DECLARE_ASN1_FUNCTIONS
(
ASN1_NULL
)

607 
DECLARE_ASN1_FUNCTIONS
(
ASN1_BMPSTRING
)

609 
UTF8_gëc
(c⁄° *
°r
, 
Àn
, *
vÆ
);

610 
UTF8_putc
(*
°r
, 
Àn
, 
vÆue
);

612 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
ASN1_PRINTABLE
)

614 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
DIRECTORYSTRING
)

615 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
DISPLAYTEXT
)

616 
DECLARE_ASN1_FUNCTIONS
(
ASN1_PRINTABLESTRING
)

617 
DECLARE_ASN1_FUNCTIONS
(
ASN1_T61STRING
)

618 
DECLARE_ASN1_FUNCTIONS
(
ASN1_IA5STRING
)

619 
DECLARE_ASN1_FUNCTIONS
(
ASN1_GENERALSTRING
)

620 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UTCTIME
)

621 
DECLARE_ASN1_FUNCTIONS
(
ASN1_GENERALIZEDTIME
)

622 
DECLARE_ASN1_FUNCTIONS
(
ASN1_TIME
)

624 
DECLARE_ASN1_ITEM
(
ASN1_OCTET_STRING_NDEF
)

626 
ASN1_TIME
 *
ASN1_TIME_£t
(ASN1_TIME *
s
, 
time_t
 
t
);

627 
ASN1_TIME
 *
ASN1_TIME_adj
(ASN1_TIME *
s
, 
time_t
 
t
,

628 
off£t_day
, 
off£t_£c
);

629 
ASN1_TIME_check
(c⁄° 
ASN1_TIME
 *
t
);

630 
ASN1_GENERALIZEDTIME
 *
ASN1_TIME_to_gíîÆizedtime
(c⁄° 
ASN1_TIME
 *
t
,

631 
ASN1_GENERALIZEDTIME
 **
out
);

632 
ASN1_TIME_£t_°rög
(
ASN1_TIME
 *
s
, c⁄° *
°r
);

633 
ASN1_TIME_£t_°rög_X509
(
ASN1_TIME
 *
s
, c⁄° *
°r
);

634 
ASN1_TIME_to_tm
(c⁄° 
ASN1_TIME
 *
s
, 
tm
 *tm);

635 
ASN1_TIME_n‹mÆize
(
ASN1_TIME
 *
s
);

636 
ASN1_TIME_cmp_time_t
(c⁄° 
ASN1_TIME
 *
s
, 
time_t
 
t
);

637 
ASN1_TIME_com∑ª
(c⁄° 
ASN1_TIME
 *
a
, c⁄° ASN1_TIME *
b
);

639 
i2a_ASN1_INTEGER
(
BIO
 *
bp
, c⁄° 
ASN1_INTEGER
 *
a
);

640 
a2i_ASN1_INTEGER
(
BIO
 *
bp
, 
ASN1_INTEGER
 *
bs
, *
buf
, 
size
);

641 
i2a_ASN1_ENUMERATED
(
BIO
 *
bp
, c⁄° 
ASN1_ENUMERATED
 *
a
);

642 
a2i_ASN1_ENUMERATED
(
BIO
 *
bp
, 
ASN1_ENUMERATED
 *
bs
, *
buf
, 
size
);

643 
i2a_ASN1_OBJECT
(
BIO
 *
bp
, c⁄° 
ASN1_OBJECT
 *
a
);

644 
a2i_ASN1_STRING
(
BIO
 *
bp
, 
ASN1_STRING
 *
bs
, *
buf
, 
size
);

645 
i2a_ASN1_STRING
(
BIO
 *
bp
, c⁄° 
ASN1_STRING
 *
a
, 
ty≥
);

646 
i2t_ASN1_OBJECT
(*
buf
, 
buf_Àn
, c⁄° 
ASN1_OBJECT
 *
a
);

648 
a2d_ASN1_OBJECT
(*
out
, 
ﬁí
, c⁄° *
buf
, 
num
);

649 
ASN1_OBJECT
 *
ASN1_OBJECT_¸óã
(
nid
, *
d©a
, 
Àn
,

650 c⁄° *
¢
, c⁄° *
 
);

652 
ASN1_INTEGER_gë_öt64
(
öt64_t
 *
¥
, c⁄° 
ASN1_INTEGER
 *
a
);

653 
ASN1_INTEGER_£t_öt64
(
ASN1_INTEGER
 *
a
, 
öt64_t
 
r
);

654 
ASN1_INTEGER_gë_uöt64
(
uöt64_t
 *
¥
, c⁄° 
ASN1_INTEGER
 *
a
);

655 
ASN1_INTEGER_£t_uöt64
(
ASN1_INTEGER
 *
a
, 
uöt64_t
 
r
);

657 
ASN1_INTEGER_£t
(
ASN1_INTEGER
 *
a
, 
v
);

658 
ASN1_INTEGER_gë
(c⁄° 
ASN1_INTEGER
 *
a
);

659 
ASN1_INTEGER
 *
BN_to_ASN1_INTEGER
(c⁄° 
BIGNUM
 *
bn
, ASN1_INTEGER *
ai
);

660 
BIGNUM
 *
ASN1_INTEGER_to_BN
(c⁄° 
ASN1_INTEGER
 *
ai
, BIGNUM *
bn
);

662 
ASN1_ENUMERATED_gë_öt64
(
öt64_t
 *
¥
, c⁄° 
ASN1_ENUMERATED
 *
a
);

663 
ASN1_ENUMERATED_£t_öt64
(
ASN1_ENUMERATED
 *
a
, 
öt64_t
 
r
);

666 
ASN1_ENUMERATED_£t
(
ASN1_ENUMERATED
 *
a
, 
v
);

667 
ASN1_ENUMERATED_gë
(c⁄° 
ASN1_ENUMERATED
 *
a
);

668 
ASN1_ENUMERATED
 *
BN_to_ASN1_ENUMERATED
(c⁄° 
BIGNUM
 *
bn
, ASN1_ENUMERATED *
ai
);

669 
BIGNUM
 *
ASN1_ENUMERATED_to_BN
(c⁄° 
ASN1_ENUMERATED
 *
ai
, BIGNUM *
bn
);

673 
ASN1_PRINTABLE_ty≥
(c⁄° *
s
, 
max
);

675 
ASN1_èg2bô
(
èg
);

678 
ASN1_gë_obje˘
(c⁄° **
µ
, *
∂ígth
, *
±ag
,

679 *
p˛ass
, 
omax
);

680 
ASN1_check_öföôe_íd
(**
p
, 
Àn
);

681 
ASN1_c⁄°_check_öföôe_íd
(c⁄° **
p
, 
Àn
);

682 
ASN1_put_obje˘
(**
µ
, 
c⁄°ru˘ed
, 
Àngth
,

683 
èg
, 
x˛ass
);

684 
ASN1_put_eoc
(**
µ
);

685 
ASN1_obje˘_size
(
c⁄°ru˘ed
, 
Àngth
, 
èg
);

688 *
ASN1_dup
(
i2d_of_void
 *
i2d
, 
d2i_of_void
 *
d2i
, *
x
);

690 
	#ASN1_dup_of
(
ty≥
,
i2d
,
d2i
,
x
) \

691 ((
ty≥
*)
	`ASN1_dup
(
	`CHECKED_I2D_OF
—y≥, 
i2d
), \

692 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

693 
	`CHECKED_PTR_OF
(
ty≥
, 
x
)))

	)

695 
	#ASN1_dup_of_c⁄°
(
ty≥
,
i2d
,
d2i
,
x
) \

696 ((
ty≥
*)
	`ASN1_dup
(
	`CHECKED_I2D_OF
(c⁄°Åy≥, 
i2d
), \

697 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

698 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
)))

	)

700 *
ASN1_ôem_dup
(c⁄° 
ASN1_ITEM
 *
ô
, *
x
);

704 
	#M_ASN1_√w_of
(
ty≥
Ë—y≥ *)
	`ASN1_ôem_√w
(
	`ASN1_ITEM_Ωå
—y≥))

	)

705 
	#M_ASN1_‰ì_of
(
x
, 
ty≥
) \

706 
	`ASN1_ôem_‰ì
(
	`CHECKED_PTR_OF
(
ty≥
, 
x
), 
	`ASN1_ITEM_Ωå
—y≥))

	)

708 #i‚de‡
OPENSSL_NO_STDIO


709 *
ASN1_d2i_Â
(*(*
x√w
Ë(), 
d2i_of_void
 *
d2i
, 
FILE
 *
ö
, **
x
);

711 
	#ASN1_d2i_Â_of
(
ty≥
,
x√w
,
d2i
,
ö
,
x
) \

712 ((
ty≥
*)
	`ASN1_d2i_Â
(
	`CHECKED_NEW_OF
—y≥, 
x√w
), \

713 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

714 
ö
, \

715 
	`CHECKED_PPTR_OF
(
ty≥
, 
x
)))

	)

717 *
ASN1_ôem_d2i_Â
(c⁄° 
ASN1_ITEM
 *
ô
, 
FILE
 *
ö
, *
x
);

718 
ASN1_i2d_Â
(
i2d_of_void
 *
i2d
, 
FILE
 *
out
, *
x
);

720 
	#ASN1_i2d_Â_of
(
ty≥
,
i2d
,
out
,
x
) \

721 (
	`ASN1_i2d_Â
(
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), \

722 
out
, \

723 
	`CHECKED_PTR_OF
(
ty≥
, 
x
)))

	)

725 
	#ASN1_i2d_Â_of_c⁄°
(
ty≥
,
i2d
,
out
,
x
) \

726 (
	`ASN1_i2d_Â
(
	`CHECKED_I2D_OF
(c⁄° 
ty≥
, 
i2d
), \

727 
out
, \

728 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
)))

	)

730 
ASN1_ôem_i2d_Â
(c⁄° 
ASN1_ITEM
 *
ô
, 
FILE
 *
out
, *
x
);

731 
ASN1_STRING_¥öt_ex_Â
(
FILE
 *
Â
, c⁄° 
ASN1_STRING
 *
°r
, 
Êags
);

734 
ASN1_STRING_to_UTF8
(**
out
, c⁄° 
ASN1_STRING
 *
ö
);

736 *
ASN1_d2i_bio
(*(*
x√w
Ë(), 
d2i_of_void
 *
d2i
, 
BIO
 *
ö
, **
x
);

738 
	#ASN1_d2i_bio_of
(
ty≥
,
x√w
,
d2i
,
ö
,
x
) \

739 ((
ty≥
*)
	`ASN1_d2i_bio
–
	`CHECKED_NEW_OF
—y≥, 
x√w
), \

740 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

741 
ö
, \

742 
	`CHECKED_PPTR_OF
(
ty≥
, 
x
)))

	)

744 *
ASN1_ôem_d2i_bio
(c⁄° 
ASN1_ITEM
 *
ô
, 
BIO
 *
ö
, *
x
);

745 
ASN1_i2d_bio
(
i2d_of_void
 *
i2d
, 
BIO
 *
out
, *
x
);

747 
	#ASN1_i2d_bio_of
(
ty≥
,
i2d
,
out
,
x
) \

748 (
	`ASN1_i2d_bio
(
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), \

749 
out
, \

750 
	`CHECKED_PTR_OF
(
ty≥
, 
x
)))

	)

752 
	#ASN1_i2d_bio_of_c⁄°
(
ty≥
,
i2d
,
out
,
x
) \

753 (
	`ASN1_i2d_bio
(
	`CHECKED_I2D_OF
(c⁄° 
ty≥
, 
i2d
), \

754 
out
, \

755 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
)))

	)

757 
ASN1_ôem_i2d_bio
(c⁄° 
ASN1_ITEM
 *
ô
, 
BIO
 *
out
, *
x
);

758 
ASN1_UTCTIME_¥öt
(
BIO
 *
Â
, c⁄° 
ASN1_UTCTIME
 *
a
);

759 
ASN1_GENERALIZEDTIME_¥öt
(
BIO
 *
Â
, c⁄° 
ASN1_GENERALIZEDTIME
 *
a
);

760 
ASN1_TIME_¥öt
(
BIO
 *
Â
, c⁄° 
ASN1_TIME
 *
a
);

761 
ASN1_STRING_¥öt
(
BIO
 *
bp
, c⁄° 
ASN1_STRING
 *
v
);

762 
ASN1_STRING_¥öt_ex
(
BIO
 *
out
, c⁄° 
ASN1_STRING
 *
°r
, 
Êags
);

763 
ASN1_buf_¥öt
(
BIO
 *
bp
, c⁄° *
buf
, 
size_t
 
buÊí
, 
off
);

764 
ASN1_bn_¥öt
(
BIO
 *
bp
, c⁄° *
numbî
, c⁄° 
BIGNUM
 *
num
,

765 *
buf
, 
off
);

766 
ASN1_∑r£
(
BIO
 *
bp
, c⁄° *
µ
, 
Àn
, 
ödít
);

767 
ASN1_∑r£_dump
(
BIO
 *
bp
, c⁄° *
µ
, 
Àn
, 
ödít
,

768 
dump
);

769 c⁄° *
ASN1_èg2°r
(
èg
);

773 
ASN1_UNIVERSALSTRING_to_°rög
(
ASN1_UNIVERSALSTRING
 *
s
);

775 
ASN1_TYPE_£t_o˘ë°rög
(
ASN1_TYPE
 *
a
, *
d©a
, 
Àn
);

776 
ASN1_TYPE_gë_o˘ë°rög
(c⁄° 
ASN1_TYPE
 *
a
, *
d©a
, 
max_Àn
);

777 
ASN1_TYPE_£t_öt_o˘ë°rög
(
ASN1_TYPE
 *
a
, 
num
,

778 *
d©a
, 
Àn
);

779 
ASN1_TYPE_gë_öt_o˘ë°rög
(c⁄° 
ASN1_TYPE
 *
a
, *
num
,

780 *
d©a
, 
max_Àn
);

782 *
ASN1_ôem_u≈ack
(c⁄° 
ASN1_STRING
 *
o˘
, c⁄° 
ASN1_ITEM
 *
ô
);

784 
ASN1_STRING
 *
ASN1_ôem_∑ck
(*
obj
, c⁄° 
ASN1_ITEM
 *
ô
,

785 
ASN1_OCTET_STRING
 **
o˘
);

787 
ASN1_STRING_£t_deÁu…_mask
(
mask
);

788 
ASN1_STRING_£t_deÁu…_mask_asc
(c⁄° *
p
);

789 
ASN1_STRING_gë_deÁu…_mask
();

790 
ASN1_mb°rög_c›y
(
ASN1_STRING
 **
out
, c⁄° *
ö
, 
Àn
,

791 
öf‹m
, 
mask
);

792 
ASN1_mb°rög_nc›y
(
ASN1_STRING
 **
out
, c⁄° *
ö
, 
Àn
,

793 
öf‹m
, 
mask
,

794 
mösize
, 
maxsize
);

796 
ASN1_STRING
 *
ASN1_STRING_£t_by_NID
(ASN1_STRING **
out
,

797 c⁄° *
ö
, 
öÀn
,

798 
öf‹m
, 
nid
);

799 
ASN1_STRING_TABLE
 *
ASN1_STRING_TABLE_gë
(
nid
);

800 
ASN1_STRING_TABLE_add
(, , , , );

801 
ASN1_STRING_TABLE_˛ónup
();

806 
ASN1_VALUE
 *
ASN1_ôem_√w
(c⁄° 
ASN1_ITEM
 *
ô
);

807 
ASN1_ôem_‰ì
(
ASN1_VALUE
 *
vÆ
, c⁄° 
ASN1_ITEM
 *
ô
);

808 
ASN1_VALUE
 *
ASN1_ôem_d2i
(ASN1_VALUE **
vÆ
, c⁄° **
ö
,

809 
Àn
, c⁄° 
ASN1_ITEM
 *
ô
);

810 
ASN1_ôem_i2d
(
ASN1_VALUE
 *
vÆ
, **
out
, c⁄° 
ASN1_ITEM
 *
ô
);

811 
ASN1_ôem_ndef_i2d
(
ASN1_VALUE
 *
vÆ
, **
out
,

812 c⁄° 
ASN1_ITEM
 *
ô
);

814 
ASN1_add_oid_moduÀ
();

815 
ASN1_add_°abÀ_moduÀ
();

817 
ASN1_TYPE
 *
ASN1_gíî©e_nc⁄f
(c⁄° *
°r
, 
CONF
 *
nc⁄f
);

818 
ASN1_TYPE
 *
ASN1_gíî©e_v3
(c⁄° *
°r
, 
X509V3_CTX
 *
˙f
);

819 
ASN1_°r2mask
(c⁄° *
°r
, *
pmask
);

824 
	#ASN1_PCTX_FLAGS_SHOW_ABSENT
 0x001

	)

826 
	#ASN1_PCTX_FLAGS_SHOW_SEQUENCE
 0x002

	)

828 
	#ASN1_PCTX_FLAGS_SHOW_SSOF
 0x004

	)

830 
	#ASN1_PCTX_FLAGS_SHOW_TYPE
 0x008

	)

832 
	#ASN1_PCTX_FLAGS_NO_ANY_TYPE
 0x010

	)

834 
	#ASN1_PCTX_FLAGS_NO_MSTRING_TYPE
 0x020

	)

836 
	#ASN1_PCTX_FLAGS_NO_FIELD_NAME
 0x040

	)

838 
	#ASN1_PCTX_FLAGS_SHOW_FIELD_STRUCT_NAME
 0x080

	)

840 
	#ASN1_PCTX_FLAGS_NO_STRUCT_NAME
 0x100

	)

842 
ASN1_ôem_¥öt
(
BIO
 *
out
, 
ASN1_VALUE
 *
iÊd
, 
ödít
,

843 c⁄° 
ASN1_ITEM
 *
ô
, c⁄° 
ASN1_PCTX
 *
p˘x
);

844 
ASN1_PCTX
 *
ASN1_PCTX_√w
();

845 
ASN1_PCTX_‰ì
(
ASN1_PCTX
 *
p
);

846 
ASN1_PCTX_gë_Êags
(c⁄° 
ASN1_PCTX
 *
p
);

847 
ASN1_PCTX_£t_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

848 
ASN1_PCTX_gë_nm_Êags
(c⁄° 
ASN1_PCTX
 *
p
);

849 
ASN1_PCTX_£t_nm_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

850 
ASN1_PCTX_gë_˚π_Êags
(c⁄° 
ASN1_PCTX
 *
p
);

851 
ASN1_PCTX_£t_˚π_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

852 
ASN1_PCTX_gë_oid_Êags
(c⁄° 
ASN1_PCTX
 *
p
);

853 
ASN1_PCTX_£t_oid_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

854 
ASN1_PCTX_gë_°r_Êags
(c⁄° 
ASN1_PCTX
 *
p
);

855 
ASN1_PCTX_£t_°r_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

857 
ASN1_SCTX
 *
ASN1_SCTX_√w
((*
sˇn_cb
Ë(ASN1_SCTX *
˘x
));

858 
ASN1_SCTX_‰ì
(
ASN1_SCTX
 *
p
);

859 c⁄° 
ASN1_ITEM
 *
ASN1_SCTX_gë_ôem
(
ASN1_SCTX
 *
p
);

860 c⁄° 
ASN1_TEMPLATE
 *
ASN1_SCTX_gë_ãm∂©e
(
ASN1_SCTX
 *
p
);

861 
ASN1_SCTX_gë_Êags
(
ASN1_SCTX
 *
p
);

862 
ASN1_SCTX_£t_≠p_d©a
(
ASN1_SCTX
 *
p
, *
d©a
);

863 *
ASN1_SCTX_gë_≠p_d©a
(
ASN1_SCTX
 *
p
);

865 c⁄° 
BIO_METHOD
 *
BIO_f_a¢1
();

867 
BIO
 *
BIO_√w_NDEF
(BIO *
out
, 
ASN1_VALUE
 *
vÆ
, c⁄° 
ASN1_ITEM
 *
ô
);

869 
i2d_ASN1_bio_°ªam
(
BIO
 *
out
, 
ASN1_VALUE
 *
vÆ
, BIO *
ö
, 
Êags
,

870 c⁄° 
ASN1_ITEM
 *
ô
);

871 
PEM_wrôe_bio_ASN1_°ªam
(
BIO
 *
out
, 
ASN1_VALUE
 *
vÆ
, BIO *
ö
, 
Êags
,

872 c⁄° *
hdr
, c⁄° 
ASN1_ITEM
 *
ô
);

873 
SMIME_wrôe_ASN1
(
BIO
 *
bio
, 
ASN1_VALUE
 *
vÆ
, BIO *
d©a
, 
Êags
,

874 
˘y≥_nid
, 
ec⁄t_nid
,

875 
STACK_OF
(
X509_ALGOR
Ë*
mdÆgs
, c⁄° 
ASN1_ITEM
 *
ô
);

876 
ASN1_VALUE
 *
SMIME_ªad_ASN1
(
BIO
 *
bio
, BIO **
bc⁄t
, c⁄° 
ASN1_ITEM
 *
ô
);

877 
SMIME_¸lf_c›y
(
BIO
 *
ö
, BIO *
out
, 
Êags
);

878 
SMIME_ãxt
(
BIO
 *
ö
, BIO *
out
);

880 c⁄° 
ASN1_ITEM
 *
ASN1_ITEM_lookup
(c⁄° *
«me
);

881 c⁄° 
ASN1_ITEM
 *
ASN1_ITEM_gë
(
size_t
 
i
);

883 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/bioerr.h

11 #i‚de‡
HEADER_BIOERR_H


12 
	#HEADER_BIOERR_H


	)

14 #i‚de‡
HEADER_SYMHACKS_H


15 
	~<›ís¶/symhacks.h
>

18 #ifde‡ 
__˝lu•lus


21 
ERR_lﬂd_BIO_°rögs
();

26 
	#BIO_F_ACPT_STATE
 100

	)

27 
	#BIO_F_ADDRINFO_WRAP
 148

	)

28 
	#BIO_F_ADDR_STRINGS
 134

	)

29 
	#BIO_F_BIO_ACCEPT
 101

	)

30 
	#BIO_F_BIO_ACCEPT_EX
 137

	)

31 
	#BIO_F_BIO_ACCEPT_NEW
 152

	)

32 
	#BIO_F_BIO_ADDR_NEW
 144

	)

33 
	#BIO_F_BIO_BIND
 147

	)

34 
	#BIO_F_BIO_CALLBACK_CTRL
 131

	)

35 
	#BIO_F_BIO_CONNECT
 138

	)

36 
	#BIO_F_BIO_CONNECT_NEW
 153

	)

37 
	#BIO_F_BIO_CTRL
 103

	)

38 
	#BIO_F_BIO_GETS
 104

	)

39 
	#BIO_F_BIO_GET_HOST_IP
 106

	)

40 
	#BIO_F_BIO_GET_NEW_INDEX
 102

	)

41 
	#BIO_F_BIO_GET_PORT
 107

	)

42 
	#BIO_F_BIO_LISTEN
 139

	)

43 
	#BIO_F_BIO_LOOKUP
 135

	)

44 
	#BIO_F_BIO_LOOKUP_EX
 143

	)

45 
	#BIO_F_BIO_MAKE_PAIR
 121

	)

46 
	#BIO_F_BIO_METH_NEW
 146

	)

47 
	#BIO_F_BIO_NEW
 108

	)

48 
	#BIO_F_BIO_NEW_DGRAM_SCTP
 145

	)

49 
	#BIO_F_BIO_NEW_FILE
 109

	)

50 
	#BIO_F_BIO_NEW_MEM_BUF
 126

	)

51 
	#BIO_F_BIO_NREAD
 123

	)

52 
	#BIO_F_BIO_NREAD0
 124

	)

53 
	#BIO_F_BIO_NWRITE
 125

	)

54 
	#BIO_F_BIO_NWRITE0
 122

	)

55 
	#BIO_F_BIO_PARSE_HOSTSERV
 136

	)

56 
	#BIO_F_BIO_PUTS
 110

	)

57 
	#BIO_F_BIO_READ
 111

	)

58 
	#BIO_F_BIO_READ_EX
 105

	)

59 
	#BIO_F_BIO_READ_INTERN
 120

	)

60 
	#BIO_F_BIO_SOCKET
 140

	)

61 
	#BIO_F_BIO_SOCKET_NBIO
 142

	)

62 
	#BIO_F_BIO_SOCK_INFO
 141

	)

63 
	#BIO_F_BIO_SOCK_INIT
 112

	)

64 
	#BIO_F_BIO_WRITE
 113

	)

65 
	#BIO_F_BIO_WRITE_EX
 119

	)

66 
	#BIO_F_BIO_WRITE_INTERN
 128

	)

67 
	#BIO_F_BUFFER_CTRL
 114

	)

68 
	#BIO_F_CONN_CTRL
 127

	)

69 
	#BIO_F_CONN_STATE
 115

	)

70 
	#BIO_F_DGRAM_SCTP_NEW
 149

	)

71 
	#BIO_F_DGRAM_SCTP_READ
 132

	)

72 
	#BIO_F_DGRAM_SCTP_WRITE
 133

	)

73 
	#BIO_F_DOAPR_OUTCH
 150

	)

74 
	#BIO_F_FILE_CTRL
 116

	)

75 
	#BIO_F_FILE_READ
 130

	)

76 
	#BIO_F_LINEBUFFER_CTRL
 129

	)

77 
	#BIO_F_LINEBUFFER_NEW
 151

	)

78 
	#BIO_F_MEM_WRITE
 117

	)

79 
	#BIO_F_NBIOF_NEW
 154

	)

80 
	#BIO_F_SLG_WRITE
 155

	)

81 
	#BIO_F_SSL_NEW
 118

	)

86 
	#BIO_R_ACCEPT_ERROR
 100

	)

87 
	#BIO_R_ADDRINFO_ADDR_IS_NOT_AF_INET
 141

	)

88 
	#BIO_R_AMBIGUOUS_HOST_OR_SERVICE
 129

	)

89 
	#BIO_R_BAD_FOPEN_MODE
 101

	)

90 
	#BIO_R_BROKEN_PIPE
 124

	)

91 
	#BIO_R_CONNECT_ERROR
 103

	)

92 
	#BIO_R_GETHOSTBYNAME_ADDR_IS_NOT_AF_INET
 107

	)

93 
	#BIO_R_GETSOCKNAME_ERROR
 132

	)

94 
	#BIO_R_GETSOCKNAME_TRUNCATED_ADDRESS
 133

	)

95 
	#BIO_R_GETTING_SOCKTYPE
 134

	)

96 
	#BIO_R_INVALID_ARGUMENT
 125

	)

97 
	#BIO_R_INVALID_SOCKET
 135

	)

98 
	#BIO_R_IN_USE
 123

	)

99 
	#BIO_R_LENGTH_TOO_LONG
 102

	)

100 
	#BIO_R_LISTEN_V6_ONLY
 136

	)

101 
	#BIO_R_LOOKUP_RETURNED_NOTHING
 142

	)

102 
	#BIO_R_MALFORMED_HOST_OR_SERVICE
 130

	)

103 
	#BIO_R_NBIO_CONNECT_ERROR
 110

	)

104 
	#BIO_R_NO_ACCEPT_ADDR_OR_SERVICE_SPECIFIED
 143

	)

105 
	#BIO_R_NO_HOSTNAME_OR_SERVICE_SPECIFIED
 144

	)

106 
	#BIO_R_NO_PORT_DEFINED
 113

	)

107 
	#BIO_R_NO_SUCH_FILE
 128

	)

108 
	#BIO_R_NULL_PARAMETER
 115

	)

109 
	#BIO_R_UNABLE_TO_BIND_SOCKET
 117

	)

110 
	#BIO_R_UNABLE_TO_CREATE_SOCKET
 118

	)

111 
	#BIO_R_UNABLE_TO_KEEPALIVE
 137

	)

112 
	#BIO_R_UNABLE_TO_LISTEN_SOCKET
 119

	)

113 
	#BIO_R_UNABLE_TO_NODELAY
 138

	)

114 
	#BIO_R_UNABLE_TO_REUSEADDR
 139

	)

115 
	#BIO_R_UNAVAILABLE_IP_FAMILY
 145

	)

116 
	#BIO_R_UNINITIALIZED
 120

	)

117 
	#BIO_R_UNKNOWN_INFO_TYPE
 140

	)

118 
	#BIO_R_UNSUPPORTED_IP_FAMILY
 146

	)

119 
	#BIO_R_UNSUPPORTED_METHOD
 121

	)

120 
	#BIO_R_UNSUPPORTED_PROTOCOL_FAMILY
 131

	)

121 
	#BIO_R_WRITE_TO_READ_ONLY_BIO
 126

	)

122 
	#BIO_R_WSASTARTUP
 122

	)

	@/usr/include/openssl/crypto.h

11 #i‚de‡
HEADER_CRYPTO_H


12 
	#HEADER_CRYPTO_H


	)

14 
	~<°dlib.h
>

15 
	~<time.h
>

17 
	~<›ís¶/e_os2.h
>

19 #i‚de‡
OPENSSL_NO_STDIO


20 
	~<°dio.h
>

23 
	~<›ís¶/ß„°ack.h
>

24 
	~<›ís¶/›ís¶v.h
>

25 
	~<›ís¶/os¶_typ.h
>

26 
	~<›ís¶/›ís¶c⁄f.h
>

27 
	~<›ís¶/¸y±€º.h
>

29 #ifde‡
CHARSET_EBCDIC


30 
	~<›ís¶/ebcdic.h
>

37 
	~<›ís¶/symhacks.h
>

39 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

40 
	~<›ís¶/›ís¶v.h
>

43 #ifde‡ 
__˝lu•lus


47 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

48 
	#SSLóy
 
O≥nSSL_vîsi⁄_num


	)

49 
	#SSLóy_vîsi⁄
 
O≥nSSL_vîsi⁄


	)

50 
	#SSLEAY_VERSION_NUMBER
 
OPENSSL_VERSION_NUMBER


	)

51 
	#SSLEAY_VERSION
 
OPENSSL_VERSION


	)

52 
	#SSLEAY_CFLAGS
 
OPENSSL_CFLAGS


	)

53 
	#SSLEAY_BUILT_ON
 
OPENSSL_BUILT_ON


	)

54 
	#SSLEAY_PLATFORM
 
OPENSSL_PLATFORM


	)

55 
	#SSLEAY_DIR
 
OPENSSL_DIR


	)

62 
dummy
;

63 } 
	tCRYPTO_dy∆ock
;

67 
	tCRYPTO_RWLOCK
;

69 
CRYPTO_RWLOCK
 *
CRYPTO_THREAD_lock_√w
();

70 
CRYPTO_THREAD_ªad_lock
(
CRYPTO_RWLOCK
 *
lock
);

71 
CRYPTO_THREAD_wrôe_lock
(
CRYPTO_RWLOCK
 *
lock
);

72 
CRYPTO_THREAD_u∆ock
(
CRYPTO_RWLOCK
 *
lock
);

73 
CRYPTO_THREAD_lock_‰ì
(
CRYPTO_RWLOCK
 *
lock
);

75 
CRYPTO_©omic_add
(*
vÆ
, 
amou¡
, *
ªt
, 
CRYPTO_RWLOCK
 *
lock
);

81 
	#CRYPTO_MEM_CHECK_OFF
 0x0

	)

82 
	#CRYPTO_MEM_CHECK_ON
 0x1

	)

83 
	#CRYPTO_MEM_CHECK_ENABLE
 0x2

	)

84 
	#CRYPTO_MEM_CHECK_DISABLE
 0x3

	)

86 
	s¸y±o_ex_d©a_°
 {

87 
STACK_OF
(Ë*
	gsk
;

89 
DEFINE_STACK_OF
()

94 
	#CRYPTO_EX_INDEX_SSL
 0

	)

95 
	#CRYPTO_EX_INDEX_SSL_CTX
 1

	)

96 
	#CRYPTO_EX_INDEX_SSL_SESSION
 2

	)

97 
	#CRYPTO_EX_INDEX_X509
 3

	)

98 
	#CRYPTO_EX_INDEX_X509_STORE
 4

	)

99 
	#CRYPTO_EX_INDEX_X509_STORE_CTX
 5

	)

100 
	#CRYPTO_EX_INDEX_DH
 6

	)

101 
	#CRYPTO_EX_INDEX_DSA
 7

	)

102 
	#CRYPTO_EX_INDEX_EC_KEY
 8

	)

103 
	#CRYPTO_EX_INDEX_RSA
 9

	)

104 
	#CRYPTO_EX_INDEX_ENGINE
 10

	)

105 
	#CRYPTO_EX_INDEX_UI
 11

	)

106 
	#CRYPTO_EX_INDEX_BIO
 12

	)

107 
	#CRYPTO_EX_INDEX_APP
 13

	)

108 
	#CRYPTO_EX_INDEX_UI_METHOD
 14

	)

109 
	#CRYPTO_EX_INDEX_DRBG
 15

	)

110 
	#CRYPTO_EX_INDEX__COUNT
 16

	)

113 
	#OPENSSL_mÆloc_öô
(Ë0Ë

	)

115 
CRYPTO_mem_˘æ
(
mode
);

117 
	#OPENSSL_mÆloc
(
num
) \

118 
	`CRYPTO_mÆloc
(
num
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

119 
	#OPENSSL_zÆloc
(
num
) \

120 
	`CRYPTO_zÆloc
(
num
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

121 
	#OPENSSL_ªÆloc
(
addr
, 
num
) \

122 
	`CRYPTO_ªÆloc
(
addr
, 
num
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

123 
	#OPENSSL_˛ór_ªÆloc
(
addr
, 
ﬁd_num
, 
num
) \

124 
	`CRYPTO_˛ór_ªÆloc
(
addr
, 
ﬁd_num
, 
num
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

125 
	#OPENSSL_˛ór_‰ì
(
addr
, 
num
) \

126 
	`CRYPTO_˛ór_‰ì
(
addr
, 
num
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

127 
	#OPENSSL_‰ì
(
addr
) \

128 
	`CRYPTO_‰ì
(
addr
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

129 
	#OPENSSL_memdup
(
°r
, 
s
) \

130 
	`CRYPTO_memdup
((
°r
), 
s
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

131 
	#OPENSSL_°rdup
(
°r
) \

132 
	`CRYPTO_°rdup
(
°r
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

133 
	#OPENSSL_°∫dup
(
°r
, 
n
) \

134 
	`CRYPTO_°∫dup
(
°r
, 
n
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

135 
	#OPENSSL_£cuª_mÆloc
(
num
) \

136 
	`CRYPTO_£cuª_mÆloc
(
num
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

137 
	#OPENSSL_£cuª_zÆloc
(
num
) \

138 
	`CRYPTO_£cuª_zÆloc
(
num
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

139 
	#OPENSSL_£cuª_‰ì
(
addr
) \

140 
	`CRYPTO_£cuª_‰ì
(
addr
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

141 
	#OPENSSL_£cuª_˛ór_‰ì
(
addr
, 
num
) \

142 
	`CRYPTO_£cuª_˛ór_‰ì
(
addr
, 
num
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

143 
	#OPENSSL_£cuª_a˘uÆ_size
(
±r
) \

144 
	`CRYPTO_£cuª_a˘uÆ_size
(
±r
)

	)

146 
size_t
 
OPENSSL_°æ˝y
(*
d°
, c⁄° *
§c
, size_à
siz
);

147 
size_t
 
OPENSSL_°æˇt
(*
d°
, c⁄° *
§c
, size_à
siz
);

148 
size_t
 
OPENSSL_°∫Àn
(c⁄° *
°r
, size_à
maxÀn
);

149 *
OPENSSL_buf2hex°r
(c⁄° *
buf„r
, 
Àn
);

150 *
OPENSSL_hex°r2buf
(c⁄° *
°r
, *
Àn
);

151 
OPENSSL_hexch¨2öt
(
c
);

153 
	#OPENSSL_MALLOC_MAX_NELEMS
(
ty≥
Ë(((1U<<(()*8-1))-1)/—y≥))

	)

155 
O≥nSSL_vîsi⁄_num
();

156 c⁄° *
O≥nSSL_vîsi⁄
(
ty≥
);

157 
	#OPENSSL_VERSION
 0

	)

158 
	#OPENSSL_CFLAGS
 1

	)

159 
	#OPENSSL_BUILT_ON
 2

	)

160 
	#OPENSSL_PLATFORM
 3

	)

161 
	#OPENSSL_DIR
 4

	)

162 
	#OPENSSL_ENGINES_DIR
 5

	)

164 
OPENSSL_is£tugid
();

166 
	tCRYPTO_EX_√w
 (*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

167 
	tidx
, 
	t¨gl
, *
	t¨gp
);

168 
	tCRYPTO_EX_‰ì
 (*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

169 
	tidx
, 
	t¨gl
, *
	t¨gp
);

170 
	tCRYPTO_EX_dup
 (
	tCRYPTO_EX_DATA
 *
	tto
, c⁄° CRYPTO_EX_DATA *
	t‰om
,

171 *
	t‰om_d
, 
	tidx
, 
	t¨gl
, *
	t¨gp
);

172 
__owur
 
CRYPTO_gë_ex_√w_ödex
(
˛ass_ödex
, 
¨gl
, *
¨gp
,

173 
CRYPTO_EX_√w
 *
√w_func
, 
CRYPTO_EX_dup
 *
dup_func
,

174 
CRYPTO_EX_‰ì
 *
‰ì_func
);

176 
CRYPTO_‰ì_ex_ödex
(
˛ass_ödex
, 
idx
);

182 
CRYPTO_√w_ex_d©a
(
˛ass_ödex
, *
obj
, 
CRYPTO_EX_DATA
 *
ad
);

183 
CRYPTO_dup_ex_d©a
(
˛ass_ödex
, 
CRYPTO_EX_DATA
 *
to
,

184 c⁄° 
CRYPTO_EX_DATA
 *
‰om
);

186 
CRYPTO_‰ì_ex_d©a
(
˛ass_ödex
, *
obj
, 
CRYPTO_EX_DATA
 *
ad
);

192 
CRYPTO_£t_ex_d©a
(
CRYPTO_EX_DATA
 *
ad
, 
idx
, *
vÆ
);

193 *
CRYPTO_gë_ex_d©a
(c⁄° 
CRYPTO_EX_DATA
 *
ad
, 
idx
);

195 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

200 
	#CRYPTO_˛ónup_Æl_ex_d©a
(Ë0Ë

	)

212 
	#CRYPTO_num_locks
(Ë(1)

	)

213 
	#CRYPTO_£t_lockög_ˇŒback
(
func
)

	)

214 
	#CRYPTO_gë_lockög_ˇŒback
(Ë(
NULL
)

	)

215 
	#CRYPTO_£t_add_lock_ˇŒback
(
func
)

	)

216 
	#CRYPTO_gë_add_lock_ˇŒback
(Ë(
NULL
)

	)

223 
	#CRYPTO_LOCK
 1

	)

224 
	#CRYPTO_UNLOCK
 2

	)

225 
	#CRYPTO_READ
 4

	)

226 
	#CRYPTO_WRITE
 8

	)

229 
	s¸y±o_thªadid_°
 {

230 
	gdummy
;

231 } 
	tCRYPTO_THREADID
;

233 
	#CRYPTO_THREADID_£t_numîic
(
id
, 
vÆ
)

	)

234 
	#CRYPTO_THREADID_£t_poöãr
(
id
, 
±r
)

	)

235 
	#CRYPTO_THREADID_£t_ˇŒback
(
thªadid_func
Ë(0)

	)

236 
	#CRYPTO_THREADID_gë_ˇŒback
(Ë(
NULL
)

	)

237 
	#CRYPTO_THREADID_cuºít
(
id
)

	)

238 
	#CRYPTO_THREADID_cmp
(
a
, 
b
Ë(-1)

	)

239 
	#CRYPTO_THREADID_˝y
(
de°
, 
§c
)

	)

240 
	#CRYPTO_THREADID_hash
(
id
Ë(0UL)

	)

242 #i‡
OPENSSL_API_COMPAT
 < 0x10000000L

243 
	#CRYPTO_£t_id_ˇŒback
(
func
)

	)

244 
	#CRYPTO_gë_id_ˇŒback
(Ë(
NULL
)

	)

245 
	#CRYPTO_thªad_id
(Ë(0UL)

	)

248 
	#CRYPTO_£t_dy∆ock_¸óã_ˇŒback
(
dyn_¸óã_fun˘i⁄
)

	)

249 
	#CRYPTO_£t_dy∆ock_lock_ˇŒback
(
dyn_lock_fun˘i⁄
)

	)

250 
	#CRYPTO_£t_dy∆ock_de°roy_ˇŒback
(
dyn_de°roy_fun˘i⁄
)

	)

251 
	#CRYPTO_gë_dy∆ock_¸óã_ˇŒback
(Ë(
NULL
)

	)

252 
	#CRYPTO_gë_dy∆ock_lock_ˇŒback
(Ë(
NULL
)

	)

253 
	#CRYPTO_gë_dy∆ock_de°roy_ˇŒback
(Ë(
NULL
)

	)

256 
CRYPTO_£t_mem_fun˘i⁄s
(

257 *(*
m
Ë(
size_t
, const *, ),

258 *(*
r
Ë(*, 
size_t
, const *, ),

259 (*
f
) (*, const *, ));

260 
CRYPTO_£t_mem_debug
(
Êag
);

261 
CRYPTO_gë_mem_fun˘i⁄s
(

262 *(**
m
Ë(
size_t
, const *, ),

263 *(**
r
Ë(*, 
size_t
, const *, ),

264 (**
f
) (*, const *, ));

266 *
CRYPTO_mÆloc
(
size_t
 
num
, c⁄° *
fûe
, 
löe
);

267 *
CRYPTO_zÆloc
(
size_t
 
num
, c⁄° *
fûe
, 
löe
);

268 *
CRYPTO_memdup
(c⁄° *
°r
, 
size_t
 
siz
, c⁄° *
fûe
, 
löe
);

269 *
CRYPTO_°rdup
(c⁄° *
°r
, c⁄° *
fûe
, 
löe
);

270 *
CRYPTO_°∫dup
(c⁄° *
°r
, 
size_t
 
s
, c⁄° *
fûe
, 
löe
);

271 
CRYPTO_‰ì
(*
±r
, c⁄° *
fûe
, 
löe
);

272 
CRYPTO_˛ór_‰ì
(*
±r
, 
size_t
 
num
, c⁄° *
fûe
, 
löe
);

273 *
CRYPTO_ªÆloc
(*
addr
, 
size_t
 
num
, c⁄° *
fûe
, 
löe
);

274 *
CRYPTO_˛ór_ªÆloc
(*
addr
, 
size_t
 
ﬁd_num
, size_à
num
,

275 c⁄° *
fûe
, 
löe
);

277 
CRYPTO_£cuª_mÆloc_öô
(
size_t
 
sz
, 
mösize
);

278 
CRYPTO_£cuª_mÆloc_d⁄e
();

279 *
CRYPTO_£cuª_mÆloc
(
size_t
 
num
, c⁄° *
fûe
, 
löe
);

280 *
CRYPTO_£cuª_zÆloc
(
size_t
 
num
, c⁄° *
fûe
, 
löe
);

281 
CRYPTO_£cuª_‰ì
(*
±r
, c⁄° *
fûe
, 
löe
);

282 
CRYPTO_£cuª_˛ór_‰ì
(*
±r
, 
size_t
 
num
,

283 c⁄° *
fûe
, 
löe
);

284 
CRYPTO_£cuª_Æloˇãd
(c⁄° *
±r
);

285 
CRYPTO_£cuª_mÆloc_öôülized
();

286 
size_t
 
CRYPTO_£cuª_a˘uÆ_size
(*
±r
);

287 
size_t
 
CRYPTO_£cuª_u£d
();

289 
OPENSSL_˛ón£
(*
±r
, 
size_t
 
Àn
);

291 #i‚de‡
OPENSSL_NO_CRYPTO_MDEBUG


292 
	#OPENSSL_mem_debug_push
(
öfo
) \

293 
	`CRYPTO_mem_debug_push
(
öfo
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

294 
	#OPENSSL_mem_debug_p›
() \

295 
	`CRYPTO_mem_debug_p›
()

	)

296 
CRYPTO_mem_debug_push
(c⁄° *
öfo
, c⁄° *
fûe
, 
löe
);

297 
CRYPTO_mem_debug_p›
();

298 
CRYPTO_gë_Æloc_cou¡s
(*
mcou¡
, *
rcou¡
, *
fcou¡
);

306 
CRYPTO_mem_debug_mÆloc
(*
addr
, 
size_t
 
num
, 
Êag
,

307 c⁄° *
fûe
, 
löe
);

308 
CRYPTO_mem_debug_ªÆloc
(*
addr1
, *
addr2
, 
size_t
 
num
, 
Êag
,

309 c⁄° *
fûe
, 
löe
);

310 
CRYPTO_mem_debug_‰ì
(*
addr
, 
Êag
,

311 c⁄° *
fûe
, 
löe
);

313 
CRYPTO_mem_Àaks_cb
((*
cb
Ë(c⁄° *
°r
, 
size_t
 
Àn
, *
u
),

314 *
u
);

315 #i‚de‡
OPENSSL_NO_STDIO


316 
CRYPTO_mem_Àaks_Â
(
FILE
 *);

318 
CRYPTO_mem_Àaks
(
BIO
 *
bio
);

322 
os¶_n‹ëu∫
 
OPENSSL_dõ
(c⁄° *
as£πi⁄
, c⁄° *
fûe
, 
löe
);

323 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

324 
	#O≥nSSLDõ
(
f
,
l
,
a
Ë
	`OPENSSL_dõ
(◊),(f),÷))

	)

326 
	#OPENSSL_as£π
(
e
) \

327 ()((
e
Ë? 0 : (
	`OPENSSL_dõ
("as£πi⁄ faûed: " #e, 
OPENSSL_FILE
, 
OPENSSL_LINE
), 1))

	)

329 
OPENSSL_is£rvi˚
();

331 
FIPS_mode
();

332 
FIPS_mode_£t
(
r
);

334 
OPENSSL_öô
();

335 #ifde‡
OPENSSL_SYS_UNIX


336 
OPENSSL_f‹k_¥ï¨e
();

337 
OPENSSL_f‹k_∑ª¡
();

338 
OPENSSL_f‹k_chûd
();

341 
tm
 *
OPENSSL_gmtime
(c⁄° 
time_t
 *
timî
, tm *
ªsu…
);

342 
OPENSSL_gmtime_adj
(
tm
 *tm, 
off£t_day
, 
off£t_£c
);

343 
OPENSSL_gmtime_diff
(*
pday
, *
p£c
,

344 c⁄° 
tm
 *
‰om
, c⁄° tm *
to
);

353 
CRYPTO_memcmp
(c⁄° * 
ö_a
, c⁄° * 
ö_b
, 
size_t
 
Àn
);

356 
	#OPENSSL_INIT_NO_LOAD_CRYPTO_STRINGS
 0x00000001L

	)

357 
	#OPENSSL_INIT_LOAD_CRYPTO_STRINGS
 0x00000002L

	)

358 
	#OPENSSL_INIT_ADD_ALL_CIPHERS
 0x00000004L

	)

359 
	#OPENSSL_INIT_ADD_ALL_DIGESTS
 0x00000008L

	)

360 
	#OPENSSL_INIT_NO_ADD_ALL_CIPHERS
 0x00000010L

	)

361 
	#OPENSSL_INIT_NO_ADD_ALL_DIGESTS
 0x00000020L

	)

362 
	#OPENSSL_INIT_LOAD_CONFIG
 0x00000040L

	)

363 
	#OPENSSL_INIT_NO_LOAD_CONFIG
 0x00000080L

	)

364 
	#OPENSSL_INIT_ASYNC
 0x00000100L

	)

365 
	#OPENSSL_INIT_ENGINE_RDRAND
 0x00000200L

	)

366 
	#OPENSSL_INIT_ENGINE_DYNAMIC
 0x00000400L

	)

367 
	#OPENSSL_INIT_ENGINE_OPENSSL
 0x00000800L

	)

368 
	#OPENSSL_INIT_ENGINE_CRYPTODEV
 0x00001000L

	)

369 
	#OPENSSL_INIT_ENGINE_CAPI
 0x00002000L

	)

370 
	#OPENSSL_INIT_ENGINE_PADLOCK
 0x00004000L

	)

371 
	#OPENSSL_INIT_ENGINE_AFALG
 0x00008000L

	)

373 
	#OPENSSL_INIT_ATFORK
 0x00020000L

	)

375 
	#OPENSSL_INIT_NO_ATEXIT
 0x00080000L

	)

380 
	#OPENSSL_INIT_ENGINE_ALL_BUILTIN
 \

381 (
OPENSSL_INIT_ENGINE_RDRAND
 | 
OPENSSL_INIT_ENGINE_DYNAMIC
 \

382 | 
OPENSSL_INIT_ENGINE_CRYPTODEV
 | 
OPENSSL_INIT_ENGINE_CAPI
 | \

383 
OPENSSL_INIT_ENGINE_PADLOCK
)

	)

387 
OPENSSL_˛ónup
();

388 
OPENSSL_öô_¸y±o
(
uöt64_t
 
›ts
, c⁄° 
OPENSSL_INIT_SETTINGS
 *
£âögs
);

389 
OPENSSL_©exô
((*
h™dÀr
)());

390 
OPENSSL_thªad_°›
();

393 
OPENSSL_INIT_SETTINGS
 *
OPENSSL_INIT_√w
();

394 #i‚de‡
OPENSSL_NO_STDIO


395 
OPENSSL_INIT_£t_c⁄fig_fûíame
(
OPENSSL_INIT_SETTINGS
 *
£âögs
,

396 c⁄° *
c⁄fig_fûíame
);

397 
OPENSSL_INIT_£t_c⁄fig_fûe_Êags
(
OPENSSL_INIT_SETTINGS
 *
£âögs
,

398 
Êags
);

399 
OPENSSL_INIT_£t_c⁄fig_≠≤ame
(
OPENSSL_INIT_SETTINGS
 *
£âögs
,

400 c⁄° *
c⁄fig_≠≤ame
);

402 
OPENSSL_INIT_‰ì
(
OPENSSL_INIT_SETTINGS
 *
£âögs
);

404 #i‡
deföed
(
OPENSSL_THREADS
Ë&& !deföed(
CRYPTO_TDEBUG
)

405 #i‡
deföed
(
_WIN32
)

406 #i‡
deföed
(
BASETYPES
Ë|| deföed(
_WINDEF_H
)

408 
DWORD
 
	tCRYPTO_THREAD_LOCAL
;

409 
DWORD
 
	tCRYPTO_THREAD_ID
;

411 
LONG
 
	tCRYPTO_ONCE
;

412 
	#CRYPTO_ONCE_STATIC_INIT
 0

	)

415 
	~<±hªad.h
>

416 
±hªad_⁄˚_t
 
	tCRYPTO_ONCE
;

417 
±hªad_key_t
 
	tCRYPTO_THREAD_LOCAL
;

418 
±hªad_t
 
	tCRYPTO_THREAD_ID
;

420 
	#CRYPTO_ONCE_STATIC_INIT
 
PTHREAD_ONCE_INIT


	)

424 #i‡!
deföed
(
CRYPTO_ONCE_STATIC_INIT
)

425 
	tCRYPTO_ONCE
;

426 
	tCRYPTO_THREAD_LOCAL
;

427 
	tCRYPTO_THREAD_ID
;

428 
	#CRYPTO_ONCE_STATIC_INIT
 0

	)

431 
CRYPTO_THREAD_run_⁄˚
(
CRYPTO_ONCE
 *
⁄˚
, (*
öô
)());

433 
CRYPTO_THREAD_öô_loˇl
(
CRYPTO_THREAD_LOCAL
 *
key
, (*
˛ónup
)(*));

434 *
CRYPTO_THREAD_gë_loˇl
(
CRYPTO_THREAD_LOCAL
 *
key
);

435 
CRYPTO_THREAD_£t_loˇl
(
CRYPTO_THREAD_LOCAL
 *
key
, *
vÆ
);

436 
CRYPTO_THREAD_˛ónup_loˇl
(
CRYPTO_THREAD_LOCAL
 *
key
);

438 
CRYPTO_THREAD_ID
 
CRYPTO_THREAD_gë_cuºít_id
();

439 
CRYPTO_THREAD_com∑ª_id
(
CRYPTO_THREAD_ID
 
a
, CRYPTO_THREAD_ID 
b
);

442 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/obj_mac.h

12 
	#SN_undef
 "UNDEF"

	)

13 
	#LN_undef
 "undeföed"

	)

14 
	#NID_undef
 0

	)

15 
	#OBJ_undef
 0L

	)

17 
	#SN_ôu_t
 "ITU-T"

	)

18 
	#LN_ôu_t
 "ôu-t"

	)

19 
	#NID_ôu_t
 645

	)

20 
	#OBJ_ôu_t
 0L

	)

22 
	#NID_ccôt
 404

	)

23 
	#OBJ_ccôt
 
OBJ_ôu_t


	)

25 
	#SN_iso
 "ISO"

	)

26 
	#LN_iso
 "iso"

	)

27 
	#NID_iso
 181

	)

28 
	#OBJ_iso
 1L

	)

30 
	#SN_joöt_iso_ôu_t
 "JOINT-ISO-ITU-T"

	)

31 
	#LN_joöt_iso_ôu_t
 "joöt-iso-ôu-t"

	)

32 
	#NID_joöt_iso_ôu_t
 646

	)

33 
	#OBJ_joöt_iso_ôu_t
 2L

	)

35 
	#NID_joöt_iso_ccôt
 393

	)

36 
	#OBJ_joöt_iso_ccôt
 
OBJ_joöt_iso_ôu_t


	)

38 
	#SN_membî_body
 "membî-body"

	)

39 
	#LN_membî_body
 "ISO Membî Body"

	)

40 
	#NID_membî_body
 182

	)

41 
	#OBJ_membî_body
 
OBJ_iso
,2L

	)

43 
	#SN_idítifõd_‹g™iz©i⁄
 "idítifõd-‹g™iz©i⁄"

	)

44 
	#NID_idítifõd_‹g™iz©i⁄
 676

	)

45 
	#OBJ_idítifõd_‹g™iz©i⁄
 
OBJ_iso
,3L

	)

47 
	#SN_hmac_md5
 "HMAC-MD5"

	)

48 
	#LN_hmac_md5
 "hmac-md5"

	)

49 
	#NID_hmac_md5
 780

	)

50 
	#OBJ_hmac_md5
 
OBJ_idítifõd_‹g™iz©i⁄
,6L,1L,5L,5L,8L,1L,1L

	)

52 
	#SN_hmac_sha1
 "HMAC-SHA1"

	)

53 
	#LN_hmac_sha1
 "hmac-sha1"

	)

54 
	#NID_hmac_sha1
 781

	)

55 
	#OBJ_hmac_sha1
 
OBJ_idítifõd_‹g™iz©i⁄
,6L,1L,5L,5L,8L,1L,2L

	)

57 
	#SN_x509ExtAdmissi⁄
 "x509ExtAdmissi⁄"

	)

58 
	#LN_x509ExtAdmissi⁄
 "Pro„ssi⁄Æ Inf‹m©i⁄ o∏basi†f‹ Admissi⁄"

	)

59 
	#NID_x509ExtAdmissi⁄
 1093

	)

60 
	#OBJ_x509ExtAdmissi⁄
 
OBJ_idítifõd_‹g™iz©i⁄
,36L,8L,3L,3L

	)

62 
	#SN_˚πicom_¨c
 "˚πicom-¨c"

	)

63 
	#NID_˚πicom_¨c
 677

	)

64 
	#OBJ_˚πicom_¨c
 
OBJ_idítifõd_‹g™iz©i⁄
,132L

	)

66 
	#SN_õì
 "õì"

	)

67 
	#NID_õì
 1170

	)

68 
	#OBJ_õì
 
OBJ_idítifõd_‹g™iz©i⁄
,111L

	)

70 
	#SN_õì_siswg
 "õì-siswg"

	)

71 
	#LN_õì_siswg
 "IEEE Securôy i¿St‹agêW‹kög Group"

	)

72 
	#NID_õì_siswg
 1171

	)

73 
	#OBJ_õì_siswg
 
OBJ_õì
,2L,1619L

	)

75 
	#SN_öã∫©i⁄Æ_‹g™iz©i⁄s
 "öã∫©i⁄Æ-‹g™iz©i⁄s"

	)

76 
	#LN_öã∫©i⁄Æ_‹g™iz©i⁄s
 "I¡î«ti⁄Æ Org™iz©i⁄s"

	)

77 
	#NID_öã∫©i⁄Æ_‹g™iz©i⁄s
 647

	)

78 
	#OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
 
OBJ_joöt_iso_ôu_t
,23L

	)

80 
	#SN_w≠
 "w≠"

	)

81 
	#NID_w≠
 678

	)

82 
	#OBJ_w≠
 
OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
,43L

	)

84 
	#SN_w≠_wsg
 "w≠-wsg"

	)

85 
	#NID_w≠_wsg
 679

	)

86 
	#OBJ_w≠_wsg
 
OBJ_w≠
,1L

	)

88 
	#SN_£À˘ed_©åibuã_ty≥s
 "£À˘ed-©åibuã-ty≥s"

	)

89 
	#LN_£À˘ed_©åibuã_ty≥s
 "Sñe˘ed Aâribuã Ty≥s"

	)

90 
	#NID_£À˘ed_©åibuã_ty≥s
 394

	)

91 
	#OBJ_£À˘ed_©åibuã_ty≥s
 
OBJ_joöt_iso_ôu_t
,5L,1L,5L

	)

93 
	#SN_˛óøn˚
 "˛óøn˚"

	)

94 
	#NID_˛óøn˚
 395

	)

95 
	#OBJ_˛óøn˚
 
OBJ_£À˘ed_©åibuã_ty≥s
,55L

	)

97 
	#SN_ISO_US
 "ISO-US"

	)

98 
	#LN_ISO_US
 "ISO US Membî Body"

	)

99 
	#NID_ISO_US
 183

	)

100 
	#OBJ_ISO_US
 
OBJ_membî_body
,840L

	)

102 
	#SN_X9_57
 "X9-57"

	)

103 
	#LN_X9_57
 "X9.57"

	)

104 
	#NID_X9_57
 184

	)

105 
	#OBJ_X9_57
 
OBJ_ISO_US
,10040L

	)

107 
	#SN_X9cm
 "X9cm"

	)

108 
	#LN_X9cm
 "X9.57 CM ?"

	)

109 
	#NID_X9cm
 185

	)

110 
	#OBJ_X9cm
 
OBJ_X9_57
,4L

	)

112 
	#SN_ISO_CN
 "ISO-CN"

	)

113 
	#LN_ISO_CN
 "ISO CN Membî Body"

	)

114 
	#NID_ISO_CN
 1140

	)

115 
	#OBJ_ISO_CN
 
OBJ_membî_body
,156L

	)

117 
	#SN_oscˇ
 "oscˇ"

	)

118 
	#NID_oscˇ
 1141

	)

119 
	#OBJ_oscˇ
 
OBJ_ISO_CN
,10197L

	)

121 
	#SN_sm_scheme
 "sm-scheme"

	)

122 
	#NID_sm_scheme
 1142

	)

123 
	#OBJ_sm_scheme
 
OBJ_oscˇ
,1L

	)

125 
	#SN_dß
 "DSA"

	)

126 
	#LN_dß
 "dßEn¸y±i⁄"

	)

127 
	#NID_dß
 116

	)

128 
	#OBJ_dß
 
OBJ_X9cm
,1L

	)

130 
	#SN_dßWôhSHA1
 "DSA-SHA1"

	)

131 
	#LN_dßWôhSHA1
 "dßWôhSHA1"

	)

132 
	#NID_dßWôhSHA1
 113

	)

133 
	#OBJ_dßWôhSHA1
 
OBJ_X9cm
,3L

	)

135 
	#SN_™si_X9_62
 "™si-X9-62"

	)

136 
	#LN_™si_X9_62
 "ANSI X9.62"

	)

137 
	#NID_™si_X9_62
 405

	)

138 
	#OBJ_™si_X9_62
 
OBJ_ISO_US
,10045L

	)

140 
	#OBJ_X9_62_id_fõldTy≥
 
OBJ_™si_X9_62
,1L

	)

142 
	#SN_X9_62_¥ime_fõld
 "¥ime-fõld"

	)

143 
	#NID_X9_62_¥ime_fõld
 406

	)

144 
	#OBJ_X9_62_¥ime_fõld
 
OBJ_X9_62_id_fõldTy≥
,1L

	)

146 
	#SN_X9_62_ch¨a˘îi°ic_two_fõld
 "ch¨a˘îi°ic-two-fõld"

	)

147 
	#NID_X9_62_ch¨a˘îi°ic_two_fõld
 407

	)

148 
	#OBJ_X9_62_ch¨a˘îi°ic_two_fõld
 
OBJ_X9_62_id_fõldTy≥
,2L

	)

150 
	#SN_X9_62_id_ch¨a˘îi°ic_two_basis
 "id-ch¨a˘îi°ic-two-basis"

	)

151 
	#NID_X9_62_id_ch¨a˘îi°ic_two_basis
 680

	)

152 
	#OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
 
OBJ_X9_62_ch¨a˘îi°ic_two_fõld
,3L

	)

154 
	#SN_X9_62_⁄Basis
 "⁄Basis"

	)

155 
	#NID_X9_62_⁄Basis
 681

	)

156 
	#OBJ_X9_62_⁄Basis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,1L

	)

158 
	#SN_X9_62_çBasis
 "çBasis"

	)

159 
	#NID_X9_62_çBasis
 682

	)

160 
	#OBJ_X9_62_çBasis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,2L

	)

162 
	#SN_X9_62_µBasis
 "µBasis"

	)

163 
	#NID_X9_62_µBasis
 683

	)

164 
	#OBJ_X9_62_µBasis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,3L

	)

166 
	#OBJ_X9_62_id_publicKeyTy≥
 
OBJ_™si_X9_62
,2L

	)

168 
	#SN_X9_62_id_ecPublicKey
 "id-ecPublicKey"

	)

169 
	#NID_X9_62_id_ecPublicKey
 408

	)

170 
	#OBJ_X9_62_id_ecPublicKey
 
OBJ_X9_62_id_publicKeyTy≥
,1L

	)

172 
	#OBJ_X9_62_ñlùticCurve
 
OBJ_™si_X9_62
,3L

	)

174 
	#OBJ_X9_62_c_TwoCurve
 
OBJ_X9_62_ñlùticCurve
,0L

	)

176 
	#SN_X9_62_c2≤b163v1
 "c2≤b163v1"

	)

177 
	#NID_X9_62_c2≤b163v1
 684

	)

178 
	#OBJ_X9_62_c2≤b163v1
 
OBJ_X9_62_c_TwoCurve
,1L

	)

180 
	#SN_X9_62_c2≤b163v2
 "c2≤b163v2"

	)

181 
	#NID_X9_62_c2≤b163v2
 685

	)

182 
	#OBJ_X9_62_c2≤b163v2
 
OBJ_X9_62_c_TwoCurve
,2L

	)

184 
	#SN_X9_62_c2≤b163v3
 "c2≤b163v3"

	)

185 
	#NID_X9_62_c2≤b163v3
 686

	)

186 
	#OBJ_X9_62_c2≤b163v3
 
OBJ_X9_62_c_TwoCurve
,3L

	)

188 
	#SN_X9_62_c2≤b176v1
 "c2≤b176v1"

	)

189 
	#NID_X9_62_c2≤b176v1
 687

	)

190 
	#OBJ_X9_62_c2≤b176v1
 
OBJ_X9_62_c_TwoCurve
,4L

	)

192 
	#SN_X9_62_c2äb191v1
 "c2äb191v1"

	)

193 
	#NID_X9_62_c2äb191v1
 688

	)

194 
	#OBJ_X9_62_c2äb191v1
 
OBJ_X9_62_c_TwoCurve
,5L

	)

196 
	#SN_X9_62_c2äb191v2
 "c2äb191v2"

	)

197 
	#NID_X9_62_c2äb191v2
 689

	)

198 
	#OBJ_X9_62_c2äb191v2
 
OBJ_X9_62_c_TwoCurve
,6L

	)

200 
	#SN_X9_62_c2äb191v3
 "c2äb191v3"

	)

201 
	#NID_X9_62_c2äb191v3
 690

	)

202 
	#OBJ_X9_62_c2äb191v3
 
OBJ_X9_62_c_TwoCurve
,7L

	)

204 
	#SN_X9_62_c2⁄b191v4
 "c2⁄b191v4"

	)

205 
	#NID_X9_62_c2⁄b191v4
 691

	)

206 
	#OBJ_X9_62_c2⁄b191v4
 
OBJ_X9_62_c_TwoCurve
,8L

	)

208 
	#SN_X9_62_c2⁄b191v5
 "c2⁄b191v5"

	)

209 
	#NID_X9_62_c2⁄b191v5
 692

	)

210 
	#OBJ_X9_62_c2⁄b191v5
 
OBJ_X9_62_c_TwoCurve
,9L

	)

212 
	#SN_X9_62_c2≤b208w1
 "c2≤b208w1"

	)

213 
	#NID_X9_62_c2≤b208w1
 693

	)

214 
	#OBJ_X9_62_c2≤b208w1
 
OBJ_X9_62_c_TwoCurve
,10L

	)

216 
	#SN_X9_62_c2äb239v1
 "c2äb239v1"

	)

217 
	#NID_X9_62_c2äb239v1
 694

	)

218 
	#OBJ_X9_62_c2äb239v1
 
OBJ_X9_62_c_TwoCurve
,11L

	)

220 
	#SN_X9_62_c2äb239v2
 "c2äb239v2"

	)

221 
	#NID_X9_62_c2äb239v2
 695

	)

222 
	#OBJ_X9_62_c2äb239v2
 
OBJ_X9_62_c_TwoCurve
,12L

	)

224 
	#SN_X9_62_c2äb239v3
 "c2äb239v3"

	)

225 
	#NID_X9_62_c2äb239v3
 696

	)

226 
	#OBJ_X9_62_c2äb239v3
 
OBJ_X9_62_c_TwoCurve
,13L

	)

228 
	#SN_X9_62_c2⁄b239v4
 "c2⁄b239v4"

	)

229 
	#NID_X9_62_c2⁄b239v4
 697

	)

230 
	#OBJ_X9_62_c2⁄b239v4
 
OBJ_X9_62_c_TwoCurve
,14L

	)

232 
	#SN_X9_62_c2⁄b239v5
 "c2⁄b239v5"

	)

233 
	#NID_X9_62_c2⁄b239v5
 698

	)

234 
	#OBJ_X9_62_c2⁄b239v5
 
OBJ_X9_62_c_TwoCurve
,15L

	)

236 
	#SN_X9_62_c2≤b272w1
 "c2≤b272w1"

	)

237 
	#NID_X9_62_c2≤b272w1
 699

	)

238 
	#OBJ_X9_62_c2≤b272w1
 
OBJ_X9_62_c_TwoCurve
,16L

	)

240 
	#SN_X9_62_c2≤b304w1
 "c2≤b304w1"

	)

241 
	#NID_X9_62_c2≤b304w1
 700

	)

242 
	#OBJ_X9_62_c2≤b304w1
 
OBJ_X9_62_c_TwoCurve
,17L

	)

244 
	#SN_X9_62_c2äb359v1
 "c2äb359v1"

	)

245 
	#NID_X9_62_c2äb359v1
 701

	)

246 
	#OBJ_X9_62_c2äb359v1
 
OBJ_X9_62_c_TwoCurve
,18L

	)

248 
	#SN_X9_62_c2≤b368w1
 "c2≤b368w1"

	)

249 
	#NID_X9_62_c2≤b368w1
 702

	)

250 
	#OBJ_X9_62_c2≤b368w1
 
OBJ_X9_62_c_TwoCurve
,19L

	)

252 
	#SN_X9_62_c2äb431r1
 "c2äb431r1"

	)

253 
	#NID_X9_62_c2äb431r1
 703

	)

254 
	#OBJ_X9_62_c2äb431r1
 
OBJ_X9_62_c_TwoCurve
,20L

	)

256 
	#OBJ_X9_62_¥imeCurve
 
OBJ_X9_62_ñlùticCurve
,1L

	)

258 
	#SN_X9_62_¥ime192v1
 "¥ime192v1"

	)

259 
	#NID_X9_62_¥ime192v1
 409

	)

260 
	#OBJ_X9_62_¥ime192v1
 
OBJ_X9_62_¥imeCurve
,1L

	)

262 
	#SN_X9_62_¥ime192v2
 "¥ime192v2"

	)

263 
	#NID_X9_62_¥ime192v2
 410

	)

264 
	#OBJ_X9_62_¥ime192v2
 
OBJ_X9_62_¥imeCurve
,2L

	)

266 
	#SN_X9_62_¥ime192v3
 "¥ime192v3"

	)

267 
	#NID_X9_62_¥ime192v3
 411

	)

268 
	#OBJ_X9_62_¥ime192v3
 
OBJ_X9_62_¥imeCurve
,3L

	)

270 
	#SN_X9_62_¥ime239v1
 "¥ime239v1"

	)

271 
	#NID_X9_62_¥ime239v1
 412

	)

272 
	#OBJ_X9_62_¥ime239v1
 
OBJ_X9_62_¥imeCurve
,4L

	)

274 
	#SN_X9_62_¥ime239v2
 "¥ime239v2"

	)

275 
	#NID_X9_62_¥ime239v2
 413

	)

276 
	#OBJ_X9_62_¥ime239v2
 
OBJ_X9_62_¥imeCurve
,5L

	)

278 
	#SN_X9_62_¥ime239v3
 "¥ime239v3"

	)

279 
	#NID_X9_62_¥ime239v3
 414

	)

280 
	#OBJ_X9_62_¥ime239v3
 
OBJ_X9_62_¥imeCurve
,6L

	)

282 
	#SN_X9_62_¥ime256v1
 "¥ime256v1"

	)

283 
	#NID_X9_62_¥ime256v1
 415

	)

284 
	#OBJ_X9_62_¥ime256v1
 
OBJ_X9_62_¥imeCurve
,7L

	)

286 
	#OBJ_X9_62_id_ecSigTy≥
 
OBJ_™si_X9_62
,4L

	)

288 
	#SN_ecdß_wôh_SHA1
 "ecdß-wôh-SHA1"

	)

289 
	#NID_ecdß_wôh_SHA1
 416

	)

290 
	#OBJ_ecdß_wôh_SHA1
 
OBJ_X9_62_id_ecSigTy≥
,1L

	)

292 
	#SN_ecdß_wôh_Recommíded
 "ecdß-wôh-Recommíded"

	)

293 
	#NID_ecdß_wôh_Recommíded
 791

	)

294 
	#OBJ_ecdß_wôh_Recommíded
 
OBJ_X9_62_id_ecSigTy≥
,2L

	)

296 
	#SN_ecdß_wôh_S≥cifõd
 "ecdß-wôh-S≥cifõd"

	)

297 
	#NID_ecdß_wôh_S≥cifõd
 792

	)

298 
	#OBJ_ecdß_wôh_S≥cifõd
 
OBJ_X9_62_id_ecSigTy≥
,3L

	)

300 
	#SN_ecdß_wôh_SHA224
 "ecdß-wôh-SHA224"

	)

301 
	#NID_ecdß_wôh_SHA224
 793

	)

302 
	#OBJ_ecdß_wôh_SHA224
 
OBJ_ecdß_wôh_S≥cifõd
,1L

	)

304 
	#SN_ecdß_wôh_SHA256
 "ecdß-wôh-SHA256"

	)

305 
	#NID_ecdß_wôh_SHA256
 794

	)

306 
	#OBJ_ecdß_wôh_SHA256
 
OBJ_ecdß_wôh_S≥cifõd
,2L

	)

308 
	#SN_ecdß_wôh_SHA384
 "ecdß-wôh-SHA384"

	)

309 
	#NID_ecdß_wôh_SHA384
 795

	)

310 
	#OBJ_ecdß_wôh_SHA384
 
OBJ_ecdß_wôh_S≥cifõd
,3L

	)

312 
	#SN_ecdß_wôh_SHA512
 "ecdß-wôh-SHA512"

	)

313 
	#NID_ecdß_wôh_SHA512
 796

	)

314 
	#OBJ_ecdß_wôh_SHA512
 
OBJ_ecdß_wôh_S≥cifõd
,4L

	)

316 
	#OBJ_£cg_ñlùticCurve
 
OBJ_˚πicom_¨c
,0L

	)

318 
	#SN_£˝112r1
 "£˝112r1"

	)

319 
	#NID_£˝112r1
 704

	)

320 
	#OBJ_£˝112r1
 
OBJ_£cg_ñlùticCurve
,6L

	)

322 
	#SN_£˝112r2
 "£˝112r2"

	)

323 
	#NID_£˝112r2
 705

	)

324 
	#OBJ_£˝112r2
 
OBJ_£cg_ñlùticCurve
,7L

	)

326 
	#SN_£˝128r1
 "£˝128r1"

	)

327 
	#NID_£˝128r1
 706

	)

328 
	#OBJ_£˝128r1
 
OBJ_£cg_ñlùticCurve
,28L

	)

330 
	#SN_£˝128r2
 "£˝128r2"

	)

331 
	#NID_£˝128r2
 707

	)

332 
	#OBJ_£˝128r2
 
OBJ_£cg_ñlùticCurve
,29L

	)

334 
	#SN_£˝160k1
 "£˝160k1"

	)

335 
	#NID_£˝160k1
 708

	)

336 
	#OBJ_£˝160k1
 
OBJ_£cg_ñlùticCurve
,9L

	)

338 
	#SN_£˝160r1
 "£˝160r1"

	)

339 
	#NID_£˝160r1
 709

	)

340 
	#OBJ_£˝160r1
 
OBJ_£cg_ñlùticCurve
,8L

	)

342 
	#SN_£˝160r2
 "£˝160r2"

	)

343 
	#NID_£˝160r2
 710

	)

344 
	#OBJ_£˝160r2
 
OBJ_£cg_ñlùticCurve
,30L

	)

346 
	#SN_£˝192k1
 "£˝192k1"

	)

347 
	#NID_£˝192k1
 711

	)

348 
	#OBJ_£˝192k1
 
OBJ_£cg_ñlùticCurve
,31L

	)

350 
	#SN_£˝224k1
 "£˝224k1"

	)

351 
	#NID_£˝224k1
 712

	)

352 
	#OBJ_£˝224k1
 
OBJ_£cg_ñlùticCurve
,32L

	)

354 
	#SN_£˝224r1
 "£˝224r1"

	)

355 
	#NID_£˝224r1
 713

	)

356 
	#OBJ_£˝224r1
 
OBJ_£cg_ñlùticCurve
,33L

	)

358 
	#SN_£˝256k1
 "£˝256k1"

	)

359 
	#NID_£˝256k1
 714

	)

360 
	#OBJ_£˝256k1
 
OBJ_£cg_ñlùticCurve
,10L

	)

362 
	#SN_£˝384r1
 "£˝384r1"

	)

363 
	#NID_£˝384r1
 715

	)

364 
	#OBJ_£˝384r1
 
OBJ_£cg_ñlùticCurve
,34L

	)

366 
	#SN_£˝521r1
 "£˝521r1"

	)

367 
	#NID_£˝521r1
 716

	)

368 
	#OBJ_£˝521r1
 
OBJ_£cg_ñlùticCurve
,35L

	)

370 
	#SN_£˘113r1
 "£˘113r1"

	)

371 
	#NID_£˘113r1
 717

	)

372 
	#OBJ_£˘113r1
 
OBJ_£cg_ñlùticCurve
,4L

	)

374 
	#SN_£˘113r2
 "£˘113r2"

	)

375 
	#NID_£˘113r2
 718

	)

376 
	#OBJ_£˘113r2
 
OBJ_£cg_ñlùticCurve
,5L

	)

378 
	#SN_£˘131r1
 "£˘131r1"

	)

379 
	#NID_£˘131r1
 719

	)

380 
	#OBJ_£˘131r1
 
OBJ_£cg_ñlùticCurve
,22L

	)

382 
	#SN_£˘131r2
 "£˘131r2"

	)

383 
	#NID_£˘131r2
 720

	)

384 
	#OBJ_£˘131r2
 
OBJ_£cg_ñlùticCurve
,23L

	)

386 
	#SN_£˘163k1
 "£˘163k1"

	)

387 
	#NID_£˘163k1
 721

	)

388 
	#OBJ_£˘163k1
 
OBJ_£cg_ñlùticCurve
,1L

	)

390 
	#SN_£˘163r1
 "£˘163r1"

	)

391 
	#NID_£˘163r1
 722

	)

392 
	#OBJ_£˘163r1
 
OBJ_£cg_ñlùticCurve
,2L

	)

394 
	#SN_£˘163r2
 "£˘163r2"

	)

395 
	#NID_£˘163r2
 723

	)

396 
	#OBJ_£˘163r2
 
OBJ_£cg_ñlùticCurve
,15L

	)

398 
	#SN_£˘193r1
 "£˘193r1"

	)

399 
	#NID_£˘193r1
 724

	)

400 
	#OBJ_£˘193r1
 
OBJ_£cg_ñlùticCurve
,24L

	)

402 
	#SN_£˘193r2
 "£˘193r2"

	)

403 
	#NID_£˘193r2
 725

	)

404 
	#OBJ_£˘193r2
 
OBJ_£cg_ñlùticCurve
,25L

	)

406 
	#SN_£˘233k1
 "£˘233k1"

	)

407 
	#NID_£˘233k1
 726

	)

408 
	#OBJ_£˘233k1
 
OBJ_£cg_ñlùticCurve
,26L

	)

410 
	#SN_£˘233r1
 "£˘233r1"

	)

411 
	#NID_£˘233r1
 727

	)

412 
	#OBJ_£˘233r1
 
OBJ_£cg_ñlùticCurve
,27L

	)

414 
	#SN_£˘239k1
 "£˘239k1"

	)

415 
	#NID_£˘239k1
 728

	)

416 
	#OBJ_£˘239k1
 
OBJ_£cg_ñlùticCurve
,3L

	)

418 
	#SN_£˘283k1
 "£˘283k1"

	)

419 
	#NID_£˘283k1
 729

	)

420 
	#OBJ_£˘283k1
 
OBJ_£cg_ñlùticCurve
,16L

	)

422 
	#SN_£˘283r1
 "£˘283r1"

	)

423 
	#NID_£˘283r1
 730

	)

424 
	#OBJ_£˘283r1
 
OBJ_£cg_ñlùticCurve
,17L

	)

426 
	#SN_£˘409k1
 "£˘409k1"

	)

427 
	#NID_£˘409k1
 731

	)

428 
	#OBJ_£˘409k1
 
OBJ_£cg_ñlùticCurve
,36L

	)

430 
	#SN_£˘409r1
 "£˘409r1"

	)

431 
	#NID_£˘409r1
 732

	)

432 
	#OBJ_£˘409r1
 
OBJ_£cg_ñlùticCurve
,37L

	)

434 
	#SN_£˘571k1
 "£˘571k1"

	)

435 
	#NID_£˘571k1
 733

	)

436 
	#OBJ_£˘571k1
 
OBJ_£cg_ñlùticCurve
,38L

	)

438 
	#SN_£˘571r1
 "£˘571r1"

	)

439 
	#NID_£˘571r1
 734

	)

440 
	#OBJ_£˘571r1
 
OBJ_£cg_ñlùticCurve
,39L

	)

442 
	#OBJ_w≠_wsg_idm_ecid
 
OBJ_w≠_wsg
,4L

	)

444 
	#SN_w≠_wsg_idm_ecid_wés1
 "w≠-wsg-idm-ecid-wés1"

	)

445 
	#NID_w≠_wsg_idm_ecid_wés1
 735

	)

446 
	#OBJ_w≠_wsg_idm_ecid_wés1
 
OBJ_w≠_wsg_idm_ecid
,1L

	)

448 
	#SN_w≠_wsg_idm_ecid_wés3
 "w≠-wsg-idm-ecid-wés3"

	)

449 
	#NID_w≠_wsg_idm_ecid_wés3
 736

	)

450 
	#OBJ_w≠_wsg_idm_ecid_wés3
 
OBJ_w≠_wsg_idm_ecid
,3L

	)

452 
	#SN_w≠_wsg_idm_ecid_wés4
 "w≠-wsg-idm-ecid-wés4"

	)

453 
	#NID_w≠_wsg_idm_ecid_wés4
 737

	)

454 
	#OBJ_w≠_wsg_idm_ecid_wés4
 
OBJ_w≠_wsg_idm_ecid
,4L

	)

456 
	#SN_w≠_wsg_idm_ecid_wés5
 "w≠-wsg-idm-ecid-wés5"

	)

457 
	#NID_w≠_wsg_idm_ecid_wés5
 738

	)

458 
	#OBJ_w≠_wsg_idm_ecid_wés5
 
OBJ_w≠_wsg_idm_ecid
,5L

	)

460 
	#SN_w≠_wsg_idm_ecid_wés6
 "w≠-wsg-idm-ecid-wés6"

	)

461 
	#NID_w≠_wsg_idm_ecid_wés6
 739

	)

462 
	#OBJ_w≠_wsg_idm_ecid_wés6
 
OBJ_w≠_wsg_idm_ecid
,6L

	)

464 
	#SN_w≠_wsg_idm_ecid_wés7
 "w≠-wsg-idm-ecid-wés7"

	)

465 
	#NID_w≠_wsg_idm_ecid_wés7
 740

	)

466 
	#OBJ_w≠_wsg_idm_ecid_wés7
 
OBJ_w≠_wsg_idm_ecid
,7L

	)

468 
	#SN_w≠_wsg_idm_ecid_wés8
 "w≠-wsg-idm-ecid-wés8"

	)

469 
	#NID_w≠_wsg_idm_ecid_wés8
 741

	)

470 
	#OBJ_w≠_wsg_idm_ecid_wés8
 
OBJ_w≠_wsg_idm_ecid
,8L

	)

472 
	#SN_w≠_wsg_idm_ecid_wés9
 "w≠-wsg-idm-ecid-wés9"

	)

473 
	#NID_w≠_wsg_idm_ecid_wés9
 742

	)

474 
	#OBJ_w≠_wsg_idm_ecid_wés9
 
OBJ_w≠_wsg_idm_ecid
,9L

	)

476 
	#SN_w≠_wsg_idm_ecid_wés10
 "w≠-wsg-idm-ecid-wés10"

	)

477 
	#NID_w≠_wsg_idm_ecid_wés10
 743

	)

478 
	#OBJ_w≠_wsg_idm_ecid_wés10
 
OBJ_w≠_wsg_idm_ecid
,10L

	)

480 
	#SN_w≠_wsg_idm_ecid_wés11
 "w≠-wsg-idm-ecid-wés11"

	)

481 
	#NID_w≠_wsg_idm_ecid_wés11
 744

	)

482 
	#OBJ_w≠_wsg_idm_ecid_wés11
 
OBJ_w≠_wsg_idm_ecid
,11L

	)

484 
	#SN_w≠_wsg_idm_ecid_wés12
 "w≠-wsg-idm-ecid-wés12"

	)

485 
	#NID_w≠_wsg_idm_ecid_wés12
 745

	)

486 
	#OBJ_w≠_wsg_idm_ecid_wés12
 
OBJ_w≠_wsg_idm_ecid
,12L

	)

488 
	#SN_ˇ°5_cbc
 "CAST5-CBC"

	)

489 
	#LN_ˇ°5_cbc
 "ˇ°5-cbc"

	)

490 
	#NID_ˇ°5_cbc
 108

	)

491 
	#OBJ_ˇ°5_cbc
 
OBJ_ISO_US
,113533L,7L,66L,10L

	)

493 
	#SN_ˇ°5_ecb
 "CAST5-ECB"

	)

494 
	#LN_ˇ°5_ecb
 "ˇ°5-ecb"

	)

495 
	#NID_ˇ°5_ecb
 109

	)

497 
	#SN_ˇ°5_cfb64
 "CAST5-CFB"

	)

498 
	#LN_ˇ°5_cfb64
 "ˇ°5-cfb"

	)

499 
	#NID_ˇ°5_cfb64
 110

	)

501 
	#SN_ˇ°5_ofb64
 "CAST5-OFB"

	)

502 
	#LN_ˇ°5_ofb64
 "ˇ°5-ofb"

	)

503 
	#NID_ˇ°5_ofb64
 111

	)

505 
	#LN_pbeWôhMD5AndCa°5_CBC
 "pbeWôhMD5AndCa°5CBC"

	)

506 
	#NID_pbeWôhMD5AndCa°5_CBC
 112

	)

507 
	#OBJ_pbeWôhMD5AndCa°5_CBC
 
OBJ_ISO_US
,113533L,7L,66L,12L

	)

509 
	#SN_id_Passw‹dBa£dMAC
 "id-Passw‹dBa£dMAC"

	)

510 
	#LN_id_Passw‹dBa£dMAC
 "∑ssw‹d ba£d MAC"

	)

511 
	#NID_id_Passw‹dBa£dMAC
 782

	)

512 
	#OBJ_id_Passw‹dBa£dMAC
 
OBJ_ISO_US
,113533L,7L,66L,13L

	)

514 
	#SN_id_DHBa£dMac
 "id-DHBa£dMac"

	)

515 
	#LN_id_DHBa£dMac
 "Diffõ-Hñlm™ ba£d MAC"

	)

516 
	#NID_id_DHBa£dMac
 783

	)

517 
	#OBJ_id_DHBa£dMac
 
OBJ_ISO_US
,113533L,7L,66L,30L

	)

519 
	#SN_rßdsi
 "rßdsi"

	)

520 
	#LN_rßdsi
 "RSA D©®Securôy, Inc."

	)

521 
	#NID_rßdsi
 1

	)

522 
	#OBJ_rßdsi
 
OBJ_ISO_US
,113549L

	)

524 
	#SN_pkcs
 "pkcs"

	)

525 
	#LN_pkcs
 "RSA D©®Securôy, Inc. PKCS"

	)

526 
	#NID_pkcs
 2

	)

527 
	#OBJ_pkcs
 
OBJ_rßdsi
,1L

	)

529 
	#SN_pkcs1
 "pkcs1"

	)

530 
	#NID_pkcs1
 186

	)

531 
	#OBJ_pkcs1
 
OBJ_pkcs
,1L

	)

533 
	#LN_rßEn¸y±i⁄
 "rßEn¸y±i⁄"

	)

534 
	#NID_rßEn¸y±i⁄
 6

	)

535 
	#OBJ_rßEn¸y±i⁄
 
OBJ_pkcs1
,1L

	)

537 
	#SN_md2WôhRSAEn¸y±i⁄
 "RSA-MD2"

	)

538 
	#LN_md2WôhRSAEn¸y±i⁄
 "md2WôhRSAEn¸y±i⁄"

	)

539 
	#NID_md2WôhRSAEn¸y±i⁄
 7

	)

540 
	#OBJ_md2WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,2L

	)

542 
	#SN_md4WôhRSAEn¸y±i⁄
 "RSA-MD4"

	)

543 
	#LN_md4WôhRSAEn¸y±i⁄
 "md4WôhRSAEn¸y±i⁄"

	)

544 
	#NID_md4WôhRSAEn¸y±i⁄
 396

	)

545 
	#OBJ_md4WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,3L

	)

547 
	#SN_md5WôhRSAEn¸y±i⁄
 "RSA-MD5"

	)

548 
	#LN_md5WôhRSAEn¸y±i⁄
 "md5WôhRSAEn¸y±i⁄"

	)

549 
	#NID_md5WôhRSAEn¸y±i⁄
 8

	)

550 
	#OBJ_md5WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,4L

	)

552 
	#SN_sha1WôhRSAEn¸y±i⁄
 "RSA-SHA1"

	)

553 
	#LN_sha1WôhRSAEn¸y±i⁄
 "sha1WôhRSAEn¸y±i⁄"

	)

554 
	#NID_sha1WôhRSAEn¸y±i⁄
 65

	)

555 
	#OBJ_sha1WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,5L

	)

557 
	#SN_rßesO´p
 "RSAES-OAEP"

	)

558 
	#LN_rßesO´p
 "rßesO´p"

	)

559 
	#NID_rßesO´p
 919

	)

560 
	#OBJ_rßesO´p
 
OBJ_pkcs1
,7L

	)

562 
	#SN_mgf1
 "MGF1"

	)

563 
	#LN_mgf1
 "mgf1"

	)

564 
	#NID_mgf1
 911

	)

565 
	#OBJ_mgf1
 
OBJ_pkcs1
,8L

	)

567 
	#SN_pS≥cifõd
 "PSPECIFIED"

	)

568 
	#LN_pS≥cifõd
 "pS≥cifõd"

	)

569 
	#NID_pS≥cifõd
 935

	)

570 
	#OBJ_pS≥cifõd
 
OBJ_pkcs1
,9L

	)

572 
	#SN_rßsßPss
 "RSASSA-PSS"

	)

573 
	#LN_rßsßPss
 "rßsßPss"

	)

574 
	#NID_rßsßPss
 912

	)

575 
	#OBJ_rßsßPss
 
OBJ_pkcs1
,10L

	)

577 
	#SN_sha256WôhRSAEn¸y±i⁄
 "RSA-SHA256"

	)

578 
	#LN_sha256WôhRSAEn¸y±i⁄
 "sha256WôhRSAEn¸y±i⁄"

	)

579 
	#NID_sha256WôhRSAEn¸y±i⁄
 668

	)

580 
	#OBJ_sha256WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,11L

	)

582 
	#SN_sha384WôhRSAEn¸y±i⁄
 "RSA-SHA384"

	)

583 
	#LN_sha384WôhRSAEn¸y±i⁄
 "sha384WôhRSAEn¸y±i⁄"

	)

584 
	#NID_sha384WôhRSAEn¸y±i⁄
 669

	)

585 
	#OBJ_sha384WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,12L

	)

587 
	#SN_sha512WôhRSAEn¸y±i⁄
 "RSA-SHA512"

	)

588 
	#LN_sha512WôhRSAEn¸y±i⁄
 "sha512WôhRSAEn¸y±i⁄"

	)

589 
	#NID_sha512WôhRSAEn¸y±i⁄
 670

	)

590 
	#OBJ_sha512WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,13L

	)

592 
	#SN_sha224WôhRSAEn¸y±i⁄
 "RSA-SHA224"

	)

593 
	#LN_sha224WôhRSAEn¸y±i⁄
 "sha224WôhRSAEn¸y±i⁄"

	)

594 
	#NID_sha224WôhRSAEn¸y±i⁄
 671

	)

595 
	#OBJ_sha224WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,14L

	)

597 
	#SN_sha512_224WôhRSAEn¸y±i⁄
 "RSA-SHA512/224"

	)

598 
	#LN_sha512_224WôhRSAEn¸y±i⁄
 "sha512-224WôhRSAEn¸y±i⁄"

	)

599 
	#NID_sha512_224WôhRSAEn¸y±i⁄
 1145

	)

600 
	#OBJ_sha512_224WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,15L

	)

602 
	#SN_sha512_256WôhRSAEn¸y±i⁄
 "RSA-SHA512/256"

	)

603 
	#LN_sha512_256WôhRSAEn¸y±i⁄
 "sha512-256WôhRSAEn¸y±i⁄"

	)

604 
	#NID_sha512_256WôhRSAEn¸y±i⁄
 1146

	)

605 
	#OBJ_sha512_256WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,16L

	)

607 
	#SN_pkcs3
 "pkcs3"

	)

608 
	#NID_pkcs3
 27

	)

609 
	#OBJ_pkcs3
 
OBJ_pkcs
,3L

	)

611 
	#LN_dhKeyAgªemít
 "dhKeyAgªemít"

	)

612 
	#NID_dhKeyAgªemít
 28

	)

613 
	#OBJ_dhKeyAgªemít
 
OBJ_pkcs3
,1L

	)

615 
	#SN_pkcs5
 "pkcs5"

	)

616 
	#NID_pkcs5
 187

	)

617 
	#OBJ_pkcs5
 
OBJ_pkcs
,5L

	)

619 
	#SN_pbeWôhMD2AndDES_CBC
 "PBE-MD2-DES"

	)

620 
	#LN_pbeWôhMD2AndDES_CBC
 "pbeWôhMD2AndDES-CBC"

	)

621 
	#NID_pbeWôhMD2AndDES_CBC
 9

	)

622 
	#OBJ_pbeWôhMD2AndDES_CBC
 
OBJ_pkcs5
,1L

	)

624 
	#SN_pbeWôhMD5AndDES_CBC
 "PBE-MD5-DES"

	)

625 
	#LN_pbeWôhMD5AndDES_CBC
 "pbeWôhMD5AndDES-CBC"

	)

626 
	#NID_pbeWôhMD5AndDES_CBC
 10

	)

627 
	#OBJ_pbeWôhMD5AndDES_CBC
 
OBJ_pkcs5
,3L

	)

629 
	#SN_pbeWôhMD2AndRC2_CBC
 "PBE-MD2-RC2-64"

	)

630 
	#LN_pbeWôhMD2AndRC2_CBC
 "pbeWôhMD2AndRC2-CBC"

	)

631 
	#NID_pbeWôhMD2AndRC2_CBC
 168

	)

632 
	#OBJ_pbeWôhMD2AndRC2_CBC
 
OBJ_pkcs5
,4L

	)

634 
	#SN_pbeWôhMD5AndRC2_CBC
 "PBE-MD5-RC2-64"

	)

635 
	#LN_pbeWôhMD5AndRC2_CBC
 "pbeWôhMD5AndRC2-CBC"

	)

636 
	#NID_pbeWôhMD5AndRC2_CBC
 169

	)

637 
	#OBJ_pbeWôhMD5AndRC2_CBC
 
OBJ_pkcs5
,6L

	)

639 
	#SN_pbeWôhSHA1AndDES_CBC
 "PBE-SHA1-DES"

	)

640 
	#LN_pbeWôhSHA1AndDES_CBC
 "pbeWôhSHA1AndDES-CBC"

	)

641 
	#NID_pbeWôhSHA1AndDES_CBC
 170

	)

642 
	#OBJ_pbeWôhSHA1AndDES_CBC
 
OBJ_pkcs5
,10L

	)

644 
	#SN_pbeWôhSHA1AndRC2_CBC
 "PBE-SHA1-RC2-64"

	)

645 
	#LN_pbeWôhSHA1AndRC2_CBC
 "pbeWôhSHA1AndRC2-CBC"

	)

646 
	#NID_pbeWôhSHA1AndRC2_CBC
 68

	)

647 
	#OBJ_pbeWôhSHA1AndRC2_CBC
 
OBJ_pkcs5
,11L

	)

649 
	#LN_id_pbkdf2
 "PBKDF2"

	)

650 
	#NID_id_pbkdf2
 69

	)

651 
	#OBJ_id_pbkdf2
 
OBJ_pkcs5
,12L

	)

653 
	#LN_pbes2
 "PBES2"

	)

654 
	#NID_pbes2
 161

	)

655 
	#OBJ_pbes2
 
OBJ_pkcs5
,13L

	)

657 
	#LN_pbmac1
 "PBMAC1"

	)

658 
	#NID_pbmac1
 162

	)

659 
	#OBJ_pbmac1
 
OBJ_pkcs5
,14L

	)

661 
	#SN_pkcs7
 "pkcs7"

	)

662 
	#NID_pkcs7
 20

	)

663 
	#OBJ_pkcs7
 
OBJ_pkcs
,7L

	)

665 
	#LN_pkcs7_d©a
 "pkcs7-d©a"

	)

666 
	#NID_pkcs7_d©a
 21

	)

667 
	#OBJ_pkcs7_d©a
 
OBJ_pkcs7
,1L

	)

669 
	#LN_pkcs7_sig√d
 "pkcs7-sig√dD©a"

	)

670 
	#NID_pkcs7_sig√d
 22

	)

671 
	#OBJ_pkcs7_sig√d
 
OBJ_pkcs7
,2L

	)

673 
	#LN_pkcs7_ívñ›ed
 "pkcs7-ívñ›edD©a"

	)

674 
	#NID_pkcs7_ívñ›ed
 23

	)

675 
	#OBJ_pkcs7_ívñ›ed
 
OBJ_pkcs7
,3L

	)

677 
	#LN_pkcs7_sig√dAndEnvñ›ed
 "pkcs7-sig√dAndEnvñ›edD©a"

	)

678 
	#NID_pkcs7_sig√dAndEnvñ›ed
 24

	)

679 
	#OBJ_pkcs7_sig√dAndEnvñ›ed
 
OBJ_pkcs7
,4L

	)

681 
	#LN_pkcs7_dige°
 "pkcs7-dige°D©a"

	)

682 
	#NID_pkcs7_dige°
 25

	)

683 
	#OBJ_pkcs7_dige°
 
OBJ_pkcs7
,5L

	)

685 
	#LN_pkcs7_í¸y±ed
 "pkcs7-í¸y±edD©a"

	)

686 
	#NID_pkcs7_í¸y±ed
 26

	)

687 
	#OBJ_pkcs7_í¸y±ed
 
OBJ_pkcs7
,6L

	)

689 
	#SN_pkcs9
 "pkcs9"

	)

690 
	#NID_pkcs9
 47

	)

691 
	#OBJ_pkcs9
 
OBJ_pkcs
,9L

	)

693 
	#LN_pkcs9_emaûAddªss
 "emaûAddªss"

	)

694 
	#NID_pkcs9_emaûAddªss
 48

	)

695 
	#OBJ_pkcs9_emaûAddªss
 
OBJ_pkcs9
,1L

	)

697 
	#LN_pkcs9_un°ru˘uªdName
 "un°ru˘uªdName"

	)

698 
	#NID_pkcs9_un°ru˘uªdName
 49

	)

699 
	#OBJ_pkcs9_un°ru˘uªdName
 
OBJ_pkcs9
,2L

	)

701 
	#LN_pkcs9_c⁄ã¡Ty≥
 "c⁄ã¡Ty≥"

	)

702 
	#NID_pkcs9_c⁄ã¡Ty≥
 50

	)

703 
	#OBJ_pkcs9_c⁄ã¡Ty≥
 
OBJ_pkcs9
,3L

	)

705 
	#LN_pkcs9_mesßgeDige°
 "mesßgeDige°"

	)

706 
	#NID_pkcs9_mesßgeDige°
 51

	)

707 
	#OBJ_pkcs9_mesßgeDige°
 
OBJ_pkcs9
,4L

	)

709 
	#LN_pkcs9_signögTime
 "signögTime"

	)

710 
	#NID_pkcs9_signögTime
 52

	)

711 
	#OBJ_pkcs9_signögTime
 
OBJ_pkcs9
,5L

	)

713 
	#LN_pkcs9_cou¡îsig«tuª
 "cou¡îsig«tuª"

	)

714 
	#NID_pkcs9_cou¡îsig«tuª
 53

	)

715 
	#OBJ_pkcs9_cou¡îsig«tuª
 
OBJ_pkcs9
,6L

	)

717 
	#LN_pkcs9_chÆÀngePassw‹d
 "chÆÀngePassw‹d"

	)

718 
	#NID_pkcs9_chÆÀngePassw‹d
 54

	)

719 
	#OBJ_pkcs9_chÆÀngePassw‹d
 
OBJ_pkcs9
,7L

	)

721 
	#LN_pkcs9_un°ru˘uªdAddªss
 "un°ru˘uªdAddªss"

	)

722 
	#NID_pkcs9_un°ru˘uªdAddªss
 55

	)

723 
	#OBJ_pkcs9_un°ru˘uªdAddªss
 
OBJ_pkcs9
,8L

	)

725 
	#LN_pkcs9_extCîtAâribuãs
 "exãndedCîtifiˇãAâribuãs"

	)

726 
	#NID_pkcs9_extCîtAâribuãs
 56

	)

727 
	#OBJ_pkcs9_extCîtAâribuãs
 
OBJ_pkcs9
,9L

	)

729 
	#SN_ext_ªq
 "extReq"

	)

730 
	#LN_ext_ªq
 "Exãnsi⁄ Reque°"

	)

731 
	#NID_ext_ªq
 172

	)

732 
	#OBJ_ext_ªq
 
OBJ_pkcs9
,14L

	)

734 
	#SN_SMIMEC≠abûôõs
 "SMIME-CAPS"

	)

735 
	#LN_SMIMEC≠abûôõs
 "S/MIME C≠abûôõs"

	)

736 
	#NID_SMIMEC≠abûôõs
 167

	)

737 
	#OBJ_SMIMEC≠abûôõs
 
OBJ_pkcs9
,15L

	)

739 
	#SN_SMIME
 "SMIME"

	)

740 
	#LN_SMIME
 "S/MIME"

	)

741 
	#NID_SMIME
 188

	)

742 
	#OBJ_SMIME
 
OBJ_pkcs9
,16L

	)

744 
	#SN_id_smime_mod
 "id-smime-mod"

	)

745 
	#NID_id_smime_mod
 189

	)

746 
	#OBJ_id_smime_mod
 
OBJ_SMIME
,0L

	)

748 
	#SN_id_smime_˘
 "id-smime-˘"

	)

749 
	#NID_id_smime_˘
 190

	)

750 
	#OBJ_id_smime_˘
 
OBJ_SMIME
,1L

	)

752 
	#SN_id_smime_Ø
 "id-smime-Ø"

	)

753 
	#NID_id_smime_Ø
 191

	)

754 
	#OBJ_id_smime_Ø
 
OBJ_SMIME
,2L

	)

756 
	#SN_id_smime_Æg
 "id-smime-Æg"

	)

757 
	#NID_id_smime_Æg
 192

	)

758 
	#OBJ_id_smime_Æg
 
OBJ_SMIME
,3L

	)

760 
	#SN_id_smime_cd
 "id-smime-cd"

	)

761 
	#NID_id_smime_cd
 193

	)

762 
	#OBJ_id_smime_cd
 
OBJ_SMIME
,4L

	)

764 
	#SN_id_smime_•q
 "id-smime-•q"

	)

765 
	#NID_id_smime_•q
 194

	)

766 
	#OBJ_id_smime_•q
 
OBJ_SMIME
,5L

	)

768 
	#SN_id_smime_˘i
 "id-smime-˘i"

	)

769 
	#NID_id_smime_˘i
 195

	)

770 
	#OBJ_id_smime_˘i
 
OBJ_SMIME
,6L

	)

772 
	#SN_id_smime_mod_cms
 "id-smime-mod-cms"

	)

773 
	#NID_id_smime_mod_cms
 196

	)

774 
	#OBJ_id_smime_mod_cms
 
OBJ_id_smime_mod
,1L

	)

776 
	#SN_id_smime_mod_ess
 "id-smime-mod-ess"

	)

777 
	#NID_id_smime_mod_ess
 197

	)

778 
	#OBJ_id_smime_mod_ess
 
OBJ_id_smime_mod
,2L

	)

780 
	#SN_id_smime_mod_oid
 "id-smime-mod-oid"

	)

781 
	#NID_id_smime_mod_oid
 198

	)

782 
	#OBJ_id_smime_mod_oid
 
OBJ_id_smime_mod
,3L

	)

784 
	#SN_id_smime_mod_msg_v3
 "id-smime-mod-msg-v3"

	)

785 
	#NID_id_smime_mod_msg_v3
 199

	)

786 
	#OBJ_id_smime_mod_msg_v3
 
OBJ_id_smime_mod
,4L

	)

788 
	#SN_id_smime_mod_ës_eSig«tuª_88
 "id-smime-mod-ës-eSig«tuª-88"

	)

789 
	#NID_id_smime_mod_ës_eSig«tuª_88
 200

	)

790 
	#OBJ_id_smime_mod_ës_eSig«tuª_88
 
OBJ_id_smime_mod
,5L

	)

792 
	#SN_id_smime_mod_ës_eSig«tuª_97
 "id-smime-mod-ës-eSig«tuª-97"

	)

793 
	#NID_id_smime_mod_ës_eSig«tuª_97
 201

	)

794 
	#OBJ_id_smime_mod_ës_eSig«tuª_97
 
OBJ_id_smime_mod
,6L

	)

796 
	#SN_id_smime_mod_ës_eSigPﬁicy_88
 "id-smime-mod-ës-eSigPﬁicy-88"

	)

797 
	#NID_id_smime_mod_ës_eSigPﬁicy_88
 202

	)

798 
	#OBJ_id_smime_mod_ës_eSigPﬁicy_88
 
OBJ_id_smime_mod
,7L

	)

800 
	#SN_id_smime_mod_ës_eSigPﬁicy_97
 "id-smime-mod-ës-eSigPﬁicy-97"

	)

801 
	#NID_id_smime_mod_ës_eSigPﬁicy_97
 203

	)

802 
	#OBJ_id_smime_mod_ës_eSigPﬁicy_97
 
OBJ_id_smime_mod
,8L

	)

804 
	#SN_id_smime_˘_ª˚ùt
 "id-smime-˘-ª˚ùt"

	)

805 
	#NID_id_smime_˘_ª˚ùt
 204

	)

806 
	#OBJ_id_smime_˘_ª˚ùt
 
OBJ_id_smime_˘
,1L

	)

808 
	#SN_id_smime_˘_authD©a
 "id-smime-˘-authD©a"

	)

809 
	#NID_id_smime_˘_authD©a
 205

	)

810 
	#OBJ_id_smime_˘_authD©a
 
OBJ_id_smime_˘
,2L

	)

812 
	#SN_id_smime_˘_publishCît
 "id-smime-˘-publishCît"

	)

813 
	#NID_id_smime_˘_publishCît
 206

	)

814 
	#OBJ_id_smime_˘_publishCît
 
OBJ_id_smime_˘
,3L

	)

816 
	#SN_id_smime_˘_TSTInfo
 "id-smime-˘-TSTInfo"

	)

817 
	#NID_id_smime_˘_TSTInfo
 207

	)

818 
	#OBJ_id_smime_˘_TSTInfo
 
OBJ_id_smime_˘
,4L

	)

820 
	#SN_id_smime_˘_TDTInfo
 "id-smime-˘-TDTInfo"

	)

821 
	#NID_id_smime_˘_TDTInfo
 208

	)

822 
	#OBJ_id_smime_˘_TDTInfo
 
OBJ_id_smime_˘
,5L

	)

824 
	#SN_id_smime_˘_c⁄ã¡Info
 "id-smime-˘-c⁄ã¡Info"

	)

825 
	#NID_id_smime_˘_c⁄ã¡Info
 209

	)

826 
	#OBJ_id_smime_˘_c⁄ã¡Info
 
OBJ_id_smime_˘
,6L

	)

828 
	#SN_id_smime_˘_DVCSReque°D©a
 "id-smime-˘-DVCSReque°D©a"

	)

829 
	#NID_id_smime_˘_DVCSReque°D©a
 210

	)

830 
	#OBJ_id_smime_˘_DVCSReque°D©a
 
OBJ_id_smime_˘
,7L

	)

832 
	#SN_id_smime_˘_DVCSRe•⁄£D©a
 "id-smime-˘-DVCSRe•⁄£D©a"

	)

833 
	#NID_id_smime_˘_DVCSRe•⁄£D©a
 211

	)

834 
	#OBJ_id_smime_˘_DVCSRe•⁄£D©a
 
OBJ_id_smime_˘
,8L

	)

836 
	#SN_id_smime_˘_com¥es£dD©a
 "id-smime-˘-com¥es£dD©a"

	)

837 
	#NID_id_smime_˘_com¥es£dD©a
 786

	)

838 
	#OBJ_id_smime_˘_com¥es£dD©a
 
OBJ_id_smime_˘
,9L

	)

840 
	#SN_id_smime_˘_c⁄ã¡CﬁÀ˘i⁄
 "id-smime-˘-c⁄ã¡CﬁÀ˘i⁄"

	)

841 
	#NID_id_smime_˘_c⁄ã¡CﬁÀ˘i⁄
 1058

	)

842 
	#OBJ_id_smime_˘_c⁄ã¡CﬁÀ˘i⁄
 
OBJ_id_smime_˘
,19L

	)

844 
	#SN_id_smime_˘_authEnvñ›edD©a
 "id-smime-˘-authEnvñ›edD©a"

	)

845 
	#NID_id_smime_˘_authEnvñ›edD©a
 1059

	)

846 
	#OBJ_id_smime_˘_authEnvñ›edD©a
 
OBJ_id_smime_˘
,23L

	)

848 
	#SN_id_˘_asciiTextWôhCRLF
 "id-˘-asciiTextWôhCRLF"

	)

849 
	#NID_id_˘_asciiTextWôhCRLF
 787

	)

850 
	#OBJ_id_˘_asciiTextWôhCRLF
 
OBJ_id_smime_˘
,27L

	)

852 
	#SN_id_˘_xml
 "id-˘-xml"

	)

853 
	#NID_id_˘_xml
 1060

	)

854 
	#OBJ_id_˘_xml
 
OBJ_id_smime_˘
,28L

	)

856 
	#SN_id_smime_Ø_ª˚ùtReque°
 "id-smime-Ø-ª˚ùtReque°"

	)

857 
	#NID_id_smime_Ø_ª˚ùtReque°
 212

	)

858 
	#OBJ_id_smime_Ø_ª˚ùtReque°
 
OBJ_id_smime_Ø
,1L

	)

860 
	#SN_id_smime_Ø_£curôyLabñ
 "id-smime-Ø-£curôyLabñ"

	)

861 
	#NID_id_smime_Ø_£curôyLabñ
 213

	)

862 
	#OBJ_id_smime_Ø_£curôyLabñ
 
OBJ_id_smime_Ø
,2L

	)

864 
	#SN_id_smime_Ø_mlEx∑ndHi°‹y
 "id-smime-Ø-mlEx∑ndHi°‹y"

	)

865 
	#NID_id_smime_Ø_mlEx∑ndHi°‹y
 214

	)

866 
	#OBJ_id_smime_Ø_mlEx∑ndHi°‹y
 
OBJ_id_smime_Ø
,3L

	)

868 
	#SN_id_smime_Ø_c⁄ã¡Höt
 "id-smime-Ø-c⁄ã¡Höt"

	)

869 
	#NID_id_smime_Ø_c⁄ã¡Höt
 215

	)

870 
	#OBJ_id_smime_Ø_c⁄ã¡Höt
 
OBJ_id_smime_Ø
,4L

	)

872 
	#SN_id_smime_Ø_msgSigDige°
 "id-smime-Ø-msgSigDige°"

	)

873 
	#NID_id_smime_Ø_msgSigDige°
 216

	)

874 
	#OBJ_id_smime_Ø_msgSigDige°
 
OBJ_id_smime_Ø
,5L

	)

876 
	#SN_id_smime_Ø_íˇpC⁄ã¡Ty≥
 "id-smime-Ø-íˇpC⁄ã¡Ty≥"

	)

877 
	#NID_id_smime_Ø_íˇpC⁄ã¡Ty≥
 217

	)

878 
	#OBJ_id_smime_Ø_íˇpC⁄ã¡Ty≥
 
OBJ_id_smime_Ø
,6L

	)

880 
	#SN_id_smime_Ø_c⁄ã¡Idítifõr
 "id-smime-Ø-c⁄ã¡Idítifõr"

	)

881 
	#NID_id_smime_Ø_c⁄ã¡Idítifõr
 218

	)

882 
	#OBJ_id_smime_Ø_c⁄ã¡Idítifõr
 
OBJ_id_smime_Ø
,7L

	)

884 
	#SN_id_smime_Ø_macVÆue
 "id-smime-Ø-macVÆue"

	)

885 
	#NID_id_smime_Ø_macVÆue
 219

	)

886 
	#OBJ_id_smime_Ø_macVÆue
 
OBJ_id_smime_Ø
,8L

	)

888 
	#SN_id_smime_Ø_equivÆítLabñs
 "id-smime-Ø-equivÆítLabñs"

	)

889 
	#NID_id_smime_Ø_equivÆítLabñs
 220

	)

890 
	#OBJ_id_smime_Ø_equivÆítLabñs
 
OBJ_id_smime_Ø
,9L

	)

892 
	#SN_id_smime_Ø_c⁄ã¡Re„ªn˚
 "id-smime-Ø-c⁄ã¡Re„ªn˚"

	)

893 
	#NID_id_smime_Ø_c⁄ã¡Re„ªn˚
 221

	)

894 
	#OBJ_id_smime_Ø_c⁄ã¡Re„ªn˚
 
OBJ_id_smime_Ø
,10L

	)

896 
	#SN_id_smime_Ø_í¸ypKeyPªf
 "id-smime-Ø-í¸ypKeyPªf"

	)

897 
	#NID_id_smime_Ø_í¸ypKeyPªf
 222

	)

898 
	#OBJ_id_smime_Ø_í¸ypKeyPªf
 
OBJ_id_smime_Ø
,11L

	)

900 
	#SN_id_smime_Ø_signögCîtifiˇã
 "id-smime-Ø-signögCîtifiˇã"

	)

901 
	#NID_id_smime_Ø_signögCîtifiˇã
 223

	)

902 
	#OBJ_id_smime_Ø_signögCîtifiˇã
 
OBJ_id_smime_Ø
,12L

	)

904 
	#SN_id_smime_Ø_smimeEn¸y±Cîts
 "id-smime-Ø-smimeEn¸y±Cîts"

	)

905 
	#NID_id_smime_Ø_smimeEn¸y±Cîts
 224

	)

906 
	#OBJ_id_smime_Ø_smimeEn¸y±Cîts
 
OBJ_id_smime_Ø
,13L

	)

908 
	#SN_id_smime_Ø_timeSèmpTokí
 "id-smime-Ø-timeSèmpTokí"

	)

909 
	#NID_id_smime_Ø_timeSèmpTokí
 225

	)

910 
	#OBJ_id_smime_Ø_timeSèmpTokí
 
OBJ_id_smime_Ø
,14L

	)

912 
	#SN_id_smime_Ø_ës_sigPﬁicyId
 "id-smime-Ø-ës-sigPﬁicyId"

	)

913 
	#NID_id_smime_Ø_ës_sigPﬁicyId
 226

	)

914 
	#OBJ_id_smime_Ø_ës_sigPﬁicyId
 
OBJ_id_smime_Ø
,15L

	)

916 
	#SN_id_smime_Ø_ës_commômítTy≥
 "id-smime-Ø-ës-commômítTy≥"

	)

917 
	#NID_id_smime_Ø_ës_commômítTy≥
 227

	)

918 
	#OBJ_id_smime_Ø_ës_commômítTy≥
 
OBJ_id_smime_Ø
,16L

	)

920 
	#SN_id_smime_Ø_ës_sig√rLoˇti⁄
 "id-smime-Ø-ës-sig√rLoˇti⁄"

	)

921 
	#NID_id_smime_Ø_ës_sig√rLoˇti⁄
 228

	)

922 
	#OBJ_id_smime_Ø_ës_sig√rLoˇti⁄
 
OBJ_id_smime_Ø
,17L

	)

924 
	#SN_id_smime_Ø_ës_sig√rAâr
 "id-smime-Ø-ës-sig√rAâr"

	)

925 
	#NID_id_smime_Ø_ës_sig√rAâr
 229

	)

926 
	#OBJ_id_smime_Ø_ës_sig√rAâr
 
OBJ_id_smime_Ø
,18L

	)

928 
	#SN_id_smime_Ø_ës_ŸhîSigCît
 "id-smime-Ø-ës-ŸhîSigCît"

	)

929 
	#NID_id_smime_Ø_ës_ŸhîSigCît
 230

	)

930 
	#OBJ_id_smime_Ø_ës_ŸhîSigCît
 
OBJ_id_smime_Ø
,19L

	)

932 
	#SN_id_smime_Ø_ës_c⁄ã¡Time°amp
 "id-smime-Ø-ës-c⁄ã¡Time°amp"

	)

933 
	#NID_id_smime_Ø_ës_c⁄ã¡Time°amp
 231

	)

934 
	#OBJ_id_smime_Ø_ës_c⁄ã¡Time°amp
 
OBJ_id_smime_Ø
,20L

	)

936 
	#SN_id_smime_Ø_ës_CîtifiˇãRefs
 "id-smime-Ø-ës-CîtifiˇãRefs"

	)

937 
	#NID_id_smime_Ø_ës_CîtifiˇãRefs
 232

	)

938 
	#OBJ_id_smime_Ø_ës_CîtifiˇãRefs
 
OBJ_id_smime_Ø
,21L

	)

940 
	#SN_id_smime_Ø_ës_Revoˇti⁄Refs
 "id-smime-Ø-ës-Revoˇti⁄Refs"

	)

941 
	#NID_id_smime_Ø_ës_Revoˇti⁄Refs
 233

	)

942 
	#OBJ_id_smime_Ø_ës_Revoˇti⁄Refs
 
OBJ_id_smime_Ø
,22L

	)

944 
	#SN_id_smime_Ø_ës_˚πVÆues
 "id-smime-Ø-ës-˚πVÆues"

	)

945 
	#NID_id_smime_Ø_ës_˚πVÆues
 234

	)

946 
	#OBJ_id_smime_Ø_ës_˚πVÆues
 
OBJ_id_smime_Ø
,23L

	)

948 
	#SN_id_smime_Ø_ës_ªvoˇti⁄VÆues
 "id-smime-Ø-ës-ªvoˇti⁄VÆues"

	)

949 
	#NID_id_smime_Ø_ës_ªvoˇti⁄VÆues
 235

	)

950 
	#OBJ_id_smime_Ø_ës_ªvoˇti⁄VÆues
 
OBJ_id_smime_Ø
,24L

	)

952 
	#SN_id_smime_Ø_ës_escTimeSèmp
 "id-smime-Ø-ës-escTimeSèmp"

	)

953 
	#NID_id_smime_Ø_ës_escTimeSèmp
 236

	)

954 
	#OBJ_id_smime_Ø_ës_escTimeSèmp
 
OBJ_id_smime_Ø
,25L

	)

956 
	#SN_id_smime_Ø_ës_˚πCRLTime°amp
 "id-smime-Ø-ës-˚πCRLTime°amp"

	)

957 
	#NID_id_smime_Ø_ës_˚πCRLTime°amp
 237

	)

958 
	#OBJ_id_smime_Ø_ës_˚πCRLTime°amp
 
OBJ_id_smime_Ø
,26L

	)

960 
	#SN_id_smime_Ø_ës_¨chiveTimeSèmp
 "id-smime-Ø-ës-¨chiveTimeSèmp"

	)

961 
	#NID_id_smime_Ø_ës_¨chiveTimeSèmp
 238

	)

962 
	#OBJ_id_smime_Ø_ës_¨chiveTimeSèmp
 
OBJ_id_smime_Ø
,27L

	)

964 
	#SN_id_smime_Ø_sig«tuªTy≥
 "id-smime-Ø-sig«tuªTy≥"

	)

965 
	#NID_id_smime_Ø_sig«tuªTy≥
 239

	)

966 
	#OBJ_id_smime_Ø_sig«tuªTy≥
 
OBJ_id_smime_Ø
,28L

	)

968 
	#SN_id_smime_Ø_dvcs_dvc
 "id-smime-Ø-dvcs-dvc"

	)

969 
	#NID_id_smime_Ø_dvcs_dvc
 240

	)

970 
	#OBJ_id_smime_Ø_dvcs_dvc
 
OBJ_id_smime_Ø
,29L

	)

972 
	#SN_id_smime_Ø_signögCîtifiˇãV2
 "id-smime-Ø-signögCîtifiˇãV2"

	)

973 
	#NID_id_smime_Ø_signögCîtifiˇãV2
 1086

	)

974 
	#OBJ_id_smime_Ø_signögCîtifiˇãV2
 
OBJ_id_smime_Ø
,47L

	)

976 
	#SN_id_smime_Æg_ESDHwôh3DES
 "id-smime-Æg-ESDHwôh3DES"

	)

977 
	#NID_id_smime_Æg_ESDHwôh3DES
 241

	)

978 
	#OBJ_id_smime_Æg_ESDHwôh3DES
 
OBJ_id_smime_Æg
,1L

	)

980 
	#SN_id_smime_Æg_ESDHwôhRC2
 "id-smime-Æg-ESDHwôhRC2"

	)

981 
	#NID_id_smime_Æg_ESDHwôhRC2
 242

	)

982 
	#OBJ_id_smime_Æg_ESDHwôhRC2
 
OBJ_id_smime_Æg
,2L

	)

984 
	#SN_id_smime_Æg_3DESwøp
 "id-smime-Æg-3DESwøp"

	)

985 
	#NID_id_smime_Æg_3DESwøp
 243

	)

986 
	#OBJ_id_smime_Æg_3DESwøp
 
OBJ_id_smime_Æg
,3L

	)

988 
	#SN_id_smime_Æg_RC2wøp
 "id-smime-Æg-RC2wøp"

	)

989 
	#NID_id_smime_Æg_RC2wøp
 244

	)

990 
	#OBJ_id_smime_Æg_RC2wøp
 
OBJ_id_smime_Æg
,4L

	)

992 
	#SN_id_smime_Æg_ESDH
 "id-smime-Æg-ESDH"

	)

993 
	#NID_id_smime_Æg_ESDH
 245

	)

994 
	#OBJ_id_smime_Æg_ESDH
 
OBJ_id_smime_Æg
,5L

	)

996 
	#SN_id_smime_Æg_CMS3DESwøp
 "id-smime-Æg-CMS3DESwøp"

	)

997 
	#NID_id_smime_Æg_CMS3DESwøp
 246

	)

998 
	#OBJ_id_smime_Æg_CMS3DESwøp
 
OBJ_id_smime_Æg
,6L

	)

1000 
	#SN_id_smime_Æg_CMSRC2wøp
 "id-smime-Æg-CMSRC2wøp"

	)

1001 
	#NID_id_smime_Æg_CMSRC2wøp
 247

	)

1002 
	#OBJ_id_smime_Æg_CMSRC2wøp
 
OBJ_id_smime_Æg
,7L

	)

1004 
	#SN_id_Æg_PWRI_KEK
 "id-Æg-PWRI-KEK"

	)

1005 
	#NID_id_Æg_PWRI_KEK
 893

	)

1006 
	#OBJ_id_Æg_PWRI_KEK
 
OBJ_id_smime_Æg
,9L

	)

1008 
	#SN_id_smime_cd_ld≠
 "id-smime-cd-ld≠"

	)

1009 
	#NID_id_smime_cd_ld≠
 248

	)

1010 
	#OBJ_id_smime_cd_ld≠
 
OBJ_id_smime_cd
,1L

	)

1012 
	#SN_id_smime_•q_ës_sqt_uri
 "id-smime-•q-ës-sqt-uri"

	)

1013 
	#NID_id_smime_•q_ës_sqt_uri
 249

	)

1014 
	#OBJ_id_smime_•q_ës_sqt_uri
 
OBJ_id_smime_•q
,1L

	)

1016 
	#SN_id_smime_•q_ës_sqt_unŸi˚
 "id-smime-•q-ës-sqt-unŸi˚"

	)

1017 
	#NID_id_smime_•q_ës_sqt_unŸi˚
 250

	)

1018 
	#OBJ_id_smime_•q_ës_sqt_unŸi˚
 
OBJ_id_smime_•q
,2L

	)

1020 
	#SN_id_smime_˘i_ës_¥oofOfOrigö
 "id-smime-˘i-ës-¥oofOfOrigö"

	)

1021 
	#NID_id_smime_˘i_ës_¥oofOfOrigö
 251

	)

1022 
	#OBJ_id_smime_˘i_ës_¥oofOfOrigö
 
OBJ_id_smime_˘i
,1L

	)

1024 
	#SN_id_smime_˘i_ës_¥oofOfRe˚ùt
 "id-smime-˘i-ës-¥oofOfRe˚ùt"

	)

1025 
	#NID_id_smime_˘i_ës_¥oofOfRe˚ùt
 252

	)

1026 
	#OBJ_id_smime_˘i_ës_¥oofOfRe˚ùt
 
OBJ_id_smime_˘i
,2L

	)

1028 
	#SN_id_smime_˘i_ës_¥oofOfDñivîy
 "id-smime-˘i-ës-¥oofOfDñivîy"

	)

1029 
	#NID_id_smime_˘i_ës_¥oofOfDñivîy
 253

	)

1030 
	#OBJ_id_smime_˘i_ës_¥oofOfDñivîy
 
OBJ_id_smime_˘i
,3L

	)

1032 
	#SN_id_smime_˘i_ës_¥oofOfSídî
 "id-smime-˘i-ës-¥oofOfSídî"

	)

1033 
	#NID_id_smime_˘i_ës_¥oofOfSídî
 254

	)

1034 
	#OBJ_id_smime_˘i_ës_¥oofOfSídî
 
OBJ_id_smime_˘i
,4L

	)

1036 
	#SN_id_smime_˘i_ës_¥oofOfAµrovÆ
 "id-smime-˘i-ës-¥oofOfAµrovÆ"

	)

1037 
	#NID_id_smime_˘i_ës_¥oofOfAµrovÆ
 255

	)

1038 
	#OBJ_id_smime_˘i_ës_¥oofOfAµrovÆ
 
OBJ_id_smime_˘i
,5L

	)

1040 
	#SN_id_smime_˘i_ës_¥oofOfCª©i⁄
 "id-smime-˘i-ës-¥oofOfCª©i⁄"

	)

1041 
	#NID_id_smime_˘i_ës_¥oofOfCª©i⁄
 256

	)

1042 
	#OBJ_id_smime_˘i_ës_¥oofOfCª©i⁄
 
OBJ_id_smime_˘i
,6L

	)

1044 
	#LN_‰õndlyName
 "‰õndlyName"

	)

1045 
	#NID_‰õndlyName
 156

	)

1046 
	#OBJ_‰õndlyName
 
OBJ_pkcs9
,20L

	)

1048 
	#LN_loˇlKeyID
 "loˇlKeyID"

	)

1049 
	#NID_loˇlKeyID
 157

	)

1050 
	#OBJ_loˇlKeyID
 
OBJ_pkcs9
,21L

	)

1052 
	#SN_ms_c•_«me
 "CSPName"

	)

1053 
	#LN_ms_c•_«me
 "Mi¸oso· CSP Name"

	)

1054 
	#NID_ms_c•_«me
 417

	)

1055 
	#OBJ_ms_c•_«me
 1L,3L,6L,1L,4L,1L,311L,17L,1L

	)

1057 
	#SN_LoˇlKeySë
 "LoˇlKeySë"

	)

1058 
	#LN_LoˇlKeySë
 "Mi¸oso· Loˇ»Key së"

	)

1059 
	#NID_LoˇlKeySë
 856

	)

1060 
	#OBJ_LoˇlKeySë
 1L,3L,6L,1L,4L,1L,311L,17L,2L

	)

1062 
	#OBJ_˚πTy≥s
 
OBJ_pkcs9
,22L

	)

1064 
	#LN_x509Cîtifiˇã
 "x509Cîtifiˇã"

	)

1065 
	#NID_x509Cîtifiˇã
 158

	)

1066 
	#OBJ_x509Cîtifiˇã
 
OBJ_˚πTy≥s
,1L

	)

1068 
	#LN_sdsiCîtifiˇã
 "sdsiCîtifiˇã"

	)

1069 
	#NID_sdsiCîtifiˇã
 159

	)

1070 
	#OBJ_sdsiCîtifiˇã
 
OBJ_˚πTy≥s
,2L

	)

1072 
	#OBJ_¸lTy≥s
 
OBJ_pkcs9
,23L

	)

1074 
	#LN_x509Cæ
 "x509Cæ"

	)

1075 
	#NID_x509Cæ
 160

	)

1076 
	#OBJ_x509Cæ
 
OBJ_¸lTy≥s
,1L

	)

1078 
	#OBJ_pkcs12
 
OBJ_pkcs
,12L

	)

1080 
	#OBJ_pkcs12_pbeids
 
OBJ_pkcs12
,1L

	)

1082 
	#SN_pbe_WôhSHA1And128BôRC4
 "PBE-SHA1-RC4-128"

	)

1083 
	#LN_pbe_WôhSHA1And128BôRC4
 "pbeWôhSHA1And128BôRC4"

	)

1084 
	#NID_pbe_WôhSHA1And128BôRC4
 144

	)

1085 
	#OBJ_pbe_WôhSHA1And128BôRC4
 
OBJ_pkcs12_pbeids
,1L

	)

1087 
	#SN_pbe_WôhSHA1And40BôRC4
 "PBE-SHA1-RC4-40"

	)

1088 
	#LN_pbe_WôhSHA1And40BôRC4
 "pbeWôhSHA1And40BôRC4"

	)

1089 
	#NID_pbe_WôhSHA1And40BôRC4
 145

	)

1090 
	#OBJ_pbe_WôhSHA1And40BôRC4
 
OBJ_pkcs12_pbeids
,2L

	)

1092 
	#SN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "PBE-SHA1-3DES"

	)

1093 
	#LN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "pbeWôhSHA1And3-KeyTrùÀDES-CBC"

	)

1094 
	#NID_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 146

	)

1095 
	#OBJ_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
,3L

	)

1097 
	#SN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "PBE-SHA1-2DES"

	)

1098 
	#LN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "pbeWôhSHA1And2-KeyTrùÀDES-CBC"

	)

1099 
	#NID_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 147

	)

1100 
	#OBJ_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
,4L

	)

1102 
	#SN_pbe_WôhSHA1And128BôRC2_CBC
 "PBE-SHA1-RC2-128"

	)

1103 
	#LN_pbe_WôhSHA1And128BôRC2_CBC
 "pbeWôhSHA1And128BôRC2-CBC"

	)

1104 
	#NID_pbe_WôhSHA1And128BôRC2_CBC
 148

	)

1105 
	#OBJ_pbe_WôhSHA1And128BôRC2_CBC
 
OBJ_pkcs12_pbeids
,5L

	)

1107 
	#SN_pbe_WôhSHA1And40BôRC2_CBC
 "PBE-SHA1-RC2-40"

	)

1108 
	#LN_pbe_WôhSHA1And40BôRC2_CBC
 "pbeWôhSHA1And40BôRC2-CBC"

	)

1109 
	#NID_pbe_WôhSHA1And40BôRC2_CBC
 149

	)

1110 
	#OBJ_pbe_WôhSHA1And40BôRC2_CBC
 
OBJ_pkcs12_pbeids
,6L

	)

1112 
	#OBJ_pkcs12_Vîsi⁄1
 
OBJ_pkcs12
,10L

	)

1114 
	#OBJ_pkcs12_BagIds
 
OBJ_pkcs12_Vîsi⁄1
,1L

	)

1116 
	#LN_keyBag
 "keyBag"

	)

1117 
	#NID_keyBag
 150

	)

1118 
	#OBJ_keyBag
 
OBJ_pkcs12_BagIds
,1L

	)

1120 
	#LN_pkcs8ShroudedKeyBag
 "pkcs8ShroudedKeyBag"

	)

1121 
	#NID_pkcs8ShroudedKeyBag
 151

	)

1122 
	#OBJ_pkcs8ShroudedKeyBag
 
OBJ_pkcs12_BagIds
,2L

	)

1124 
	#LN_˚πBag
 "˚πBag"

	)

1125 
	#NID_˚πBag
 152

	)

1126 
	#OBJ_˚πBag
 
OBJ_pkcs12_BagIds
,3L

	)

1128 
	#LN_¸lBag
 "¸lBag"

	)

1129 
	#NID_¸lBag
 153

	)

1130 
	#OBJ_¸lBag
 
OBJ_pkcs12_BagIds
,4L

	)

1132 
	#LN_£¸ëBag
 "£¸ëBag"

	)

1133 
	#NID_£¸ëBag
 154

	)

1134 
	#OBJ_£¸ëBag
 
OBJ_pkcs12_BagIds
,5L

	)

1136 
	#LN_ß„C⁄ã¡sBag
 "ß„C⁄ã¡sBag"

	)

1137 
	#NID_ß„C⁄ã¡sBag
 155

	)

1138 
	#OBJ_ß„C⁄ã¡sBag
 
OBJ_pkcs12_BagIds
,6L

	)

1140 
	#SN_md2
 "MD2"

	)

1141 
	#LN_md2
 "md2"

	)

1142 
	#NID_md2
 3

	)

1143 
	#OBJ_md2
 
OBJ_rßdsi
,2L,2L

	)

1145 
	#SN_md4
 "MD4"

	)

1146 
	#LN_md4
 "md4"

	)

1147 
	#NID_md4
 257

	)

1148 
	#OBJ_md4
 
OBJ_rßdsi
,2L,4L

	)

1150 
	#SN_md5
 "MD5"

	)

1151 
	#LN_md5
 "md5"

	)

1152 
	#NID_md5
 4

	)

1153 
	#OBJ_md5
 
OBJ_rßdsi
,2L,5L

	)

1155 
	#SN_md5_sha1
 "MD5-SHA1"

	)

1156 
	#LN_md5_sha1
 "md5-sha1"

	)

1157 
	#NID_md5_sha1
 114

	)

1159 
	#LN_hmacWôhMD5
 "hmacWôhMD5"

	)

1160 
	#NID_hmacWôhMD5
 797

	)

1161 
	#OBJ_hmacWôhMD5
 
OBJ_rßdsi
,2L,6L

	)

1163 
	#LN_hmacWôhSHA1
 "hmacWôhSHA1"

	)

1164 
	#NID_hmacWôhSHA1
 163

	)

1165 
	#OBJ_hmacWôhSHA1
 
OBJ_rßdsi
,2L,7L

	)

1167 
	#SN_sm2
 "SM2"

	)

1168 
	#LN_sm2
 "sm2"

	)

1169 
	#NID_sm2
 1172

	)

1170 
	#OBJ_sm2
 
OBJ_sm_scheme
,301L

	)

1172 
	#SN_sm3
 "SM3"

	)

1173 
	#LN_sm3
 "sm3"

	)

1174 
	#NID_sm3
 1143

	)

1175 
	#OBJ_sm3
 
OBJ_sm_scheme
,401L

	)

1177 
	#SN_sm3WôhRSAEn¸y±i⁄
 "RSA-SM3"

	)

1178 
	#LN_sm3WôhRSAEn¸y±i⁄
 "sm3WôhRSAEn¸y±i⁄"

	)

1179 
	#NID_sm3WôhRSAEn¸y±i⁄
 1144

	)

1180 
	#OBJ_sm3WôhRSAEn¸y±i⁄
 
OBJ_sm_scheme
,504L

	)

1182 
	#LN_hmacWôhSHA224
 "hmacWôhSHA224"

	)

1183 
	#NID_hmacWôhSHA224
 798

	)

1184 
	#OBJ_hmacWôhSHA224
 
OBJ_rßdsi
,2L,8L

	)

1186 
	#LN_hmacWôhSHA256
 "hmacWôhSHA256"

	)

1187 
	#NID_hmacWôhSHA256
 799

	)

1188 
	#OBJ_hmacWôhSHA256
 
OBJ_rßdsi
,2L,9L

	)

1190 
	#LN_hmacWôhSHA384
 "hmacWôhSHA384"

	)

1191 
	#NID_hmacWôhSHA384
 800

	)

1192 
	#OBJ_hmacWôhSHA384
 
OBJ_rßdsi
,2L,10L

	)

1194 
	#LN_hmacWôhSHA512
 "hmacWôhSHA512"

	)

1195 
	#NID_hmacWôhSHA512
 801

	)

1196 
	#OBJ_hmacWôhSHA512
 
OBJ_rßdsi
,2L,11L

	)

1198 
	#LN_hmacWôhSHA512_224
 "hmacWôhSHA512-224"

	)

1199 
	#NID_hmacWôhSHA512_224
 1193

	)

1200 
	#OBJ_hmacWôhSHA512_224
 
OBJ_rßdsi
,2L,12L

	)

1202 
	#LN_hmacWôhSHA512_256
 "hmacWôhSHA512-256"

	)

1203 
	#NID_hmacWôhSHA512_256
 1194

	)

1204 
	#OBJ_hmacWôhSHA512_256
 
OBJ_rßdsi
,2L,13L

	)

1206 
	#SN_rc2_cbc
 "RC2-CBC"

	)

1207 
	#LN_rc2_cbc
 "rc2-cbc"

	)

1208 
	#NID_rc2_cbc
 37

	)

1209 
	#OBJ_rc2_cbc
 
OBJ_rßdsi
,3L,2L

	)

1211 
	#SN_rc2_ecb
 "RC2-ECB"

	)

1212 
	#LN_rc2_ecb
 "rc2-ecb"

	)

1213 
	#NID_rc2_ecb
 38

	)

1215 
	#SN_rc2_cfb64
 "RC2-CFB"

	)

1216 
	#LN_rc2_cfb64
 "rc2-cfb"

	)

1217 
	#NID_rc2_cfb64
 39

	)

1219 
	#SN_rc2_ofb64
 "RC2-OFB"

	)

1220 
	#LN_rc2_ofb64
 "rc2-ofb"

	)

1221 
	#NID_rc2_ofb64
 40

	)

1223 
	#SN_rc2_40_cbc
 "RC2-40-CBC"

	)

1224 
	#LN_rc2_40_cbc
 "rc2-40-cbc"

	)

1225 
	#NID_rc2_40_cbc
 98

	)

1227 
	#SN_rc2_64_cbc
 "RC2-64-CBC"

	)

1228 
	#LN_rc2_64_cbc
 "rc2-64-cbc"

	)

1229 
	#NID_rc2_64_cbc
 166

	)

1231 
	#SN_rc4
 "RC4"

	)

1232 
	#LN_rc4
 "rc4"

	)

1233 
	#NID_rc4
 5

	)

1234 
	#OBJ_rc4
 
OBJ_rßdsi
,3L,4L

	)

1236 
	#SN_rc4_40
 "RC4-40"

	)

1237 
	#LN_rc4_40
 "rc4-40"

	)

1238 
	#NID_rc4_40
 97

	)

1240 
	#SN_des_ede3_cbc
 "DES-EDE3-CBC"

	)

1241 
	#LN_des_ede3_cbc
 "des-ede3-cbc"

	)

1242 
	#NID_des_ede3_cbc
 44

	)

1243 
	#OBJ_des_ede3_cbc
 
OBJ_rßdsi
,3L,7L

	)

1245 
	#SN_rc5_cbc
 "RC5-CBC"

	)

1246 
	#LN_rc5_cbc
 "rc5-cbc"

	)

1247 
	#NID_rc5_cbc
 120

	)

1248 
	#OBJ_rc5_cbc
 
OBJ_rßdsi
,3L,8L

	)

1250 
	#SN_rc5_ecb
 "RC5-ECB"

	)

1251 
	#LN_rc5_ecb
 "rc5-ecb"

	)

1252 
	#NID_rc5_ecb
 121

	)

1254 
	#SN_rc5_cfb64
 "RC5-CFB"

	)

1255 
	#LN_rc5_cfb64
 "rc5-cfb"

	)

1256 
	#NID_rc5_cfb64
 122

	)

1258 
	#SN_rc5_ofb64
 "RC5-OFB"

	)

1259 
	#LN_rc5_ofb64
 "rc5-ofb"

	)

1260 
	#NID_rc5_ofb64
 123

	)

1262 
	#SN_ms_ext_ªq
 "msExtReq"

	)

1263 
	#LN_ms_ext_ªq
 "Mi¸oso· Exãnsi⁄ Reque°"

	)

1264 
	#NID_ms_ext_ªq
 171

	)

1265 
	#OBJ_ms_ext_ªq
 1L,3L,6L,1L,4L,1L,311L,2L,1L,14L

	)

1267 
	#SN_ms_code_öd
 "msCodeInd"

	)

1268 
	#LN_ms_code_öd
 "Mi¸oso· IndividuÆ CodêSignög"

	)

1269 
	#NID_ms_code_öd
 134

	)

1270 
	#OBJ_ms_code_öd
 1L,3L,6L,1L,4L,1L,311L,2L,1L,21L

	)

1272 
	#SN_ms_code_com
 "msCodeCom"

	)

1273 
	#LN_ms_code_com
 "Mi¸oso· Commîcü»CodêSignög"

	)

1274 
	#NID_ms_code_com
 135

	)

1275 
	#OBJ_ms_code_com
 1L,3L,6L,1L,4L,1L,311L,2L,1L,22L

	)

1277 
	#SN_ms_˘l_sign
 "msCTLSign"

	)

1278 
	#LN_ms_˘l_sign
 "Mi¸oso· Tru° Li° Signög"

	)

1279 
	#NID_ms_˘l_sign
 136

	)

1280 
	#OBJ_ms_˘l_sign
 1L,3L,6L,1L,4L,1L,311L,10L,3L,1L

	)

1282 
	#SN_ms_sgc
 "msSGC"

	)

1283 
	#LN_ms_sgc
 "Mi¸oso· Sîvî G©ed Cry±o"

	)

1284 
	#NID_ms_sgc
 137

	)

1285 
	#OBJ_ms_sgc
 1L,3L,6L,1L,4L,1L,311L,10L,3L,3L

	)

1287 
	#SN_ms_efs
 "msEFS"

	)

1288 
	#LN_ms_efs
 "Mi¸oso· En¸y±ed FûêSy°em"

	)

1289 
	#NID_ms_efs
 138

	)

1290 
	#OBJ_ms_efs
 1L,3L,6L,1L,4L,1L,311L,10L,3L,4L

	)

1292 
	#SN_ms_sm¨tˇrd_logö
 "msSm¨tˇrdLogö"

	)

1293 
	#LN_ms_sm¨tˇrd_logö
 "Mi¸oso· Sm¨tˇrd Logö"

	)

1294 
	#NID_ms_sm¨tˇrd_logö
 648

	)

1295 
	#OBJ_ms_sm¨tˇrd_logö
 1L,3L,6L,1L,4L,1L,311L,20L,2L,2L

	)

1297 
	#SN_ms_u≤
 "msUPN"

	)

1298 
	#LN_ms_u≤
 "Mi¸oso· U£∏PröcùÆ Name"

	)

1299 
	#NID_ms_u≤
 649

	)

1300 
	#OBJ_ms_u≤
 1L,3L,6L,1L,4L,1L,311L,20L,2L,3L

	)

1302 
	#SN_idó_cbc
 "IDEA-CBC"

	)

1303 
	#LN_idó_cbc
 "idó-cbc"

	)

1304 
	#NID_idó_cbc
 34

	)

1305 
	#OBJ_idó_cbc
 1L,3L,6L,1L,4L,1L,188L,7L,1L,1L,2L

	)

1307 
	#SN_idó_ecb
 "IDEA-ECB"

	)

1308 
	#LN_idó_ecb
 "idó-ecb"

	)

1309 
	#NID_idó_ecb
 36

	)

1311 
	#SN_idó_cfb64
 "IDEA-CFB"

	)

1312 
	#LN_idó_cfb64
 "idó-cfb"

	)

1313 
	#NID_idó_cfb64
 35

	)

1315 
	#SN_idó_ofb64
 "IDEA-OFB"

	)

1316 
	#LN_idó_ofb64
 "idó-ofb"

	)

1317 
	#NID_idó_ofb64
 46

	)

1319 
	#SN_bf_cbc
 "BF-CBC"

	)

1320 
	#LN_bf_cbc
 "bf-cbc"

	)

1321 
	#NID_bf_cbc
 91

	)

1322 
	#OBJ_bf_cbc
 1L,3L,6L,1L,4L,1L,3029L,1L,2L

	)

1324 
	#SN_bf_ecb
 "BF-ECB"

	)

1325 
	#LN_bf_ecb
 "bf-ecb"

	)

1326 
	#NID_bf_ecb
 92

	)

1328 
	#SN_bf_cfb64
 "BF-CFB"

	)

1329 
	#LN_bf_cfb64
 "bf-cfb"

	)

1330 
	#NID_bf_cfb64
 93

	)

1332 
	#SN_bf_ofb64
 "BF-OFB"

	)

1333 
	#LN_bf_ofb64
 "bf-ofb"

	)

1334 
	#NID_bf_ofb64
 94

	)

1336 
	#SN_id_pkix
 "PKIX"

	)

1337 
	#NID_id_pkix
 127

	)

1338 
	#OBJ_id_pkix
 1L,3L,6L,1L,5L,5L,7L

	)

1340 
	#SN_id_pkix_mod
 "id-pkix-mod"

	)

1341 
	#NID_id_pkix_mod
 258

	)

1342 
	#OBJ_id_pkix_mod
 
OBJ_id_pkix
,0L

	)

1344 
	#SN_id_≥
 "id-≥"

	)

1345 
	#NID_id_≥
 175

	)

1346 
	#OBJ_id_≥
 
OBJ_id_pkix
,1L

	)

1348 
	#SN_id_qt
 "id-qt"

	)

1349 
	#NID_id_qt
 259

	)

1350 
	#OBJ_id_qt
 
OBJ_id_pkix
,2L

	)

1352 
	#SN_id_kp
 "id-kp"

	)

1353 
	#NID_id_kp
 128

	)

1354 
	#OBJ_id_kp
 
OBJ_id_pkix
,3L

	)

1356 
	#SN_id_ô
 "id-ô"

	)

1357 
	#NID_id_ô
 260

	)

1358 
	#OBJ_id_ô
 
OBJ_id_pkix
,4L

	)

1360 
	#SN_id_pkù
 "id-pkù"

	)

1361 
	#NID_id_pkù
 261

	)

1362 
	#OBJ_id_pkù
 
OBJ_id_pkix
,5L

	)

1364 
	#SN_id_Æg
 "id-Æg"

	)

1365 
	#NID_id_Æg
 262

	)

1366 
	#OBJ_id_Æg
 
OBJ_id_pkix
,6L

	)

1368 
	#SN_id_cmc
 "id-cmc"

	)

1369 
	#NID_id_cmc
 263

	)

1370 
	#OBJ_id_cmc
 
OBJ_id_pkix
,7L

	)

1372 
	#SN_id_⁄
 "id-⁄"

	)

1373 
	#NID_id_⁄
 264

	)

1374 
	#OBJ_id_⁄
 
OBJ_id_pkix
,8L

	)

1376 
	#SN_id_pda
 "id-pda"

	)

1377 
	#NID_id_pda
 265

	)

1378 
	#OBJ_id_pda
 
OBJ_id_pkix
,9L

	)

1380 
	#SN_id_aˇ
 "id-aˇ"

	)

1381 
	#NID_id_aˇ
 266

	)

1382 
	#OBJ_id_aˇ
 
OBJ_id_pkix
,10L

	)

1384 
	#SN_id_qcs
 "id-qcs"

	)

1385 
	#NID_id_qcs
 267

	)

1386 
	#OBJ_id_qcs
 
OBJ_id_pkix
,11L

	)

1388 
	#SN_id_c˘
 "id-c˘"

	)

1389 
	#NID_id_c˘
 268

	)

1390 
	#OBJ_id_c˘
 
OBJ_id_pkix
,12L

	)

1392 
	#SN_id_µl
 "id-µl"

	)

1393 
	#NID_id_µl
 662

	)

1394 
	#OBJ_id_µl
 
OBJ_id_pkix
,21L

	)

1396 
	#SN_id_ad
 "id-ad"

	)

1397 
	#NID_id_ad
 176

	)

1398 
	#OBJ_id_ad
 
OBJ_id_pkix
,48L

	)

1400 
	#SN_id_pkix1_ex∂icô_88
 "id-pkix1-ex∂icô-88"

	)

1401 
	#NID_id_pkix1_ex∂icô_88
 269

	)

1402 
	#OBJ_id_pkix1_ex∂icô_88
 
OBJ_id_pkix_mod
,1L

	)

1404 
	#SN_id_pkix1_im∂icô_88
 "id-pkix1-im∂icô-88"

	)

1405 
	#NID_id_pkix1_im∂icô_88
 270

	)

1406 
	#OBJ_id_pkix1_im∂icô_88
 
OBJ_id_pkix_mod
,2L

	)

1408 
	#SN_id_pkix1_ex∂icô_93
 "id-pkix1-ex∂icô-93"

	)

1409 
	#NID_id_pkix1_ex∂icô_93
 271

	)

1410 
	#OBJ_id_pkix1_ex∂icô_93
 
OBJ_id_pkix_mod
,3L

	)

1412 
	#SN_id_pkix1_im∂icô_93
 "id-pkix1-im∂icô-93"

	)

1413 
	#NID_id_pkix1_im∂icô_93
 272

	)

1414 
	#OBJ_id_pkix1_im∂icô_93
 
OBJ_id_pkix_mod
,4L

	)

1416 
	#SN_id_mod_¸mf
 "id-mod-¸mf"

	)

1417 
	#NID_id_mod_¸mf
 273

	)

1418 
	#OBJ_id_mod_¸mf
 
OBJ_id_pkix_mod
,5L

	)

1420 
	#SN_id_mod_cmc
 "id-mod-cmc"

	)

1421 
	#NID_id_mod_cmc
 274

	)

1422 
	#OBJ_id_mod_cmc
 
OBJ_id_pkix_mod
,6L

	)

1424 
	#SN_id_mod_kó_¥ofûe_88
 "id-mod-kó-¥ofûe-88"

	)

1425 
	#NID_id_mod_kó_¥ofûe_88
 275

	)

1426 
	#OBJ_id_mod_kó_¥ofûe_88
 
OBJ_id_pkix_mod
,7L

	)

1428 
	#SN_id_mod_kó_¥ofûe_93
 "id-mod-kó-¥ofûe-93"

	)

1429 
	#NID_id_mod_kó_¥ofûe_93
 276

	)

1430 
	#OBJ_id_mod_kó_¥ofûe_93
 
OBJ_id_pkix_mod
,8L

	)

1432 
	#SN_id_mod_cmp
 "id-mod-cmp"

	)

1433 
	#NID_id_mod_cmp
 277

	)

1434 
	#OBJ_id_mod_cmp
 
OBJ_id_pkix_mod
,9L

	)

1436 
	#SN_id_mod_quÆifõd_˚π_88
 "id-mod-quÆifõd-˚π-88"

	)

1437 
	#NID_id_mod_quÆifõd_˚π_88
 278

	)

1438 
	#OBJ_id_mod_quÆifõd_˚π_88
 
OBJ_id_pkix_mod
,10L

	)

1440 
	#SN_id_mod_quÆifõd_˚π_93
 "id-mod-quÆifõd-˚π-93"

	)

1441 
	#NID_id_mod_quÆifõd_˚π_93
 279

	)

1442 
	#OBJ_id_mod_quÆifõd_˚π_93
 
OBJ_id_pkix_mod
,11L

	)

1444 
	#SN_id_mod_©åibuã_˚π
 "id-mod-©åibuã-˚π"

	)

1445 
	#NID_id_mod_©åibuã_˚π
 280

	)

1446 
	#OBJ_id_mod_©åibuã_˚π
 
OBJ_id_pkix_mod
,12L

	)

1448 
	#SN_id_mod_time°amp_¥Ÿocﬁ
 "id-mod-time°amp-¥Ÿocﬁ"

	)

1449 
	#NID_id_mod_time°amp_¥Ÿocﬁ
 281

	)

1450 
	#OBJ_id_mod_time°amp_¥Ÿocﬁ
 
OBJ_id_pkix_mod
,13L

	)

1452 
	#SN_id_mod_oc•
 "id-mod-oc•"

	)

1453 
	#NID_id_mod_oc•
 282

	)

1454 
	#OBJ_id_mod_oc•
 
OBJ_id_pkix_mod
,14L

	)

1456 
	#SN_id_mod_dvcs
 "id-mod-dvcs"

	)

1457 
	#NID_id_mod_dvcs
 283

	)

1458 
	#OBJ_id_mod_dvcs
 
OBJ_id_pkix_mod
,15L

	)

1460 
	#SN_id_mod_cmp2000
 "id-mod-cmp2000"

	)

1461 
	#NID_id_mod_cmp2000
 284

	)

1462 
	#OBJ_id_mod_cmp2000
 
OBJ_id_pkix_mod
,16L

	)

1464 
	#SN_öfo_ac˚ss
 "auth‹ôyInfoAc˚ss"

	)

1465 
	#LN_öfo_ac˚ss
 "Auth‹ôy Inf‹m©i⁄ Ac˚ss"

	)

1466 
	#NID_öfo_ac˚ss
 177

	)

1467 
	#OBJ_öfo_ac˚ss
 
OBJ_id_≥
,1L

	)

1469 
	#SN_biomëricInfo
 "biomëricInfo"

	)

1470 
	#LN_biomëricInfo
 "Biomëri¯Info"

	)

1471 
	#NID_biomëricInfo
 285

	)

1472 
	#OBJ_biomëricInfo
 
OBJ_id_≥
,2L

	)

1474 
	#SN_qcSèãmíts
 "qcSèãmíts"

	)

1475 
	#NID_qcSèãmíts
 286

	)

1476 
	#OBJ_qcSèãmíts
 
OBJ_id_≥
,3L

	)

1478 
	#SN_ac_audôE¡ôy
 "ac-audôE¡ôy"

	)

1479 
	#NID_ac_audôE¡ôy
 287

	)

1480 
	#OBJ_ac_audôE¡ôy
 
OBJ_id_≥
,4L

	)

1482 
	#SN_ac_èrgëög
 "ac-èrgëög"

	)

1483 
	#NID_ac_èrgëög
 288

	)

1484 
	#OBJ_ac_èrgëög
 
OBJ_id_≥
,5L

	)

1486 
	#SN_ØC⁄åﬁs
 "ØC⁄åﬁs"

	)

1487 
	#NID_ØC⁄åﬁs
 289

	)

1488 
	#OBJ_ØC⁄åﬁs
 
OBJ_id_≥
,6L

	)

1490 
	#SN_sbgp_ùAddrBlock
 "sbgp-ùAddrBlock"

	)

1491 
	#NID_sbgp_ùAddrBlock
 290

	)

1492 
	#OBJ_sbgp_ùAddrBlock
 
OBJ_id_≥
,7L

	)

1494 
	#SN_sbgp_aut⁄omousSysNum
 "sbgp-aut⁄omousSysNum"

	)

1495 
	#NID_sbgp_aut⁄omousSysNum
 291

	)

1496 
	#OBJ_sbgp_aut⁄omousSysNum
 
OBJ_id_≥
,8L

	)

1498 
	#SN_sbgp_rouãrIdítifõr
 "sbgp-rouãrIdítifõr"

	)

1499 
	#NID_sbgp_rouãrIdítifõr
 292

	)

1500 
	#OBJ_sbgp_rouãrIdítifõr
 
OBJ_id_≥
,9L

	)

1502 
	#SN_ac_¥oxyög
 "ac-¥oxyög"

	)

1503 
	#NID_ac_¥oxyög
 397

	)

1504 
	#OBJ_ac_¥oxyög
 
OBJ_id_≥
,10L

	)

1506 
	#SN_söfo_ac˚ss
 "subje˘InfoAc˚ss"

	)

1507 
	#LN_söfo_ac˚ss
 "Subje˘ Inf‹m©i⁄ Ac˚ss"

	)

1508 
	#NID_söfo_ac˚ss
 398

	)

1509 
	#OBJ_söfo_ac˚ss
 
OBJ_id_≥
,11L

	)

1511 
	#SN_¥oxyCîtInfo
 "¥oxyCîtInfo"

	)

1512 
	#LN_¥oxyCîtInfo
 "Proxy Cîtifiˇã Inf‹m©i⁄"

	)

1513 
	#NID_¥oxyCîtInfo
 663

	)

1514 
	#OBJ_¥oxyCîtInfo
 
OBJ_id_≥
,14L

	)

1516 
	#SN_és„©uª
 "és„©uª"

	)

1517 
	#LN_és„©uª
 "TLS Fótuª"

	)

1518 
	#NID_és„©uª
 1020

	)

1519 
	#OBJ_és„©uª
 
OBJ_id_≥
,24L

	)

1521 
	#SN_id_qt_˝s
 "id-qt-˝s"

	)

1522 
	#LN_id_qt_˝s
 "Pﬁicy QuÆifõ∏CPS"

	)

1523 
	#NID_id_qt_˝s
 164

	)

1524 
	#OBJ_id_qt_˝s
 
OBJ_id_qt
,1L

	)

1526 
	#SN_id_qt_unŸi˚
 "id-qt-unŸi˚"

	)

1527 
	#LN_id_qt_unŸi˚
 "Pﬁicy QuÆifõ∏U£∏NŸi˚"

	)

1528 
	#NID_id_qt_unŸi˚
 165

	)

1529 
	#OBJ_id_qt_unŸi˚
 
OBJ_id_qt
,2L

	)

1531 
	#SN_ãxtNŸi˚
 "ãxtNŸi˚"

	)

1532 
	#NID_ãxtNŸi˚
 293

	)

1533 
	#OBJ_ãxtNŸi˚
 
OBJ_id_qt
,3L

	)

1535 
	#SN_£rvî_auth
 "£rvîAuth"

	)

1536 
	#LN_£rvî_auth
 "TLS Web Sîvî Authítiˇti⁄"

	)

1537 
	#NID_£rvî_auth
 129

	)

1538 
	#OBJ_£rvî_auth
 
OBJ_id_kp
,1L

	)

1540 
	#SN_˛õ¡_auth
 "˛õ¡Auth"

	)

1541 
	#LN_˛õ¡_auth
 "TLS Web Clõ¡ Authítiˇti⁄"

	)

1542 
	#NID_˛õ¡_auth
 130

	)

1543 
	#OBJ_˛õ¡_auth
 
OBJ_id_kp
,2L

	)

1545 
	#SN_code_sign
 "codeSignög"

	)

1546 
	#LN_code_sign
 "CodêSignög"

	)

1547 
	#NID_code_sign
 131

	)

1548 
	#OBJ_code_sign
 
OBJ_id_kp
,3L

	)

1550 
	#SN_emaû_¥Ÿe˘
 "emaûPrŸe˘i⁄"

	)

1551 
	#LN_emaû_¥Ÿe˘
 "E-maû PrŸe˘i⁄"

	)

1552 
	#NID_emaû_¥Ÿe˘
 132

	)

1553 
	#OBJ_emaû_¥Ÿe˘
 
OBJ_id_kp
,4L

	)

1555 
	#SN_ù£cEndSy°em
 "ù£cEndSy°em"

	)

1556 
	#LN_ù£cEndSy°em
 "IPSe¯End Sy°em"

	)

1557 
	#NID_ù£cEndSy°em
 294

	)

1558 
	#OBJ_ù£cEndSy°em
 
OBJ_id_kp
,5L

	)

1560 
	#SN_ù£cTu¬ñ
 "ù£cTu¬ñ"

	)

1561 
	#LN_ù£cTu¬ñ
 "IPSe¯Tu¬ñ"

	)

1562 
	#NID_ù£cTu¬ñ
 295

	)

1563 
	#OBJ_ù£cTu¬ñ
 
OBJ_id_kp
,6L

	)

1565 
	#SN_ù£cU£r
 "ù£cU£r"

	)

1566 
	#LN_ù£cU£r
 "IPSe¯U£r"

	)

1567 
	#NID_ù£cU£r
 296

	)

1568 
	#OBJ_ù£cU£r
 
OBJ_id_kp
,7L

	)

1570 
	#SN_time_°amp
 "timeSèmpög"

	)

1571 
	#LN_time_°amp
 "TimêSèmpög"

	)

1572 
	#NID_time_°amp
 133

	)

1573 
	#OBJ_time_°amp
 
OBJ_id_kp
,8L

	)

1575 
	#SN_OCSP_sign
 "OCSPSignög"

	)

1576 
	#LN_OCSP_sign
 "OCSP Signög"

	)

1577 
	#NID_OCSP_sign
 180

	)

1578 
	#OBJ_OCSP_sign
 
OBJ_id_kp
,9L

	)

1580 
	#SN_dvcs
 "DVCS"

	)

1581 
	#LN_dvcs
 "dvcs"

	)

1582 
	#NID_dvcs
 297

	)

1583 
	#OBJ_dvcs
 
OBJ_id_kp
,10L

	)

1585 
	#SN_ù£c_IKE
 "ù£cIKE"

	)

1586 
	#LN_ù£c_IKE
 "ù£¯I¡î√àKey Exch™ge"

	)

1587 
	#NID_ù£c_IKE
 1022

	)

1588 
	#OBJ_ù£c_IKE
 
OBJ_id_kp
,17L

	)

1590 
	#SN_ˇpw≠AC
 "ˇpw≠AC"

	)

1591 
	#LN_ˇpw≠AC
 "Cål/¥ovisi⁄ WAP Ac˚ss"

	)

1592 
	#NID_ˇpw≠AC
 1023

	)

1593 
	#OBJ_ˇpw≠AC
 
OBJ_id_kp
,18L

	)

1595 
	#SN_ˇpw≠WTP
 "ˇpw≠WTP"

	)

1596 
	#LN_ˇpw≠WTP
 "Cål/Provisi⁄ WAP Tîmö©i⁄"

	)

1597 
	#NID_ˇpw≠WTP
 1024

	)

1598 
	#OBJ_ˇpw≠WTP
 
OBJ_id_kp
,19L

	)

1600 
	#SN_sshClõ¡
 "£cuªShñlClõ¡"

	)

1601 
	#LN_sshClõ¡
 "SSH Clõ¡"

	)

1602 
	#NID_sshClõ¡
 1025

	)

1603 
	#OBJ_sshClõ¡
 
OBJ_id_kp
,21L

	)

1605 
	#SN_sshSîvî
 "£cuªShñlSîvî"

	)

1606 
	#LN_sshSîvî
 "SSH Sîvî"

	)

1607 
	#NID_sshSîvî
 1026

	)

1608 
	#OBJ_sshSîvî
 
OBJ_id_kp
,22L

	)

1610 
	#SN_£ndRouãr
 "£ndRouãr"

	)

1611 
	#LN_£ndRouãr
 "Síd Rouãr"

	)

1612 
	#NID_£ndRouãr
 1027

	)

1613 
	#OBJ_£ndRouãr
 
OBJ_id_kp
,23L

	)

1615 
	#SN_£ndProxõdRouãr
 "£ndProxõdRouãr"

	)

1616 
	#LN_£ndProxõdRouãr
 "Síd Proxõd Rouãr"

	)

1617 
	#NID_£ndProxõdRouãr
 1028

	)

1618 
	#OBJ_£ndProxõdRouãr
 
OBJ_id_kp
,24L

	)

1620 
	#SN_£ndOw√r
 "£ndOw√r"

	)

1621 
	#LN_£ndOw√r
 "Síd Ow√r"

	)

1622 
	#NID_£ndOw√r
 1029

	)

1623 
	#OBJ_£ndOw√r
 
OBJ_id_kp
,25L

	)

1625 
	#SN_£ndProxõdOw√r
 "£ndProxõdOw√r"

	)

1626 
	#LN_£ndProxõdOw√r
 "Síd Proxõd Ow√r"

	)

1627 
	#NID_£ndProxõdOw√r
 1030

	)

1628 
	#OBJ_£ndProxõdOw√r
 
OBJ_id_kp
,26L

	)

1630 
	#SN_cmcCA
 "cmcCA"

	)

1631 
	#LN_cmcCA
 "CMC Cîtifiˇã Auth‹ôy"

	)

1632 
	#NID_cmcCA
 1131

	)

1633 
	#OBJ_cmcCA
 
OBJ_id_kp
,27L

	)

1635 
	#SN_cmcRA
 "cmcRA"

	)

1636 
	#LN_cmcRA
 "CMC Regi°øti⁄ Auth‹ôy"

	)

1637 
	#NID_cmcRA
 1132

	)

1638 
	#OBJ_cmcRA
 
OBJ_id_kp
,28L

	)

1640 
	#SN_id_ô_ˇPrŸEncCît
 "id-ô-ˇPrŸEncCît"

	)

1641 
	#NID_id_ô_ˇPrŸEncCît
 298

	)

1642 
	#OBJ_id_ô_ˇPrŸEncCît
 
OBJ_id_ô
,1L

	)

1644 
	#SN_id_ô_signKeyPaúTy≥s
 "id-ô-signKeyPaúTy≥s"

	)

1645 
	#NID_id_ô_signKeyPaúTy≥s
 299

	)

1646 
	#OBJ_id_ô_signKeyPaúTy≥s
 
OBJ_id_ô
,2L

	)

1648 
	#SN_id_ô_ícKeyPaúTy≥s
 "id-ô-ícKeyPaúTy≥s"

	)

1649 
	#NID_id_ô_ícKeyPaúTy≥s
 300

	)

1650 
	#OBJ_id_ô_ícKeyPaúTy≥s
 
OBJ_id_ô
,3L

	)

1652 
	#SN_id_ô_¥e„ºedSymmAlg
 "id-ô-¥e„ºedSymmAlg"

	)

1653 
	#NID_id_ô_¥e„ºedSymmAlg
 301

	)

1654 
	#OBJ_id_ô_¥e„ºedSymmAlg
 
OBJ_id_ô
,4L

	)

1656 
	#SN_id_ô_ˇKeyUpd©eInfo
 "id-ô-ˇKeyUpd©eInfo"

	)

1657 
	#NID_id_ô_ˇKeyUpd©eInfo
 302

	)

1658 
	#OBJ_id_ô_ˇKeyUpd©eInfo
 
OBJ_id_ô
,5L

	)

1660 
	#SN_id_ô_cuºítCRL
 "id-ô-cuºítCRL"

	)

1661 
	#NID_id_ô_cuºítCRL
 303

	)

1662 
	#OBJ_id_ô_cuºítCRL
 
OBJ_id_ô
,6L

	)

1664 
	#SN_id_ô_unsuµ‹ãdOIDs
 "id-ô-unsuµ‹ãdOIDs"

	)

1665 
	#NID_id_ô_unsuµ‹ãdOIDs
 304

	)

1666 
	#OBJ_id_ô_unsuµ‹ãdOIDs
 
OBJ_id_ô
,7L

	)

1668 
	#SN_id_ô_subs¸ùti⁄Reque°
 "id-ô-subs¸ùti⁄Reque°"

	)

1669 
	#NID_id_ô_subs¸ùti⁄Reque°
 305

	)

1670 
	#OBJ_id_ô_subs¸ùti⁄Reque°
 
OBJ_id_ô
,8L

	)

1672 
	#SN_id_ô_subs¸ùti⁄Re•⁄£
 "id-ô-subs¸ùti⁄Re•⁄£"

	)

1673 
	#NID_id_ô_subs¸ùti⁄Re•⁄£
 306

	)

1674 
	#OBJ_id_ô_subs¸ùti⁄Re•⁄£
 
OBJ_id_ô
,9L

	)

1676 
	#SN_id_ô_keyPaúP¨amReq
 "id-ô-keyPaúP¨amReq"

	)

1677 
	#NID_id_ô_keyPaúP¨amReq
 307

	)

1678 
	#OBJ_id_ô_keyPaúP¨amReq
 
OBJ_id_ô
,10L

	)

1680 
	#SN_id_ô_keyPaúP¨amRï
 "id-ô-keyPaúP¨amRï"

	)

1681 
	#NID_id_ô_keyPaúP¨amRï
 308

	)

1682 
	#OBJ_id_ô_keyPaúP¨amRï
 
OBJ_id_ô
,11L

	)

1684 
	#SN_id_ô_ªvPas•hø£
 "id-ô-ªvPas•hø£"

	)

1685 
	#NID_id_ô_ªvPas•hø£
 309

	)

1686 
	#OBJ_id_ô_ªvPas•hø£
 
OBJ_id_ô
,12L

	)

1688 
	#SN_id_ô_im∂icôC⁄fúm
 "id-ô-im∂icôC⁄fúm"

	)

1689 
	#NID_id_ô_im∂icôC⁄fúm
 310

	)

1690 
	#OBJ_id_ô_im∂icôC⁄fúm
 
OBJ_id_ô
,13L

	)

1692 
	#SN_id_ô_c⁄fúmWaôTime
 "id-ô-c⁄fúmWaôTime"

	)

1693 
	#NID_id_ô_c⁄fúmWaôTime
 311

	)

1694 
	#OBJ_id_ô_c⁄fúmWaôTime
 
OBJ_id_ô
,14L

	)

1696 
	#SN_id_ô_‹igPKIMesßge
 "id-ô-‹igPKIMesßge"

	)

1697 
	#NID_id_ô_‹igPKIMesßge
 312

	)

1698 
	#OBJ_id_ô_‹igPKIMesßge
 
OBJ_id_ô
,15L

	)

1700 
	#SN_id_ô_suµL™gTags
 "id-ô-suµL™gTags"

	)

1701 
	#NID_id_ô_suµL™gTags
 784

	)

1702 
	#OBJ_id_ô_suµL™gTags
 
OBJ_id_ô
,16L

	)

1704 
	#SN_id_ªgCål
 "id-ªgCål"

	)

1705 
	#NID_id_ªgCål
 313

	)

1706 
	#OBJ_id_ªgCål
 
OBJ_id_pkù
,1L

	)

1708 
	#SN_id_ªgInfo
 "id-ªgInfo"

	)

1709 
	#NID_id_ªgInfo
 314

	)

1710 
	#OBJ_id_ªgInfo
 
OBJ_id_pkù
,2L

	)

1712 
	#SN_id_ªgCål_ªgTokí
 "id-ªgCål-ªgTokí"

	)

1713 
	#NID_id_ªgCål_ªgTokí
 315

	)

1714 
	#OBJ_id_ªgCål_ªgTokí
 
OBJ_id_ªgCål
,1L

	)

1716 
	#SN_id_ªgCål_authítiˇt‹
 "id-ªgCål-authítiˇt‹"

	)

1717 
	#NID_id_ªgCål_authítiˇt‹
 316

	)

1718 
	#OBJ_id_ªgCål_authítiˇt‹
 
OBJ_id_ªgCål
,2L

	)

1720 
	#SN_id_ªgCål_pkiPubliˇti⁄Info
 "id-ªgCål-pkiPubliˇti⁄Info"

	)

1721 
	#NID_id_ªgCål_pkiPubliˇti⁄Info
 317

	)

1722 
	#OBJ_id_ªgCål_pkiPubliˇti⁄Info
 
OBJ_id_ªgCål
,3L

	)

1724 
	#SN_id_ªgCål_pkiArchiveO±i⁄s
 "id-ªgCål-pkiArchiveO±i⁄s"

	)

1725 
	#NID_id_ªgCål_pkiArchiveO±i⁄s
 318

	)

1726 
	#OBJ_id_ªgCål_pkiArchiveO±i⁄s
 
OBJ_id_ªgCål
,4L

	)

1728 
	#SN_id_ªgCål_ﬁdCîtID
 "id-ªgCål-ﬁdCîtID"

	)

1729 
	#NID_id_ªgCål_ﬁdCîtID
 319

	)

1730 
	#OBJ_id_ªgCål_ﬁdCîtID
 
OBJ_id_ªgCål
,5L

	)

1732 
	#SN_id_ªgCål_¥ŸocﬁEn¸Key
 "id-ªgCål-¥ŸocﬁEn¸Key"

	)

1733 
	#NID_id_ªgCål_¥ŸocﬁEn¸Key
 320

	)

1734 
	#OBJ_id_ªgCål_¥ŸocﬁEn¸Key
 
OBJ_id_ªgCål
,6L

	)

1736 
	#SN_id_ªgInfo_utf8Paús
 "id-ªgInfo-utf8Paús"

	)

1737 
	#NID_id_ªgInfo_utf8Paús
 321

	)

1738 
	#OBJ_id_ªgInfo_utf8Paús
 
OBJ_id_ªgInfo
,1L

	)

1740 
	#SN_id_ªgInfo_˚πReq
 "id-ªgInfo-˚πReq"

	)

1741 
	#NID_id_ªgInfo_˚πReq
 322

	)

1742 
	#OBJ_id_ªgInfo_˚πReq
 
OBJ_id_ªgInfo
,2L

	)

1744 
	#SN_id_Æg_des40
 "id-Æg-des40"

	)

1745 
	#NID_id_Æg_des40
 323

	)

1746 
	#OBJ_id_Æg_des40
 
OBJ_id_Æg
,1L

	)

1748 
	#SN_id_Æg_noSig«tuª
 "id-Æg-noSig«tuª"

	)

1749 
	#NID_id_Æg_noSig«tuª
 324

	)

1750 
	#OBJ_id_Æg_noSig«tuª
 
OBJ_id_Æg
,2L

	)

1752 
	#SN_id_Æg_dh_sig_hmac_sha1
 "id-Æg-dh-sig-hmac-sha1"

	)

1753 
	#NID_id_Æg_dh_sig_hmac_sha1
 325

	)

1754 
	#OBJ_id_Æg_dh_sig_hmac_sha1
 
OBJ_id_Æg
,3L

	)

1756 
	#SN_id_Æg_dh_p›
 "id-Æg-dh-p›"

	)

1757 
	#NID_id_Æg_dh_p›
 326

	)

1758 
	#OBJ_id_Æg_dh_p›
 
OBJ_id_Æg
,4L

	)

1760 
	#SN_id_cmc_°©usInfo
 "id-cmc-°©usInfo"

	)

1761 
	#NID_id_cmc_°©usInfo
 327

	)

1762 
	#OBJ_id_cmc_°©usInfo
 
OBJ_id_cmc
,1L

	)

1764 
	#SN_id_cmc_idítifiˇti⁄
 "id-cmc-idítifiˇti⁄"

	)

1765 
	#NID_id_cmc_idítifiˇti⁄
 328

	)

1766 
	#OBJ_id_cmc_idítifiˇti⁄
 
OBJ_id_cmc
,2L

	)

1768 
	#SN_id_cmc_idítôyProof
 "id-cmc-idítôyProof"

	)

1769 
	#NID_id_cmc_idítôyProof
 329

	)

1770 
	#OBJ_id_cmc_idítôyProof
 
OBJ_id_cmc
,3L

	)

1772 
	#SN_id_cmc_d©aRëu∫
 "id-cmc-d©aRëu∫"

	)

1773 
	#NID_id_cmc_d©aRëu∫
 330

	)

1774 
	#OBJ_id_cmc_d©aRëu∫
 
OBJ_id_cmc
,4L

	)

1776 
	#SN_id_cmc_å™ß˘i⁄Id
 "id-cmc-å™ß˘i⁄Id"

	)

1777 
	#NID_id_cmc_å™ß˘i⁄Id
 331

	)

1778 
	#OBJ_id_cmc_å™ß˘i⁄Id
 
OBJ_id_cmc
,5L

	)

1780 
	#SN_id_cmc_£ndîN⁄˚
 "id-cmc-£ndîN⁄˚"

	)

1781 
	#NID_id_cmc_£ndîN⁄˚
 332

	)

1782 
	#OBJ_id_cmc_£ndîN⁄˚
 
OBJ_id_cmc
,6L

	)

1784 
	#SN_id_cmc_ªcùõ¡N⁄˚
 "id-cmc-ªcùõ¡N⁄˚"

	)

1785 
	#NID_id_cmc_ªcùõ¡N⁄˚
 333

	)

1786 
	#OBJ_id_cmc_ªcùõ¡N⁄˚
 
OBJ_id_cmc
,7L

	)

1788 
	#SN_id_cmc_addExãnsi⁄s
 "id-cmc-addExãnsi⁄s"

	)

1789 
	#NID_id_cmc_addExãnsi⁄s
 334

	)

1790 
	#OBJ_id_cmc_addExãnsi⁄s
 
OBJ_id_cmc
,8L

	)

1792 
	#SN_id_cmc_í¸y±edPOP
 "id-cmc-í¸y±edPOP"

	)

1793 
	#NID_id_cmc_í¸y±edPOP
 335

	)

1794 
	#OBJ_id_cmc_í¸y±edPOP
 
OBJ_id_cmc
,9L

	)

1796 
	#SN_id_cmc_de¸y±edPOP
 "id-cmc-de¸y±edPOP"

	)

1797 
	#NID_id_cmc_de¸y±edPOP
 336

	)

1798 
	#OBJ_id_cmc_de¸y±edPOP
 
OBJ_id_cmc
,10L

	)

1800 
	#SN_id_cmc_ÃaPOPWô√ss
 "id-cmc-ÃaPOPWô√ss"

	)

1801 
	#NID_id_cmc_ÃaPOPWô√ss
 337

	)

1802 
	#OBJ_id_cmc_ÃaPOPWô√ss
 
OBJ_id_cmc
,11L

	)

1804 
	#SN_id_cmc_gëCît
 "id-cmc-gëCît"

	)

1805 
	#NID_id_cmc_gëCît
 338

	)

1806 
	#OBJ_id_cmc_gëCît
 
OBJ_id_cmc
,15L

	)

1808 
	#SN_id_cmc_gëCRL
 "id-cmc-gëCRL"

	)

1809 
	#NID_id_cmc_gëCRL
 339

	)

1810 
	#OBJ_id_cmc_gëCRL
 
OBJ_id_cmc
,16L

	)

1812 
	#SN_id_cmc_ªvokeReque°
 "id-cmc-ªvokeReque°"

	)

1813 
	#NID_id_cmc_ªvokeReque°
 340

	)

1814 
	#OBJ_id_cmc_ªvokeReque°
 
OBJ_id_cmc
,17L

	)

1816 
	#SN_id_cmc_ªgInfo
 "id-cmc-ªgInfo"

	)

1817 
	#NID_id_cmc_ªgInfo
 341

	)

1818 
	#OBJ_id_cmc_ªgInfo
 
OBJ_id_cmc
,18L

	)

1820 
	#SN_id_cmc_ª•⁄£Info
 "id-cmc-ª•⁄£Info"

	)

1821 
	#NID_id_cmc_ª•⁄£Info
 342

	)

1822 
	#OBJ_id_cmc_ª•⁄£Info
 
OBJ_id_cmc
,19L

	)

1824 
	#SN_id_cmc_quîyPídög
 "id-cmc-quîyPídög"

	)

1825 
	#NID_id_cmc_quîyPídög
 343

	)

1826 
	#OBJ_id_cmc_quîyPídög
 
OBJ_id_cmc
,21L

	)

1828 
	#SN_id_cmc_p›LökR™dom
 "id-cmc-p›LökR™dom"

	)

1829 
	#NID_id_cmc_p›LökR™dom
 344

	)

1830 
	#OBJ_id_cmc_p›LökR™dom
 
OBJ_id_cmc
,22L

	)

1832 
	#SN_id_cmc_p›LökWô√ss
 "id-cmc-p›LökWô√ss"

	)

1833 
	#NID_id_cmc_p›LökWô√ss
 345

	)

1834 
	#OBJ_id_cmc_p›LökWô√ss
 
OBJ_id_cmc
,23L

	)

1836 
	#SN_id_cmc_c⁄fúmCîtAc˚±™˚
 "id-cmc-c⁄fúmCîtAc˚±™˚"

	)

1837 
	#NID_id_cmc_c⁄fúmCîtAc˚±™˚
 346

	)

1838 
	#OBJ_id_cmc_c⁄fúmCîtAc˚±™˚
 
OBJ_id_cmc
,24L

	)

1840 
	#SN_id_⁄_≥rs⁄ÆD©a
 "id-⁄-≥rs⁄ÆD©a"

	)

1841 
	#NID_id_⁄_≥rs⁄ÆD©a
 347

	)

1842 
	#OBJ_id_⁄_≥rs⁄ÆD©a
 
OBJ_id_⁄
,1L

	)

1844 
	#SN_id_⁄_≥rm™ítIdítifõr
 "id-⁄-≥rm™ítIdítifõr"

	)

1845 
	#LN_id_⁄_≥rm™ítIdítifõr
 "Pîm™íàIdítifõr"

	)

1846 
	#NID_id_⁄_≥rm™ítIdítifõr
 858

	)

1847 
	#OBJ_id_⁄_≥rm™ítIdítifõr
 
OBJ_id_⁄
,3L

	)

1849 
	#SN_id_pda_d©eOfBúth
 "id-pda-d©eOfBúth"

	)

1850 
	#NID_id_pda_d©eOfBúth
 348

	)

1851 
	#OBJ_id_pda_d©eOfBúth
 
OBJ_id_pda
,1L

	)

1853 
	#SN_id_pda_∂a˚OfBúth
 "id-pda-∂a˚OfBúth"

	)

1854 
	#NID_id_pda_∂a˚OfBúth
 349

	)

1855 
	#OBJ_id_pda_∂a˚OfBúth
 
OBJ_id_pda
,2L

	)

1857 
	#SN_id_pda_gídî
 "id-pda-gídî"

	)

1858 
	#NID_id_pda_gídî
 351

	)

1859 
	#OBJ_id_pda_gídî
 
OBJ_id_pda
,3L

	)

1861 
	#SN_id_pda_cou¡ryOfCôizíshù
 "id-pda-cou¡ryOfCôizíshù"

	)

1862 
	#NID_id_pda_cou¡ryOfCôizíshù
 352

	)

1863 
	#OBJ_id_pda_cou¡ryOfCôizíshù
 
OBJ_id_pda
,4L

	)

1865 
	#SN_id_pda_cou¡ryOfResidí˚
 "id-pda-cou¡ryOfResidí˚"

	)

1866 
	#NID_id_pda_cou¡ryOfResidí˚
 353

	)

1867 
	#OBJ_id_pda_cou¡ryOfResidí˚
 
OBJ_id_pda
,5L

	)

1869 
	#SN_id_aˇ_authítiˇti⁄Info
 "id-aˇ-authítiˇti⁄Info"

	)

1870 
	#NID_id_aˇ_authítiˇti⁄Info
 354

	)

1871 
	#OBJ_id_aˇ_authítiˇti⁄Info
 
OBJ_id_aˇ
,1L

	)

1873 
	#SN_id_aˇ_ac˚ssIdítôy
 "id-aˇ-ac˚ssIdítôy"

	)

1874 
	#NID_id_aˇ_ac˚ssIdítôy
 355

	)

1875 
	#OBJ_id_aˇ_ac˚ssIdítôy
 
OBJ_id_aˇ
,2L

	)

1877 
	#SN_id_aˇ_ch¨gögIdítôy
 "id-aˇ-ch¨gögIdítôy"

	)

1878 
	#NID_id_aˇ_ch¨gögIdítôy
 356

	)

1879 
	#OBJ_id_aˇ_ch¨gögIdítôy
 
OBJ_id_aˇ
,3L

	)

1881 
	#SN_id_aˇ_group
 "id-aˇ-group"

	)

1882 
	#NID_id_aˇ_group
 357

	)

1883 
	#OBJ_id_aˇ_group
 
OBJ_id_aˇ
,4L

	)

1885 
	#SN_id_aˇ_rﬁe
 "id-aˇ-rﬁe"

	)

1886 
	#NID_id_aˇ_rﬁe
 358

	)

1887 
	#OBJ_id_aˇ_rﬁe
 
OBJ_id_aˇ
,5L

	)

1889 
	#SN_id_aˇ_ícAârs
 "id-aˇ-ícAârs"

	)

1890 
	#NID_id_aˇ_ícAârs
 399

	)

1891 
	#OBJ_id_aˇ_ícAârs
 
OBJ_id_aˇ
,6L

	)

1893 
	#SN_id_qcs_pkixQCSy¡ax_v1
 "id-qcs-pkixQCSy¡ax-v1"

	)

1894 
	#NID_id_qcs_pkixQCSy¡ax_v1
 359

	)

1895 
	#OBJ_id_qcs_pkixQCSy¡ax_v1
 
OBJ_id_qcs
,1L

	)

1897 
	#SN_id_c˘_¸s
 "id-c˘-¸s"

	)

1898 
	#NID_id_c˘_¸s
 360

	)

1899 
	#OBJ_id_c˘_¸s
 
OBJ_id_c˘
,1L

	)

1901 
	#SN_id_c˘_PKID©a
 "id-c˘-PKID©a"

	)

1902 
	#NID_id_c˘_PKID©a
 361

	)

1903 
	#OBJ_id_c˘_PKID©a
 
OBJ_id_c˘
,2L

	)

1905 
	#SN_id_c˘_PKIRe•⁄£
 "id-c˘-PKIRe•⁄£"

	)

1906 
	#NID_id_c˘_PKIRe•⁄£
 362

	)

1907 
	#OBJ_id_c˘_PKIRe•⁄£
 
OBJ_id_c˘
,3L

	)

1909 
	#SN_id_µl_™yL™guage
 "id-µl-™yL™guage"

	)

1910 
	#LN_id_µl_™yL™guage
 "AnyÜ™guage"

	)

1911 
	#NID_id_µl_™yL™guage
 664

	)

1912 
	#OBJ_id_µl_™yL™guage
 
OBJ_id_µl
,0L

	)

1914 
	#SN_id_µl_öhîôAŒ
 "id-µl-öhîôAŒ"

	)

1915 
	#LN_id_µl_öhîôAŒ
 "InhîôáŒ"

	)

1916 
	#NID_id_µl_öhîôAŒ
 665

	)

1917 
	#OBJ_id_µl_öhîôAŒ
 
OBJ_id_µl
,1L

	)

1919 
	#SN_Indïídít
 "id-µl-ödïídít"

	)

1920 
	#LN_Indïídít
 "Indïídít"

	)

1921 
	#NID_Indïídít
 667

	)

1922 
	#OBJ_Indïídít
 
OBJ_id_µl
,2L

	)

1924 
	#SN_ad_OCSP
 "OCSP"

	)

1925 
	#LN_ad_OCSP
 "OCSP"

	)

1926 
	#NID_ad_OCSP
 178

	)

1927 
	#OBJ_ad_OCSP
 
OBJ_id_ad
,1L

	)

1929 
	#SN_ad_ˇ_issuîs
 "ˇIssuîs"

	)

1930 
	#LN_ad_ˇ_issuîs
 "CA Issuîs"

	)

1931 
	#NID_ad_ˇ_issuîs
 179

	)

1932 
	#OBJ_ad_ˇ_issuîs
 
OBJ_id_ad
,2L

	)

1934 
	#SN_ad_timeSèmpög
 "ad_time°ampög"

	)

1935 
	#LN_ad_timeSèmpög
 "AD TimêSèmpög"

	)

1936 
	#NID_ad_timeSèmpög
 363

	)

1937 
	#OBJ_ad_timeSèmpög
 
OBJ_id_ad
,3L

	)

1939 
	#SN_ad_dvcs
 "AD_DVCS"

	)

1940 
	#LN_ad_dvcs
 "ad dvcs"

	)

1941 
	#NID_ad_dvcs
 364

	)

1942 
	#OBJ_ad_dvcs
 
OBJ_id_ad
,4L

	)

1944 
	#SN_ˇRïosô‹y
 "ˇRïosô‹y"

	)

1945 
	#LN_ˇRïosô‹y
 "CA Rïosô‹y"

	)

1946 
	#NID_ˇRïosô‹y
 785

	)

1947 
	#OBJ_ˇRïosô‹y
 
OBJ_id_ad
,5L

	)

1949 
	#OBJ_id_pkix_OCSP
 
OBJ_ad_OCSP


	)

1951 
	#SN_id_pkix_OCSP_basic
 "basicOCSPRe•⁄£"

	)

1952 
	#LN_id_pkix_OCSP_basic
 "Basi¯OCSP Re•⁄£"

	)

1953 
	#NID_id_pkix_OCSP_basic
 365

	)

1954 
	#OBJ_id_pkix_OCSP_basic
 
OBJ_id_pkix_OCSP
,1L

	)

1956 
	#SN_id_pkix_OCSP_N⁄˚
 "N⁄˚"

	)

1957 
	#LN_id_pkix_OCSP_N⁄˚
 "OCSP N⁄˚"

	)

1958 
	#NID_id_pkix_OCSP_N⁄˚
 366

	)

1959 
	#OBJ_id_pkix_OCSP_N⁄˚
 
OBJ_id_pkix_OCSP
,2L

	)

1961 
	#SN_id_pkix_OCSP_CæID
 "CæID"

	)

1962 
	#LN_id_pkix_OCSP_CæID
 "OCSP CRL ID"

	)

1963 
	#NID_id_pkix_OCSP_CæID
 367

	)

1964 
	#OBJ_id_pkix_OCSP_CæID
 
OBJ_id_pkix_OCSP
,3L

	)

1966 
	#SN_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 "ac˚±abÀRe•⁄£s"

	)

1967 
	#LN_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 "Ac˚±abÀ OCSP Re•⁄£s"

	)

1968 
	#NID_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 368

	)

1969 
	#OBJ_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 
OBJ_id_pkix_OCSP
,4L

	)

1971 
	#SN_id_pkix_OCSP_noCheck
 "noCheck"

	)

1972 
	#LN_id_pkix_OCSP_noCheck
 "OCSP NÿCheck"

	)

1973 
	#NID_id_pkix_OCSP_noCheck
 369

	)

1974 
	#OBJ_id_pkix_OCSP_noCheck
 
OBJ_id_pkix_OCSP
,5L

	)

1976 
	#SN_id_pkix_OCSP_¨chiveCutoff
 "¨chiveCutoff"

	)

1977 
	#LN_id_pkix_OCSP_¨chiveCutoff
 "OCSP ArchivêCutoff"

	)

1978 
	#NID_id_pkix_OCSP_¨chiveCutoff
 370

	)

1979 
	#OBJ_id_pkix_OCSP_¨chiveCutoff
 
OBJ_id_pkix_OCSP
,6L

	)

1981 
	#SN_id_pkix_OCSP_£rvi˚Loˇt‹
 "£rvi˚Loˇt‹"

	)

1982 
	#LN_id_pkix_OCSP_£rvi˚Loˇt‹
 "OCSP Sîvi˚ Loˇt‹"

	)

1983 
	#NID_id_pkix_OCSP_£rvi˚Loˇt‹
 371

	)

1984 
	#OBJ_id_pkix_OCSP_£rvi˚Loˇt‹
 
OBJ_id_pkix_OCSP
,7L

	)

1986 
	#SN_id_pkix_OCSP_exãndedSètus
 "exãndedSètus"

	)

1987 
	#LN_id_pkix_OCSP_exãndedSètus
 "Exãnded OCSP Sètus"

	)

1988 
	#NID_id_pkix_OCSP_exãndedSètus
 372

	)

1989 
	#OBJ_id_pkix_OCSP_exãndedSètus
 
OBJ_id_pkix_OCSP
,8L

	)

1991 
	#SN_id_pkix_OCSP_vÆid
 "vÆid"

	)

1992 
	#NID_id_pkix_OCSP_vÆid
 373

	)

1993 
	#OBJ_id_pkix_OCSP_vÆid
 
OBJ_id_pkix_OCSP
,9L

	)

1995 
	#SN_id_pkix_OCSP_∑th
 "∑th"

	)

1996 
	#NID_id_pkix_OCSP_∑th
 374

	)

1997 
	#OBJ_id_pkix_OCSP_∑th
 
OBJ_id_pkix_OCSP
,10L

	)

1999 
	#SN_id_pkix_OCSP_åu°RoŸ
 "åu°RoŸ"

	)

2000 
	#LN_id_pkix_OCSP_åu°RoŸ
 "Tru° RoŸ"

	)

2001 
	#NID_id_pkix_OCSP_åu°RoŸ
 375

	)

2002 
	#OBJ_id_pkix_OCSP_åu°RoŸ
 
OBJ_id_pkix_OCSP
,11L

	)

2004 
	#SN_Æg‹ôhm
 "Æg‹ôhm"

	)

2005 
	#LN_Æg‹ôhm
 "Æg‹ôhm"

	)

2006 
	#NID_Æg‹ôhm
 376

	)

2007 
	#OBJ_Æg‹ôhm
 1L,3L,14L,3L,2L

	)

2009 
	#SN_md5WôhRSA
 "RSA-NP-MD5"

	)

2010 
	#LN_md5WôhRSA
 "md5WôhRSA"

	)

2011 
	#NID_md5WôhRSA
 104

	)

2012 
	#OBJ_md5WôhRSA
 
OBJ_Æg‹ôhm
,3L

	)

2014 
	#SN_des_ecb
 "DES-ECB"

	)

2015 
	#LN_des_ecb
 "des-ecb"

	)

2016 
	#NID_des_ecb
 29

	)

2017 
	#OBJ_des_ecb
 
OBJ_Æg‹ôhm
,6L

	)

2019 
	#SN_des_cbc
 "DES-CBC"

	)

2020 
	#LN_des_cbc
 "des-cbc"

	)

2021 
	#NID_des_cbc
 31

	)

2022 
	#OBJ_des_cbc
 
OBJ_Æg‹ôhm
,7L

	)

2024 
	#SN_des_ofb64
 "DES-OFB"

	)

2025 
	#LN_des_ofb64
 "des-ofb"

	)

2026 
	#NID_des_ofb64
 45

	)

2027 
	#OBJ_des_ofb64
 
OBJ_Æg‹ôhm
,8L

	)

2029 
	#SN_des_cfb64
 "DES-CFB"

	)

2030 
	#LN_des_cfb64
 "des-cfb"

	)

2031 
	#NID_des_cfb64
 30

	)

2032 
	#OBJ_des_cfb64
 
OBJ_Æg‹ôhm
,9L

	)

2034 
	#SN_rßSig«tuª
 "rßSig«tuª"

	)

2035 
	#NID_rßSig«tuª
 377

	)

2036 
	#OBJ_rßSig«tuª
 
OBJ_Æg‹ôhm
,11L

	)

2038 
	#SN_dß_2
 "DSA-ﬁd"

	)

2039 
	#LN_dß_2
 "dßEn¸y±i⁄-ﬁd"

	)

2040 
	#NID_dß_2
 67

	)

2041 
	#OBJ_dß_2
 
OBJ_Æg‹ôhm
,12L

	)

2043 
	#SN_dßWôhSHA
 "DSA-SHA"

	)

2044 
	#LN_dßWôhSHA
 "dßWôhSHA"

	)

2045 
	#NID_dßWôhSHA
 66

	)

2046 
	#OBJ_dßWôhSHA
 
OBJ_Æg‹ôhm
,13L

	)

2048 
	#SN_shaWôhRSAEn¸y±i⁄
 "RSA-SHA"

	)

2049 
	#LN_shaWôhRSAEn¸y±i⁄
 "shaWôhRSAEn¸y±i⁄"

	)

2050 
	#NID_shaWôhRSAEn¸y±i⁄
 42

	)

2051 
	#OBJ_shaWôhRSAEn¸y±i⁄
 
OBJ_Æg‹ôhm
,15L

	)

2053 
	#SN_des_ede_ecb
 "DES-EDE"

	)

2054 
	#LN_des_ede_ecb
 "des-ede"

	)

2055 
	#NID_des_ede_ecb
 32

	)

2056 
	#OBJ_des_ede_ecb
 
OBJ_Æg‹ôhm
,17L

	)

2058 
	#SN_des_ede3_ecb
 "DES-EDE3"

	)

2059 
	#LN_des_ede3_ecb
 "des-ede3"

	)

2060 
	#NID_des_ede3_ecb
 33

	)

2062 
	#SN_des_ede_cbc
 "DES-EDE-CBC"

	)

2063 
	#LN_des_ede_cbc
 "des-ede-cbc"

	)

2064 
	#NID_des_ede_cbc
 43

	)

2066 
	#SN_des_ede_cfb64
 "DES-EDE-CFB"

	)

2067 
	#LN_des_ede_cfb64
 "des-ede-cfb"

	)

2068 
	#NID_des_ede_cfb64
 60

	)

2070 
	#SN_des_ede3_cfb64
 "DES-EDE3-CFB"

	)

2071 
	#LN_des_ede3_cfb64
 "des-ede3-cfb"

	)

2072 
	#NID_des_ede3_cfb64
 61

	)

2074 
	#SN_des_ede_ofb64
 "DES-EDE-OFB"

	)

2075 
	#LN_des_ede_ofb64
 "des-ede-ofb"

	)

2076 
	#NID_des_ede_ofb64
 62

	)

2078 
	#SN_des_ede3_ofb64
 "DES-EDE3-OFB"

	)

2079 
	#LN_des_ede3_ofb64
 "des-ede3-ofb"

	)

2080 
	#NID_des_ede3_ofb64
 63

	)

2082 
	#SN_desx_cbc
 "DESX-CBC"

	)

2083 
	#LN_desx_cbc
 "desx-cbc"

	)

2084 
	#NID_desx_cbc
 80

	)

2086 
	#SN_sha
 "SHA"

	)

2087 
	#LN_sha
 "sha"

	)

2088 
	#NID_sha
 41

	)

2089 
	#OBJ_sha
 
OBJ_Æg‹ôhm
,18L

	)

2091 
	#SN_sha1
 "SHA1"

	)

2092 
	#LN_sha1
 "sha1"

	)

2093 
	#NID_sha1
 64

	)

2094 
	#OBJ_sha1
 
OBJ_Æg‹ôhm
,26L

	)

2096 
	#SN_dßWôhSHA1_2
 "DSA-SHA1-ﬁd"

	)

2097 
	#LN_dßWôhSHA1_2
 "dßWôhSHA1-ﬁd"

	)

2098 
	#NID_dßWôhSHA1_2
 70

	)

2099 
	#OBJ_dßWôhSHA1_2
 
OBJ_Æg‹ôhm
,27L

	)

2101 
	#SN_sha1WôhRSA
 "RSA-SHA1-2"

	)

2102 
	#LN_sha1WôhRSA
 "sha1WôhRSA"

	)

2103 
	#NID_sha1WôhRSA
 115

	)

2104 
	#OBJ_sha1WôhRSA
 
OBJ_Æg‹ôhm
,29L

	)

2106 
	#SN_rùemd160
 "RIPEMD160"

	)

2107 
	#LN_rùemd160
 "rùemd160"

	)

2108 
	#NID_rùemd160
 117

	)

2109 
	#OBJ_rùemd160
 1L,3L,36L,3L,2L,1L

	)

2111 
	#SN_rùemd160WôhRSA
 "RSA-RIPEMD160"

	)

2112 
	#LN_rùemd160WôhRSA
 "rùemd160WôhRSA"

	)

2113 
	#NID_rùemd160WôhRSA
 119

	)

2114 
	#OBJ_rùemd160WôhRSA
 1L,3L,36L,3L,3L,1L,2L

	)

2116 
	#SN_bœke2b512
 "BLAKE2b512"

	)

2117 
	#LN_bœke2b512
 "bœke2b512"

	)

2118 
	#NID_bœke2b512
 1056

	)

2119 
	#OBJ_bœke2b512
 1L,3L,6L,1L,4L,1L,1722L,12L,2L,1L,16L

	)

2121 
	#SN_bœke2s256
 "BLAKE2s256"

	)

2122 
	#LN_bœke2s256
 "bœke2s256"

	)

2123 
	#NID_bœke2s256
 1057

	)

2124 
	#OBJ_bœke2s256
 1L,3L,6L,1L,4L,1L,1722L,12L,2L,2L,8L

	)

2126 
	#SN_sx√t
 "SXNëID"

	)

2127 
	#LN_sx√t
 "Så⁄g Exå™ë ID"

	)

2128 
	#NID_sx√t
 143

	)

2129 
	#OBJ_sx√t
 1L,3L,101L,1L,4L,1L

	)

2131 
	#SN_X500
 "X500"

	)

2132 
	#LN_X500
 "dúe˘‹y sîvi˚†(X.500)"

	)

2133 
	#NID_X500
 11

	)

2134 
	#OBJ_X500
 2L,5L

	)

2136 
	#SN_X509
 "X509"

	)

2137 
	#NID_X509
 12

	)

2138 
	#OBJ_X509
 
OBJ_X500
,4L

	)

2140 
	#SN_comm⁄Name
 "CN"

	)

2141 
	#LN_comm⁄Name
 "comm⁄Name"

	)

2142 
	#NID_comm⁄Name
 13

	)

2143 
	#OBJ_comm⁄Name
 
OBJ_X509
,3L

	)

2145 
	#SN_su∫ame
 "SN"

	)

2146 
	#LN_su∫ame
 "su∫ame"

	)

2147 
	#NID_su∫ame
 100

	)

2148 
	#OBJ_su∫ame
 
OBJ_X509
,4L

	)

2150 
	#LN_£rülNumbî
 "£rülNumbî"

	)

2151 
	#NID_£rülNumbî
 105

	)

2152 
	#OBJ_£rülNumbî
 
OBJ_X509
,5L

	)

2154 
	#SN_cou¡ryName
 "C"

	)

2155 
	#LN_cou¡ryName
 "cou¡ryName"

	)

2156 
	#NID_cou¡ryName
 14

	)

2157 
	#OBJ_cou¡ryName
 
OBJ_X509
,6L

	)

2159 
	#SN_loˇlôyName
 "L"

	)

2160 
	#LN_loˇlôyName
 "loˇlôyName"

	)

2161 
	#NID_loˇlôyName
 15

	)

2162 
	#OBJ_loˇlôyName
 
OBJ_X509
,7L

	)

2164 
	#SN_°©eOrProvö˚Name
 "ST"

	)

2165 
	#LN_°©eOrProvö˚Name
 "°©eOrProvö˚Name"

	)

2166 
	#NID_°©eOrProvö˚Name
 16

	)

2167 
	#OBJ_°©eOrProvö˚Name
 
OBJ_X509
,8L

	)

2169 
	#SN_°ªëAddªss
 "°ªë"

	)

2170 
	#LN_°ªëAddªss
 "°ªëAddªss"

	)

2171 
	#NID_°ªëAddªss
 660

	)

2172 
	#OBJ_°ªëAddªss
 
OBJ_X509
,9L

	)

2174 
	#SN_‹g™iz©i⁄Name
 "O"

	)

2175 
	#LN_‹g™iz©i⁄Name
 "‹g™iz©i⁄Name"

	)

2176 
	#NID_‹g™iz©i⁄Name
 17

	)

2177 
	#OBJ_‹g™iz©i⁄Name
 
OBJ_X509
,10L

	)

2179 
	#SN_‹g™iz©i⁄ÆUnôName
 "OU"

	)

2180 
	#LN_‹g™iz©i⁄ÆUnôName
 "‹g™iz©i⁄ÆUnôName"

	)

2181 
	#NID_‹g™iz©i⁄ÆUnôName
 18

	)

2182 
	#OBJ_‹g™iz©i⁄ÆUnôName
 
OBJ_X509
,11L

	)

2184 
	#SN_tôÀ
 "tôÀ"

	)

2185 
	#LN_tôÀ
 "tôÀ"

	)

2186 
	#NID_tôÀ
 106

	)

2187 
	#OBJ_tôÀ
 
OBJ_X509
,12L

	)

2189 
	#LN_des¸ùti⁄
 "des¸ùti⁄"

	)

2190 
	#NID_des¸ùti⁄
 107

	)

2191 
	#OBJ_des¸ùti⁄
 
OBJ_X509
,13L

	)

2193 
	#LN_£¨chGuide
 "£¨chGuide"

	)

2194 
	#NID_£¨chGuide
 859

	)

2195 
	#OBJ_£¨chGuide
 
OBJ_X509
,14L

	)

2197 
	#LN_busöessC©eg‹y
 "busöessC©eg‹y"

	)

2198 
	#NID_busöessC©eg‹y
 860

	)

2199 
	#OBJ_busöessC©eg‹y
 
OBJ_X509
,15L

	)

2201 
	#LN_po°ÆAddªss
 "po°ÆAddªss"

	)

2202 
	#NID_po°ÆAddªss
 861

	)

2203 
	#OBJ_po°ÆAddªss
 
OBJ_X509
,16L

	)

2205 
	#LN_po°ÆCode
 "po°ÆCode"

	)

2206 
	#NID_po°ÆCode
 661

	)

2207 
	#OBJ_po°ÆCode
 
OBJ_X509
,17L

	)

2209 
	#LN_po°Offi˚Box
 "po°Offi˚Box"

	)

2210 
	#NID_po°Offi˚Box
 862

	)

2211 
	#OBJ_po°Offi˚Box
 
OBJ_X509
,18L

	)

2213 
	#LN_physiˇlDñivîyOffi˚Name
 "physiˇlDñivîyOffi˚Name"

	)

2214 
	#NID_physiˇlDñivîyOffi˚Name
 863

	)

2215 
	#OBJ_physiˇlDñivîyOffi˚Name
 
OBJ_X509
,19L

	)

2217 
	#LN_ãÀph⁄eNumbî
 "ãÀph⁄eNumbî"

	)

2218 
	#NID_ãÀph⁄eNumbî
 864

	)

2219 
	#OBJ_ãÀph⁄eNumbî
 
OBJ_X509
,20L

	)

2221 
	#LN_ãÀxNumbî
 "ãÀxNumbî"

	)

2222 
	#NID_ãÀxNumbî
 865

	)

2223 
	#OBJ_ãÀxNumbî
 
OBJ_X509
,21L

	)

2225 
	#LN_ãÀãxTîmöÆIdítifõr
 "ãÀãxTîmöÆIdítifõr"

	)

2226 
	#NID_ãÀãxTîmöÆIdítifõr
 866

	)

2227 
	#OBJ_ãÀãxTîmöÆIdítifõr
 
OBJ_X509
,22L

	)

2229 
	#LN_ÁcsimûeTñïh⁄eNumbî
 "ÁcsimûeTñïh⁄eNumbî"

	)

2230 
	#NID_ÁcsimûeTñïh⁄eNumbî
 867

	)

2231 
	#OBJ_ÁcsimûeTñïh⁄eNumbî
 
OBJ_X509
,23L

	)

2233 
	#LN_x121Addªss
 "x121Addªss"

	)

2234 
	#NID_x121Addªss
 868

	)

2235 
	#OBJ_x121Addªss
 
OBJ_X509
,24L

	)

2237 
	#LN_öã∫©i⁄ÆiSDNNumbî
 "öã∫©i⁄ÆiSDNNumbî"

	)

2238 
	#NID_öã∫©i⁄ÆiSDNNumbî
 869

	)

2239 
	#OBJ_öã∫©i⁄ÆiSDNNumbî
 
OBJ_X509
,25L

	)

2241 
	#LN_ªgi°îedAddªss
 "ªgi°îedAddªss"

	)

2242 
	#NID_ªgi°îedAddªss
 870

	)

2243 
	#OBJ_ªgi°îedAddªss
 
OBJ_X509
,26L

	)

2245 
	#LN_de°ö©i⁄Indiˇt‹
 "de°ö©i⁄Indiˇt‹"

	)

2246 
	#NID_de°ö©i⁄Indiˇt‹
 871

	)

2247 
	#OBJ_de°ö©i⁄Indiˇt‹
 
OBJ_X509
,27L

	)

2249 
	#LN_¥e„ºedDñivîyMëhod
 "¥e„ºedDñivîyMëhod"

	)

2250 
	#NID_¥e„ºedDñivîyMëhod
 872

	)

2251 
	#OBJ_¥e„ºedDñivîyMëhod
 
OBJ_X509
,28L

	)

2253 
	#LN_¥e£¡©i⁄Addªss
 "¥e£¡©i⁄Addªss"

	)

2254 
	#NID_¥e£¡©i⁄Addªss
 873

	)

2255 
	#OBJ_¥e£¡©i⁄Addªss
 
OBJ_X509
,29L

	)

2257 
	#LN_suµ‹ãdAµliˇti⁄C⁄ãxt
 "suµ‹ãdAµliˇti⁄C⁄ãxt"

	)

2258 
	#NID_suµ‹ãdAµliˇti⁄C⁄ãxt
 874

	)

2259 
	#OBJ_suµ‹ãdAµliˇti⁄C⁄ãxt
 
OBJ_X509
,30L

	)

2261 
	#SN_membî
 "membî"

	)

2262 
	#NID_membî
 875

	)

2263 
	#OBJ_membî
 
OBJ_X509
,31L

	)

2265 
	#SN_ow√r
 "ow√r"

	)

2266 
	#NID_ow√r
 876

	)

2267 
	#OBJ_ow√r
 
OBJ_X509
,32L

	)

2269 
	#LN_rﬁeOccu∑¡
 "rﬁeOccu∑¡"

	)

2270 
	#NID_rﬁeOccu∑¡
 877

	)

2271 
	#OBJ_rﬁeOccu∑¡
 
OBJ_X509
,33L

	)

2273 
	#SN_£eAlso
 "£eAlso"

	)

2274 
	#NID_£eAlso
 878

	)

2275 
	#OBJ_£eAlso
 
OBJ_X509
,34L

	)

2277 
	#LN_u£rPassw‹d
 "u£rPassw‹d"

	)

2278 
	#NID_u£rPassw‹d
 879

	)

2279 
	#OBJ_u£rPassw‹d
 
OBJ_X509
,35L

	)

2281 
	#LN_u£rCîtifiˇã
 "u£rCîtifiˇã"

	)

2282 
	#NID_u£rCîtifiˇã
 880

	)

2283 
	#OBJ_u£rCîtifiˇã
 
OBJ_X509
,36L

	)

2285 
	#LN_cACîtifiˇã
 "cACîtifiˇã"

	)

2286 
	#NID_cACîtifiˇã
 881

	)

2287 
	#OBJ_cACîtifiˇã
 
OBJ_X509
,37L

	)

2289 
	#LN_auth‹ôyRevoˇti⁄Li°
 "auth‹ôyRevoˇti⁄Li°"

	)

2290 
	#NID_auth‹ôyRevoˇti⁄Li°
 882

	)

2291 
	#OBJ_auth‹ôyRevoˇti⁄Li°
 
OBJ_X509
,38L

	)

2293 
	#LN_˚πifiˇãRevoˇti⁄Li°
 "˚πifiˇãRevoˇti⁄Li°"

	)

2294 
	#NID_˚πifiˇãRevoˇti⁄Li°
 883

	)

2295 
	#OBJ_˚πifiˇãRevoˇti⁄Li°
 
OBJ_X509
,39L

	)

2297 
	#LN_¸ossCîtifiˇãPaú
 "¸ossCîtifiˇãPaú"

	)

2298 
	#NID_¸ossCîtifiˇãPaú
 884

	)

2299 
	#OBJ_¸ossCîtifiˇãPaú
 
OBJ_X509
,40L

	)

2301 
	#SN_«me
 "«me"

	)

2302 
	#LN_«me
 "«me"

	)

2303 
	#NID_«me
 173

	)

2304 
	#OBJ_«me
 
OBJ_X509
,41L

	)

2306 
	#SN_givíName
 "GN"

	)

2307 
	#LN_givíName
 "givíName"

	)

2308 
	#NID_givíName
 99

	)

2309 
	#OBJ_givíName
 
OBJ_X509
,42L

	)

2311 
	#SN_öôüls
 "öôüls"

	)

2312 
	#LN_öôüls
 "öôüls"

	)

2313 
	#NID_öôüls
 101

	)

2314 
	#OBJ_öôüls
 
OBJ_X509
,43L

	)

2316 
	#LN_gíî©i⁄QuÆifõr
 "gíî©i⁄QuÆifõr"

	)

2317 
	#NID_gíî©i⁄QuÆifõr
 509

	)

2318 
	#OBJ_gíî©i⁄QuÆifõr
 
OBJ_X509
,44L

	)

2320 
	#LN_x500UniqueIdítifõr
 "x500UniqueIdítifõr"

	)

2321 
	#NID_x500UniqueIdítifõr
 503

	)

2322 
	#OBJ_x500UniqueIdítifõr
 
OBJ_X509
,45L

	)

2324 
	#SN_dnQuÆifõr
 "dnQuÆifõr"

	)

2325 
	#LN_dnQuÆifõr
 "dnQuÆifõr"

	)

2326 
	#NID_dnQuÆifõr
 174

	)

2327 
	#OBJ_dnQuÆifõr
 
OBJ_X509
,46L

	)

2329 
	#LN_íh™˚dSórchGuide
 "íh™˚dSórchGuide"

	)

2330 
	#NID_íh™˚dSórchGuide
 885

	)

2331 
	#OBJ_íh™˚dSórchGuide
 
OBJ_X509
,47L

	)

2333 
	#LN_¥ŸocﬁInf‹m©i⁄
 "¥ŸocﬁInf‹m©i⁄"

	)

2334 
	#NID_¥ŸocﬁInf‹m©i⁄
 886

	)

2335 
	#OBJ_¥ŸocﬁInf‹m©i⁄
 
OBJ_X509
,48L

	)

2337 
	#LN_di°öguishedName
 "di°öguishedName"

	)

2338 
	#NID_di°öguishedName
 887

	)

2339 
	#OBJ_di°öguishedName
 
OBJ_X509
,49L

	)

2341 
	#LN_uniqueMembî
 "uniqueMembî"

	)

2342 
	#NID_uniqueMembî
 888

	)

2343 
	#OBJ_uniqueMembî
 
OBJ_X509
,50L

	)

2345 
	#LN_hou£Idítifõr
 "hou£Idítifõr"

	)

2346 
	#NID_hou£Idítifõr
 889

	)

2347 
	#OBJ_hou£Idítifõr
 
OBJ_X509
,51L

	)

2349 
	#LN_suµ‹ãdAlg‹ôhms
 "suµ‹ãdAlg‹ôhms"

	)

2350 
	#NID_suµ‹ãdAlg‹ôhms
 890

	)

2351 
	#OBJ_suµ‹ãdAlg‹ôhms
 
OBJ_X509
,52L

	)

2353 
	#LN_dñèRevoˇti⁄Li°
 "dñèRevoˇti⁄Li°"

	)

2354 
	#NID_dñèRevoˇti⁄Li°
 891

	)

2355 
	#OBJ_dñèRevoˇti⁄Li°
 
OBJ_X509
,53L

	)

2357 
	#SN_dmdName
 "dmdName"

	)

2358 
	#NID_dmdName
 892

	)

2359 
	#OBJ_dmdName
 
OBJ_X509
,54L

	)

2361 
	#LN_p£ud⁄ym
 "p£ud⁄ym"

	)

2362 
	#NID_p£ud⁄ym
 510

	)

2363 
	#OBJ_p£ud⁄ym
 
OBJ_X509
,65L

	)

2365 
	#SN_rﬁe
 "rﬁe"

	)

2366 
	#LN_rﬁe
 "rﬁe"

	)

2367 
	#NID_rﬁe
 400

	)

2368 
	#OBJ_rﬁe
 
OBJ_X509
,72L

	)

2370 
	#LN_‹g™iz©i⁄Idítifõr
 "‹g™iz©i⁄Idítifõr"

	)

2371 
	#NID_‹g™iz©i⁄Idítifõr
 1089

	)

2372 
	#OBJ_‹g™iz©i⁄Idítifõr
 
OBJ_X509
,97L

	)

2374 
	#SN_cou¡ryCode3c
 "c3"

	)

2375 
	#LN_cou¡ryCode3c
 "cou¡ryCode3c"

	)

2376 
	#NID_cou¡ryCode3c
 1090

	)

2377 
	#OBJ_cou¡ryCode3c
 
OBJ_X509
,98L

	)

2379 
	#SN_cou¡ryCode3n
 "n3"

	)

2380 
	#LN_cou¡ryCode3n
 "cou¡ryCode3n"

	)

2381 
	#NID_cou¡ryCode3n
 1091

	)

2382 
	#OBJ_cou¡ryCode3n
 
OBJ_X509
,99L

	)

2384 
	#LN_dnsName
 "dnsName"

	)

2385 
	#NID_dnsName
 1092

	)

2386 
	#OBJ_dnsName
 
OBJ_X509
,100L

	)

2388 
	#SN_X500Æg‹ôhms
 "X500Æg‹ôhms"

	)

2389 
	#LN_X500Æg‹ôhms
 "dúe˘‹y sîvi˚†-álg‹ôhms"

	)

2390 
	#NID_X500Æg‹ôhms
 378

	)

2391 
	#OBJ_X500Æg‹ôhms
 
OBJ_X500
,8L

	)

2393 
	#SN_rß
 "RSA"

	)

2394 
	#LN_rß
 "rß"

	)

2395 
	#NID_rß
 19

	)

2396 
	#OBJ_rß
 
OBJ_X500Æg‹ôhms
,1L,1L

	)

2398 
	#SN_mdc2WôhRSA
 "RSA-MDC2"

	)

2399 
	#LN_mdc2WôhRSA
 "mdc2WôhRSA"

	)

2400 
	#NID_mdc2WôhRSA
 96

	)

2401 
	#OBJ_mdc2WôhRSA
 
OBJ_X500Æg‹ôhms
,3L,100L

	)

2403 
	#SN_mdc2
 "MDC2"

	)

2404 
	#LN_mdc2
 "mdc2"

	)

2405 
	#NID_mdc2
 95

	)

2406 
	#OBJ_mdc2
 
OBJ_X500Æg‹ôhms
,3L,101L

	)

2408 
	#SN_id_˚
 "id-˚"

	)

2409 
	#NID_id_˚
 81

	)

2410 
	#OBJ_id_˚
 
OBJ_X500
,29L

	)

2412 
	#SN_subje˘_dúe˘‹y_©åibuãs
 "subje˘Dúe˘‹yAâribuãs"

	)

2413 
	#LN_subje˘_dúe˘‹y_©åibuãs
 "X509v3 Subje˘ Dúe˘‹y Aâribuãs"

	)

2414 
	#NID_subje˘_dúe˘‹y_©åibuãs
 769

	)

2415 
	#OBJ_subje˘_dúe˘‹y_©åibuãs
 
OBJ_id_˚
,9L

	)

2417 
	#SN_subje˘_key_idítifõr
 "subje˘KeyIdítifõr"

	)

2418 
	#LN_subje˘_key_idítifõr
 "X509v3 Subje˘ Key Idítifõr"

	)

2419 
	#NID_subje˘_key_idítifõr
 82

	)

2420 
	#OBJ_subje˘_key_idítifõr
 
OBJ_id_˚
,14L

	)

2422 
	#SN_key_ußge
 "keyUßge"

	)

2423 
	#LN_key_ußge
 "X509v3 Key Ußge"

	)

2424 
	#NID_key_ußge
 83

	)

2425 
	#OBJ_key_ußge
 
OBJ_id_˚
,15L

	)

2427 
	#SN_¥iv©e_key_ußge_≥riod
 "¥iv©eKeyUßgePîiod"

	)

2428 
	#LN_¥iv©e_key_ußge_≥riod
 "X509v3 Priv©êKey UßgêPîiod"

	)

2429 
	#NID_¥iv©e_key_ußge_≥riod
 84

	)

2430 
	#OBJ_¥iv©e_key_ußge_≥riod
 
OBJ_id_˚
,16L

	)

2432 
	#SN_subje˘_Æt_«me
 "subje˘A…Name"

	)

2433 
	#LN_subje˘_Æt_«me
 "X509v3 Subje˘ A…î«tivêName"

	)

2434 
	#NID_subje˘_Æt_«me
 85

	)

2435 
	#OBJ_subje˘_Æt_«me
 
OBJ_id_˚
,17L

	)

2437 
	#SN_issuî_Æt_«me
 "issuîA…Name"

	)

2438 
	#LN_issuî_Æt_«me
 "X509v3 Issuî A…î«tivêName"

	)

2439 
	#NID_issuî_Æt_«me
 86

	)

2440 
	#OBJ_issuî_Æt_«me
 
OBJ_id_˚
,18L

	)

2442 
	#SN_basic_c⁄°øöts
 "basicC⁄°øöts"

	)

2443 
	#LN_basic_c⁄°øöts
 "X509v3 Basi¯C⁄°øöts"

	)

2444 
	#NID_basic_c⁄°øöts
 87

	)

2445 
	#OBJ_basic_c⁄°øöts
 
OBJ_id_˚
,19L

	)

2447 
	#SN_¸l_numbî
 "¸lNumbî"

	)

2448 
	#LN_¸l_numbî
 "X509v3 CRL Numbî"

	)

2449 
	#NID_¸l_numbî
 88

	)

2450 
	#OBJ_¸l_numbî
 
OBJ_id_˚
,20L

	)

2452 
	#SN_¸l_ªas⁄
 "CRLRós⁄"

	)

2453 
	#LN_¸l_ªas⁄
 "X509v3 CRL Rós⁄ Code"

	)

2454 
	#NID_¸l_ªas⁄
 141

	)

2455 
	#OBJ_¸l_ªas⁄
 
OBJ_id_˚
,21L

	)

2457 
	#SN_övÆidôy_d©e
 "övÆidôyD©e"

	)

2458 
	#LN_övÆidôy_d©e
 "InvÆidôy D©e"

	)

2459 
	#NID_övÆidôy_d©e
 142

	)

2460 
	#OBJ_övÆidôy_d©e
 
OBJ_id_˚
,24L

	)

2462 
	#SN_dñè_¸l
 "dñèCRL"

	)

2463 
	#LN_dñè_¸l
 "X509v3 Dñè CRL Indiˇt‹"

	)

2464 
	#NID_dñè_¸l
 140

	)

2465 
	#OBJ_dñè_¸l
 
OBJ_id_˚
,27L

	)

2467 
	#SN_issuög_di°ributi⁄_poöt
 "issuögDi°ributi⁄Poöt"

	)

2468 
	#LN_issuög_di°ributi⁄_poöt
 "X509v3 Issuög Di°ributi⁄ Poöt"

	)

2469 
	#NID_issuög_di°ributi⁄_poöt
 770

	)

2470 
	#OBJ_issuög_di°ributi⁄_poöt
 
OBJ_id_˚
,28L

	)

2472 
	#SN_˚πifiˇã_issuî
 "˚πifiˇãIssuî"

	)

2473 
	#LN_˚πifiˇã_issuî
 "X509v3 Cîtifiˇã Issuî"

	)

2474 
	#NID_˚πifiˇã_issuî
 771

	)

2475 
	#OBJ_˚πifiˇã_issuî
 
OBJ_id_˚
,29L

	)

2477 
	#SN_«me_c⁄°øöts
 "«meC⁄°øöts"

	)

2478 
	#LN_«me_c⁄°øöts
 "X509v3 NamêC⁄°øöts"

	)

2479 
	#NID_«me_c⁄°øöts
 666

	)

2480 
	#OBJ_«me_c⁄°øöts
 
OBJ_id_˚
,30L

	)

2482 
	#SN_¸l_di°ributi⁄_poöts
 "¸lDi°ributi⁄Poöts"

	)

2483 
	#LN_¸l_di°ributi⁄_poöts
 "X509v3 CRL Di°ributi⁄ Poöts"

	)

2484 
	#NID_¸l_di°ributi⁄_poöts
 103

	)

2485 
	#OBJ_¸l_di°ributi⁄_poöts
 
OBJ_id_˚
,31L

	)

2487 
	#SN_˚πifiˇã_pﬁicõs
 "˚πifiˇãPﬁicõs"

	)

2488 
	#LN_˚πifiˇã_pﬁicõs
 "X509v3 Cîtifiˇã Pﬁicõs"

	)

2489 
	#NID_˚πifiˇã_pﬁicõs
 89

	)

2490 
	#OBJ_˚πifiˇã_pﬁicõs
 
OBJ_id_˚
,32L

	)

2492 
	#SN_™y_pﬁicy
 "™yPﬁicy"

	)

2493 
	#LN_™y_pﬁicy
 "X509v3 Any Pﬁicy"

	)

2494 
	#NID_™y_pﬁicy
 746

	)

2495 
	#OBJ_™y_pﬁicy
 
OBJ_˚πifiˇã_pﬁicõs
,0L

	)

2497 
	#SN_pﬁicy_m≠pögs
 "pﬁicyM≠pögs"

	)

2498 
	#LN_pﬁicy_m≠pögs
 "X509v3 Pﬁicy M≠pögs"

	)

2499 
	#NID_pﬁicy_m≠pögs
 747

	)

2500 
	#OBJ_pﬁicy_m≠pögs
 
OBJ_id_˚
,33L

	)

2502 
	#SN_auth‹ôy_key_idítifõr
 "auth‹ôyKeyIdítifõr"

	)

2503 
	#LN_auth‹ôy_key_idítifõr
 "X509v3 Auth‹ôy Key Idítifõr"

	)

2504 
	#NID_auth‹ôy_key_idítifõr
 90

	)

2505 
	#OBJ_auth‹ôy_key_idítifõr
 
OBJ_id_˚
,35L

	)

2507 
	#SN_pﬁicy_c⁄°øöts
 "pﬁicyC⁄°øöts"

	)

2508 
	#LN_pﬁicy_c⁄°øöts
 "X509v3 Pﬁicy C⁄°øöts"

	)

2509 
	#NID_pﬁicy_c⁄°øöts
 401

	)

2510 
	#OBJ_pﬁicy_c⁄°øöts
 
OBJ_id_˚
,36L

	)

2512 
	#SN_ext_key_ußge
 "exãndedKeyUßge"

	)

2513 
	#LN_ext_key_ußge
 "X509v3 Exãnded Key Ußge"

	)

2514 
	#NID_ext_key_ußge
 126

	)

2515 
	#OBJ_ext_key_ußge
 
OBJ_id_˚
,37L

	)

2517 
	#SN_‰eshe°_¸l
 "‰eshe°CRL"

	)

2518 
	#LN_‰eshe°_¸l
 "X509v3 Fªshe° CRL"

	)

2519 
	#NID_‰eshe°_¸l
 857

	)

2520 
	#OBJ_‰eshe°_¸l
 
OBJ_id_˚
,46L

	)

2522 
	#SN_öhibô_™y_pﬁicy
 "öhibôAnyPﬁicy"

	)

2523 
	#LN_öhibô_™y_pﬁicy
 "X509v3 Inhibô Any Pﬁicy"

	)

2524 
	#NID_öhibô_™y_pﬁicy
 748

	)

2525 
	#OBJ_öhibô_™y_pﬁicy
 
OBJ_id_˚
,54L

	)

2527 
	#SN_èrgë_öf‹m©i⁄
 "èrgëInf‹m©i⁄"

	)

2528 
	#LN_èrgë_öf‹m©i⁄
 "X509v3 AC T¨gëög"

	)

2529 
	#NID_èrgë_öf‹m©i⁄
 402

	)

2530 
	#OBJ_èrgë_öf‹m©i⁄
 
OBJ_id_˚
,55L

	)

2532 
	#SN_no_ªv_avaû
 "noRevAvaû"

	)

2533 
	#LN_no_ªv_avaû
 "X509v3 NÿRevoˇti⁄ AvaûabÀ"

	)

2534 
	#NID_no_ªv_avaû
 403

	)

2535 
	#OBJ_no_ªv_avaû
 
OBJ_id_˚
,56L

	)

2537 
	#SN_™yExãndedKeyUßge
 "™yExãndedKeyUßge"

	)

2538 
	#LN_™yExãndedKeyUßge
 "Any Exãnded Key Ußge"

	)

2539 
	#NID_™yExãndedKeyUßge
 910

	)

2540 
	#OBJ_™yExãndedKeyUßge
 
OBJ_ext_key_ußge
,0L

	)

2542 
	#SN_√tsˇ≥
 "Nësˇ≥"

	)

2543 
	#LN_√tsˇ≥
 "Nësˇ≥ Communiˇti⁄†C‹p."

	)

2544 
	#NID_√tsˇ≥
 57

	)

2545 
	#OBJ_√tsˇ≥
 2L,16L,840L,1L,113730L

	)

2547 
	#SN_√tsˇ≥_˚π_exãnsi⁄
 "nsCîtExt"

	)

2548 
	#LN_√tsˇ≥_˚π_exãnsi⁄
 "Nësˇ≥ Cîtifiˇã Exãnsi⁄"

	)

2549 
	#NID_√tsˇ≥_˚π_exãnsi⁄
 58

	)

2550 
	#OBJ_√tsˇ≥_˚π_exãnsi⁄
 
OBJ_√tsˇ≥
,1L

	)

2552 
	#SN_√tsˇ≥_d©a_ty≥
 "nsD©aTy≥"

	)

2553 
	#LN_√tsˇ≥_d©a_ty≥
 "Nësˇ≥ D©®Ty≥"

	)

2554 
	#NID_√tsˇ≥_d©a_ty≥
 59

	)

2555 
	#OBJ_√tsˇ≥_d©a_ty≥
 
OBJ_√tsˇ≥
,2L

	)

2557 
	#SN_√tsˇ≥_˚π_ty≥
 "nsCîtTy≥"

	)

2558 
	#LN_√tsˇ≥_˚π_ty≥
 "Nësˇ≥ CîàTy≥"

	)

2559 
	#NID_√tsˇ≥_˚π_ty≥
 71

	)

2560 
	#OBJ_√tsˇ≥_˚π_ty≥
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,1L

	)

2562 
	#SN_√tsˇ≥_ba£_uæ
 "nsBa£Uæ"

	)

2563 
	#LN_√tsˇ≥_ba£_uæ
 "Nësˇ≥ Ba£ Uæ"

	)

2564 
	#NID_√tsˇ≥_ba£_uæ
 72

	)

2565 
	#OBJ_√tsˇ≥_ba£_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,2L

	)

2567 
	#SN_√tsˇ≥_ªvoˇti⁄_uæ
 "nsRevoˇti⁄Uæ"

	)

2568 
	#LN_√tsˇ≥_ªvoˇti⁄_uæ
 "Nësˇ≥ Revoˇti⁄ Uæ"

	)

2569 
	#NID_√tsˇ≥_ªvoˇti⁄_uæ
 73

	)

2570 
	#OBJ_√tsˇ≥_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,3L

	)

2572 
	#SN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "nsCaRevoˇti⁄Uæ"

	)

2573 
	#LN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "Nësˇ≥ CA Revoˇti⁄ Uæ"

	)

2574 
	#NID_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 74

	)

2575 
	#OBJ_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,4L

	)

2577 
	#SN_√tsˇ≥_ª√wÆ_uæ
 "nsRíewÆUæ"

	)

2578 
	#LN_√tsˇ≥_ª√wÆ_uæ
 "Nësˇ≥ RíewÆ Uæ"

	)

2579 
	#NID_√tsˇ≥_ª√wÆ_uæ
 75

	)

2580 
	#OBJ_√tsˇ≥_ª√wÆ_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,7L

	)

2582 
	#SN_√tsˇ≥_ˇ_pﬁicy_uæ
 "nsCaPﬁicyUæ"

	)

2583 
	#LN_√tsˇ≥_ˇ_pﬁicy_uæ
 "Nësˇ≥ CA Pﬁicy Uæ"

	)

2584 
	#NID_√tsˇ≥_ˇ_pﬁicy_uæ
 76

	)

2585 
	#OBJ_√tsˇ≥_ˇ_pﬁicy_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,8L

	)

2587 
	#SN_√tsˇ≥_s¶_£rvî_«me
 "nsS¶SîvîName"

	)

2588 
	#LN_√tsˇ≥_s¶_£rvî_«me
 "Nësˇ≥ SSL Sîvî Name"

	)

2589 
	#NID_√tsˇ≥_s¶_£rvî_«me
 77

	)

2590 
	#OBJ_√tsˇ≥_s¶_£rvî_«me
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,12L

	)

2592 
	#SN_√tsˇ≥_commít
 "nsCommít"

	)

2593 
	#LN_√tsˇ≥_commít
 "Nësˇ≥ Commít"

	)

2594 
	#NID_√tsˇ≥_commít
 78

	)

2595 
	#OBJ_√tsˇ≥_commít
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,13L

	)

2597 
	#SN_√tsˇ≥_˚π_£quí˚
 "nsCîtSequí˚"

	)

2598 
	#LN_√tsˇ≥_˚π_£quí˚
 "Nësˇ≥ Cîtifiˇã Sequí˚"

	)

2599 
	#NID_√tsˇ≥_˚π_£quí˚
 79

	)

2600 
	#OBJ_√tsˇ≥_˚π_£quí˚
 
OBJ_√tsˇ≥_d©a_ty≥
,5L

	)

2602 
	#SN_ns_sgc
 "nsSGC"

	)

2603 
	#LN_ns_sgc
 "Nësˇ≥ Sîvî G©ed Cry±o"

	)

2604 
	#NID_ns_sgc
 139

	)

2605 
	#OBJ_ns_sgc
 
OBJ_√tsˇ≥
,4L,1L

	)

2607 
	#SN_‹g
 "ORG"

	)

2608 
	#LN_‹g
 "‹g"

	)

2609 
	#NID_‹g
 379

	)

2610 
	#OBJ_‹g
 
OBJ_iso
,3L

	)

2612 
	#SN_dod
 "DOD"

	)

2613 
	#LN_dod
 "dod"

	)

2614 
	#NID_dod
 380

	)

2615 
	#OBJ_dod
 
OBJ_‹g
,6L

	)

2617 
	#SN_ü«
 "IANA"

	)

2618 
	#LN_ü«
 "ü«"

	)

2619 
	#NID_ü«
 381

	)

2620 
	#OBJ_ü«
 
OBJ_dod
,1L

	)

2622 
	#OBJ_öã∫ë
 
OBJ_ü«


	)

2624 
	#SN_Dúe˘‹y
 "dúe˘‹y"

	)

2625 
	#LN_Dúe˘‹y
 "Dúe˘‹y"

	)

2626 
	#NID_Dúe˘‹y
 382

	)

2627 
	#OBJ_Dúe˘‹y
 
OBJ_öã∫ë
,1L

	)

2629 
	#SN_M™agemít
 "mgmt"

	)

2630 
	#LN_M™agemít
 "M™agemít"

	)

2631 
	#NID_M™agemít
 383

	)

2632 
	#OBJ_M™agemít
 
OBJ_öã∫ë
,2L

	)

2634 
	#SN_Ex≥rimíèl
 "ex≥rimíèl"

	)

2635 
	#LN_Ex≥rimíèl
 "Ex≥rimíèl"

	)

2636 
	#NID_Ex≥rimíèl
 384

	)

2637 
	#OBJ_Ex≥rimíèl
 
OBJ_öã∫ë
,3L

	)

2639 
	#SN_Priv©e
 "¥iv©e"

	)

2640 
	#LN_Priv©e
 "Priv©e"

	)

2641 
	#NID_Priv©e
 385

	)

2642 
	#OBJ_Priv©e
 
OBJ_öã∫ë
,4L

	)

2644 
	#SN_Securôy
 "£curôy"

	)

2645 
	#LN_Securôy
 "Securôy"

	)

2646 
	#NID_Securôy
 386

	)

2647 
	#OBJ_Securôy
 
OBJ_öã∫ë
,5L

	)

2649 
	#SN_SNMPv2
 "¢mpv2"

	)

2650 
	#LN_SNMPv2
 "SNMPv2"

	)

2651 
	#NID_SNMPv2
 387

	)

2652 
	#OBJ_SNMPv2
 
OBJ_öã∫ë
,6L

	)

2654 
	#LN_Maû
 "Maû"

	)

2655 
	#NID_Maû
 388

	)

2656 
	#OBJ_Maû
 
OBJ_öã∫ë
,7L

	)

2658 
	#SN_E¡î¥i£s
 "íãΩri£s"

	)

2659 
	#LN_E¡î¥i£s
 "E¡î¥i£s"

	)

2660 
	#NID_E¡î¥i£s
 389

	)

2661 
	#OBJ_E¡î¥i£s
 
OBJ_Priv©e
,1L

	)

2663 
	#SN_dcObje˘
 "dcobje˘"

	)

2664 
	#LN_dcObje˘
 "dcObje˘"

	)

2665 
	#NID_dcObje˘
 390

	)

2666 
	#OBJ_dcObje˘
 
OBJ_E¡î¥i£s
,1466L,344L

	)

2668 
	#SN_mime_mhs
 "mime-mhs"

	)

2669 
	#LN_mime_mhs
 "MIME MHS"

	)

2670 
	#NID_mime_mhs
 504

	)

2671 
	#OBJ_mime_mhs
 
OBJ_Maû
,1L

	)

2673 
	#SN_mime_mhs_hódögs
 "mime-mhs-hódögs"

	)

2674 
	#LN_mime_mhs_hódögs
 "mime-mhs-hódögs"

	)

2675 
	#NID_mime_mhs_hódögs
 505

	)

2676 
	#OBJ_mime_mhs_hódögs
 
OBJ_mime_mhs
,1L

	)

2678 
	#SN_mime_mhs_bodõs
 "mime-mhs-bodõs"

	)

2679 
	#LN_mime_mhs_bodõs
 "mime-mhs-bodõs"

	)

2680 
	#NID_mime_mhs_bodõs
 506

	)

2681 
	#OBJ_mime_mhs_bodõs
 
OBJ_mime_mhs
,2L

	)

2683 
	#SN_id_hex_∑πül_mesßge
 "id-hex-∑πül-mesßge"

	)

2684 
	#LN_id_hex_∑πül_mesßge
 "id-hex-∑πül-mesßge"

	)

2685 
	#NID_id_hex_∑πül_mesßge
 507

	)

2686 
	#OBJ_id_hex_∑πül_mesßge
 
OBJ_mime_mhs_hódögs
,1L

	)

2688 
	#SN_id_hex_mu…ù¨t_mesßge
 "id-hex-mu…ù¨t-mesßge"

	)

2689 
	#LN_id_hex_mu…ù¨t_mesßge
 "id-hex-mu…ù¨t-mesßge"

	)

2690 
	#NID_id_hex_mu…ù¨t_mesßge
 508

	)

2691 
	#OBJ_id_hex_mu…ù¨t_mesßge
 
OBJ_mime_mhs_hódögs
,2L

	)

2693 
	#SN_zlib_com¥essi⁄
 "ZLIB"

	)

2694 
	#LN_zlib_com¥essi⁄
 "zlib com¥essi⁄"

	)

2695 
	#NID_zlib_com¥essi⁄
 125

	)

2696 
	#OBJ_zlib_com¥essi⁄
 
OBJ_id_smime_Æg
,8L

	)

2698 
	#OBJ_cs‹
 2L,16L,840L,1L,101L,3L

	)

2700 
	#OBJ_ni°Alg‹ôhms
 
OBJ_cs‹
,4L

	)

2702 
	#OBJ_´s
 
OBJ_ni°Alg‹ôhms
,1L

	)

2704 
	#SN_´s_128_ecb
 "AES-128-ECB"

	)

2705 
	#LN_´s_128_ecb
 "´s-128-ecb"

	)

2706 
	#NID_´s_128_ecb
 418

	)

2707 
	#OBJ_´s_128_ecb
 
OBJ_´s
,1L

	)

2709 
	#SN_´s_128_cbc
 "AES-128-CBC"

	)

2710 
	#LN_´s_128_cbc
 "´s-128-cbc"

	)

2711 
	#NID_´s_128_cbc
 419

	)

2712 
	#OBJ_´s_128_cbc
 
OBJ_´s
,2L

	)

2714 
	#SN_´s_128_ofb128
 "AES-128-OFB"

	)

2715 
	#LN_´s_128_ofb128
 "´s-128-ofb"

	)

2716 
	#NID_´s_128_ofb128
 420

	)

2717 
	#OBJ_´s_128_ofb128
 
OBJ_´s
,3L

	)

2719 
	#SN_´s_128_cfb128
 "AES-128-CFB"

	)

2720 
	#LN_´s_128_cfb128
 "´s-128-cfb"

	)

2721 
	#NID_´s_128_cfb128
 421

	)

2722 
	#OBJ_´s_128_cfb128
 
OBJ_´s
,4L

	)

2724 
	#SN_id_´s128_wøp
 "id-´s128-wøp"

	)

2725 
	#NID_id_´s128_wøp
 788

	)

2726 
	#OBJ_id_´s128_wøp
 
OBJ_´s
,5L

	)

2728 
	#SN_´s_128_gcm
 "id-´s128-GCM"

	)

2729 
	#LN_´s_128_gcm
 "´s-128-gcm"

	)

2730 
	#NID_´s_128_gcm
 895

	)

2731 
	#OBJ_´s_128_gcm
 
OBJ_´s
,6L

	)

2733 
	#SN_´s_128_ccm
 "id-´s128-CCM"

	)

2734 
	#LN_´s_128_ccm
 "´s-128-ccm"

	)

2735 
	#NID_´s_128_ccm
 896

	)

2736 
	#OBJ_´s_128_ccm
 
OBJ_´s
,7L

	)

2738 
	#SN_id_´s128_wøp_∑d
 "id-´s128-wøp-∑d"

	)

2739 
	#NID_id_´s128_wøp_∑d
 897

	)

2740 
	#OBJ_id_´s128_wøp_∑d
 
OBJ_´s
,8L

	)

2742 
	#SN_´s_192_ecb
 "AES-192-ECB"

	)

2743 
	#LN_´s_192_ecb
 "´s-192-ecb"

	)

2744 
	#NID_´s_192_ecb
 422

	)

2745 
	#OBJ_´s_192_ecb
 
OBJ_´s
,21L

	)

2747 
	#SN_´s_192_cbc
 "AES-192-CBC"

	)

2748 
	#LN_´s_192_cbc
 "´s-192-cbc"

	)

2749 
	#NID_´s_192_cbc
 423

	)

2750 
	#OBJ_´s_192_cbc
 
OBJ_´s
,22L

	)

2752 
	#SN_´s_192_ofb128
 "AES-192-OFB"

	)

2753 
	#LN_´s_192_ofb128
 "´s-192-ofb"

	)

2754 
	#NID_´s_192_ofb128
 424

	)

2755 
	#OBJ_´s_192_ofb128
 
OBJ_´s
,23L

	)

2757 
	#SN_´s_192_cfb128
 "AES-192-CFB"

	)

2758 
	#LN_´s_192_cfb128
 "´s-192-cfb"

	)

2759 
	#NID_´s_192_cfb128
 425

	)

2760 
	#OBJ_´s_192_cfb128
 
OBJ_´s
,24L

	)

2762 
	#SN_id_´s192_wøp
 "id-´s192-wøp"

	)

2763 
	#NID_id_´s192_wøp
 789

	)

2764 
	#OBJ_id_´s192_wøp
 
OBJ_´s
,25L

	)

2766 
	#SN_´s_192_gcm
 "id-´s192-GCM"

	)

2767 
	#LN_´s_192_gcm
 "´s-192-gcm"

	)

2768 
	#NID_´s_192_gcm
 898

	)

2769 
	#OBJ_´s_192_gcm
 
OBJ_´s
,26L

	)

2771 
	#SN_´s_192_ccm
 "id-´s192-CCM"

	)

2772 
	#LN_´s_192_ccm
 "´s-192-ccm"

	)

2773 
	#NID_´s_192_ccm
 899

	)

2774 
	#OBJ_´s_192_ccm
 
OBJ_´s
,27L

	)

2776 
	#SN_id_´s192_wøp_∑d
 "id-´s192-wøp-∑d"

	)

2777 
	#NID_id_´s192_wøp_∑d
 900

	)

2778 
	#OBJ_id_´s192_wøp_∑d
 
OBJ_´s
,28L

	)

2780 
	#SN_´s_256_ecb
 "AES-256-ECB"

	)

2781 
	#LN_´s_256_ecb
 "´s-256-ecb"

	)

2782 
	#NID_´s_256_ecb
 426

	)

2783 
	#OBJ_´s_256_ecb
 
OBJ_´s
,41L

	)

2785 
	#SN_´s_256_cbc
 "AES-256-CBC"

	)

2786 
	#LN_´s_256_cbc
 "´s-256-cbc"

	)

2787 
	#NID_´s_256_cbc
 427

	)

2788 
	#OBJ_´s_256_cbc
 
OBJ_´s
,42L

	)

2790 
	#SN_´s_256_ofb128
 "AES-256-OFB"

	)

2791 
	#LN_´s_256_ofb128
 "´s-256-ofb"

	)

2792 
	#NID_´s_256_ofb128
 428

	)

2793 
	#OBJ_´s_256_ofb128
 
OBJ_´s
,43L

	)

2795 
	#SN_´s_256_cfb128
 "AES-256-CFB"

	)

2796 
	#LN_´s_256_cfb128
 "´s-256-cfb"

	)

2797 
	#NID_´s_256_cfb128
 429

	)

2798 
	#OBJ_´s_256_cfb128
 
OBJ_´s
,44L

	)

2800 
	#SN_id_´s256_wøp
 "id-´s256-wøp"

	)

2801 
	#NID_id_´s256_wøp
 790

	)

2802 
	#OBJ_id_´s256_wøp
 
OBJ_´s
,45L

	)

2804 
	#SN_´s_256_gcm
 "id-´s256-GCM"

	)

2805 
	#LN_´s_256_gcm
 "´s-256-gcm"

	)

2806 
	#NID_´s_256_gcm
 901

	)

2807 
	#OBJ_´s_256_gcm
 
OBJ_´s
,46L

	)

2809 
	#SN_´s_256_ccm
 "id-´s256-CCM"

	)

2810 
	#LN_´s_256_ccm
 "´s-256-ccm"

	)

2811 
	#NID_´s_256_ccm
 902

	)

2812 
	#OBJ_´s_256_ccm
 
OBJ_´s
,47L

	)

2814 
	#SN_id_´s256_wøp_∑d
 "id-´s256-wøp-∑d"

	)

2815 
	#NID_id_´s256_wøp_∑d
 903

	)

2816 
	#OBJ_id_´s256_wøp_∑d
 
OBJ_´s
,48L

	)

2818 
	#SN_´s_128_xts
 "AES-128-XTS"

	)

2819 
	#LN_´s_128_xts
 "´s-128-xts"

	)

2820 
	#NID_´s_128_xts
 913

	)

2821 
	#OBJ_´s_128_xts
 
OBJ_õì_siswg
,0L,1L,1L

	)

2823 
	#SN_´s_256_xts
 "AES-256-XTS"

	)

2824 
	#LN_´s_256_xts
 "´s-256-xts"

	)

2825 
	#NID_´s_256_xts
 914

	)

2826 
	#OBJ_´s_256_xts
 
OBJ_õì_siswg
,0L,1L,2L

	)

2828 
	#SN_´s_128_cfb1
 "AES-128-CFB1"

	)

2829 
	#LN_´s_128_cfb1
 "´s-128-cfb1"

	)

2830 
	#NID_´s_128_cfb1
 650

	)

2832 
	#SN_´s_192_cfb1
 "AES-192-CFB1"

	)

2833 
	#LN_´s_192_cfb1
 "´s-192-cfb1"

	)

2834 
	#NID_´s_192_cfb1
 651

	)

2836 
	#SN_´s_256_cfb1
 "AES-256-CFB1"

	)

2837 
	#LN_´s_256_cfb1
 "´s-256-cfb1"

	)

2838 
	#NID_´s_256_cfb1
 652

	)

2840 
	#SN_´s_128_cfb8
 "AES-128-CFB8"

	)

2841 
	#LN_´s_128_cfb8
 "´s-128-cfb8"

	)

2842 
	#NID_´s_128_cfb8
 653

	)

2844 
	#SN_´s_192_cfb8
 "AES-192-CFB8"

	)

2845 
	#LN_´s_192_cfb8
 "´s-192-cfb8"

	)

2846 
	#NID_´s_192_cfb8
 654

	)

2848 
	#SN_´s_256_cfb8
 "AES-256-CFB8"

	)

2849 
	#LN_´s_256_cfb8
 "´s-256-cfb8"

	)

2850 
	#NID_´s_256_cfb8
 655

	)

2852 
	#SN_´s_128_˘r
 "AES-128-CTR"

	)

2853 
	#LN_´s_128_˘r
 "´s-128-˘r"

	)

2854 
	#NID_´s_128_˘r
 904

	)

2856 
	#SN_´s_192_˘r
 "AES-192-CTR"

	)

2857 
	#LN_´s_192_˘r
 "´s-192-˘r"

	)

2858 
	#NID_´s_192_˘r
 905

	)

2860 
	#SN_´s_256_˘r
 "AES-256-CTR"

	)

2861 
	#LN_´s_256_˘r
 "´s-256-˘r"

	)

2862 
	#NID_´s_256_˘r
 906

	)

2864 
	#SN_´s_128_ocb
 "AES-128-OCB"

	)

2865 
	#LN_´s_128_ocb
 "´s-128-ocb"

	)

2866 
	#NID_´s_128_ocb
 958

	)

2868 
	#SN_´s_192_ocb
 "AES-192-OCB"

	)

2869 
	#LN_´s_192_ocb
 "´s-192-ocb"

	)

2870 
	#NID_´s_192_ocb
 959

	)

2872 
	#SN_´s_256_ocb
 "AES-256-OCB"

	)

2873 
	#LN_´s_256_ocb
 "´s-256-ocb"

	)

2874 
	#NID_´s_256_ocb
 960

	)

2876 
	#SN_des_cfb1
 "DES-CFB1"

	)

2877 
	#LN_des_cfb1
 "des-cfb1"

	)

2878 
	#NID_des_cfb1
 656

	)

2880 
	#SN_des_cfb8
 "DES-CFB8"

	)

2881 
	#LN_des_cfb8
 "des-cfb8"

	)

2882 
	#NID_des_cfb8
 657

	)

2884 
	#SN_des_ede3_cfb1
 "DES-EDE3-CFB1"

	)

2885 
	#LN_des_ede3_cfb1
 "des-ede3-cfb1"

	)

2886 
	#NID_des_ede3_cfb1
 658

	)

2888 
	#SN_des_ede3_cfb8
 "DES-EDE3-CFB8"

	)

2889 
	#LN_des_ede3_cfb8
 "des-ede3-cfb8"

	)

2890 
	#NID_des_ede3_cfb8
 659

	)

2892 
	#OBJ_ni°_hashÆgs
 
OBJ_ni°Alg‹ôhms
,2L

	)

2894 
	#SN_sha256
 "SHA256"

	)

2895 
	#LN_sha256
 "sha256"

	)

2896 
	#NID_sha256
 672

	)

2897 
	#OBJ_sha256
 
OBJ_ni°_hashÆgs
,1L

	)

2899 
	#SN_sha384
 "SHA384"

	)

2900 
	#LN_sha384
 "sha384"

	)

2901 
	#NID_sha384
 673

	)

2902 
	#OBJ_sha384
 
OBJ_ni°_hashÆgs
,2L

	)

2904 
	#SN_sha512
 "SHA512"

	)

2905 
	#LN_sha512
 "sha512"

	)

2906 
	#NID_sha512
 674

	)

2907 
	#OBJ_sha512
 
OBJ_ni°_hashÆgs
,3L

	)

2909 
	#SN_sha224
 "SHA224"

	)

2910 
	#LN_sha224
 "sha224"

	)

2911 
	#NID_sha224
 675

	)

2912 
	#OBJ_sha224
 
OBJ_ni°_hashÆgs
,4L

	)

2914 
	#SN_sha512_224
 "SHA512-224"

	)

2915 
	#LN_sha512_224
 "sha512-224"

	)

2916 
	#NID_sha512_224
 1094

	)

2917 
	#OBJ_sha512_224
 
OBJ_ni°_hashÆgs
,5L

	)

2919 
	#SN_sha512_256
 "SHA512-256"

	)

2920 
	#LN_sha512_256
 "sha512-256"

	)

2921 
	#NID_sha512_256
 1095

	)

2922 
	#OBJ_sha512_256
 
OBJ_ni°_hashÆgs
,6L

	)

2924 
	#SN_sha3_224
 "SHA3-224"

	)

2925 
	#LN_sha3_224
 "sha3-224"

	)

2926 
	#NID_sha3_224
 1096

	)

2927 
	#OBJ_sha3_224
 
OBJ_ni°_hashÆgs
,7L

	)

2929 
	#SN_sha3_256
 "SHA3-256"

	)

2930 
	#LN_sha3_256
 "sha3-256"

	)

2931 
	#NID_sha3_256
 1097

	)

2932 
	#OBJ_sha3_256
 
OBJ_ni°_hashÆgs
,8L

	)

2934 
	#SN_sha3_384
 "SHA3-384"

	)

2935 
	#LN_sha3_384
 "sha3-384"

	)

2936 
	#NID_sha3_384
 1098

	)

2937 
	#OBJ_sha3_384
 
OBJ_ni°_hashÆgs
,9L

	)

2939 
	#SN_sha3_512
 "SHA3-512"

	)

2940 
	#LN_sha3_512
 "sha3-512"

	)

2941 
	#NID_sha3_512
 1099

	)

2942 
	#OBJ_sha3_512
 
OBJ_ni°_hashÆgs
,10L

	)

2944 
	#SN_shake128
 "SHAKE128"

	)

2945 
	#LN_shake128
 "shake128"

	)

2946 
	#NID_shake128
 1100

	)

2947 
	#OBJ_shake128
 
OBJ_ni°_hashÆgs
,11L

	)

2949 
	#SN_shake256
 "SHAKE256"

	)

2950 
	#LN_shake256
 "shake256"

	)

2951 
	#NID_shake256
 1101

	)

2952 
	#OBJ_shake256
 
OBJ_ni°_hashÆgs
,12L

	)

2954 
	#SN_hmac_sha3_224
 "id-hmacWôhSHA3-224"

	)

2955 
	#LN_hmac_sha3_224
 "hmac-sha3-224"

	)

2956 
	#NID_hmac_sha3_224
 1102

	)

2957 
	#OBJ_hmac_sha3_224
 
OBJ_ni°_hashÆgs
,13L

	)

2959 
	#SN_hmac_sha3_256
 "id-hmacWôhSHA3-256"

	)

2960 
	#LN_hmac_sha3_256
 "hmac-sha3-256"

	)

2961 
	#NID_hmac_sha3_256
 1103

	)

2962 
	#OBJ_hmac_sha3_256
 
OBJ_ni°_hashÆgs
,14L

	)

2964 
	#SN_hmac_sha3_384
 "id-hmacWôhSHA3-384"

	)

2965 
	#LN_hmac_sha3_384
 "hmac-sha3-384"

	)

2966 
	#NID_hmac_sha3_384
 1104

	)

2967 
	#OBJ_hmac_sha3_384
 
OBJ_ni°_hashÆgs
,15L

	)

2969 
	#SN_hmac_sha3_512
 "id-hmacWôhSHA3-512"

	)

2970 
	#LN_hmac_sha3_512
 "hmac-sha3-512"

	)

2971 
	#NID_hmac_sha3_512
 1105

	)

2972 
	#OBJ_hmac_sha3_512
 
OBJ_ni°_hashÆgs
,16L

	)

2974 
	#OBJ_dß_wôh_sha2
 
OBJ_ni°Alg‹ôhms
,3L

	)

2976 
	#SN_dß_wôh_SHA224
 "dß_wôh_SHA224"

	)

2977 
	#NID_dß_wôh_SHA224
 802

	)

2978 
	#OBJ_dß_wôh_SHA224
 
OBJ_dß_wôh_sha2
,1L

	)

2980 
	#SN_dß_wôh_SHA256
 "dß_wôh_SHA256"

	)

2981 
	#NID_dß_wôh_SHA256
 803

	)

2982 
	#OBJ_dß_wôh_SHA256
 
OBJ_dß_wôh_sha2
,2L

	)

2984 
	#OBJ_sigAlgs
 
OBJ_ni°Alg‹ôhms
,3L

	)

2986 
	#SN_dß_wôh_SHA384
 "id-dß-wôh-sha384"

	)

2987 
	#LN_dß_wôh_SHA384
 "dß_wôh_SHA384"

	)

2988 
	#NID_dß_wôh_SHA384
 1106

	)

2989 
	#OBJ_dß_wôh_SHA384
 
OBJ_sigAlgs
,3L

	)

2991 
	#SN_dß_wôh_SHA512
 "id-dß-wôh-sha512"

	)

2992 
	#LN_dß_wôh_SHA512
 "dß_wôh_SHA512"

	)

2993 
	#NID_dß_wôh_SHA512
 1107

	)

2994 
	#OBJ_dß_wôh_SHA512
 
OBJ_sigAlgs
,4L

	)

2996 
	#SN_dß_wôh_SHA3_224
 "id-dß-wôh-sha3-224"

	)

2997 
	#LN_dß_wôh_SHA3_224
 "dß_wôh_SHA3-224"

	)

2998 
	#NID_dß_wôh_SHA3_224
 1108

	)

2999 
	#OBJ_dß_wôh_SHA3_224
 
OBJ_sigAlgs
,5L

	)

3001 
	#SN_dß_wôh_SHA3_256
 "id-dß-wôh-sha3-256"

	)

3002 
	#LN_dß_wôh_SHA3_256
 "dß_wôh_SHA3-256"

	)

3003 
	#NID_dß_wôh_SHA3_256
 1109

	)

3004 
	#OBJ_dß_wôh_SHA3_256
 
OBJ_sigAlgs
,6L

	)

3006 
	#SN_dß_wôh_SHA3_384
 "id-dß-wôh-sha3-384"

	)

3007 
	#LN_dß_wôh_SHA3_384
 "dß_wôh_SHA3-384"

	)

3008 
	#NID_dß_wôh_SHA3_384
 1110

	)

3009 
	#OBJ_dß_wôh_SHA3_384
 
OBJ_sigAlgs
,7L

	)

3011 
	#SN_dß_wôh_SHA3_512
 "id-dß-wôh-sha3-512"

	)

3012 
	#LN_dß_wôh_SHA3_512
 "dß_wôh_SHA3-512"

	)

3013 
	#NID_dß_wôh_SHA3_512
 1111

	)

3014 
	#OBJ_dß_wôh_SHA3_512
 
OBJ_sigAlgs
,8L

	)

3016 
	#SN_ecdß_wôh_SHA3_224
 "id-ecdß-wôh-sha3-224"

	)

3017 
	#LN_ecdß_wôh_SHA3_224
 "ecdß_wôh_SHA3-224"

	)

3018 
	#NID_ecdß_wôh_SHA3_224
 1112

	)

3019 
	#OBJ_ecdß_wôh_SHA3_224
 
OBJ_sigAlgs
,9L

	)

3021 
	#SN_ecdß_wôh_SHA3_256
 "id-ecdß-wôh-sha3-256"

	)

3022 
	#LN_ecdß_wôh_SHA3_256
 "ecdß_wôh_SHA3-256"

	)

3023 
	#NID_ecdß_wôh_SHA3_256
 1113

	)

3024 
	#OBJ_ecdß_wôh_SHA3_256
 
OBJ_sigAlgs
,10L

	)

3026 
	#SN_ecdß_wôh_SHA3_384
 "id-ecdß-wôh-sha3-384"

	)

3027 
	#LN_ecdß_wôh_SHA3_384
 "ecdß_wôh_SHA3-384"

	)

3028 
	#NID_ecdß_wôh_SHA3_384
 1114

	)

3029 
	#OBJ_ecdß_wôh_SHA3_384
 
OBJ_sigAlgs
,11L

	)

3031 
	#SN_ecdß_wôh_SHA3_512
 "id-ecdß-wôh-sha3-512"

	)

3032 
	#LN_ecdß_wôh_SHA3_512
 "ecdß_wôh_SHA3-512"

	)

3033 
	#NID_ecdß_wôh_SHA3_512
 1115

	)

3034 
	#OBJ_ecdß_wôh_SHA3_512
 
OBJ_sigAlgs
,12L

	)

3036 
	#SN_RSA_SHA3_224
 "id-rßsß-pkcs1-v1_5-wôh-sha3-224"

	)

3037 
	#LN_RSA_SHA3_224
 "RSA-SHA3-224"

	)

3038 
	#NID_RSA_SHA3_224
 1116

	)

3039 
	#OBJ_RSA_SHA3_224
 
OBJ_sigAlgs
,13L

	)

3041 
	#SN_RSA_SHA3_256
 "id-rßsß-pkcs1-v1_5-wôh-sha3-256"

	)

3042 
	#LN_RSA_SHA3_256
 "RSA-SHA3-256"

	)

3043 
	#NID_RSA_SHA3_256
 1117

	)

3044 
	#OBJ_RSA_SHA3_256
 
OBJ_sigAlgs
,14L

	)

3046 
	#SN_RSA_SHA3_384
 "id-rßsß-pkcs1-v1_5-wôh-sha3-384"

	)

3047 
	#LN_RSA_SHA3_384
 "RSA-SHA3-384"

	)

3048 
	#NID_RSA_SHA3_384
 1118

	)

3049 
	#OBJ_RSA_SHA3_384
 
OBJ_sigAlgs
,15L

	)

3051 
	#SN_RSA_SHA3_512
 "id-rßsß-pkcs1-v1_5-wôh-sha3-512"

	)

3052 
	#LN_RSA_SHA3_512
 "RSA-SHA3-512"

	)

3053 
	#NID_RSA_SHA3_512
 1119

	)

3054 
	#OBJ_RSA_SHA3_512
 
OBJ_sigAlgs
,16L

	)

3056 
	#SN_hﬁd_ö°ru˘i⁄_code
 "hﬁdIn°ru˘i⁄Code"

	)

3057 
	#LN_hﬁd_ö°ru˘i⁄_code
 "Hﬁd In°ru˘i⁄ Code"

	)

3058 
	#NID_hﬁd_ö°ru˘i⁄_code
 430

	)

3059 
	#OBJ_hﬁd_ö°ru˘i⁄_code
 
OBJ_id_˚
,23L

	)

3061 
	#OBJ_hﬁdIn°ru˘i⁄
 
OBJ_X9_57
,2L

	)

3063 
	#SN_hﬁd_ö°ru˘i⁄_n⁄e
 "hﬁdIn°ru˘i⁄N⁄e"

	)

3064 
	#LN_hﬁd_ö°ru˘i⁄_n⁄e
 "Hﬁd In°ru˘i⁄ N⁄e"

	)

3065 
	#NID_hﬁd_ö°ru˘i⁄_n⁄e
 431

	)

3066 
	#OBJ_hﬁd_ö°ru˘i⁄_n⁄e
 
OBJ_hﬁdIn°ru˘i⁄
,1L

	)

3068 
	#SN_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 "hﬁdIn°ru˘i⁄CÆlIssuî"

	)

3069 
	#LN_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 "Hﬁd In°ru˘i⁄ CÆ»Issuî"

	)

3070 
	#NID_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 432

	)

3071 
	#OBJ_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 
OBJ_hﬁdIn°ru˘i⁄
,2L

	)

3073 
	#SN_hﬁd_ö°ru˘i⁄_ªje˘
 "hﬁdIn°ru˘i⁄Reje˘"

	)

3074 
	#LN_hﬁd_ö°ru˘i⁄_ªje˘
 "Hﬁd In°ru˘i⁄ Reje˘"

	)

3075 
	#NID_hﬁd_ö°ru˘i⁄_ªje˘
 433

	)

3076 
	#OBJ_hﬁd_ö°ru˘i⁄_ªje˘
 
OBJ_hﬁdIn°ru˘i⁄
,3L

	)

3078 
	#SN_d©a
 "d©a"

	)

3079 
	#NID_d©a
 434

	)

3080 
	#OBJ_d©a
 
OBJ_ôu_t
,9L

	)

3082 
	#SN_pss
 "pss"

	)

3083 
	#NID_pss
 435

	)

3084 
	#OBJ_pss
 
OBJ_d©a
,2342L

	)

3086 
	#SN_u˛
 "u˛"

	)

3087 
	#NID_u˛
 436

	)

3088 
	#OBJ_u˛
 
OBJ_pss
,19200300L

	)

3090 
	#SN_pûŸ
 "pûŸ"

	)

3091 
	#NID_pûŸ
 437

	)

3092 
	#OBJ_pûŸ
 
OBJ_u˛
,100L

	)

3094 
	#LN_pûŸAâribuãTy≥
 "pûŸAâribuãTy≥"

	)

3095 
	#NID_pûŸAâribuãTy≥
 438

	)

3096 
	#OBJ_pûŸAâribuãTy≥
 
OBJ_pûŸ
,1L

	)

3098 
	#LN_pûŸAâribuãSy¡ax
 "pûŸAâribuãSy¡ax"

	)

3099 
	#NID_pûŸAâribuãSy¡ax
 439

	)

3100 
	#OBJ_pûŸAâribuãSy¡ax
 
OBJ_pûŸ
,3L

	)

3102 
	#LN_pûŸObje˘Cœss
 "pûŸObje˘Cœss"

	)

3103 
	#NID_pûŸObje˘Cœss
 440

	)

3104 
	#OBJ_pûŸObje˘Cœss
 
OBJ_pûŸ
,4L

	)

3106 
	#LN_pûŸGroups
 "pûŸGroups"

	)

3107 
	#NID_pûŸGroups
 441

	)

3108 
	#OBJ_pûŸGroups
 
OBJ_pûŸ
,10L

	)

3110 
	#LN_iA5SåögSy¡ax
 "iA5SåögSy¡ax"

	)

3111 
	#NID_iA5SåögSy¡ax
 442

	)

3112 
	#OBJ_iA5SåögSy¡ax
 
OBJ_pûŸAâribuãSy¡ax
,4L

	)

3114 
	#LN_ˇ£Ign‹eIA5SåögSy¡ax
 "ˇ£Ign‹eIA5SåögSy¡ax"

	)

3115 
	#NID_ˇ£Ign‹eIA5SåögSy¡ax
 443

	)

3116 
	#OBJ_ˇ£Ign‹eIA5SåögSy¡ax
 
OBJ_pûŸAâribuãSy¡ax
,5L

	)

3118 
	#LN_pûŸObje˘
 "pûŸObje˘"

	)

3119 
	#NID_pûŸObje˘
 444

	)

3120 
	#OBJ_pûŸObje˘
 
OBJ_pûŸObje˘Cœss
,3L

	)

3122 
	#LN_pûŸPîs⁄
 "pûŸPîs⁄"

	)

3123 
	#NID_pûŸPîs⁄
 445

	)

3124 
	#OBJ_pûŸPîs⁄
 
OBJ_pûŸObje˘Cœss
,4L

	)

3126 
	#SN_accou¡
 "accou¡"

	)

3127 
	#NID_accou¡
 446

	)

3128 
	#OBJ_accou¡
 
OBJ_pûŸObje˘Cœss
,5L

	)

3130 
	#SN_documít
 "documít"

	)

3131 
	#NID_documít
 447

	)

3132 
	#OBJ_documít
 
OBJ_pûŸObje˘Cœss
,6L

	)

3134 
	#SN_room
 "room"

	)

3135 
	#NID_room
 448

	)

3136 
	#OBJ_room
 
OBJ_pûŸObje˘Cœss
,7L

	)

3138 
	#LN_documítSîõs
 "documítSîõs"

	)

3139 
	#NID_documítSîõs
 449

	)

3140 
	#OBJ_documítSîõs
 
OBJ_pûŸObje˘Cœss
,9L

	)

3142 
	#SN_Domaö
 "domaö"

	)

3143 
	#LN_Domaö
 "Domaö"

	)

3144 
	#NID_Domaö
 392

	)

3145 
	#OBJ_Domaö
 
OBJ_pûŸObje˘Cœss
,13L

	)

3147 
	#LN_rFC822loˇlP¨t
 "rFC822loˇlP¨t"

	)

3148 
	#NID_rFC822loˇlP¨t
 450

	)

3149 
	#OBJ_rFC822loˇlP¨t
 
OBJ_pûŸObje˘Cœss
,14L

	)

3151 
	#LN_dNSDomaö
 "dNSDomaö"

	)

3152 
	#NID_dNSDomaö
 451

	)

3153 
	#OBJ_dNSDomaö
 
OBJ_pûŸObje˘Cœss
,15L

	)

3155 
	#LN_domaöRñ©edObje˘
 "domaöRñ©edObje˘"

	)

3156 
	#NID_domaöRñ©edObje˘
 452

	)

3157 
	#OBJ_domaöRñ©edObje˘
 
OBJ_pûŸObje˘Cœss
,17L

	)

3159 
	#LN_‰õndlyCou¡ry
 "‰õndlyCou¡ry"

	)

3160 
	#NID_‰õndlyCou¡ry
 453

	)

3161 
	#OBJ_‰õndlyCou¡ry
 
OBJ_pûŸObje˘Cœss
,18L

	)

3163 
	#LN_sim∂eSecurôyObje˘
 "sim∂eSecurôyObje˘"

	)

3164 
	#NID_sim∂eSecurôyObje˘
 454

	)

3165 
	#OBJ_sim∂eSecurôyObje˘
 
OBJ_pûŸObje˘Cœss
,19L

	)

3167 
	#LN_pûŸOrg™iz©i⁄
 "pûŸOrg™iz©i⁄"

	)

3168 
	#NID_pûŸOrg™iz©i⁄
 455

	)

3169 
	#OBJ_pûŸOrg™iz©i⁄
 
OBJ_pûŸObje˘Cœss
,20L

	)

3171 
	#LN_pûŸDSA
 "pûŸDSA"

	)

3172 
	#NID_pûŸDSA
 456

	)

3173 
	#OBJ_pûŸDSA
 
OBJ_pûŸObje˘Cœss
,21L

	)

3175 
	#LN_quÆôyLabñÀdD©a
 "quÆôyLabñÀdD©a"

	)

3176 
	#NID_quÆôyLabñÀdD©a
 457

	)

3177 
	#OBJ_quÆôyLabñÀdD©a
 
OBJ_pûŸObje˘Cœss
,22L

	)

3179 
	#SN_u£rId
 "UID"

	)

3180 
	#LN_u£rId
 "u£rId"

	)

3181 
	#NID_u£rId
 458

	)

3182 
	#OBJ_u£rId
 
OBJ_pûŸAâribuãTy≥
,1L

	)

3184 
	#LN_ãxtEncodedORAddªss
 "ãxtEncodedORAddªss"

	)

3185 
	#NID_ãxtEncodedORAddªss
 459

	)

3186 
	#OBJ_ãxtEncodedORAddªss
 
OBJ_pûŸAâribuãTy≥
,2L

	)

3188 
	#SN_rfc822Maûbox
 "maû"

	)

3189 
	#LN_rfc822Maûbox
 "rfc822Maûbox"

	)

3190 
	#NID_rfc822Maûbox
 460

	)

3191 
	#OBJ_rfc822Maûbox
 
OBJ_pûŸAâribuãTy≥
,3L

	)

3193 
	#SN_öfo
 "öfo"

	)

3194 
	#NID_öfo
 461

	)

3195 
	#OBJ_öfo
 
OBJ_pûŸAâribuãTy≥
,4L

	)

3197 
	#LN_ÁvourôeDrök
 "ÁvourôeDrök"

	)

3198 
	#NID_ÁvourôeDrök
 462

	)

3199 
	#OBJ_ÁvourôeDrök
 
OBJ_pûŸAâribuãTy≥
,5L

	)

3201 
	#LN_roomNumbî
 "roomNumbî"

	)

3202 
	#NID_roomNumbî
 463

	)

3203 
	#OBJ_roomNumbî
 
OBJ_pûŸAâribuãTy≥
,6L

	)

3205 
	#SN_phŸo
 "phŸo"

	)

3206 
	#NID_phŸo
 464

	)

3207 
	#OBJ_phŸo
 
OBJ_pûŸAâribuãTy≥
,7L

	)

3209 
	#LN_u£rCœss
 "u£rCœss"

	)

3210 
	#NID_u£rCœss
 465

	)

3211 
	#OBJ_u£rCœss
 
OBJ_pûŸAâribuãTy≥
,8L

	)

3213 
	#SN_ho°
 "ho°"

	)

3214 
	#NID_ho°
 466

	)

3215 
	#OBJ_ho°
 
OBJ_pûŸAâribuãTy≥
,9L

	)

3217 
	#SN_m™agî
 "m™agî"

	)

3218 
	#NID_m™agî
 467

	)

3219 
	#OBJ_m™agî
 
OBJ_pûŸAâribuãTy≥
,10L

	)

3221 
	#LN_documítIdítifõr
 "documítIdítifõr"

	)

3222 
	#NID_documítIdítifõr
 468

	)

3223 
	#OBJ_documítIdítifõr
 
OBJ_pûŸAâribuãTy≥
,11L

	)

3225 
	#LN_documítTôÀ
 "documítTôÀ"

	)

3226 
	#NID_documítTôÀ
 469

	)

3227 
	#OBJ_documítTôÀ
 
OBJ_pûŸAâribuãTy≥
,12L

	)

3229 
	#LN_documítVîsi⁄
 "documítVîsi⁄"

	)

3230 
	#NID_documítVîsi⁄
 470

	)

3231 
	#OBJ_documítVîsi⁄
 
OBJ_pûŸAâribuãTy≥
,13L

	)

3233 
	#LN_documítAuth‹
 "documítAuth‹"

	)

3234 
	#NID_documítAuth‹
 471

	)

3235 
	#OBJ_documítAuth‹
 
OBJ_pûŸAâribuãTy≥
,14L

	)

3237 
	#LN_documítLoˇti⁄
 "documítLoˇti⁄"

	)

3238 
	#NID_documítLoˇti⁄
 472

	)

3239 
	#OBJ_documítLoˇti⁄
 
OBJ_pûŸAâribuãTy≥
,15L

	)

3241 
	#LN_homeTñïh⁄eNumbî
 "homeTñïh⁄eNumbî"

	)

3242 
	#NID_homeTñïh⁄eNumbî
 473

	)

3243 
	#OBJ_homeTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,20L

	)

3245 
	#SN_£¸ë¨y
 "£¸ë¨y"

	)

3246 
	#NID_£¸ë¨y
 474

	)

3247 
	#OBJ_£¸ë¨y
 
OBJ_pûŸAâribuãTy≥
,21L

	)

3249 
	#LN_ŸhîMaûbox
 "ŸhîMaûbox"

	)

3250 
	#NID_ŸhîMaûbox
 475

	)

3251 
	#OBJ_ŸhîMaûbox
 
OBJ_pûŸAâribuãTy≥
,22L

	)

3253 
	#LN_œ°ModifõdTime
 "œ°ModifõdTime"

	)

3254 
	#NID_œ°ModifõdTime
 476

	)

3255 
	#OBJ_œ°ModifõdTime
 
OBJ_pûŸAâribuãTy≥
,23L

	)

3257 
	#LN_œ°ModifõdBy
 "œ°ModifõdBy"

	)

3258 
	#NID_œ°ModifõdBy
 477

	)

3259 
	#OBJ_œ°ModifõdBy
 
OBJ_pûŸAâribuãTy≥
,24L

	)

3261 
	#SN_domaöComp⁄ít
 "DC"

	)

3262 
	#LN_domaöComp⁄ít
 "domaöComp⁄ít"

	)

3263 
	#NID_domaöComp⁄ít
 391

	)

3264 
	#OBJ_domaöComp⁄ít
 
OBJ_pûŸAâribuãTy≥
,25L

	)

3266 
	#LN_aRec‹d
 "aRec‹d"

	)

3267 
	#NID_aRec‹d
 478

	)

3268 
	#OBJ_aRec‹d
 
OBJ_pûŸAâribuãTy≥
,26L

	)

3270 
	#LN_pûŸAâribuãTy≥27
 "pûŸAâribuãTy≥27"

	)

3271 
	#NID_pûŸAâribuãTy≥27
 479

	)

3272 
	#OBJ_pûŸAâribuãTy≥27
 
OBJ_pûŸAâribuãTy≥
,27L

	)

3274 
	#LN_mXRec‹d
 "mXRec‹d"

	)

3275 
	#NID_mXRec‹d
 480

	)

3276 
	#OBJ_mXRec‹d
 
OBJ_pûŸAâribuãTy≥
,28L

	)

3278 
	#LN_nSRec‹d
 "nSRec‹d"

	)

3279 
	#NID_nSRec‹d
 481

	)

3280 
	#OBJ_nSRec‹d
 
OBJ_pûŸAâribuãTy≥
,29L

	)

3282 
	#LN_sOARec‹d
 "sOARec‹d"

	)

3283 
	#NID_sOARec‹d
 482

	)

3284 
	#OBJ_sOARec‹d
 
OBJ_pûŸAâribuãTy≥
,30L

	)

3286 
	#LN_cNAMERec‹d
 "cNAMERec‹d"

	)

3287 
	#NID_cNAMERec‹d
 483

	)

3288 
	#OBJ_cNAMERec‹d
 
OBJ_pûŸAâribuãTy≥
,31L

	)

3290 
	#LN_assocüãdDomaö
 "assocüãdDomaö"

	)

3291 
	#NID_assocüãdDomaö
 484

	)

3292 
	#OBJ_assocüãdDomaö
 
OBJ_pûŸAâribuãTy≥
,37L

	)

3294 
	#LN_assocüãdName
 "assocüãdName"

	)

3295 
	#NID_assocüãdName
 485

	)

3296 
	#OBJ_assocüãdName
 
OBJ_pûŸAâribuãTy≥
,38L

	)

3298 
	#LN_homePo°ÆAddªss
 "homePo°ÆAddªss"

	)

3299 
	#NID_homePo°ÆAddªss
 486

	)

3300 
	#OBJ_homePo°ÆAddªss
 
OBJ_pûŸAâribuãTy≥
,39L

	)

3302 
	#LN_≥rs⁄ÆTôÀ
 "≥rs⁄ÆTôÀ"

	)

3303 
	#NID_≥rs⁄ÆTôÀ
 487

	)

3304 
	#OBJ_≥rs⁄ÆTôÀ
 
OBJ_pûŸAâribuãTy≥
,40L

	)

3306 
	#LN_mobûeTñïh⁄eNumbî
 "mobûeTñïh⁄eNumbî"

	)

3307 
	#NID_mobûeTñïh⁄eNumbî
 488

	)

3308 
	#OBJ_mobûeTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,41L

	)

3310 
	#LN_∑gîTñïh⁄eNumbî
 "∑gîTñïh⁄eNumbî"

	)

3311 
	#NID_∑gîTñïh⁄eNumbî
 489

	)

3312 
	#OBJ_∑gîTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,42L

	)

3314 
	#LN_‰õndlyCou¡ryName
 "‰õndlyCou¡ryName"

	)

3315 
	#NID_‰õndlyCou¡ryName
 490

	)

3316 
	#OBJ_‰õndlyCou¡ryName
 
OBJ_pûŸAâribuãTy≥
,43L

	)

3318 
	#SN_uniqueIdítifõr
 "uid"

	)

3319 
	#LN_uniqueIdítifõr
 "uniqueIdítifõr"

	)

3320 
	#NID_uniqueIdítifõr
 102

	)

3321 
	#OBJ_uniqueIdítifõr
 
OBJ_pûŸAâribuãTy≥
,44L

	)

3323 
	#LN_‹g™iz©i⁄ÆSètus
 "‹g™iz©i⁄ÆSètus"

	)

3324 
	#NID_‹g™iz©i⁄ÆSètus
 491

	)

3325 
	#OBJ_‹g™iz©i⁄ÆSètus
 
OBJ_pûŸAâribuãTy≥
,45L

	)

3327 
	#LN_j™ëMaûbox
 "j™ëMaûbox"

	)

3328 
	#NID_j™ëMaûbox
 492

	)

3329 
	#OBJ_j™ëMaûbox
 
OBJ_pûŸAâribuãTy≥
,46L

	)

3331 
	#LN_maûPª„ªn˚O±i⁄
 "maûPª„ªn˚O±i⁄"

	)

3332 
	#NID_maûPª„ªn˚O±i⁄
 493

	)

3333 
	#OBJ_maûPª„ªn˚O±i⁄
 
OBJ_pûŸAâribuãTy≥
,47L

	)

3335 
	#LN_buûdögName
 "buûdögName"

	)

3336 
	#NID_buûdögName
 494

	)

3337 
	#OBJ_buûdögName
 
OBJ_pûŸAâribuãTy≥
,48L

	)

3339 
	#LN_dSAQuÆôy
 "dSAQuÆôy"

	)

3340 
	#NID_dSAQuÆôy
 495

	)

3341 
	#OBJ_dSAQuÆôy
 
OBJ_pûŸAâribuãTy≥
,49L

	)

3343 
	#LN_sögÀLevñQuÆôy
 "sögÀLevñQuÆôy"

	)

3344 
	#NID_sögÀLevñQuÆôy
 496

	)

3345 
	#OBJ_sögÀLevñQuÆôy
 
OBJ_pûŸAâribuãTy≥
,50L

	)

3347 
	#LN_subåìMöimumQuÆôy
 "subåìMöimumQuÆôy"

	)

3348 
	#NID_subåìMöimumQuÆôy
 497

	)

3349 
	#OBJ_subåìMöimumQuÆôy
 
OBJ_pûŸAâribuãTy≥
,51L

	)

3351 
	#LN_subåìMaximumQuÆôy
 "subåìMaximumQuÆôy"

	)

3352 
	#NID_subåìMaximumQuÆôy
 498

	)

3353 
	#OBJ_subåìMaximumQuÆôy
 
OBJ_pûŸAâribuãTy≥
,52L

	)

3355 
	#LN_≥rs⁄ÆSig«tuª
 "≥rs⁄ÆSig«tuª"

	)

3356 
	#NID_≥rs⁄ÆSig«tuª
 499

	)

3357 
	#OBJ_≥rs⁄ÆSig«tuª
 
OBJ_pûŸAâribuãTy≥
,53L

	)

3359 
	#LN_dITRedúe˘
 "dITRedúe˘"

	)

3360 
	#NID_dITRedúe˘
 500

	)

3361 
	#OBJ_dITRedúe˘
 
OBJ_pûŸAâribuãTy≥
,54L

	)

3363 
	#SN_audio
 "audio"

	)

3364 
	#NID_audio
 501

	)

3365 
	#OBJ_audio
 
OBJ_pûŸAâribuãTy≥
,55L

	)

3367 
	#LN_documítPublishî
 "documítPublishî"

	)

3368 
	#NID_documítPublishî
 502

	)

3369 
	#OBJ_documítPublishî
 
OBJ_pûŸAâribuãTy≥
,56L

	)

3371 
	#SN_id_£t
 "id-£t"

	)

3372 
	#LN_id_£t
 "Secuª EÀ˘r⁄i¯Tønß˘i⁄s"

	)

3373 
	#NID_id_£t
 512

	)

3374 
	#OBJ_id_£t
 
OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
,42L

	)

3376 
	#SN_£t_˘y≥
 "£t-˘y≥"

	)

3377 
	#LN_£t_˘y≥
 "c⁄ã¡Åy≥s"

	)

3378 
	#NID_£t_˘y≥
 513

	)

3379 
	#OBJ_£t_˘y≥
 
OBJ_id_£t
,0L

	)

3381 
	#SN_£t_msgExt
 "£t-msgExt"

	)

3382 
	#LN_£t_msgExt
 "mesßgêexãnsi⁄s"

	)

3383 
	#NID_£t_msgExt
 514

	)

3384 
	#OBJ_£t_msgExt
 
OBJ_id_£t
,1L

	)

3386 
	#SN_£t_©å
 "£t-©å"

	)

3387 
	#NID_£t_©å
 515

	)

3388 
	#OBJ_£t_©å
 
OBJ_id_£t
,3L

	)

3390 
	#SN_£t_pﬁicy
 "£t-pﬁicy"

	)

3391 
	#NID_£t_pﬁicy
 516

	)

3392 
	#OBJ_£t_pﬁicy
 
OBJ_id_£t
,5L

	)

3394 
	#SN_£t_˚πExt
 "£t-˚πExt"

	)

3395 
	#LN_£t_˚πExt
 "˚πifiˇãÉxãnsi⁄s"

	)

3396 
	#NID_£t_˚πExt
 517

	)

3397 
	#OBJ_£t_˚πExt
 
OBJ_id_£t
,7L

	)

3399 
	#SN_£t_bønd
 "£t-bønd"

	)

3400 
	#NID_£t_bønd
 518

	)

3401 
	#OBJ_£t_bønd
 
OBJ_id_£t
,8L

	)

3403 
	#SN_£t˘_PAND©a
 "£t˘-PAND©a"

	)

3404 
	#NID_£t˘_PAND©a
 519

	)

3405 
	#OBJ_£t˘_PAND©a
 
OBJ_£t_˘y≥
,0L

	)

3407 
	#SN_£t˘_PANTokí
 "£t˘-PANTokí"

	)

3408 
	#NID_£t˘_PANTokí
 520

	)

3409 
	#OBJ_£t˘_PANTokí
 
OBJ_£t_˘y≥
,1L

	)

3411 
	#SN_£t˘_PANO∆y
 "£t˘-PANO∆y"

	)

3412 
	#NID_£t˘_PANO∆y
 521

	)

3413 
	#OBJ_£t˘_PANO∆y
 
OBJ_£t_˘y≥
,2L

	)

3415 
	#SN_£t˘_OID©a
 "£t˘-OID©a"

	)

3416 
	#NID_£t˘_OID©a
 522

	)

3417 
	#OBJ_£t˘_OID©a
 
OBJ_£t_˘y≥
,3L

	)

3419 
	#SN_£t˘_PI
 "£t˘-PI"

	)

3420 
	#NID_£t˘_PI
 523

	)

3421 
	#OBJ_£t˘_PI
 
OBJ_£t_˘y≥
,4L

	)

3423 
	#SN_£t˘_PID©a
 "£t˘-PID©a"

	)

3424 
	#NID_£t˘_PID©a
 524

	)

3425 
	#OBJ_£t˘_PID©a
 
OBJ_£t_˘y≥
,5L

	)

3427 
	#SN_£t˘_PID©aUnsig√d
 "£t˘-PID©aUnsig√d"

	)

3428 
	#NID_£t˘_PID©aUnsig√d
 525

	)

3429 
	#OBJ_£t˘_PID©aUnsig√d
 
OBJ_£t_˘y≥
,6L

	)

3431 
	#SN_£t˘_HODI≈ut
 "£t˘-HODI≈ut"

	)

3432 
	#NID_£t˘_HODI≈ut
 526

	)

3433 
	#OBJ_£t˘_HODI≈ut
 
OBJ_£t_˘y≥
,7L

	)

3435 
	#SN_£t˘_AuthResBaggage
 "£t˘-AuthResBaggage"

	)

3436 
	#NID_£t˘_AuthResBaggage
 527

	)

3437 
	#OBJ_£t˘_AuthResBaggage
 
OBJ_£t_˘y≥
,8L

	)

3439 
	#SN_£t˘_AuthRevReqBaggage
 "£t˘-AuthRevReqBaggage"

	)

3440 
	#NID_£t˘_AuthRevReqBaggage
 528

	)

3441 
	#OBJ_£t˘_AuthRevReqBaggage
 
OBJ_£t_˘y≥
,9L

	)

3443 
	#SN_£t˘_AuthRevResBaggage
 "£t˘-AuthRevResBaggage"

	)

3444 
	#NID_£t˘_AuthRevResBaggage
 529

	)

3445 
	#OBJ_£t˘_AuthRevResBaggage
 
OBJ_£t_˘y≥
,10L

	)

3447 
	#SN_£t˘_C≠TokíSeq
 "£t˘-C≠TokíSeq"

	)

3448 
	#NID_£t˘_C≠TokíSeq
 530

	)

3449 
	#OBJ_£t˘_C≠TokíSeq
 
OBJ_£t_˘y≥
,11L

	)

3451 
	#SN_£t˘_PInôResD©a
 "£t˘-PInôResD©a"

	)

3452 
	#NID_£t˘_PInôResD©a
 531

	)

3453 
	#OBJ_£t˘_PInôResD©a
 
OBJ_£t_˘y≥
,12L

	)

3455 
	#SN_£t˘_PI_TBS
 "£t˘-PI-TBS"

	)

3456 
	#NID_£t˘_PI_TBS
 532

	)

3457 
	#OBJ_£t˘_PI_TBS
 
OBJ_£t_˘y≥
,13L

	)

3459 
	#SN_£t˘_PResD©a
 "£t˘-PResD©a"

	)

3460 
	#NID_£t˘_PResD©a
 533

	)

3461 
	#OBJ_£t˘_PResD©a
 
OBJ_£t_˘y≥
,14L

	)

3463 
	#SN_£t˘_AuthReqTBS
 "£t˘-AuthReqTBS"

	)

3464 
	#NID_£t˘_AuthReqTBS
 534

	)

3465 
	#OBJ_£t˘_AuthReqTBS
 
OBJ_£t_˘y≥
,16L

	)

3467 
	#SN_£t˘_AuthResTBS
 "£t˘-AuthResTBS"

	)

3468 
	#NID_£t˘_AuthResTBS
 535

	)

3469 
	#OBJ_£t˘_AuthResTBS
 
OBJ_£t_˘y≥
,17L

	)

3471 
	#SN_£t˘_AuthResTBSX
 "£t˘-AuthResTBSX"

	)

3472 
	#NID_£t˘_AuthResTBSX
 536

	)

3473 
	#OBJ_£t˘_AuthResTBSX
 
OBJ_£t_˘y≥
,18L

	)

3475 
	#SN_£t˘_AuthTokíTBS
 "£t˘-AuthTokíTBS"

	)

3476 
	#NID_£t˘_AuthTokíTBS
 537

	)

3477 
	#OBJ_£t˘_AuthTokíTBS
 
OBJ_£t_˘y≥
,19L

	)

3479 
	#SN_£t˘_C≠TokíD©a
 "£t˘-C≠TokíD©a"

	)

3480 
	#NID_£t˘_C≠TokíD©a
 538

	)

3481 
	#OBJ_£t˘_C≠TokíD©a
 
OBJ_£t_˘y≥
,20L

	)

3483 
	#SN_£t˘_C≠TokíTBS
 "£t˘-C≠TokíTBS"

	)

3484 
	#NID_£t˘_C≠TokíTBS
 539

	)

3485 
	#OBJ_£t˘_C≠TokíTBS
 
OBJ_£t_˘y≥
,21L

	)

3487 
	#SN_£t˘_AcqC¨dCodeMsg
 "£t˘-AcqC¨dCodeMsg"

	)

3488 
	#NID_£t˘_AcqC¨dCodeMsg
 540

	)

3489 
	#OBJ_£t˘_AcqC¨dCodeMsg
 
OBJ_£t_˘y≥
,22L

	)

3491 
	#SN_£t˘_AuthRevReqTBS
 "£t˘-AuthRevReqTBS"

	)

3492 
	#NID_£t˘_AuthRevReqTBS
 541

	)

3493 
	#OBJ_£t˘_AuthRevReqTBS
 
OBJ_£t_˘y≥
,23L

	)

3495 
	#SN_£t˘_AuthRevResD©a
 "£t˘-AuthRevResD©a"

	)

3496 
	#NID_£t˘_AuthRevResD©a
 542

	)

3497 
	#OBJ_£t˘_AuthRevResD©a
 
OBJ_£t_˘y≥
,24L

	)

3499 
	#SN_£t˘_AuthRevResTBS
 "£t˘-AuthRevResTBS"

	)

3500 
	#NID_£t˘_AuthRevResTBS
 543

	)

3501 
	#OBJ_£t˘_AuthRevResTBS
 
OBJ_£t_˘y≥
,25L

	)

3503 
	#SN_£t˘_C≠ReqTBS
 "£t˘-C≠ReqTBS"

	)

3504 
	#NID_£t˘_C≠ReqTBS
 544

	)

3505 
	#OBJ_£t˘_C≠ReqTBS
 
OBJ_£t_˘y≥
,26L

	)

3507 
	#SN_£t˘_C≠ReqTBSX
 "£t˘-C≠ReqTBSX"

	)

3508 
	#NID_£t˘_C≠ReqTBSX
 545

	)

3509 
	#OBJ_£t˘_C≠ReqTBSX
 
OBJ_£t_˘y≥
,27L

	)

3511 
	#SN_£t˘_C≠ResD©a
 "£t˘-C≠ResD©a"

	)

3512 
	#NID_£t˘_C≠ResD©a
 546

	)

3513 
	#OBJ_£t˘_C≠ResD©a
 
OBJ_£t_˘y≥
,28L

	)

3515 
	#SN_£t˘_C≠RevReqTBS
 "£t˘-C≠RevReqTBS"

	)

3516 
	#NID_£t˘_C≠RevReqTBS
 547

	)

3517 
	#OBJ_£t˘_C≠RevReqTBS
 
OBJ_£t_˘y≥
,29L

	)

3519 
	#SN_£t˘_C≠RevReqTBSX
 "£t˘-C≠RevReqTBSX"

	)

3520 
	#NID_£t˘_C≠RevReqTBSX
 548

	)

3521 
	#OBJ_£t˘_C≠RevReqTBSX
 
OBJ_£t_˘y≥
,30L

	)

3523 
	#SN_£t˘_C≠RevResD©a
 "£t˘-C≠RevResD©a"

	)

3524 
	#NID_£t˘_C≠RevResD©a
 549

	)

3525 
	#OBJ_£t˘_C≠RevResD©a
 
OBJ_£t_˘y≥
,31L

	)

3527 
	#SN_£t˘_CªdReqTBS
 "£t˘-CªdReqTBS"

	)

3528 
	#NID_£t˘_CªdReqTBS
 550

	)

3529 
	#OBJ_£t˘_CªdReqTBS
 
OBJ_£t_˘y≥
,32L

	)

3531 
	#SN_£t˘_CªdReqTBSX
 "£t˘-CªdReqTBSX"

	)

3532 
	#NID_£t˘_CªdReqTBSX
 551

	)

3533 
	#OBJ_£t˘_CªdReqTBSX
 
OBJ_£t_˘y≥
,33L

	)

3535 
	#SN_£t˘_CªdResD©a
 "£t˘-CªdResD©a"

	)

3536 
	#NID_£t˘_CªdResD©a
 552

	)

3537 
	#OBJ_£t˘_CªdResD©a
 
OBJ_£t_˘y≥
,34L

	)

3539 
	#SN_£t˘_CªdRevReqTBS
 "£t˘-CªdRevReqTBS"

	)

3540 
	#NID_£t˘_CªdRevReqTBS
 553

	)

3541 
	#OBJ_£t˘_CªdRevReqTBS
 
OBJ_£t_˘y≥
,35L

	)

3543 
	#SN_£t˘_CªdRevReqTBSX
 "£t˘-CªdRevReqTBSX"

	)

3544 
	#NID_£t˘_CªdRevReqTBSX
 554

	)

3545 
	#OBJ_£t˘_CªdRevReqTBSX
 
OBJ_£t_˘y≥
,36L

	)

3547 
	#SN_£t˘_CªdRevResD©a
 "£t˘-CªdRevResD©a"

	)

3548 
	#NID_£t˘_CªdRevResD©a
 555

	)

3549 
	#OBJ_£t˘_CªdRevResD©a
 
OBJ_£t_˘y≥
,37L

	)

3551 
	#SN_£t˘_PCîtReqD©a
 "£t˘-PCîtReqD©a"

	)

3552 
	#NID_£t˘_PCîtReqD©a
 556

	)

3553 
	#OBJ_£t˘_PCîtReqD©a
 
OBJ_£t_˘y≥
,38L

	)

3555 
	#SN_£t˘_PCîtResTBS
 "£t˘-PCîtResTBS"

	)

3556 
	#NID_£t˘_PCîtResTBS
 557

	)

3557 
	#OBJ_£t˘_PCîtResTBS
 
OBJ_£t_˘y≥
,39L

	)

3559 
	#SN_£t˘_B©chAdmöReqD©a
 "£t˘-B©chAdmöReqD©a"

	)

3560 
	#NID_£t˘_B©chAdmöReqD©a
 558

	)

3561 
	#OBJ_£t˘_B©chAdmöReqD©a
 
OBJ_£t_˘y≥
,40L

	)

3563 
	#SN_£t˘_B©chAdmöResD©a
 "£t˘-B©chAdmöResD©a"

	)

3564 
	#NID_£t˘_B©chAdmöResD©a
 559

	)

3565 
	#OBJ_£t˘_B©chAdmöResD©a
 
OBJ_£t_˘y≥
,41L

	)

3567 
	#SN_£t˘_C¨dCInôResTBS
 "£t˘-C¨dCInôResTBS"

	)

3568 
	#NID_£t˘_C¨dCInôResTBS
 560

	)

3569 
	#OBJ_£t˘_C¨dCInôResTBS
 
OBJ_£t_˘y≥
,42L

	)

3571 
	#SN_£t˘_MeAqCInôResTBS
 "£t˘-MeAqCInôResTBS"

	)

3572 
	#NID_£t˘_MeAqCInôResTBS
 561

	)

3573 
	#OBJ_£t˘_MeAqCInôResTBS
 
OBJ_£t_˘y≥
,43L

	)

3575 
	#SN_£t˘_RegF‹mResTBS
 "£t˘-RegF‹mResTBS"

	)

3576 
	#NID_£t˘_RegF‹mResTBS
 562

	)

3577 
	#OBJ_£t˘_RegF‹mResTBS
 
OBJ_£t_˘y≥
,44L

	)

3579 
	#SN_£t˘_CîtReqD©a
 "£t˘-CîtReqD©a"

	)

3580 
	#NID_£t˘_CîtReqD©a
 563

	)

3581 
	#OBJ_£t˘_CîtReqD©a
 
OBJ_£t_˘y≥
,45L

	)

3583 
	#SN_£t˘_CîtReqTBS
 "£t˘-CîtReqTBS"

	)

3584 
	#NID_£t˘_CîtReqTBS
 564

	)

3585 
	#OBJ_£t˘_CîtReqTBS
 
OBJ_£t_˘y≥
,46L

	)

3587 
	#SN_£t˘_CîtResD©a
 "£t˘-CîtResD©a"

	)

3588 
	#NID_£t˘_CîtResD©a
 565

	)

3589 
	#OBJ_£t˘_CîtResD©a
 
OBJ_£t_˘y≥
,47L

	)

3591 
	#SN_£t˘_CîtInqReqTBS
 "£t˘-CîtInqReqTBS"

	)

3592 
	#NID_£t˘_CîtInqReqTBS
 566

	)

3593 
	#OBJ_£t˘_CîtInqReqTBS
 
OBJ_£t_˘y≥
,48L

	)

3595 
	#SN_£t˘_Eº‹TBS
 "£t˘-Eº‹TBS"

	)

3596 
	#NID_£t˘_Eº‹TBS
 567

	)

3597 
	#OBJ_£t˘_Eº‹TBS
 
OBJ_£t_˘y≥
,49L

	)

3599 
	#SN_£t˘_PIDuÆSig√dTBE
 "£t˘-PIDuÆSig√dTBE"

	)

3600 
	#NID_£t˘_PIDuÆSig√dTBE
 568

	)

3601 
	#OBJ_£t˘_PIDuÆSig√dTBE
 
OBJ_£t_˘y≥
,50L

	)

3603 
	#SN_£t˘_PIUnsig√dTBE
 "£t˘-PIUnsig√dTBE"

	)

3604 
	#NID_£t˘_PIUnsig√dTBE
 569

	)

3605 
	#OBJ_£t˘_PIUnsig√dTBE
 
OBJ_£t_˘y≥
,51L

	)

3607 
	#SN_£t˘_AuthReqTBE
 "£t˘-AuthReqTBE"

	)

3608 
	#NID_£t˘_AuthReqTBE
 570

	)

3609 
	#OBJ_£t˘_AuthReqTBE
 
OBJ_£t_˘y≥
,52L

	)

3611 
	#SN_£t˘_AuthResTBE
 "£t˘-AuthResTBE"

	)

3612 
	#NID_£t˘_AuthResTBE
 571

	)

3613 
	#OBJ_£t˘_AuthResTBE
 
OBJ_£t_˘y≥
,53L

	)

3615 
	#SN_£t˘_AuthResTBEX
 "£t˘-AuthResTBEX"

	)

3616 
	#NID_£t˘_AuthResTBEX
 572

	)

3617 
	#OBJ_£t˘_AuthResTBEX
 
OBJ_£t_˘y≥
,54L

	)

3619 
	#SN_£t˘_AuthTokíTBE
 "£t˘-AuthTokíTBE"

	)

3620 
	#NID_£t˘_AuthTokíTBE
 573

	)

3621 
	#OBJ_£t˘_AuthTokíTBE
 
OBJ_£t_˘y≥
,55L

	)

3623 
	#SN_£t˘_C≠TokíTBE
 "£t˘-C≠TokíTBE"

	)

3624 
	#NID_£t˘_C≠TokíTBE
 574

	)

3625 
	#OBJ_£t˘_C≠TokíTBE
 
OBJ_£t_˘y≥
,56L

	)

3627 
	#SN_£t˘_C≠TokíTBEX
 "£t˘-C≠TokíTBEX"

	)

3628 
	#NID_£t˘_C≠TokíTBEX
 575

	)

3629 
	#OBJ_£t˘_C≠TokíTBEX
 
OBJ_£t_˘y≥
,57L

	)

3631 
	#SN_£t˘_AcqC¨dCodeMsgTBE
 "£t˘-AcqC¨dCodeMsgTBE"

	)

3632 
	#NID_£t˘_AcqC¨dCodeMsgTBE
 576

	)

3633 
	#OBJ_£t˘_AcqC¨dCodeMsgTBE
 
OBJ_£t_˘y≥
,58L

	)

3635 
	#SN_£t˘_AuthRevReqTBE
 "£t˘-AuthRevReqTBE"

	)

3636 
	#NID_£t˘_AuthRevReqTBE
 577

	)

3637 
	#OBJ_£t˘_AuthRevReqTBE
 
OBJ_£t_˘y≥
,59L

	)

3639 
	#SN_£t˘_AuthRevResTBE
 "£t˘-AuthRevResTBE"

	)

3640 
	#NID_£t˘_AuthRevResTBE
 578

	)

3641 
	#OBJ_£t˘_AuthRevResTBE
 
OBJ_£t_˘y≥
,60L

	)

3643 
	#SN_£t˘_AuthRevResTBEB
 "£t˘-AuthRevResTBEB"

	)

3644 
	#NID_£t˘_AuthRevResTBEB
 579

	)

3645 
	#OBJ_£t˘_AuthRevResTBEB
 
OBJ_£t_˘y≥
,61L

	)

3647 
	#SN_£t˘_C≠ReqTBE
 "£t˘-C≠ReqTBE"

	)

3648 
	#NID_£t˘_C≠ReqTBE
 580

	)

3649 
	#OBJ_£t˘_C≠ReqTBE
 
OBJ_£t_˘y≥
,62L

	)

3651 
	#SN_£t˘_C≠ReqTBEX
 "£t˘-C≠ReqTBEX"

	)

3652 
	#NID_£t˘_C≠ReqTBEX
 581

	)

3653 
	#OBJ_£t˘_C≠ReqTBEX
 
OBJ_£t_˘y≥
,63L

	)

3655 
	#SN_£t˘_C≠ResTBE
 "£t˘-C≠ResTBE"

	)

3656 
	#NID_£t˘_C≠ResTBE
 582

	)

3657 
	#OBJ_£t˘_C≠ResTBE
 
OBJ_£t_˘y≥
,64L

	)

3659 
	#SN_£t˘_C≠RevReqTBE
 "£t˘-C≠RevReqTBE"

	)

3660 
	#NID_£t˘_C≠RevReqTBE
 583

	)

3661 
	#OBJ_£t˘_C≠RevReqTBE
 
OBJ_£t_˘y≥
,65L

	)

3663 
	#SN_£t˘_C≠RevReqTBEX
 "£t˘-C≠RevReqTBEX"

	)

3664 
	#NID_£t˘_C≠RevReqTBEX
 584

	)

3665 
	#OBJ_£t˘_C≠RevReqTBEX
 
OBJ_£t_˘y≥
,66L

	)

3667 
	#SN_£t˘_C≠RevResTBE
 "£t˘-C≠RevResTBE"

	)

3668 
	#NID_£t˘_C≠RevResTBE
 585

	)

3669 
	#OBJ_£t˘_C≠RevResTBE
 
OBJ_£t_˘y≥
,67L

	)

3671 
	#SN_£t˘_CªdReqTBE
 "£t˘-CªdReqTBE"

	)

3672 
	#NID_£t˘_CªdReqTBE
 586

	)

3673 
	#OBJ_£t˘_CªdReqTBE
 
OBJ_£t_˘y≥
,68L

	)

3675 
	#SN_£t˘_CªdReqTBEX
 "£t˘-CªdReqTBEX"

	)

3676 
	#NID_£t˘_CªdReqTBEX
 587

	)

3677 
	#OBJ_£t˘_CªdReqTBEX
 
OBJ_£t_˘y≥
,69L

	)

3679 
	#SN_£t˘_CªdResTBE
 "£t˘-CªdResTBE"

	)

3680 
	#NID_£t˘_CªdResTBE
 588

	)

3681 
	#OBJ_£t˘_CªdResTBE
 
OBJ_£t_˘y≥
,70L

	)

3683 
	#SN_£t˘_CªdRevReqTBE
 "£t˘-CªdRevReqTBE"

	)

3684 
	#NID_£t˘_CªdRevReqTBE
 589

	)

3685 
	#OBJ_£t˘_CªdRevReqTBE
 
OBJ_£t_˘y≥
,71L

	)

3687 
	#SN_£t˘_CªdRevReqTBEX
 "£t˘-CªdRevReqTBEX"

	)

3688 
	#NID_£t˘_CªdRevReqTBEX
 590

	)

3689 
	#OBJ_£t˘_CªdRevReqTBEX
 
OBJ_£t_˘y≥
,72L

	)

3691 
	#SN_£t˘_CªdRevResTBE
 "£t˘-CªdRevResTBE"

	)

3692 
	#NID_£t˘_CªdRevResTBE
 591

	)

3693 
	#OBJ_£t˘_CªdRevResTBE
 
OBJ_£t_˘y≥
,73L

	)

3695 
	#SN_£t˘_B©chAdmöReqTBE
 "£t˘-B©chAdmöReqTBE"

	)

3696 
	#NID_£t˘_B©chAdmöReqTBE
 592

	)

3697 
	#OBJ_£t˘_B©chAdmöReqTBE
 
OBJ_£t_˘y≥
,74L

	)

3699 
	#SN_£t˘_B©chAdmöResTBE
 "£t˘-B©chAdmöResTBE"

	)

3700 
	#NID_£t˘_B©chAdmöResTBE
 593

	)

3701 
	#OBJ_£t˘_B©chAdmöResTBE
 
OBJ_£t_˘y≥
,75L

	)

3703 
	#SN_£t˘_RegF‹mReqTBE
 "£t˘-RegF‹mReqTBE"

	)

3704 
	#NID_£t˘_RegF‹mReqTBE
 594

	)

3705 
	#OBJ_£t˘_RegF‹mReqTBE
 
OBJ_£t_˘y≥
,76L

	)

3707 
	#SN_£t˘_CîtReqTBE
 "£t˘-CîtReqTBE"

	)

3708 
	#NID_£t˘_CîtReqTBE
 595

	)

3709 
	#OBJ_£t˘_CîtReqTBE
 
OBJ_£t_˘y≥
,77L

	)

3711 
	#SN_£t˘_CîtReqTBEX
 "£t˘-CîtReqTBEX"

	)

3712 
	#NID_£t˘_CîtReqTBEX
 596

	)

3713 
	#OBJ_£t˘_CîtReqTBEX
 
OBJ_£t_˘y≥
,78L

	)

3715 
	#SN_£t˘_CîtResTBE
 "£t˘-CîtResTBE"

	)

3716 
	#NID_£t˘_CîtResTBE
 597

	)

3717 
	#OBJ_£t˘_CîtResTBE
 
OBJ_£t_˘y≥
,79L

	)

3719 
	#SN_£t˘_CRLNŸifiˇti⁄TBS
 "£t˘-CRLNŸifiˇti⁄TBS"

	)

3720 
	#NID_£t˘_CRLNŸifiˇti⁄TBS
 598

	)

3721 
	#OBJ_£t˘_CRLNŸifiˇti⁄TBS
 
OBJ_£t_˘y≥
,80L

	)

3723 
	#SN_£t˘_CRLNŸifiˇti⁄ResTBS
 "£t˘-CRLNŸifiˇti⁄ResTBS"

	)

3724 
	#NID_£t˘_CRLNŸifiˇti⁄ResTBS
 599

	)

3725 
	#OBJ_£t˘_CRLNŸifiˇti⁄ResTBS
 
OBJ_£t_˘y≥
,81L

	)

3727 
	#SN_£t˘_BCIDi°ributi⁄TBS
 "£t˘-BCIDi°ributi⁄TBS"

	)

3728 
	#NID_£t˘_BCIDi°ributi⁄TBS
 600

	)

3729 
	#OBJ_£t˘_BCIDi°ributi⁄TBS
 
OBJ_£t_˘y≥
,82L

	)

3731 
	#SN_£ãxt_gíCry±
 "£ãxt-gíCry±"

	)

3732 
	#LN_£ãxt_gíCry±
 "gíîi¯¸y±ogøm"

	)

3733 
	#NID_£ãxt_gíCry±
 601

	)

3734 
	#OBJ_£ãxt_gíCry±
 
OBJ_£t_msgExt
,1L

	)

3736 
	#SN_£ãxt_miAuth
 "£ãxt-miAuth"

	)

3737 
	#LN_£ãxt_miAuth
 "mîch™àöôüãdáuth"

	)

3738 
	#NID_£ãxt_miAuth
 602

	)

3739 
	#OBJ_£ãxt_miAuth
 
OBJ_£t_msgExt
,3L

	)

3741 
	#SN_£ãxt_pöSecuª
 "£ãxt-pöSecuª"

	)

3742 
	#NID_£ãxt_pöSecuª
 603

	)

3743 
	#OBJ_£ãxt_pöSecuª
 
OBJ_£t_msgExt
,4L

	)

3745 
	#SN_£ãxt_pöAny
 "£ãxt-pöAny"

	)

3746 
	#NID_£ãxt_pöAny
 604

	)

3747 
	#OBJ_£ãxt_pöAny
 
OBJ_£t_msgExt
,5L

	)

3749 
	#SN_£ãxt_åack2
 "£ãxt-åack2"

	)

3750 
	#NID_£ãxt_åack2
 605

	)

3751 
	#OBJ_£ãxt_åack2
 
OBJ_£t_msgExt
,7L

	)

3753 
	#SN_£ãxt_cv
 "£ãxt-cv"

	)

3754 
	#LN_£ãxt_cv
 "addôi⁄Æ vîifiˇti⁄"

	)

3755 
	#NID_£ãxt_cv
 606

	)

3756 
	#OBJ_£ãxt_cv
 
OBJ_£t_msgExt
,8L

	)

3758 
	#SN_£t_pﬁicy_roŸ
 "£t-pﬁicy-roŸ"

	)

3759 
	#NID_£t_pﬁicy_roŸ
 607

	)

3760 
	#OBJ_£t_pﬁicy_roŸ
 
OBJ_£t_pﬁicy
,0L

	)

3762 
	#SN_£tCext_hashedRoŸ
 "£tCext-hashedRoŸ"

	)

3763 
	#NID_£tCext_hashedRoŸ
 608

	)

3764 
	#OBJ_£tCext_hashedRoŸ
 
OBJ_£t_˚πExt
,0L

	)

3766 
	#SN_£tCext_˚πTy≥
 "£tCext-˚πTy≥"

	)

3767 
	#NID_£tCext_˚πTy≥
 609

	)

3768 
	#OBJ_£tCext_˚πTy≥
 
OBJ_£t_˚πExt
,1L

	)

3770 
	#SN_£tCext_mîchD©a
 "£tCext-mîchD©a"

	)

3771 
	#NID_£tCext_mîchD©a
 610

	)

3772 
	#OBJ_£tCext_mîchD©a
 
OBJ_£t_˚πExt
,2L

	)

3774 
	#SN_£tCext_cCîtRequúed
 "£tCext-cCîtRequúed"

	)

3775 
	#NID_£tCext_cCîtRequúed
 611

	)

3776 
	#OBJ_£tCext_cCîtRequúed
 
OBJ_£t_˚πExt
,3L

	)

3778 
	#SN_£tCext_tu¬ñög
 "£tCext-tu¬ñög"

	)

3779 
	#NID_£tCext_tu¬ñög
 612

	)

3780 
	#OBJ_£tCext_tu¬ñög
 
OBJ_£t_˚πExt
,4L

	)

3782 
	#SN_£tCext_£tExt
 "£tCext-£tExt"

	)

3783 
	#NID_£tCext_£tExt
 613

	)

3784 
	#OBJ_£tCext_£tExt
 
OBJ_£t_˚πExt
,5L

	)

3786 
	#SN_£tCext_£tQuÆf
 "£tCext-£tQuÆf"

	)

3787 
	#NID_£tCext_£tQuÆf
 614

	)

3788 
	#OBJ_£tCext_£tQuÆf
 
OBJ_£t_˚πExt
,6L

	)

3790 
	#SN_£tCext_PGWYˇ∑bûôõs
 "£tCext-PGWYˇ∑bûôõs"

	)

3791 
	#NID_£tCext_PGWYˇ∑bûôõs
 615

	)

3792 
	#OBJ_£tCext_PGWYˇ∑bûôõs
 
OBJ_£t_˚πExt
,7L

	)

3794 
	#SN_£tCext_TokíIdítifõr
 "£tCext-TokíIdítifõr"

	)

3795 
	#NID_£tCext_TokíIdítifõr
 616

	)

3796 
	#OBJ_£tCext_TokíIdítifõr
 
OBJ_£t_˚πExt
,8L

	)

3798 
	#SN_£tCext_Tøck2D©a
 "£tCext-Tøck2D©a"

	)

3799 
	#NID_£tCext_Tøck2D©a
 617

	)

3800 
	#OBJ_£tCext_Tøck2D©a
 
OBJ_£t_˚πExt
,9L

	)

3802 
	#SN_£tCext_TokíTy≥
 "£tCext-TokíTy≥"

	)

3803 
	#NID_£tCext_TokíTy≥
 618

	)

3804 
	#OBJ_£tCext_TokíTy≥
 
OBJ_£t_˚πExt
,10L

	)

3806 
	#SN_£tCext_IssuîC≠abûôõs
 "£tCext-IssuîC≠abûôõs"

	)

3807 
	#NID_£tCext_IssuîC≠abûôõs
 619

	)

3808 
	#OBJ_£tCext_IssuîC≠abûôõs
 
OBJ_£t_˚πExt
,11L

	)

3810 
	#SN_£tAâr_Cît
 "£tAâr-Cît"

	)

3811 
	#NID_£tAâr_Cît
 620

	)

3812 
	#OBJ_£tAâr_Cît
 
OBJ_£t_©å
,0L

	)

3814 
	#SN_£tAâr_PGWYˇp
 "£tAâr-PGWYˇp"

	)

3815 
	#LN_£tAâr_PGWYˇp
 "∑ymíàg©eway c≠abûôõs"

	)

3816 
	#NID_£tAâr_PGWYˇp
 621

	)

3817 
	#OBJ_£tAâr_PGWYˇp
 
OBJ_£t_©å
,1L

	)

3819 
	#SN_£tAâr_TokíTy≥
 "£tAâr-TokíTy≥"

	)

3820 
	#NID_£tAâr_TokíTy≥
 622

	)

3821 
	#OBJ_£tAâr_TokíTy≥
 
OBJ_£t_©å
,2L

	)

3823 
	#SN_£tAâr_IssC≠
 "£tAâr-IssC≠"

	)

3824 
	#LN_£tAâr_IssC≠
 "issuî c≠abûôõs"

	)

3825 
	#NID_£tAâr_IssC≠
 623

	)

3826 
	#OBJ_£tAâr_IssC≠
 
OBJ_£t_©å
,3L

	)

3828 
	#SN_£t_roŸKeyThumb
 "£t-roŸKeyThumb"

	)

3829 
	#NID_£t_roŸKeyThumb
 624

	)

3830 
	#OBJ_£t_roŸKeyThumb
 
OBJ_£tAâr_Cît
,0L

	)

3832 
	#SN_£t_addPﬁicy
 "£t-addPﬁicy"

	)

3833 
	#NID_£t_addPﬁicy
 625

	)

3834 
	#OBJ_£t_addPﬁicy
 
OBJ_£tAâr_Cît
,1L

	)

3836 
	#SN_£tAâr_Tokí_EMV
 "£tAâr-Tokí-EMV"

	)

3837 
	#NID_£tAâr_Tokí_EMV
 626

	)

3838 
	#OBJ_£tAâr_Tokí_EMV
 
OBJ_£tAâr_TokíTy≥
,1L

	)

3840 
	#SN_£tAâr_Tokí_B0Prime
 "£tAâr-Tokí-B0Prime"

	)

3841 
	#NID_£tAâr_Tokí_B0Prime
 627

	)

3842 
	#OBJ_£tAâr_Tokí_B0Prime
 
OBJ_£tAâr_TokíTy≥
,2L

	)

3844 
	#SN_£tAâr_IssC≠_CVM
 "£tAâr-IssC≠-CVM"

	)

3845 
	#NID_£tAâr_IssC≠_CVM
 628

	)

3846 
	#OBJ_£tAâr_IssC≠_CVM
 
OBJ_£tAâr_IssC≠
,3L

	)

3848 
	#SN_£tAâr_IssC≠_T2
 "£tAâr-IssC≠-T2"

	)

3849 
	#NID_£tAâr_IssC≠_T2
 629

	)

3850 
	#OBJ_£tAâr_IssC≠_T2
 
OBJ_£tAâr_IssC≠
,4L

	)

3852 
	#SN_£tAâr_IssC≠_Sig
 "£tAâr-IssC≠-Sig"

	)

3853 
	#NID_£tAâr_IssC≠_Sig
 630

	)

3854 
	#OBJ_£tAâr_IssC≠_Sig
 
OBJ_£tAâr_IssC≠
,5L

	)

3856 
	#SN_£tAâr_GíCry±grm
 "£tAâr-GíCry±grm"

	)

3857 
	#LN_£tAâr_GíCry±grm
 "gíî©ê¸y±ogøm"

	)

3858 
	#NID_£tAâr_GíCry±grm
 631

	)

3859 
	#OBJ_£tAâr_GíCry±grm
 
OBJ_£tAâr_IssC≠_CVM
,1L

	)

3861 
	#SN_£tAâr_T2Enc
 "£tAâr-T2Enc"

	)

3862 
	#LN_£tAâr_T2Enc
 "í¸y±edÅøck 2"

	)

3863 
	#NID_£tAâr_T2Enc
 632

	)

3864 
	#OBJ_£tAâr_T2Enc
 
OBJ_£tAâr_IssC≠_T2
,1L

	)

3866 
	#SN_£tAâr_T2˛óπxt
 "£tAâr-T2˛óπxt"

	)

3867 
	#LN_£tAâr_T2˛óπxt
 "˛óπexàåack 2"

	)

3868 
	#NID_£tAâr_T2˛óπxt
 633

	)

3869 
	#OBJ_£tAâr_T2˛óπxt
 
OBJ_£tAâr_IssC≠_T2
,2L

	)

3871 
	#SN_£tAâr_TokICCsig
 "£tAâr-TokICCsig"

	)

3872 
	#LN_£tAâr_TokICCsig
 "ICC o∏tokí sig«tuª"

	)

3873 
	#NID_£tAâr_TokICCsig
 634

	)

3874 
	#OBJ_£tAâr_TokICCsig
 
OBJ_£tAâr_IssC≠_Sig
,1L

	)

3876 
	#SN_£tAâr_SecDevSig
 "£tAâr-SecDevSig"

	)

3877 
	#LN_£tAâr_SecDevSig
 "£cuª devi˚ sig«tuª"

	)

3878 
	#NID_£tAâr_SecDevSig
 635

	)

3879 
	#OBJ_£tAâr_SecDevSig
 
OBJ_£tAâr_IssC≠_Sig
,2L

	)

3881 
	#SN_£t_bønd_IATA_ATA
 "£t-bønd-IATA-ATA"

	)

3882 
	#NID_£t_bønd_IATA_ATA
 636

	)

3883 
	#OBJ_£t_bønd_IATA_ATA
 
OBJ_£t_bønd
,1L

	)

3885 
	#SN_£t_bønd_Döîs
 "£t-bønd-Döîs"

	)

3886 
	#NID_£t_bønd_Döîs
 637

	)

3887 
	#OBJ_£t_bønd_Döîs
 
OBJ_£t_bønd
,30L

	)

3889 
	#SN_£t_bønd_AmîiˇnEx¥ess
 "£t-bønd-AmîiˇnEx¥ess"

	)

3890 
	#NID_£t_bønd_AmîiˇnEx¥ess
 638

	)

3891 
	#OBJ_£t_bønd_AmîiˇnEx¥ess
 
OBJ_£t_bønd
,34L

	)

3893 
	#SN_£t_bønd_JCB
 "£t-bønd-JCB"

	)

3894 
	#NID_£t_bønd_JCB
 639

	)

3895 
	#OBJ_£t_bønd_JCB
 
OBJ_£t_bønd
,35L

	)

3897 
	#SN_£t_bønd_Viß
 "£t-bønd-Viß"

	)

3898 
	#NID_£t_bønd_Viß
 640

	)

3899 
	#OBJ_£t_bønd_Viß
 
OBJ_£t_bønd
,4L

	)

3901 
	#SN_£t_bønd_Ma°îC¨d
 "£t-bønd-Ma°îC¨d"

	)

3902 
	#NID_£t_bønd_Ma°îC¨d
 641

	)

3903 
	#OBJ_£t_bønd_Ma°îC¨d
 
OBJ_£t_bønd
,5L

	)

3905 
	#SN_£t_bønd_Novus
 "£t-bønd-Novus"

	)

3906 
	#NID_£t_bønd_Novus
 642

	)

3907 
	#OBJ_£t_bønd_Novus
 
OBJ_£t_bønd
,6011L

	)

3909 
	#SN_des_cdmf
 "DES-CDMF"

	)

3910 
	#LN_des_cdmf
 "des-cdmf"

	)

3911 
	#NID_des_cdmf
 643

	)

3912 
	#OBJ_des_cdmf
 
OBJ_rßdsi
,3L,10L

	)

3914 
	#SN_rßOAEPEn¸y±i⁄SET
 "rßOAEPEn¸y±i⁄SET"

	)

3915 
	#NID_rßOAEPEn¸y±i⁄SET
 644

	)

3916 
	#OBJ_rßOAEPEn¸y±i⁄SET
 
OBJ_rßdsi
,1L,1L,6L

	)

3918 
	#SN_ù£c3
 "OakÀy-EC2N-3"

	)

3919 
	#LN_ù£c3
 "ù£c3"

	)

3920 
	#NID_ù£c3
 749

	)

3922 
	#SN_ù£c4
 "OakÀy-EC2N-4"

	)

3923 
	#LN_ù£c4
 "ù£c4"

	)

3924 
	#NID_ù£c4
 750

	)

3926 
	#SN_whúÕoﬁ
 "whúÕoﬁ"

	)

3927 
	#NID_whúÕoﬁ
 804

	)

3928 
	#OBJ_whúÕoﬁ
 
OBJ_iso
,0L,10118L,3L,0L,55L

	)

3930 
	#SN_¸y±›ro
 "¸y±›ro"

	)

3931 
	#NID_¸y±›ro
 805

	)

3932 
	#OBJ_¸y±›ro
 
OBJ_membî_body
,643L,2L,2L

	)

3934 
	#SN_¸y±ocom
 "¸y±ocom"

	)

3935 
	#NID_¸y±ocom
 806

	)

3936 
	#OBJ_¸y±ocom
 
OBJ_membî_body
,643L,2L,9L

	)

3938 
	#SN_id_tc26
 "id-tc26"

	)

3939 
	#NID_id_tc26
 974

	)

3940 
	#OBJ_id_tc26
 
OBJ_membî_body
,643L,7L,1L

	)

3942 
	#SN_id_Go°R3411_94_wôh_Go°R3410_2001
 "id-Go°R3411-94-wôh-Go°R3410-2001"

	)

3943 
	#LN_id_Go°R3411_94_wôh_Go°R3410_2001
 "GOST R 34.11-94 wôh GOST R 34.10-2001"

	)

3944 
	#NID_id_Go°R3411_94_wôh_Go°R3410_2001
 807

	)

3945 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_2001
 
OBJ_¸y±›ro
,3L

	)

3947 
	#SN_id_Go°R3411_94_wôh_Go°R3410_94
 "id-Go°R3411-94-wôh-Go°R3410-94"

	)

3948 
	#LN_id_Go°R3411_94_wôh_Go°R3410_94
 "GOST R 34.11-94 wôh GOST R 34.10-94"

	)

3949 
	#NID_id_Go°R3411_94_wôh_Go°R3410_94
 808

	)

3950 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_94
 
OBJ_¸y±›ro
,4L

	)

3952 
	#SN_id_Go°R3411_94
 "md_go°94"

	)

3953 
	#LN_id_Go°R3411_94
 "GOST R 34.11-94"

	)

3954 
	#NID_id_Go°R3411_94
 809

	)

3955 
	#OBJ_id_Go°R3411_94
 
OBJ_¸y±›ro
,9L

	)

3957 
	#SN_id_HMACGo°R3411_94
 "id-HMACGo°R3411-94"

	)

3958 
	#LN_id_HMACGo°R3411_94
 "HMAC GOST 34.11-94"

	)

3959 
	#NID_id_HMACGo°R3411_94
 810

	)

3960 
	#OBJ_id_HMACGo°R3411_94
 
OBJ_¸y±›ro
,10L

	)

3962 
	#SN_id_Go°R3410_2001
 "go°2001"

	)

3963 
	#LN_id_Go°R3410_2001
 "GOST R 34.10-2001"

	)

3964 
	#NID_id_Go°R3410_2001
 811

	)

3965 
	#OBJ_id_Go°R3410_2001
 
OBJ_¸y±›ro
,19L

	)

3967 
	#SN_id_Go°R3410_94
 "go°94"

	)

3968 
	#LN_id_Go°R3410_94
 "GOST R 34.10-94"

	)

3969 
	#NID_id_Go°R3410_94
 812

	)

3970 
	#OBJ_id_Go°R3410_94
 
OBJ_¸y±›ro
,20L

	)

3972 
	#SN_id_Go°28147_89
 "go°89"

	)

3973 
	#LN_id_Go°28147_89
 "GOST 28147-89"

	)

3974 
	#NID_id_Go°28147_89
 813

	)

3975 
	#OBJ_id_Go°28147_89
 
OBJ_¸y±›ro
,21L

	)

3977 
	#SN_go°89_˙t
 "go°89-˙t"

	)

3978 
	#NID_go°89_˙t
 814

	)

3980 
	#SN_go°89_˙t_12
 "go°89-˙t-12"

	)

3981 
	#NID_go°89_˙t_12
 975

	)

3983 
	#SN_go°89_cbc
 "go°89-cbc"

	)

3984 
	#NID_go°89_cbc
 1009

	)

3986 
	#SN_go°89_ecb
 "go°89-ecb"

	)

3987 
	#NID_go°89_ecb
 1010

	)

3989 
	#SN_go°89_˘r
 "go°89-˘r"

	)

3990 
	#NID_go°89_˘r
 1011

	)

3992 
	#SN_id_Go°28147_89_MAC
 "go°-mac"

	)

3993 
	#LN_id_Go°28147_89_MAC
 "GOST 28147-89 MAC"

	)

3994 
	#NID_id_Go°28147_89_MAC
 815

	)

3995 
	#OBJ_id_Go°28147_89_MAC
 
OBJ_¸y±›ro
,22L

	)

3997 
	#SN_go°_mac_12
 "go°-mac-12"

	)

3998 
	#NID_go°_mac_12
 976

	)

4000 
	#SN_id_Go°R3411_94_¥f
 "¥f-go°r3411-94"

	)

4001 
	#LN_id_Go°R3411_94_¥f
 "GOST R 34.11-94 PRF"

	)

4002 
	#NID_id_Go°R3411_94_¥f
 816

	)

4003 
	#OBJ_id_Go°R3411_94_¥f
 
OBJ_¸y±›ro
,23L

	)

4005 
	#SN_id_Go°R3410_2001DH
 "id-Go°R3410-2001DH"

	)

4006 
	#LN_id_Go°R3410_2001DH
 "GOST R 34.10-2001 DH"

	)

4007 
	#NID_id_Go°R3410_2001DH
 817

	)

4008 
	#OBJ_id_Go°R3410_2001DH
 
OBJ_¸y±›ro
,98L

	)

4010 
	#SN_id_Go°R3410_94DH
 "id-Go°R3410-94DH"

	)

4011 
	#LN_id_Go°R3410_94DH
 "GOST R 34.10-94 DH"

	)

4012 
	#NID_id_Go°R3410_94DH
 818

	)

4013 
	#OBJ_id_Go°R3410_94DH
 
OBJ_¸y±›ro
,99L

	)

4015 
	#SN_id_Go°28147_89_Cry±oPro_KeyMeshög
 "id-Go°28147-89-Cry±oPro-KeyMeshög"

	)

4016 
	#NID_id_Go°28147_89_Cry±oPro_KeyMeshög
 819

	)

4017 
	#OBJ_id_Go°28147_89_Cry±oPro_KeyMeshög
 
OBJ_¸y±›ro
,14L,1L

	)

4019 
	#SN_id_Go°28147_89_N⁄e_KeyMeshög
 "id-Go°28147-89-N⁄e-KeyMeshög"

	)

4020 
	#NID_id_Go°28147_89_N⁄e_KeyMeshög
 820

	)

4021 
	#OBJ_id_Go°28147_89_N⁄e_KeyMeshög
 
OBJ_¸y±›ro
,14L,0L

	)

4023 
	#SN_id_Go°R3411_94_Te°P¨amSë
 "id-Go°R3411-94-Te°P¨amSë"

	)

4024 
	#NID_id_Go°R3411_94_Te°P¨amSë
 821

	)

4025 
	#OBJ_id_Go°R3411_94_Te°P¨amSë
 
OBJ_¸y±›ro
,30L,0L

	)

4027 
	#SN_id_Go°R3411_94_Cry±oProP¨amSë
 "id-Go°R3411-94-Cry±oProP¨amSë"

	)

4028 
	#NID_id_Go°R3411_94_Cry±oProP¨amSë
 822

	)

4029 
	#OBJ_id_Go°R3411_94_Cry±oProP¨amSë
 
OBJ_¸y±›ro
,30L,1L

	)

4031 
	#SN_id_Go°28147_89_Te°P¨amSë
 "id-Go°28147-89-Te°P¨amSë"

	)

4032 
	#NID_id_Go°28147_89_Te°P¨amSë
 823

	)

4033 
	#OBJ_id_Go°28147_89_Te°P¨amSë
 
OBJ_¸y±›ro
,31L,0L

	)

4035 
	#SN_id_Go°28147_89_Cry±oPro_A_P¨amSë
 "id-Go°28147-89-Cry±oPro-A-P¨amSë"

	)

4036 
	#NID_id_Go°28147_89_Cry±oPro_A_P¨amSë
 824

	)

4037 
	#OBJ_id_Go°28147_89_Cry±oPro_A_P¨amSë
 
OBJ_¸y±›ro
,31L,1L

	)

4039 
	#SN_id_Go°28147_89_Cry±oPro_B_P¨amSë
 "id-Go°28147-89-Cry±oPro-B-P¨amSë"

	)

4040 
	#NID_id_Go°28147_89_Cry±oPro_B_P¨amSë
 825

	)

4041 
	#OBJ_id_Go°28147_89_Cry±oPro_B_P¨amSë
 
OBJ_¸y±›ro
,31L,2L

	)

4043 
	#SN_id_Go°28147_89_Cry±oPro_C_P¨amSë
 "id-Go°28147-89-Cry±oPro-C-P¨amSë"

	)

4044 
	#NID_id_Go°28147_89_Cry±oPro_C_P¨amSë
 826

	)

4045 
	#OBJ_id_Go°28147_89_Cry±oPro_C_P¨amSë
 
OBJ_¸y±›ro
,31L,3L

	)

4047 
	#SN_id_Go°28147_89_Cry±oPro_D_P¨amSë
 "id-Go°28147-89-Cry±oPro-D-P¨amSë"

	)

4048 
	#NID_id_Go°28147_89_Cry±oPro_D_P¨amSë
 827

	)

4049 
	#OBJ_id_Go°28147_89_Cry±oPro_D_P¨amSë
 
OBJ_¸y±›ro
,31L,4L

	)

4051 
	#SN_id_Go°28147_89_Cry±oPro_Osˇr_1_1_P¨amSë
 "id-Go°28147-89-Cry±oPro-Osˇr-1-1-P¨amSë"

	)

4052 
	#NID_id_Go°28147_89_Cry±oPro_Osˇr_1_1_P¨amSë
 828

	)

4053 
	#OBJ_id_Go°28147_89_Cry±oPro_Osˇr_1_1_P¨amSë
 
OBJ_¸y±›ro
,31L,5L

	)

4055 
	#SN_id_Go°28147_89_Cry±oPro_Osˇr_1_0_P¨amSë
 "id-Go°28147-89-Cry±oPro-Osˇr-1-0-P¨amSë"

	)

4056 
	#NID_id_Go°28147_89_Cry±oPro_Osˇr_1_0_P¨amSë
 829

	)

4057 
	#OBJ_id_Go°28147_89_Cry±oPro_Osˇr_1_0_P¨amSë
 
OBJ_¸y±›ro
,31L,6L

	)

4059 
	#SN_id_Go°28147_89_Cry±oPro_RIC_1_P¨amSë
 "id-Go°28147-89-Cry±oPro-RIC-1-P¨amSë"

	)

4060 
	#NID_id_Go°28147_89_Cry±oPro_RIC_1_P¨amSë
 830

	)

4061 
	#OBJ_id_Go°28147_89_Cry±oPro_RIC_1_P¨amSë
 
OBJ_¸y±›ro
,31L,7L

	)

4063 
	#SN_id_Go°R3410_94_Te°P¨amSë
 "id-Go°R3410-94-Te°P¨amSë"

	)

4064 
	#NID_id_Go°R3410_94_Te°P¨amSë
 831

	)

4065 
	#OBJ_id_Go°R3410_94_Te°P¨amSë
 
OBJ_¸y±›ro
,32L,0L

	)

4067 
	#SN_id_Go°R3410_94_Cry±oPro_A_P¨amSë
 "id-Go°R3410-94-Cry±oPro-A-P¨amSë"

	)

4068 
	#NID_id_Go°R3410_94_Cry±oPro_A_P¨amSë
 832

	)

4069 
	#OBJ_id_Go°R3410_94_Cry±oPro_A_P¨amSë
 
OBJ_¸y±›ro
,32L,2L

	)

4071 
	#SN_id_Go°R3410_94_Cry±oPro_B_P¨amSë
 "id-Go°R3410-94-Cry±oPro-B-P¨amSë"

	)

4072 
	#NID_id_Go°R3410_94_Cry±oPro_B_P¨amSë
 833

	)

4073 
	#OBJ_id_Go°R3410_94_Cry±oPro_B_P¨amSë
 
OBJ_¸y±›ro
,32L,3L

	)

4075 
	#SN_id_Go°R3410_94_Cry±oPro_C_P¨amSë
 "id-Go°R3410-94-Cry±oPro-C-P¨amSë"

	)

4076 
	#NID_id_Go°R3410_94_Cry±oPro_C_P¨amSë
 834

	)

4077 
	#OBJ_id_Go°R3410_94_Cry±oPro_C_P¨amSë
 
OBJ_¸y±›ro
,32L,4L

	)

4079 
	#SN_id_Go°R3410_94_Cry±oPro_D_P¨amSë
 "id-Go°R3410-94-Cry±oPro-D-P¨amSë"

	)

4080 
	#NID_id_Go°R3410_94_Cry±oPro_D_P¨amSë
 835

	)

4081 
	#OBJ_id_Go°R3410_94_Cry±oPro_D_P¨amSë
 
OBJ_¸y±›ro
,32L,5L

	)

4083 
	#SN_id_Go°R3410_94_Cry±oPro_XchA_P¨amSë
 "id-Go°R3410-94-Cry±oPro-XchA-P¨amSë"

	)

4084 
	#NID_id_Go°R3410_94_Cry±oPro_XchA_P¨amSë
 836

	)

4085 
	#OBJ_id_Go°R3410_94_Cry±oPro_XchA_P¨amSë
 
OBJ_¸y±›ro
,33L,1L

	)

4087 
	#SN_id_Go°R3410_94_Cry±oPro_XchB_P¨amSë
 "id-Go°R3410-94-Cry±oPro-XchB-P¨amSë"

	)

4088 
	#NID_id_Go°R3410_94_Cry±oPro_XchB_P¨amSë
 837

	)

4089 
	#OBJ_id_Go°R3410_94_Cry±oPro_XchB_P¨amSë
 
OBJ_¸y±›ro
,33L,2L

	)

4091 
	#SN_id_Go°R3410_94_Cry±oPro_XchC_P¨amSë
 "id-Go°R3410-94-Cry±oPro-XchC-P¨amSë"

	)

4092 
	#NID_id_Go°R3410_94_Cry±oPro_XchC_P¨amSë
 838

	)

4093 
	#OBJ_id_Go°R3410_94_Cry±oPro_XchC_P¨amSë
 
OBJ_¸y±›ro
,33L,3L

	)

4095 
	#SN_id_Go°R3410_2001_Te°P¨amSë
 "id-Go°R3410-2001-Te°P¨amSë"

	)

4096 
	#NID_id_Go°R3410_2001_Te°P¨amSë
 839

	)

4097 
	#OBJ_id_Go°R3410_2001_Te°P¨amSë
 
OBJ_¸y±›ro
,35L,0L

	)

4099 
	#SN_id_Go°R3410_2001_Cry±oPro_A_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-A-P¨amSë"

	)

4100 
	#NID_id_Go°R3410_2001_Cry±oPro_A_P¨amSë
 840

	)

4101 
	#OBJ_id_Go°R3410_2001_Cry±oPro_A_P¨amSë
 
OBJ_¸y±›ro
,35L,1L

	)

4103 
	#SN_id_Go°R3410_2001_Cry±oPro_B_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-B-P¨amSë"

	)

4104 
	#NID_id_Go°R3410_2001_Cry±oPro_B_P¨amSë
 841

	)

4105 
	#OBJ_id_Go°R3410_2001_Cry±oPro_B_P¨amSë
 
OBJ_¸y±›ro
,35L,2L

	)

4107 
	#SN_id_Go°R3410_2001_Cry±oPro_C_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-C-P¨amSë"

	)

4108 
	#NID_id_Go°R3410_2001_Cry±oPro_C_P¨amSë
 842

	)

4109 
	#OBJ_id_Go°R3410_2001_Cry±oPro_C_P¨amSë
 
OBJ_¸y±›ro
,35L,3L

	)

4111 
	#SN_id_Go°R3410_2001_Cry±oPro_XchA_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-XchA-P¨amSë"

	)

4112 
	#NID_id_Go°R3410_2001_Cry±oPro_XchA_P¨amSë
 843

	)

4113 
	#OBJ_id_Go°R3410_2001_Cry±oPro_XchA_P¨amSë
 
OBJ_¸y±›ro
,36L,0L

	)

4115 
	#SN_id_Go°R3410_2001_Cry±oPro_XchB_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-XchB-P¨amSë"

	)

4116 
	#NID_id_Go°R3410_2001_Cry±oPro_XchB_P¨amSë
 844

	)

4117 
	#OBJ_id_Go°R3410_2001_Cry±oPro_XchB_P¨amSë
 
OBJ_¸y±›ro
,36L,1L

	)

4119 
	#SN_id_Go°R3410_94_a
 "id-Go°R3410-94-a"

	)

4120 
	#NID_id_Go°R3410_94_a
 845

	)

4121 
	#OBJ_id_Go°R3410_94_a
 
OBJ_id_Go°R3410_94
,1L

	)

4123 
	#SN_id_Go°R3410_94_aBis
 "id-Go°R3410-94-aBis"

	)

4124 
	#NID_id_Go°R3410_94_aBis
 846

	)

4125 
	#OBJ_id_Go°R3410_94_aBis
 
OBJ_id_Go°R3410_94
,2L

	)

4127 
	#SN_id_Go°R3410_94_b
 "id-Go°R3410-94-b"

	)

4128 
	#NID_id_Go°R3410_94_b
 847

	)

4129 
	#OBJ_id_Go°R3410_94_b
 
OBJ_id_Go°R3410_94
,3L

	)

4131 
	#SN_id_Go°R3410_94_bBis
 "id-Go°R3410-94-bBis"

	)

4132 
	#NID_id_Go°R3410_94_bBis
 848

	)

4133 
	#OBJ_id_Go°R3410_94_bBis
 
OBJ_id_Go°R3410_94
,4L

	)

4135 
	#SN_id_Go°28147_89_cc
 "id-Go°28147-89-cc"

	)

4136 
	#LN_id_Go°28147_89_cc
 "GOST 28147-89 Cry±ocom P¨amSë"

	)

4137 
	#NID_id_Go°28147_89_cc
 849

	)

4138 
	#OBJ_id_Go°28147_89_cc
 
OBJ_¸y±ocom
,1L,6L,1L

	)

4140 
	#SN_id_Go°R3410_94_cc
 "go°94cc"

	)

4141 
	#LN_id_Go°R3410_94_cc
 "GOST 34.10-94 Cry±ocom"

	)

4142 
	#NID_id_Go°R3410_94_cc
 850

	)

4143 
	#OBJ_id_Go°R3410_94_cc
 
OBJ_¸y±ocom
,1L,5L,3L

	)

4145 
	#SN_id_Go°R3410_2001_cc
 "go°2001cc"

	)

4146 
	#LN_id_Go°R3410_2001_cc
 "GOST 34.10-2001 Cry±ocom"

	)

4147 
	#NID_id_Go°R3410_2001_cc
 851

	)

4148 
	#OBJ_id_Go°R3410_2001_cc
 
OBJ_¸y±ocom
,1L,5L,4L

	)

4150 
	#SN_id_Go°R3411_94_wôh_Go°R3410_94_cc
 "id-Go°R3411-94-wôh-Go°R3410-94-cc"

	)

4151 
	#LN_id_Go°R3411_94_wôh_Go°R3410_94_cc
 "GOST R 34.11-94 wôh GOST R 34.10-94 Cry±ocom"

	)

4152 
	#NID_id_Go°R3411_94_wôh_Go°R3410_94_cc
 852

	)

4153 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_94_cc
 
OBJ_¸y±ocom
,1L,3L,3L

	)

4155 
	#SN_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 "id-Go°R3411-94-wôh-Go°R3410-2001-cc"

	)

4156 
	#LN_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 "GOST R 34.11-94 wôh GOST R 34.10-2001 Cry±ocom"

	)

4157 
	#NID_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 853

	)

4158 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 
OBJ_¸y±ocom
,1L,3L,4L

	)

4160 
	#SN_id_Go°R3410_2001_P¨amSë_cc
 "id-Go°R3410-2001-P¨amSë-cc"

	)

4161 
	#LN_id_Go°R3410_2001_P¨amSë_cc
 "GOST R 3410-2001 P¨amëî Së Cry±ocom"

	)

4162 
	#NID_id_Go°R3410_2001_P¨amSë_cc
 854

	)

4163 
	#OBJ_id_Go°R3410_2001_P¨amSë_cc
 
OBJ_¸y±ocom
,1L,8L,1L

	)

4165 
	#SN_id_tc26_Æg‹ôhms
 "id-tc26-Æg‹ôhms"

	)

4166 
	#NID_id_tc26_Æg‹ôhms
 977

	)

4167 
	#OBJ_id_tc26_Æg‹ôhms
 
OBJ_id_tc26
,1L

	)

4169 
	#SN_id_tc26_sign
 "id-tc26-sign"

	)

4170 
	#NID_id_tc26_sign
 978

	)

4171 
	#OBJ_id_tc26_sign
 
OBJ_id_tc26_Æg‹ôhms
,1L

	)

4173 
	#SN_id_Go°R3410_2012_256
 "go°2012_256"

	)

4174 
	#LN_id_Go°R3410_2012_256
 "GOST R 34.10-2012 wôh 256 bô modulus"

	)

4175 
	#NID_id_Go°R3410_2012_256
 979

	)

4176 
	#OBJ_id_Go°R3410_2012_256
 
OBJ_id_tc26_sign
,1L

	)

4178 
	#SN_id_Go°R3410_2012_512
 "go°2012_512"

	)

4179 
	#LN_id_Go°R3410_2012_512
 "GOST R 34.10-2012 wôh 512 bô modulus"

	)

4180 
	#NID_id_Go°R3410_2012_512
 980

	)

4181 
	#OBJ_id_Go°R3410_2012_512
 
OBJ_id_tc26_sign
,2L

	)

4183 
	#SN_id_tc26_dige°
 "id-tc26-dige°"

	)

4184 
	#NID_id_tc26_dige°
 981

	)

4185 
	#OBJ_id_tc26_dige°
 
OBJ_id_tc26_Æg‹ôhms
,2L

	)

4187 
	#SN_id_Go°R3411_2012_256
 "md_go°12_256"

	)

4188 
	#LN_id_Go°R3411_2012_256
 "GOST R 34.11-2012 wôh 256 bô hash"

	)

4189 
	#NID_id_Go°R3411_2012_256
 982

	)

4190 
	#OBJ_id_Go°R3411_2012_256
 
OBJ_id_tc26_dige°
,2L

	)

4192 
	#SN_id_Go°R3411_2012_512
 "md_go°12_512"

	)

4193 
	#LN_id_Go°R3411_2012_512
 "GOST R 34.11-2012 wôh 512 bô hash"

	)

4194 
	#NID_id_Go°R3411_2012_512
 983

	)

4195 
	#OBJ_id_Go°R3411_2012_512
 
OBJ_id_tc26_dige°
,3L

	)

4197 
	#SN_id_tc26_signwôhdige°
 "id-tc26-signwôhdige°"

	)

4198 
	#NID_id_tc26_signwôhdige°
 984

	)

4199 
	#OBJ_id_tc26_signwôhdige°
 
OBJ_id_tc26_Æg‹ôhms
,3L

	)

4201 
	#SN_id_tc26_signwôhdige°_go°3410_2012_256
 "id-tc26-signwôhdige°-go°3410-2012-256"

	)

4202 
	#LN_id_tc26_signwôhdige°_go°3410_2012_256
 "GOST R 34.10-2012 wôh GOST R 34.11-2012 (256 bô)"

	)

4203 
	#NID_id_tc26_signwôhdige°_go°3410_2012_256
 985

	)

4204 
	#OBJ_id_tc26_signwôhdige°_go°3410_2012_256
 
OBJ_id_tc26_signwôhdige°
,2L

	)

4206 
	#SN_id_tc26_signwôhdige°_go°3410_2012_512
 "id-tc26-signwôhdige°-go°3410-2012-512"

	)

4207 
	#LN_id_tc26_signwôhdige°_go°3410_2012_512
 "GOST R 34.10-2012 wôh GOST R 34.11-2012 (512 bô)"

	)

4208 
	#NID_id_tc26_signwôhdige°_go°3410_2012_512
 986

	)

4209 
	#OBJ_id_tc26_signwôhdige°_go°3410_2012_512
 
OBJ_id_tc26_signwôhdige°
,3L

	)

4211 
	#SN_id_tc26_mac
 "id-tc26-mac"

	)

4212 
	#NID_id_tc26_mac
 987

	)

4213 
	#OBJ_id_tc26_mac
 
OBJ_id_tc26_Æg‹ôhms
,4L

	)

4215 
	#SN_id_tc26_hmac_go°_3411_2012_256
 "id-tc26-hmac-go°-3411-2012-256"

	)

4216 
	#LN_id_tc26_hmac_go°_3411_2012_256
 "HMAC GOST 34.11-2012 256 bô"

	)

4217 
	#NID_id_tc26_hmac_go°_3411_2012_256
 988

	)

4218 
	#OBJ_id_tc26_hmac_go°_3411_2012_256
 
OBJ_id_tc26_mac
,1L

	)

4220 
	#SN_id_tc26_hmac_go°_3411_2012_512
 "id-tc26-hmac-go°-3411-2012-512"

	)

4221 
	#LN_id_tc26_hmac_go°_3411_2012_512
 "HMAC GOST 34.11-2012 512 bô"

	)

4222 
	#NID_id_tc26_hmac_go°_3411_2012_512
 989

	)

4223 
	#OBJ_id_tc26_hmac_go°_3411_2012_512
 
OBJ_id_tc26_mac
,2L

	)

4225 
	#SN_id_tc26_cùhî
 "id-tc26-cùhî"

	)

4226 
	#NID_id_tc26_cùhî
 990

	)

4227 
	#OBJ_id_tc26_cùhî
 
OBJ_id_tc26_Æg‹ôhms
,5L

	)

4229 
	#SN_id_tc26_cùhî_go°r3412_2015_magma
 "id-tc26-cùhî-go°r3412-2015-magma"

	)

4230 
	#NID_id_tc26_cùhî_go°r3412_2015_magma
 1173

	)

4231 
	#OBJ_id_tc26_cùhî_go°r3412_2015_magma
 
OBJ_id_tc26_cùhî
,1L

	)

4233 
	#SN_id_tc26_cùhî_go°r3412_2015_magma_˘ø˝km
 "id-tc26-cùhî-go°r3412-2015-magma-˘ø˝km"

	)

4234 
	#NID_id_tc26_cùhî_go°r3412_2015_magma_˘ø˝km
 1174

	)

4235 
	#OBJ_id_tc26_cùhî_go°r3412_2015_magma_˘ø˝km
 
OBJ_id_tc26_cùhî_go°r3412_2015_magma
,1L

	)

4237 
	#SN_id_tc26_cùhî_go°r3412_2015_magma_˘ø˝km_omac
 "id-tc26-cùhî-go°r3412-2015-magma-˘ø˝km-omac"

	)

4238 
	#NID_id_tc26_cùhî_go°r3412_2015_magma_˘ø˝km_omac
 1175

	)

4239 
	#OBJ_id_tc26_cùhî_go°r3412_2015_magma_˘ø˝km_omac
 
OBJ_id_tc26_cùhî_go°r3412_2015_magma
,2L

	)

4241 
	#SN_id_tc26_cùhî_go°r3412_2015_kuznyechik
 "id-tc26-cùhî-go°r3412-2015-kuznyechik"

	)

4242 
	#NID_id_tc26_cùhî_go°r3412_2015_kuznyechik
 1176

	)

4243 
	#OBJ_id_tc26_cùhî_go°r3412_2015_kuznyechik
 
OBJ_id_tc26_cùhî
,2L

	)

4245 
	#SN_id_tc26_cùhî_go°r3412_2015_kuznyechik_˘ø˝km
 "id-tc26-cùhî-go°r3412-2015-kuznyechik-˘ø˝km"

	)

4246 
	#NID_id_tc26_cùhî_go°r3412_2015_kuznyechik_˘ø˝km
 1177

	)

4247 
	#OBJ_id_tc26_cùhî_go°r3412_2015_kuznyechik_˘ø˝km
 
OBJ_id_tc26_cùhî_go°r3412_2015_kuznyechik
,1L

	)

4249 
	#SN_id_tc26_cùhî_go°r3412_2015_kuznyechik_˘ø˝km_omac
 "id-tc26-cùhî-go°r3412-2015-kuznyechik-˘ø˝km-omac"

	)

4250 
	#NID_id_tc26_cùhî_go°r3412_2015_kuznyechik_˘ø˝km_omac
 1178

	)

4251 
	#OBJ_id_tc26_cùhî_go°r3412_2015_kuznyechik_˘ø˝km_omac
 
OBJ_id_tc26_cùhî_go°r3412_2015_kuznyechik
,2L

	)

4253 
	#SN_id_tc26_agªemít
 "id-tc26-agªemít"

	)

4254 
	#NID_id_tc26_agªemít
 991

	)

4255 
	#OBJ_id_tc26_agªemít
 
OBJ_id_tc26_Æg‹ôhms
,6L

	)

4257 
	#SN_id_tc26_agªemít_go°_3410_2012_256
 "id-tc26-agªemít-go°-3410-2012-256"

	)

4258 
	#NID_id_tc26_agªemít_go°_3410_2012_256
 992

	)

4259 
	#OBJ_id_tc26_agªemít_go°_3410_2012_256
 
OBJ_id_tc26_agªemít
,1L

	)

4261 
	#SN_id_tc26_agªemít_go°_3410_2012_512
 "id-tc26-agªemít-go°-3410-2012-512"

	)

4262 
	#NID_id_tc26_agªemít_go°_3410_2012_512
 993

	)

4263 
	#OBJ_id_tc26_agªemít_go°_3410_2012_512
 
OBJ_id_tc26_agªemít
,2L

	)

4265 
	#SN_id_tc26_wøp
 "id-tc26-wøp"

	)

4266 
	#NID_id_tc26_wøp
 1179

	)

4267 
	#OBJ_id_tc26_wøp
 
OBJ_id_tc26_Æg‹ôhms
,7L

	)

4269 
	#SN_id_tc26_wøp_go°r3412_2015_magma
 "id-tc26-wøp-go°r3412-2015-magma"

	)

4270 
	#NID_id_tc26_wøp_go°r3412_2015_magma
 1180

	)

4271 
	#OBJ_id_tc26_wøp_go°r3412_2015_magma
 
OBJ_id_tc26_wøp
,1L

	)

4273 
	#SN_id_tc26_wøp_go°r3412_2015_magma_kexp15
 "id-tc26-wøp-go°r3412-2015-magma-kexp15"

	)

4274 
	#NID_id_tc26_wøp_go°r3412_2015_magma_kexp15
 1181

	)

4275 
	#OBJ_id_tc26_wøp_go°r3412_2015_magma_kexp15
 
OBJ_id_tc26_wøp_go°r3412_2015_magma
,1L

	)

4277 
	#SN_id_tc26_wøp_go°r3412_2015_kuznyechik
 "id-tc26-wøp-go°r3412-2015-kuznyechik"

	)

4278 
	#NID_id_tc26_wøp_go°r3412_2015_kuznyechik
 1182

	)

4279 
	#OBJ_id_tc26_wøp_go°r3412_2015_kuznyechik
 
OBJ_id_tc26_wøp
,2L

	)

4281 
	#SN_id_tc26_wøp_go°r3412_2015_kuznyechik_kexp15
 "id-tc26-wøp-go°r3412-2015-kuznyechik-kexp15"

	)

4282 
	#NID_id_tc26_wøp_go°r3412_2015_kuznyechik_kexp15
 1183

	)

4283 
	#OBJ_id_tc26_wøp_go°r3412_2015_kuznyechik_kexp15
 
OBJ_id_tc26_wøp_go°r3412_2015_kuznyechik
,1L

	)

4285 
	#SN_id_tc26_c⁄°™ts
 "id-tc26-c⁄°™ts"

	)

4286 
	#NID_id_tc26_c⁄°™ts
 994

	)

4287 
	#OBJ_id_tc26_c⁄°™ts
 
OBJ_id_tc26
,2L

	)

4289 
	#SN_id_tc26_sign_c⁄°™ts
 "id-tc26-sign-c⁄°™ts"

	)

4290 
	#NID_id_tc26_sign_c⁄°™ts
 995

	)

4291 
	#OBJ_id_tc26_sign_c⁄°™ts
 
OBJ_id_tc26_c⁄°™ts
,1L

	)

4293 
	#SN_id_tc26_go°_3410_2012_256_c⁄°™ts
 "id-tc26-go°-3410-2012-256-c⁄°™ts"

	)

4294 
	#NID_id_tc26_go°_3410_2012_256_c⁄°™ts
 1147

	)

4295 
	#OBJ_id_tc26_go°_3410_2012_256_c⁄°™ts
 
OBJ_id_tc26_sign_c⁄°™ts
,1L

	)

4297 
	#SN_id_tc26_go°_3410_2012_256_∑ømSëA
 "id-tc26-go°-3410-2012-256-∑ømSëA"

	)

4298 
	#LN_id_tc26_go°_3410_2012_256_∑ømSëA
 "GOST R 34.10-2012 (256 bôËP¨amSë A"

	)

4299 
	#NID_id_tc26_go°_3410_2012_256_∑ømSëA
 1148

	)

4300 
	#OBJ_id_tc26_go°_3410_2012_256_∑ømSëA
 
OBJ_id_tc26_go°_3410_2012_256_c⁄°™ts
,1L

	)

4302 
	#SN_id_tc26_go°_3410_2012_256_∑ømSëB
 "id-tc26-go°-3410-2012-256-∑ømSëB"

	)

4303 
	#LN_id_tc26_go°_3410_2012_256_∑ømSëB
 "GOST R 34.10-2012 (256 bôËP¨amSë B"

	)

4304 
	#NID_id_tc26_go°_3410_2012_256_∑ømSëB
 1184

	)

4305 
	#OBJ_id_tc26_go°_3410_2012_256_∑ømSëB
 
OBJ_id_tc26_go°_3410_2012_256_c⁄°™ts
,2L

	)

4307 
	#SN_id_tc26_go°_3410_2012_256_∑ømSëC
 "id-tc26-go°-3410-2012-256-∑ømSëC"

	)

4308 
	#LN_id_tc26_go°_3410_2012_256_∑ømSëC
 "GOST R 34.10-2012 (256 bôËP¨amSë C"

	)

4309 
	#NID_id_tc26_go°_3410_2012_256_∑ømSëC
 1185

	)

4310 
	#OBJ_id_tc26_go°_3410_2012_256_∑ømSëC
 
OBJ_id_tc26_go°_3410_2012_256_c⁄°™ts
,3L

	)

4312 
	#SN_id_tc26_go°_3410_2012_256_∑ømSëD
 "id-tc26-go°-3410-2012-256-∑ømSëD"

	)

4313 
	#LN_id_tc26_go°_3410_2012_256_∑ømSëD
 "GOST R 34.10-2012 (256 bôËP¨amSë D"

	)

4314 
	#NID_id_tc26_go°_3410_2012_256_∑ømSëD
 1186

	)

4315 
	#OBJ_id_tc26_go°_3410_2012_256_∑ømSëD
 
OBJ_id_tc26_go°_3410_2012_256_c⁄°™ts
,4L

	)

4317 
	#SN_id_tc26_go°_3410_2012_512_c⁄°™ts
 "id-tc26-go°-3410-2012-512-c⁄°™ts"

	)

4318 
	#NID_id_tc26_go°_3410_2012_512_c⁄°™ts
 996

	)

4319 
	#OBJ_id_tc26_go°_3410_2012_512_c⁄°™ts
 
OBJ_id_tc26_sign_c⁄°™ts
,2L

	)

4321 
	#SN_id_tc26_go°_3410_2012_512_∑ømSëTe°
 "id-tc26-go°-3410-2012-512-∑ømSëTe°"

	)

4322 
	#LN_id_tc26_go°_3410_2012_512_∑ømSëTe°
 "GOST R 34.10-2012 (512 bôËã°ögÖ¨amëî së"

	)

4323 
	#NID_id_tc26_go°_3410_2012_512_∑ømSëTe°
 997

	)

4324 
	#OBJ_id_tc26_go°_3410_2012_512_∑ømSëTe°
 
OBJ_id_tc26_go°_3410_2012_512_c⁄°™ts
,0L

	)

4326 
	#SN_id_tc26_go°_3410_2012_512_∑ømSëA
 "id-tc26-go°-3410-2012-512-∑ømSëA"

	)

4327 
	#LN_id_tc26_go°_3410_2012_512_∑ømSëA
 "GOST R 34.10-2012 (512 bôËP¨amSë A"

	)

4328 
	#NID_id_tc26_go°_3410_2012_512_∑ømSëA
 998

	)

4329 
	#OBJ_id_tc26_go°_3410_2012_512_∑ømSëA
 
OBJ_id_tc26_go°_3410_2012_512_c⁄°™ts
,1L

	)

4331 
	#SN_id_tc26_go°_3410_2012_512_∑ømSëB
 "id-tc26-go°-3410-2012-512-∑ømSëB"

	)

4332 
	#LN_id_tc26_go°_3410_2012_512_∑ømSëB
 "GOST R 34.10-2012 (512 bôËP¨amSë B"

	)

4333 
	#NID_id_tc26_go°_3410_2012_512_∑ømSëB
 999

	)

4334 
	#OBJ_id_tc26_go°_3410_2012_512_∑ømSëB
 
OBJ_id_tc26_go°_3410_2012_512_c⁄°™ts
,2L

	)

4336 
	#SN_id_tc26_go°_3410_2012_512_∑ømSëC
 "id-tc26-go°-3410-2012-512-∑ømSëC"

	)

4337 
	#LN_id_tc26_go°_3410_2012_512_∑ømSëC
 "GOST R 34.10-2012 (512 bôËP¨amSë C"

	)

4338 
	#NID_id_tc26_go°_3410_2012_512_∑ømSëC
 1149

	)

4339 
	#OBJ_id_tc26_go°_3410_2012_512_∑ømSëC
 
OBJ_id_tc26_go°_3410_2012_512_c⁄°™ts
,3L

	)

4341 
	#SN_id_tc26_dige°_c⁄°™ts
 "id-tc26-dige°-c⁄°™ts"

	)

4342 
	#NID_id_tc26_dige°_c⁄°™ts
 1000

	)

4343 
	#OBJ_id_tc26_dige°_c⁄°™ts
 
OBJ_id_tc26_c⁄°™ts
,2L

	)

4345 
	#SN_id_tc26_cùhî_c⁄°™ts
 "id-tc26-cùhî-c⁄°™ts"

	)

4346 
	#NID_id_tc26_cùhî_c⁄°™ts
 1001

	)

4347 
	#OBJ_id_tc26_cùhî_c⁄°™ts
 
OBJ_id_tc26_c⁄°™ts
,5L

	)

4349 
	#SN_id_tc26_go°_28147_c⁄°™ts
 "id-tc26-go°-28147-c⁄°™ts"

	)

4350 
	#NID_id_tc26_go°_28147_c⁄°™ts
 1002

	)

4351 
	#OBJ_id_tc26_go°_28147_c⁄°™ts
 
OBJ_id_tc26_cùhî_c⁄°™ts
,1L

	)

4353 
	#SN_id_tc26_go°_28147_∑øm_Z
 "id-tc26-go°-28147-∑øm-Z"

	)

4354 
	#LN_id_tc26_go°_28147_∑øm_Z
 "GOST 28147-89 TC26Ö¨amëî së"

	)

4355 
	#NID_id_tc26_go°_28147_∑øm_Z
 1003

	)

4356 
	#OBJ_id_tc26_go°_28147_∑øm_Z
 
OBJ_id_tc26_go°_28147_c⁄°™ts
,1L

	)

4358 
	#SN_INN
 "INN"

	)

4359 
	#LN_INN
 "INN"

	)

4360 
	#NID_INN
 1004

	)

4361 
	#OBJ_INN
 
OBJ_membî_body
,643L,3L,131L,1L,1L

	)

4363 
	#SN_OGRN
 "OGRN"

	)

4364 
	#LN_OGRN
 "OGRN"

	)

4365 
	#NID_OGRN
 1005

	)

4366 
	#OBJ_OGRN
 
OBJ_membî_body
,643L,100L,1L

	)

4368 
	#SN_SNILS
 "SNILS"

	)

4369 
	#LN_SNILS
 "SNILS"

	)

4370 
	#NID_SNILS
 1006

	)

4371 
	#OBJ_SNILS
 
OBJ_membî_body
,643L,100L,3L

	)

4373 
	#SN_subje˘SignToﬁ
 "subje˘SignToﬁ"

	)

4374 
	#LN_subje˘SignToﬁ
 "Signög Toﬁ o‡Subje˘"

	)

4375 
	#NID_subje˘SignToﬁ
 1007

	)

4376 
	#OBJ_subje˘SignToﬁ
 
OBJ_membî_body
,643L,100L,111L

	)

4378 
	#SN_issuîSignToﬁ
 "issuîSignToﬁ"

	)

4379 
	#LN_issuîSignToﬁ
 "Signög Toﬁ o‡Issuî"

	)

4380 
	#NID_issuîSignToﬁ
 1008

	)

4381 
	#OBJ_issuîSignToﬁ
 
OBJ_membî_body
,643L,100L,112L

	)

4383 
	#SN_gøssh›≥r_ecb
 "gøssh›≥r-ecb"

	)

4384 
	#NID_gøssh›≥r_ecb
 1012

	)

4386 
	#SN_gøssh›≥r_˘r
 "gøssh›≥r-˘r"

	)

4387 
	#NID_gøssh›≥r_˘r
 1013

	)

4389 
	#SN_gøssh›≥r_ofb
 "gøssh›≥r-ofb"

	)

4390 
	#NID_gøssh›≥r_ofb
 1014

	)

4392 
	#SN_gøssh›≥r_cbc
 "gøssh›≥r-cbc"

	)

4393 
	#NID_gøssh›≥r_cbc
 1015

	)

4395 
	#SN_gøssh›≥r_cfb
 "gøssh›≥r-cfb"

	)

4396 
	#NID_gøssh›≥r_cfb
 1016

	)

4398 
	#SN_gøssh›≥r_mac
 "gøssh›≥r-mac"

	)

4399 
	#NID_gøssh›≥r_mac
 1017

	)

4401 
	#SN_magma_ecb
 "magma-ecb"

	)

4402 
	#NID_magma_ecb
 1187

	)

4404 
	#SN_magma_˘r
 "magma-˘r"

	)

4405 
	#NID_magma_˘r
 1188

	)

4407 
	#SN_magma_ofb
 "magma-ofb"

	)

4408 
	#NID_magma_ofb
 1189

	)

4410 
	#SN_magma_cbc
 "magma-cbc"

	)

4411 
	#NID_magma_cbc
 1190

	)

4413 
	#SN_magma_cfb
 "magma-cfb"

	)

4414 
	#NID_magma_cfb
 1191

	)

4416 
	#SN_magma_mac
 "magma-mac"

	)

4417 
	#NID_magma_mac
 1192

	)

4419 
	#SN_ˇmñlü_128_cbc
 "CAMELLIA-128-CBC"

	)

4420 
	#LN_ˇmñlü_128_cbc
 "ˇmñlü-128-cbc"

	)

4421 
	#NID_ˇmñlü_128_cbc
 751

	)

4422 
	#OBJ_ˇmñlü_128_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,2L

	)

4424 
	#SN_ˇmñlü_192_cbc
 "CAMELLIA-192-CBC"

	)

4425 
	#LN_ˇmñlü_192_cbc
 "ˇmñlü-192-cbc"

	)

4426 
	#NID_ˇmñlü_192_cbc
 752

	)

4427 
	#OBJ_ˇmñlü_192_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,3L

	)

4429 
	#SN_ˇmñlü_256_cbc
 "CAMELLIA-256-CBC"

	)

4430 
	#LN_ˇmñlü_256_cbc
 "ˇmñlü-256-cbc"

	)

4431 
	#NID_ˇmñlü_256_cbc
 753

	)

4432 
	#OBJ_ˇmñlü_256_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,4L

	)

4434 
	#SN_id_ˇmñlü128_wøp
 "id-ˇmñlü128-wøp"

	)

4435 
	#NID_id_ˇmñlü128_wøp
 907

	)

4436 
	#OBJ_id_ˇmñlü128_wøp
 1L,2L,392L,200011L,61L,1L,1L,3L,2L

	)

4438 
	#SN_id_ˇmñlü192_wøp
 "id-ˇmñlü192-wøp"

	)

4439 
	#NID_id_ˇmñlü192_wøp
 908

	)

4440 
	#OBJ_id_ˇmñlü192_wøp
 1L,2L,392L,200011L,61L,1L,1L,3L,3L

	)

4442 
	#SN_id_ˇmñlü256_wøp
 "id-ˇmñlü256-wøp"

	)

4443 
	#NID_id_ˇmñlü256_wøp
 909

	)

4444 
	#OBJ_id_ˇmñlü256_wøp
 1L,2L,392L,200011L,61L,1L,1L,3L,4L

	)

4446 
	#OBJ_¡t_ds
 0L,3L,4401L,5L

	)

4448 
	#OBJ_ˇmñlü
 
OBJ_¡t_ds
,3L,1L,9L

	)

4450 
	#SN_ˇmñlü_128_ecb
 "CAMELLIA-128-ECB"

	)

4451 
	#LN_ˇmñlü_128_ecb
 "ˇmñlü-128-ecb"

	)

4452 
	#NID_ˇmñlü_128_ecb
 754

	)

4453 
	#OBJ_ˇmñlü_128_ecb
 
OBJ_ˇmñlü
,1L

	)

4455 
	#SN_ˇmñlü_128_ofb128
 "CAMELLIA-128-OFB"

	)

4456 
	#LN_ˇmñlü_128_ofb128
 "ˇmñlü-128-ofb"

	)

4457 
	#NID_ˇmñlü_128_ofb128
 766

	)

4458 
	#OBJ_ˇmñlü_128_ofb128
 
OBJ_ˇmñlü
,3L

	)

4460 
	#SN_ˇmñlü_128_cfb128
 "CAMELLIA-128-CFB"

	)

4461 
	#LN_ˇmñlü_128_cfb128
 "ˇmñlü-128-cfb"

	)

4462 
	#NID_ˇmñlü_128_cfb128
 757

	)

4463 
	#OBJ_ˇmñlü_128_cfb128
 
OBJ_ˇmñlü
,4L

	)

4465 
	#SN_ˇmñlü_128_gcm
 "CAMELLIA-128-GCM"

	)

4466 
	#LN_ˇmñlü_128_gcm
 "ˇmñlü-128-gcm"

	)

4467 
	#NID_ˇmñlü_128_gcm
 961

	)

4468 
	#OBJ_ˇmñlü_128_gcm
 
OBJ_ˇmñlü
,6L

	)

4470 
	#SN_ˇmñlü_128_ccm
 "CAMELLIA-128-CCM"

	)

4471 
	#LN_ˇmñlü_128_ccm
 "ˇmñlü-128-ccm"

	)

4472 
	#NID_ˇmñlü_128_ccm
 962

	)

4473 
	#OBJ_ˇmñlü_128_ccm
 
OBJ_ˇmñlü
,7L

	)

4475 
	#SN_ˇmñlü_128_˘r
 "CAMELLIA-128-CTR"

	)

4476 
	#LN_ˇmñlü_128_˘r
 "ˇmñlü-128-˘r"

	)

4477 
	#NID_ˇmñlü_128_˘r
 963

	)

4478 
	#OBJ_ˇmñlü_128_˘r
 
OBJ_ˇmñlü
,9L

	)

4480 
	#SN_ˇmñlü_128_cmac
 "CAMELLIA-128-CMAC"

	)

4481 
	#LN_ˇmñlü_128_cmac
 "ˇmñlü-128-cmac"

	)

4482 
	#NID_ˇmñlü_128_cmac
 964

	)

4483 
	#OBJ_ˇmñlü_128_cmac
 
OBJ_ˇmñlü
,10L

	)

4485 
	#SN_ˇmñlü_192_ecb
 "CAMELLIA-192-ECB"

	)

4486 
	#LN_ˇmñlü_192_ecb
 "ˇmñlü-192-ecb"

	)

4487 
	#NID_ˇmñlü_192_ecb
 755

	)

4488 
	#OBJ_ˇmñlü_192_ecb
 
OBJ_ˇmñlü
,21L

	)

4490 
	#SN_ˇmñlü_192_ofb128
 "CAMELLIA-192-OFB"

	)

4491 
	#LN_ˇmñlü_192_ofb128
 "ˇmñlü-192-ofb"

	)

4492 
	#NID_ˇmñlü_192_ofb128
 767

	)

4493 
	#OBJ_ˇmñlü_192_ofb128
 
OBJ_ˇmñlü
,23L

	)

4495 
	#SN_ˇmñlü_192_cfb128
 "CAMELLIA-192-CFB"

	)

4496 
	#LN_ˇmñlü_192_cfb128
 "ˇmñlü-192-cfb"

	)

4497 
	#NID_ˇmñlü_192_cfb128
 758

	)

4498 
	#OBJ_ˇmñlü_192_cfb128
 
OBJ_ˇmñlü
,24L

	)

4500 
	#SN_ˇmñlü_192_gcm
 "CAMELLIA-192-GCM"

	)

4501 
	#LN_ˇmñlü_192_gcm
 "ˇmñlü-192-gcm"

	)

4502 
	#NID_ˇmñlü_192_gcm
 965

	)

4503 
	#OBJ_ˇmñlü_192_gcm
 
OBJ_ˇmñlü
,26L

	)

4505 
	#SN_ˇmñlü_192_ccm
 "CAMELLIA-192-CCM"

	)

4506 
	#LN_ˇmñlü_192_ccm
 "ˇmñlü-192-ccm"

	)

4507 
	#NID_ˇmñlü_192_ccm
 966

	)

4508 
	#OBJ_ˇmñlü_192_ccm
 
OBJ_ˇmñlü
,27L

	)

4510 
	#SN_ˇmñlü_192_˘r
 "CAMELLIA-192-CTR"

	)

4511 
	#LN_ˇmñlü_192_˘r
 "ˇmñlü-192-˘r"

	)

4512 
	#NID_ˇmñlü_192_˘r
 967

	)

4513 
	#OBJ_ˇmñlü_192_˘r
 
OBJ_ˇmñlü
,29L

	)

4515 
	#SN_ˇmñlü_192_cmac
 "CAMELLIA-192-CMAC"

	)

4516 
	#LN_ˇmñlü_192_cmac
 "ˇmñlü-192-cmac"

	)

4517 
	#NID_ˇmñlü_192_cmac
 968

	)

4518 
	#OBJ_ˇmñlü_192_cmac
 
OBJ_ˇmñlü
,30L

	)

4520 
	#SN_ˇmñlü_256_ecb
 "CAMELLIA-256-ECB"

	)

4521 
	#LN_ˇmñlü_256_ecb
 "ˇmñlü-256-ecb"

	)

4522 
	#NID_ˇmñlü_256_ecb
 756

	)

4523 
	#OBJ_ˇmñlü_256_ecb
 
OBJ_ˇmñlü
,41L

	)

4525 
	#SN_ˇmñlü_256_ofb128
 "CAMELLIA-256-OFB"

	)

4526 
	#LN_ˇmñlü_256_ofb128
 "ˇmñlü-256-ofb"

	)

4527 
	#NID_ˇmñlü_256_ofb128
 768

	)

4528 
	#OBJ_ˇmñlü_256_ofb128
 
OBJ_ˇmñlü
,43L

	)

4530 
	#SN_ˇmñlü_256_cfb128
 "CAMELLIA-256-CFB"

	)

4531 
	#LN_ˇmñlü_256_cfb128
 "ˇmñlü-256-cfb"

	)

4532 
	#NID_ˇmñlü_256_cfb128
 759

	)

4533 
	#OBJ_ˇmñlü_256_cfb128
 
OBJ_ˇmñlü
,44L

	)

4535 
	#SN_ˇmñlü_256_gcm
 "CAMELLIA-256-GCM"

	)

4536 
	#LN_ˇmñlü_256_gcm
 "ˇmñlü-256-gcm"

	)

4537 
	#NID_ˇmñlü_256_gcm
 969

	)

4538 
	#OBJ_ˇmñlü_256_gcm
 
OBJ_ˇmñlü
,46L

	)

4540 
	#SN_ˇmñlü_256_ccm
 "CAMELLIA-256-CCM"

	)

4541 
	#LN_ˇmñlü_256_ccm
 "ˇmñlü-256-ccm"

	)

4542 
	#NID_ˇmñlü_256_ccm
 970

	)

4543 
	#OBJ_ˇmñlü_256_ccm
 
OBJ_ˇmñlü
,47L

	)

4545 
	#SN_ˇmñlü_256_˘r
 "CAMELLIA-256-CTR"

	)

4546 
	#LN_ˇmñlü_256_˘r
 "ˇmñlü-256-˘r"

	)

4547 
	#NID_ˇmñlü_256_˘r
 971

	)

4548 
	#OBJ_ˇmñlü_256_˘r
 
OBJ_ˇmñlü
,49L

	)

4550 
	#SN_ˇmñlü_256_cmac
 "CAMELLIA-256-CMAC"

	)

4551 
	#LN_ˇmñlü_256_cmac
 "ˇmñlü-256-cmac"

	)

4552 
	#NID_ˇmñlü_256_cmac
 972

	)

4553 
	#OBJ_ˇmñlü_256_cmac
 
OBJ_ˇmñlü
,50L

	)

4555 
	#SN_ˇmñlü_128_cfb1
 "CAMELLIA-128-CFB1"

	)

4556 
	#LN_ˇmñlü_128_cfb1
 "ˇmñlü-128-cfb1"

	)

4557 
	#NID_ˇmñlü_128_cfb1
 760

	)

4559 
	#SN_ˇmñlü_192_cfb1
 "CAMELLIA-192-CFB1"

	)

4560 
	#LN_ˇmñlü_192_cfb1
 "ˇmñlü-192-cfb1"

	)

4561 
	#NID_ˇmñlü_192_cfb1
 761

	)

4563 
	#SN_ˇmñlü_256_cfb1
 "CAMELLIA-256-CFB1"

	)

4564 
	#LN_ˇmñlü_256_cfb1
 "ˇmñlü-256-cfb1"

	)

4565 
	#NID_ˇmñlü_256_cfb1
 762

	)

4567 
	#SN_ˇmñlü_128_cfb8
 "CAMELLIA-128-CFB8"

	)

4568 
	#LN_ˇmñlü_128_cfb8
 "ˇmñlü-128-cfb8"

	)

4569 
	#NID_ˇmñlü_128_cfb8
 763

	)

4571 
	#SN_ˇmñlü_192_cfb8
 "CAMELLIA-192-CFB8"

	)

4572 
	#LN_ˇmñlü_192_cfb8
 "ˇmñlü-192-cfb8"

	)

4573 
	#NID_ˇmñlü_192_cfb8
 764

	)

4575 
	#SN_ˇmñlü_256_cfb8
 "CAMELLIA-256-CFB8"

	)

4576 
	#LN_ˇmñlü_256_cfb8
 "ˇmñlü-256-cfb8"

	)

4577 
	#NID_ˇmñlü_256_cfb8
 765

	)

4579 
	#OBJ_¨ü
 1L,2L,410L,200046L,1L,1L

	)

4581 
	#SN_¨ü_128_ecb
 "ARIA-128-ECB"

	)

4582 
	#LN_¨ü_128_ecb
 "¨ü-128-ecb"

	)

4583 
	#NID_¨ü_128_ecb
 1065

	)

4584 
	#OBJ_¨ü_128_ecb
 
OBJ_¨ü
,1L

	)

4586 
	#SN_¨ü_128_cbc
 "ARIA-128-CBC"

	)

4587 
	#LN_¨ü_128_cbc
 "¨ü-128-cbc"

	)

4588 
	#NID_¨ü_128_cbc
 1066

	)

4589 
	#OBJ_¨ü_128_cbc
 
OBJ_¨ü
,2L

	)

4591 
	#SN_¨ü_128_cfb128
 "ARIA-128-CFB"

	)

4592 
	#LN_¨ü_128_cfb128
 "¨ü-128-cfb"

	)

4593 
	#NID_¨ü_128_cfb128
 1067

	)

4594 
	#OBJ_¨ü_128_cfb128
 
OBJ_¨ü
,3L

	)

4596 
	#SN_¨ü_128_ofb128
 "ARIA-128-OFB"

	)

4597 
	#LN_¨ü_128_ofb128
 "¨ü-128-ofb"

	)

4598 
	#NID_¨ü_128_ofb128
 1068

	)

4599 
	#OBJ_¨ü_128_ofb128
 
OBJ_¨ü
,4L

	)

4601 
	#SN_¨ü_128_˘r
 "ARIA-128-CTR"

	)

4602 
	#LN_¨ü_128_˘r
 "¨ü-128-˘r"

	)

4603 
	#NID_¨ü_128_˘r
 1069

	)

4604 
	#OBJ_¨ü_128_˘r
 
OBJ_¨ü
,5L

	)

4606 
	#SN_¨ü_192_ecb
 "ARIA-192-ECB"

	)

4607 
	#LN_¨ü_192_ecb
 "¨ü-192-ecb"

	)

4608 
	#NID_¨ü_192_ecb
 1070

	)

4609 
	#OBJ_¨ü_192_ecb
 
OBJ_¨ü
,6L

	)

4611 
	#SN_¨ü_192_cbc
 "ARIA-192-CBC"

	)

4612 
	#LN_¨ü_192_cbc
 "¨ü-192-cbc"

	)

4613 
	#NID_¨ü_192_cbc
 1071

	)

4614 
	#OBJ_¨ü_192_cbc
 
OBJ_¨ü
,7L

	)

4616 
	#SN_¨ü_192_cfb128
 "ARIA-192-CFB"

	)

4617 
	#LN_¨ü_192_cfb128
 "¨ü-192-cfb"

	)

4618 
	#NID_¨ü_192_cfb128
 1072

	)

4619 
	#OBJ_¨ü_192_cfb128
 
OBJ_¨ü
,8L

	)

4621 
	#SN_¨ü_192_ofb128
 "ARIA-192-OFB"

	)

4622 
	#LN_¨ü_192_ofb128
 "¨ü-192-ofb"

	)

4623 
	#NID_¨ü_192_ofb128
 1073

	)

4624 
	#OBJ_¨ü_192_ofb128
 
OBJ_¨ü
,9L

	)

4626 
	#SN_¨ü_192_˘r
 "ARIA-192-CTR"

	)

4627 
	#LN_¨ü_192_˘r
 "¨ü-192-˘r"

	)

4628 
	#NID_¨ü_192_˘r
 1074

	)

4629 
	#OBJ_¨ü_192_˘r
 
OBJ_¨ü
,10L

	)

4631 
	#SN_¨ü_256_ecb
 "ARIA-256-ECB"

	)

4632 
	#LN_¨ü_256_ecb
 "¨ü-256-ecb"

	)

4633 
	#NID_¨ü_256_ecb
 1075

	)

4634 
	#OBJ_¨ü_256_ecb
 
OBJ_¨ü
,11L

	)

4636 
	#SN_¨ü_256_cbc
 "ARIA-256-CBC"

	)

4637 
	#LN_¨ü_256_cbc
 "¨ü-256-cbc"

	)

4638 
	#NID_¨ü_256_cbc
 1076

	)

4639 
	#OBJ_¨ü_256_cbc
 
OBJ_¨ü
,12L

	)

4641 
	#SN_¨ü_256_cfb128
 "ARIA-256-CFB"

	)

4642 
	#LN_¨ü_256_cfb128
 "¨ü-256-cfb"

	)

4643 
	#NID_¨ü_256_cfb128
 1077

	)

4644 
	#OBJ_¨ü_256_cfb128
 
OBJ_¨ü
,13L

	)

4646 
	#SN_¨ü_256_ofb128
 "ARIA-256-OFB"

	)

4647 
	#LN_¨ü_256_ofb128
 "¨ü-256-ofb"

	)

4648 
	#NID_¨ü_256_ofb128
 1078

	)

4649 
	#OBJ_¨ü_256_ofb128
 
OBJ_¨ü
,14L

	)

4651 
	#SN_¨ü_256_˘r
 "ARIA-256-CTR"

	)

4652 
	#LN_¨ü_256_˘r
 "¨ü-256-˘r"

	)

4653 
	#NID_¨ü_256_˘r
 1079

	)

4654 
	#OBJ_¨ü_256_˘r
 
OBJ_¨ü
,15L

	)

4656 
	#SN_¨ü_128_cfb1
 "ARIA-128-CFB1"

	)

4657 
	#LN_¨ü_128_cfb1
 "¨ü-128-cfb1"

	)

4658 
	#NID_¨ü_128_cfb1
 1080

	)

4660 
	#SN_¨ü_192_cfb1
 "ARIA-192-CFB1"

	)

4661 
	#LN_¨ü_192_cfb1
 "¨ü-192-cfb1"

	)

4662 
	#NID_¨ü_192_cfb1
 1081

	)

4664 
	#SN_¨ü_256_cfb1
 "ARIA-256-CFB1"

	)

4665 
	#LN_¨ü_256_cfb1
 "¨ü-256-cfb1"

	)

4666 
	#NID_¨ü_256_cfb1
 1082

	)

4668 
	#SN_¨ü_128_cfb8
 "ARIA-128-CFB8"

	)

4669 
	#LN_¨ü_128_cfb8
 "¨ü-128-cfb8"

	)

4670 
	#NID_¨ü_128_cfb8
 1083

	)

4672 
	#SN_¨ü_192_cfb8
 "ARIA-192-CFB8"

	)

4673 
	#LN_¨ü_192_cfb8
 "¨ü-192-cfb8"

	)

4674 
	#NID_¨ü_192_cfb8
 1084

	)

4676 
	#SN_¨ü_256_cfb8
 "ARIA-256-CFB8"

	)

4677 
	#LN_¨ü_256_cfb8
 "¨ü-256-cfb8"

	)

4678 
	#NID_¨ü_256_cfb8
 1085

	)

4680 
	#SN_¨ü_128_ccm
 "ARIA-128-CCM"

	)

4681 
	#LN_¨ü_128_ccm
 "¨ü-128-ccm"

	)

4682 
	#NID_¨ü_128_ccm
 1120

	)

4683 
	#OBJ_¨ü_128_ccm
 
OBJ_¨ü
,37L

	)

4685 
	#SN_¨ü_192_ccm
 "ARIA-192-CCM"

	)

4686 
	#LN_¨ü_192_ccm
 "¨ü-192-ccm"

	)

4687 
	#NID_¨ü_192_ccm
 1121

	)

4688 
	#OBJ_¨ü_192_ccm
 
OBJ_¨ü
,38L

	)

4690 
	#SN_¨ü_256_ccm
 "ARIA-256-CCM"

	)

4691 
	#LN_¨ü_256_ccm
 "¨ü-256-ccm"

	)

4692 
	#NID_¨ü_256_ccm
 1122

	)

4693 
	#OBJ_¨ü_256_ccm
 
OBJ_¨ü
,39L

	)

4695 
	#SN_¨ü_128_gcm
 "ARIA-128-GCM"

	)

4696 
	#LN_¨ü_128_gcm
 "¨ü-128-gcm"

	)

4697 
	#NID_¨ü_128_gcm
 1123

	)

4698 
	#OBJ_¨ü_128_gcm
 
OBJ_¨ü
,34L

	)

4700 
	#SN_¨ü_192_gcm
 "ARIA-192-GCM"

	)

4701 
	#LN_¨ü_192_gcm
 "¨ü-192-gcm"

	)

4702 
	#NID_¨ü_192_gcm
 1124

	)

4703 
	#OBJ_¨ü_192_gcm
 
OBJ_¨ü
,35L

	)

4705 
	#SN_¨ü_256_gcm
 "ARIA-256-GCM"

	)

4706 
	#LN_¨ü_256_gcm
 "¨ü-256-gcm"

	)

4707 
	#NID_¨ü_256_gcm
 1125

	)

4708 
	#OBJ_¨ü_256_gcm
 
OBJ_¨ü
,36L

	)

4710 
	#SN_kiß
 "KISA"

	)

4711 
	#LN_kiß
 "kiß"

	)

4712 
	#NID_kiß
 773

	)

4713 
	#OBJ_kiß
 
OBJ_membî_body
,410L,200004L

	)

4715 
	#SN_£ed_ecb
 "SEED-ECB"

	)

4716 
	#LN_£ed_ecb
 "£ed-ecb"

	)

4717 
	#NID_£ed_ecb
 776

	)

4718 
	#OBJ_£ed_ecb
 
OBJ_kiß
,1L,3L

	)

4720 
	#SN_£ed_cbc
 "SEED-CBC"

	)

4721 
	#LN_£ed_cbc
 "£ed-cbc"

	)

4722 
	#NID_£ed_cbc
 777

	)

4723 
	#OBJ_£ed_cbc
 
OBJ_kiß
,1L,4L

	)

4725 
	#SN_£ed_cfb128
 "SEED-CFB"

	)

4726 
	#LN_£ed_cfb128
 "£ed-cfb"

	)

4727 
	#NID_£ed_cfb128
 779

	)

4728 
	#OBJ_£ed_cfb128
 
OBJ_kiß
,1L,5L

	)

4730 
	#SN_£ed_ofb128
 "SEED-OFB"

	)

4731 
	#LN_£ed_ofb128
 "£ed-ofb"

	)

4732 
	#NID_£ed_ofb128
 778

	)

4733 
	#OBJ_£ed_ofb128
 
OBJ_kiß
,1L,6L

	)

4735 
	#SN_sm4_ecb
 "SM4-ECB"

	)

4736 
	#LN_sm4_ecb
 "sm4-ecb"

	)

4737 
	#NID_sm4_ecb
 1133

	)

4738 
	#OBJ_sm4_ecb
 
OBJ_sm_scheme
,104L,1L

	)

4740 
	#SN_sm4_cbc
 "SM4-CBC"

	)

4741 
	#LN_sm4_cbc
 "sm4-cbc"

	)

4742 
	#NID_sm4_cbc
 1134

	)

4743 
	#OBJ_sm4_cbc
 
OBJ_sm_scheme
,104L,2L

	)

4745 
	#SN_sm4_ofb128
 "SM4-OFB"

	)

4746 
	#LN_sm4_ofb128
 "sm4-ofb"

	)

4747 
	#NID_sm4_ofb128
 1135

	)

4748 
	#OBJ_sm4_ofb128
 
OBJ_sm_scheme
,104L,3L

	)

4750 
	#SN_sm4_cfb128
 "SM4-CFB"

	)

4751 
	#LN_sm4_cfb128
 "sm4-cfb"

	)

4752 
	#NID_sm4_cfb128
 1137

	)

4753 
	#OBJ_sm4_cfb128
 
OBJ_sm_scheme
,104L,4L

	)

4755 
	#SN_sm4_cfb1
 "SM4-CFB1"

	)

4756 
	#LN_sm4_cfb1
 "sm4-cfb1"

	)

4757 
	#NID_sm4_cfb1
 1136

	)

4758 
	#OBJ_sm4_cfb1
 
OBJ_sm_scheme
,104L,5L

	)

4760 
	#SN_sm4_cfb8
 "SM4-CFB8"

	)

4761 
	#LN_sm4_cfb8
 "sm4-cfb8"

	)

4762 
	#NID_sm4_cfb8
 1138

	)

4763 
	#OBJ_sm4_cfb8
 
OBJ_sm_scheme
,104L,6L

	)

4765 
	#SN_sm4_˘r
 "SM4-CTR"

	)

4766 
	#LN_sm4_˘r
 "sm4-˘r"

	)

4767 
	#NID_sm4_˘r
 1139

	)

4768 
	#OBJ_sm4_˘r
 
OBJ_sm_scheme
,104L,7L

	)

4770 
	#SN_hmac
 "HMAC"

	)

4771 
	#LN_hmac
 "hmac"

	)

4772 
	#NID_hmac
 855

	)

4774 
	#SN_cmac
 "CMAC"

	)

4775 
	#LN_cmac
 "cmac"

	)

4776 
	#NID_cmac
 894

	)

4778 
	#SN_rc4_hmac_md5
 "RC4-HMAC-MD5"

	)

4779 
	#LN_rc4_hmac_md5
 "rc4-hmac-md5"

	)

4780 
	#NID_rc4_hmac_md5
 915

	)

4782 
	#SN_´s_128_cbc_hmac_sha1
 "AES-128-CBC-HMAC-SHA1"

	)

4783 
	#LN_´s_128_cbc_hmac_sha1
 "´s-128-cbc-hmac-sha1"

	)

4784 
	#NID_´s_128_cbc_hmac_sha1
 916

	)

4786 
	#SN_´s_192_cbc_hmac_sha1
 "AES-192-CBC-HMAC-SHA1"

	)

4787 
	#LN_´s_192_cbc_hmac_sha1
 "´s-192-cbc-hmac-sha1"

	)

4788 
	#NID_´s_192_cbc_hmac_sha1
 917

	)

4790 
	#SN_´s_256_cbc_hmac_sha1
 "AES-256-CBC-HMAC-SHA1"

	)

4791 
	#LN_´s_256_cbc_hmac_sha1
 "´s-256-cbc-hmac-sha1"

	)

4792 
	#NID_´s_256_cbc_hmac_sha1
 918

	)

4794 
	#SN_´s_128_cbc_hmac_sha256
 "AES-128-CBC-HMAC-SHA256"

	)

4795 
	#LN_´s_128_cbc_hmac_sha256
 "´s-128-cbc-hmac-sha256"

	)

4796 
	#NID_´s_128_cbc_hmac_sha256
 948

	)

4798 
	#SN_´s_192_cbc_hmac_sha256
 "AES-192-CBC-HMAC-SHA256"

	)

4799 
	#LN_´s_192_cbc_hmac_sha256
 "´s-192-cbc-hmac-sha256"

	)

4800 
	#NID_´s_192_cbc_hmac_sha256
 949

	)

4802 
	#SN_´s_256_cbc_hmac_sha256
 "AES-256-CBC-HMAC-SHA256"

	)

4803 
	#LN_´s_256_cbc_hmac_sha256
 "´s-256-cbc-hmac-sha256"

	)

4804 
	#NID_´s_256_cbc_hmac_sha256
 950

	)

4806 
	#SN_chacha20_pﬁy1305
 "ChaCha20-Pﬁy1305"

	)

4807 
	#LN_chacha20_pﬁy1305
 "chacha20-pﬁy1305"

	)

4808 
	#NID_chacha20_pﬁy1305
 1018

	)

4810 
	#SN_chacha20
 "ChaCha20"

	)

4811 
	#LN_chacha20
 "chacha20"

	)

4812 
	#NID_chacha20
 1019

	)

4814 
	#SN_dhpubli˙umbî
 "dhpubli˙umbî"

	)

4815 
	#LN_dhpubli˙umbî
 "X9.42 DH"

	)

4816 
	#NID_dhpubli˙umbî
 920

	)

4817 
	#OBJ_dhpubli˙umbî
 
OBJ_ISO_US
,10046L,2L,1L

	)

4819 
	#SN_bøöpoﬁP160r1
 "bøöpoﬁP160r1"

	)

4820 
	#NID_bøöpoﬁP160r1
 921

	)

4821 
	#OBJ_bøöpoﬁP160r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,1L

	)

4823 
	#SN_bøöpoﬁP160t1
 "bøöpoﬁP160t1"

	)

4824 
	#NID_bøöpoﬁP160t1
 922

	)

4825 
	#OBJ_bøöpoﬁP160t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,2L

	)

4827 
	#SN_bøöpoﬁP192r1
 "bøöpoﬁP192r1"

	)

4828 
	#NID_bøöpoﬁP192r1
 923

	)

4829 
	#OBJ_bøöpoﬁP192r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,3L

	)

4831 
	#SN_bøöpoﬁP192t1
 "bøöpoﬁP192t1"

	)

4832 
	#NID_bøöpoﬁP192t1
 924

	)

4833 
	#OBJ_bøöpoﬁP192t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,4L

	)

4835 
	#SN_bøöpoﬁP224r1
 "bøöpoﬁP224r1"

	)

4836 
	#NID_bøöpoﬁP224r1
 925

	)

4837 
	#OBJ_bøöpoﬁP224r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,5L

	)

4839 
	#SN_bøöpoﬁP224t1
 "bøöpoﬁP224t1"

	)

4840 
	#NID_bøöpoﬁP224t1
 926

	)

4841 
	#OBJ_bøöpoﬁP224t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,6L

	)

4843 
	#SN_bøöpoﬁP256r1
 "bøöpoﬁP256r1"

	)

4844 
	#NID_bøöpoﬁP256r1
 927

	)

4845 
	#OBJ_bøöpoﬁP256r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,7L

	)

4847 
	#SN_bøöpoﬁP256t1
 "bøöpoﬁP256t1"

	)

4848 
	#NID_bøöpoﬁP256t1
 928

	)

4849 
	#OBJ_bøöpoﬁP256t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,8L

	)

4851 
	#SN_bøöpoﬁP320r1
 "bøöpoﬁP320r1"

	)

4852 
	#NID_bøöpoﬁP320r1
 929

	)

4853 
	#OBJ_bøöpoﬁP320r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,9L

	)

4855 
	#SN_bøöpoﬁP320t1
 "bøöpoﬁP320t1"

	)

4856 
	#NID_bøöpoﬁP320t1
 930

	)

4857 
	#OBJ_bøöpoﬁP320t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,10L

	)

4859 
	#SN_bøöpoﬁP384r1
 "bøöpoﬁP384r1"

	)

4860 
	#NID_bøöpoﬁP384r1
 931

	)

4861 
	#OBJ_bøöpoﬁP384r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,11L

	)

4863 
	#SN_bøöpoﬁP384t1
 "bøöpoﬁP384t1"

	)

4864 
	#NID_bøöpoﬁP384t1
 932

	)

4865 
	#OBJ_bøöpoﬁP384t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,12L

	)

4867 
	#SN_bøöpoﬁP512r1
 "bøöpoﬁP512r1"

	)

4868 
	#NID_bøöpoﬁP512r1
 933

	)

4869 
	#OBJ_bøöpoﬁP512r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,13L

	)

4871 
	#SN_bøöpoﬁP512t1
 "bøöpoﬁP512t1"

	)

4872 
	#NID_bøöpoﬁP512t1
 934

	)

4873 
	#OBJ_bøöpoﬁP512t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,14L

	)

4875 
	#OBJ_x9_63_scheme
 1L,3L,133L,16L,840L,63L,0L

	)

4877 
	#OBJ_£cg_scheme
 
OBJ_˚πicom_¨c
,1L

	)

4879 
	#SN_dhSögÀPass_°dDH_sha1kdf_scheme
 "dhSögÀPass-°dDH-sha1kdf-scheme"

	)

4880 
	#NID_dhSögÀPass_°dDH_sha1kdf_scheme
 936

	)

4881 
	#OBJ_dhSögÀPass_°dDH_sha1kdf_scheme
 
OBJ_x9_63_scheme
,2L

	)

4883 
	#SN_dhSögÀPass_°dDH_sha224kdf_scheme
 "dhSögÀPass-°dDH-sha224kdf-scheme"

	)

4884 
	#NID_dhSögÀPass_°dDH_sha224kdf_scheme
 937

	)

4885 
	#OBJ_dhSögÀPass_°dDH_sha224kdf_scheme
 
OBJ_£cg_scheme
,11L,0L

	)

4887 
	#SN_dhSögÀPass_°dDH_sha256kdf_scheme
 "dhSögÀPass-°dDH-sha256kdf-scheme"

	)

4888 
	#NID_dhSögÀPass_°dDH_sha256kdf_scheme
 938

	)

4889 
	#OBJ_dhSögÀPass_°dDH_sha256kdf_scheme
 
OBJ_£cg_scheme
,11L,1L

	)

4891 
	#SN_dhSögÀPass_°dDH_sha384kdf_scheme
 "dhSögÀPass-°dDH-sha384kdf-scheme"

	)

4892 
	#NID_dhSögÀPass_°dDH_sha384kdf_scheme
 939

	)

4893 
	#OBJ_dhSögÀPass_°dDH_sha384kdf_scheme
 
OBJ_£cg_scheme
,11L,2L

	)

4895 
	#SN_dhSögÀPass_°dDH_sha512kdf_scheme
 "dhSögÀPass-°dDH-sha512kdf-scheme"

	)

4896 
	#NID_dhSögÀPass_°dDH_sha512kdf_scheme
 940

	)

4897 
	#OBJ_dhSögÀPass_°dDH_sha512kdf_scheme
 
OBJ_£cg_scheme
,11L,3L

	)

4899 
	#SN_dhSögÀPass_coÁ˘‹DH_sha1kdf_scheme
 "dhSögÀPass-coÁ˘‹DH-sha1kdf-scheme"

	)

4900 
	#NID_dhSögÀPass_coÁ˘‹DH_sha1kdf_scheme
 941

	)

4901 
	#OBJ_dhSögÀPass_coÁ˘‹DH_sha1kdf_scheme
 
OBJ_x9_63_scheme
,3L

	)

4903 
	#SN_dhSögÀPass_coÁ˘‹DH_sha224kdf_scheme
 "dhSögÀPass-coÁ˘‹DH-sha224kdf-scheme"

	)

4904 
	#NID_dhSögÀPass_coÁ˘‹DH_sha224kdf_scheme
 942

	)

4905 
	#OBJ_dhSögÀPass_coÁ˘‹DH_sha224kdf_scheme
 
OBJ_£cg_scheme
,14L,0L

	)

4907 
	#SN_dhSögÀPass_coÁ˘‹DH_sha256kdf_scheme
 "dhSögÀPass-coÁ˘‹DH-sha256kdf-scheme"

	)

4908 
	#NID_dhSögÀPass_coÁ˘‹DH_sha256kdf_scheme
 943

	)

4909 
	#OBJ_dhSögÀPass_coÁ˘‹DH_sha256kdf_scheme
 
OBJ_£cg_scheme
,14L,1L

	)

4911 
	#SN_dhSögÀPass_coÁ˘‹DH_sha384kdf_scheme
 "dhSögÀPass-coÁ˘‹DH-sha384kdf-scheme"

	)

4912 
	#NID_dhSögÀPass_coÁ˘‹DH_sha384kdf_scheme
 944

	)

4913 
	#OBJ_dhSögÀPass_coÁ˘‹DH_sha384kdf_scheme
 
OBJ_£cg_scheme
,14L,2L

	)

4915 
	#SN_dhSögÀPass_coÁ˘‹DH_sha512kdf_scheme
 "dhSögÀPass-coÁ˘‹DH-sha512kdf-scheme"

	)

4916 
	#NID_dhSögÀPass_coÁ˘‹DH_sha512kdf_scheme
 945

	)

4917 
	#OBJ_dhSögÀPass_coÁ˘‹DH_sha512kdf_scheme
 
OBJ_£cg_scheme
,14L,3L

	)

4919 
	#SN_dh_°d_kdf
 "dh-°d-kdf"

	)

4920 
	#NID_dh_°d_kdf
 946

	)

4922 
	#SN_dh_coÁ˘‹_kdf
 "dh-coÁ˘‹-kdf"

	)

4923 
	#NID_dh_coÁ˘‹_kdf
 947

	)

4925 
	#SN_˘_¥e˚π_s˘s
 "˘_¥e˚π_s˘s"

	)

4926 
	#LN_˘_¥e˚π_s˘s
 "CT Pª˚πifiˇã SCTs"

	)

4927 
	#NID_˘_¥e˚π_s˘s
 951

	)

4928 
	#OBJ_˘_¥e˚π_s˘s
 1L,3L,6L,1L,4L,1L,11129L,2L,4L,2L

	)

4930 
	#SN_˘_¥e˚π_pois⁄
 "˘_¥e˚π_pois⁄"

	)

4931 
	#LN_˘_¥e˚π_pois⁄
 "CT Pª˚πifiˇã Pois⁄"

	)

4932 
	#NID_˘_¥e˚π_pois⁄
 952

	)

4933 
	#OBJ_˘_¥e˚π_pois⁄
 1L,3L,6L,1L,4L,1L,11129L,2L,4L,3L

	)

4935 
	#SN_˘_¥e˚π_sig√r
 "˘_¥e˚π_sig√r"

	)

4936 
	#LN_˘_¥e˚π_sig√r
 "CT Pª˚πifiˇã Sig√r"

	)

4937 
	#NID_˘_¥e˚π_sig√r
 953

	)

4938 
	#OBJ_˘_¥e˚π_sig√r
 1L,3L,6L,1L,4L,1L,11129L,2L,4L,4L

	)

4940 
	#SN_˘_˚π_s˘s
 "˘_˚π_s˘s"

	)

4941 
	#LN_˘_˚π_s˘s
 "CT Cîtifiˇã SCTs"

	)

4942 
	#NID_˘_˚π_s˘s
 954

	)

4943 
	#OBJ_˘_˚π_s˘s
 1L,3L,6L,1L,4L,1L,11129L,2L,4L,5L

	)

4945 
	#SN_jurisdi˘i⁄LoˇlôyName
 "jurisdi˘i⁄L"

	)

4946 
	#LN_jurisdi˘i⁄LoˇlôyName
 "jurisdi˘i⁄LoˇlôyName"

	)

4947 
	#NID_jurisdi˘i⁄LoˇlôyName
 955

	)

4948 
	#OBJ_jurisdi˘i⁄LoˇlôyName
 1L,3L,6L,1L,4L,1L,311L,60L,2L,1L,1L

	)

4950 
	#SN_jurisdi˘i⁄SèãOrProvö˚Name
 "jurisdi˘i⁄ST"

	)

4951 
	#LN_jurisdi˘i⁄SèãOrProvö˚Name
 "jurisdi˘i⁄SèãOrProvö˚Name"

	)

4952 
	#NID_jurisdi˘i⁄SèãOrProvö˚Name
 956

	)

4953 
	#OBJ_jurisdi˘i⁄SèãOrProvö˚Name
 1L,3L,6L,1L,4L,1L,311L,60L,2L,1L,2L

	)

4955 
	#SN_jurisdi˘i⁄Cou¡ryName
 "jurisdi˘i⁄C"

	)

4956 
	#LN_jurisdi˘i⁄Cou¡ryName
 "jurisdi˘i⁄Cou¡ryName"

	)

4957 
	#NID_jurisdi˘i⁄Cou¡ryName
 957

	)

4958 
	#OBJ_jurisdi˘i⁄Cou¡ryName
 1L,3L,6L,1L,4L,1L,311L,60L,2L,1L,3L

	)

4960 
	#SN_id_s¸y±
 "id-s¸y±"

	)

4961 
	#LN_id_s¸y±
 "s¸y±"

	)

4962 
	#NID_id_s¸y±
 973

	)

4963 
	#OBJ_id_s¸y±
 1L,3L,6L,1L,4L,1L,11591L,4L,11L

	)

4965 
	#SN_és1_¥f
 "TLS1-PRF"

	)

4966 
	#LN_és1_¥f
 "és1-¥f"

	)

4967 
	#NID_és1_¥f
 1021

	)

4969 
	#SN_hkdf
 "HKDF"

	)

4970 
	#LN_hkdf
 "hkdf"

	)

4971 
	#NID_hkdf
 1036

	)

4973 
	#SN_id_pköô
 "id-pköô"

	)

4974 
	#NID_id_pköô
 1031

	)

4975 
	#OBJ_id_pköô
 1L,3L,6L,1L,5L,2L,3L

	)

4977 
	#SN_pkInôClõ¡Auth
 "pkInôClõ¡Auth"

	)

4978 
	#LN_pkInôClõ¡Auth
 "PKINIT Clõ¡ Auth"

	)

4979 
	#NID_pkInôClõ¡Auth
 1032

	)

4980 
	#OBJ_pkInôClõ¡Auth
 
OBJ_id_pköô
,4L

	)

4982 
	#SN_pkInôKDC
 "pkInôKDC"

	)

4983 
	#LN_pkInôKDC
 "Signög KDC Re•⁄£"

	)

4984 
	#NID_pkInôKDC
 1033

	)

4985 
	#OBJ_pkInôKDC
 
OBJ_id_pköô
,5L

	)

4987 
	#SN_X25519
 "X25519"

	)

4988 
	#NID_X25519
 1034

	)

4989 
	#OBJ_X25519
 1L,3L,101L,110L

	)

4991 
	#SN_X448
 "X448"

	)

4992 
	#NID_X448
 1035

	)

4993 
	#OBJ_X448
 1L,3L,101L,111L

	)

4995 
	#SN_ED25519
 "ED25519"

	)

4996 
	#NID_ED25519
 1087

	)

4997 
	#OBJ_ED25519
 1L,3L,101L,112L

	)

4999 
	#SN_ED448
 "ED448"

	)

5000 
	#NID_ED448
 1088

	)

5001 
	#OBJ_ED448
 1L,3L,101L,113L

	)

5003 
	#SN_kx_rß
 "KxRSA"

	)

5004 
	#LN_kx_rß
 "kx-rß"

	)

5005 
	#NID_kx_rß
 1037

	)

5007 
	#SN_kx_ecdhe
 "KxECDHE"

	)

5008 
	#LN_kx_ecdhe
 "kx-ecdhe"

	)

5009 
	#NID_kx_ecdhe
 1038

	)

5011 
	#SN_kx_dhe
 "KxDHE"

	)

5012 
	#LN_kx_dhe
 "kx-dhe"

	)

5013 
	#NID_kx_dhe
 1039

	)

5015 
	#SN_kx_ecdhe_psk
 "KxECDHE-PSK"

	)

5016 
	#LN_kx_ecdhe_psk
 "kx-ecdhe-psk"

	)

5017 
	#NID_kx_ecdhe_psk
 1040

	)

5019 
	#SN_kx_dhe_psk
 "KxDHE-PSK"

	)

5020 
	#LN_kx_dhe_psk
 "kx-dhe-psk"

	)

5021 
	#NID_kx_dhe_psk
 1041

	)

5023 
	#SN_kx_rß_psk
 "KxRSA_PSK"

	)

5024 
	#LN_kx_rß_psk
 "kx-rß-psk"

	)

5025 
	#NID_kx_rß_psk
 1042

	)

5027 
	#SN_kx_psk
 "KxPSK"

	)

5028 
	#LN_kx_psk
 "kx-psk"

	)

5029 
	#NID_kx_psk
 1043

	)

5031 
	#SN_kx_§p
 "KxSRP"

	)

5032 
	#LN_kx_§p
 "kx-§p"

	)

5033 
	#NID_kx_§p
 1044

	)

5035 
	#SN_kx_go°
 "KxGOST"

	)

5036 
	#LN_kx_go°
 "kx-go°"

	)

5037 
	#NID_kx_go°
 1045

	)

5039 
	#SN_kx_™y
 "KxANY"

	)

5040 
	#LN_kx_™y
 "kx-™y"

	)

5041 
	#NID_kx_™y
 1063

	)

5043 
	#SN_auth_rß
 "AuthRSA"

	)

5044 
	#LN_auth_rß
 "auth-rß"

	)

5045 
	#NID_auth_rß
 1046

	)

5047 
	#SN_auth_ecdß
 "AuthECDSA"

	)

5048 
	#LN_auth_ecdß
 "auth-ecdß"

	)

5049 
	#NID_auth_ecdß
 1047

	)

5051 
	#SN_auth_psk
 "AuthPSK"

	)

5052 
	#LN_auth_psk
 "auth-psk"

	)

5053 
	#NID_auth_psk
 1048

	)

5055 
	#SN_auth_dss
 "AuthDSS"

	)

5056 
	#LN_auth_dss
 "auth-dss"

	)

5057 
	#NID_auth_dss
 1049

	)

5059 
	#SN_auth_go°01
 "AuthGOST01"

	)

5060 
	#LN_auth_go°01
 "auth-go°01"

	)

5061 
	#NID_auth_go°01
 1050

	)

5063 
	#SN_auth_go°12
 "AuthGOST12"

	)

5064 
	#LN_auth_go°12
 "auth-go°12"

	)

5065 
	#NID_auth_go°12
 1051

	)

5067 
	#SN_auth_§p
 "AuthSRP"

	)

5068 
	#LN_auth_§p
 "auth-§p"

	)

5069 
	#NID_auth_§p
 1052

	)

5071 
	#SN_auth_nuŒ
 "AuthNULL"

	)

5072 
	#LN_auth_nuŒ
 "auth-nuŒ"

	)

5073 
	#NID_auth_nuŒ
 1053

	)

5075 
	#SN_auth_™y
 "AuthANY"

	)

5076 
	#LN_auth_™y
 "auth-™y"

	)

5077 
	#NID_auth_™y
 1064

	)

5079 
	#SN_pﬁy1305
 "Pﬁy1305"

	)

5080 
	#LN_pﬁy1305
 "pﬁy1305"

	)

5081 
	#NID_pﬁy1305
 1061

	)

5083 
	#SN_sùhash
 "SùHash"

	)

5084 
	#LN_sùhash
 "sùhash"

	)

5085 
	#NID_sùhash
 1062

	)

5087 
	#SN_ffdhe2048
 "ffdhe2048"

	)

5088 
	#NID_ffdhe2048
 1126

	)

5090 
	#SN_ffdhe3072
 "ffdhe3072"

	)

5091 
	#NID_ffdhe3072
 1127

	)

5093 
	#SN_ffdhe4096
 "ffdhe4096"

	)

5094 
	#NID_ffdhe4096
 1128

	)

5096 
	#SN_ffdhe6144
 "ffdhe6144"

	)

5097 
	#NID_ffdhe6144
 1129

	)

5099 
	#SN_ffdhe8192
 "ffdhe8192"

	)

5100 
	#NID_ffdhe8192
 1130

	)

5102 
	#SN_ISO_UA
 "ISO-UA"

	)

5103 
	#NID_ISO_UA
 1150

	)

5104 
	#OBJ_ISO_UA
 
OBJ_membî_body
,804L

	)

5106 
	#SN_ua_pki
 "ua-pki"

	)

5107 
	#NID_ua_pki
 1151

	)

5108 
	#OBJ_ua_pki
 
OBJ_ISO_UA
,2L,1L,1L,1L

	)

5110 
	#SN_d°u28147
 "d°u28147"

	)

5111 
	#LN_d°u28147
 "DSTU Go° 28147-2009"

	)

5112 
	#NID_d°u28147
 1152

	)

5113 
	#OBJ_d°u28147
 
OBJ_ua_pki
,1L,1L,1L

	)

5115 
	#SN_d°u28147_ofb
 "d°u28147-ofb"

	)

5116 
	#LN_d°u28147_ofb
 "DSTU Go° 28147-2009 OFB mode"

	)

5117 
	#NID_d°u28147_ofb
 1153

	)

5118 
	#OBJ_d°u28147_ofb
 
OBJ_d°u28147
,2L

	)

5120 
	#SN_d°u28147_cfb
 "d°u28147-cfb"

	)

5121 
	#LN_d°u28147_cfb
 "DSTU Go° 28147-2009 CFB mode"

	)

5122 
	#NID_d°u28147_cfb
 1154

	)

5123 
	#OBJ_d°u28147_cfb
 
OBJ_d°u28147
,3L

	)

5125 
	#SN_d°u28147_wøp
 "d°u28147-wøp"

	)

5126 
	#LN_d°u28147_wøp
 "DSTU Go° 28147-2009 key wøp"

	)

5127 
	#NID_d°u28147_wøp
 1155

	)

5128 
	#OBJ_d°u28147_wøp
 
OBJ_d°u28147
,5L

	)

5130 
	#SN_hmacWôhD°u34311
 "hmacWôhD°u34311"

	)

5131 
	#LN_hmacWôhD°u34311
 "HMAC DSTU Go° 34311-95"

	)

5132 
	#NID_hmacWôhD°u34311
 1156

	)

5133 
	#OBJ_hmacWôhD°u34311
 
OBJ_ua_pki
,1L,1L,2L

	)

5135 
	#SN_d°u34311
 "d°u34311"

	)

5136 
	#LN_d°u34311
 "DSTU Go° 34311-95"

	)

5137 
	#NID_d°u34311
 1157

	)

5138 
	#OBJ_d°u34311
 
OBJ_ua_pki
,1L,2L,1L

	)

5140 
	#SN_d°u4145À
 "d°u4145À"

	)

5141 
	#LN_d°u4145À
 "DSTU 4145-2002Üôéêídün"

	)

5142 
	#NID_d°u4145À
 1158

	)

5143 
	#OBJ_d°u4145À
 
OBJ_ua_pki
,1L,3L,1L,1L

	)

5145 
	#SN_d°u4145be
 "d°u4145be"

	)

5146 
	#LN_d°u4145be
 "DSTU 4145-2002 bigÉndün"

	)

5147 
	#NID_d°u4145be
 1159

	)

5148 
	#OBJ_d°u4145be
 
OBJ_d°u4145À
,1L,1L

	)

5150 
	#SN_uacurve0
 "uacurve0"

	)

5151 
	#LN_uacurve0
 "DSTU curvê0"

	)

5152 
	#NID_uacurve0
 1160

	)

5153 
	#OBJ_uacurve0
 
OBJ_d°u4145À
,2L,0L

	)

5155 
	#SN_uacurve1
 "uacurve1"

	)

5156 
	#LN_uacurve1
 "DSTU curvê1"

	)

5157 
	#NID_uacurve1
 1161

	)

5158 
	#OBJ_uacurve1
 
OBJ_d°u4145À
,2L,1L

	)

5160 
	#SN_uacurve2
 "uacurve2"

	)

5161 
	#LN_uacurve2
 "DSTU curvê2"

	)

5162 
	#NID_uacurve2
 1162

	)

5163 
	#OBJ_uacurve2
 
OBJ_d°u4145À
,2L,2L

	)

5165 
	#SN_uacurve3
 "uacurve3"

	)

5166 
	#LN_uacurve3
 "DSTU curvê3"

	)

5167 
	#NID_uacurve3
 1163

	)

5168 
	#OBJ_uacurve3
 
OBJ_d°u4145À
,2L,3L

	)

5170 
	#SN_uacurve4
 "uacurve4"

	)

5171 
	#LN_uacurve4
 "DSTU curvê4"

	)

5172 
	#NID_uacurve4
 1164

	)

5173 
	#OBJ_uacurve4
 
OBJ_d°u4145À
,2L,4L

	)

5175 
	#SN_uacurve5
 "uacurve5"

	)

5176 
	#LN_uacurve5
 "DSTU curvê5"

	)

5177 
	#NID_uacurve5
 1165

	)

5178 
	#OBJ_uacurve5
 
OBJ_d°u4145À
,2L,5L

	)

5180 
	#SN_uacurve6
 "uacurve6"

	)

5181 
	#LN_uacurve6
 "DSTU curvê6"

	)

5182 
	#NID_uacurve6
 1166

	)

5183 
	#OBJ_uacurve6
 
OBJ_d°u4145À
,2L,6L

	)

5185 
	#SN_uacurve7
 "uacurve7"

	)

5186 
	#LN_uacurve7
 "DSTU curvê7"

	)

5187 
	#NID_uacurve7
 1167

	)

5188 
	#OBJ_uacurve7
 
OBJ_d°u4145À
,2L,7L

	)

5190 
	#SN_uacurve8
 "uacurve8"

	)

5191 
	#LN_uacurve8
 "DSTU curvê8"

	)

5192 
	#NID_uacurve8
 1168

	)

5193 
	#OBJ_uacurve8
 
OBJ_d°u4145À
,2L,8L

	)

5195 
	#SN_uacurve9
 "uacurve9"

	)

5196 
	#LN_uacurve9
 "DSTU curvê9"

	)

5197 
	#NID_uacurve9
 1169

	)

5198 
	#OBJ_uacurve9
 
OBJ_d°u4145À
,2L,9L

	)

	@/usr/include/openssl/objectserr.h

11 #i‚de‡
HEADER_OBJERR_H


12 
	#HEADER_OBJERR_H


	)

14 #i‚de‡
HEADER_SYMHACKS_H


15 
	~<›ís¶/symhacks.h
>

18 #ifde‡ 
__˝lu•lus


21 
ERR_lﬂd_OBJ_°rögs
();

26 
	#OBJ_F_OBJ_ADD_OBJECT
 105

	)

27 
	#OBJ_F_OBJ_ADD_SIGID
 107

	)

28 
	#OBJ_F_OBJ_CREATE
 100

	)

29 
	#OBJ_F_OBJ_DUP
 101

	)

30 
	#OBJ_F_OBJ_NAME_NEW_INDEX
 106

	)

31 
	#OBJ_F_OBJ_NID2LN
 102

	)

32 
	#OBJ_F_OBJ_NID2OBJ
 103

	)

33 
	#OBJ_F_OBJ_NID2SN
 104

	)

34 
	#OBJ_F_OBJ_TXT2OBJ
 108

	)

39 
	#OBJ_R_OID_EXISTS
 102

	)

40 
	#OBJ_R_UNKNOWN_NID
 101

	)

	@/usr/include/openssl/asn1err.h

11 #i‚de‡
HEADER_ASN1ERR_H


12 
	#HEADER_ASN1ERR_H


	)

14 
	~<›ís¶/symhacks.h
>

16 #ifde‡ 
__˝lu•lus


19 
ERR_lﬂd_ASN1_°rögs
();

24 
	#ASN1_F_A2D_ASN1_OBJECT
 100

	)

25 
	#ASN1_F_A2I_ASN1_INTEGER
 102

	)

26 
	#ASN1_F_A2I_ASN1_STRING
 103

	)

27 
	#ASN1_F_APPEND_EXP
 176

	)

28 
	#ASN1_F_ASN1_BIO_INIT
 113

	)

29 
	#ASN1_F_ASN1_BIT_STRING_SET_BIT
 183

	)

30 
	#ASN1_F_ASN1_CB
 177

	)

31 
	#ASN1_F_ASN1_CHECK_TLEN
 104

	)

32 
	#ASN1_F_ASN1_COLLECT
 106

	)

33 
	#ASN1_F_ASN1_D2I_EX_PRIMITIVE
 108

	)

34 
	#ASN1_F_ASN1_D2I_FP
 109

	)

35 
	#ASN1_F_ASN1_D2I_READ_BIO
 107

	)

36 
	#ASN1_F_ASN1_DIGEST
 184

	)

37 
	#ASN1_F_ASN1_DO_ADB
 110

	)

38 
	#ASN1_F_ASN1_DO_LOCK
 233

	)

39 
	#ASN1_F_ASN1_DUP
 111

	)

40 
	#ASN1_F_ASN1_ENC_SAVE
 115

	)

41 
	#ASN1_F_ASN1_EX_C2I
 204

	)

42 
	#ASN1_F_ASN1_FIND_END
 190

	)

43 
	#ASN1_F_ASN1_GENERALIZEDTIME_ADJ
 216

	)

44 
	#ASN1_F_ASN1_GENERATE_V3
 178

	)

45 
	#ASN1_F_ASN1_GET_INT64
 224

	)

46 
	#ASN1_F_ASN1_GET_OBJECT
 114

	)

47 
	#ASN1_F_ASN1_GET_UINT64
 225

	)

48 
	#ASN1_F_ASN1_I2D_BIO
 116

	)

49 
	#ASN1_F_ASN1_I2D_FP
 117

	)

50 
	#ASN1_F_ASN1_ITEM_D2I_FP
 206

	)

51 
	#ASN1_F_ASN1_ITEM_DUP
 191

	)

52 
	#ASN1_F_ASN1_ITEM_EMBED_D2I
 120

	)

53 
	#ASN1_F_ASN1_ITEM_EMBED_NEW
 121

	)

54 
	#ASN1_F_ASN1_ITEM_EX_I2D
 144

	)

55 
	#ASN1_F_ASN1_ITEM_FLAGS_I2D
 118

	)

56 
	#ASN1_F_ASN1_ITEM_I2D_BIO
 192

	)

57 
	#ASN1_F_ASN1_ITEM_I2D_FP
 193

	)

58 
	#ASN1_F_ASN1_ITEM_PACK
 198

	)

59 
	#ASN1_F_ASN1_ITEM_SIGN
 195

	)

60 
	#ASN1_F_ASN1_ITEM_SIGN_CTX
 220

	)

61 
	#ASN1_F_ASN1_ITEM_UNPACK
 199

	)

62 
	#ASN1_F_ASN1_ITEM_VERIFY
 197

	)

63 
	#ASN1_F_ASN1_MBSTRING_NCOPY
 122

	)

64 
	#ASN1_F_ASN1_OBJECT_NEW
 123

	)

65 
	#ASN1_F_ASN1_OUTPUT_DATA
 214

	)

66 
	#ASN1_F_ASN1_PCTX_NEW
 205

	)

67 
	#ASN1_F_ASN1_PRIMITIVE_NEW
 119

	)

68 
	#ASN1_F_ASN1_SCTX_NEW
 221

	)

69 
	#ASN1_F_ASN1_SIGN
 128

	)

70 
	#ASN1_F_ASN1_STR2TYPE
 179

	)

71 
	#ASN1_F_ASN1_STRING_GET_INT64
 227

	)

72 
	#ASN1_F_ASN1_STRING_GET_UINT64
 230

	)

73 
	#ASN1_F_ASN1_STRING_SET
 186

	)

74 
	#ASN1_F_ASN1_STRING_TABLE_ADD
 129

	)

75 
	#ASN1_F_ASN1_STRING_TO_BN
 228

	)

76 
	#ASN1_F_ASN1_STRING_TYPE_NEW
 130

	)

77 
	#ASN1_F_ASN1_TEMPLATE_EX_D2I
 132

	)

78 
	#ASN1_F_ASN1_TEMPLATE_NEW
 133

	)

79 
	#ASN1_F_ASN1_TEMPLATE_NOEXP_D2I
 131

	)

80 
	#ASN1_F_ASN1_TIME_ADJ
 217

	)

81 
	#ASN1_F_ASN1_TYPE_GET_INT_OCTETSTRING
 134

	)

82 
	#ASN1_F_ASN1_TYPE_GET_OCTETSTRING
 135

	)

83 
	#ASN1_F_ASN1_UTCTIME_ADJ
 218

	)

84 
	#ASN1_F_ASN1_VERIFY
 137

	)

85 
	#ASN1_F_B64_READ_ASN1
 209

	)

86 
	#ASN1_F_B64_WRITE_ASN1
 210

	)

87 
	#ASN1_F_BIO_NEW_NDEF
 208

	)

88 
	#ASN1_F_BITSTR_CB
 180

	)

89 
	#ASN1_F_BN_TO_ASN1_STRING
 229

	)

90 
	#ASN1_F_C2I_ASN1_BIT_STRING
 189

	)

91 
	#ASN1_F_C2I_ASN1_INTEGER
 194

	)

92 
	#ASN1_F_C2I_ASN1_OBJECT
 196

	)

93 
	#ASN1_F_C2I_IBUF
 226

	)

94 
	#ASN1_F_C2I_UINT64_INT
 101

	)

95 
	#ASN1_F_COLLECT_DATA
 140

	)

96 
	#ASN1_F_D2I_ASN1_OBJECT
 147

	)

97 
	#ASN1_F_D2I_ASN1_UINTEGER
 150

	)

98 
	#ASN1_F_D2I_AUTOPRIVATEKEY
 207

	)

99 
	#ASN1_F_D2I_PRIVATEKEY
 154

	)

100 
	#ASN1_F_D2I_PUBLICKEY
 155

	)

101 
	#ASN1_F_DO_BUF
 142

	)

102 
	#ASN1_F_DO_CREATE
 124

	)

103 
	#ASN1_F_DO_DUMP
 125

	)

104 
	#ASN1_F_DO_TCREATE
 222

	)

105 
	#ASN1_F_I2A_ASN1_OBJECT
 126

	)

106 
	#ASN1_F_I2D_ASN1_BIO_STREAM
 211

	)

107 
	#ASN1_F_I2D_ASN1_OBJECT
 143

	)

108 
	#ASN1_F_I2D_DSA_PUBKEY
 161

	)

109 
	#ASN1_F_I2D_EC_PUBKEY
 181

	)

110 
	#ASN1_F_I2D_PRIVATEKEY
 163

	)

111 
	#ASN1_F_I2D_PUBLICKEY
 164

	)

112 
	#ASN1_F_I2D_RSA_PUBKEY
 165

	)

113 
	#ASN1_F_LONG_C2I
 166

	)

114 
	#ASN1_F_NDEF_PREFIX
 127

	)

115 
	#ASN1_F_NDEF_SUFFIX
 136

	)

116 
	#ASN1_F_OID_MODULE_INIT
 174

	)

117 
	#ASN1_F_PARSE_TAGGING
 182

	)

118 
	#ASN1_F_PKCS5_PBE2_SET_IV
 167

	)

119 
	#ASN1_F_PKCS5_PBE2_SET_SCRYPT
 231

	)

120 
	#ASN1_F_PKCS5_PBE_SET
 202

	)

121 
	#ASN1_F_PKCS5_PBE_SET0_ALGOR
 215

	)

122 
	#ASN1_F_PKCS5_PBKDF2_SET
 219

	)

123 
	#ASN1_F_PKCS5_SCRYPT_SET
 232

	)

124 
	#ASN1_F_SMIME_READ_ASN1
 212

	)

125 
	#ASN1_F_SMIME_TEXT
 213

	)

126 
	#ASN1_F_STABLE_GET
 138

	)

127 
	#ASN1_F_STBL_MODULE_INIT
 223

	)

128 
	#ASN1_F_UINT32_C2I
 105

	)

129 
	#ASN1_F_UINT32_NEW
 139

	)

130 
	#ASN1_F_UINT64_C2I
 112

	)

131 
	#ASN1_F_UINT64_NEW
 141

	)

132 
	#ASN1_F_X509_CRL_ADD0_REVOKED
 169

	)

133 
	#ASN1_F_X509_INFO_NEW
 170

	)

134 
	#ASN1_F_X509_NAME_ENCODE
 203

	)

135 
	#ASN1_F_X509_NAME_EX_D2I
 158

	)

136 
	#ASN1_F_X509_NAME_EX_NEW
 171

	)

137 
	#ASN1_F_X509_PKEY_NEW
 173

	)

142 
	#ASN1_R_ADDING_OBJECT
 171

	)

143 
	#ASN1_R_ASN1_PARSE_ERROR
 203

	)

144 
	#ASN1_R_ASN1_SIG_PARSE_ERROR
 204

	)

145 
	#ASN1_R_AUX_ERROR
 100

	)

146 
	#ASN1_R_BAD_OBJECT_HEADER
 102

	)

147 
	#ASN1_R_BAD_TEMPLATE
 230

	)

148 
	#ASN1_R_BMPSTRING_IS_WRONG_LENGTH
 214

	)

149 
	#ASN1_R_BN_LIB
 105

	)

150 
	#ASN1_R_BOOLEAN_IS_WRONG_LENGTH
 106

	)

151 
	#ASN1_R_BUFFER_TOO_SMALL
 107

	)

152 
	#ASN1_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER
 108

	)

153 
	#ASN1_R_CONTEXT_NOT_INITIALISED
 217

	)

154 
	#ASN1_R_DATA_IS_WRONG
 109

	)

155 
	#ASN1_R_DECODE_ERROR
 110

	)

156 
	#ASN1_R_DEPTH_EXCEEDED
 174

	)

157 
	#ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED
 198

	)

158 
	#ASN1_R_ENCODE_ERROR
 112

	)

159 
	#ASN1_R_ERROR_GETTING_TIME
 173

	)

160 
	#ASN1_R_ERROR_LOADING_SECTION
 172

	)

161 
	#ASN1_R_ERROR_SETTING_CIPHER_PARAMS
 114

	)

162 
	#ASN1_R_EXPECTING_AN_INTEGER
 115

	)

163 
	#ASN1_R_EXPECTING_AN_OBJECT
 116

	)

164 
	#ASN1_R_EXPLICIT_LENGTH_MISMATCH
 119

	)

165 
	#ASN1_R_EXPLICIT_TAG_NOT_CONSTRUCTED
 120

	)

166 
	#ASN1_R_FIELD_MISSING
 121

	)

167 
	#ASN1_R_FIRST_NUM_TOO_LARGE
 122

	)

168 
	#ASN1_R_HEADER_TOO_LONG
 123

	)

169 
	#ASN1_R_ILLEGAL_BITSTRING_FORMAT
 175

	)

170 
	#ASN1_R_ILLEGAL_BOOLEAN
 176

	)

171 
	#ASN1_R_ILLEGAL_CHARACTERS
 124

	)

172 
	#ASN1_R_ILLEGAL_FORMAT
 177

	)

173 
	#ASN1_R_ILLEGAL_HEX
 178

	)

174 
	#ASN1_R_ILLEGAL_IMPLICIT_TAG
 179

	)

175 
	#ASN1_R_ILLEGAL_INTEGER
 180

	)

176 
	#ASN1_R_ILLEGAL_NEGATIVE_VALUE
 226

	)

177 
	#ASN1_R_ILLEGAL_NESTED_TAGGING
 181

	)

178 
	#ASN1_R_ILLEGAL_NULL
 125

	)

179 
	#ASN1_R_ILLEGAL_NULL_VALUE
 182

	)

180 
	#ASN1_R_ILLEGAL_OBJECT
 183

	)

181 
	#ASN1_R_ILLEGAL_OPTIONAL_ANY
 126

	)

182 
	#ASN1_R_ILLEGAL_OPTIONS_ON_ITEM_TEMPLATE
 170

	)

183 
	#ASN1_R_ILLEGAL_PADDING
 221

	)

184 
	#ASN1_R_ILLEGAL_TAGGED_ANY
 127

	)

185 
	#ASN1_R_ILLEGAL_TIME_VALUE
 184

	)

186 
	#ASN1_R_ILLEGAL_ZERO_CONTENT
 222

	)

187 
	#ASN1_R_INTEGER_NOT_ASCII_FORMAT
 185

	)

188 
	#ASN1_R_INTEGER_TOO_LARGE_FOR_LONG
 128

	)

189 
	#ASN1_R_INVALID_BIT_STRING_BITS_LEFT
 220

	)

190 
	#ASN1_R_INVALID_BMPSTRING_LENGTH
 129

	)

191 
	#ASN1_R_INVALID_DIGIT
 130

	)

192 
	#ASN1_R_INVALID_MIME_TYPE
 205

	)

193 
	#ASN1_R_INVALID_MODIFIER
 186

	)

194 
	#ASN1_R_INVALID_NUMBER
 187

	)

195 
	#ASN1_R_INVALID_OBJECT_ENCODING
 216

	)

196 
	#ASN1_R_INVALID_SCRYPT_PARAMETERS
 227

	)

197 
	#ASN1_R_INVALID_SEPARATOR
 131

	)

198 
	#ASN1_R_INVALID_STRING_TABLE_VALUE
 218

	)

199 
	#ASN1_R_INVALID_UNIVERSALSTRING_LENGTH
 133

	)

200 
	#ASN1_R_INVALID_UTF8STRING
 134

	)

201 
	#ASN1_R_INVALID_VALUE
 219

	)

202 
	#ASN1_R_LIST_ERROR
 188

	)

203 
	#ASN1_R_MIME_NO_CONTENT_TYPE
 206

	)

204 
	#ASN1_R_MIME_PARSE_ERROR
 207

	)

205 
	#ASN1_R_MIME_SIG_PARSE_ERROR
 208

	)

206 
	#ASN1_R_MISSING_EOC
 137

	)

207 
	#ASN1_R_MISSING_SECOND_NUMBER
 138

	)

208 
	#ASN1_R_MISSING_VALUE
 189

	)

209 
	#ASN1_R_MSTRING_NOT_UNIVERSAL
 139

	)

210 
	#ASN1_R_MSTRING_WRONG_TAG
 140

	)

211 
	#ASN1_R_NESTED_ASN1_STRING
 197

	)

212 
	#ASN1_R_NESTED_TOO_DEEP
 201

	)

213 
	#ASN1_R_NON_HEX_CHARACTERS
 141

	)

214 
	#ASN1_R_NOT_ASCII_FORMAT
 190

	)

215 
	#ASN1_R_NOT_ENOUGH_DATA
 142

	)

216 
	#ASN1_R_NO_CONTENT_TYPE
 209

	)

217 
	#ASN1_R_NO_MATCHING_CHOICE_TYPE
 143

	)

218 
	#ASN1_R_NO_MULTIPART_BODY_FAILURE
 210

	)

219 
	#ASN1_R_NO_MULTIPART_BOUNDARY
 211

	)

220 
	#ASN1_R_NO_SIG_CONTENT_TYPE
 212

	)

221 
	#ASN1_R_NULL_IS_WRONG_LENGTH
 144

	)

222 
	#ASN1_R_OBJECT_NOT_ASCII_FORMAT
 191

	)

223 
	#ASN1_R_ODD_NUMBER_OF_CHARS
 145

	)

224 
	#ASN1_R_SECOND_NUMBER_TOO_LARGE
 147

	)

225 
	#ASN1_R_SEQUENCE_LENGTH_MISMATCH
 148

	)

226 
	#ASN1_R_SEQUENCE_NOT_CONSTRUCTED
 149

	)

227 
	#ASN1_R_SEQUENCE_OR_SET_NEEDS_CONFIG
 192

	)

228 
	#ASN1_R_SHORT_LINE
 150

	)

229 
	#ASN1_R_SIG_INVALID_MIME_TYPE
 213

	)

230 
	#ASN1_R_STREAMING_NOT_SUPPORTED
 202

	)

231 
	#ASN1_R_STRING_TOO_LONG
 151

	)

232 
	#ASN1_R_STRING_TOO_SHORT
 152

	)

233 
	#ASN1_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD
 154

	)

234 
	#ASN1_R_TIME_NOT_ASCII_FORMAT
 193

	)

235 
	#ASN1_R_TOO_LARGE
 223

	)

236 
	#ASN1_R_TOO_LONG
 155

	)

237 
	#ASN1_R_TOO_SMALL
 224

	)

238 
	#ASN1_R_TYPE_NOT_CONSTRUCTED
 156

	)

239 
	#ASN1_R_TYPE_NOT_PRIMITIVE
 195

	)

240 
	#ASN1_R_UNEXPECTED_EOC
 159

	)

241 
	#ASN1_R_UNIVERSALSTRING_IS_WRONG_LENGTH
 215

	)

242 
	#ASN1_R_UNKNOWN_FORMAT
 160

	)

243 
	#ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM
 161

	)

244 
	#ASN1_R_UNKNOWN_OBJECT_TYPE
 162

	)

245 
	#ASN1_R_UNKNOWN_PUBLIC_KEY_TYPE
 163

	)

246 
	#ASN1_R_UNKNOWN_SIGNATURE_ALGORITHM
 199

	)

247 
	#ASN1_R_UNKNOWN_TAG
 194

	)

248 
	#ASN1_R_UNSUPPORTED_ANY_DEFINED_BY_TYPE
 164

	)

249 
	#ASN1_R_UNSUPPORTED_CIPHER
 228

	)

250 
	#ASN1_R_UNSUPPORTED_PUBLIC_KEY_TYPE
 167

	)

251 
	#ASN1_R_UNSUPPORTED_TYPE
 196

	)

252 
	#ASN1_R_WRONG_INTEGER_TYPE
 225

	)

253 
	#ASN1_R_WRONG_PUBLIC_KEY_TYPE
 200

	)

254 
	#ASN1_R_WRONG_TAG
 168

	)

	@/usr/include/openssl/bn.h

11 #i‚de‡
HEADER_BN_H


12 
	#HEADER_BN_H


	)

14 
	~<›ís¶/e_os2.h
>

15 #i‚de‡
OPENSSL_NO_STDIO


16 
	~<°dio.h
>

18 
	~<›ís¶/›ís¶c⁄f.h
>

19 
	~<›ís¶/os¶_typ.h
>

20 
	~<›ís¶/¸y±o.h
>

21 
	~<›ís¶/b√º.h
>

23 #ifde‡ 
__˝lu•lus


30 #ifde‡
SIXTY_FOUR_BIT_LONG


31 
	#BN_ULONG
 

	)

32 
	#BN_BYTES
 8

	)

38 #ifde‡
SIXTY_FOUR_BIT


39 
	#BN_ULONG
 

	)

40 
	#BN_BYTES
 8

	)

43 #ifde‡
THIRTY_TWO_BIT


44 
	#BN_ULONG
 

	)

45 
	#BN_BYTES
 4

	)

48 
	#BN_BITS2
 (
BN_BYTES
 * 8)

	)

49 
	#BN_BITS
 (
BN_BITS2
 * 2)

	)

50 
	#BN_TBIT
 ((
BN_ULONG
)1 << (
BN_BITS2
 - 1))

	)

52 
	#BN_FLG_MALLOCED
 0x01

	)

53 
	#BN_FLG_STATIC_DATA
 0x02

	)

61 
	#BN_FLG_CONSTTIME
 0x04

	)

62 
	#BN_FLG_SECURE
 0x08

	)

64 #i‡
OPENSSL_API_COMPAT
 < 0x00908000L

66 
	#BN_FLG_EXP_CONSTTIME
 
BN_FLG_CONSTTIME


	)

67 
	#BN_FLG_FREE
 0x8000

	)

70 
BN_£t_Êags
(
BIGNUM
 *
b
, 
n
);

71 
BN_gë_Êags
(c⁄° 
BIGNUM
 *
b
, 
n
);

74 
	#BN_RAND_TOP_ANY
 -1

	)

75 
	#BN_RAND_TOP_ONE
 0

	)

76 
	#BN_RAND_TOP_TWO
 1

	)

79 
	#BN_RAND_BOTTOM_ANY
 0

	)

80 
	#BN_RAND_BOTTOM_ODD
 1

	)

88 
BN_wôh_Êags
(
BIGNUM
 *
de°
, c⁄° BIGNUM *
b
, 
Êags
);

91 
BN_GENCB_ˇŒ
(
BN_GENCB
 *
cb
, 
a
, 
b
);

93 
BN_GENCB
 *
BN_GENCB_√w
();

94 
BN_GENCB_‰ì
(
BN_GENCB
 *
cb
);

97 
BN_GENCB_£t_ﬁd
(
BN_GENCB
 *
gícb
, (*
ˇŒback
) (, , *),

98 *
cb_¨g
);

101 
BN_GENCB_£t
(
BN_GENCB
 *
gícb
, (*
ˇŒback
) (, , BN_GENCB *),

102 *
cb_¨g
);

104 *
BN_GENCB_gë_¨g
(
BN_GENCB
 *
cb
);

106 
	#BN_¥ime_checks
 0

	)

172 
	#BN_¥ime_checks_f‹_size
(
b
) ((b) >= 3747 ? 3 : \

173 (
b
) >= 1345 ? 4 : \

174 (
b
) >= 476 ? 5 : \

175 (
b
) >= 400 ? 6 : \

176 (
b
) >= 347 ? 7 : \

177 (
b
) >= 308 ? 8 : \

178 (
b
) >= 55 ? 27 : \

179  34)

	)

181 
	#BN_num_byãs
(
a
Ë((
	`BN_num_bôs
◊)+7)/8)

	)

183 
BN_abs_is_w‹d
(c⁄° 
BIGNUM
 *
a
, c⁄° 
BN_ULONG
 
w
);

184 
BN_is_zîo
(c⁄° 
BIGNUM
 *
a
);

185 
BN_is_⁄e
(c⁄° 
BIGNUM
 *
a
);

186 
BN_is_w‹d
(c⁄° 
BIGNUM
 *
a
, c⁄° 
BN_ULONG
 
w
);

187 
BN_is_odd
(c⁄° 
BIGNUM
 *
a
);

189 
	#BN_⁄e
(
a
Ë(
	`BN_£t_w‹d
(◊),1))

	)

191 
BN_zîo_ex
(
BIGNUM
 *
a
);

193 #i‡
OPENSSL_API_COMPAT
 >= 0x00908000L

194 
	#BN_zîo
(
a
Ë
	`BN_zîo_ex
◊)

	)

196 
	#BN_zîo
(
a
Ë(
	`BN_£t_w‹d
(◊),0))

	)

199 c⁄° 
BIGNUM
 *
BN_vÆue_⁄e
();

200 *
BN_›ti⁄s
();

201 
BN_CTX
 *
BN_CTX_√w
();

202 
BN_CTX
 *
BN_CTX_£cuª_√w
();

203 
BN_CTX_‰ì
(
BN_CTX
 *
c
);

204 
BN_CTX_°¨t
(
BN_CTX
 *
˘x
);

205 
BIGNUM
 *
BN_CTX_gë
(
BN_CTX
 *
˘x
);

206 
BN_CTX_íd
(
BN_CTX
 *
˘x
);

207 
BN_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
, 
bŸtom
);

208 
BN_¥iv_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
, 
bŸtom
);

209 
BN_ønd_ønge
(
BIGNUM
 *
∫d
, c⁄° BIGNUM *
ønge
);

210 
BN_¥iv_ønd_ønge
(
BIGNUM
 *
∫d
, c⁄° BIGNUM *
ønge
);

211 
BN_p£udo_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
, 
bŸtom
);

212 
BN_p£udo_ønd_ønge
(
BIGNUM
 *
∫d
, c⁄° BIGNUM *
ønge
);

213 
BN_num_bôs
(c⁄° 
BIGNUM
 *
a
);

214 
BN_num_bôs_w‹d
(
BN_ULONG
 
l
);

215 
BN_£curôy_bôs
(
L
, 
N
);

216 
BIGNUM
 *
BN_√w
();

217 
BIGNUM
 *
BN_£cuª_√w
();

218 
BN_˛ór_‰ì
(
BIGNUM
 *
a
);

219 
BIGNUM
 *
BN_c›y
(BIGNUM *
a
, c⁄° BIGNUM *
b
);

220 
BN_sw≠
(
BIGNUM
 *
a
, BIGNUM *
b
);

221 
BIGNUM
 *
BN_bö2bn
(c⁄° *
s
, 
Àn
, BIGNUM *
ªt
);

222 
BN_bn2bö
(c⁄° 
BIGNUM
 *
a
, *
to
);

223 
BN_bn2bö∑d
(c⁄° 
BIGNUM
 *
a
, *
to
, 
tﬁí
);

224 
BIGNUM
 *
BN_Àbö2bn
(c⁄° *
s
, 
Àn
, BIGNUM *
ªt
);

225 
BN_bn2Àbö∑d
(c⁄° 
BIGNUM
 *
a
, *
to
, 
tﬁí
);

226 
BIGNUM
 *
BN_mpi2bn
(c⁄° *
s
, 
Àn
, BIGNUM *
ªt
);

227 
BN_bn2mpi
(c⁄° 
BIGNUM
 *
a
, *
to
);

228 
BN_sub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

229 
BN_usub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

230 
BN_uadd
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

231 
BN_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

232 
BN_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

233 
BN_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
BN_CTX
 *
˘x
);

238 
BN_£t_√g©ive
(
BIGNUM
 *
b
, 
n
);

243 
BN_is_√g©ive
(c⁄° 
BIGNUM
 *
b
);

245 
BN_div
(
BIGNUM
 *
dv
, BIGNUM *
ªm
, c⁄° BIGNUM *
m
, c⁄° BIGNUM *
d
,

246 
BN_CTX
 *
˘x
);

247 
	#BN_mod
(
ªm
,
m
,
d
,
˘x
Ë
	`BN_div
(
NULL
,‘em),(m),(d),(˘x))

	)

248 
BN_¬mod
(
BIGNUM
 *
r
, c⁄° BIGNUM *
m
, c⁄° BIGNUM *
d
, 
BN_CTX
 *
˘x
);

249 
BN_mod_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
,

250 
BN_CTX
 *
˘x
);

251 
BN_mod_add_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

252 c⁄° 
BIGNUM
 *
m
);

253 
BN_mod_sub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
,

254 
BN_CTX
 *
˘x
);

255 
BN_mod_sub_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

256 c⁄° 
BIGNUM
 *
m
);

257 
BN_mod_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
,

258 
BN_CTX
 *
˘x
);

259 
BN_mod_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

260 
BN_mod_lshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

261 
BN_mod_lshi·1_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
);

262 
BN_mod_lshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
, c⁄° BIGNUM *
m
,

263 
BN_CTX
 *
˘x
);

264 
BN_mod_lshi·_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
, c⁄° BIGNUM *
m
);

266 
BN_ULONG
 
BN_mod_w‹d
(c⁄° 
BIGNUM
 *
a
, BN_ULONG 
w
);

267 
BN_ULONG
 
BN_div_w‹d
(
BIGNUM
 *
a
, BN_ULONG 
w
);

268 
BN_mul_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

269 
BN_add_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

270 
BN_sub_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

271 
BN_£t_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

272 
BN_ULONG
 
BN_gë_w‹d
(c⁄° 
BIGNUM
 *
a
);

274 
BN_cmp
(c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
b
);

275 
BN_‰ì
(
BIGNUM
 *
a
);

276 
BN_is_bô_£t
(c⁄° 
BIGNUM
 *
a
, 
n
);

277 
BN_lshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
);

278 
BN_lshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
);

279 
BN_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

281 
BN_mod_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

282 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
);

283 
BN_mod_exp_m⁄t
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

284 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
);

285 
BN_mod_exp_m⁄t_c⁄°time
(
BIGNUM
 *
º
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

286 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
,

287 
BN_MONT_CTX
 *
ö_m⁄t
);

288 
BN_mod_exp_m⁄t_w‹d
(
BIGNUM
 *
r
, 
BN_ULONG
 
a
, c⁄° BIGNUM *
p
,

289 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
);

290 
BN_mod_exp2_m⁄t
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a1
, c⁄° BIGNUM *
p1
,

291 c⁄° 
BIGNUM
 *
a2
, c⁄° BIGNUM *
p2
, c⁄° BIGNUM *
m
,

292 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
);

293 
BN_mod_exp_sim∂e
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

294 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
);

296 
BN_mask_bôs
(
BIGNUM
 *
a
, 
n
);

297 #i‚de‡
OPENSSL_NO_STDIO


298 
BN_¥öt_Â
(
FILE
 *
Â
, c⁄° 
BIGNUM
 *
a
);

300 
BN_¥öt
(
BIO
 *
bio
, c⁄° 
BIGNUM
 *
a
);

301 
BN_ªcùroˇl
(
BIGNUM
 *
r
, c⁄° BIGNUM *
m
, 
Àn
, 
BN_CTX
 *
˘x
);

302 
BN_rshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
);

303 
BN_rshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
);

304 
BN_˛ór
(
BIGNUM
 *
a
);

305 
BIGNUM
 *
BN_dup
(c⁄° BIGNUM *
a
);

306 
BN_ucmp
(c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
b
);

307 
BN_£t_bô
(
BIGNUM
 *
a
, 
n
);

308 
BN_˛ór_bô
(
BIGNUM
 *
a
, 
n
);

309 *
BN_bn2hex
(c⁄° 
BIGNUM
 *
a
);

310 *
BN_bn2dec
(c⁄° 
BIGNUM
 *
a
);

311 
BN_hex2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

312 
BN_dec2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

313 
BN_asc2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

314 
BN_gcd
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

315 
BN_kr⁄eckî
(c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

318 
BIGNUM
 *
BN_mod_övî£
(BIGNUM *
ªt
,

319 c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
n
, 
BN_CTX
 *
˘x
);

320 
BIGNUM
 *
BN_mod_sqπ
(BIGNUM *
ªt
,

321 c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
n
, 
BN_CTX
 *
˘x
);

323 
BN_c⁄°time_sw≠
(
BN_ULONG
 
sw≠
, 
BIGNUM
 *
a
, BIGNUM *
b
, 
nw‹ds
);

326 
DEPRECATEDIN_0_9_8
(
BIGNUM
 *
BN_gíî©e_¥ime
(BIGNUM *
ªt
, 
bôs
, 
ß„
,

327 c⁄° 
BIGNUM
 *
add
,

328 c⁄° 
BIGNUM
 *
ªm
,

329 (*
ˇŒback
) (, ,

331 *
cb_¨g
))

332 
DEPRECATEDIN_0_9_8
(

333 
BN_is_¥ime
(c⁄° 
BIGNUM
 *
p
, 
nchecks
,

334 (*
ˇŒback
) (, , *),

335 
BN_CTX
 *
˘x
, *
cb_¨g
))

336 
DEPRECATEDIN_0_9_8
(

337 
BN_is_¥ime_Á°ã°
(c⁄° 
BIGNUM
 *
p
, 
nchecks
,

338 (*
ˇŒback
) (, , *),

339 
BN_CTX
 *
˘x
, *
cb_¨g
,

340 
do_åül_divisi⁄
))

343 
BN_gíî©e_¥ime_ex
(
BIGNUM
 *
ªt
, 
bôs
, 
ß„
, c⁄° BIGNUM *
add
,

344 c⁄° 
BIGNUM
 *
ªm
, 
BN_GENCB
 *
cb
);

345 
BN_is_¥ime_ex
(c⁄° 
BIGNUM
 *
p
, 
nchecks
, 
BN_CTX
 *
˘x
, 
BN_GENCB
 *
cb
);

346 
BN_is_¥ime_Á°ã°_ex
(c⁄° 
BIGNUM
 *
p
, 
nchecks
, 
BN_CTX
 *
˘x
,

347 
do_åül_divisi⁄
, 
BN_GENCB
 *
cb
);

349 
BN_X931_gíî©e_Xpq
(
BIGNUM
 *
Xp
, BIGNUM *
Xq
, 
nbôs
, 
BN_CTX
 *
˘x
);

351 
BN_X931_dîive_¥ime_ex
(
BIGNUM
 *
p
, BIGNUM *
p1
, BIGNUM *
p2
,

352 c⁄° 
BIGNUM
 *
Xp
, c⁄° BIGNUM *
Xp1
,

353 c⁄° 
BIGNUM
 *
Xp2
, c⁄° BIGNUM *
e
, 
BN_CTX
 *
˘x
,

354 
BN_GENCB
 *
cb
);

355 
BN_X931_gíî©e_¥ime_ex
(
BIGNUM
 *
p
, BIGNUM *
p1
, BIGNUM *
p2
, BIGNUM *
Xp1
,

356 
BIGNUM
 *
Xp2
, c⁄° BIGNUM *
Xp
, c⁄° BIGNUM *
e
,

357 
BN_CTX
 *
˘x
, 
BN_GENCB
 *
cb
);

359 
BN_MONT_CTX
 *
BN_MONT_CTX_√w
();

360 
BN_mod_mul_m⁄tgomîy
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

361 
BN_MONT_CTX
 *
m⁄t
, 
BN_CTX
 *
˘x
);

362 
BN_to_m⁄tgomîy
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
BN_MONT_CTX
 *
m⁄t
,

363 
BN_CTX
 *
˘x
);

364 
BN_‰om_m⁄tgomîy
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
BN_MONT_CTX
 *
m⁄t
,

365 
BN_CTX
 *
˘x
);

366 
BN_MONT_CTX_‰ì
(
BN_MONT_CTX
 *
m⁄t
);

367 
BN_MONT_CTX_£t
(
BN_MONT_CTX
 *
m⁄t
, c⁄° 
BIGNUM
 *
mod
, 
BN_CTX
 *
˘x
);

368 
BN_MONT_CTX
 *
BN_MONT_CTX_c›y
(BN_MONT_CTX *
to
, BN_MONT_CTX *
‰om
);

369 
BN_MONT_CTX
 *
BN_MONT_CTX_£t_locked
(BN_MONT_CTX **
pm⁄t
, 
CRYPTO_RWLOCK
 *
lock
,

370 c⁄° 
BIGNUM
 *
mod
, 
BN_CTX
 *
˘x
);

373 
	#BN_BLINDING_NO_UPDATE
 0x00000001

	)

374 
	#BN_BLINDING_NO_RECREATE
 0x00000002

	)

376 
BN_BLINDING
 *
BN_BLINDING_√w
(c⁄° 
BIGNUM
 *
A
, c⁄° BIGNUM *
Ai
, BIGNUM *
mod
);

377 
BN_BLINDING_‰ì
(
BN_BLINDING
 *
b
);

378 
BN_BLINDING_upd©e
(
BN_BLINDING
 *
b
, 
BN_CTX
 *
˘x
);

379 
BN_BLINDING_c⁄vît
(
BIGNUM
 *
n
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *
˘x
);

380 
BN_BLINDING_övît
(
BIGNUM
 *
n
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *
˘x
);

381 
BN_BLINDING_c⁄vît_ex
(
BIGNUM
 *
n
, BIGNUM *
r
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *);

382 
BN_BLINDING_övît_ex
(
BIGNUM
 *
n
, c⁄° BIGNUM *
r
, 
BN_BLINDING
 *
b
,

383 
BN_CTX
 *);

385 
BN_BLINDING_is_cuºít_thªad
(
BN_BLINDING
 *
b
);

386 
BN_BLINDING_£t_cuºít_thªad
(
BN_BLINDING
 *
b
);

387 
BN_BLINDING_lock
(
BN_BLINDING
 *
b
);

388 
BN_BLINDING_u∆ock
(
BN_BLINDING
 *
b
);

390 
BN_BLINDING_gë_Êags
(c⁄° 
BN_BLINDING
 *);

391 
BN_BLINDING_£t_Êags
(
BN_BLINDING
 *, );

392 
BN_BLINDING
 *
BN_BLINDING_¸óã_∑øm
(BN_BLINDING *
b
,

393 c⁄° 
BIGNUM
 *
e
, BIGNUM *
m
, 
BN_CTX
 *
˘x
,

394 (*
bn_mod_exp
Ë(
BIGNUM
 *
r
,

395 c⁄° 
BIGNUM
 *
a
,

396 c⁄° 
BIGNUM
 *
p
,

397 c⁄° 
BIGNUM
 *
m
,

398 
BN_CTX
 *
˘x
,

399 
BN_MONT_CTX
 *
m_˘x
),

400 
BN_MONT_CTX
 *
m_˘x
);

402 
DEPRECATEDIN_0_9_8
(
BN_£t_∑øms
(
mul
, 
high
, 
low
, 
m⁄t
))

403 
DEPRECATEDIN_0_9_8
(
BN_gë_∑øms
(
which
))

406 
BN_RECP_CTX
 *
BN_RECP_CTX_√w
();

407 
BN_RECP_CTX_‰ì
(
BN_RECP_CTX
 *
ª˝
);

408 
BN_RECP_CTX_£t
(
BN_RECP_CTX
 *
ª˝
, c⁄° 
BIGNUM
 *
rdiv
, 
BN_CTX
 *
˘x
);

409 
BN_mod_mul_ªcùroˇl
(
BIGNUM
 *
r
, c⁄° BIGNUM *
x
, c⁄° BIGNUM *
y
,

410 
BN_RECP_CTX
 *
ª˝
, 
BN_CTX
 *
˘x
);

411 
BN_mod_exp_ª˝
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

412 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
);

413 
BN_div_ª˝
(
BIGNUM
 *
dv
, BIGNUM *
ªm
, c⁄° BIGNUM *
m
,

414 
BN_RECP_CTX
 *
ª˝
, 
BN_CTX
 *
˘x
);

416 #i‚de‡
OPENSSL_NO_EC2M


428 
BN_GF2m_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

429 
	#BN_GF2m_sub
(
r
, 
a
, 
b
Ë
	`BN_GF2m_add
‘,á, b)

	)

433 
BN_GF2m_mod
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
);

435 
BN_GF2m_mod_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

436 c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
);

438 
BN_GF2m_mod_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

440 
BN_GF2m_mod_öv
(
BIGNUM
 *
r
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

442 
BN_GF2m_mod_div
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

443 c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
);

445 
BN_GF2m_mod_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

446 c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
);

448 
BN_GF2m_mod_sqπ
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

449 
BN_CTX
 *
˘x
);

451 
BN_GF2m_mod_sﬁve_quad
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

452 
BN_CTX
 *
˘x
);

453 
	#BN_GF2m_cmp
(
a
, 
b
Ë
	`BN_ucmp
(◊), (b))

	)

461 
BN_GF2m_mod_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° 
p
[]);

463 
BN_GF2m_mod_mul_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

464 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

466 
BN_GF2m_mod_sqr_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° 
p
[],

467 
BN_CTX
 *
˘x
);

469 
BN_GF2m_mod_öv_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
b
, c⁄° 
p
[],

470 
BN_CTX
 *
˘x
);

472 
BN_GF2m_mod_div_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

473 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

475 
BN_GF2m_mod_exp_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

476 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

478 
BN_GF2m_mod_sqπ_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,

479 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

481 
BN_GF2m_mod_sﬁve_quad_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,

482 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

483 
BN_GF2m_pﬁy2¨r
(c⁄° 
BIGNUM
 *
a
, 
p
[], 
max
);

484 
BN_GF2m_¨r2pﬁy
(c⁄° 
p
[], 
BIGNUM
 *
a
);

491 
BN_ni°_mod_192
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

492 
BN_ni°_mod_224
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

493 
BN_ni°_mod_256
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

494 
BN_ni°_mod_384
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

495 
BN_ni°_mod_521
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

497 c⁄° 
BIGNUM
 *
BN_gë0_ni°_¥ime_192
();

498 c⁄° 
BIGNUM
 *
BN_gë0_ni°_¥ime_224
();

499 c⁄° 
BIGNUM
 *
BN_gë0_ni°_¥ime_256
();

500 c⁄° 
BIGNUM
 *
BN_gë0_ni°_¥ime_384
();

501 c⁄° 
BIGNUM
 *
BN_gë0_ni°_¥ime_521
();

503 (*
BN_ni°_mod_func
(c⁄° 
BIGNUM
 *
p
)Ë(BIGNUM *
r
, c⁄° BIGNUM *
a
,

504 c⁄° 
BIGNUM
 *
fõld
, 
BN_CTX
 *
˘x
);

506 
BN_gíî©e_dß_n⁄˚
(
BIGNUM
 *
out
, c⁄° BIGNUM *
ønge
,

507 c⁄° 
BIGNUM
 *
¥iv
, c⁄° *
mesßge
,

508 
size_t
 
mesßge_Àn
, 
BN_CTX
 *
˘x
);

511 
BIGNUM
 *
BN_gë_rfc2409_¥ime_768
(BIGNUM *
bn
);

512 
BIGNUM
 *
BN_gë_rfc2409_¥ime_1024
(BIGNUM *
bn
);

515 
BIGNUM
 *
BN_gë_rfc3526_¥ime_1536
(BIGNUM *
bn
);

516 
BIGNUM
 *
BN_gë_rfc3526_¥ime_2048
(BIGNUM *
bn
);

517 
BIGNUM
 *
BN_gë_rfc3526_¥ime_3072
(BIGNUM *
bn
);

518 
BIGNUM
 *
BN_gë_rfc3526_¥ime_4096
(BIGNUM *
bn
);

519 
BIGNUM
 *
BN_gë_rfc3526_¥ime_6144
(BIGNUM *
bn
);

520 
BIGNUM
 *
BN_gë_rfc3526_¥ime_8192
(BIGNUM *
bn
);

522 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

523 
	#gë_rfc2409_¥ime_768
 
BN_gë_rfc2409_¥ime_768


	)

524 
	#gë_rfc2409_¥ime_1024
 
BN_gë_rfc2409_¥ime_1024


	)

525 
	#gë_rfc3526_¥ime_1536
 
BN_gë_rfc3526_¥ime_1536


	)

526 
	#gë_rfc3526_¥ime_2048
 
BN_gë_rfc3526_¥ime_2048


	)

527 
	#gë_rfc3526_¥ime_3072
 
BN_gë_rfc3526_¥ime_3072


	)

528 
	#gë_rfc3526_¥ime_4096
 
BN_gë_rfc3526_¥ime_4096


	)

529 
	#gë_rfc3526_¥ime_6144
 
BN_gë_rfc3526_¥ime_6144


	)

530 
	#gë_rfc3526_¥ime_8192
 
BN_gë_rfc3526_¥ime_8192


	)

533 
BN_b¡e°_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
, 
bŸtom
);

536 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/cryptoerr.h

11 #i‚de‡
HEADER_CRYPTOERR_H


12 
	#HEADER_CRYPTOERR_H


	)

14 #i‚de‡
HEADER_SYMHACKS_H


15 
	~<›ís¶/symhacks.h
>

18 #ifde‡ 
__˝lu•lus


21 
ERR_lﬂd_CRYPTO_°rögs
();

26 
	#CRYPTO_F_CMAC_CTX_NEW
 120

	)

27 
	#CRYPTO_F_CRYPTO_DUP_EX_DATA
 110

	)

28 
	#CRYPTO_F_CRYPTO_FREE_EX_DATA
 111

	)

29 
	#CRYPTO_F_CRYPTO_GET_EX_NEW_INDEX
 100

	)

30 
	#CRYPTO_F_CRYPTO_MEMDUP
 115

	)

31 
	#CRYPTO_F_CRYPTO_NEW_EX_DATA
 112

	)

32 
	#CRYPTO_F_CRYPTO_OCB128_COPY_CTX
 121

	)

33 
	#CRYPTO_F_CRYPTO_OCB128_INIT
 122

	)

34 
	#CRYPTO_F_CRYPTO_SET_EX_DATA
 102

	)

35 
	#CRYPTO_F_FIPS_MODE_SET
 109

	)

36 
	#CRYPTO_F_GET_AND_LOCK
 113

	)

37 
	#CRYPTO_F_OPENSSL_ATEXIT
 114

	)

38 
	#CRYPTO_F_OPENSSL_BUF2HEXSTR
 117

	)

39 
	#CRYPTO_F_OPENSSL_FOPEN
 119

	)

40 
	#CRYPTO_F_OPENSSL_HEXSTR2BUF
 118

	)

41 
	#CRYPTO_F_OPENSSL_INIT_CRYPTO
 116

	)

42 
	#CRYPTO_F_OPENSSL_LH_NEW
 126

	)

43 
	#CRYPTO_F_OPENSSL_SK_DEEP_COPY
 127

	)

44 
	#CRYPTO_F_OPENSSL_SK_DUP
 128

	)

45 
	#CRYPTO_F_PKEY_HMAC_INIT
 123

	)

46 
	#CRYPTO_F_PKEY_POLY1305_INIT
 124

	)

47 
	#CRYPTO_F_PKEY_SIPHASH_INIT
 125

	)

48 
	#CRYPTO_F_SK_RESERVE
 129

	)

53 
	#CRYPTO_R_FIPS_MODE_NOT_SUPPORTED
 101

	)

54 
	#CRYPTO_R_ILLEGAL_HEX_DIGIT
 102

	)

55 
	#CRYPTO_R_ODD_NUMBER_OF_DIGITS
 103

	)

	@/usr/include/openssl/ebcdic.h

10 #i‚de‡
HEADER_EBCDIC_H


11 
	#HEADER_EBCDIC_H


	)

13 
	~<°dlib.h
>

15 #ifde‡ 
__˝lu•lus


20 
	#os_tﬂscii
 
_›ís¶_os_tﬂscii


	)

21 
	#os_t€bcdic
 
_›ís¶_os_t€bcdic


	)

22 
	#ebcdic2ascii
 
_›ís¶_ebcdic2ascii


	)

23 
	#ascii2ebcdic
 
_›ís¶_ascii2ebcdic


	)

25 c⁄° 
os_tﬂscii
[256];

26 c⁄° 
os_t€bcdic
[256];

27 *
ebcdic2ascii
(*
de°
, c⁄° *
§˚
, 
size_t
 
cou¡
);

28 *
ascii2ebcdic
(*
de°
, c⁄° *
§˚
, 
size_t
 
cou¡
);

30 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/opensslv.h

10 #i‚de‡
HEADER_OPENSSLV_H


11 
	#HEADER_OPENSSLV_H


	)

13 #ifde‡ 
__˝lu•lus


42 
	#OPENSSL_VERSION_NUMBER
 0x1010106fL

	)

43 
	#OPENSSL_VERSION_TEXT
 "O≥nSSL 1.1.1‡ 31 M¨ 2020"

	)

94 
	#SHLIB_VERSION_HISTORY
 ""

	)

95 
	#SHLIB_VERSION_NUMBER
 "1.1"

	)

98 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/safestack.h

10 #i‚de‡
HEADER_SAFESTACK_H


11 
	#HEADER_SAFESTACK_H


	)

13 
	~<›ís¶/°ack.h
>

14 
	~<›ís¶/e_os2.h
>

16 #ifde‡
__˝lu•lus


20 
	#STACK_OF
(
ty≥
Ë
°ack_°_
##
	)
type

22 
	#SKM_DEFINE_STACK_OF
(
t1
, 
t2
, 
t3
) \

23 
	`STACK_OF
(
t1
); \

24 (*
	tsk_
##
	tt1
##
	t_compfunc
)(c⁄° 
	tt3
 * c⁄° *
	ta
, c⁄°Å3 *c⁄° *
	tb
); \

25 (*
	tsk_
##
	tt1
##
	t_‰ìfunc
)(
	tt3
 *
	ta
); \

26 
t3
 * (*
	tsk_
##
	tt1
##
	t_c›yfunc
)(c⁄° 
	tt3
 *
	ta
); \

27 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_num
(c⁄° 
	`STACK_OF
—1Ë*
sk
) \

29  
	`OPENSSL_sk_num
((c⁄° 
OPENSSL_STACK
 *)
sk
); \

31 
os¶_unu£d
 
os¶_ölöe
 
t2
 *
sk_
##
t1
##
	`_vÆue
(c⁄° 
	`STACK_OF
—1Ë*
sk
, 
idx
) \

33  (
t2
 *)
	`OPENSSL_sk_vÆue
((c⁄° 
OPENSSL_STACK
 *)
sk
, 
idx
); \

35 
os¶_unu£d
 
os¶_ölöe
 
	`STACK_OF
(
t1
Ë*
sk_
##t1##
	`_√w
(sk_##t1##
_compfunc
 
com∑ª
) \

37  (
	`STACK_OF
(
t1
Ë*)
	`OPENSSL_sk_√w
((
OPENSSL_sk_compfunc
)
com∑ª
); \

39 
os¶_unu£d
 
os¶_ölöe
 
	`STACK_OF
(
t1
Ë*
sk_
##t1##
	`_√w_nuŒ
() \

41  (
	`STACK_OF
(
t1
Ë*)
	`OPENSSL_sk_√w_nuŒ
(); \

43 
os¶_unu£d
 
os¶_ölöe
 
	`STACK_OF
(
t1
Ë*
sk_
##t1##
	`_√w_ª£rve
(sk_##t1##
_compfunc
 
com∑ª
, 
n
) \

45  (
	`STACK_OF
(
t1
Ë*)
	`OPENSSL_sk_√w_ª£rve
((
OPENSSL_sk_compfunc
)
com∑ª
, 
n
); \

47 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_ª£rve
(
	`STACK_OF
—1Ë*
sk
, 
n
) \

49  
	`OPENSSL_sk_ª£rve
((
OPENSSL_STACK
 *)
sk
, 
n
); \

51 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_‰ì
(
	`STACK_OF
—1Ë*
sk
) \

53 
	`OPENSSL_sk_‰ì
((
OPENSSL_STACK
 *)
sk
); \

55 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_zîo
(
	`STACK_OF
—1Ë*
sk
) \

57 
	`OPENSSL_sk_zîo
((
OPENSSL_STACK
 *)
sk
); \

59 
os¶_unu£d
 
os¶_ölöe
 
t2
 *
sk_
##
t1
##
	`_dñëe
(
	`STACK_OF
—1Ë*
sk
, 
i
) \

61  (
t2
 *)
	`OPENSSL_sk_dñëe
((
OPENSSL_STACK
 *)
sk
, 
i
); \

63 
os¶_unu£d
 
os¶_ölöe
 
t2
 *
sk_
##
t1
##
	`_dñëe_±r
(
	`STACK_OF
—1Ë*
sk
,Å2 *
±r
) \

65  (
t2
 *)
	`OPENSSL_sk_dñëe_±r
((
OPENSSL_STACK
 *)
sk
, \

66 (c⁄° *)
±r
); \

68 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_push
(
	`STACK_OF
—1Ë*
sk
, 
t2
 *
±r
) \

70  
	`OPENSSL_sk_push
((
OPENSSL_STACK
 *)
sk
, (c⁄° *)
±r
); \

72 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_unshi·
(
	`STACK_OF
—1Ë*
sk
, 
t2
 *
±r
) \

74  
	`OPENSSL_sk_unshi·
((
OPENSSL_STACK
 *)
sk
, (c⁄° *)
±r
); \

76 
os¶_unu£d
 
os¶_ölöe
 
t2
 *
sk_
##
t1
##
	`_p›
(
	`STACK_OF
—1Ë*
sk
) \

78  (
t2
 *)
	`OPENSSL_sk_p›
((
OPENSSL_STACK
 *)
sk
); \

80 
os¶_unu£d
 
os¶_ölöe
 
t2
 *
sk_
##
t1
##
	`_shi·
(
	`STACK_OF
—1Ë*
sk
) \

82  (
t2
 *)
	`OPENSSL_sk_shi·
((
OPENSSL_STACK
 *)
sk
); \

84 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_p›_‰ì
(
	`STACK_OF
—1Ë*
sk
, sk_##t1##
_‰ìfunc
 
‰ìfunc
) \

86 
	`OPENSSL_sk_p›_‰ì
((
OPENSSL_STACK
 *)
sk
, (
OPENSSL_sk_‰ìfunc
)
‰ìfunc
); \

88 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_ö£π
(
	`STACK_OF
—1Ë*
sk
, 
t2
 *
±r
, 
idx
) \

90  
	`OPENSSL_sk_ö£π
((
OPENSSL_STACK
 *)
sk
, (c⁄° *)
±r
, 
idx
); \

92 
os¶_unu£d
 
os¶_ölöe
 
t2
 *
sk_
##
t1
##
	`_£t
(
	`STACK_OF
—1Ë*
sk
, 
idx
,Å2 *
±r
) \

94  (
t2
 *)
	`OPENSSL_sk_£t
((
OPENSSL_STACK
 *)
sk
, 
idx
, (c⁄° *)
±r
); \

96 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_föd
(
	`STACK_OF
—1Ë*
sk
, 
t2
 *
±r
) \

98  
	`OPENSSL_sk_föd
((
OPENSSL_STACK
 *)
sk
, (c⁄° *)
±r
); \

100 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_föd_ex
(
	`STACK_OF
—1Ë*
sk
, 
t2
 *
±r
) \

102  
	`OPENSSL_sk_föd_ex
((
OPENSSL_STACK
 *)
sk
, (c⁄° *)
±r
); \

104 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_s‹t
(
	`STACK_OF
—1Ë*
sk
) \

106 
	`OPENSSL_sk_s‹t
((
OPENSSL_STACK
 *)
sk
); \

108 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_is_s‹ãd
(c⁄° 
	`STACK_OF
—1Ë*
sk
) \

110  
	`OPENSSL_sk_is_s‹ãd
((c⁄° 
OPENSSL_STACK
 *)
sk
); \

112 
os¶_unu£d
 
os¶_ölöe
 
	`STACK_OF
(
t1
Ë* 
sk_
##t1##
	`_dup
(c⁄° STACK_OF—1Ë*
sk
) \

114  (
	`STACK_OF
(
t1
Ë*)
	`OPENSSL_sk_dup
((c⁄° 
OPENSSL_STACK
 *)
sk
); \

116 
os¶_unu£d
 
os¶_ölöe
 
	`STACK_OF
(
t1
Ë*
sk_
##t1##
	`_dìp_c›y
(c⁄° STACK_OF—1Ë*
sk
, \

117 
sk_
##
t1
##
_c›yfunc
 
c›yfunc
, \

118 
sk_
##
t1
##
_‰ìfunc
 
‰ìfunc
) \

120  (
	`STACK_OF
(
t1
Ë*)
	`OPENSSL_sk_dìp_c›y
((c⁄° 
OPENSSL_STACK
 *)
sk
, \

121 (
OPENSSL_sk_c›yfunc
)
c›yfunc
, \

122 (
OPENSSL_sk_‰ìfunc
)
‰ìfunc
); \

124 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
_compfunc
 sk_##t1##
	`_£t_cmp_func
(
	`STACK_OF
—1Ë*
sk
, sk_##t1##_compfun¯
com∑ª
) \

126  (
sk_
##
t1
##
_compfunc
)
	`OPENSSL_sk_£t_cmp_func
((
OPENSSL_STACK
 *)
sk
, (
OPENSSL_sk_compfunc
)
com∑ª
); \

127 }

	)

129 
	#DEFINE_SPECIAL_STACK_OF
(
t1
, 
t2
Ë
	`SKM_DEFINE_STACK_OF
—1,Å2,Å2)

	)

130 
	#DEFINE_STACK_OF
(
t
Ë
	`SKM_DEFINE_STACK_OF
—,Å,Å)

	)

131 
	#DEFINE_SPECIAL_STACK_OF_CONST
(
t1
, 
t2
) \

132 
	`SKM_DEFINE_STACK_OF
(
t1
, c⁄° 
t2
,Å2)

	)

133 
	#DEFINE_STACK_OF_CONST
(
t
Ë
	`SKM_DEFINE_STACK_OF
—, c⁄°Å,Å)

	)

149 *
	tOPENSSL_STRING
;

150 c⁄° *
	tOPENSSL_CSTRING
;

159 
DEFINE_SPECIAL_STACK_OF
(
OPENSSL_STRING
, )

160 
DEFINE_SPECIAL_STACK_OF_CONST
(
OPENSSL_CSTRING
, )

166 *
	tOPENSSL_BLOCK
;

167 
DEFINE_SPECIAL_STACK_OF
(
OPENSSL_BLOCK
, )

177 #ifde‡
__SUNPRO_C


178 #¥agm®
wók
 
OPENSSL_sk_num


179 #¥agm®
wók
 
OPENSSL_sk_vÆue


180 #¥agm®
wók
 
OPENSSL_sk_√w


181 #¥agm®
wók
 
OPENSSL_sk_√w_nuŒ


182 #¥agm®
wók
 
OPENSSL_sk_√w_ª£rve


183 #¥agm®
wók
 
OPENSSL_sk_ª£rve


184 #¥agm®
wók
 
OPENSSL_sk_‰ì


185 #¥agm®
wók
 
OPENSSL_sk_zîo


186 #¥agm®
wók
 
OPENSSL_sk_dñëe


187 #¥agm®
wók
 
OPENSSL_sk_dñëe_±r


188 #¥agm®
wók
 
OPENSSL_sk_push


189 #¥agm®
wók
 
OPENSSL_sk_unshi·


190 #¥agm®
wók
 
OPENSSL_sk_p›


191 #¥agm®
wók
 
OPENSSL_sk_shi·


192 #¥agm®
wók
 
OPENSSL_sk_p›_‰ì


193 #¥agm®
wók
 
OPENSSL_sk_ö£π


194 #¥agm®
wók
 
OPENSSL_sk_£t


195 #¥agm®
wók
 
OPENSSL_sk_föd


196 #¥agm®
wók
 
OPENSSL_sk_föd_ex


197 #¥agm®
wók
 
OPENSSL_sk_s‹t


198 #¥agm®
wók
 
OPENSSL_sk_is_s‹ãd


199 #¥agm®
wók
 
OPENSSL_sk_dup


200 #¥agm®
wók
 
OPENSSL_sk_dìp_c›y


201 #¥agm®
wók
 
OPENSSL_sk_£t_cmp_func


204 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/bnerr.h

11 #i‚de‡
HEADER_BNERR_H


12 
	#HEADER_BNERR_H


	)

14 #i‚de‡
HEADER_SYMHACKS_H


15 
	~<›ís¶/symhacks.h
>

18 #ifde‡ 
__˝lu•lus


21 
ERR_lﬂd_BN_°rögs
();

26 
	#BN_F_BNRAND
 127

	)

27 
	#BN_F_BNRAND_RANGE
 138

	)

28 
	#BN_F_BN_BLINDING_CONVERT_EX
 100

	)

29 
	#BN_F_BN_BLINDING_CREATE_PARAM
 128

	)

30 
	#BN_F_BN_BLINDING_INVERT_EX
 101

	)

31 
	#BN_F_BN_BLINDING_NEW
 102

	)

32 
	#BN_F_BN_BLINDING_UPDATE
 103

	)

33 
	#BN_F_BN_BN2DEC
 104

	)

34 
	#BN_F_BN_BN2HEX
 105

	)

35 
	#BN_F_BN_COMPUTE_WNAF
 142

	)

36 
	#BN_F_BN_CTX_GET
 116

	)

37 
	#BN_F_BN_CTX_NEW
 106

	)

38 
	#BN_F_BN_CTX_START
 129

	)

39 
	#BN_F_BN_DIV
 107

	)

40 
	#BN_F_BN_DIV_RECP
 130

	)

41 
	#BN_F_BN_EXP
 123

	)

42 
	#BN_F_BN_EXPAND_INTERNAL
 120

	)

43 
	#BN_F_BN_GENCB_NEW
 143

	)

44 
	#BN_F_BN_GENERATE_DSA_NONCE
 140

	)

45 
	#BN_F_BN_GENERATE_PRIME_EX
 141

	)

46 
	#BN_F_BN_GF2M_MOD
 131

	)

47 
	#BN_F_BN_GF2M_MOD_EXP
 132

	)

48 
	#BN_F_BN_GF2M_MOD_MUL
 133

	)

49 
	#BN_F_BN_GF2M_MOD_SOLVE_QUAD
 134

	)

50 
	#BN_F_BN_GF2M_MOD_SOLVE_QUAD_ARR
 135

	)

51 
	#BN_F_BN_GF2M_MOD_SQR
 136

	)

52 
	#BN_F_BN_GF2M_MOD_SQRT
 137

	)

53 
	#BN_F_BN_LSHIFT
 145

	)

54 
	#BN_F_BN_MOD_EXP2_MONT
 118

	)

55 
	#BN_F_BN_MOD_EXP_MONT
 109

	)

56 
	#BN_F_BN_MOD_EXP_MONT_CONSTTIME
 124

	)

57 
	#BN_F_BN_MOD_EXP_MONT_WORD
 117

	)

58 
	#BN_F_BN_MOD_EXP_RECP
 125

	)

59 
	#BN_F_BN_MOD_EXP_SIMPLE
 126

	)

60 
	#BN_F_BN_MOD_INVERSE
 110

	)

61 
	#BN_F_BN_MOD_INVERSE_NO_BRANCH
 139

	)

62 
	#BN_F_BN_MOD_LSHIFT_QUICK
 119

	)

63 
	#BN_F_BN_MOD_SQRT
 121

	)

64 
	#BN_F_BN_MONT_CTX_NEW
 149

	)

65 
	#BN_F_BN_MPI2BN
 112

	)

66 
	#BN_F_BN_NEW
 113

	)

67 
	#BN_F_BN_POOL_GET
 147

	)

68 
	#BN_F_BN_RAND
 114

	)

69 
	#BN_F_BN_RAND_RANGE
 122

	)

70 
	#BN_F_BN_RECP_CTX_NEW
 150

	)

71 
	#BN_F_BN_RSHIFT
 146

	)

72 
	#BN_F_BN_SET_WORDS
 144

	)

73 
	#BN_F_BN_STACK_PUSH
 148

	)

74 
	#BN_F_BN_USUB
 115

	)

79 
	#BN_R_ARG2_LT_ARG3
 100

	)

80 
	#BN_R_BAD_RECIPROCAL
 101

	)

81 
	#BN_R_BIGNUM_TOO_LONG
 114

	)

82 
	#BN_R_BITS_TOO_SMALL
 118

	)

83 
	#BN_R_CALLED_WITH_EVEN_MODULUS
 102

	)

84 
	#BN_R_DIV_BY_ZERO
 103

	)

85 
	#BN_R_ENCODING_ERROR
 104

	)

86 
	#BN_R_EXPAND_ON_STATIC_BIGNUM_DATA
 105

	)

87 
	#BN_R_INPUT_NOT_REDUCED
 110

	)

88 
	#BN_R_INVALID_LENGTH
 106

	)

89 
	#BN_R_INVALID_RANGE
 115

	)

90 
	#BN_R_INVALID_SHIFT
 119

	)

91 
	#BN_R_NOT_A_SQUARE
 111

	)

92 
	#BN_R_NOT_INITIALIZED
 107

	)

93 
	#BN_R_NO_INVERSE
 108

	)

94 
	#BN_R_NO_SOLUTION
 116

	)

95 
	#BN_R_PRIVATE_KEY_TOO_LARGE
 117

	)

96 
	#BN_R_P_IS_NOT_PRIME
 112

	)

97 
	#BN_R_TOO_MANY_ITERATIONS
 113

	)

98 
	#BN_R_TOO_MANY_TEMPORARY_VARIABLES
 109

	)

	@/usr/include/openssl/stack.h

10 #i‚de‡
HEADER_STACK_H


11 
	#HEADER_STACK_H


	)

13 #ifde‡ 
__˝lu•lus


17 
°ack_°
 
	tOPENSSL_STACK
;

19 (*
OPENSSL_sk_compfunc
)(const *, const *);

20 (*
OPENSSL_sk_‰ìfunc
)(*);

21 *(*
	tOPENSSL_sk_c›yfunc
)(const *);

23 
OPENSSL_sk_num
(c⁄° 
OPENSSL_STACK
 *);

24 *
OPENSSL_sk_vÆue
(c⁄° 
OPENSSL_STACK
 *, );

26 *
OPENSSL_sk_£t
(
OPENSSL_STACK
 *
°
, 
i
, c⁄° *
d©a
);

28 
OPENSSL_STACK
 *
OPENSSL_sk_√w
(
OPENSSL_sk_compfunc
 
cmp
);

29 
OPENSSL_STACK
 *
OPENSSL_sk_√w_nuŒ
();

30 
OPENSSL_STACK
 *
OPENSSL_sk_√w_ª£rve
(
OPENSSL_sk_compfunc
 
c
, 
n
);

31 
OPENSSL_sk_ª£rve
(
OPENSSL_STACK
 *
°
, 
n
);

32 
OPENSSL_sk_‰ì
(
OPENSSL_STACK
 *);

33 
OPENSSL_sk_p›_‰ì
(
OPENSSL_STACK
 *
°
, (*
func
) (*));

34 
OPENSSL_STACK
 *
OPENSSL_sk_dìp_c›y
(const OPENSSL_STACK *,

35 
OPENSSL_sk_c›yfunc
 
c
,

36 
OPENSSL_sk_‰ìfunc
 
f
);

37 
OPENSSL_sk_ö£π
(
OPENSSL_STACK
 *
sk
, c⁄° *
d©a
, 
whîe
);

38 *
OPENSSL_sk_dñëe
(
OPENSSL_STACK
 *
°
, 
loc
);

39 *
OPENSSL_sk_dñëe_±r
(
OPENSSL_STACK
 *
°
, c⁄° *
p
);

40 
OPENSSL_sk_föd
(
OPENSSL_STACK
 *
°
, c⁄° *
d©a
);

41 
OPENSSL_sk_föd_ex
(
OPENSSL_STACK
 *
°
, c⁄° *
d©a
);

42 
OPENSSL_sk_push
(
OPENSSL_STACK
 *
°
, c⁄° *
d©a
);

43 
OPENSSL_sk_unshi·
(
OPENSSL_STACK
 *
°
, c⁄° *
d©a
);

44 *
OPENSSL_sk_shi·
(
OPENSSL_STACK
 *
°
);

45 *
OPENSSL_sk_p›
(
OPENSSL_STACK
 *
°
);

46 
OPENSSL_sk_zîo
(
OPENSSL_STACK
 *
°
);

47 
OPENSSL_sk_compfunc
 
OPENSSL_sk_£t_cmp_func
(
OPENSSL_STACK
 *
sk
,

48 
OPENSSL_sk_compfunc
 
cmp
);

49 
OPENSSL_STACK
 *
OPENSSL_sk_dup
(c⁄° OPENSSL_STACK *
°
);

50 
OPENSSL_sk_s‹t
(
OPENSSL_STACK
 *
°
);

51 
OPENSSL_sk_is_s‹ãd
(c⁄° 
OPENSSL_STACK
 *
°
);

53 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

54 
	#_STACK
 
OPENSSL_STACK


	)

55 
	#sk_num
 
OPENSSL_sk_num


	)

56 
	#sk_vÆue
 
OPENSSL_sk_vÆue


	)

57 
	#sk_£t
 
OPENSSL_sk_£t


	)

58 
	#sk_√w
 
OPENSSL_sk_√w


	)

59 
	#sk_√w_nuŒ
 
OPENSSL_sk_√w_nuŒ


	)

60 
	#sk_‰ì
 
OPENSSL_sk_‰ì


	)

61 
	#sk_p›_‰ì
 
OPENSSL_sk_p›_‰ì


	)

62 
	#sk_dìp_c›y
 
OPENSSL_sk_dìp_c›y


	)

63 
	#sk_ö£π
 
OPENSSL_sk_ö£π


	)

64 
	#sk_dñëe
 
OPENSSL_sk_dñëe


	)

65 
	#sk_dñëe_±r
 
OPENSSL_sk_dñëe_±r


	)

66 
	#sk_föd
 
OPENSSL_sk_föd


	)

67 
	#sk_föd_ex
 
OPENSSL_sk_föd_ex


	)

68 
	#sk_push
 
OPENSSL_sk_push


	)

69 
	#sk_unshi·
 
OPENSSL_sk_unshi·


	)

70 
	#sk_shi·
 
OPENSSL_sk_shi·


	)

71 
	#sk_p›
 
OPENSSL_sk_p›


	)

72 
	#sk_zîo
 
OPENSSL_sk_zîo


	)

73 
	#sk_£t_cmp_func
 
OPENSSL_sk_£t_cmp_func


	)

74 
	#sk_dup
 
OPENSSL_sk_dup


	)

75 
	#sk_s‹t
 
OPENSSL_sk_s‹t


	)

76 
	#sk_is_s‹ãd
 
OPENSSL_sk_is_s‹ãd


	)

79 #ifde‡ 
__˝lu•lus


	@
1
.
1
/usr/include
451
7807
arch/arch-aarch64.h
arch/arch-alpha.h
arch/arch-arm.h
arch/arch-generic.h
arch/arch-hppa.h
arch/arch-ia64.h
arch/arch-mips.h
arch/arch-ppc.h
arch/arch-s390.h
arch/arch-sh.h
arch/arch-sparc.h
arch/arch-sparc64.h
arch/arch-x86-common.h
arch/arch-x86.h
arch/arch-x86_64.h
arch/arch.h
backend.c
blktrace.c
blktrace.h
blktrace_api.h
cairo_text_helpers.c
cairo_text_helpers.h
cconv.c
cgroup.c
cgroup.h
client.c
client.h
compiler/compiler.h
config-host.h
crc/crc16.c
crc/crc16.h
crc/crc32.c
crc/crc32.h
crc/crc32c-arm64.c
crc/crc32c-intel.c
crc/crc32c.c
crc/crc32c.h
crc/crc64.c
crc/crc64.h
crc/crc7.c
crc/crc7.h
crc/fnv.c
crc/fnv.h
crc/md5.c
crc/md5.h
crc/murmur3.c
crc/murmur3.h
crc/sha1.c
crc/sha1.h
crc/sha256.c
crc/sha256.h
crc/sha3.c
crc/sha3.h
crc/sha512.c
crc/sha512.h
crc/test.c
crc/test.h
crc/xxhash.c
crc/xxhash.h
debug.c
debug.h
dedupe.c
dedupe.h
diskutil.c
diskutil.h
engines/cmdprio.c
engines/cmdprio.h
engines/cpu.c
engines/dev-dax.c
engines/dfs.c
engines/e4defrag.c
engines/exec.c
engines/falloc.c
engines/fileoperations.c
engines/ftruncate.c
engines/gfapi.h
engines/glusterfs.c
engines/glusterfs_async.c
engines/glusterfs_sync.c
engines/http.c
engines/ime.c
engines/io_uring.c
engines/libaio.c
engines/libcufile.c
engines/libhdfs.c
engines/libiscsi.c
engines/libpmem.c
engines/librpma_apm.c
engines/librpma_fio.c
engines/librpma_fio.h
engines/librpma_fio_pmem.h
engines/librpma_fio_pmem2.h
engines/librpma_gpspm.c
engines/librpma_gpspm_flush.pb-c.c
engines/librpma_gpspm_flush.pb-c.h
engines/libzbc.c
engines/mmap.c
engines/mtd.c
engines/nbd.c
engines/net.c
engines/nfs.c
engines/null.c
engines/nvme.c
engines/nvme.h
engines/pmemblk.c
engines/posixaio.c
engines/rados.c
engines/rbd.c
engines/rdma.c
engines/sg.c
engines/skeleton_external.c
engines/solarisaio.c
engines/splice.c
engines/sync.c
engines/windowsaio.c
engines/xnvme.c
err.h
eta.c
exp/test-expression-parser.c
fifo.c
fifo.h
file.h
filehash.c
filehash.h
filelock.c
filelock.h
filesetup.c
fio.c
fio.h
fio_sem.c
fio_sem.h
fio_time.h
flist.h
flow.c
flow.h
gclient.c
gclient.h
gcompat.c
gcompat.h
gerror.c
gerror.h
gettime-thread.c
gettime.c
gettime.h
gfio.c
gfio.h
ghelpers.c
ghelpers.h
goptions.c
goptions.h
graph.c
graph.h
hash.h
helper_thread.c
helper_thread.h
helpers.c
helpers.h
idletime.c
idletime.h
init.c
io_ddir.h
io_u.c
io_u.h
io_u_queue.c
io_u_queue.h
ioengines.c
ioengines.h
iolog.c
iolog.h
json.c
json.h
lex.yy.c
lib/axmap.c
lib/axmap.h
lib/bloom.c
lib/bloom.h
lib/bswap.h
lib/ffz.h
lib/flist_sort.c
lib/fls.h
lib/gauss.c
lib/gauss.h
lib/getrusage.c
lib/getrusage.h
lib/hweight.c
lib/hweight.h
lib/ieee754.c
lib/ieee754.h
lib/lfsr.c
lib/lfsr.h
lib/memalign.c
lib/memalign.h
lib/memcpy.c
lib/memcpy.h
lib/mountcheck.c
lib/mountcheck.h
lib/nowarn_snprintf.h
lib/num2str.c
lib/num2str.h
lib/output_buffer.c
lib/output_buffer.h
lib/pattern.c
lib/pattern.h
lib/pow2.h
lib/prio_tree.c
lib/prio_tree.h
lib/rand.c
lib/rand.h
lib/rbtree.c
lib/rbtree.h
lib/roundup.h
lib/seqlock.h
lib/strntol.c
lib/strntol.h
lib/types.h
lib/zipf.c
lib/zipf.h
libfio.c
log.c
log.h
memory.c
minmax.h
optgroup.c
optgroup.h
options.c
options.h
os/kcompat.h
os/linux/io_uring.h
os/os-aix.h
os/os-ashmem.h
os/os-dragonfly.h
os/os-freebsd.h
os/os-hpux.h
os/os-linux-syscall.h
os/os-linux.h
os/os-mac.h
os/os-netbsd.h
os/os-openbsd.h
os/os-solaris.h
os/os-windows-7.h
os/os-windows.h
os/os.h
os/windows/cpu-affinity.c
os/windows/dlls.c
os/windows/posix.c
os/windows/posix.h
os/windows/posix/include/arpa/inet.h
os/windows/posix/include/asm/types.h
os/windows/posix/include/dirent.h
os/windows/posix/include/dlfcn.h
os/windows/posix/include/libgen.h
os/windows/posix/include/netdb.h
os/windows/posix/include/netinet/in.h
os/windows/posix/include/netinet/tcp.h
os/windows/posix/include/poll.h
os/windows/posix/include/semaphore.h
os/windows/posix/include/sys/ioctl.h
os/windows/posix/include/sys/ipc.h
os/windows/posix/include/sys/mman.h
os/windows/posix/include/sys/resource.h
os/windows/posix/include/sys/shm.h
os/windows/posix/include/sys/socket.h
os/windows/posix/include/sys/uio.h
os/windows/posix/include/sys/un.h
os/windows/posix/include/sys/wait.h
os/windows/posix/include/syslog.h
oslib/asprintf.c
oslib/asprintf.h
oslib/blkzoned.h
oslib/getopt.h
oslib/getopt_long.c
oslib/inet_aton.c
oslib/inet_aton.h
oslib/libmtd.c
oslib/libmtd.h
oslib/libmtd_common.h
oslib/libmtd_int.h
oslib/libmtd_legacy.c
oslib/libmtd_xalloc.h
oslib/linux-blkzoned.c
oslib/linux-dev-lookup.c
oslib/linux-dev-lookup.h
oslib/statx.c
oslib/statx.h
oslib/strcasestr.c
oslib/strcasestr.h
oslib/strlcat.c
oslib/strlcat.h
oslib/strndup.c
oslib/strndup.h
oslib/strsep.c
oslib/strsep.h
parse.c
parse.h
printing.c
printing.h
profile.c
profile.h
profiles/act.c
profiles/tiobench.c
pshared.c
pshared.h
rate-submit.c
rate-submit.h
rwlock.c
rwlock.h
server.c
server.h
smalloc.c
smalloc.h
stat.c
stat.h
steadystate.c
steadystate.h
t/arch.c
t/axmap.c
t/btrace2fio.c
t/debug.c
t/debug.h
t/dedupe.c
t/fuzz/fuzz_parseini.c
t/fuzz/onefile.c
t/gen-rand.c
t/genzipf.c
t/ieee754.c
t/io_uring.c
t/lfsr-test.c
t/log.c
t/memlock.c
t/read-to-pipe-async.c
t/stest.c
t/time-test.c
t/verify-state.c
td_error.c
td_error.h
thread_options.h
tickmarks.c
tickmarks.h
time.c
trim.c
trim.h
unittests/lib/memalign.c
unittests/lib/num2str.c
unittests/lib/strntol.c
unittests/oslib/strcasestr.c
unittests/oslib/strlcat.c
unittests/oslib/strndup.c
unittests/oslib/strsep.c
unittests/unittest.c
unittests/unittest.h
verify-state.h
verify.c
verify.h
workqueue.c
workqueue.h
y.tab.c
y.tab.h
zbd.c
zbd.h
zbd_types.h
zone-dist.c
zone-dist.h
/usr/include/aio.h
/usr/include/alloca.h
/usr/include/arpa/inet.h
/usr/include/assert.h
/usr/include/byteswap.h
/usr/include/ctype.h
/usr/include/dirent.h
/usr/include/dlfcn.h
/usr/include/elf.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/inttypes.h
/usr/include/libgen.h
/usr/include/libintl.h
/usr/include/limits.h
/usr/include/linux/blkzoned.h
/usr/include/linux/falloc.h
/usr/include/linux/fs.h
/usr/include/linux/limits.h
/usr/include/linux/major.h
/usr/include/linux/mempolicy.h
/usr/include/linux/nvme_ioctl.h
/usr/include/linux/shm.h
/usr/include/linux/stat.h
/usr/include/linux/types.h
/usr/include/linux/unistd.h
/usr/include/locale.h
/usr/include/malloc.h
/usr/include/math.h
/usr/include/mntent.h
/usr/include/mtd/mtd-user.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/netinet/tcp.h
/usr/include/openssl/hmac.h
/usr/include/openssl/md5.h
/usr/include/openssl/sha.h
/usr/include/poll.h
/usr/include/pthread.h
/usr/include/sched.h
/usr/include/scsi/sg.h
/usr/include/semaphore.h
/usr/include/setjmp.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/syslog.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/zlib.h
/usr/include/asm-generic/hugetlb_encode.h
/usr/include/endian.h
/usr/include/linux/errno.h
/usr/include/linux/fscrypt.h
/usr/include/linux/ioctl.h
/usr/include/linux/ipc.h
/usr/include/linux/mount.h
/usr/include/linux/posix_types.h
/usr/include/mtd/mtd-abi.h
/usr/include/openssl/e_os2.h
/usr/include/openssl/evp.h
/usr/include/paths.h
/usr/include/rpc/netdb.h
/usr/include/stdc-predef.h
/usr/include/strings.h
/usr/include/zconf.h
/usr/include/linux/stddef.h
/usr/include/openssl/bio.h
/usr/include/openssl/evperr.h
/usr/include/openssl/objects.h
/usr/include/openssl/ossl_typ.h
/usr/include/openssl/symhacks.h
/usr/include/openssl/asn1.h
/usr/include/openssl/bioerr.h
/usr/include/openssl/crypto.h
/usr/include/openssl/obj_mac.h
/usr/include/openssl/objectserr.h
/usr/include/openssl/asn1err.h
/usr/include/openssl/bn.h
/usr/include/openssl/cryptoerr.h
/usr/include/openssl/ebcdic.h
/usr/include/openssl/opensslv.h
/usr/include/openssl/safestack.h
/usr/include/openssl/bnerr.h
/usr/include/openssl/stack.h
